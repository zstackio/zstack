#!/bin/sh

usage() {
    echo "usage:$0 [deploydb|deploy|xml-java-schema|premium|sdk|doc|docpremium|md|mdpremium|openapi|errorcode|check]"
}

MVNTest="mvn test -Djacoco.skip=true"

py() {
    if [ -d premium/test-premium ]; then
        cd premium/test-premium
    else
        cd test
    fi

    $MVNTest -Dtest=TestGenerateApiPythonClassAndJsonTemplate
    cd - > /dev/null
}

pysdk() {
    if [ -d premium/test-premium ]; then
        cd premium/test-premium
    else
        cd test
    fi

    $MVNTest -Dtest=TestGeneratePythonSDK
    cd - > /dev/null
}

apihelper() {
    cd test
    $MVNTest -Dtest=TestGenerateApiHelper
    cd - > /dev/null
    cp ~/ApiHelper.groovy testlib/src/main/java/org/zstack/testlib/ApiHelper.groovy

    echo "ApiHelper.groovy is generated at ~/ApiHelper.groovy"
}


doc() {
    cd test
    $MVNTest -Dtest=TestGenerateDocTemplate
    cd - > /dev/null
}

openapi() {
    if [ ! -d premium/test-premium ]; then
	echo "opensource version doesn't have this tool"
        exit 1
    fi

    cd tool/doclet
    mvn -Dmaven.test.skip=true package
    cd -

    javadoc -private -doclet org.zstack.tool.doclet.JsonDocLet -docletpath tool/doclet/target/doclet-*-jar-with-dependencies.jar  $(find -name *.java)

    DOC_OUTPUT=`echo ~/zstack-doclet-output.json`
    if [ ! -f $DOC_OUTPUT ]; then
       echo "$DOC_OUTPUT not found"
       exit 1
    fi

    cd premium/test-premium
    $MVNTest -Dtest=GenerateSwaggerSpec -DdocletDoc=$DOC_OUTPUT
    cd -

    echo ""
    echo ""
    echo ""
    echo "***********************************************"
    echo "openapi spec generated at ~/zstack-api.yaml"
    echo "***********************************************"
}

docpremium() {
    if [ -d premium/test-premium ]; then
        cd premium/test-premium
    else
        cd test
    fi
    $MVNTest -Dtest=TestGenerateDocTemplate -Drepair=true
    cd - > /dev/null
}

check() {
    if [ ! -d premium/test-premium ]; then
        echo "this command needs premium source code"
    fi
    cd premium/test-premium
    $MVNTest -Dtest=BasicCheckTestSuite -Drepair=true
    cd - > /dev/null
}

md() {
    cd test
    $MVNTest -Dtest=TestGenerateMarkDownDoc
    cd - > /dev/null
}

mdpremium() {
    if [ -d premium/test-premium ]; then
        cd premium/test-premium
    else
        cd test
    fi

    $MVNTest -Dtest=TestGenerateMarkDownDoc
    cd - > /dev/null
}

errorcode() {
    cd test
    mvn test -Dtest=TestGenerateErrorCodeDoc
    cd - > /dev/null
}

i18njson() {
    ./build/zsi18n -s . -j conf/i18n.json
}

i18n() {
    ./build/zsi18n  -j conf/i18n.json -d conf/i18n/
}

foreignkey() {
    set -u
    if [ -d premium/test-premium ]; then
        cd premium/test-premium
    else
    	cd test
    fi

    $MVNTest -Dtest=TestGenerateSqlForeignKey
    cd - > /dev/null

    echo "see ~/zstack-sql/foreignKeys.sql"
}

triggerexpression() {
   if [ ! -d premium/mevoco ]; then
	echo "this command needs premium source code"
        exit 1
   fi

   cd premium/mevoco
   mvn -P trigger-expression generate-sources
   mkdir -p src/main/java/org/zstack/monitoring/trigger/expression/antlr4
   yes | cp target/generated-sources/antlr4/TriggerExpression* src/main/java/org/zstack/monitoring/trigger/expression/antlr4
   rm -f target/generated-sources/antlr4/TriggerExpression*
   cd - > /dev/null
}

zql() {
   cd search
   mvn -P zql generate-sources
   if [ $? -ne 0 ]; then
	exit 1
   fi
   mkdir -p src/main/java/org/zstack/zql/antlr4/
   yes | cp target/generated-sources/antlr4/* src/main/java/org/zstack/zql/antlr4/
   rm -f target/generated-sources/antlr4/*
   mvn -Dmaven.test.skip=true clean install
   cd - > /dev/null
}

cloudwatchfunction() {
   if [ ! -d premium/zwatch ]; then
	echo "this command needs premium source code"
        exit 1
   fi

   cd premium/zwatch
   mvn -P function generate-sources
   mkdir -p src/main/java/org/zstack/zwatch/api/antlr4/
   yes | cp target/generated-sources/antlr4/MetricFunction* src/main/java/org/zstack/zwatch/api/antlr4/
   rm -f target/generated-sources/antlr4/MetricFunction*
   cd - > /dev/null
}

zwatchzql() {
   if [ ! -d premium/zwatch ]; then
	echo "this command needs premium source code"
        exit 1
   fi

   cd premium/zwatch
   mvn -P function generate-sources
   mkdir -p src/main/java/org/zstack/zwatch/returnwith/antlr4/
   yes | cp target/generated-sources/antlr4/ReturnWith* src/main/java/org/zstack/zwatch/returnwith/antlr4/
   rm -f target/generated-sources/antlr4/ReturnWith*
   cd - > /dev/null
}

ts() {
    if [ -d premium/test-premium ]; then
   	cd premium/test-premium
    	$MVNTest -Dtest=TestGenerateTypescriptBindings -Djacoco.skip=true
        cd -
    fi
}

sdk() {
    set -u
    rm -rf ~/zstack-sdk/java
    if [ -d premium/test-premium ]; then
   	cd premium/test-premium
    else
    	cd test
    fi
    
    $MVNTest -Dtest=TestGenerateSDK -Djacoco.skip=true
    if [ $? -ne 0 ]; then
	echo "if you see a compile error, you may try to compile and install the sdk module first"
	exit 1
    fi
    cd - > /dev/null

    cd sdk/src/main/java/org/zstack/sdk/
    find . -type f  | grep -E -v "(ZSClient|ZSConfig|ApiException|AsyncRestState|Completion|Constants|ErrorCode|ErrorCodeList|InternalCompletion|ApiResult|Param|RestInfo|AbstractAction|QueryAction).java" | xargs rm -f
    cd -
    yes | cp -r ~/zstack-sdk/java/* sdk/src/main/java/
    set +u
}

run_profile() {
    if test x$1 = x'premium'; then
        mvn -Dmaven.test.skip=true -P premium clean install
    elif test x$1 = x'md'; then
	md
    elif test x$1 = x'sdk'; then
        sdk
    elif test x$1 = x'doc'; then
	doc
    elif test x$1 = x'docpremium'; then
        docpremium
    elif test x$1 = x'check'; then
        check
    elif test x$1 = x'md'; then
        md
    elif test x$1 = x'mdpremium'; then
        mdpremium 
    elif test x$1 = x'py'; then
	py
    elif test x$1 = x'pysdk'; then
	pysdk
    elif test x$1 = x'apihelper'; then
	apihelper
    elif test x$1 = x'i18njson'; then
	i18njson
    elif test x$1 = x'i18n'; then
	i18n
    elif test x$1 = x'foreignkey'; then
	foreignkey
    elif test x$1 = x'triggerexpression'; then
	triggerexpression
    elif test x$1 = x'zql'; then
        zql
    elif test x$1 = x'cloudwatchfunction'; then
	    cloudwatchfunction
    elif test x$1 = x'zwatchzql'; then
	    zwatchzql
    elif test x$1 = x'openapi'; then
        openapi
    elif test x$1 = x'errorcode'; then
        errorcode
    elif test x$1 = x'ts'; then
        ts
    else
        mvn -pl build -P $1 exec:exec -D$1
    fi
}

if [ "$#" -eq 0 ]; then
    usage
    exit 1
fi

for cmd in $@
do
    run_profile ${cmd}
done
