[
  {
    "raw": "no pemission to do the operation for [accountUuid:%s, userUuid:%s]",
    "en_US": "no pemission to do the operation for [accountUuid:{0}, userUuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "accountUuid",
      "userUuid"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "If a specified Accesskey is expected, the AccesskeyId and the AccesskeySecret must be provided at the same time.",
    "en_US": "If a specified Accesskey is expected, the AccesskeyId and the AccesskeySecret must be provided at the same time.",
    "zh_CN": "",
    "arguments": [],
    "line": 51,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "[accountId: %s, userID: %s] is not valid account or iam2 porject/user",
    "en_US": "[accountId: {0}, userID: {1}] is not valid account or iam2 porject/user",
    "zh_CN": "",
    "arguments": [
      "msg.getAccountUuid()",
      "msg.getUserUuid()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "accessKey number for [accountId: %s, userID: %s]exceeds the max",
    "en_US": "accessKey number for [accountId: {0}, userID: {1}]exceeds the max",
    "zh_CN": "",
    "arguments": [
      "msg.getAccountUuid()",
      "msg.getUserUuid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "not support the ip version %d",
    "en_US": "not support the ip version {0}",
    "zh_CN": "不支持的IP版本{0}",
    "arguments": [
      "ipVer"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "%s duplicate/overlap ip entry with access-control-list group:%s",
    "en_US": "{0} duplicate/overlap ip entry with access-control-list group:{1}",
    "zh_CN": "{0}中有和访问控制组{1}里的ip重复/重叠",
    "arguments": [
      "ips",
      "acl.getUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "ip format only supports ip/iprange/cidr, but find %s",
    "en_US": "ip format only supports ip/iprange/cidr, but find {0}",
    "zh_CN": "只支持IP地址/IP段/IP网络的格式，不支持{0}",
    "arguments": [
      "ips"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "ip range[%s, %s] is overlap with [%s, %s] in access-control-list group:%s",
    "en_US": "ip range[{0}, {1}] is overlap with [{2}, {3}] in access-control-list group:{4}",
    "zh_CN": "IP段[{0}，{1}]和访问控制组：{4}里的[{2}, {3}]有重叠的ip",
    "arguments": [
      "startIp",
      "endIp",
      "NetworkUtils.longToIpv4String(r.lowerEndpoint())",
      "NetworkUtils.longToIpv4String(r.upperEndpoint())",
      "acl.getUuid()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[%s] can\u0027t be added more than %d ip entries",
    "en_US": "the access-control-list groups[{0}] can\u0027t be added more than {1} ip entries",
    "zh_CN": "访问控制组[{0}]最多只能添加{1}ip组",
    "arguments": [
      "acl.getUuid()",
      "AccessControlListConstants.MAX_ENTRY_COUNT_PER_GROUP"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "cannot connect to [%s] in %d milliseconds, so aliyun openapi is unreachable.",
    "en_US": "cannot connect to [{0}] in {1} milliseconds, so aliyun openapi is unreachable.",
    "zh_CN": "",
    "arguments": [
      "builder.deleteCharAt(builder.length() - 1)",
      "timeout"
    ],
    "line": 348,
    "fileName": "src/main/java/org/zstack/aliyun/account/AliyunAccountBase.java"
  },
  {
    "raw": "no bucket found for backup",
    "en_US": "no bucket found for backup",
    "zh_CN": "没有可用的Bucket执行备份",
    "arguments": [],
    "line": 465,
    "fileName": "src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java"
  },
  {
    "raw": "accessKey and keySecret must be set",
    "en_US": "accessKey and keySecret must be set",
    "zh_CN": "必须设置accessKey和keySecret",
    "arguments": [],
    "line": 28,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java"
  },
  {
    "raw": "ocean api endpoint must not be null",
    "en_US": "ocean api endpoint must not be null",
    "zh_CN": "",
    "arguments": [],
    "line": 73,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java"
  },
  {
    "raw": "accessKey and keySecret must be set!",
    "en_US": "accessKey and keySecret must be set!",
    "zh_CN": "",
    "arguments": [],
    "line": 33,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunNasClient.java"
  },
  {
    "raw": "regionId must be set!",
    "en_US": "regionId must be set!",
    "zh_CN": "",
    "arguments": [],
    "line": 40,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunNasClient.java"
  },
  {
    "raw": "cannot find key / secret from msg",
    "en_US": "cannot find key / secret from msg",
    "zh_CN": "",
    "arguments": [],
    "line": 238,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "entry is still existed after %s ms",
    "en_US": "entry is still existed after {0} ms",
    "zh_CN": "虚拟路由器删除超时（{0} ms）",
    "arguments": [
      "AliyunConstant.DEFAULT_ENTRY_WAIT_STATUS_TIMEOUT"
    ],
    "line": 2131,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "cannot find EcsInstance[%s], please check if it exists in Aliyun console",
    "en_US": "cannot find EcsInstance[{0}], please check if it exists in Aliyun console",
    "zh_CN": "",
    "arguments": [
      "request.getInstanceIds()"
    ],
    "line": 2637,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "image already existed remote, please use sync first.",
    "en_US": "image already existed remote, please use sync first.",
    "zh_CN": "镜像已经存在阿里云服务器上，请尝试同步数据",
    "arguments": [],
    "line": 2697,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "no identity zones can be used now",
    "en_US": "no identity zones can be used now",
    "zh_CN": "没有可用区能使用",
    "arguments": [],
    "line": 2883,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "regionId[%s] is invalid by aliyun!",
    "en_US": "regionId[{0}] is invalid by aliyun!",
    "zh_CN": "regionId[{0}]是无效的！",
    "arguments": [
      "request.getRegionId()"
    ],
    "line": 3019,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "Not a valid message!",
    "en_US": "Not a valid message!",
    "zh_CN": "",
    "arguments": [],
    "line": 63,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "%s failed, ErrorCode: %s, ErrorMessage: %s",
    "en_US": "{0} failed, ErrorCode: {1}, ErrorMessage: {2}",
    "zh_CN": "",
    "arguments": [
      "action",
      "result.ErrorCode",
      "result.ErrorMessage"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "Device Not Ready in %d milli seconds",
    "en_US": "Device Not Ready in {0} milli seconds",
    "zh_CN": "",
    "arguments": [
      "15000"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "snapshot task status is finished %s",
    "en_US": "snapshot task status is finished {0}",
    "zh_CN": "",
    "arguments": [
      "result.Content.TaskStatus"
    ],
    "line": 476,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "snapshot task cannot finished in %d milliseconds, now progress is %d, status is %s",
    "en_US": "snapshot task cannot finished in {0} milliseconds, now progress is {1}, status is {2}",
    "zh_CN": "",
    "arguments": [
      "msg.getTimeout()",
      "result.Content.Progress",
      "result.Content.TaskStatus"
    ],
    "line": 472,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "not supported HybridClient",
    "en_US": "not supported HybridClient",
    "zh_CN": "",
    "arguments": [],
    "line": 877,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "add endpoint to sdk failed, due to: %s",
    "en_US": "add endpoint to sdk failed, due to: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 263,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunUtils.java"
  },
  {
    "raw": "cannot input 0-length file as vm images!",
    "en_US": "cannot input 0-length file as vm images!",
    "zh_CN": "",
    "arguments": [],
    "line": 407,
    "fileName": "src/main/java/org/zstack/aliyun/core/OssSdkImpl.java"
  },
  {
    "raw": "Permission denied for: %s",
    "en_US": "Permission denied for: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 496,
    "fileName": "src/main/java/org/zstack/aliyun/core/OssSdkImpl.java"
  },
  {
    "raw": "Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: %s)",
    "en_US": "Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: {0})",
    "zh_CN": "Bucket名称已经存在（可能已经被别的用户使用了），请尝试使用一个新的命名。（阿里云请求ID: {0}）",
    "arguments": [
      "e.getRequestId()"
    ],
    "line": 585,
    "fileName": "src/main/java/org/zstack/aliyun/core/OssSdkImpl.java"
  },
  {
    "raw": "arg \u0027endpoint\u0027 must be set in %s type",
    "en_US": "arg \u0027endpoint\u0027 must be set in {0} type",
    "zh_CN": "",
    "arguments": [
      "HybridType.AliyunEBS.toString()"
    ],
    "line": 277,
    "fileName": "src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java"
  },
  {
    "raw": "not supported datacenter [%s] type here!",
    "en_US": "not supported datacenter [{0}] type here!",
    "zh_CN": "",
    "arguments": [
      "type.toString()"
    ],
    "line": 332,
    "fileName": "src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java"
  },
  {
    "raw": "must indicate zoneId in private aliyun.",
    "en_US": "must indicate zoneId in private aliyun.",
    "zh_CN": "",
    "arguments": [],
    "line": 252,
    "fileName": "src/main/java/org/zstack/aliyun/core/identityzone/AliyunPrivateIdentityZoneBase.java"
  },
  {
    "raw": "make ocean api signature string failed: %s",
    "en_US": "make ocean api signature string failed: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/OceanApi.java"
  },
  {
    "raw": "url(ocean endpoint) must be set for aliyun ebs backupstorage",
    "en_US": "url(ocean endpoint) must be set for aliyun ebs backupstorage",
    "zh_CN": "",
    "arguments": [],
    "line": 30,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageApiInterceptor.java"
  },
  {
    "raw": "aliyun ebs backup storage do not support to cancel download image",
    "en_US": "aliyun ebs backup storage do not support to cancel download image",
    "zh_CN": "",
    "arguments": [],
    "line": 376,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java"
  },
  {
    "raw": "no such object %s found in bucket %s",
    "en_US": "no such object {0} found in bucket {1}",
    "zh_CN": "",
    "arguments": [
      "objectFile",
      "ovo.getBucketName()"
    ],
    "line": 620,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java"
  },
  {
    "raw": "cannot delete oss bucket [%s], Aliyun Ebs BackupStorage [%s] still existed, please delete it first.",
    "en_US": "cannot delete oss bucket [{0}], Aliyun Ebs BackupStorage [{1}] still existed, please delete it first.",
    "zh_CN": "",
    "arguments": [
      "oss.getUuid()",
      "evo.getUuid()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageCascadeExtenstion.java"
  },
  {
    "raw": "cannot find device path from volume: %s",
    "en_US": "cannot find device path from volume: {0}",
    "zh_CN": "",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java"
  },
  {
    "raw": "aliyun ebs not support resize on running vm now.",
    "en_US": "aliyun ebs not support resize on running vm now.",
    "zh_CN": "",
    "arguments": [],
    "line": 490,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java"
  },
  {
    "raw": "iso [%s] has been attached, we can not attach it until detach it",
    "en_US": "iso [{0}] has been attached, we can not attach it until detach it",
    "zh_CN": "",
    "arguments": [
      "isoUuid"
    ],
    "line": 612,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java"
  },
  {
    "raw": "url must starts with http:// or https://, but got %s",
    "en_US": "url must starts with http:// or https://, but got {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "url(ocean endpoint) must be set for aliyun ebs primarystorage",
    "en_US": "url(ocean endpoint) must be set for aliyun ebs primarystorage",
    "zh_CN": "",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "panguPartitionUuid or identityZoneUuid must be set.",
    "en_US": "panguPartitionUuid or identityZoneUuid must be set.",
    "zh_CN": "",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "panguPartitionUuid [%s] not be matched with identityZoneUuid [%s]",
    "en_US": "panguPartitionUuid [{0}] not be matched with identityZoneUuid [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getPanguPartitionUuid()",
      "msg.getIdentityZoneUuid()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "image [uuid:%s] has been deleted",
    "en_US": "image [uuid:{0}] has been deleted",
    "zh_CN": "镜像[uuid:{0}]已经被删除",
    "arguments": [
      "imageVO.getUuid()"
    ],
    "line": 3189,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "resource[uuid: %s] cannot found",
    "en_US": "resource[uuid: {0}] cannot found",
    "zh_CN": "",
    "arguments": [
      "msg.getResourceUuid()"
    ],
    "line": 3762,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "the aliyun ebs primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the aliyun ebs primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 674,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "create snapshot timeout, progress is %d",
    "en_US": "create snapshot timeout, progress is {0}",
    "zh_CN": "",
    "arguments": [
      "reply1.getProgress()"
    ],
    "line": 2829,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find snapshot from image: %s, maybe the image has been deleted",
    "en_US": "cannot find snapshot from image: {0}, maybe the image has been deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getVolume().getRootImageUuid()"
    ],
    "line": 1925,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "ebs primarystorage cannot support decrease size now",
    "en_US": "ebs primarystorage cannot support decrease size now",
    "zh_CN": "",
    "arguments": [],
    "line": 2687,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "aliyun ebs primarystorage only support aliyun ebs bs, actually get type: %s",
    "en_US": "aliyun ebs primarystorage only support aliyun ebs bs, actually get type: {0}",
    "zh_CN": "",
    "arguments": [
      "bsvo.getType()"
    ],
    "line": 3089,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "cannot delete identity zone [%s], Aliyun Ebs PrimaryStorage [%s] still existed, please delete it first.",
    "en_US": "cannot delete identity zone [{0}], Aliyun Ebs PrimaryStorage [{1}] still existed, please delete it first.",
    "zh_CN": "",
    "arguments": [
      "iz.getUuid()",
      "evo.getUuid()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageCascadeExtension.java"
  },
  {
    "raw": "invalid install path: %s",
    "en_US": "invalid install path: {0}",
    "zh_CN": "",
    "arguments": [
      "installPath"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "append volumeId: %s, but another volumeId existed in url: %s",
    "en_US": "append volumeId: {0}, but another volumeId existed in url: {1}",
    "zh_CN": "",
    "arguments": [
      "volumeId",
      "url"
    ],
    "line": 24,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "invalid install url: %s",
    "en_US": "invalid install url: {0}",
    "zh_CN": "",
    "arguments": [
      "url"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "hostUuid [%s] already existed in url: %s",
    "en_US": "hostUuid [{0}] already existed in url: {1}",
    "zh_CN": "",
    "arguments": [
      "hostUuid",
      "url"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "cannot find devicePath on host: %s",
    "en_US": "cannot find devicePath on host: {0}",
    "zh_CN": "",
    "arguments": [
      "hostUuid"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "invalid snapshot install path: %s",
    "en_US": "invalid snapshot install path: {0}",
    "zh_CN": "",
    "arguments": [
      "installPath"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "ecs image existed remote and local, ecs image uuid: %s, name: %s, created time: %s",
    "en_US": "ecs image existed remote and local, ecs image uuid: {0}, name: {1}, created time: {2}",
    "zh_CN": "云主机镜像存在于阿里云服务器和本地，云主机镜像的uuid: {0}，名称: {1}，创建时间: {2}",
    "arguments": [
      "eivo.getUuid()",
      "eivo.getName()",
      "eivo.getCreateDate()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java"
  },
  {
    "raw": "ecs image existed remote, name: %s, created time: %s",
    "en_US": "ecs image existed remote, name: {0}, created time: {1}",
    "zh_CN": "云主机镜像已经存在于阿里云服务器上，名称: {0}，创建时间: {1}",
    "arguments": [
      "msg.getName()",
      "new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").format(HybridUtilsForAliyun.fmtTime(rpl.getCreateDate()))"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java"
  },
  {
    "raw": "No Available instance types now.",
    "en_US": "No Available instance types now.",
    "zh_CN": "没有可用的实例类型",
    "arguments": [],
    "line": 181,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java"
  },
  {
    "raw": "no system disk found for ecs: [%s], ecs id is: [%s]",
    "en_US": "no system disk found for ecs: [{0}], ecs id is: [{1}]",
    "zh_CN": "没有系统云盘可用来创建云主机，云主机id是: [{1}]",
    "arguments": [
      "ecs.getUuid()",
      "ecs.getEcsInstanceId()"
    ],
    "line": 304,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java"
  },
  {
    "raw": "Only delete ecs which status is running or stopped, now is %s",
    "en_US": "Only delete ecs which status is running or stopped, now is {0}",
    "zh_CN": "只能删除状态为运行中或者已停止的云主机，现在云主机状态为{0}",
    "arguments": [
      "evo.getEcsStatus().toString()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "Only postpaid ecs support delete remote, the indicate ecs charge type is: %s",
    "en_US": "Only postpaid ecs support delete remote, the indicate ecs charge type is: {0}",
    "zh_CN": "只有已付费的云主机支持删除，目前云主机付费状态是: {0}",
    "arguments": [
      "evo.getChargeType().toString()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "Only admin can set parameter [onlyZstack] \u003d false",
    "en_US": "Only admin can set parameter [onlyZstack] \u003d false",
    "zh_CN": "只有管理员能设置[onlyZsatck]参数为false",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "vSwitch availableIpAddress is not enough, now is (%d)",
    "en_US": "vSwitch availableIpAddress is not enough, now is ({0})",
    "zh_CN": "虚拟交换机可用IP地址不够，现有IP地址数量({0})",
    "arguments": [
      "evo.getAvailableIpAddressCount()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not in cidr range: %s",
    "en_US": "{0} is not in cidr range: {1}",
    "zh_CN": "{0}没有在CIDR范围中: {1}",
    "arguments": [
      "privateIp",
      "cidr"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "private ip is existed in vswitch: %s, allocated to ecs: %s",
    "en_US": "private ip is existed in vswitch: {0}, allocated to ecs: {1}",
    "zh_CN": "私有IP已经存在虚拟交换机中: {0}，已分配给云主机: {1}",
    "arguments": [
      "vSwitchUuid",
      "ecs.getUuid()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "bandwidth must be set while allocate publicIp",
    "en_US": "bandwidth must be set while allocate publicIp",
    "zh_CN": "当分配公有IP时带宽必须被设置",
    "arguments": [],
    "line": 137,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not ipv4 address",
    "en_US": "{0} is not ipv4 address",
    "zh_CN": "{0}不是一个ipv4地址",
    "arguments": [
      "msg.getPrivateIpAddress()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not valid volume type, valid types are [%s]",
    "en_US": "{0} is not valid volume type, valid types are [{1}]",
    "zh_CN": "{0}不是有效的云盘类型，有效的云盘类型有[{1}]",
    "arguments": [
      "msg.getEcsRootVolumeType()",
      "EcsInstanceConstant.validVolumeCategory.toString()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "instanceOffering or instanceType must be set!",
    "en_US": "instanceOffering or instanceType must be set!",
    "zh_CN": "计算规格和实例类型必须被设置",
    "arguments": [],
    "line": 147,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "decode url failed: %s",
    "en_US": "decode url failed: {0}",
    "zh_CN": "url解码失败: {0}",
    "arguments": [
      "rly1.getVncUrl()"
    ],
    "line": 384,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java"
  },
  {
    "raw": "image has been deleted!",
    "en_US": "image has been deleted!",
    "zh_CN": "",
    "arguments": [],
    "line": 52,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/ExportImageFromBSFlow.java"
  },
  {
    "raw": "no identity chosen, may be stock problems",
    "en_US": "no identity chosen, may be stock problems",
    "zh_CN": "没有可用区选择，可能是存储问题",
    "arguments": [],
    "line": 50,
    "fileName": "src/main/java/org/zstack/aliyun/identityzone/SelectValidIdentityZoneFlow.java"
  },
  {
    "raw": "the operation only custom image",
    "en_US": "the operation only custom image",
    "zh_CN": "这个操作只能对用户自己的镜像进行",
    "arguments": [],
    "line": 71,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "Only system disks can create mirrors",
    "en_US": "Only system disks can create mirrors",
    "zh_CN": "只有系统云盘可以创建快照",
    "arguments": [],
    "line": 80,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "can not delete ecs system image remote",
    "en_US": "can not delete ecs system image remote",
    "zh_CN": "不能删除阿里云服务器上的云主机系统镜像",
    "arguments": [],
    "line": 131,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "Only support ImageStoreBackupStorage",
    "en_US": "Only support ImageStoreBackupStorage",
    "zh_CN": "用本地镜像创建阿里云上的镜像只支持ImageStore镜像存储",
    "arguments": [],
    "line": 142,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "image name cannot starts with http:// or https://",
    "en_US": "image name cannot starts with http:// or https://",
    "zh_CN": "镜像名称不可以以http://或https://开始",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "no backup storage found for imageUuid: %s",
    "en_US": "no backup storage found for imageUuid: {0}",
    "zh_CN": "未找到uuid为{0}的镜像服务器",
    "arguments": [
      "imageUuid"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "exceeded backup storage found for the imageUuid: %s, please indicate it manually",
    "en_US": "exceeded backup storage found for the imageUuid: {0}, please indicate it manually",
    "zh_CN": "发现多个存在镜像uuid为{0}的镜像服务器，请尝试指定镜像服务器",
    "arguments": [
      "imageUuid"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "valid platform:[%s] for aliyun image import, valid value are: [%s]",
    "en_US": "valid platform:[{0}] for aliyun image import, valid value are: [{1}]",
    "zh_CN": "有效的导入阿里云镜像平台: [{0}]，有效值是[{1}]",
    "arguments": [
      "platform",
      "EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "image [%s] is not enable now",
    "en_US": "image [{0}] is not enable now",
    "zh_CN": "镜像[{0}]不可用",
    "arguments": [
      "ivo.getUuid()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "no ossbucket attached to the datacenter: %s",
    "en_US": "no ossbucket attached to the datacenter: {0}",
    "zh_CN": "没有oss Bucket添加到数据中心{0}",
    "arguments": [
      "msg.getDataCenterUuid()"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java"
  },
  {
    "raw": "the indicated image [%s] is importing to datacenter [%s] now...",
    "en_US": "the indicated image [{0}] is importing to datacenter [{1}] now...",
    "zh_CN": "指定的镜像[{0}]正在被导入到数据中心[{1}]中...",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getDataCenterUuid()"
    ],
    "line": 361,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java"
  },
  {
    "raw": "PrimaryStorage [%s] still running, can not delete access group",
    "en_US": "PrimaryStorage [{0}] still running, can not delete access group",
    "zh_CN": "",
    "arguments": [
      "psUuids.toString()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/aliyun/nas/core/AliyunNasApiInterceptor.java"
  },
  {
    "raw": "access group rule [%s] already existed in access group [%s]",
    "en_US": "access group rule [{0}] already existed in access group [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getSourceCidrIp()",
      "msg.getAccessGroupUuid()"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java"
  },
  {
    "raw": "access group [%s] already existed in datacenter [%s]",
    "en_US": "access group [{0}] already existed in datacenter [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getName()",
      "msg.getDataCenterUuid()"
    ],
    "line": 849,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java"
  },
  {
    "raw": "no filesystem [%s] found in region: %s",
    "en_US": "no filesystem [{0}] found in region: {1}",
    "zh_CN": "",
    "arguments": [
      "self.getFileSystemId()",
      "regionId"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java"
  },
  {
    "raw": "nas filesystem existed in datacenter: %s",
    "en_US": "nas filesystem existed in datacenter: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getDataCenterUuid()"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java"
  },
  {
    "raw": "some primary storage [%s] used this nas, can not delete it until delete the primary storage.",
    "en_US": "some primary storage [{0}] used this nas, can not delete it until delete the primary storage.",
    "zh_CN": "",
    "arguments": [
      "refs.toString()"
    ],
    "line": 304,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java"
  },
  {
    "raw": "mount domain not valid after %d milliseconds, delete it...",
    "en_US": "mount domain not valid after {0} milliseconds, delete it...",
    "zh_CN": "",
    "arguments": [
      "cmsg.getWait()"
    ],
    "line": 314,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "there are no nas access group existed, please create at least one",
    "en_US": "there are no nas access group existed, please create at least one",
    "zh_CN": "",
    "arguments": [],
    "line": 422,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "no such mount target [%s] in nas: %s",
    "en_US": "no such mount target [{0}] in nas: {1}",
    "zh_CN": "",
    "arguments": [
      "self.getMountDomain()",
      "self.getNasFileSystemUuid()"
    ],
    "line": 404,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "nas mount target [%s] existed in filesystem: %s",
    "en_US": "nas mount target [{0}] existed in filesystem: {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getMountDomain()",
      "msg.getNasFSUuid()"
    ],
    "line": 472,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "the access group attached is already: %s",
    "en_US": "the access group attached is already: {0}",
    "zh_CN": "",
    "arguments": [
      "self.getAccessGroupUuid()"
    ],
    "line": 512,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "EcsVSwitchVO[%s] is not existed, may be it has been deleted!",
    "en_US": "EcsVSwitchVO[{0}] is not existed, may be it has been deleted!",
    "zh_CN": "",
    "arguments": [
      "vSwitchUuid"
    ],
    "line": 534,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "AliyunNasAccessGroupVO[%s] is not existed, may be it has been deleted!",
    "en_US": "AliyunNasAccessGroupVO[{0}] is not existed, may be it has been deleted!",
    "zh_CN": "",
    "arguments": [
      "accessGroupUuid"
    ],
    "line": 527,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "cannot find an available host to operation in primary storage: %s",
    "en_US": "cannot find an available host to operation in primary storage: {0}",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 826,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "failed to ping aliyun nas primary storage[uuid:%s] from host[uuid:%s],because %s. disconnect this host-ps connection",
    "en_US": "failed to ping aliyun nas primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "hostUuid",
      "rsp.error"
    ],
    "line": 905,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "nas primary storage not mounted, please init it first!",
    "en_US": "nas primary storage not mounted, please init it first!",
    "zh_CN": "",
    "arguments": [],
    "line": 1393,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "cannot find any BackupStorageKvmFactory for the type[%s]",
    "en_US": "cannot find any BackupStorageKvmFactory for the type[{0}]",
    "zh_CN": "",
    "arguments": [
      "bsType"
    ],
    "line": 1577,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "cannot find host to operate volume: [%s]",
    "en_US": "cannot find host to operate volume: [{0}]",
    "zh_CN": "",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 2003,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "cannot find and host to sync volume size in primary: %s",
    "en_US": "cannot find and host to sync volume size in primary: {0}",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2240,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "image [%s] has been deleted, cannot reinit root volume from it",
    "en_US": "image [{0}] has been deleted, cannot reinit root volume from it",
    "zh_CN": "",
    "arguments": [],
    "line": 2267,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "no available host could check mountPath!",
    "en_US": "no available host could check mountPath!",
    "zh_CN": "",
    "arguments": [],
    "line": 2422,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "unable to allocate backup storage specified by uuids: %s, becasue: %s",
    "en_US": "unable to allocate backup storage specified by uuids: {0}, becasue: {1}",
    "zh_CN": "不能给uuid列表{0}分配镜像服务器，因为{1}",
    "arguments": [
      "String.join(\",\", msg.getBackupStorageUuids())",
      "errorCodes.getCauses().get(0).getDetails()"
    ],
    "line": 2649,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "aliyun nas primarystorage only support imagestore bs, actually get type: %s",
    "en_US": "aliyun nas primarystorage only support imagestore bs, actually get type: {0}",
    "zh_CN": "",
    "arguments": [
      "bsvo.getType()"
    ],
    "line": 2817,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "unable to attach a primary storage to cluster. Kvm host[uuid:%s, name:%s] in cluster has qemu-img with version[%s]; but the primary storage has attached to a cluster that has kvm host[uuid:%s], which has qemu-img with version[%s]. qemu-img version greater than %s is incompatible with versions less than %s, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "en_US": "unable to attach a primary storage to cluster. Kvm host[uuid:{0}, name:{1}] in cluster has qemu-img with version[{2}]; but the primary storage has attached to a cluster that has kvm host[uuid:{3}], which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "zh_CN": "不能挂载主存储到集群。集群中的物理机[uuid:{0}, name:{1}]拥有[{2}]版本的qemu-img；但是主存储已经挂载到拥有[{4}]版本qemu-img的集群上。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群",
    "arguments": [
      "context.getInventory().getUuid()",
      "context.getInventory().getName()",
      "mine",
      "e.getKey()",
      "version",
      "QCOW3_QEMU_IMG_VERSION",
      "QCOW3_QEMU_IMG_VERSION"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java"
  },
  {
    "raw": "no available host could download imagecache!",
    "en_US": "no available host could download imagecache!",
    "zh_CN": "",
    "arguments": [],
    "line": 342,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java"
  },
  {
    "raw": "the aliyun nas primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "the aliyun nas primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for delete bits on primarystorage",
    "en_US": "the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for delete bits on primarystorage",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "the Aliyun Nas primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the Aliyun Nas primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 555,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "failed to check mount path on host: %s",
    "en_US": "failed to check mount path on host: {0}",
    "zh_CN": "",
    "arguments": [
      "hostUuid"
    ],
    "line": 856,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find a host to cleanup image cache.",
    "en_US": "cannot find a host to cleanup image cache.",
    "zh_CN": "",
    "arguments": [],
    "line": 943,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "ecs instance[%s] isn\u0027t existed, please check it.",
    "en_US": "ecs instance[{0}] isn\u0027t existed, please check it.",
    "zh_CN": "云主机[{0}]不存在，请进行核查",
    "arguments": [
      "eipVo.getAllocateResourceUuid()"
    ],
    "line": 533,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [%s] status is [%s] now ",
    "en_US": "Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [{0}] status is [{1}] now ",
    "zh_CN": "只有正在运行或已停止状态的云主机才能绑定弹性IP，但是云主机[{0}]状态为[{1}]",
    "arguments": [
      "ecsVo.getUuid()",
      "ecsVo.getEcsStatus()"
    ],
    "line": 537,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "virtual border: %s has been deleted",
    "en_US": "virtual border: {0} has been deleted",
    "zh_CN": "边界路由器: {0}已经被删除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 2860,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "destination cidr [%s] is existed and point to another instance-id [%s], please check or delete it first",
    "en_US": "destination cidr [{0}] is existed and point to another instance-id [{1}], please check or delete it first",
    "zh_CN": "目标CIDR[{0}]已经存在且指向其他云主机[{1}]，请检查或删除它",
    "arguments": [
      "tupleCidr",
      "msg.getNextHopUuid()"
    ],
    "line": 3389,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Only esc instances that are in the running and stopped status can attach the eip , but the ecs [%s] status is [%s] now ",
    "en_US": "Only esc instances that are in the running and stopped status can attach the eip , but the ecs [{0}] status is [{1}] now ",
    "zh_CN": "只有正在运行或已停止状态的云主机才能绑定弹性IP，但是云主机[{0}]状态为[{1}]",
    "arguments": [
      "evo.getUuid()",
      "evo.getEcsStatus()"
    ],
    "line": 3902,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Vbr: [%s] is in create connection progress, please wait...",
    "en_US": "Vbr: [{0}] is in create connection progress, please wait...",
    "zh_CN": "虚拟边界路由器: [{0}]正在创建连接中，请稍后...",
    "arguments": [
      "msg.getVbrUuid()"
    ],
    "line": 585,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/AliyunConnectionManagerImpl.java"
  },
  {
    "raw": "custom cidr [%s] is already existed in vbr [%s], it is overlapped with target cidr [%s], please check and delete it first.",
    "en_US": "custom cidr [{0}] is already existed in vbr [{1}], it is overlapped with target cidr [{2}], please check and delete it first.",
    "zh_CN": "自定义CIDR[{0]已经存在于虚拟边界路由器[{1}]，它已经和目标CIDR[{2}]重叠了，请检查然后删除它",
    "arguments": [
      "tuple.get(0, String.class)",
      "msg.getVbrUuid()",
      "vpcCidr"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java"
  },
  {
    "raw": "custom cidr [%s] is already existed in vrouter [%s], it is overlapped with target cidr [%s], please check and delete it first.",
    "en_US": "custom cidr [{0}] is already existed in vrouter [{1}], it is overlapped with target cidr [{2}], please check and delete it first.",
    "zh_CN": "原始的CIDR[{0}]已经存在于虚拟路由器中[{1}]，已经被目标CIDR所覆盖，请先检验然后删除它",
    "arguments": [
      "tuple.get(0, String.class)",
      "vRouterUuid",
      "cidr"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java"
  },
  {
    "raw": "No Such Cidr found for l3network: %s",
    "en_US": "No Such Cidr found for l3network: {0}",
    "zh_CN": "未找到三层网络{0}对应的CIDR",
    "arguments": [
      "msg.getL3networkUuid()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java"
  },
  {
    "raw": "No Such VRouter nic found for l3network: %s",
    "en_US": "No Such VRouter nic found for l3network: {0}",
    "zh_CN": "未找到三层网络{0}对应的虚拟路由器网卡",
    "arguments": [
      "msg.getL3networkUuid()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java"
  },
  {
    "raw": "no such vpc found for: %s",
    "en_US": "no such vpc found for: {0}",
    "zh_CN": "未找到该VPC: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such vm found for: %s",
    "en_US": "no such vm found for: {0}",
    "zh_CN": "没有找到该云主机: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such vbr found for: %s",
    "en_US": "no such vbr found for: {0}",
    "zh_CN": "没有找到该虚拟边界路由器: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such l3network found for: %s",
    "en_US": "no such l3network found for: {0}",
    "zh_CN": "没有找到该三层网络: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "not a supported resource type: %s",
    "en_US": "not a supported resource type: {0}",
    "zh_CN": "不支持资源类型: {0}",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "Only admin can create connections",
    "en_US": "Only admin can create connections",
    "zh_CN": "只有admin才能创建连接",
    "arguments": [],
    "line": 68,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "CpeIp must be ipv4 address, but now is %s",
    "en_US": "CpeIp must be ipv4 address, but now is {0}",
    "zh_CN": "CpeIp必须是ipv4地址，但是现在是{0}",
    "arguments": [
      "msg.getCpeIp()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "cpeIp must be ipv4 address",
    "en_US": "cpeIp must be ipv4 address",
    "zh_CN": "cpeIp必须是ipv4地址",
    "arguments": [],
    "line": 76,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "l3network %s and vpc %s already connected, please check it",
    "en_US": "l3network {0} and vpc {1} already connected, please check it",
    "zh_CN": "三层网络{0}和vpc{1}已经连接",
    "arguments": [
      "msg.getL3networkUuid()",
      "msg.getVpcUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "vpn gateway and user gateway are not in the same dataCenterUuid!",
    "en_US": "vpn gateway and user gateway are not in the same dataCenterUuid!",
    "zh_CN": "vpn网关和用户网关不是同一个dataCenterUuid",
    "arguments": [],
    "line": 955,
    "fileName": "src/main/java/org/zstack/aliyun/network/vpn/AliyunVpcVpnBase.java"
  },
  {
    "raw": "ossBucket [%s] is already added in dataCenter [%s]",
    "en_US": "ossBucket [{0}] is already added in dataCenter [{1}]",
    "zh_CN": "oss Bucket[{0]已经被添加数据中心[{1}]",
    "arguments": [
      "msg.getBucketName()",
      "msg.getDataCenterUuid()"
    ],
    "line": 33,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java"
  },
  {
    "raw": "OssBucket[%s] is not attached.",
    "en_US": "OssBucket[{0}] is not attached.",
    "zh_CN": "oss Bucket[{0}]没有被添加",
    "arguments": [
      "ovo.getUuid()"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java"
  },
  {
    "raw": "domain, key, secret must be set all",
    "en_US": "domain, key, secret must be set all",
    "zh_CN": "",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java"
  },
  {
    "raw": "oss bucket is not empty!",
    "en_US": "oss bucket is not empty!",
    "zh_CN": "oss Bucket不为空",
    "arguments": [],
    "line": 106,
    "fileName": "src/main/java/org/zstack/aliyun/oss/OssBucketCascadeExtension.java"
  },
  {
    "raw": "appName: %s, partitionName: %s is existed in identityZone: %s",
    "en_US": "appName: {0}, partitionName: {1} is existed in identityZone: {2}",
    "zh_CN": "",
    "arguments": [
      "appName",
      "partitionName",
      "vo.getIdentityZoneUuid()"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/aliyun/pangu/AliyunPanguApiInterceptor.java"
  },
  {
    "raw": "Root volume cannot be deleted",
    "en_US": "Root volume cannot be deleted",
    "zh_CN": "根云盘不能被删除",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is cloud and portable property is false",
    "en_US": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is cloud and portable property is false",
    "zh_CN": "当云盘的category属性是cloud且portable为false，不能设置云盘的deleteWithInstance属性为false",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is ephemeral",
    "en_US": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is ephemeral",
    "zh_CN": "当云盘的category属性为ephemeral时，不能设置云盘的deleteWithInstance属性为false",
    "arguments": [],
    "line": 78,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk [%s] is not attach on any instance ",
    "en_US": "The disk [{0}] is not attach on any instance ",
    "zh_CN": "该云盘[{0}]没有加载到任何云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The state of the ecs [%s] instance must be running or stopped",
    "en_US": "The state of the ecs [{0}] instance must be running or stopped",
    "zh_CN": "云主机[{0}]的状态必须是运行或者已停止",
    "arguments": [
      "msg.getEcsUuid()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Only data disk can be mounted on ecs",
    "en_US": "Only data disk can be mounted on ecs",
    "zh_CN": "只有数据云盘可以挂装到云主机上",
    "arguments": [],
    "line": 105,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk not be attach on any ecs",
    "en_US": "The disk not be attach on any ecs",
    "zh_CN": "该云盘没有加载到任何云主机",
    "arguments": [],
    "line": 109,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Non-independent disk can only be destroyed with instances",
    "en_US": "Non-independent disk can only be destroyed with instances",
    "zh_CN": "未独立的云盘只能和云主机一起删除",
    "arguments": [],
    "line": 143,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Disk and ecs instances must be in the same zone",
    "en_US": "Disk and ecs instances must be in the same zone",
    "zh_CN": "云盘和云主机必须在相同的区域下",
    "arguments": [],
    "line": 126,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk [%s] is already mounted on the instance [%s]",
    "en_US": "The disk [{0}] is already mounted on the instance [{1}]",
    "zh_CN": "云盘[{0}]已经安装到云服务器实例[{1}]",
    "arguments": [
      "msg.getDiskUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Only data disk can attach to ecs",
    "en_US": "Only data disk can attach to ecs",
    "zh_CN": "只有数据云盘能加载到云服务器",
    "arguments": [],
    "line": 135,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot attach disk when in use",
    "en_US": "Cannot attach disk when in use",
    "zh_CN": "不能加载正在使用的云盘",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.",
    "en_US": "The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.",
    "zh_CN": "在请求参数中size和快照id必须选择一项以便于指定磁盘大小或创建一个快照使用的磁盘",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Not allowed create disk on root volume snapshot",
    "en_US": "Not allowed create disk on root volume snapshot",
    "zh_CN": "不允许在根云盘快照上创建云盘",
    "arguments": [],
    "line": 167,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "the disk name or description cannot set start with \u0027http://\u0027 or \u0027https://\u0027 ",
    "en_US": "the disk name or description cannot set start with \u0027http://\u0027 or \u0027https://\u0027 ",
    "zh_CN": "云盘名称和介绍不能以http://或https://开头",
    "arguments": [],
    "line": 176,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The operation allows only when ecs state of the ecs instance status be running or stopped",
    "en_US": "The operation allows only when ecs state of the ecs instance status be running or stopped",
    "zh_CN": "当云主机态为运行中或已停止时该操作才被允许",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/aliyun/storage/snapshot/AliyunSnapshotApiInterceptor.java"
  },
  {
    "raw": "More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:%s] existing. The BackupStorage type to be added is %s. ",
    "en_US": "More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. ",
    "zh_CN": "有超过一个镜像服务器拥有相同的主机名，已经存在一个 SFTP 镜像服务器 [主机名:{0}]，被添加的镜像存储类型为 {1}",
    "arguments": [
      "hostname",
      "newBS"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/apimediator/ApiValidator.java"
  },
  {
    "raw": "More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:%s] existing. The BackupStorage type to be added is %s. ",
    "en_US": "More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. ",
    "zh_CN": "有超过一个镜像服务器拥有相同的主机名，已经存在一个镜像服务器 [主机名:{0}]，被添加的镜像存储类型为 {1}",
    "arguments": [
      "hostname",
      "newBS"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/apimediator/ApiValidator.java"
  },
  {
    "raw": "appliance vm[uuid:%s] is in status of %s that cannot make http call to %s",
    "en_US": "appliance vm[uuid:{0}] is in status of {1} that cannot make http call to {2}",
    "zh_CN": "系统虚拟机[uuid:{0}]处于{1}状态，无法对[{2}]执行HTTP RPC调用",
    "arguments": [
      "self.getUuid()",
      "getSelf().getStatus()",
      "msg.getPath()"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s stopped",
    "en_US": "appliance vm {0} stopped",
    "zh_CN": "",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 413,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s destroyed",
    "en_US": "appliance vm {0} destroyed",
    "zh_CN": "",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 482,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s reboot",
    "en_US": "appliance vm {0} reboot",
    "zh_CN": "",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 543,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s reboot failed",
    "en_US": "appliance vm {0} reboot failed",
    "zh_CN": "",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 553,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s start failed",
    "en_US": "appliance vm {0} start failed",
    "zh_CN": "",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 606,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "listener[uuid:%s] are being used by the autoScalingVmTemplate[%s] and cannot be deleted",
    "en_US": "listener[uuid:{0}] are being used by the autoScalingVmTemplate[{1}] and cannot be deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()",
      "uuid"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java"
  },
  {
    "raw": "alarm[uuid:%s] are being used by the autoScalingGroup[%s] which cannot be deleted",
    "en_US": "alarm[uuid:{0}] are being used by the autoScalingGroup[{1}] which cannot be deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getAlarmUuid()",
      "ruleVO.getScalingGroupUuid()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java"
  },
  {
    "raw": "rule[%s] state is Disabled",
    "en_US": "rule[{0}] state is Disabled",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java"
  },
  {
    "raw": "invalid l3 network uuids[%s] for listener that belongs lb[%s], all the networks must be attached the LB service and be attached with the same vRouter with LB",
    "en_US": "invalid l3 network uuids[{0}] for listener that belongs lb[{1}], all the networks must be attached the LB service and be attached with the same vRouter with LB",
    "zh_CN": "",
    "arguments": [
      "l3Uuids",
      "uuid"
    ],
    "line": 314,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java"
  },
  {
    "raw": "detach autoScalingTemplate[%s] from AutoScalingGroup failed, errors are %s",
    "en_US": "detach autoScalingTemplate[{0}] from AutoScalingGroup failed, errors are {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getTemplateUuid()",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 626,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java"
  },
  {
    "raw": "rootDiskOfferingUuid cannot be null when image mediaType is ISO",
    "en_US": "rootDiskOfferingUuid cannot be null when image mediaType is ISO",
    "zh_CN": "根云盘规格不能为空在镜像类型为ISO时",
    "arguments": [],
    "line": 933,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "instance offering[uuid:%s] is Disabled, can\u0027t create vm from it",
    "en_US": "instance offering[uuid:{0}] is Disabled, can\u0027t create vm from it",
    "zh_CN": "计算规格[uuid:{0}]没有被启用，不能根据该规格创建云主机",
    "arguments": [
      "instanceOfferingVO.getUuid()"
    ],
    "line": 913,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "instance offering[uuid:%s, type:%s] is not UserVm type, can\u0027t create vm from it",
    "en_US": "instance offering[uuid:{0}, type:{1}] is not UserVm type, can\u0027t create vm from it",
    "zh_CN": "计算规格[uuid:{0}, type:{1}]不是UserVm类型，不能通过它创建虚拟机",
    "arguments": [
      "instanceOfferingVO.getUuid()",
      "instanceOfferingVO.getType()"
    ],
    "line": 916,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "image[uuid:%s] is Disabled, can\u0027t create vm from it",
    "en_US": "image[uuid:{0}] is Disabled, can\u0027t create vm from it",
    "zh_CN": "镜像[uuid:{0}]没被启用，不能根据该镜像创建云主机",
    "arguments": [
      "imageVO.getUuid()"
    ],
    "line": 924,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "image[uuid:%s] is not ready yet, can\u0027t create vm from it",
    "en_US": "image[uuid:{0}] is not ready yet, can\u0027t create vm from it",
    "zh_CN": "",
    "arguments": [
      "imageVO.getUuid()"
    ],
    "line": 927,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "image[uuid:%s] is of mediaType: %s, only RootVolumeTemplate and ISO can be used to create vm",
    "en_US": "image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate and ISO can be used to create vm",
    "zh_CN": "镜像[uuid:{0}] 类型为{1}，只能用RootVolumeTemplate和ISO来创建云主机",
    "arguments": [
      "imageVO.getUuid()",
      "imageVO.getMediaType()"
    ],
    "line": 930,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "image[uuid:%s] is system image, can\u0027t be used to create user vm",
    "en_US": "image[uuid:{0}] is system image, can\u0027t be used to create user vm",
    "zh_CN": "镜像[uuid:{0}] 是系统镜像，不能使用它创建用户虚拟机",
    "arguments": [
      "imageVO.getUuid()"
    ],
    "line": 937,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "disk offerings[uuids:%s] are Disabled, can not create vm from it",
    "en_US": "disk offerings[uuids:{0}] are Disabled, can not create vm from it",
    "zh_CN": "云盘规格[uuids:{0}]没有被启用，不能使用它创建云主机",
    "arguments": [
      "diskOfferingVO.getUuid()"
    ],
    "line": 949,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "l3Network[uuid:%s] is Disabled, can not create vm on it",
    "en_US": "l3Network[uuid:{0}] is Disabled, can not create vm on it",
    "zh_CN": "L3网络[uuid:{0}]没有被启用，不能从这个L3网络创建云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 963,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "l3Network[uuid:%s] is system network, can not create user vm on it",
    "en_US": "l3Network[uuid:{0}] is system network, can not create user vm on it",
    "zh_CN": "L3网络[uuid:{0}]是系统网络，不能在这上面创建云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 966,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null",
    "en_US": "there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null",
    "zh_CN": "在L3网络uuid们中有很多L3网络被指定了，但是默认L3网络的uuid是空的",
    "arguments": [],
    "line": 970,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "Only one scaling activity can be executed in the same scaling group at the same time.",
    "en_US": "Only one scaling activity can be executed in the same scaling group at the same time.",
    "zh_CN": "",
    "arguments": [],
    "line": 409,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "The number of instances exceeds the limit",
    "en_US": "The number of instances exceeds the limit",
    "zh_CN": "",
    "arguments": [],
    "line": 1330,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "autoScalingGroup[%s] create vms failed completely, errors are %s",
    "en_US": "autoScalingGroup[{0}] create vms failed completely, errors are {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getAutoScalingGroupUuid()",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 637,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "add vm nic to loadBalancer failed, No loadBalancer[uuids\u003d%s] can be found.",
    "en_US": "add vm nic to loadBalancer failed, No loadBalancer[uuids\u003d{0}] can be found.",
    "zh_CN": "",
    "arguments": [
      "loadBalancerListenerUuidListStr"
    ],
    "line": 685,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "autoScalingGroup[%s] add newly created vm to loadBalancer failed completely, errors are %s",
    "en_US": "autoScalingGroup[{0}] add newly created vm to loadBalancer failed completely, errors are {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getAutoScalingGroupUuid()",
      "JSONObjectUtil.toJsonString(addVmNicToLoadBalancerErrorCodes)"
    ],
    "line": 724,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "add vm nic to securityGroup failed, No securityGroup[uuid\u003d%s] can be found.",
    "en_US": "add vm nic to securityGroup failed, No securityGroup[uuid\u003d{0}] can be found.",
    "zh_CN": "",
    "arguments": [
      "securityGroupUuid"
    ],
    "line": 759,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "autoScalingGroup[%s] add newly created vm to securityGroup failed completely, errors are %s",
    "en_US": "autoScalingGroup[{0}] add newly created vm to securityGroup failed completely, errors are {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getAutoScalingGroupUuid()",
      "JSONObjectUtil.toJsonString(addVmNicToSecurityGroupErrorCodes)"
    ],
    "line": 795,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:AutoScalingVmTemplateVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:AutoScalingVmTemplateVO] not found",
    "zh_CN": "",
    "arguments": [
      "templateGroupRefVO.getTemplateUuid()"
    ],
    "line": 905,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:InstanceOfferingVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:InstanceOfferingVO] not found",
    "zh_CN": "",
    "arguments": [
      "vmTemplateVO.getVmInstanceOfferingUuid()"
    ],
    "line": 910,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:ImageVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:ImageVO] not found",
    "zh_CN": "",
    "arguments": [
      "vmTemplateVO.getImageUuid()"
    ],
    "line": 921,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:DiskOfferingVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:DiskOfferingVO] not found",
    "zh_CN": "",
    "arguments": [
      "diskOfferingVO.getUuid()"
    ],
    "line": 945,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:L3NetworkVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:L3NetworkVO] not found",
    "zh_CN": "",
    "arguments": [
      "l3Uuid"
    ],
    "line": 958,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "defaultL3NetworkUuid[uuid:%s] is not in l3NetworkUuids %s",
    "en_US": "defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids {1}",
    "zh_CN": "",
    "arguments": [
      "vmTemplateVO.getDefaultL3NetworkUuid()",
      "l3Uuids"
    ],
    "line": 974,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "the auto scaling group[%s] state error, expected: %s state",
    "en_US": "the auto scaling group[{0}] state error, expected: {1} state",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "AutoScalingGroupState.Enabled.toString()"
    ],
    "line": 1047,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "The autoScalingGroup[%s] not attach any vm template",
    "en_US": "The autoScalingGroup[{0}] not attach any vm template",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1084,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "autoScalingGroup[%s] destroy vms[%s] failed completely, errors are %s",
    "en_US": "autoScalingGroup[{0}] destroy vms[{1}] failed completely, errors are {2}",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "vmInstanceUuids",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 1138,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "Cannot find deleted target instance list",
    "en_US": "Cannot find deleted target instance list",
    "zh_CN": "",
    "arguments": [],
    "line": 1343,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "need skip autoScalingGroup activity",
    "en_US": "need skip autoScalingGroup activity",
    "zh_CN": "",
    "arguments": [],
    "line": 1569,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "delete autoScalingRule[%s] triggers failed, errors are %s",
    "en_US": "delete autoScalingRule[{0}] triggers failed, errors are {1}",
    "zh_CN": "",
    "arguments": [
      "ruleUuid",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 1820,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "Unsupported RemovalPolicy[%s] type",
    "en_US": "Unsupported RemovalPolicy[{0}] type",
    "zh_CN": "",
    "arguments": [
      "removalPolicy.toString()"
    ],
    "line": 2437,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "IPMI Address %s is not valid",
    "en_US": "IPMI Address {0} is not valid",
    "zh_CN": "IPMI地址{0}是无效的",
    "arguments": [
      "address"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Failed to reach the bare-metal chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.",
    "en_US": "Failed to reach the bare-metal chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.",
    "zh_CN": "无法连通裸金属设备，请确认：1，管理节点与裸金属设备远程控制口连通；2，IPMI地址、端口、账号、密码是正确的；3，BIOS中启用LAN上的IPMI功能。",
    "arguments": [],
    "line": 69,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Baremetal Chassis of IPMI address %s and IPMI port %d has already been created.",
    "en_US": "Baremetal Chassis of IPMI address {0} and IPMI port {1} has already been created.",
    "zh_CN": "IPMI地址为{0}，端口为{1}的裸金属设备已经被创建",
    "arguments": [
      "address",
      "port"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] does not exists.",
    "en_US": "Cluster[uuid:{0}] does not exists.",
    "zh_CN": "集群[uuid:{0}]不存在",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] is not a baremetal cluster.",
    "en_US": "Cluster[uuid:{0}] is not a baremetal cluster.",
    "zh_CN": "集群[uuid:{0}]不是一个裸金属集群",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] is not Enabled.",
    "en_US": "Cluster[uuid:{0}] is not Enabled.",
    "zh_CN": "集群[uuid:{0}]处于停用状态",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "IPMI Address and Port %s:%d already exists.",
    "en_US": "IPMI Address and Port {0}:{1} already exists.",
    "zh_CN": "IPMI地址为{0}，端口为{1}的裸金属设备已经存在",
    "arguments": [
      "address",
      "port"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "no usable baremetal pxeserver attached to cluster[uuid:%s]",
    "en_US": "no usable baremetal pxeserver attached to cluster[uuid:{0}]",
    "zh_CN": "裸金属集群[uuid:{0}]中没有可用的部署服务器",
    "arguments": [
      "clusterUuid"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "baremetal chassis[uuid:%s] is supposed to using pxeserver[uuid:%s], but it was pxeserver[uuid:%s] that actually handled the DHCP request",
    "en_US": "baremetal chassis[uuid:{0}] is supposed to using pxeserver[uuid:{1}], but it was pxeserver[uuid:{2}] that actually handled the DHCP request",
    "zh_CN": "裸金属设备[uuid:{0}]应当由部署服务器[uuid:{1}]提供DHCP服务，但实际情况是部署服务器[uuid:{2}]提供的DHCP服务",
    "arguments": [
      "chassis.getUuid()",
      "chassis.getPxeServerUuid()",
      "cmd.content"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "failed to delete baremetal chassis %s",
    "en_US": "failed to delete baremetal chassis {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 639,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Failed to remotely power on baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power on baremetal chassis[uuid:{0}]",
    "zh_CN": "无法远程启动裸金属设备[uuid:{0}]",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 706,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Failed to remotely power reset baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power reset baremetal chassis[uuid:{0}]",
    "zh_CN": "无法远程重启裸金属设备[uuid:{0}]",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 722,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Failed to remotely pxe boot chassis[uuid:%s]",
    "en_US": "Failed to remotely pxe boot chassis[uuid:{0}]",
    "zh_CN": "无法远程设置裸金属设备[uuid:{0}]从网卡启动",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 733,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "failed to connect to chassis [uuid:%s], please check ipmi connection.",
    "en_US": "failed to connect to chassis [uuid:{0}], please check ipmi connection.",
    "zh_CN": "无法连接到裸金属设备[uuid:{0}], 请确认IPMI连接可用",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 901,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "fail to load chassis info from file, because: %s",
    "en_US": "fail to load chassis info from file, because: {0}",
    "zh_CN": "无法从文件中读取裸金属设备信息，因为：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 987,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Baremetal chassis[uuid:%s] does not exist",
    "en_US": "Baremetal chassis[uuid:{0}] does not exist",
    "zh_CN": "",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Baremetal chassis[uuid:%s] is not Enabled or Available, please choose another one.",
    "en_US": "Baremetal chassis[uuid:{0}] is not Enabled or Available, please choose another one.",
    "zh_CN": "裸金属设备[uuid:{0}]被停用或者已被分配，请重新选择",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "no corresponding pxeserver, please inspect baremetal chassis[uuid:%s] again",
    "en_US": "no corresponding pxeserver, please inspect baremetal chassis[uuid:{0}] again",
    "zh_CN": "裸金属设备[uuid:{0}]没有关联部署服务器，请重新获取硬件信息",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "No hardware info found for baremetal chassis[uuid:%s], please choose another one.",
    "en_US": "No hardware info found for baremetal chassis[uuid:{0}], please choose another one.",
    "zh_CN": "裸金属设备[uuid:{0}]硬件信息未知，请重新选择",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid:%s] is neither Enabled nor Connected, please check",
    "en_US": "baremetal pxeserver[uuid:{0}] is neither Enabled nor Connected, please check",
    "zh_CN": "",
    "arguments": [
      "chassis.getPxeServerUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Mac address %s is invalid. It should be like 6c:b3:11:1b:0b:1e",
    "en_US": "Mac address {0} is invalid. It should be like 6c:b3:11:1b:0b:1e",
    "zh_CN": "MAC地址{0}不合法",
    "arguments": [
      "mac"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Baremetal chassis[uuid:%s] doesn\u0027t have nic with mac address %s",
    "en_US": "Baremetal chassis[uuid:{0}] doesn\u0027t have nic with mac address {1}",
    "zh_CN": "裸金属设备[uuid:{0}]硬件信息中未发现MAC地址为{1}的网卡",
    "arguments": [
      "chassis.getUuid()",
      "mac"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "duplicated bm bonding uuid detacted",
    "en_US": "duplicated bm bonding uuid detacted",
    "zh_CN": "",
    "arguments": [],
    "line": 143,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Baremetal Bonding does not exist",
    "en_US": "Baremetal Bonding does not exist",
    "zh_CN": "",
    "arguments": [],
    "line": 147,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "duplicated l3 network uuid detacted",
    "en_US": "duplicated l3 network uuid detacted",
    "zh_CN": "",
    "arguments": [],
    "line": 155,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "the selected l3 network doesn\u0027t exist",
    "en_US": "the selected l3 network doesn\u0027t exist",
    "zh_CN": "",
    "arguments": [],
    "line": 159,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "the selected l3 network cannot be assigned to chassis[uuid:%s]",
    "en_US": "the selected l3 network cannot be assigned to chassis[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "only iso image is supported in zstack baremetal service",
    "en_US": "only iso image is supported in zstack baremetal service",
    "zh_CN": "目前仅支持为裸机部署ISO镜像",
    "arguments": [],
    "line": 184,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "only ImageStoreBackupStorage is supported in zstack baremetal service",
    "en_US": "only ImageStoreBackupStorage is supported in zstack baremetal service",
    "zh_CN": "目前仅支持从镜像仓库中为裸机选择ISO镜像",
    "arguments": [],
    "line": 193,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "cannot recover baremetal instance that\u0027s not in Destroyed state",
    "en_US": "cannot recover baremetal instance that\u0027s not in Destroyed state",
    "zh_CN": "只能恢复处于Destroyed状态的裸金属主机",
    "arguments": [],
    "line": 207,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "cannot expunge baremetal instance that\u0027s not in Destroyed state",
    "en_US": "cannot expunge baremetal instance that\u0027s not in Destroyed state",
    "zh_CN": "只能彻底删除处于Destroyed状态的裸金属主机",
    "arguments": [],
    "line": 219,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Failed to remotely power off baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power off baremetal chassis[uuid:{0}]",
    "zh_CN": "无法远程关闭裸金属设备[uuid:{0}]",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 461,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java"
  },
  {
    "raw": "failed to allocate baremetal pxeserver, make sure there is a pxeserver with enough available capacity attached on cluster[uuid:%s]",
    "en_US": "failed to allocate baremetal pxeserver, make sure there is a pxeserver with enough available capacity attached on cluster[uuid:{0}]",
    "zh_CN": "分配部署服务器失败，请确认裸金属集群[uuid:{0}]中所挂载的部署服务器拥有足够的剩余存储空间用于保存镜像缓存",
    "arguments": [
      "self.getClusterUuid()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java"
  },
  {
    "raw": "Failed to remotely power %s baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power {0} baremetal chassis[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "reboot ? \"reset\" : \"on\"",
      "bmc.getUuid()"
    ],
    "line": 453,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java"
  },
  {
    "raw": "there are bm instances using ip address allocated from l2[uuid:%s]",
    "en_US": "there are bm instances using ip address allocated from l2[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getL2NetworkUuid()"
    ],
    "line": 1141,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java"
  },
  {
    "raw": "there are bm instances using ip address allocated from l3[uuid:%s]",
    "en_US": "there are bm instances using ip address allocated from l3[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 1149,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java"
  },
  {
    "raw": "there are bm instances using ip address allocated from ip range[uuid:%s]",
    "en_US": "there are bm instances using ip address allocated from ip range[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getIpRangeUuid()"
    ],
    "line": 1169,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java"
  },
  {
    "raw": "creating bm bonding is only allowed before creating bm instance",
    "en_US": "creating bm bonding is only allowed before creating bm instance",
    "zh_CN": "",
    "arguments": [],
    "line": 39,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "bond name %s already exists",
    "en_US": "bond name {0} already exists",
    "zh_CN": "",
    "arguments": [
      "msg.getName()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "Slave address %s is invalid. It should be like 6c:b3:11:1b:0b:1e,6c:b3:11:1b:0b:1f",
    "en_US": "Slave address {0} is invalid. It should be like 6c:b3:11:1b:0b:1e,6c:b3:11:1b:0b:1f",
    "zh_CN": "",
    "arguments": [
      "slave"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "mac address %s does not belong to chassis[uuid:%s]",
    "en_US": "mac address {0} does not belong to chassis[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "slave",
      "msg.getChassisUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "mac address %s is already a bond slave",
    "en_US": "mac address {0} is already a bond slave",
    "zh_CN": "",
    "arguments": [
      "slave"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot update predefined preconfiguration templates",
    "en_US": "cannot update predefined preconfiguration templates",
    "zh_CN": "",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java"
  },
  {
    "raw": "cannot delete predefined preconfiguration templates",
    "en_US": "cannot delete predefined preconfiguration templates",
    "zh_CN": "",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java"
  },
  {
    "raw": "cannot change state of predefined preconfiguration templates",
    "en_US": "cannot change state of predefined preconfiguration templates",
    "zh_CN": "",
    "arguments": [],
    "line": 63,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java"
  },
  {
    "raw": "cannot find PreconfigurationTemplateVO[uuid:%s], it may have been deleted",
    "en_US": "cannot find PreconfigurationTemplateVO[uuid:{0}], it may have been deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getTemplateUuid()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationManagerImpl.java"
  },
  {
    "raw": "%s can only be called by admin account",
    "en_US": "{0} can only be called by admin account",
    "zh_CN": "{0}只能被admin账户调用",
    "arguments": [
      "msg.getClass().getSimpleName()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Netmask %s is invalid.",
    "en_US": "PXE Server DHCP Range Netmask {0} is invalid.",
    "zh_CN": "部署服务器DHCP服务子网掩码{0}非法",
    "arguments": [
      "netmask"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Start %s and Range Stop %s do not belong to the same subnet.",
    "en_US": "PXE Server DHCP Range Start {0} and Range Stop {1} do not belong to the same subnet.",
    "zh_CN": "部署服务器DHCP地址区间起始IP{0}和结束IP{1}不属于一个子网内",
    "arguments": [
      "begin",
      "end"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server with hostname %s already exists.",
    "en_US": "PXE Server with hostname {0} already exists.",
    "zh_CN": "地址为{0}的部署服务器已经存在",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "storagePath should be an absolute path",
    "en_US": "storagePath should be an absolute path",
    "zh_CN": "部署服务器的存储路径必须是绝对路径",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "failed to connect to %s, please check network connection between zstack management node and baremetal pxeserver",
    "en_US": "failed to connect to {0}, please check network connection between zstack management node and baremetal pxeserver",
    "zh_CN": "请检查管理节点与部署服务器{0}之间的网络连接",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "no local repo found under /opt/zstack-dvd of %s, please download zstack iso and create local repo first",
    "en_US": "no local repo found under /opt/zstack-dvd of {0}, please download zstack iso and create local repo first",
    "zh_CN": "部署服务器{0}中缺少使用ZStack ISO创建的本地源",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Interface %s does not exists, or it does not have an IP address.",
    "en_US": "PXE Server DHCP Interface {0} does not exists, or it does not have an IP address.",
    "zh_CN": "部署服务器DHCP接口{0}不存在，或者它没有IP地址",
    "arguments": [
      "msg.getDhcpInterface()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "%s ~ %s cannot connect to dhcp interface %s",
    "en_US": "{0} ~ {1} cannot connect to dhcp interface {2}",
    "zh_CN": "{0} ~ {1} 无法连通DHCP监听网卡{2}",
    "arguments": [
      "msg.getDhcpRangeBegin()",
      "msg.getDhcpRangeEnd()",
      "msg.getDhcpInterface()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] and pxeserver[uuid:%s] don\u0027t belong to one zone",
    "en_US": "cluster[uuid:{0}] and pxeserver[uuid:{1}] don\u0027t belong to one zone",
    "zh_CN": "裸金属集群[uuid:{0}]和部署服务器[uuid:{1}]不属于同一个区域",
    "arguments": [
      "msg.getClusterUuid()",
      "msg.getPxeServerUuid()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is not baremetal cluster",
    "en_US": "cluster[uuid:{0}] is not baremetal cluster",
    "zh_CN": "集群[uuid:{0}]不是一个裸金属集群",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 196,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid:%s] already attached to cluster[uuid:%s]",
    "en_US": "baremetal pxeserver[uuid:{0}] already attached to cluster[uuid:{1}]",
    "zh_CN": "部署服务器[uuid:{0}]已经挂载到裸金属集群[uuid:{1}]，无需再次挂载",
    "arguments": [
      "msg.getPxeServerUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 207,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid:%s] is not compatible with baremetal instances in cluster[uuid:%s], existing nic ip %s is out of pxeserver dhcp range %s ~ %s.",
    "en_US": "baremetal pxeserver[uuid:{0}] is not compatible with baremetal instances in cluster[uuid:{1}], existing nic ip {2} is out of pxeserver dhcp range {3} ~ {4}.",
    "zh_CN": "部署服务器[uuid:{0}]不适合于集群[uuid:{1}]，因为集群中已有的裸金属主机网卡地址{2}超出了部署服务器的DHCP范围{3} ~ {4}",
    "arguments": [
      "msg.getPxeServerUuid()",
      "msg.getClusterUuid()",
      "ip",
      "begin",
      "end"
    ],
    "line": 233,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid: %s] not attached to cluster[uuid: %s]",
    "en_US": "baremetal pxeserver[uuid: {0}] not attached to cluster[uuid: {1}]",
    "zh_CN": "部署服务器[uuid:{0}]没有挂载到裸金属集群[uuid:{1}]",
    "arguments": [
      "msg.getPxeServerUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "failed to init configs on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to init configs on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "部署服务器[uuid:{0}]初始化配置失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 286,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create bm instance configs on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to create bm instance configs on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上创建裸金属主机相关配置失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 423,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete bm instance configs on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to delete bm instance configs on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上删除裸金属主机相关配置失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 454,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create bm instance novnc proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to create bm instance novnc proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上创建裸金属主机NoVNC代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 485,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete bm instance novnc proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to delete bm instance novnc proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上删除裸金属主机NoVNC代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 516,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create bm instance nginx proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to create bm instance nginx proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上创建裸金属主机Nginx代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 549,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete bm instance nginx proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to delete bm instance nginx proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上删除裸金属主机Nginx代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 580,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to start baremetal pxeserver[uuid:%s]",
    "en_US": "failed to start baremetal pxeserver[uuid:{0}]",
    "zh_CN": "启动部署服务器[uuid:{0}]失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 611,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to stop baremetal pxeserver[uuid:%s]",
    "en_US": "failed to stop baremetal pxeserver[uuid:{0}]",
    "zh_CN": "停止部署服务器[uuid:{0}]失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 644,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create dhcp config of chassis[uuid:%s] on pxeserver[uuid:%s]",
    "en_US": "failed to create dhcp config of chassis[uuid:{0}] on pxeserver[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getChassisUuid()",
      "self.getUuid()"
    ],
    "line": 959,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete dhcp config of chassis[uuid:%s] on pxeserver[uuid:%s]",
    "en_US": "failed to delete dhcp config of chassis[uuid:{0}] on pxeserver[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getChassisUuid()",
      "self.getUuid()"
    ],
    "line": 988,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "the uuid of baremtal pxeserver agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of baremtal pxeserver agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "ret.uuid"
    ],
    "line": 1046,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "unable to connect to baremetal pxeserver[url:%s], because %s",
    "en_US": "unable to connect to baremetal pxeserver[url:{0}], because {1}",
    "zh_CN": "连接部署服务器[uuid:{0}]失败，因为: {1}",
    "arguments": [
      "url",
      "rsp.error"
    ],
    "line": 1229,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to mount baremetal cache of image[uuid:%s]",
    "en_US": "failed to mount baremetal cache of image[uuid:{0}]",
    "zh_CN": "挂载裸金属镜像缓存[uuid:{0}]失败",
    "arguments": [
      "cache.getImageUuid()"
    ],
    "line": 1320,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "no enough space left in baremetal image cache for image[uuid:%s]",
    "en_US": "no enough space left in baremetal image cache for image[uuid:{0}]",
    "zh_CN": "部署服务器存储路径剩余空间不足",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 1430,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "unsupported backup storage type for baremetal",
    "en_US": "unsupported backup storage type for baremetal",
    "zh_CN": "裸金属管理所不支持的镜像存储类型",
    "arguments": [],
    "line": 1526,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "the start date must be greater than the end date",
    "en_US": "the start date must be greater than the end date",
    "zh_CN": "开始时间必须早于结束时间",
    "arguments": [],
    "line": 104,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "resourceType and resourceUuid cannot be empty at the same time",
    "en_US": "resourceType and resourceUuid cannot be empty at the same time",
    "zh_CN": "",
    "arguments": [],
    "line": 108,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "the minimal resource unit is megabyte, cannot be byte",
    "en_US": "the minimal resource unit is megabyte, cannot be byte",
    "zh_CN": "资源的最小单位必须为MB，而不是byte",
    "arguments": [],
    "line": 226,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "price must be 0 and 9999.99",
    "en_US": "price must be 0 and 9999.99",
    "zh_CN": "价格必须在0和9999.99之间",
    "arguments": [],
    "line": 234,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "gpu price must be bound to gpu uuid empty",
    "en_US": "gpu price must be bound to gpu uuid empty",
    "zh_CN": "GPU类型的价格必须绑定一个GPU设备",
    "arguments": [],
    "line": 241,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "gpu price must be bound to gpu uuid %s",
    "en_US": "gpu price must be bound to gpu uuid {0}",
    "zh_CN": "GPU类型的价格必须绑定一个正确的GPU设备{0}",
    "arguments": [
      "price.getSystemTags()"
    ],
    "line": 248,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "resourceName[%s] is invalid",
    "en_US": "resourceName[{0}] is invalid",
    "zh_CN": "",
    "arguments": [
      "resourceName"
    ],
    "line": 208,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "The account[uuid\u003d%s] has attach price table",
    "en_US": "The account[uuid\u003d{0}] has attach price table",
    "zh_CN": "",
    "arguments": [
      "msg.getAccountUuid()"
    ],
    "line": 260,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "This priceTable[uuid\u003d%s] is not allowed to delete",
    "en_US": "This priceTable[uuid\u003d{0}] is not allowed to delete",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "accountUuid/tableUuid only one of them is allowed to be set",
    "en_US": "accountUuid/tableUuid only one of them is allowed to be set",
    "zh_CN": "",
    "arguments": [],
    "line": 280,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong is not allowed to be negative",
    "en_US": "endDateInLong is not allowed to be negative",
    "zh_CN": "",
    "arguments": [],
    "line": 286,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong and setEndDateInLongBaseOnCurrentTime are not allowed to set at the same time",
    "en_US": "endDateInLong and setEndDateInLongBaseOnCurrentTime are not allowed to set at the same time",
    "zh_CN": "",
    "arguments": [],
    "line": 290,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong is set, no modification allowed",
    "en_US": "endDateInLong is set, no modification allowed",
    "zh_CN": "",
    "arguments": [],
    "line": 303,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong cannot be earlier than dateInLong",
    "en_US": "endDateInLong cannot be earlier than dateInLong",
    "zh_CN": "",
    "arguments": [],
    "line": 311,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "priceKeyName is null",
    "en_US": "priceKeyName is null",
    "zh_CN": "",
    "arguments": [],
    "line": 254,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "dateInLong is less than %s",
    "en_US": "dateInLong is less than {0}",
    "zh_CN": "",
    "arguments": [
      "currentPriceVO.getDateInLong()"
    ],
    "line": 879,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "Already have one userdata systemTag for instanceOffering[uuid: %s].",
    "en_US": "Already have one userdata systemTag for instanceOffering[uuid: {0}].",
    "zh_CN": "",
    "arguments": [
      "resourceUuid"
    ],
    "line": 1281,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "Shouldn\u0027t be more than one systemTag for one instanceOffering.",
    "en_US": "Shouldn\u0027t be more than one systemTag for one instanceOffering.",
    "zh_CN": "",
    "arguments": [],
    "line": 1346,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "Already have one userdata systemTag for diskOffering[uuid: %s].",
    "en_US": "Already have one userdata systemTag for diskOffering[uuid: {0}].",
    "zh_CN": "",
    "arguments": [
      "resourceUuid"
    ],
    "line": 1323,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "unsupported billing resource type [%s]",
    "en_US": "unsupported billing resource type [{0}]",
    "zh_CN": "",
    "arguments": [
      "resourceType"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/billing/ResourceSpendingHelper.java"
  },
  {
    "raw": "cannot find such ResourceStackVO by uuid [%s]",
    "en_US": "cannot find such ResourceStackVO by uuid [{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "restart resource stack only support %s status!",
    "en_US": "restart resource stack only support {0} status!",
    "zh_CN": "",
    "arguments": [
      "validStatus"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "templateContent and uuid mustn\u0027t both be empty or both be set!",
    "en_US": "templateContent and uuid mustn\u0027t both be empty or both be set!",
    "zh_CN": "",
    "arguments": [],
    "line": 175,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "expect %s status!",
    "en_US": "expect {0} status!",
    "zh_CN": "",
    "arguments": [
      "validStatus"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "templateContent and templateUuid mustn\u0027t both be empty!",
    "en_US": "templateContent and templateUuid mustn\u0027t both be empty!",
    "zh_CN": "",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "templateContent and url mustn\u0027t both be empty or both be set!",
    "en_US": "templateContent and url mustn\u0027t both be empty or both be set!",
    "zh_CN": "",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "only admin could enable/disable system StackTemplate",
    "en_US": "only admin could enable/disable system StackTemplate",
    "zh_CN": "",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "cannot delete or update system template: %s",
    "en_US": "cannot delete or update system template: {0}",
    "zh_CN": "",
    "arguments": [
      "vo.getName()"
    ],
    "line": 856,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "ResourceStackVO: [%s] has been deleted...",
    "en_US": "ResourceStackVO: [{0}] has been deleted...",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 385,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "ResourceStackVO [%s] already been deleted!",
    "en_US": "ResourceStackVO [{0}] already been deleted!",
    "zh_CN": "",
    "arguments": [
      "uuid"
    ],
    "line": 415,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "templateContent must be set!",
    "en_US": "templateContent must be set!",
    "zh_CN": "",
    "arguments": [],
    "line": 641,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "template [%s] chosen is disabled",
    "en_US": "template [{0}] chosen is disabled",
    "zh_CN": "",
    "arguments": [
      "template.getUuid()"
    ],
    "line": 636,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "cannot find parameters for %s, which is %s type, please check parameters",
    "en_US": "cannot find parameters for {0}, which is {1} type, please check parameters",
    "zh_CN": "",
    "arguments": [
      "p.getParamName()",
      "p.getResourceType()"
    ],
    "line": 779,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "StackTemplateVO has been deleted...",
    "en_US": "StackTemplateVO has been deleted...",
    "zh_CN": "",
    "arguments": [],
    "line": 849,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "content must be set by templateContent or url!",
    "en_US": "content must be set by templateContent or url!",
    "zh_CN": "",
    "arguments": [],
    "line": 872,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "get null content input",
    "en_US": "get null content input",
    "zh_CN": "",
    "arguments": [],
    "line": 890,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "invalid cloudformation template version: %s",
    "en_US": "invalid cloudformation template version: {0}",
    "zh_CN": "",
    "arguments": [
      "result.getTemplateVersion()"
    ],
    "line": 897,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "StackTemplateVO: [%s] has been deleted...",
    "en_US": "StackTemplateVO: [{0}] has been deleted...",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 911,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "get null element in template content",
    "en_US": "get null element in template content",
    "zh_CN": "",
    "arguments": [],
    "line": 20,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationUtils.java"
  },
  {
    "raw": "template must contain [ZStackTemplateFormatVersion]",
    "en_US": "template must contain [ZStackTemplateFormatVersion]",
    "zh_CN": "",
    "arguments": [],
    "line": 24,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationUtils.java"
  },
  {
    "raw": "invalid ZStackTemplateFormatVersion: %s, %s",
    "en_US": "invalid ZStackTemplateFormatVersion: {0}, {1}",
    "zh_CN": "",
    "arguments": [
      "result.getTemplateVersion()",
      "CloudFormationConstant.version"
    ],
    "line": 27,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationUtils.java"
  },
  {
    "raw": "verb must contain \u0027::\u0027!",
    "en_US": "verb must contain \u0027::\u0027!",
    "zh_CN": "",
    "arguments": [],
    "line": 156,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "need List for resource [%s] output here, but got %s.",
    "en_US": "need List for resource [{0}] output here, but got {1}.",
    "zh_CN": "",
    "arguments": [
      "t[0]",
      "last.getClass().getName()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "invalid dynamic variables, which must contained ${: %s",
    "en_US": "invalid dynamic variables, which must contained ${: {0}",
    "zh_CN": "",
    "arguments": [
      "value"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "cannot find resource of properties set before!",
    "en_US": "cannot find resource of properties set before!",
    "zh_CN": "",
    "arguments": [],
    "line": 283,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "Some actions are invalid",
    "en_US": "Some actions are invalid",
    "zh_CN": "",
    "arguments": [],
    "line": 359,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "Unable to create json template",
    "en_US": "Unable to create json template",
    "zh_CN": "",
    "arguments": [
      "e"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java"
  },
  {
    "raw": "cannot find such template file: %s",
    "en_US": "cannot find such template file: {0}",
    "zh_CN": "",
    "arguments": [
      "jsonFile"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java"
  },
  {
    "raw": "no root element found, please check your cfn formation!",
    "en_US": "no root element found, please check your cfn formation!",
    "zh_CN": "",
    "arguments": [],
    "line": 233,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java"
  },
  {
    "raw": "Wrong json format, causes: %s",
    "en_US": "Wrong json format, causes: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 365,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java"
  },
  {
    "raw": "Mappings root body must be json object!",
    "en_US": "Mappings root body must be json object!",
    "zh_CN": "",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "Condition body cannot support json null or array!",
    "en_US": "Condition body cannot support json null or array!",
    "zh_CN": "",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "Only support ZStack Template Functions in \u0027Condition\u0027 field!",
    "en_US": "Only support ZStack Template Functions in \u0027Condition\u0027 field!",
    "zh_CN": "",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "Value must be boolean in \u0027Condition\u0027 field",
    "en_US": "Value must be boolean in \u0027Condition\u0027 field",
    "zh_CN": "",
    "arguments": [],
    "line": 37,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "Condition key: %s only support 1 element in the json object of value, but got %d elements!",
    "en_US": "Condition key: {0} only support 1 element in the json object of value, but got {1} elements!",
    "zh_CN": "",
    "arguments": [
      "key",
      "es.size()"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "cannot find such msg: %s for create",
    "en_US": "cannot find such msg: {0} for create",
    "zh_CN": "",
    "arguments": [
      "msg"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/DecoderUtils.java"
  },
  {
    "raw": "Mapping value body cannot support null!",
    "en_US": "Mapping value body cannot support null!",
    "zh_CN": "",
    "arguments": [],
    "line": 56,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java"
  },
  {
    "raw": "Mapping value body cannot support json array!",
    "en_US": "Mapping value body cannot support json array!",
    "zh_CN": "",
    "arguments": [],
    "line": 54,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java"
  },
  {
    "raw": "mappingName must be found in result, or it is invalid cfn json.",
    "en_US": "mappingName must be found in result, or it is invalid cfn json.",
    "zh_CN": "",
    "arguments": [],
    "line": 66,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java"
  },
  {
    "raw": "Mapping body cannot support json null!",
    "en_US": "Mapping body cannot support json null!",
    "zh_CN": "",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java"
  },
  {
    "raw": "Mapping body cannot support non map value!",
    "en_US": "Mapping body cannot support non map value!",
    "zh_CN": "",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java"
  },
  {
    "raw": "Description in Outputs must be String type!",
    "en_US": "Description in Outputs must be String type!",
    "zh_CN": "",
    "arguments": [],
    "line": 70,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java"
  },
  {
    "raw": "paramName must be found in result, or it is invalid cfn json.",
    "en_US": "paramName must be found in result, or it is invalid cfn json.",
    "zh_CN": "",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java"
  },
  {
    "raw": "Parameters root body must be json object!",
    "en_US": "Parameters root body must be json object!",
    "zh_CN": "",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java"
  },
  {
    "raw": "resourceName must be found in result, or it is invalid cfn json.",
    "en_US": "resourceName must be found in result, or it is invalid cfn json.",
    "zh_CN": "",
    "arguments": [],
    "line": 112,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Parameters body cannot support null!",
    "en_US": "Parameters body cannot support null!",
    "zh_CN": "",
    "arguments": [],
    "line": 123,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource value body cannot support null!",
    "en_US": "Resource value body cannot support null!",
    "zh_CN": "",
    "arguments": [],
    "line": 68,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource %s cannot depends on itself, please check %s in Resource [%s]",
    "en_US": "Resource {0} cannot depends on itself, please check {1} in Resource [{2}]",
    "zh_CN": "",
    "arguments": [
      "resource.getResourceName()",
      "e.getKey()",
      "resource.getResourceName()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource root body must be json object!",
    "en_US": "Resource root body must be json object!",
    "zh_CN": "",
    "arguments": [],
    "line": 254,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource Type must be String!",
    "en_US": "Resource Type must be String!",
    "zh_CN": "",
    "arguments": [],
    "line": 216,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "cannot find condition[%s] in \u0027Conditions\u0027",
    "en_US": "cannot find condition[{0}] in \u0027Conditions\u0027",
    "zh_CN": "",
    "arguments": [
      "cond"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/IfTemplateFunction.java"
  },
  {
    "raw": "expect \u0027true\u0027, \u0027false\u0027 for the object, but got %s",
    "en_US": "expect \u0027true\u0027, \u0027false\u0027 for the object, but got {0}",
    "zh_CN": "",
    "arguments": [
      "e.getAsString()"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java"
  },
  {
    "raw": "expect \u0027true\u0027, \u0027false\u0027 or an other Condition, current Conditions include: %s, but got %s",
    "en_US": "expect \u0027true\u0027, \u0027false\u0027 or an other Condition, current Conditions include: {0}, but got {1}",
    "zh_CN": "",
    "arguments": [
      "keys",
      "e.getAsString()"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java"
  },
  {
    "raw": "Fn::Select out of range, please check your json file!",
    "en_US": "Fn::Select out of range, please check your json file!",
    "zh_CN": "",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/SelectTemplateFunction.java"
  },
  {
    "raw": "only functions can in Function, but found %s",
    "en_US": "only functions can in Function, but found {0}",
    "zh_CN": "",
    "arguments": [
      "e.getKey()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java"
  },
  {
    "raw": "element is null!",
    "en_US": "element is null!",
    "zh_CN": "",
    "arguments": [],
    "line": 90,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java"
  },
  {
    "raw": "VM [uuid: %s] has already been added to affinityGroup [uuid: %s]",
    "en_US": "VM [uuid: {0}] has already been added to affinityGroup [uuid: {1}]",
    "zh_CN": "VM[uuid:{0}已经被添加到亲和组[uuid:{1}]中。]",
    "arguments": [
      "resourceUuid",
      "affinityGroupUuid"
    ],
    "line": 317,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "There are other VMs on this host [uuid: %s] belonging to same affinityGroup [%s]",
    "en_US": "There are other VMs on this host [uuid: {0}] belonging to same affinityGroup [{1}]",
    "zh_CN": "在物理机[uuid:{0}]上的虚拟机属于同一个亲和组中[{1}]",
    "arguments": [
      "hostUuid",
      "affinityGroupUuid"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "affinityGroup [uuid:%s] reserve host [uuid:%s] for vm [uuid: %s] failed",
    "en_US": "affinityGroup [uuid:{0}] reserve host [uuid:{1}] for vm [uuid: {2}] failed",
    "zh_CN": "亲和组[uuid:{0}]为虚拟机[uuid:{2}]预分配物理机资源[uuid:{1}]失败",
    "arguments": [
      "self.getUuid()",
      "host.getUuid()",
      "vmUuid"
    ],
    "line": 363,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "vm [uuid:%s] doesn\u0027t satisfy the affinityGroup [uuid:%s]",
    "en_US": "vm [uuid:{0}] doesn\u0027t satisfy the affinityGroup [uuid:{1}]",
    "zh_CN": "虚拟机[uuid:{1}]不满足亲和组[uuid:{2}]的要求",
    "arguments": [
      "inv.getResourceUuid()",
      "self.getUuid()"
    ],
    "line": 433,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "can not satisfied affinity group conditions",
    "en_US": "can not satisfied affinity group conditions",
    "zh_CN": "不能满足亲和组的条件",
    "arguments": [],
    "line": 136,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupFilterFlow.java"
  },
  {
    "raw": "Vm can change its affinityGroup only in state [%s,%s], but vm is in state [%s]",
    "en_US": "Vm can change its affinityGroup only in state [{0},{1}], but vm is in state [{2}]",
    "zh_CN": "只有状态为[{0},{1}]的虚拟机可以改变亲和组，但是现在虚拟机的状态为[{2}]",
    "arguments": [
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Stopped.toString()",
      "state.toString()"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "Vm [uuid: %s] is already added to affinityGroup [uuid: %s]",
    "en_US": "Vm [uuid: {0}] is already added to affinityGroup [uuid: {1}]",
    "zh_CN": "云主机[uuid:{0}]已经被添加至亲和组[uuid:{1}]中",
    "arguments": [
      "msg.getUuid()",
      "agUuid"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "AffinityGroup [uuid: %s] does not existed",
    "en_US": "AffinityGroup [uuid: {0}] does not existed",
    "zh_CN": "亲和组[uuid:{0}]不存在",
    "arguments": [
      "affinityGroupUuid"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "Can not operate on affinity group created by system",
    "en_US": "Can not operate on affinity group created by system",
    "zh_CN": "不能对系统创建的亲和组进行操作",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "Can not operate on affinityGroup [uuid: %s] which is not enabled",
    "en_US": "Can not operate on affinityGroup [uuid: {0}] which is not enabled",
    "zh_CN": "不能对不是enabled状态的亲和组操作",
    "arguments": [
      "affinityGroupUuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "cannot find the affinity group[uuid:%s], it may have been deleted",
    "en_US": "cannot find the affinity group[uuid:{0}], it may have been deleted",
    "zh_CN": "未找到亲和组[uuid:{0}]，它可能已经被删除",
    "arguments": [
      "msg.getAffinityGroupUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupManagerImpl.java"
  },
  {
    "raw": "no host found in clusters that has attached to L2Networks which have L3Networks%s",
    "en_US": "no host found in clusters that has attached to L2Networks which have L3Networks{0}",
    "zh_CN": "",
    "arguments": [
      "spec.getL3NetworkUuids()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/compute/allocator/AttachedL2NetworkAllocatorFlow.java"
  },
  {
    "raw": "no host found in clusters that have attached to primary storage %s",
    "en_US": "no host found in clusters that have attached to primary storage {0}",
    "zh_CN": "",
    "arguments": [
      "psuuids"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/compute/allocator/AttachedPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "no host found in clusters which have attached to all primary storage %s where vm[uuid:%s]\u0027s volumes locate",
    "en_US": "no host found in clusters which have attached to all primary storage {0} where vm[uuid:{1}]\u0027s volumes locate",
    "zh_CN": "",
    "arguments": [
      "requiredPsUuids",
      "vm.getUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "after rule out avoided host%s, there is no host left in candidates",
    "en_US": "after rule out avoided host{0}, there is no host left in candidates",
    "zh_CN": "",
    "arguments": [
      "spec.getAvoidHostUuids()"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/compute/allocator/AvoidHostAllocatorFlow.java"
  },
  {
    "raw": "the backup storage[uuid:%s, type:%s] requires bound primary storage, however, the primary storage has not been added",
    "en_US": "the backup storage[uuid:{0}, type:{1}] requires bound primary storage, however, the primary storage has not been added",
    "zh_CN": "无法找到跟镜像服务器[uuid:{0}, type:{1}]配对的主存储。一些镜像服务器必须跟配对的主存储共同使用，例如Ceph镜像服务器只能搭配Ceph主存储使用。请检查你主存储的设置",
    "arguments": [
      "spec.getRequiredBackupStorageUuid()",
      "bsType"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "The image[uuid:%s] is on the backup storage[uuid:%s, type:%s] that requires to work with primary storage[uuids:%s],however, no host found suitable to work with those primary storage",
    "en_US": "The image[uuid:{0}] is on the backup storage[uuid:{1}, type:{2}] that requires to work with primary storage[uuids:{3}],however, no host found suitable to work with those primary storage",
    "zh_CN": "镜像[uuid:{0}]所在的镜像服务器[uuid:{1}, type:{2}]必须跟主存储[uuid:{3}]配对使用，但无法找到可以跟满足条件并可以访问该主存储的物理机",
    "arguments": [
      "spec.getImage().getUuid()",
      "spec.getRequiredBackupStorageUuid()",
      "type",
      "psUuids"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "The image[uuid:%s, name:%s] is on the backup storage[uuid:%s, type:%s] that requires to work with primary storage[types:%s],however, no host found suitable to work with those primary storage",
    "en_US": "The image[uuid:{0}, name:{1}] is on the backup storage[uuid:{2}, type:{3}] that requires to work with primary storage[types:{4}],however, no host found suitable to work with those primary storage",
    "zh_CN": "镜像[uuid:{0},name:{1}]所在的镜像服务器[uuid:{2}, type:{3}]必须跟主存储[uuid:{4}]一起使用，但无法找到可以跟满足条件并可以访问该主存储的物理机",
    "arguments": [
      "spec.getImage().getUuid()",
      "name",
      "spec.getRequiredBackupStorageUuid()",
      "spec.getImage().getType()",
      "possiblePrimaryStorageTypes"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "No host with %s found",
    "en_US": "No host with {0} found",
    "zh_CN": "",
    "arguments": [
      "args"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/compute/allocator/DesignatedHostAllocatorFlow.java"
  },
  {
    "raw": "after filtering, HostAllocatorFilterExtensionPoint[%s] returns zero candidate host, it means: %s",
    "en_US": "after filtering, HostAllocatorFilterExtensionPoint[{0}] returns zero candidate host, it means: {1}",
    "zh_CN": "",
    "arguments": [
      "filter.getClass().getSimpleName()",
      "filter.filterErrorReason()"
    ],
    "line": 33,
    "fileName": "src/main/java/org/zstack/compute/allocator/FilterFlow.java"
  },
  {
    "raw": "either volumeUuid or volumeSnapshotUuid must be set",
    "en_US": "either volumeUuid or volumeSnapshotUuid must be set",
    "zh_CN": "云盘uuid或者快照uuid必须被设置",
    "arguments": [],
    "line": 56,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true",
    "zh_CN": "区域uuid，集群uuid,物理机uuid必须有一个不为空，或者全部都填写",
    "arguments": [],
    "line": 75,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java"
  },
  {
    "raw": "no host having cpu[%s], memory[%s bytes] found",
    "en_US": "no host having cpu[{0}], memory[{1} bytes] found",
    "zh_CN": "",
    "arguments": [
      "spec.getCpuCapacity()",
      "spec.getMemoryCapacity()"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostCapacityAllocatorFlow.java"
  },
  {
    "raw": "no candidate host has version[%s]",
    "en_US": "no candidate host has version[{0}]",
    "zh_CN": "",
    "arguments": [
      "currentVersion"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostOsVersionAllocatorFlow.java"
  },
  {
    "raw": "cannot find available primary storage[state: %s or %s, status: %s]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "en_US": "cannot find available primary storage[state: {0} or {1}, status: {2}]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "zh_CN": "",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageState.Disabled",
      "PrimaryStorageStatus.Connected"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "cannot find available primary storage[state: %s, status: %s, available capacity %s bytes]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "en_US": "cannot find available primary storage[state: {0}, status: {1}, available capacity {2} bytes]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "zh_CN": "",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "spec.getDiskSize()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "[Host Allocation]: %s on host[uuid:%s]. try next one. %s",
    "en_US": "[Host Allocation]: {0} on host[uuid:{1}]. try next one. {2}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()",
      "host.getUuid()",
      "e.getMessage()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostSortorChain.java"
  },
  {
    "raw": "no host having state\u003dEnabled status\u003dConnected hypervisorType\u003d%s found",
    "en_US": "no host having state\u003dEnabled status\u003dConnected hypervisorType\u003d{0} found",
    "zh_CN": "",
    "arguments": [
      "spec.getHypervisorType()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no host having state\u003dEnabled status\u003dConnected found",
    "en_US": "no host having state\u003dEnabled status\u003dConnected found",
    "zh_CN": "",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no Enabled hosts found in the [%s] candidate hosts having the hypervisor type [%s]",
    "en_US": "no Enabled hosts found in the [{0}] candidate hosts having the hypervisor type [{1}]",
    "zh_CN": "",
    "arguments": [
      "candidates.size()",
      "spec.getHypervisorType()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no Enabled hosts found in the [%s] candidate hosts",
    "en_US": "no Enabled hosts found in the [{0}] candidate hosts",
    "zh_CN": "",
    "arguments": [
      "candidates.size()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no Connected hosts found in the [%s] candidate hosts",
    "en_US": "no Connected hosts found in the [{0}] candidate hosts",
    "zh_CN": "",
    "arguments": [
      "candidates.size()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is deleted on all backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is deleted on all backup storage",
    "zh_CN": "镜像[uuid:{0}, name:{1}]已经从所有镜像服务器上删除，无法执行相应操作",
    "arguments": [
      "spec.getImage().getUuid()",
      "spec.getImage().getName()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java"
  },
  {
    "raw": "no host found in zones[uuids:%s] that attaches to backup storage where image[%s] is on",
    "en_US": "no host found in zones[uuids:{0}] that attaches to backup storage where image[{1}] is on",
    "zh_CN": "",
    "arguments": [
      "zoneUuids",
      "spec.getImage().getUuid()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java"
  },
  {
    "raw": "resource binding not support type %s yet",
    "en_US": "resource binding not support type {0} yet",
    "zh_CN": "",
    "arguments": [
      "entry.getKey()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java"
  },
  {
    "raw": "no available host found with binded resource %s",
    "en_US": "no available host found with binded resource {0}",
    "zh_CN": "",
    "arguments": [
      "resources"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java"
  },
  {
    "raw": "InstanceOfferingTagAllocatorExtensionPoint[%s] return zero candidate host",
    "en_US": "InstanceOfferingTagAllocatorExtensionPoint[{0}] return zero candidate host",
    "zh_CN": "",
    "arguments": [
      "extp.getClass().getName()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java"
  },
  {
    "raw": "DiskOfferingTagAllocatorExtensionPoint[%s] return zero candidate host",
    "en_US": "DiskOfferingTagAllocatorExtensionPoint[{0}] return zero candidate host",
    "zh_CN": "",
    "arguments": [
      "extp.getClass().getName()"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java"
  },
  {
    "raw": "if cluster type is baremetal, then hypervisorType must be baremetal too, or vice versa",
    "en_US": "if cluster type is baremetal, then hypervisorType must be baremetal too, or vice versa",
    "zh_CN": "",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "only kvm hosts\u0027 operating system can be updated, for now",
    "en_US": "only kvm hosts\u0027 operating system can be updated, for now",
    "zh_CN": "目前只支持升级KVM物理机操作系统",
    "arguments": [],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "there are hosts in cluster[uuid:%s] in the PreMaintenance state, cannot update cluster os right now",
    "en_US": "there are hosts in cluster[uuid:{0}] in the PreMaintenance state, cannot update cluster os right now",
    "zh_CN": "集群[uuid:{0}] 中存在处于预维护模式的物理机，无法执行操作系统升级操作",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "not all hosts in cluster[uuid:%s] are in the Connected status, cannot update cluster os right now",
    "en_US": "not all hosts in cluster[uuid:{0}] are in the Connected status, cannot update cluster os right now",
    "zh_CN": "集群[uuid:{0}] 中存在未处于已连接状态的物理机，无法执行操作系统升级操作",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "invalid cpu pinning ref[%s]. correct example is [1,3:3-6,^5]",
    "en_US": "invalid cpu pinning ref[{0}]. correct example is [1,3:3-6,^5]",
    "zh_CN": "",
    "arguments": [
      "r"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java"
  },
  {
    "raw": "the host vm located only have % CPUs",
    "en_US": "the host vm located only have % CPUs",
    "zh_CN": "",
    "arguments": [
      "pCpuNum"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java"
  },
  {
    "raw": "vcpu pinning pcpu id \u003e host cores",
    "en_US": "vcpu pinning pcpu id \u003e host cores",
    "zh_CN": "vcpu要绑定的pcpu id大于了物理机实际核数",
    "arguments": [],
    "line": 48,
    "fileName": "src/main/java/org/zstack/compute/cpuPinning/CpuPinningFilterFlow.java"
  },
  {
    "raw": "Invalid cpuset [%s]",
    "en_US": "Invalid cpuset [{0}]",
    "zh_CN": "",
    "arguments": [
      "word"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/compute/cpuPinning/CpuRangeSet.java"
  },
  {
    "raw": "managementIp[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "managementIp[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "管理IP[{0}]既不是有效的IPv4地址也不是有效的物理机名",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "can not maintain host[uuid:%s, status:%s]which is not Connected",
    "en_US": "can not maintain host[uuid:{0}, status:{1}]which is not Connected",
    "zh_CN": "只能对已连接状态的物理机[uuid:{0}, status:{1}]进行维护操作",
    "arguments": [
      "msg.getHostUuid()",
      "hostStatus"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "failed to migrate vm[uuids:%s] on host[uuid:%s, name:%s, ip:%s], will try stopping it.",
    "en_US": "failed to migrate vm[uuids:{0}] on host[uuid:{1}, name:{2}, ip:{3}], will try stopping it.",
    "zh_CN": "",
    "arguments": [
      "vmFailedToMigrate",
      "self.getUuid()",
      "self.getName()",
      "self.getManagementIp()"
    ],
    "line": 259,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "host is connecting, ping failed",
    "en_US": "host is connecting, ping failed",
    "zh_CN": "物理机正在连接, 不能进行ping操作",
    "arguments": [],
    "line": 609,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "an other connect host task is running, cancel the new task and wait return",
    "en_US": "an other connect host task is running, cancel the new task and wait return",
    "zh_CN": "",
    "arguments": [],
    "line": 1085,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "there has been a host having managementIp[%s]",
    "en_US": "there has been a host having managementIp[{0}]",
    "zh_CN": "已经存在一个管理IP是[{0}]的物理机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "cluster[uuid:%s] is not existing",
    "en_US": "cluster[uuid:{0}] is not existing",
    "zh_CN": "",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 288,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "after connecting, host[name:%s, ip:%s] returns a null os version",
    "en_US": "after connecting, host[name:{0}, ip:{1}] returns a null os version",
    "zh_CN": "在连接操作后，物理机[name:{0}, ip:{1}]没有返回操作系统版本信息",
    "arguments": [
      "vo.getName()",
      "vo.getManagementIp()"
    ],
    "line": 378,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "cluster[uuid:%s] already has host with os version[%s], but new added host[name:%s ip:%s] has host os version[%s]",
    "en_US": "cluster[uuid:{0}] already has host with os version[{1}], but new added host[name:{2} ip:{3}] has host os version[{4}]",
    "zh_CN": "集群[uuid:{0}]中物理机使用的操作系统版本是[{1}]，但是新的物理机[name:{2} ip:{3}]的操作系统版本是 [{4}]",
    "arguments": [
      "vo.getClusterUuid()",
      "currentVersion",
      "vo.getName()",
      "vo.getManagementIp()",
      "mineVersion"
    ],
    "line": 409,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "no running api[%s] task on hosts",
    "en_US": "no running api[{0}] task on hosts",
    "zh_CN": "",
    "arguments": [
      "msg.getCancellationApiId()"
    ],
    "line": 531,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "primary storage[uuid:%s] becomes disconnected, the host has no connected primary storage attached",
    "en_US": "primary storage[uuid:{0}] becomes disconnected, the host has no connected primary storage attached",
    "zh_CN": "主存储[uuid:{0}]失联，物理机没有关联的主存储",
    "arguments": [
      "d.getPrimaryStorageUuid()"
    ],
    "line": 624,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "host(s) [%s] is not Connected, not support to power off",
    "en_US": "host(s) [{0}] is not Connected, not support to power off",
    "zh_CN": "",
    "arguments": [
      "nameips.stream().map( it -\u003e it.get(1, String.class) + \"/\" + it.get(0, String.class)).collect(Collectors.joining(\", \"))"
    ],
    "line": 38,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "vm security level not consistent with vms running on host",
    "en_US": "vm security level not consistent with vms running on host",
    "zh_CN": "",
    "arguments": [],
    "line": 68,
    "fileName": "src/main/java/org/zstack/compute/host/HostSecurityLevelAllocatorFilterExtensionPoint.java"
  },
  {
    "raw": "host[uuid:%s, name:%s] is in state[%s], cannot perform required operation",
    "en_US": "host[uuid:{0}, name:{1}] is in state[{2}], cannot perform required operation",
    "zh_CN": "物理机[uuid:{0}, name:{1}]处于状态[{2}]中，不能处理该请求",
    "arguments": [
      "host.getUuid()",
      "host.getName()",
      "host.getState()"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "operation error, because %s",
    "en_US": "operation error, because {0}",
    "zh_CN": "操作错误，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 485,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "only support do live snapshot on vm state[%s], but vm is on [%s] state",
    "en_US": "only support do live snapshot on vm state[{0}], but vm is on [{1}] state",
    "zh_CN": "",
    "arguments": [
      "vmInstanceVO.getUuid()",
      "vmInstanceVO.getState()"
    ],
    "line": 377,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "host[uuid:%s] has multi ips in cidr[%s]",
    "en_US": "host[uuid:{0}] has multi ips in cidr[{1}]",
    "zh_CN": "物理机[uuid:{0}]在cidr[{1}]中有多个ip",
    "arguments": [
      "huuid",
      "cidr"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBaseFactory.java"
  },
  {
    "raw": "host[uuid:%s] can not find",
    "en_US": "host[uuid:{0}] can not find",
    "zh_CN": "",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 344,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java"
  },
  {
    "raw": "cluster[uuids:%s, hypervisorType:%s] are not exist!",
    "en_US": "cluster[uuids:{0}, hypervisorType:{1}] are not exist!",
    "zh_CN": "",
    "arguments": [
      "clusterUuids",
      "hypervisorType"
    ],
    "line": 336,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java"
  },
  {
    "raw": "not dest host found in db, can\u0027t send change password cmd to the host!",
    "en_US": "not dest host found in db, can\u0027t send change password cmd to the host!",
    "zh_CN": "没有在物理机上发现数据库，不能发送更改密码的指令到这个物理机上",
    "arguments": [],
    "line": 50,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "not system tag found on vm, vm must have the following system tag: qemuga, if you installed qemu-ga yourself, please use CreateSystemTag first.",
    "en_US": "not system tag found on vm, vm must have the following system tag: qemuga, if you installed qemu-ga yourself, please use CreateSystemTag first.",
    "zh_CN": "没有发现系统标签在云主机上，云主机必须有系统标签: qemuga。如果你已经安装了qemu-ga，请先使用 CreateSystemTag",
    "arguments": [],
    "line": 51,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "not account preference found,  send change password cmd to the host!",
    "en_US": "not account preference found,  send change password cmd to the host!",
    "zh_CN": "没有优先级账户去发送改变密码的指令到物理机",
    "arguments": [],
    "line": 54,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "the host[uuid:%s] is not connected",
    "en_US": "the host[uuid:{0}] is not connected",
    "zh_CN": "物理机[uuid:{0}]不是Connected状态",
    "arguments": [
      "hostUuid"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/compute/vm/DeleteVmGC.java"
  },
  {
    "raw": "VM[uuid:%s] has attached ISO[uuid:%s]",
    "en_US": "VM[uuid:{0}] has attached ISO[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经加载了ISO[uuid:{1}]",
    "arguments": [
      "vmUuid",
      "isoUuid"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/compute/vm/IsoOperator.java"
  },
  {
    "raw": "All vm[uuid:%s] CD-ROMs have mounted ISO",
    "en_US": "All vm[uuid:{0}] CD-ROMs have mounted ISO",
    "zh_CN": "",
    "arguments": [
      "vmUuid"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/compute/vm/IsoOperator.java"
  },
  {
    "raw": "This is not a valid MAC address [%s]",
    "en_US": "This is not a valid MAC address [{0}]",
    "zh_CN": "这是一个无效的MAC地址",
    "arguments": [
      "mac"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "Not a valid MAC address [%s]",
    "en_US": "Not a valid MAC address [{0}]",
    "zh_CN": "这是一个无效的MAC地址[{0}]",
    "arguments": [
      "mac"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "Disallowed address",
    "en_US": "Disallowed address",
    "zh_CN": "不被允许的MAC地址",
    "arguments": [],
    "line": 90,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "Expected unicast mac address, found multicast MAC address [%s]",
    "en_US": "Expected unicast mac address, found multicast MAC address [{0}]",
    "zh_CN": "期望的是一个单播的MAC地址，但找到的是一个组播的MAC地址[{0}]",
    "arguments": [
      "mac"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "vm[uuid: %s]\u0027s state is not Stopped now, cannot operate \u0027changevmimage\u0027 action",
    "en_US": "vm[uuid: {0}]\u0027s state is not Stopped now, cannot operate \u0027changevmimage\u0027 action",
    "zh_CN": "",
    "arguments": [],
    "line": 192,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "can not find image store backup storage, unable to commit volume snapshot as image",
    "en_US": "can not find image store backup storage, unable to commit volume snapshot as image",
    "zh_CN": "",
    "arguments": [],
    "line": 602,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "cannot find backupStorage for volume: %s",
    "en_US": "cannot find backupStorage for volume: {0}",
    "zh_CN": "",
    "arguments": [
      "vivo.getRootVolumeUuid()"
    ],
    "line": 397,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm running on local storage %s state is %s not running/stopped/paused, can not attach volume",
    "en_US": "vm running on local storage {0} state is {1} not running/stopped/paused, can not attach volume",
    "zh_CN": "",
    "arguments": [
      "inv.getInventory().getUuid()",
      "state"
    ],
    "line": 898,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "Destination PrimaryStorageType is %s, but the selected BackupStorageType for source Volume is %s, which cannot be matched",
    "en_US": "Destination PrimaryStorageType is {0}, but the selected BackupStorageType for source Volume is {1}, which cannot be matched",
    "zh_CN": "",
    "arguments": [
      "pvo.getType()",
      "bsType"
    ],
    "line": 1120,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "direction must be set to in or out",
    "en_US": "direction must be set to in or out",
    "zh_CN": "方法必须设置in或者out",
    "arguments": [],
    "line": 1507,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "inboundBandwidth must be set no more than %s.",
    "en_US": "inboundBandwidth must be set no more than {0}.",
    "zh_CN": "下行带宽不能超过{0}",
    "arguments": [
      "inbound"
    ],
    "line": 1549,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "outboundBandwidth must be set no more than %s.",
    "en_US": "outboundBandwidth must be set no more than {0}.",
    "zh_CN": "上行带宽不能超过{0}",
    "arguments": [
      "outbound"
    ],
    "line": 1560,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm [%s]\u0027 state must be Running or Paused to sync nic qos",
    "en_US": "vm [{0}]\u0027 state must be Running or Paused to sync nic qos",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1651,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm [%s]\u0027s HostUuid is null, cannot sync nic qos",
    "en_US": "vm [{0}]\u0027s HostUuid is null, cannot sync nic qos",
    "zh_CN": "",
    "arguments": [],
    "line": 1656,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "not dest host found in db by uuid: %s, can\u0027t send change password cmd to the host!",
    "en_US": "not dest host found in db by uuid: {0}, can\u0027t send change password cmd to the host!",
    "zh_CN": "没有在物理机{0}上发现数据库，不能发送更改密码的指令到这个物理机上",
    "arguments": [
      "amsg.getVmInstanceUuid()"
    ],
    "line": 2056,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "state is not correct while change password.",
    "en_US": "state is not correct while change password.",
    "zh_CN": "该状态不支持修改密码",
    "arguments": [],
    "line": 2084,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm[uuid:%s] cdRom deviceId repetition",
    "en_US": "vm[uuid:{0}] cdRom deviceId repetition",
    "zh_CN": "",
    "arguments": [
      "spec.getVmInventory().getUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocateCdRomFlow.java"
  },
  {
    "raw": "there is no available ipRange on L3 network [%s]",
    "en_US": "there is no available ipRange on L3 network [{0}]",
    "zh_CN": "L3网络[{0}]中没有可用的网络段",
    "arguments": [
      "v.getUuid()"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocateNicFlow.java"
  },
  {
    "raw": " Can not find the vm\u0027s host, please start the vm[%s], then mount the disk",
    "en_US": " Can not find the vm\u0027s host, please start the vm[{0}], then mount the disk",
    "zh_CN": "未找到虚拟机的物理机，请重启虚拟机[{0}]，然后挂载云盘",
    "arguments": [
      "spec.getVmInventory().getUuid()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java"
  },
  {
    "raw": "cannot find the iso[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is running\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the iso[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is running\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现iso[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \\n1. 镜像服务器是否已经挂载到区域中的任何运行状态的云主机[name: {2}, uuid:{3}]上；\\n2. 如果镜像服务器不是处于连接状态，请尝试重连",
    "arguments": [
      "iso.getUuid()",
      "host.getZoneUuid()",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage. check below:\\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage. check below:\\n1. if the backup storage is attached to the zone where the VM[name: {1}, uuid:{2}] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现镜像[uuid:{0}]在任何处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \\n1. 镜像服务器是否已经过载到区域中的云主机[name: {1}, uuid:{2}]中；\\n2. 如果镜像服务器不是处于连接状态，请尝试重连",
    "arguments": [
      "imageUuid",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现镜像[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \\n1. 镜像服务器是否已经过载到区域中的云主机[name: {2}, uuid:{3}]中；\\n2. 如果镜像服务器不是处于Connected状态，请尝试重连",
    "arguments": [
      "imageUuid",
      "spec.getVmInventory().getZoneUuid()",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "no backup storage attached to the zone[uuid:%s] contains the ISO[uuid:%s]",
    "en_US": "no backup storage attached to the zone[uuid:{0}] contains the ISO[uuid:{1}]",
    "zh_CN": "没有包含着ISO[uuid:{1}]的镜像服务器添加到区域[uuid:{0}]",
    "arguments": [
      "zoneUuid",
      "isoImageUuid"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/compute/vm/VmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "VM[uuid:%s] already has an ISO[uuid:%s] attached",
    "en_US": "VM[uuid:{0}] already has an ISO[uuid:{1}] attached",
    "zh_CN": "云主机[uuid:{0}]已经挂载了ISO[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getIsoUuid()"
    ],
    "line": 341,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "there are %d ipv4 network on same nic",
    "en_US": "there are {0} ipv4 network on same nic",
    "zh_CN": "",
    "arguments": [
      "ipv4Count"
    ],
    "line": 500,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Can not create CD-ROM for vm[uuid:%s] which is in state[%s] ",
    "en_US": "Can not create CD-ROM for vm[uuid:{0}] which is in state[{1}] ",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "vo.getState().toString()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "rootVolumeOffering is needed when image media type is ISO",
    "en_US": "rootVolumeOffering is needed when image media type is ISO",
    "zh_CN": "当镜像类型是ISO时根云盘计算规格需要设置",
    "arguments": [],
    "line": 141,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] is already on host[uuid:%s]",
    "en_US": "the vm[uuid:{0}] is already on host[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经运行于物理机[uuid:{1}]上",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getHostUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM cannot do online cpu/memory update because it is not of NUMA architecture. Please stop the VM then do the cpu/memory update again",
    "en_US": "the VM cannot do online cpu/memory update because it is not of NUMA architecture. Please stop the VM then do the cpu/memory update again",
    "zh_CN": "云主机无法执行在线升级CPU/内存，因为不是NUMA架构。请关闭该云主机再尝试",
    "arguments": [],
    "line": 207,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The state of vm[uuid:%s] is %s. Only these state[%s] is allowed to update cpu or memory.",
    "en_US": "The state of vm[uuid:{0}] is {1}. Only these state[{2}] is allowed to update cpu or memory.",
    "zh_CN": "云主机[uuid:{0}]的状态为{1}。只有这些状态[{2}]允许在线升级CPU/内存",
    "arguments": [
      "vo.getUuid()",
      "vo.getState()",
      "StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), \",\")"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease capacity when vm[uuid:%s] is running",
    "en_US": "can\u0027t decrease capacity when vm[uuid:{0}] is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少容量",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease cpu of vm[uuid:%s] when it is running",
    "en_US": "can\u0027t decrease cpu of vm[uuid:{0}] when it is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少CPU数目",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 224,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease memory size of vm[uuid:%s] when it is running",
    "en_US": "can\u0027t decrease memory size of vm[uuid:{0}] when it is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少容量",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 230,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "either l3NetworkUuids or imageUuid must be set",
    "en_US": "either l3NetworkUuids or imageUuid must be set",
    "zh_CN": "L3网络的uuid们或者镜像的uuid必须被设置",
    "arguments": [],
    "line": 241,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid IPv4 address",
    "en_US": "{0} is not a valid IPv4 address",
    "zh_CN": "{0}不是有效的IPv4地址",
    "arguments": [
      "ip"
    ],
    "line": 256,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ip address [%s] already set to vmNic [uuid:%s]",
    "en_US": "ip address [{0}] already set to vmNic [uuid:{1}]",
    "zh_CN": "IP地址[{0}]已经设置到网卡[uuid:{1}]",
    "arguments": [
      "ip",
      "vmNicVO.getUuid()"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ip address [%s] is not in ip range [%s]",
    "en_US": "ip address [{0}] is not in ip range [{1}]",
    "zh_CN": "IP地址[{0}]不在IP地址段[{1}]范围内",
    "arguments": [
      "ip",
      "rangeVO.getNetworkCidr()"
    ],
    "line": 267,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid IPv6 address",
    "en_US": "{0} is not a valid IPv6 address",
    "zh_CN": "{0}不是有效的IPv6地址",
    "arguments": [
      "ip"
    ],
    "line": 276,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ip address [%s] is not in ip range [startIp %s, endIp %s]",
    "en_US": "ip address [{0}] is not in ip range [startIp {1}, endIp {2}]",
    "zh_CN": "IP地址[{0}]不在IP地址段[{1}-{2}]范围内",
    "arguments": [
      "ip",
      "rangeVO.getStartIp()",
      "rangeVO.getEndIp()"
    ],
    "line": 287,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM[uuid:%s] has no nic on the L3 network[uuid:%s]",
    "en_US": "the VM[uuid:{0}] has no nic on the L3 network[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]在L3网络[uuid:{1}]上没有任何网卡",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 321,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "invalid boot device[%s] in boot order%s",
    "en_US": "invalid boot device[{0}] in boot order{1}",
    "zh_CN": "在启动列表{1}中的设备[{0}]启动失败",
    "arguments": [
      "o",
      "msg.getBootOrder()"
    ],
    "line": 332,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The cdRom[uuid:%s] does not exist",
    "en_US": "The cdRom[uuid:{0}] does not exist",
    "zh_CN": "",
    "arguments": [
      "cdRomUuid"
    ],
    "line": 356,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] cdRom[uuid:%s] has mounted the ISO",
    "en_US": "VM[uuid:{0}] cdRom[uuid:{1}] has mounted the ISO",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "cdRomUuid"
    ],
    "line": 360,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] has multiple ISOs attached, specify the isoUuid when detaching",
    "en_US": "VM[uuid:{0}] has multiple ISOs attached, specify the isoUuid when detaching",
    "zh_CN": "云主机[uuid:{0}]已经加载了多个ISO，卸载ISO时需要指定ISO的Uuid",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 378,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is disabled",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is disabled",
    "zh_CN": "不能挂载L3网络，因为该L3网络[uuid:{0}]处于未启动状态",
    "arguments": [
      "l3Uuid"
    ],
    "line": 482,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the static IP[%s] is not in any IP range of the L3 network[uuid:%s]",
    "en_US": "the static IP[{0}] is not in any IP range of the L3 network[uuid:{1}]",
    "zh_CN": "该静态IP[{0}]不在L3网络[uuid:{1}]的任何IP段",
    "arguments": [
      "staticIp",
      "l3Uuid"
    ],
    "line": 553,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the static IP[%s] has been occupied on the L3 network[uuid:%s]",
    "en_US": "the static IP[{0}] has been occupied on the L3 network[uuid:{1}]",
    "zh_CN": "该静态IP[{0}]已经存在在L3网络[uuid:{1}]中",
    "arguments": [
      "staticIp",
      "l3Uuid"
    ],
    "line": 560,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to attach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "无法挂载L3网络。云主机[uuid: {0}]既不处于Running也不处于Stopped状态中，当前状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] are belonged to different l2 networks [uuids:%s]",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] are belonged to different l2 networks [uuids:{1}]",
    "zh_CN": "不能挂载L3网络，L3网络[uuid:{0}]属于不同的L2网络",
    "arguments": [
      "newAddedL3Uuids",
      "l2Uuids"
    ],
    "line": 446,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] are belonged to l2 networks [uuids:%s] that have not been attached to any cluster",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] are belonged to l2 networks [uuids:{1}] that have not been attached to any cluster",
    "zh_CN": "",
    "arguments": [
      "newAddedL3Uuids",
      "l2Uuids"
    ],
    "line": 453,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "不能挂载L3网络，l3网络[uuid:{0}]已经挂载到云主机[uuid: {1}]上了",
    "arguments": [
      "attachedL3Uuids",
      "msg.getVmInstanceUuid()"
    ],
    "line": 465,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a non-guest L3 network. The L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach a non-guest L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "attachedL3Uuids",
      "msg.getVmInstanceUuid()"
    ],
    "line": 472,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is a system network and vm is a user vm",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is a system network and vm is a user vm",
    "zh_CN": "不能连接三层网络。这个三层网络[uuid:{0}]是系统网络，但虚拟机是一个用户虚拟机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 485,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "there are %d ipv6 stateful or stateless network on same nic",
    "en_US": "there are {0} ipv6 stateful or stateless network on same nic",
    "zh_CN": "不能挂载L3网络，有{0}个Stateful-DHCP类型或者Stateless-DHCP类型的网络属于同一个网卡",
    "arguments": [
      "statefulIpv6"
    ],
    "line": 503,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "static ip l3 uuid[%s] is not included in nic l3 [%s]",
    "en_US": "static ip l3 uuid[{0}] is not included in nic l3 [{1}]",
    "zh_CN": "静态IP的L3网络[uuid:{0}]不在网卡的L3列表[uuid:{1}]中",
    "arguments": [
      "e.getKey()",
      "newAddedL3Uuids"
    ],
    "line": 535,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to attach the nic. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 583,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. The nic has been attached with vm[uuid: %s]",
    "en_US": "unable to attach the nic. The nic has been attached with vm[uuid: {0}]",
    "zh_CN": "",
    "arguments": [
      "vmNicVO.getVmInstanceUuid()"
    ],
    "line": 590,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach the nic. Its L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "vmNicVO.getL3NetworkUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 601,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic with a non-guest L3 network. Its L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach the nic with a non-guest L3 network. Its L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "vmNicVO.getL3NetworkUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 606,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its L3 network[uuid:%s] is disabled",
    "en_US": "unable to attach the nic. Its L3 network[uuid:{0}] is disabled",
    "zh_CN": "",
    "arguments": [
      "l3NetworkVO.getUuid()"
    ],
    "line": 615,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its L3 network[uuid:%s] is a system network and vm is a user vm",
    "en_US": "unable to attach the nic. Its L3 network[uuid:{0}] is a system network and vm is a user vm",
    "zh_CN": "",
    "arguments": [
      "l3NetworkVO.getUuid()"
    ],
    "line": 618,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its l2 network [uuid:%s] that have not been attached to any cluster",
    "en_US": "unable to attach the nic. Its l2 network [uuid:{0}] that have not been attached to any cluster",
    "zh_CN": "",
    "arguments": [
      "l3NetworkVO.getL2NetworkUuid()"
    ],
    "line": 625,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to detach a L3 network. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to detach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "不能挂载L3网络，云主机[uuid: {0}]不是运行状态或者暂停状态，状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 640,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] can only attach volume when state is Running or Stopped, current state is %s",
    "en_US": "vm[uuid:{0}] can only attach volume when state is Running or Stopped, current state is {1}",
    "zh_CN": "云主机[uuid:{0}]挂载盘时状态只能是运行或者暂停状态，而现在的状态是{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 666,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "image mediaType is ISO but missing root disk settings",
    "en_US": "image mediaType is ISO but missing root disk settings",
    "zh_CN": "",
    "arguments": [],
    "line": 674,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Unexpected root disk settings",
    "en_US": "Unexpected root disk settings",
    "zh_CN": "",
    "arguments": [],
    "line": 678,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Missing CPU/memory settings",
    "en_US": "Missing CPU/memory settings",
    "zh_CN": "",
    "arguments": [],
    "line": 689,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Unexpected CPU/memory settings",
    "en_US": "Unexpected CPU/memory settings",
    "zh_CN": "",
    "arguments": [],
    "line": 693,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The image[uuid\u003d%s] does not exist",
    "en_US": "The image[uuid\u003d{0}] does not exist",
    "zh_CN": "",
    "arguments": [
      "cdRomIsoUuid"
    ],
    "line": 881,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Do not allow to mount duplicate ISO",
    "en_US": "Do not allow to mount duplicate ISO",
    "zh_CN": "",
    "arguments": [],
    "line": 886,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The console password cannot start with \u0027password\u0027 which may trigger a VNC security issue",
    "en_US": "The console password cannot start with \u0027password\u0027 which may trigger a VNC security issue",
    "zh_CN": "控制台密码不能以password开头，这样可能导致一个VNC安全问题",
    "arguments": [],
    "line": 901,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "vmNic[uuid:%s] is not attached to vmInstance",
    "en_US": "vmNic[uuid:{0}] is not attached to vmInstance",
    "zh_CN": "网卡[uuid{0}]还没有绑定到云主机",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 910,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "L3 network[uuid:%s] has already been to attached vmNic[uuid:%s]",
    "en_US": "L3 network[uuid:{0}] has already been to attached vmNic[uuid:{1}]",
    "zh_CN": "三层网络[uuid:{0}]已经绑定到网卡[uuid:{1}]",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "msg.getVmNicUuid()"
    ],
    "line": 917,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "there is another IPv6 stateful-dhcp network[uuid:%s] attached vmNic[uuid:%s]",
    "en_US": "there is another IPv6 stateful-dhcp network[uuid:{0}] attached vmNic[uuid:{1}]",
    "zh_CN": "已经有另外一个有状态的IPv6网络[uuid:{0}]绑定到网卡[uuid:{1}]",
    "arguments": [
      "ipVO.getL3NetworkUuid()",
      "msg.getVmNicUuid()"
    ],
    "line": 937,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "there is another IPv4 network[uuid:%s] attached vmNic[uuid:%s]",
    "en_US": "there is another IPv4 network[uuid:{0}] attached vmNic[uuid:{1}]",
    "zh_CN": "已经有另外一个IPv4网络[uuid:{0}]绑定到网卡[uuid:{1}]",
    "arguments": [
      "ipVO.getL3NetworkUuid()",
      "msg.getVmNicUuid()"
    ],
    "line": 926,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "l2Network [uuid:%s] to be attached is different from l2Network [uuid:%s] of the nic",
    "en_US": "l2Network [uuid:{0}] to be attached is different from l2Network [uuid:{1}] of the nic",
    "zh_CN": "将被添加的二层网络[uuid:{0}]和网卡当前的二层网络[uuid:{1}]不同",
    "arguments": [
      "l3Vo.getL2NetworkUuid()",
      "oldL3.getL2NetworkUuid()"
    ],
    "line": 955,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The CdRom[%s] Already the default",
    "en_US": "The CdRom[{0}] Already the default",
    "zh_CN": "",
    "arguments": [
      "vmCdRomVO.getUuid()"
    ],
    "line": 974,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s, name:%s] has been deleted",
    "en_US": "vm[uuid:{0}, name:{1}] has been deleted",
    "zh_CN": "云主机[uuid:{0}, name:{1}]已经被删除了",
    "arguments": [
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 235,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the vm[uuid:%s] has no nic on the L3 network[uuid:%s]",
    "en_US": "the vm[uuid:{0}] has no nic on the L3 network[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}] 没有网卡在L3网络[uuid:{1}]上",
    "arguments": [
      "self.getUuid()",
      "l3Uuid"
    ],
    "line": 766,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the vm has been deleted",
    "en_US": "the vm has been deleted",
    "zh_CN": "云主机已经被删除了",
    "arguments": [],
    "line": 1154,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the ISO[uuid:%s] is on backup storage that is not compatible of the primary storage[uuid:%s] where the VM[name:%s, uuid:%s] is on",
    "en_US": "the ISO[uuid:{0}] is on backup storage that is not compatible of the primary storage[uuid:{1}] where the VM[name:{2}, uuid:{3}] is on",
    "zh_CN": "ISO[uuid:{0}]在镜像服务器上，这个ISO不能兼容主存储[uuid:{1}]在云主机[name:{2}, uuid:{3}]上",
    "arguments": [
      "isoUuid",
      "psUuid",
      "self.getName()",
      "self.getUuid()"
    ],
    "line": 3822,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "host[uuid:%s] capacity is not enough to offer cpu[%s], memory[%s bytes]",
    "en_US": "host[uuid:{0}] capacity is not enough to offer cpu[{1}], memory[{2} bytes]",
    "zh_CN": "物理机[uuid:{0}]无法提供CPU: [{1}]，内存: [{2} bytes]",
    "arguments": [
      "self.getHostUuid()",
      "cpuNum - oldCpuNum",
      "struct.alignedMemory - oldMemorySize"
    ],
    "line": 4224,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "ISO[uuid:%s] is not attached to VM[uuid:%s]",
    "en_US": "ISO[uuid:{0}] is not attached to VM[uuid:{1}]",
    "zh_CN": "ISO[uuid:{0}]未被加载到云主机[uuid:{1}]",
    "arguments": [
      "isoUuid",
      "self.getUuid()"
    ],
    "line": 4444,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "unable to start the vm[uuid:%s]. It doesn\u0027t have any nic, please attach a nic and try again",
    "en_US": "unable to start the vm[uuid:{0}]. It doesn\u0027t have any nic, please attach a nic and try again",
    "zh_CN": "无法启动虚拟机[uuid:{0}]。该虚拟机没有网卡，请添加网卡后再试",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 5174,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "One vm cannot create %s CDROMs, vm can only add %s CDROMs",
    "en_US": "One vm cannot create {0} CDROMs, vm can only add {1} CDROMs",
    "zh_CN": "",
    "arguments": [
      "cdRomSpecs.size()",
      "max"
    ],
    "line": 5411,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "VM[uuid:%s] can only add %s CDROMs",
    "en_US": "VM[uuid:{0}] can only add {1} CDROMs",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "max"
    ],
    "line": 6301,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "update vm[%s] priority to [%s] failed,because %s",
    "en_US": "update vm[{0}] priority to [{1}] failed,because {2}",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "msg.getPriority()",
      "reply.getError()"
    ],
    "line": 6371,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "VmInstanceStartNewCreatedVmExtensionPoint[%s] refuses to create vm[uuid:%s] because %s",
    "en_US": "VmInstanceStartNewCreatedVmExtensionPoint[{0}] refuses to create vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceStartNewCreatedVmExtensionPoint[{0}] 因为{2} 拒绝创建虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceRebootExtensionPoint[%s] refuses to reboot vm[uuid:%s] because %s",
    "en_US": "VmInstanceRebootExtensionPoint[{0}] refuses to reboot vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceRebootExtensionPoint[{0}] 因为{2} 拒绝重启虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 176,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceDestroyVmExtensionPoint[%s] refuses to destroy vm[uuid:%s] because %s",
    "en_US": "VmInstanceDestroyVmExtensionPoint[{0}] refuses to destroy vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceDestroyVmExtensionPoint[{0}] 因为{2} 拒绝删除虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 218,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceStartExtensionPoint[%s] refuses to start vm[uuid:%s] because %s",
    "en_US": "VmInstanceStartExtensionPoint[{0}] refuses to start vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceStartExtensionPoint[{0}] 因为{2} 拒绝启动虚拟机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 259,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "Spice certificate does not exist, Please check if spice tls is enabled",
    "en_US": "Spice certificate does not exist, Please check if spice tls is enabled",
    "zh_CN": "",
    "arguments": [],
    "line": 251,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the image[uuid:%s] is not on any backup storage that has been attached to the zone[uuid:%s]",
    "en_US": "the image[uuid:{0}] is not on any backup storage that has been attached to the zone[uuid:{1}]",
    "zh_CN": "镜像[uuid:{0}]不在任何加载到区域[uuid:{1}]的镜像服务器上",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 434,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the image[name:%s, uuid:%s] is an ISO, rootDiskOfferingUuid must be set",
    "en_US": "the image[name:{0}, uuid:{1}] is an ISO, rootDiskOfferingUuid must be set",
    "zh_CN": "镜像[name:{0}, uuid:{1}]是一个IOS, 必须设置根云盘规格",
    "arguments": [
      "image.getName()",
      "image.getUuid()"
    ],
    "line": 502,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "zoneUuid must be set because the image[name:%s, uuid:%s] is on multiple backup storage",
    "en_US": "zoneUuid must be set because the image[name:{0}, uuid:{1}] is on multiple backup storage",
    "zh_CN": "zoneUuid必须被设置，因为image[name:{0}, uuid:{1}]在多个镜像服务器上",
    "arguments": [
      "image.getName()",
      "image.getUuid()"
    ],
    "line": 542,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "unable to enable this function. There are multi nics of L3 network[uuid:%s] in the vm[uuid: %s]",
    "en_US": "unable to enable this function. There are multi nics of L3 network[uuid:{0}] in the vm[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "tuple.get(0, String.class)",
      "tuple.get(1, String.class)"
    ],
    "line": 1453,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "hostname[%s] specified in system tag[%s] is not a valid domain name",
    "en_US": "hostname[{0}] specified in system tag[{1}] is not a valid domain name",
    "zh_CN": "在系统标签[{1}]中特别声明的主机名[{0}]不是一个有效的域名",
    "arguments": [
      "hostname",
      "tag"
    ],
    "line": 1466,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "only one hostname system tag is allowed, but %s got",
    "en_US": "only one hostname system tag is allowed, but {0} got",
    "zh_CN": "只允许通过系统标签设置一个主机名，但是实际上有{0}",
    "arguments": [
      "hostnameCount"
    ],
    "line": 1478,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "%s is not a valid IPv6 address. Please correct your system tag[%s] of static IP",
    "en_US": "{0} is not a valid IPv6 address. Please correct your system tag[{1}] of static IP",
    "zh_CN": "",
    "arguments": [
      "ip",
      "sysTag"
    ],
    "line": 1514,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "%s is not a valid IPv4 address. Please correct your system tag[%s] of static IP",
    "en_US": "{0} is not a valid IPv4 address. Please correct your system tag[{1}] of static IP",
    "zh_CN": "{0}不是一个有效的IPv4地址。请修改你关于静态IP的系统标签",
    "arguments": [
      "ip",
      "sysTag"
    ],
    "line": 1508,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "IP[%s] is not available on the L3 network[uuid:%s] because: %s",
    "en_US": "IP[{0}] is not available on the L3 network[uuid:{1}] because: {2}",
    "zh_CN": "在L3网络[uuid:{1}]中，IP[{0}]不可用, 因为{2}",
    "arguments": [
      "ip",
      "l3Uuid",
      "cr.getReason()"
    ],
    "line": 1530,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "l3 network [uuid: %s] is added to vm more than once",
    "en_US": "l3 network [uuid: {0}] is added to vm more than once",
    "zh_CN": "",
    "arguments": [
      "uuid"
    ],
    "line": 1573,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "there are %d ipv6 stateful network on same nic",
    "en_US": "there are {0} ipv6 stateful network on same nic",
    "zh_CN": "",
    "arguments": [
      "statefulIpv6Count"
    ],
    "line": 1567,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "L3 network[uuid:%s] not found. Please correct your system tag[%s] of dualStackNic",
    "en_US": "L3 network[uuid:{0}] not found. Please correct your system tag[{1}] of dualStackNic",
    "zh_CN": "",
    "arguments": [
      "primaryL3Uuid",
      "sysTag"
    ],
    "line": 1590,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "L3 networks[primaryL3Uuid:%s, secondaryL3Uuid:%s] of dualStackNic is not on same l2 network",
    "en_US": "L3 networks[primaryL3Uuid:{0}, secondaryL3Uuid:{1}] of dualStackNic is not on same l2 network",
    "zh_CN": "",
    "arguments": [
      "primaryL3Uuid",
      "secondaryL3Uuid"
    ],
    "line": 1595,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "L3 networks[uuid:%s] does not have ip range",
    "en_US": "L3 networks[uuid:{0}] does not have ip range",
    "zh_CN": "",
    "arguments": [
      "secondaryL3Uuid"
    ],
    "line": 1606,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "conflict hostname in system tag[%s]; there has been a VM[uuid:%s] having hostname[%s] on L3 network[uuid:%s]",
    "en_US": "conflict hostname in system tag[{0}]; there has been a VM[uuid:{1}] having hostname[{2}] on L3 network[uuid:{3}]",
    "zh_CN": "系统标签的主机名存在冲突[{0}]；已经存在以一个主机名为[{2}]的VM[uuid:{1}]出现在L3网络[uuid:{3}]中",
    "arguments": [
      "tag",
      "sameTag.getResourceUuid()",
      "hostname",
      "l3Uuid"
    ],
    "line": 1629,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "invalid boot device[%s] in boot order[%s]",
    "en_US": "invalid boot device[{0}] in boot order[{1}]",
    "zh_CN": "在引导顺序[{1}]中存在无效的引导设备[{0}]",
    "arguments": [
      "o",
      "order"
    ],
    "line": 1662,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Already have one userdata systemTag for vm[uuid: %s].",
    "en_US": "Already have one userdata systemTag for vm[uuid: {0}].",
    "zh_CN": "在虚拟机[uuid:{0}]已经存在一个userdata的系统标签",
    "arguments": [
      "resourceUuid"
    ],
    "line": 1680,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Shouldn\u0027t be more than one userdata systemTag for one vm.",
    "en_US": "Shouldn\u0027t be more than one userdata systemTag for one vm.",
    "zh_CN": "在一个虚拟机中不能存在多个userdata的系统标签",
    "arguments": [],
    "line": 1700,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "vm machine type requires [q35, pc], but get [%s]",
    "en_US": "vm machine type requires [q35, pc], but get [{0}]",
    "zh_CN": "",
    "arguments": [
      "type"
    ],
    "line": 1823,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the resource[uuid:%s] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to",
    "en_US": "the resource[uuid:{0}] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to",
    "zh_CN": "当前资源[uuid:{0}]是一个根云盘，你不能改变它的所有者，但是你能够修改对应VM的所有者",
    "arguments": [
      "ref.getResourceUuid()"
    ],
    "line": 2235,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "clean traffic is not supported for vm type [%s]",
    "en_US": "clean traffic is not supported for vm type [{0}]",
    "zh_CN": "",
    "arguments": [
      "vmType"
    ],
    "line": 182,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Duplicate mac address [%s]",
    "en_US": "Duplicate mac address [{0}]",
    "zh_CN": "重复的MAC地址[{0}]",
    "arguments": [
      "msg.getMac()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Can not set security level to not %s vm [uuid:%s]",
    "en_US": "Can not set security level to not {0} vm [uuid:{1}]",
    "zh_CN": "设置密级失败，无法对不处于{0}状态的虚拟机操作[uuid:{1}]",
    "arguments": [
      "VmInstanceState.Stopped",
      "msg.getVmInstanceUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The operation only allows on user vm",
    "en_US": "The operation only allows on user vm",
    "zh_CN": "",
    "arguments": [],
    "line": 108,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "there are not enough capacity for full vm clone to vm[uuid: %s], volumes[uuid: %s] on primary storage[uuid: %s] required: %s bytes, current available capacity is %s bytes",
    "en_US": "there are not enough capacity for full vm clone to vm[uuid: {0}], volumes[uuid: {1}] on primary storage[uuid: {2}] required: {3} bytes, current available capacity is {4} bytes",
    "zh_CN": "没有足够的空间对虚拟机[uuid: {0}]做整机克隆，主存储[uuid: {2}]上的云盘[uuid: {1}]共需要[{3}]字节的空间，目前主存储的可用空间为[{4}]字节",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "volumeVOS.stream().map(VolumeVO::getUuid).collect(Collectors.toList())",
      "primaryStorageUuid",
      "(totalCapacity - snapshotsCapacity) * msg.getNames().size()",
      "primaryStorageVO.getCapacity().getAvailableCapacity()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The nic [%s%s] is not mounted on the VM",
    "en_US": "The nic [{0}{1}] is not mounted on the VM",
    "zh_CN": "网卡[{0}]不能被挂载到虚拟机上",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The operation only allows on user vm ",
    "en_US": "The operation only allows on user vm ",
    "zh_CN": "该操作只能在用户虚拟机上进行",
    "arguments": [],
    "line": 158,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The operation only allows when vm [%s] state is stopped ",
    "en_US": "The operation only allows when vm [{0}] state is stopped ",
    "zh_CN": "该操作只有虚拟机[{0}]状态为已停止才能进行",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 163,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "user has no privilege to change image of vm %s",
    "en_US": "user has no privilege to change image of vm {0}",
    "zh_CN": "当前用户不能修改虚拟机{0}的镜像",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t change vm image when it\u0027s not stopped",
    "en_US": "Can\u0027t change vm image when it\u0027s not stopped",
    "zh_CN": "",
    "arguments": [],
    "line": 205,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t change vm image without L3 network",
    "en_US": "Can\u0027t change vm image without L3 network",
    "zh_CN": "",
    "arguments": [],
    "line": 211,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "make sure the primary storage vm[uuid:%s] was on is Enabled and Connected",
    "en_US": "make sure the primary storage vm[uuid:{0}] was on is Enabled and Connected",
    "zh_CN": "确认主存储[uuid:{0}]是可用的且已连接",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 226,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "make sure the last host vm[uuid:%s] was on is Enabled and Connected",
    "en_US": "make sure the last host vm[uuid:{0}] was on is Enabled and Connected",
    "zh_CN": "确定物理机[uuid:{0}]是可用的且已连接",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 241,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "user has no privilege to change root volume of vm %s using image %s",
    "en_US": "user has no privilege to change root volume of vm {0} using image {1}",
    "zh_CN": "当前用户不能修改使用镜像{1}的虚拟机{0}的根云盘",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getImageUuid()"
    ],
    "line": 260,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "either uuid or account or password must be set",
    "en_US": "either uuid or account or password must be set",
    "zh_CN": "uuid或者账户或者密码需要被设置",
    "arguments": [],
    "line": 271,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "direction must be set in (in, out), but was %s",
    "en_US": "direction must be set in (in, out), but was {0}",
    "zh_CN": "方向必须设置在(in, out)，但是输入的是{0}",
    "arguments": [
      "msg.getDirection()"
    ],
    "line": 279,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Monitor number must be 1 or 2 or 4.",
    "en_US": "Monitor number must be 1 or 2 or 4.",
    "zh_CN": "监听器数量必须是1、2或4",
    "arguments": [],
    "line": 285,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "outboundBandwidth and inboundBandwidth must be set at lease one.",
    "en_US": "outboundBandwidth and inboundBandwidth must be set at lease one.",
    "zh_CN": "上行带宽和下行带宽至少有一个需要被设置",
    "arguments": [],
    "line": 293,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "the nic can\u0027t apply Qos with the port mirror service at same time.",
    "en_US": "the nic can\u0027t apply Qos with the port mirror service at same time.",
    "zh_CN": "",
    "arguments": [],
    "line": 302,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "nic id: %s does not exist...",
    "en_US": "nic id: {0} does not exist...",
    "zh_CN": "网卡id: {0}不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 311,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "unsupported host allocation strategy[%s]",
    "en_US": "unsupported host allocation strategy[{0}]",
    "zh_CN": "不被支持的主机分配策略[{0}]",
    "arguments": [
      "msg.getAllocatorStrategy()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "unsupported instance offering type[%s]",
    "en_US": "unsupported instance offering type[{0}]",
    "zh_CN": "不被支持的计算规格类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "cpu num[%s] is less than 1",
    "en_US": "cpu num[{0}] is less than 1",
    "zh_CN": "cpu数量[{0}]少于1",
    "arguments": [
      "msg.getCpuNum()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "memory size[%s bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size",
    "en_US": "memory size[{0} bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size",
    "zh_CN": "内存大小[{0} bytes]少于16M，没有一个现代操作系统能够在如此小的内存里被引导",
    "arguments": [
      "msg.getMemorySize()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "unsupported primary storage allocation strategy[%s]",
    "en_US": "unsupported primary storage allocation strategy[{0}]",
    "zh_CN": "不被支持的主存储分配策略[{0}]",
    "arguments": [
      "msg.getAllocationStrategy()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "the console agent is not connected; it\u0027s mostly like the management node just starts, please wait for the console agent connected, or you can reconnect it manually if disconnected for a long time.",
    "en_US": "the console agent is not connected; it\u0027s mostly like the management node just starts, please wait for the console agent connected, or you can reconnect it manually if disconnected for a long time.",
    "zh_CN": "控制台代理失联，很有可能管理节点刚刚启动，请等待控制台代理的连接，如果长时间没有连上可以尝试手动重连控制台代理。",
    "arguments": [],
    "line": 101,
    "fileName": "src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java"
  },
  {
    "raw": "cannot find host IP of the vm[uuid:%s], is the vm running???",
    "en_US": "cannot find host IP of the vm[uuid:{0}], is the vm running???",
    "zh_CN": "无法找到vm[uuid:{0}]的主机IP，请确认该vm是否在运行？？？",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java"
  },
  {
    "raw": "Console is only available when the VM[uuid:%s] is Running, but the current state is %s",
    "en_US": "Console is only available when the VM[uuid:{0}] is Running, but the current state is {1}",
    "zh_CN": "仅当VM[uuid:{0}]处于运行状态时控制台可用，但是现在的状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/console/ConsoleApiInterceptor.java"
  },
  {
    "raw": "establish VNC: unexpected uri: %s",
    "en_US": "establish VNC: unexpected uri: {0}",
    "zh_CN": "",
    "arguments": [
      "uri.toString()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyBase.java"
  },
  {
    "raw": "unable to check console proxy availability, because %s",
    "en_US": "unable to check console proxy availability, because {0}",
    "zh_CN": "无法检查控制台代理是否可用，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyBase.java"
  },
  {
    "raw": "Ansible private key not found.",
    "en_US": "Ansible private key not found.",
    "zh_CN": "",
    "arguments": [],
    "line": 153,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "invalid management node UUID[%s]",
    "en_US": "invalid management node UUID[{0}]",
    "zh_CN": "非法的管理节点UUID[{0}]",
    "arguments": [
      "uuid"
    ],
    "line": 347,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "failed to configure consoleProxyOverriddenIp",
    "en_US": "failed to configure consoleProxyOverriddenIp",
    "zh_CN": "设置consoleProxyOverriddenIp失败",
    "arguments": [],
    "line": 468,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "failed to reconnect console proxy",
    "en_US": "failed to reconnect console proxy",
    "zh_CN": "重连控制台代理失败",
    "arguments": [],
    "line": 491,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "User name or password or port number may be problematic",
    "en_US": "User name or password or port number may be problematic",
    "zh_CN": "用户名、密码或者端口可能是错误的",
    "arguments": [],
    "line": 397,
    "fileName": "src/main/java/org/zstack/core/ansible/AnsibleRunner.java"
  },
  {
    "raw": "cannot nmap from agent: %s to callback address: %s:%s",
    "en_US": "cannot nmap from agent: {0} to callback address: {1}:{2}",
    "zh_CN": "",
    "arguments": [
      "targetIp",
      "callbackIp",
      "callBackPort"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/core/ansible/CallBackNetworkChecker.java"
  },
  {
    "raw": "cannot check md5sum of files in the folder[%s].\\nstdout:%s\\nstderr:%s",
    "en_US": "cannot check md5sum of files in the folder[{0}].\\nstdout:{1}\\nstderr:{2}",
    "zh_CN": "无法检查文件夹[{0}]下文件的md5sum.\\nstdout:{1}\\nstderr:{2}",
    "arguments": [
      "srcFolder",
      "srcRes.getStdout()",
      "srcRes.getStderr()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java"
  },
  {
    "raw": "cannot check md5sum of files in the folder[%s] on the host[ip:%s].\\nstdout:%s\\nstderr:%s",
    "en_US": "cannot check md5sum of files in the folder[{0}] on the host[ip:{1}].\\nstdout:{2}\\nstderr:{3}",
    "zh_CN": "无法检查主机[ip:{1}]的文件夹[{0}]下文件的md5sum.\\nstdout:{2}\\nstderr:{3}",
    "arguments": [
      "dstFolder",
      "hostname",
      "dstRes.getStdout()",
      "dstRes.getStderr()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java"
  },
  {
    "raw": "message is not in corrected JSON mediaType, %s",
    "en_US": "message is not in corrected JSON mediaType, {0}",
    "zh_CN": "消息是错误的JSON格式，{0}",
    "arguments": [
      "errMsg"
    ],
    "line": 681,
    "fileName": "src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java"
  },
  {
    "raw": "HTTP ERROR, status code: %s, body: %s",
    "en_US": "HTTP ERROR, status code: {0}, body: {1}",
    "zh_CN": "",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 543,
    "fileName": "src/main/java/org/zstack/core/cloudbus/CloudBusImpl3.java"
  },
  {
    "raw": "for webhooks with type[%s], the field opaque cannot be null",
    "en_US": "for webhooks with type[{0}], the field opaque cannot be null",
    "zh_CN": "对于[{0}]类型的webhooks，opaque字段不能为null",
    "arguments": [
      "EventFacade.WEBHOOK_TYPE"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java"
  },
  {
    "raw": "Unable to find GlobalConfig[category: %s, name: %s]",
    "en_US": "Unable to find GlobalConfig[category: {0}, name: {1}]",
    "zh_CN": "无法找到全局变量[category:{0}, name:{1}]",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java"
  },
  {
    "raw": "non file or jsoncontent input",
    "en_US": "non file or jsoncontent input",
    "zh_CN": "",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "file or jsoncontent cannot both nonempty",
    "en_US": "file or jsoncontent cannot both nonempty",
    "zh_CN": "",
    "arguments": [],
    "line": 82,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "Unable to scan folder: %s",
    "en_US": "Unable to scan folder: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "%s is not existed or is empty folder",
    "en_US": "{0} is not existed or is empty folder",
    "zh_CN": "",
    "arguments": [
      "filename"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "elaboration code must be number!",
    "en_US": "elaboration code must be number!",
    "zh_CN": "",
    "arguments": [],
    "line": 255,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "arg \u0027startTime\u0027 should format like \u0027yyyy-MM-dd HH:mm:ss\u0027 or \u00271545380003000\u0027",
    "en_US": "arg \u0027startTime\u0027 should format like \u0027yyyy-MM-dd HH:mm:ss\u0027 or \u00271545380003000\u0027",
    "zh_CN": "",
    "arguments": [],
    "line": 328,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "%s is not a Long value Number",
    "en_US": "{0} is not a Long value Number",
    "zh_CN": "",
    "arguments": [
      "from"
    ],
    "line": 325,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "%s: %s",
    "en_US": "{0}: {1}",
    "zh_CN": "",
    "arguments": [
      "returnValue.get(0).getContent()",
      "returnValue.get(0).getReason()"
    ],
    "line": 368,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "input args \u0027regex\u0027 or \u0027category\u0027 must be set",
    "en_US": "input args \u0027regex\u0027 or \u0027category\u0027 must be set",
    "zh_CN": "",
    "arguments": [],
    "line": 476,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "service[%s] has been registered",
    "en_US": "service[{0}] has been registered",
    "zh_CN": "服务(service)[{0}]已经被注册",
    "arguments": [
      "service.getName()"
    ],
    "line": 17,
    "fileName": "src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java"
  },
  {
    "raw": "cannot trigger a finished GC job[uuid:%s, name:%s]",
    "en_US": "cannot trigger a finished GC job[uuid:{0}, name:{1}]",
    "zh_CN": "无法触发一个完成过的GC任务",
    "arguments": [
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 244,
    "fileName": "src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java"
  },
  {
    "raw": "parameter apiId[%s] is not a valid uuid.",
    "en_US": "parameter apiId[{0}] is not a valid uuid.",
    "zh_CN": "参数apiId[{0}]不是一个有效的UUID",
    "arguments": [
      "msg.getApiId()"
    ],
    "line": 38,
    "fileName": "src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java"
  },
  {
    "raw": "failed to %s to %s, status code: %s, response body: %s",
    "en_US": "failed to {0} to {1}, status code: {2}, response body: {3}",
    "zh_CN": "访问{1}时执行{0}方法失败，状态码: {2}，响应体: {3}",
    "arguments": [
      "method.toString().toLowerCase()",
      "url",
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 526,
    "fileName": "src/main/java/org/zstack/core/rest/RESTFacadeImpl.java"
  },
  {
    "raw": "failed to %s to %s, IO Error: %s",
    "en_US": "failed to {0} to {1}, IO Error: {2}",
    "zh_CN": "访问{1}时执行{0}方法失败，IO错误: {2}",
    "arguments": [
      "method.toString().toLowerCase()",
      "url",
      "e.getMessage()"
    ],
    "line": 513,
    "fileName": "src/main/java/org/zstack/core/rest/RESTFacadeImpl.java"
  },
  {
    "raw": "unable to echo %s in %sms",
    "en_US": "unable to echo {0} in {1}ms",
    "zh_CN": "无法在{1}ms内返回{0}",
    "arguments": [
      "url",
      "finalTimeout"
    ],
    "line": 569,
    "fileName": "src/main/java/org/zstack/core/rest/RESTFacadeImpl.java"
  },
  {
    "raw": "an operation[%s] fails after retrying %s times with the interval %s seconds",
    "en_US": "an operation[{0}] fails after retrying {1} times with the interval {2} seconds",
    "zh_CN": "在重试{1}次间隔时间为{2}后操作[{0}]失败",
    "arguments": [
      "__name__",
      "times",
      "interval"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/core/retry/Retry.java"
  },
  {
    "raw": "failed to run salt state[%s] on system[%s], failed after %s retries",
    "en_US": "failed to run salt state[{0}] on system[{1}], failed after {2} retries",
    "zh_CN": "重试{2}次之后，在系统[{1}]上运行加盐状态[{0}]失败",
    "arguments": [
      "stateName",
      "targetIp",
      "retry"
    ],
    "line": 296,
    "fileName": "src/main/java/org/zstack/core/salt/SaltRunner.java"
  },
  {
    "raw": "scp is not found on system[%s], unable to setup salt",
    "en_US": "scp is not found on system[{0}], unable to setup salt",
    "zh_CN": "",
    "arguments": [
      "targetIp"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/core/salt/SaltSetupMinionJob.java"
  },
  {
    "raw": "api timeout cannot be set smaller than %s",
    "en_US": "api timeout cannot be set smaller than {0}",
    "zh_CN": "",
    "arguments": [
      "ApiTimeoutGlobalProperty.MINIMAL_TIMEOUT"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/core/timeout/ApiTimeoutManagerImpl.java"
  },
  {
    "raw": "Invalid url[%s]",
    "en_US": "Invalid url[{0}]",
    "zh_CN": "无效的URL[{0}]",
    "arguments": [
      "url"
    ],
    "line": 28,
    "fileName": "src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java"
  },
  {
    "raw": "parameters [accountUuid] only can be used by admin user!",
    "en_US": "parameters [accountUuid] only can be used by admin user!",
    "zh_CN": "参数[accountUuid]必须被admin用户设置",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/daho/core/DahoApiInterceptor.java"
  },
  {
    "raw": "expire policy: %s is not valid",
    "en_US": "expire policy: {0} is not valid",
    "zh_CN": "无效的过期策略:{0}",
    "arguments": [
      "msg.getExpirePolicy()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/daho/core/DahoApiInterceptor.java"
  },
  {
    "raw": "vlanId[%s] has been existed!",
    "en_US": "vlanId[{0}] has been existed!",
    "zh_CN": "",
    "arguments": [
      "msg.getVlan()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/daho/core/DahoApiInterceptor.java"
  },
  {
    "raw": "create daho vll task failed!",
    "en_US": "create daho vll task failed!",
    "zh_CN": "创建daho vll任务失败",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/daho/core/DahoSdkImpl.java"
  },
  {
    "raw": "no aliyun account found for accountUuid: %s",
    "en_US": "no aliyun account found for accountUuid: {0}",
    "zh_CN": "找不到当前账户{0}对应的阿里云账户",
    "arguments": [
      "msg.getAccountUuid()"
    ],
    "line": 170,
    "fileName": "src/main/java/org/zstack/daho/core/DahoSdkImpl.java"
  },
  {
    "raw": "Advice not allowed while scheduling",
    "en_US": "Advice not allowed while scheduling",
    "zh_CN": "",
    "arguments": [],
    "line": 201,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "delete DRS is not allowed while the vm is being migrated",
    "en_US": "delete DRS is not allowed while the vm is being migrated",
    "zh_CN": "",
    "arguments": [],
    "line": 264,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "Scheduling is not allowed while the vm is being migrated",
    "en_US": "Scheduling is not allowed while the vm is being migrated",
    "zh_CN": "",
    "arguments": [],
    "line": 324,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "Lack of host CPU, memory monitoring data",
    "en_US": "Lack of host CPU, memory monitoring data",
    "zh_CN": "",
    "arguments": [],
    "line": 435,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "The cluster[%s] has created DRS",
    "en_US": "The cluster[{0}] has created DRS",
    "zh_CN": "",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "DRS is disabled",
    "en_US": "DRS is disabled",
    "zh_CN": "",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "thresholds can not be empty",
    "en_US": "thresholds can not be empty",
    "zh_CN": "",
    "arguments": [],
    "line": 64,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "illegal thresholdName[%s]",
    "en_US": "illegal thresholdName[{0}]",
    "zh_CN": "",
    "arguments": [
      "threshold.getThresholdName()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "illegal threshold operator[%s]",
    "en_US": "illegal threshold operator[{0}]",
    "zh_CN": "",
    "arguments": [
      "threshold.getOperator()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "thresholdValue can not be empty",
    "en_US": "thresholdValue can not be empty",
    "zh_CN": "",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "illegal thresholdValue, valid range: (0, 100]",
    "en_US": "illegal thresholdValue, valid range: (0, 100]",
    "zh_CN": "",
    "arguments": [],
    "line": 86,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "GlobalConfig ENABLE_DRS is closed",
    "en_US": "GlobalConfig ENABLE_DRS is closed",
    "zh_CN": "",
    "arguments": [],
    "line": 103,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The DRS[%s] state is %s",
    "en_US": "The DRS[{0}] state is {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()",
      "vo.getState().toString()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The DRS[%s] automation level is not manual",
    "en_US": "The DRS[{0}] automation level is not manual",
    "zh_CN": "",
    "arguments": [
      "adviceVO.getDrsUuid()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "advice[%s] has expired",
    "en_US": "advice[{0}] has expired",
    "zh_CN": "",
    "arguments": [
      "msg.getAdviceUuid()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "Successfully executed, no repeated executions allowed",
    "en_US": "Successfully executed, no repeated executions allowed",
    "zh_CN": "",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The vm[%s] has been deleted",
    "en_US": "The vm[{0}] has been deleted",
    "zh_CN": "",
    "arguments": [
      "adviceVO.getVmUuid()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The vm[%s] state is not running",
    "en_US": "The vm[{0}] state is not running",
    "zh_CN": "",
    "arguments": [
      "adviceVO.getVmUuid()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The vm[%s] is no longer on the source host[%s]",
    "en_US": "The vm[{0}] is no longer on the source host[{1}]",
    "zh_CN": "",
    "arguments": [
      "adviceVO.getVmUuid()",
      "adviceVO.getVmSourceHostUuid()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The cluster[%s] does not support DRS.",
    "en_US": "The cluster[{0}] does not support DRS.",
    "zh_CN": "",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 242,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "Can not create DRS, %s",
    "en_US": "Can not create DRS, {0}",
    "zh_CN": "",
    "arguments": [
      "reasons"
    ],
    "line": 258,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "hostUuids is empty",
    "en_US": "hostUuids is empty",
    "zh_CN": "",
    "arguments": [],
    "line": 290,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "query hosts utilization data failed",
    "en_US": "query hosts utilization data failed",
    "zh_CN": "",
    "arguments": [],
    "line": 297,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "crond is not running",
    "en_US": "crond is not running",
    "zh_CN": "crond任务未在运行",
    "arguments": [],
    "line": 54,
    "fileName": "src/main/java/org/zstack/externalservice/cronjob/CronJobImpl.java"
  },
  {
    "raw": "All the networks should be in the virtual router[%s]",
    "en_US": "All the networks should be in the virtual router[{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "The network[%s] have been added into the flow meter[%s]",
    "en_US": "The network[{0}] have been added into the flow meter[{1}]",
    "zh_CN": "",
    "arguments": [
      "vo.getL3NetworkUuid()",
      "vo.getFlowMeterUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "The virtual router have been added into other flow meter",
    "en_US": "The virtual router have been added into other flow meter",
    "zh_CN": "",
    "arguments": [],
    "line": 71,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "invalid type parameter is %s and should be in %s",
    "en_US": "invalid type parameter is {0} and should be in {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getVersion()",
      "FlowMeterConstants.TYPE.NetFlow.toString()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "[%s] is not formatted as IP address",
    "en_US": "[{0}] is not formatted as IP address",
    "zh_CN": "",
    "arguments": [
      "msg.getServer()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "Collector duplicate with %s",
    "en_US": "Collector duplicate with {0}",
    "zh_CN": "",
    "arguments": [
      "collector.getUuid()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "FlowMeter[%s] doesn\u0027t exist",
    "en_US": "FlowMeter[{0}] doesn\u0027t exist",
    "zh_CN": "",
    "arguments": [
      "collectorVO.getFlowMeterUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "FlowMeter[%s] IPv6 doesn\u0027t support version[%s]",
    "en_US": "FlowMeter[{0}] IPv6 doesn\u0027t support version[{1}]",
    "zh_CN": "",
    "arguments": [
      "collectorVO.getFlowMeterUuid()",
      "vo.getVersion().toString()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "no specify parameter",
    "en_US": "no specify parameter",
    "zh_CN": "",
    "arguments": [],
    "line": 150,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "Flow collector[%s] doesn\u0027t exist",
    "en_US": "Flow collector[{0}] doesn\u0027t exist",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "Collector [%s %d] duplicate with %s",
    "en_US": "Collector [{0} {1}] duplicate with {2}",
    "zh_CN": "",
    "arguments": [
      "server",
      "port",
      "collector.getUuid()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "%s must be a number",
    "en_US": "{0} must be a number",
    "zh_CN": "{0}必须是一个数字",
    "arguments": [
      "FlowMeterSystemTags.FLOW_EXPIRE_INTERVAL_TOKEN"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterManagerImpl.java"
  },
  {
    "raw": "cannot get latest guest-tools for vm[uuid:%s] because it\u0027s hypervisor type is not supported",
    "en_US": "cannot get latest guest-tools for vm[uuid:{0}] because it\u0027s hypervisor type is not supported",
    "zh_CN": "无法为云主机[uuid:{0}获取最新可用的增强工具镜像，因为其虚拟化层目前不支持增强工具",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get latest guest-tools for vm[uuid:%s] because it\u0027s not running",
    "en_US": "cannot get latest guest-tools for vm[uuid:{0}] because it\u0027s not running",
    "zh_CN": "无法为云主机[uuid:{0}]获取最新可用的增强工具镜像，因为它目前并未处于运行状态",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get latest guest-tools for vm[uuid:%s] because it\u0027s not user vm",
    "en_US": "cannot get latest guest-tools for vm[uuid:{0}] because it\u0027s not user vm",
    "zh_CN": "无法为云主机[uuid:{0}]获取最新可用的增强工具镜像，因为它不是用户云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it\u0027s hypervisor type is not supported",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it\u0027s hypervisor type is not supported",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为其虚拟化层目前不支持增强工具",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it\u0027s not running",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it\u0027s not running",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为它目前并未处于运行状态",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it\u0027s not user vm",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it\u0027s not user vm",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为它不是用户云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it has no cdrom",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it has no cdrom",
    "zh_CN": "无法为云主机[uuid:{0}挂载增强工具镜像，因为它没有配备光驱",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it has VirtioSCSI data volume attached",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it has VirtioSCSI data volume attached",
    "zh_CN": "无法为云主机[uuid:{0}挂载增强工具镜像，因为它挂载了VirtioSCSI云盘",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get guest-tools info from vm[uuid:%s] because it\u0027s hypervisor type is not supported",
    "en_US": "cannot get guest-tools info from vm[uuid:{0}] because it\u0027s hypervisor type is not supported",
    "zh_CN": "无法从云主机[uuid:{0}]内部获取增强工具信息，因为其虚拟化层目前不支持增强工具",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get guest-tools info from vm[uuid:%s] because it\u0027s not running",
    "en_US": "cannot get guest-tools info from vm[uuid:{0}] because it\u0027s not running",
    "zh_CN": "无法从云主机[uuid:{0}]内部获取增强工具信息，因为它目前并未处于运行状态",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get guest-tools info from vm[uuid:%s] because it\u0027s not user vm",
    "en_US": "cannot get guest-tools info from vm[uuid:{0}] because it\u0027s not user vm",
    "zh_CN": "无法从云主机[uuid:{0}]内部获取增强工具信息，因为它不是用户云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "no proper guest tools iso found in management node[uuid:%s] for host[uuid:%s]",
    "en_US": "no proper guest tools iso found in management node[uuid:{0}] for host[uuid:{1}]",
    "zh_CN": "无法在管理节点[uuid:{0}]上为物理机[uuid:{1}]寻找到合适的增强工具镜像",
    "arguments": [
      "Platform.getManagementServerId()",
      "msg.getHostUuid()"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java"
  },
  {
    "raw": "The vmInstance [uuid] zwatch agent version was not found",
    "en_US": "The vmInstance [uuid] zwatch agent version was not found",
    "zh_CN": "",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsForLinuxOnKvmBackend.java"
  },
  {
    "raw": "failed to download guest tools iso because no kvm host[uuid:%s] found",
    "en_US": "failed to download guest tools iso because no kvm host[uuid:{0}] found",
    "zh_CN": "KVM物理机[uuid:{0}]不存在，无法为其下载增强工具镜像",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsForWindowsOnKvmBackend.java"
  },
  {
    "raw": "failed to attach guest tools iso to vm[uuid:%s], because:%s",
    "en_US": "failed to attach guest tools iso to vm[uuid:{0}], because:{1}",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为:{1}",
    "arguments": [
      "vm.getUuid()",
      "rsp.getError()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsForWindowsOnKvmBackend.java"
  },
  {
    "raw": "failed to get guest tools info from vm[uuid:%s], because:%s",
    "en_US": "failed to get guest tools info from vm[uuid:{0}], because:{1}",
    "zh_CN": "无法从云主机[uuid:{0}]内部获取增强工具信息，因为:{1}",
    "arguments": [
      "vm.getUuid()",
      "rsp.getError()"
    ],
    "line": 160,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsForWindowsOnKvmBackend.java"
  },
  {
    "raw": "hosts failed to port scan the failure host[uuid:%s, ip:%s], errors are %s",
    "en_US": "hosts failed to port scan the failure host[uuid:{0}, ip:{1}], errors are {2}",
    "zh_CN": "扫描物理机失败[uuid:{0}, ip:{1}]，错误原因是 {2}",
    "arguments": [
      "struct.getHostUuid()",
      "struct.getHostIp()",
      "errors"
    ],
    "line": 236,
    "fileName": "src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java"
  },
  {
    "raw": "(%d/%d) start HaHostChecker %s: predict time is [%d] seconds",
    "en_US": "({0}/{1}) start HaHostChecker {2}: predict time is [{3}] seconds",
    "zh_CN": "",
    "arguments": [
      "checkers.indexOf(checker) + 1",
      "checkers.size()",
      "checker.getClass().getSimpleName()",
      "s.getSuccessTimes() * s.getSuccessInterval()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "cannot find the host of the vm[name:%s, uuid:%s], hostUuid is null",
    "en_US": "cannot find the host of the vm[name:{0}, uuid:{1}], hostUuid is null",
    "zh_CN": "找不到vm[name:{0}, uuid:{1}]的物理机, 因为hostUuid为null",
    "arguments": [
      "self.getName()",
      "self.getUuid()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "no HaHostChecker found, cannot do HA",
    "en_US": "no HaHostChecker found, cannot do HA",
    "zh_CN": "找不到HaHostChecker，无法执行HA",
    "arguments": [],
    "line": 151,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "can not ha because device still attached to vm[%s]",
    "en_US": "can not ha because device still attached to vm[{0}]",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "the management node fails to scan the host",
    "en_US": "the management node fails to scan the host",
    "zh_CN": "管理节点扫描物理机失败",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/ha/HaManagementNodeChecker.java"
  },
  {
    "raw": "the VM[uuid:%s] volume stored location primary storage is in a state of maintenance",
    "en_US": "the VM[uuid:{0}] volume stored location primary storage is in a state of maintenance",
    "zh_CN": "虚拟机[{0}]云盘所在主存储处于维护状态",
    "arguments": [
      "vmUuid"
    ],
    "line": 1363,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "the value[%s] is lesser than 0",
    "en_US": "the value[{0}] is lesser than 0",
    "zh_CN": "值[{0}]比0小",
    "arguments": [
      "newValue"
    ],
    "line": 232,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "host[uuid:%s] is not %s, but still have vm on it, please resolve hosts\u0027 problems before enable ha",
    "en_US": "host[uuid:{0}] is not {1}, but still have vm on it, please resolve hosts\u0027 problems before enable ha",
    "zh_CN": "",
    "arguments": [
      "hostUuids",
      "HostStatus.Connected"
    ],
    "line": 247,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "host[uuid:%s] is not %s, but still have vm on it, please resolve hosts\u0027 problems before update fencer strategy",
    "en_US": "host[uuid:{0}] is not {1}, but still have vm on it, please resolve hosts\u0027 problems before update fencer strategy",
    "zh_CN": "",
    "arguments": [
      "hostUuids",
      "HostStatus.Connected"
    ],
    "line": 255,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "there is already a HA GC job for the VM, wait it to run",
    "en_US": "there is already a HA GC job for the VM, wait it to run",
    "zh_CN": "VM已经有一个HA GC任务，等待运行",
    "arguments": [],
    "line": 472,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "A GC job is submitted to HA the VM[retry delay: %s seconds]",
    "en_US": "A GC job is submitted to HA the VM[retry delay: {0} seconds]",
    "zh_CN": "提交GC任务来高可用VM[重试间隔: {0} 秒]",
    "arguments": [
      "HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)"
    ],
    "line": 480,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "HA is successfully completed",
    "en_US": "HA is successfully completed",
    "zh_CN": "",
    "arguments": [],
    "line": 998,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "Failed to HA the VM",
    "en_US": "Failed to HA the VM",
    "zh_CN": "高可用VM失败",
    "arguments": [],
    "line": 1006,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "vm stopped unexpectedly, double check state",
    "en_US": "vm stopped unexpectedly, double check state",
    "zh_CN": "",
    "arguments": [],
    "line": 908,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "cannot determine VM[%s] status on host[%s], try to start it",
    "en_US": "cannot determine VM[{0}] status on host[{1}], try to start it",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 917,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "vm state is stopped, try to start it",
    "en_US": "vm state is stopped, try to start it",
    "zh_CN": "",
    "arguments": [],
    "line": 1112,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "VM[%s] is running on host[%s]",
    "en_US": "VM[{0}] is running on host[{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 934,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "VM[%s] is paused on host[%s]",
    "en_US": "VM[{0}] is paused on host[{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 947,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "the hypervisor[%s] does not support VM HA",
    "en_US": "the hypervisor[{0}] does not support VM HA",
    "zh_CN": "当前虚拟机监视器(hypervisor)[{0}]不支持VM HA",
    "arguments": [
      "vm.getHypervisorType()"
    ],
    "line": 975,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "[HA Worker]: the success ratio[%s] below the threshold[%s], the host[uuid:%s] is judged as dead, errors are %s. Start HA all the vms on this host before",
    "en_US": "[HA Worker]: the success ratio[{0}] below the threshold[{1}], the host[uuid:{2}] is judged as dead, errors are {3}. Start HA all the vms on this host before",
    "zh_CN": "",
    "arguments": [
      "ratio",
      "threshold",
      "hostUuid",
      "errors"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/ha/HostCheckResult.java"
  },
  {
    "raw": "[HA worker]: all host checkers are finished and the success ratio is %s that is greater than the threshold[%s]; no HA need for the vms on this host before. Please wait for the host reconnected",
    "en_US": "[HA worker]: all host checkers are finished and the success ratio is {0} that is greater than the threshold[{1}]; no HA need for the vms on this host before. Please wait for the host reconnected",
    "zh_CN": "",
    "arguments": [
      "ratio",
      "threshold"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/ha/HostCheckResult.java"
  },
  {
    "raw": "Failed to start the NeverStop VM",
    "en_US": "Failed to start the NeverStop VM",
    "zh_CN": "",
    "arguments": [],
    "line": 89,
    "fileName": "src/main/java/org/zstack/ha/NeverStopVmGC.java"
  },
  {
    "raw": "VM is started successfully",
    "en_US": "VM is started successfully",
    "zh_CN": "",
    "arguments": [],
    "line": 80,
    "fileName": "src/main/java/org/zstack/ha/NeverStopVmGC.java"
  },
  {
    "raw": "VM state is not running, try to start it",
    "en_US": "VM state is not running, try to start it",
    "zh_CN": "",
    "arguments": [],
    "line": 74,
    "fileName": "src/main/java/org/zstack/ha/NeverStopVmGC.java"
  },
  {
    "raw": "keyType not supported type [%s]",
    "en_US": "keyType not supported type [{0}]",
    "zh_CN": "",
    "arguments": [
      "type"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java"
  },
  {
    "raw": "key: [%s] already existed by accountUuid: [%s]",
    "en_US": "key: [{0}] already existed by accountUuid: [{1}]",
    "zh_CN": "key: [{0}]已经存在于accountUuid: [{1}]",
    "arguments": [
      "msg.getKey()",
      "accountUuid"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java"
  },
  {
    "raw": "regionId [%s] already created by ak [%s]",
    "en_US": "regionId [{0}] already created by ak [{1}]",
    "zh_CN": "区域ID[{0}]已经被AccessKey[{1}]创建",
    "arguments": [
      "msg.getRegionId()",
      "ak"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java"
  },
  {
    "raw": "dcType not supported type [%s]",
    "en_US": "dcType not supported type [{0}]",
    "zh_CN": "",
    "arguments": [
      "type"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java"
  },
  {
    "raw": "DataCenter [%s] is still in sync progress, please wait.",
    "en_US": "DataCenter [{0}] is still in sync progress, please wait.",
    "zh_CN": "数据中心[{0}]仍在同步进程中，请稍后",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterManagerImpl.java"
  },
  {
    "raw": "identity zone [%s] already existed, uuid is: %s",
    "en_US": "identity zone [{0}] already existed, uuid is: {1}",
    "zh_CN": "可用区[{0}]已经存在，uuid是{1}",
    "arguments": [
      "msg.getZoneId()",
      "izo.getUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "type [%s] is not matched datacenter type [%s]",
    "en_US": "type [{0}] is not matched datacenter type [{1}]",
    "zh_CN": "",
    "arguments": [
      "type",
      "dvo.getDcType().toString()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "either dataCenterUuid or regionId should be set, please check the parameters.",
    "en_US": "either dataCenterUuid or regionId should be set, please check the parameters.",
    "zh_CN": "数据中心Uuid和区域Id应该被设置，请检查参数",
    "arguments": [],
    "line": 82,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "IdentityZone [%s] is still in sync progress, please wait.",
    "en_US": "IdentityZone [{0}] is still in sync progress, please wait.",
    "zh_CN": "可用区[{0}]仍在同步进程中，请稍后",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneManagerImpl.java"
  },
  {
    "raw": "EcsInstance must be running or stopped while deleting eip ",
    "en_US": "EcsInstance must be running or stopped while deleting eip ",
    "zh_CN": "删除弹性IP时云主机必须时允许中或者已停止",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridEipCascadeExtension.java"
  },
  {
    "raw": "router interface must be in the same datacenter, but ri[%s] is in dc[%s] and ri[%s] is in dc[%s]",
    "en_US": "router interface must be in the same datacenter, but ri[{0}] is in dc[{1}] and ri[{2}] is in dc[{3}]",
    "zh_CN": "路由接口必须在相同的数据中心，但是接口[{0}]在数据中心[{1}]而接口[{2}]在数据中心[{3}]",
    "arguments": [
      "vbri.getUuid()",
      "vbri.getDataCenterUuid()",
      "vrouteri.getUuid()",
      "vrouteri.getDataCenterUuid()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "router interface[%s] status is not idle, it is %s",
    "en_US": "router interface[{0}] status is not idle, it is {1}",
    "zh_CN": "路由接口[{0}]并非闲置状态，当前状态为{1}",
    "arguments": [
      "vrouteri.getUuid()",
      "vrouteri.getStatus()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "router interface[%s] already has a connection, it is %s",
    "en_US": "router interface[{0}] already has a connection, it is {1}",
    "zh_CN": "路由接口[{0}]已经有链接{1}",
    "arguments": [
      "vrouteri.getUuid()",
      "vrouteri.getOppositeInterfaceUuid()"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "accessPointUuid cannot be null if the router interface on VBR type router",
    "en_US": "accessPointUuid cannot be null if the router interface on VBR type router",
    "zh_CN": "当路由接口的类型为VBR路由时，accessPointUuid不能为空",
    "arguments": [],
    "line": 112,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot delete system entry",
    "en_US": "cannot delete system entry",
    "zh_CN": "不能删除系统路由条目",
    "arguments": [],
    "line": 186,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "only support intranet rule in vpc",
    "en_US": "only support intranet rule in vpc",
    "zh_CN": "在VPC中仅仅支持内网规则",
    "arguments": [],
    "line": 192,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid cidr",
    "en_US": "{0} is not a valid cidr",
    "zh_CN": "{0}是一个无效的CIDR",
    "arguments": [
      "msg.getCidr()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "security group rule already existed",
    "en_US": "security group rule already existed",
    "zh_CN": "安全组已经存在了",
    "arguments": [],
    "line": 207,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "dstCidrBlock[%s] is not a valid cidr",
    "en_US": "dstCidrBlock[{0}] is not a valid cidr",
    "zh_CN": "dstCidrBlock[{0}]是一个无效的CIDR",
    "arguments": [
      "msg.getDstCidrBlock()"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "next hop type [%s] not supported create route entry now!",
    "en_US": "next hop type [{0}] not supported create route entry now!",
    "zh_CN": "",
    "arguments": [
      "msg.getNextHopType()"
    ],
    "line": 242,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such vpn gateway: %s",
    "en_US": "no such vpn gateway: {0}",
    "zh_CN": "没有这样的VPN网关: {0}",
    "arguments": [
      "msg.getNextHopUuid()"
    ],
    "line": 238,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "nexthop routerInterface belongs to %s, but the entry belongs to %s",
    "en_US": "nexthop routerInterface belongs to {0}, but the entry belongs to {1}",
    "zh_CN": "下一跳路由接口类型是{0}，但是该路由类型是{1}",
    "arguments": [
      "rivo.getvRouterType().toString()",
      "msg.getvRouterType()"
    ],
    "line": 227,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such ecs instance: %s",
    "en_US": "no such ecs instance: {0}",
    "zh_CN": "没有这样的ESC云主机: {0}",
    "arguments": [
      "msg.getNextHopUuid()"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "virtual border router only support routerinterface as next hop type",
    "en_US": "virtual border router only support routerinterface as next hop type",
    "zh_CN": "作为下一跳类型，虚拟边界路由只支持路由接口",
    "arguments": [],
    "line": 252,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "vswitch\u0027s cidr [%s] not in the vpc\u0027s [%s]",
    "en_US": "vswitch\u0027s cidr [{0}] not in the vpc\u0027s [{1}]",
    "zh_CN": "虚拟交换机的CIDR没有在VPC[{1}]中",
    "arguments": [
      "msg.getCidrBlock()",
      "vpcCidr"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "cidr is overlap by another vswitch: %s",
    "en_US": "cidr is overlap by another vswitch: {0}",
    "zh_CN": "CIDR和其他的虚拟交换机{0}有重叠",
    "arguments": [
      "old.getUuid()"
    ],
    "line": 279,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "invalid CidrBlock: %s, which must subnet in \u002710.0.0.0/8\u0027, \u0027172.16.0.0/12\u0027, \u0027192.168.0.0/16\u0027",
    "en_US": "invalid CidrBlock: {0}, which must subnet in \u002710.0.0.0/8\u0027, \u0027172.16.0.0/12\u0027, \u0027192.168.0.0/16\u0027",
    "zh_CN": "无效的CIDR块: {0}，CIDR必须在10.0.0.0/8、172.16.0.0/12和192.168.0.0/16子网内",
    "arguments": [
      "msg.getCidrBlock()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such virtual router: %s",
    "en_US": "no such virtual router: {0}",
    "zh_CN": "没有这个的虚拟路由: {0}",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 308,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such virtual border router: %s",
    "en_US": "no such virtual border router: {0}",
    "zh_CN": "没有这个虚拟边界路由器: {0}",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 303,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "localGateway is not IPv4: %s",
    "en_US": "localGateway is not IPv4: {0}",
    "zh_CN": "本地网关地址不是IPV4: {0}",
    "arguments": [
      "msg.getLocalGatewayIp()"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "peerGateway is not IPv4: %s",
    "en_US": "peerGateway is not IPv4: {0}",
    "zh_CN": "对端网关地址不是IPV4: {0}",
    "arguments": [
      "msg.getPeerGatewayIp()"
    ],
    "line": 318,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "peerGateway is not subnet mask: %s",
    "en_US": "peerGateway is not subnet mask: {0}",
    "zh_CN": "对端网关地址不是在子网掩码{0}中",
    "arguments": [
      "msg.getPeeringSubnetMask()"
    ],
    "line": 321,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "vlanId is not number: %s",
    "en_US": "vlanId is not number: {0}",
    "zh_CN": "vlanId不是一个数字:{0}",
    "arguments": [
      "msg.getVlanId()"
    ],
    "line": 325,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t attach eip to ecs: [%s] , eip :[%s] already attached ecs:[%s] ",
    "en_US": "couldn\u0027t attach eip to ecs: [{0}] , eip :[{1}] already attached ecs:[{2}] ",
    "zh_CN": "不能绑定弹性IP到ECS云主机[{0}]，弹性IP[{1}]已经绑定到ECS云主机[{2}]",
    "arguments": [
      "msg.getEcsUuid()",
      "msg.getEipUuid()",
      "hevo.getAllocateResourceUuid()"
    ],
    "line": 335,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "ecs [%s] already has public ip now",
    "en_US": "ecs [{0}] already has public ip now",
    "zh_CN": "ECS云主机[{0}]已经拥有IP",
    "arguments": [
      "msg.getEcsUuid()"
    ],
    "line": 340,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t attach eip [%s] to ecs: [%s] , ecs is already attached",
    "en_US": "couldn\u0027t attach eip [{0}] to ecs: [{1}] , ecs is already attached",
    "zh_CN": "不能绑定弹性IP[{0}]到ECS云主机[{1}]，ECS云主机已经绑定了弹性IP",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 346,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "eip[%s] and ecs[%s] should be in the same dataCenter ",
    "en_US": "eip[{0}] and ecs[{1}] should be in the same dataCenter ",
    "zh_CN": "弹性IP[{0}]和ECS云主机[{1}]应该在同一个数据中心",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 353,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t detach eip :[%s], it is not attached on any instance ",
    "en_US": "couldn\u0027t detach eip :[{0}], it is not attached on any instance ",
    "zh_CN": "不能解绑弹性IP[{0}]，因为它没有绑定任何云主机",
    "arguments": [
      "msg.getEipUuid()"
    ],
    "line": 362,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid ipv4 address",
    "en_US": "{0} is not a valid ipv4 address",
    "zh_CN": "{0}是一个无效的IPV4地址",
    "arguments": [
      "msg.getId()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "localCidr must be Cidr!",
    "en_US": "localCidr must be Cidr!",
    "zh_CN": "本地CIDR必须是CIDR",
    "arguments": [],
    "line": 51,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "remoteCidr must be Cidr!",
    "en_US": "remoteCidr must be Cidr!",
    "zh_CN": "远程CIDR必须是CIDR",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "localCidr and remoteCidr must be Cidr!",
    "en_US": "localCidr and remoteCidr must be Cidr!",
    "zh_CN": "本地CIDR和远程CIDR必须是CIDR",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "vpngateway [%s] existed, cannot delete remote",
    "en_US": "vpngateway [{0}] existed, cannot delete remote",
    "zh_CN": "VPN网关[{0}]已经存在，不能删除远程的",
    "arguments": [
      "gateways.get(0).getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnGatewayCascadeExtension.java"
  },
  {
    "raw": "virtual id[uuid:%s] is platform user can not be added to project[uuid:%s]",
    "en_US": "virtual id[uuid:{0}] is platform user can not be added to project[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "vid",
      "msg.getProjectUuid()"
    ],
    "line": 420,
    "fileName": "src/main/java/org/zstack/iam2/IAM2AttributeHelper.java"
  },
  {
    "raw": "Can not add both platform role and project role to virtual id",
    "en_US": "Can not add both platform role and project role to virtual id",
    "zh_CN": "",
    "arguments": [],
    "line": 450,
    "fileName": "src/main/java/org/zstack/iam2/IAM2AttributeHelper.java"
  },
  {
    "raw": "Can not add project role to platform virtual id[uuid:%s]",
    "en_US": "Can not add project role to platform virtual id[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "virtualIDUuid"
    ],
    "line": 458,
    "fileName": "src/main/java/org/zstack/iam2/IAM2AttributeHelper.java"
  },
  {
    "raw": "wrong virtual ID[name:%s], not existing or wrong password",
    "en_US": "wrong virtual ID[name:{0}], not existing or wrong password",
    "zh_CN": "错误的virtual ID[名称:{0}], 密码不存在或者密码错误",
    "arguments": [
      "msg.getName()"
    ],
    "line": 319,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "additional authentication failed",
    "en_US": "additional authentication failed",
    "zh_CN": "附加认证失败",
    "arguments": [],
    "line": 326,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "project[name:%s] not existing",
    "en_US": "project[name:{0}] not existing",
    "zh_CN": "项目[name:{0}]不存在",
    "arguments": [
      "msg.getProjectName()"
    ],
    "line": 366,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "no account found for project[uuid:%s, name:%s]",
    "en_US": "no account found for project[uuid:{0}, name:{1}]",
    "zh_CN": "",
    "arguments": [
      "puuid",
      "msg.getProjectName()"
    ],
    "line": 374,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "wrong virtual ID[uuid:%s], not existing or wrong password",
    "en_US": "wrong virtual ID[uuid:{0}], not existing or wrong password",
    "zh_CN": "错误的virtual ID[uuid:{0}], 密码不存在或者密码错误",
    "arguments": [
      "msg.getSession().getUserUuid()"
    ],
    "line": 380,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "virtual ID[name:%s] is disabled",
    "en_US": "virtual ID[name:{0}] is disabled",
    "zh_CN": "virtual ID[名称:{0}]不可用",
    "arguments": [
      "vid.getName()"
    ],
    "line": 385,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "virtual ID[name:%s] not belonging to the project[name:%s]",
    "en_US": "virtual ID[name:{0}] not belonging to the project[name:{1}]",
    "zh_CN": "virtual ID[名称:{0}]不属于项目[name:{1}]",
    "arguments": [
      "vid.getName()",
      "msg.getProjectName()"
    ],
    "line": 391,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "There are %d problems with the file. ",
    "en_US": "There are {0} problems with the file. ",
    "zh_CN": "文件中包含{0}个错误",
    "arguments": [
      "results.size()"
    ],
    "line": 647,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "fail to load VirtualID info from file. because\\n%s",
    "en_US": "fail to load VirtualID info from file. because\\n{0}",
    "zh_CN": "解析文件内容出错，{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 664,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "name cannot be empty. ",
    "en_US": "name cannot be empty. ",
    "zh_CN": "名称不能为空",
    "arguments": [],
    "line": 675,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "userName[%s] is repeated. ",
    "en_US": "userName[{0}] is repeated. ",
    "zh_CN": "用户名[{0}]重复",
    "arguments": [
      "cmsg.getUsername()"
    ],
    "line": 683,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "name exceeds max length of string. expected was \u003c\u003d 255, actual was %s. ",
    "en_US": "name exceeds max length of string. expected was \u003c\u003d 255, actual was {0}. ",
    "zh_CN": "名称字符数量不能超过255",
    "arguments": [
      "cmsg.username.length()"
    ],
    "line": 681,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "username cannot be empty. ",
    "en_US": "username cannot be empty. ",
    "zh_CN": "用户名不能为空",
    "arguments": [],
    "line": 679,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "Incorrect password length. expected was \u003e\u003d 6 and \u003c\u003d 255, actual was %s. ",
    "en_US": "Incorrect password length. expected was \u003e\u003d 6 and \u003c\u003d 255, actual was {0}. ",
    "zh_CN": "密码长度错误，应该大于等于6个字符，小于等于255字符",
    "arguments": [
      "cmsg.password.length()"
    ],
    "line": 689,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "password cannot be empty. ",
    "en_US": "password cannot be empty. ",
    "zh_CN": "密码不能为空",
    "arguments": [],
    "line": 687,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "email format does not match. ",
    "en_US": "email format does not match. ",
    "zh_CN": "邮箱格式错误",
    "arguments": [],
    "line": 697,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "organization[%s] is not exist. ",
    "en_US": "organization[{0}] is not exist. ",
    "zh_CN": "部门[{0}]不存在",
    "arguments": [
      "noMatchNames"
    ],
    "line": 753,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "organization[%s] in line is repeated. ",
    "en_US": "organization[{0}] in line is repeated. ",
    "zh_CN": "部门[{0}]出现重复",
    "arguments": [
      "repeatNames"
    ],
    "line": 761,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "organization[%s] is repeated. ",
    "en_US": "organization[{0}] is repeated. ",
    "zh_CN": "部门[{0}]出现重复",
    "arguments": [
      "repeatNames"
    ],
    "line": 769,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "project[%s] is not exist. ",
    "en_US": "project[{0}] is not exist. ",
    "zh_CN": "项目[{0}]不存在",
    "arguments": [
      "noMatchName"
    ],
    "line": 799,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "fail to build VirtualID info from file. ",
    "en_US": "fail to build VirtualID info from file. ",
    "zh_CN": "不能解析文件内容",
    "arguments": [],
    "line": 963,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "virtualID[uuid:%s] not in project[uuid:%s]",
    "en_US": "virtualID[uuid:{0}] not in project[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "resourceUuid",
      "projectUuid"
    ],
    "line": 1034,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "Can not do operations, because current organization[uuid:%s] is staled, please enable it",
    "en_US": "Can not do operations, because current organization[uuid:{0}] is staled, please enable it",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/iam2/IAM2OrganizationBase.java"
  },
  {
    "raw": "organization[uuid:%s] is parent of the organization[uuid:%s], cannot set it as a child organization",
    "en_US": "organization[uuid:{0}] is parent of the organization[uuid:{1}], cannot set it as a child organization",
    "zh_CN": "部门[uuid:{0}]是部门[uuid:{1}]的上级部门，无法被设置为子部门",
    "arguments": [
      "puuid",
      "self.getUuid()"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/iam2/IAM2OrganizationBase.java"
  },
  {
    "raw": "the project[uuid: %s, name:%s] is in state of %s which disallows the operation[%s]",
    "en_US": "the project[uuid: {0}, name:{1}] is in state of {2} which disallows the operation[{3}]",
    "zh_CN": "项目[[uuid: {0}, 名称:{1}]]是{2}状态，不允许执行[{3}]操作",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getState()",
      "msg.getClass()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectBase.java"
  },
  {
    "raw": "Can not do operations, because Current virtualID[uuid:%s] is staled, please enable it",
    "en_US": "Can not do operations, because Current virtualID[uuid:{0}] is staled, please enable it",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java"
  },
  {
    "raw": "only admin and the virtual ID itself can do the update",
    "en_US": "only admin and the virtual ID itself can do the update",
    "zh_CN": "只有admin和virtual ID本身可以执行更新操作",
    "arguments": [],
    "line": 554,
    "fileName": "src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java"
  },
  {
    "raw": "old password is not equal to the original password, cannot update the password of virtual ID[uuid:%s]",
    "en_US": "old password is not equal to the original password, cannot update the password of virtual ID[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getVirtualIDUuid()"
    ],
    "line": 558,
    "fileName": "src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java"
  },
  {
    "raw": "attribute name cannot be null, value[%s]",
    "en_US": "attribute name cannot be null, value[{0}]",
    "zh_CN": "属性不能为null，输入值[{0}]",
    "arguments": [
      "attr.getValue()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute name[%s] exceed the max length of 2048 chars",
    "en_US": "attribute name[{0}] exceed the max length of 2048 chars",
    "zh_CN": "属性名称[{0}]不能超过2048个字符",
    "arguments": [
      "attr.getName()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[name:%s] value[%s] exceed the max length of 2048 chars",
    "en_US": "attribute[name:{0}] value[{1}] exceed the max length of 2048 chars",
    "zh_CN": "属性[name:{0}] value[{1}]不能超过2048个字符",
    "arguments": [
      "attr.getName()",
      "attr.getValue()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "admin is a reserved name, please use another name",
    "en_US": "admin is a reserved name, please use another name",
    "zh_CN": "admin是保留名称，请使用其他名称",
    "arguments": [],
    "line": 151,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "invalid name[%s], there has been a project or account with the same name",
    "en_US": "invalid name[{0}], there has been a project or account with the same name",
    "zh_CN": "无效的名称[{0}],已经存在同名的项目或账户",
    "arguments": [
      "msg.getName()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any group",
    "en_US": "attribute[uuid:{0}] is not for any group",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any organization",
    "en_US": "attribute[uuid:{0}] is not for any organization",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any project",
    "en_US": "attribute[uuid:{0}] is not for any project",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any virtual ID",
    "en_US": "attribute[uuid:{0}] is not for any virtual ID",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "retire policy must be deleted before pull the project out of Retired state",
    "en_US": "retire policy must be deleted before pull the project out of Retired state",
    "zh_CN": "",
    "arguments": [],
    "line": 211,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "login is prohibited because the project is in state of %s",
    "en_US": "login is prohibited because the project is in state of {0}",
    "zh_CN": "",
    "arguments": [
      "state"
    ],
    "line": 223,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "no quota[name:%s] found",
    "en_US": "no quota[name:{0}] found",
    "zh_CN": "",
    "arguments": [
      "name"
    ],
    "line": 237,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "organization[uuid:%s] is a Company that cannot have parent organization",
    "en_US": "organization[uuid:{0}] is a Company that cannot have parent organization",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 261,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "duplicate virtualID name[%s]",
    "en_US": "duplicate virtualID name[{0}]",
    "zh_CN": "重复的用户名[{0}]",
    "arguments": [
      "msg.getName()"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "duplicate project name[%s]",
    "en_US": "duplicate project name[{0}]",
    "zh_CN": "重复的项目名[{0}]",
    "arguments": [
      "msg.getName()"
    ],
    "line": 291,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "invalid project name[%s], there has been an account or project with the same name",
    "en_US": "invalid project name[{0}], there has been an account or project with the same name",
    "zh_CN": "无效的项目名[{0}]，已经存在已经账户或者项目使用了相同的名字",
    "arguments": [
      "msg.getName()"
    ],
    "line": 299,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "The project[uuid\u003d%s] has been attached to the organization[uuid\u003d%s]",
    "en_US": "The project[uuid\u003d{0}] has been attached to the organization[uuid\u003d{1}]",
    "zh_CN": "",
    "arguments": [
      "refVO.getProjectUuid()",
      "refVO.getOrganizationUuid()"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "The project[uuid\u003d%s] is not attached",
    "en_US": "The project[uuid\u003d{0}] is not attached",
    "zh_CN": "",
    "arguments": [
      "msg.getProjectUuid()"
    ],
    "line": 325,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "organizations%s are company that cannot be children of other organization",
    "en_US": "organizations{0} are company that cannot be children of other organization",
    "zh_CN": "组织{0}类型是子公司，不能设置为其它组织的部门",
    "arguments": [
      "uuids"
    ],
    "line": 336,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "can not operate stale virtual ids: %s",
    "en_US": "can not operate stale virtual ids: {0}",
    "zh_CN": "无法操作无效的用户: {0}",
    "arguments": [
      "staleVirtualIDs"
    ],
    "line": 398,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "virtual ids%s not in the project the group[uuid:%s] belongs to",
    "en_US": "virtual ids{0} not in the project the group[uuid:{1}] belongs to",
    "zh_CN": "用户{0}不在用户组[uuid:{1}]所在的项目中",
    "arguments": [
      "wrong",
      "msg.getGroupUuid()"
    ],
    "line": 417,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[name:%s] is a system attribute that cannot be updated",
    "en_US": "attribute[name:{0}] is a system attribute that cannot be updated",
    "zh_CN": "属性[名称：{0}]是一个系统属性，无法被更新",
    "arguments": [],
    "line": 69,
    "fileName": "src/main/java/org/zstack/iam2/attribute/SystemAttributes.java"
  },
  {
    "raw": "virtual ID[uuid:%s] not existing",
    "en_US": "virtual ID[uuid:{0}] not existing",
    "zh_CN": "用户[uuid:{0}]不存在",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java"
  },
  {
    "raw": "virtual ID[uuid:%s] not in organization[uuid:%s]",
    "en_US": "virtual ID[uuid:{0}] not in organization[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "inv.getValue()",
      "((IAM2OrganizationAttributeInventory) inv).getOrganizationUuid()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java"
  },
  {
    "raw": "organization[uuid:%s] already has a supervisor",
    "en_US": "organization[uuid:{0}] already has a supervisor",
    "zh_CN": "组织[uuid:{0}]已经设置了负责人",
    "arguments": [
      "oinv.getOrganizationUuid()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java"
  },
  {
    "raw": "the project[uuid:%s, name:%s] already has a retire policy",
    "en_US": "the project[uuid:{0}, name:{1}] already has a retire policy",
    "zh_CN": "项目[uuid:{0}, name:{1}]已经设置了回收策略",
    "arguments": [
      "pinv.getUuid()",
      "pinv.getName()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/Retire.java"
  },
  {
    "raw": "invalid value, no \u0027at\u0027, \u0027after\u0027 or \u0027exceed\u0027 found",
    "en_US": "invalid value, no \u0027at\u0027, \u0027after\u0027 or \u0027exceed\u0027 found",
    "zh_CN": "无效的值，找不到关键字no \u0027at\u0027, \u0027after\u0027 or \u0027exceed\u0027",
    "arguments": [],
    "line": 52,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid value, %s",
    "en_US": "invalid value, {0}",
    "zh_CN": "无效的值, {0}",
    "arguments": [
      "value"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid means[%s], allowed means are %s",
    "en_US": "invalid means[{0}], allowed means are {1}",
    "zh_CN": "无效的回收方法[{0}]，允许的方法是{1}",
    "arguments": [
      "ss[0]",
      "Means.values()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid spending value[%s], it should be in format of for example 10.001",
    "en_US": "invalid spending value[{0}], it should be in format of for example 10.001",
    "zh_CN": "无效的费用[{0}], 费用格式应该符合例如：10.001",
    "arguments": [
      "policyValue"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid spending value[%s], spending value should between 0 and %f",
    "en_US": "invalid spending value[{0}], spending value should between 0 and {1}",
    "zh_CN": "无效的费用[{0}], 费用范围应该在0到{1}之间",
    "arguments": [
      "policyValue",
      "Double.MAX_VALUE"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid time[%s], it should be in format of for example 10m, 1h, 2d",
    "en_US": "invalid time[{0}], it should be in format of for example 10m, 1h, 2d",
    "zh_CN": "无效的时间[{0}]，时间格式需要符合例如：10m, 1h, 2d",
    "arguments": [
      "policyValue"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid date[%s], it should be in format of yyyy-MM-dd HH:mm:ss",
    "en_US": "invalid date[{0}], it should be in format of yyyy-MM-dd HH:mm:ss",
    "zh_CN": "无效的日期，日期格式需要符合：yyyy-MM-dd HH:mm:ss",
    "arguments": [
      "policyValue"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid date or time[%s], it cannot be before current time[%s]",
    "en_US": "invalid date or time[{0}], it cannot be before current time[{1}]",
    "zh_CN": "无效的日期或时间，回收时间不能在当前时间之前[{1}]",
    "arguments": [
      "policyValue",
      "dateFormat.format(new Timestamp(System.currentTimeMillis()))"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "virtual ID[uuid:%s] already has admin related attributes, can not add %s",
    "en_US": "virtual ID[uuid:{0}] already has admin related attributes, can not add {1}",
    "zh_CN": "用户[uuid:{0}]已经有管理员属性了，无法继续添加属性{1}",
    "arguments": [
      "vid",
      "attributeName"
    ],
    "line": 17,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/AbstractAdminAttribute.java"
  },
  {
    "raw": "virtual id[uuid:%s] already has a project operator attribute",
    "en_US": "virtual id[uuid:{0}] already has a project operator attribute",
    "zh_CN": "",
    "arguments": [
      "idinv.getVirtualIDUuid()"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/IAM2ProjectOperator.java"
  },
  {
    "raw": "cannot find zone[uuid:%s]",
    "en_US": "cannot find zone[uuid:{0}]",
    "zh_CN": "找不到区域[uuid:{0}]",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 36,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/PlatformAdminZoneRelation.java"
  },
  {
    "raw": "project[uuid:%s] already has a project admin",
    "en_US": "project[uuid:{0}] already has a project admin",
    "zh_CN": "项目[uuid:{0}]已经设置过项目管理员了",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java"
  },
  {
    "raw": "project[uuid:%s] not existing",
    "en_US": "project[uuid:{0}] not existing",
    "zh_CN": "项目[uuid:{0}]不存在",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java"
  },
  {
    "raw": "the operations[%s] is denied",
    "en_US": "the operations[{0}] is denied",
    "zh_CN": "",
    "arguments": [
      "deniedApis"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/iam2/rbac/IAM2AuthorizationBackend.java"
  },
  {
    "raw": "project of account[uuid:%s] not exists",
    "en_US": "project of account[uuid:{0}] not exists",
    "zh_CN": "账户为[uuid:{0}]的项目不存在",
    "arguments": [
      "session.getAccountUuid()"
    ],
    "line": 28,
    "fileName": "src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java"
  },
  {
    "raw": "project[uuid:%s] is retired, reject all operations",
    "en_US": "project[uuid:{0}] is retired, reject all operations",
    "zh_CN": "项目[uuid:{0}]已经过期，无法操作",
    "arguments": [
      "projectUuid"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java"
  },
  {
    "raw": "the user group[uuid:%s] does not belong to the account[uuid:%s]",
    "en_US": "the user group[uuid:{0}] does not belong to the account[uuid:{1}]",
    "zh_CN": "这个用户组[uuid:{0}]不属于当前账户[uuid:{1}]",
    "arguments": [
      "group.getUuid()",
      "msg.getAccountUuid()"
    ],
    "line": 323,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "cannot find Quota[name: %s] for the account[uuid: %s]",
    "en_US": "cannot find Quota[name: {0}] for the account[uuid: {1}]",
    "zh_CN": "无法为当前账户[uuid: {1}]找到Quota",
    "arguments": [
      "msg.getName()",
      "msg.getIdentityUuid()"
    ],
    "line": 425,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "the account[uuid: %s] doesn\u0027t have a resource[uuid: %s]",
    "en_US": "the account[uuid: {0}] doesn\u0027t have a resource[uuid: {1}]",
    "zh_CN": "账户[uuid: {0}]没有资源[uuid: {1}]",
    "arguments": [
      "self.getUuid()",
      "ruuid"
    ],
    "line": 504,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "the user[uuid:%s] does not belong to the account[uuid:%s]",
    "en_US": "the user[uuid:{0}] does not belong to the account[uuid:{1}]",
    "zh_CN": "当前用户[uuid:{0}]不属于当前账户[uuid:{1}]",
    "arguments": [
      "user.getUuid()",
      "msg.getAccountUuid()"
    ],
    "line": 561,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "old password is not equal to the original password, cannot update the password of user[uuid:%s]",
    "en_US": "old password is not equal to the original password, cannot update the password of user[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "user.getUuid()"
    ],
    "line": 566,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "wrong password",
    "en_US": "wrong password",
    "zh_CN": "",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/identity/AccountInterceptor.java"
  },
  {
    "raw": "a statement must have effect field. Invalid statement[%s]",
    "en_US": "a statement must have effect field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有\u0027effect\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1612,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "a statement must have action field. Invalid statement[%s]",
    "en_US": "a statement must have action field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有\u0027action\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1615,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "a statement must have a non-empty action field. Invalid statement[%s]",
    "en_US": "a statement must have a non-empty action field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有不为空的\u0027action\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1618,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot find the resource[uuid:%s]; wrong resourceUuid or the resource is admin resource",
    "en_US": "cannot find the resource[uuid:{0}]; wrong resourceUuid or the resource is admin resource",
    "zh_CN": "无法找到资源[uuid:{0}]: 错误的资源uuid或者资源是管理员资源",
    "arguments": [
      "resourceUuid"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the user specified by the userUuid[%s] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user\u0027spermissions",
    "en_US": "the user specified by the userUuid[{0}] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user\u0027spermissions",
    "zh_CN": "当前通过userUuid获得的user不属于当前账户，而且当前账户不是管理员账户",
    "arguments": [
      "msg.getUserUuid()"
    ],
    "line": 399,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot find the account[uuid:%s]",
    "en_US": "cannot find the account[uuid:{0}]",
    "zh_CN": "找不到账户[uuid:{0}]",
    "arguments": [
      "accountUuid"
    ],
    "line": 1009,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "accountName and accountUuid cannot both be null, you must specify at least one",
    "en_US": "accountName and accountUuid cannot both be null, you must specify at least one",
    "zh_CN": "账户名和账户Uuid不能同时为空，您必须定义至少一个",
    "arguments": [],
    "line": 1447,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create a group. A group called %s is already under the account[uuid:%s]",
    "en_US": "unable to create a group. A group called {0} is already under the account[uuid:{1}]",
    "zh_CN": "不能创建用户组，用户组“{0}”已经在账户“{0}”下了",
    "arguments": [
      "msg.getName()",
      "msg.getAccountUuid()"
    ],
    "line": 1458,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create a user. A user called %s is already under the account[uuid:%s]",
    "en_US": "unable to create a user. A user called {0} is already under the account[uuid:{1}]",
    "zh_CN": "不能创建用户，用户“{0}”已经在账户“{0}”下了",
    "arguments": [
      "msg.getName()",
      "msg.getAccountUuid()"
    ],
    "line": 1468,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create an account. An account already called %s",
    "en_US": "unable to create an account. An account already called {0}",
    "zh_CN": "不能创建账户，“{0}”已经被使用",
    "arguments": [
      "msg.getName()"
    ],
    "line": 1477,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "account cannot delete itself",
    "en_US": "account cannot delete itself",
    "zh_CN": "账户不能删除自己",
    "arguments": [],
    "line": 1484,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot delete builtin admin account.",
    "en_US": "cannot delete builtin admin account.",
    "zh_CN": "",
    "arguments": [],
    "line": 1490,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "Only admin can delete account.",
    "en_US": "Only admin can delete account.",
    "zh_CN": "只有admin能删除账户",
    "arguments": [],
    "line": 1496,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the current session is an account session. You need to specify the field \u0027uuid\u0027 of the user you want to update",
    "en_US": "the current session is an account session. You need to specify the field \u0027uuid\u0027 of the user you want to update",
    "zh_CN": "当前会话是一个账户会话，你需要定义一个\u0027uuid\u0027字段来指定你要更新的用户",
    "arguments": [],
    "line": 1504,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "your are login as a user, you cannot another user[uuid:%s]",
    "en_US": "your are login as a user, you cannot another user[uuid:{0}]",
    "zh_CN": "你已经登录为一个用户，不能成为另一个用户[uuid:{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1519,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "all is set to false, accountUuids cannot be null or empty",
    "en_US": "all is set to false, accountUuids cannot be null or empty",
    "zh_CN": "all参数被设为false时，账户uuid不能为空",
    "arguments": [],
    "line": 1527,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "toPublic is set to false, accountUuids cannot be null or empty",
    "en_US": "toPublic is set to false, accountUuids cannot be null or empty",
    "zh_CN": "toPublic参数被设为false时，账户uuid不能为空",
    "arguments": [],
    "line": 1535,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "policy[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "policy[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "策略[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "policy.getName()",
      "policy.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1584,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "user[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "user[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "用户[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "user.getName()",
      "user.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1598,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "group[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "group[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "用户组[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "group.getName()",
      "group.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1602,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to update name. An account already called %s",
    "en_US": "unable to update name. An account already called {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getName()"
    ],
    "line": 1643,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "old password is not equal to the original password, cannot update the password of account[uuid: %s]",
    "en_US": "old password is not equal to the original password, cannot update the password of account[uuid: {0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1654,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the name of admin account cannot be updated",
    "en_US": "the name of admin account cannot be updated",
    "zh_CN": "不能更改管理员账户名称",
    "arguments": [],
    "line": 1659,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "only admin account can update it\u0027s password",
    "en_US": "only admin account can update it\u0027s password",
    "zh_CN": "",
    "arguments": [],
    "line": 1665,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "account[uuid: %s, name: %s] is a normal account, it cannot reset the password of another account[uuid: %s]",
    "en_US": "account[uuid: {0}, name: {1}] is a normal account, it cannot reset the password of another account[uuid: {2}]",
    "zh_CN": "[uuid: {0}, 名称: {1}]是一个普通账户，不能被其他普通账户重设密码",
    "arguments": [
      "account.getUuid()",
      "account.getName()",
      "msg.getUuid()"
    ],
    "line": 1672,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "permission denied, the account[uuid:%s] is not the owner of the resource[uuid:%s, type:%s]",
    "en_US": "permission denied, the account[uuid:{0}] is not the owner of the resource[uuid:{1}, type:{2}]",
    "zh_CN": "操作错误，账户[uuid:{0}]不是资源[uuid:{1}, type:{2}]的所有者",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getAccountUuid()",
      "uuid",
      "resourceType.getSimpleName()"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java"
  },
  {
    "raw": "the account[uuid:%s] has no access to the resources[uuid:%s, type:%s]",
    "en_US": "the account[uuid:{0}] has no access to the resources[uuid:{1}, type:{2}]",
    "zh_CN": "账户[uuid:{0}]无法使用资源[uuid:{1}, type:{2}]",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getAccountUuid()",
      "resourceWithNoAccess",
      "resourceType.getSimpleName()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java"
  },
  {
    "raw": "operation[API:%s] is denied by default, please contact admin to correct it",
    "en_US": "operation[API:{0}] is denied by default, please contact admin to correct it",
    "zh_CN": "",
    "arguments": [
      "rbacEntity.getApiMessage().getClass().getName()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java"
  },
  {
    "raw": "the operation is denied by the policy[name:%s uuid:%s]",
    "en_US": "the operation is denied by the policy[name:{0} uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "p.getName()",
      "p.getUuid()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java"
  },
  {
    "raw": "the operation is denied by the policy[name:%s, uuid:%s], field[%s] is not permitted to set",
    "en_US": "the operation is denied by the policy[name:{0}, uuid:{1}], field[{2}] is not permitted to set",
    "zh_CN": "",
    "arguments": [
      "p.getName()",
      "p.getUuid()",
      "fname"
    ],
    "line": 200,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java"
  },
  {
    "raw": "cannot update a system or predefined role",
    "en_US": "cannot update a system or predefined role",
    "zh_CN": "",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java"
  },
  {
    "raw": "cannot delete a system or predefined role",
    "en_US": "cannot delete a system or predefined role",
    "zh_CN": "",
    "arguments": [],
    "line": 108,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java"
  },
  {
    "raw": "the backup storage[uuid:%s] is not in status of Connected, current status is %s",
    "en_US": "the backup storage[uuid:{0}] is not in status of Connected, current status is {1}",
    "zh_CN": "镜像服务器[uuid:{0}]不是Connected状态，当前状态为{1}",
    "arguments": [
      "backupStorageUuid",
      "bsStatus"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java"
  },
  {
    "raw": "volume[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "volume[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "云盘[uuid:{0}]未Ready，它现在为{1}",
    "arguments": [
      "vol.getUuid()",
      "vol.getStatus()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "volume[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "云盘[uuid:{0}]未Enabled，它现在为{1}",
    "arguments": [
      "vol.getUuid()",
      "vol.getState()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "volume snapshot[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "",
    "arguments": [
      "vsvo.getUuid()",
      "vsvo.getStatus()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "volume snapshot[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "",
    "arguments": [
      "vsvo.getUuid()",
      "vsvo.getState()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "ISO cannot be used as system image",
    "en_US": "ISO cannot be used as system image",
    "zh_CN": "ISO不能被作为一个系统标签",
    "arguments": [],
    "line": 174,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "unknown format[%s]",
    "en_US": "unknown format[{0}]",
    "zh_CN": "未知格式[{0}]",
    "arguments": [
      "msg.getFormat()"
    ],
    "line": 180,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "unsupported image type[%s]",
    "en_US": "unsupported image type[{0}]",
    "zh_CN": "不支持的镜像类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "no backup storage specified in uuids%s is available for adding this image; they are not in status %s or not in state %s, or the uuid is invalid backup storage uuid",
    "en_US": "no backup storage specified in uuids{0} is available for adding this image; they are not in status {1} or not in state {2}, or the uuid is invalid backup storage uuid",
    "zh_CN": "镜像服务器uuids{0}不满足添加镜像的条件；它们的状态不同时满足{1}和{2},亦或者是无效的uuid",
    "arguments": [
      "msg.getBackupStorageUuids()",
      "BackupStorageStatus.Connected",
      "BackupStorageState.Enabled"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "url must starts with \u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027， \u0027ftp://\u0027, \u0027sftp://\u0027 or \u0027/\u0027",
    "en_US": "url must starts with \u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027， \u0027ftp://\u0027, \u0027sftp://\u0027 or \u0027/\u0027",
    "zh_CN": "url必须以下列格式开头\u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027， \u0027ftp://\u0027, \u0027sftp://\u0027 or \u0027/\u0027",
    "arguments": [],
    "line": 214,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not on any backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is not on any backup storage",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]不在任一镜像服务器上",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "No connected backup storage found for image[uuid:%s, name:%s]",
    "en_US": "No connected backup storage found for image[uuid:{0}, name:{1}]",
    "zh_CN": "在所有 Connected 状态的镜像服务器上都找不到镜像[uuid:{0}, name:{1}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "detach iso[uuid\u003d%s] from vm failed, errors are %s",
    "en_US": "detach iso[uuid\u003d{0}] from vm failed, errors are {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getImageUuid()",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 366,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}] is not on the backup storage[uuid:{2}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]不在镜像服务器[uuid:{2}]上",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "bsUuid"
    ],
    "line": 713,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s]\u0027s status[%s] is not Deleted on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}]\u0027s status[{2}] is not Deleted on the backup storage[uuid:{3}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]的状态[{2}]在镜像服务器[uuid:{3}]上不是Deleled",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "ref.getStatus()",
      "bsUuid"
    ],
    "line": 655,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not deleted on any backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is not deleted on any backup storage",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]未在任一镜像服务器上被删除",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 697,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not deleted on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}] is not deleted on the backup storage[uuid:{2}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]未在镜像服务器[uuid:{2}]上被删除",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "bsUuid"
    ],
    "line": 718,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "only one bootMode system tag is allowed, but %d got",
    "en_US": "only one bootMode system tag is allowed, but {0} got",
    "zh_CN": "",
    "arguments": [
      "bootModeCount"
    ],
    "line": 524,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "[%s] specified in system tag [%s] is not a valid boot mode",
    "en_US": "[{0}] specified in system tag [{1}] is not a valid boot mode",
    "zh_CN": "",
    "arguments": [
      "bootMode",
      "systemTag"
    ],
    "line": 542,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "upload session expired",
    "en_US": "upload session expired",
    "zh_CN": "上传session失效了",
    "arguments": [],
    "line": 1032,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "unable to allocate backup storage specified by uuids%s, list errors are: %s",
    "en_US": "unable to allocate backup storage specified by uuids{0}, list errors are: {1}",
    "zh_CN": "不能根据[uuids:{0}]分配镜像服务器，错误清单为: {1}",
    "arguments": [
      "msgData.getBackupStorageUuids()",
      "JSONObjectUtil.toJsonString(errs)"
    ],
    "line": 1534,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to create image from root volume[uuid:%s] on all backup storage, see cause for one of errors",
    "en_US": "failed to create image from root volume[uuid:{0}] on all backup storage, see cause for one of errors",
    "zh_CN": "在所有镜像服务器上从根云盘[uuid:{0}]创建镜像失败，查看错误原因",
    "arguments": [
      "msgData.getRootVolumeUuid()"
    ],
    "line": 1645,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to allocate all backup storage[uuid:%s], a list of error: %s",
    "en_US": "failed to allocate all backup storage[uuid:{0}], a list of error: {1}",
    "zh_CN": "镜像服务器[uuid:{0}]分配失败，错误清单:{1}",
    "arguments": [
      "msgData.getBackupStorageUuids()",
      "JSONObjectUtil.toJsonString(errs)"
    ],
    "line": 1916,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to create data volume template from volume[uuid:%s] on all backup storage%s. See cause for one of errors",
    "en_US": "failed to create data volume template from volume[uuid:{0}] on all backup storage{1}. See cause for one of errors",
    "zh_CN": "在所有镜像服务器[uuid:{1}]上创建云盘[uuid:{0}]的云盘模版失败，查看错误原因",
    "arguments": [
      "msgData.getVolumeUuid()",
      "msgData.getBackupStorageUuids()"
    ],
    "line": 2018,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "image[uuid:%s] is not on creating, please wait for it to cancel itself.",
    "en_US": "image[uuid:{0}] is not on creating, please wait for it to cancel itself.",
    "zh_CN": "",
    "arguments": [
      "imageUuid"
    ],
    "line": 2104,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "volume[uuid:%s] has been deleted. no need to cancel",
    "en_US": "volume[uuid:{0}] has been deleted. no need to cancel",
    "zh_CN": "",
    "arguments": [
      "volumeUuid"
    ],
    "line": 2110,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "Failed to set security level, because security level is disabled.",
    "en_US": "Failed to set security level, because security level is disabled.",
    "zh_CN": "设置密级失败，因为密级功能已禁用",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java"
  },
  {
    "raw": "Unknown security level code[%s], supported values are %s",
    "en_US": "Unknown security level code[{0}], supported values are {1}",
    "zh_CN": "未知的密级[{0}]，支持的值有[{1}]",
    "arguments": [
      "msg.getSecurityLevel()",
      "Arrays.stream(SecurityLevel.values()).map(SecurityLevel::getCode).collect(Collectors.toList())"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java"
  },
  {
    "raw": "target backup storage[uuid:%s] became unavailable",
    "en_US": "target backup storage[uuid:{0}] became unavailable",
    "zh_CN": "",
    "arguments": [
      "targetBsUuid"
    ],
    "line": 318,
    "fileName": "src/main/java/org/zstack/imagereplicator/ImageReplicatorImpl.java"
  },
  {
    "raw": "One or more backup storage[uuids:%s] has been added to replication group[uuid:%s]",
    "en_US": "One or more backup storage[uuids:{0}] has been added to replication group[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "String.join(\",\", msg.getBackupStorageUuids())",
      "msg.getReplicationGroupUuid()"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java"
  },
  {
    "raw": "Backup storage[uuids:%s] is not of type ImageStore",
    "en_US": "Backup storage[uuids:{0}] is not of type ImageStore",
    "zh_CN": "",
    "arguments": [
      "bsUuid"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java"
  },
  {
    "raw": "Backup storage[uuids:%s] is not attached to any Zone",
    "en_US": "Backup storage[uuids:{0}] is not attached to any Zone",
    "zh_CN": "",
    "arguments": [
      "bsUuid"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java"
  },
  {
    "raw": "Network [uuid: %s] does\u0027t not have IPsec service",
    "en_US": "Network [uuid: {0}] does\u0027t not have IPsec service",
    "zh_CN": "网络[uuid: {0}]没有IPsec服务",
    "arguments": [
      "l3NetworkUuid"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the remote CIDR[%s] and remote CIDR[%s] are overlaped",
    "en_US": "the remote CIDR[{0}] and remote CIDR[{1}] are overlaped",
    "zh_CN": "远程的CIDR[{0}]和远端CIDR[{1}]存在覆盖",
    "arguments": [
      "rcidr",
      "tempCidr"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the CIDR[%s] of local router and remote CIDR[%s] are overlaped",
    "en_US": "the CIDR[{0}] of local router and remote CIDR[{1}] are overlaped",
    "zh_CN": "本地路由的CIDR[{0}]和远端CIDR存在覆盖",
    "arguments": [
      "lcidr",
      "tempCidr"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "all networks in same IPsecConnection should be same type",
    "en_US": "all networks in same IPsecConnection should be same type",
    "zh_CN": "在相同的IPsec连接中的所有连接应该是相同类型",
    "arguments": [],
    "line": 110,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "IPsecConnection can ONLY have 1 network for %s",
    "en_US": "IPsecConnection can ONLY have 1 network for {0}",
    "zh_CN": "IPsec连接只能有一个网络服务",
    "arguments": [
      "L3NetworkConstant.L3_BASIC_NETWORK_TYPE"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3Network [uuid: %s] has not been attached to vpc router",
    "en_US": "L3Network [uuid: {0}] has not been attached to vpc router",
    "zh_CN": "三层网络[uuid:{0}]还没有绑定VPC路由",
    "arguments": [
      "l3Uuid"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "all networks in same IPsecConnection must be attached to same VPC router",
    "en_US": "all networks in same IPsecConnection must be attached to same VPC router",
    "zh_CN": "在相同的IPsec连接中的所有网络必须绑定在相同的VPC路由",
    "arguments": [],
    "line": 133,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "there already have ipsec connection[uuid:%s, name:%s] with the same vrouter and peerAddress",
    "en_US": "there already have ipsec connection[uuid:{0}, name:{1}] with the same vrouter and peerAddress",
    "zh_CN": "这里已经有相同云路由和对端地址的IPsec连接[uuid:{0}, name:{1}]",
    "arguments": [
      "tuples.get(0).get(0, String.class)",
      "tuples.get(0).get(1, String.class)"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the vip[uuid:%s] has been used for %s",
    "en_US": "the vip[uuid:{0}] has been used for {1}",
    "zh_CN": "虚拟IP[uuid:{0}]已经用作网络服务 {1}",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the peerAddress[%s] cannot be the same to the VIP address",
    "en_US": "the peerAddress[{0}] cannot be the same to the VIP address",
    "zh_CN": "对端地址[{0}]不能和虚拟IP地址相同",
    "arguments": [
      "msg.getPeerAddress()"
    ],
    "line": 179,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the peerAddress[%s] is not an IPv4 address",
    "en_US": "the peerAddress[{0}] is not an IPv4 address",
    "zh_CN": "对端地址[{0}]不是一个IPv4地址",
    "arguments": [
      "msg.getPeerAddress()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the authKey cannot contain white space and special characters of \u0027\\\"`\\\\",
    "en_US": "the authKey cannot contain white space and special characters of \u0027\\\"`\\\\",
    "zh_CN": "验证码不能包含空格和以下字符:\u0027\\\"`\\\\",
    "arguments": [],
    "line": 195,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "must include l3 networks in APIAttachL3NetworksToIPsecConnectionMsg",
    "en_US": "must include l3 networks in APIAttachL3NetworksToIPsecConnectionMsg",
    "zh_CN": "参数中缺少三层网络的uuid",
    "arguments": [],
    "line": 229,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3 network [%s] is not vpc network, can not be attached or detached to ipsec",
    "en_US": "L3 network [{0}] is not vpc network, can not be attached or detached to ipsec",
    "zh_CN": "三层网络[{0}]不是VPC网络，不能绑定或解绑IPsec",
    "arguments": [
      "l3NetworkUuid"
    ],
    "line": 236,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3 network [%s] can not be attached to ipsec [uuid :%s]twice",
    "en_US": "L3 network [{0}] can not be attached to ipsec [uuid :{1}]twice",
    "zh_CN": "三层网络[{0}]不能绑定IPsec[uuid :{1}]两次",
    "arguments": [
      "l3NetworkUuid",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3 network [%s] is not be attached to ipsec [uuid :%s]",
    "en_US": "L3 network [{0}] is not be attached to ipsec [uuid :{1}]",
    "zh_CN": "三层网络[{0}]不能绑定IPsec[uuid :{1}]",
    "arguments": [
      "l3NetworkUuid",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "Cidr [%s] is already in the Cidrs of ipsec [uuid :%s]",
    "en_US": "Cidr [{0}] is already in the Cidrs of ipsec [uuid :{1}]",
    "zh_CN": "CIDR[{0}]已经在IPsec[uuid :{1}]的CIDR中",
    "arguments": [
      "cidr",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "Cidr [%s] is not in Cidrs of ipsec [uuid :%s]",
    "en_US": "Cidr [{0}] is not in Cidrs of ipsec [uuid :{1}]",
    "zh_CN": "CIDR[{0}]没有在IPsec[uuid :{1}]的CIDR中",
    "arguments": [
      "cidr",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 264,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "can not change state because ipsec [uuid:%s] status is not ready",
    "en_US": "can not change state because ipsec [uuid:{0}] status is not ready",
    "zh_CN": "不能修改IPsec的状态，因为IPsec的状态没有准备",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "cannot find the IPsecconnection[uuid:%s], it may have been deleted",
    "en_US": "cannot find the IPsecconnection[uuid:{0}], it may have been deleted",
    "zh_CN": "未找到IPsec连接[uuid:{0}],它可能会被删除了",
    "arguments": [
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecManagerImpl.java"
  },
  {
    "raw": "Current port range[%s, %s] is conflicted with used port range [%s, %s] with vip[uuid: %s] protocol: UDP",
    "en_US": "Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: UDP",
    "zh_CN": "当前的端口范围以UDP使用的端口范围冲突了",
    "arguments": [
      "Long.toString(range2.getStart())",
      "Long.toString(range2.getEnd())",
      "Long.toString(cur.getStart())",
      "Long.toString(cur.getEnd())",
      "msg.getVipUuid()"
    ],
    "line": 336,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecManagerImpl.java"
  },
  {
    "raw": "cidr[%s] of attached L3Network [uuid:%s] is overlapped with ipsec [uuid:%s] remote cidr[%s]",
    "en_US": "cidr[{0}] of attached L3Network [uuid:{1}] is overlapped with ipsec [uuid:{2}] remote cidr[{3}]",
    "zh_CN": "已绑定在三层网络[uuid:{1}]的CIDR与IPSec[uuid:{2}]远程CIDR存在重叠",
    "arguments": [
      "cidr",
      "l3Inv.getUuid()",
      "uuid",
      "rCidr"
    ],
    "line": 373,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecManagerImpl.java"
  },
  {
    "raw": "create ipsec to ha route failed, because %s",
    "en_US": "create ipsec to ha route failed, because {0}",
    "zh_CN": "",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosCreateIPsecFlow.java"
  },
  {
    "raw": "delete ipsec from ha group failed because %s",
    "en_US": "delete ipsec from ha group failed because {0}",
    "zh_CN": "",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosDeleteIPsecFlow.java"
  },
  {
    "raw": "operation error, because:%s",
    "en_US": "operation error, because:{0}",
    "zh_CN": "操作错误，因为{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 607,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "the remoteCidr[%s] is overlaped with VirtualRouter interface cidr[%s]",
    "en_US": "the remoteCidr[{0}] is overlaped with VirtualRouter interface cidr[{1}]",
    "zh_CN": "",
    "arguments": [
      "rcidr",
      "cidr"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "en_US": "vyos doesn\u0027t support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "zh_CN": "vyos不支持aes-192作为密钥交换加密算法，可用选择为aes-128, aes-256, 3des",
    "arguments": [],
    "line": 279,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "en_US": "vyos doesn\u0027t support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "zh_CN": "vyos不支持aes-192作为加密算法协议，可用选择为aes-128, aes-256, 3des",
    "arguments": [],
    "line": 285,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support %d as Ike DhGroup ",
    "en_US": "vyos doesn\u0027t support {0} as Ike DhGroup ",
    "zh_CN": "vyos不支持[{0}]作为Ike DhGroup",
    "arguments": [
      "msg.getIkeDhGroup()"
    ],
    "line": 291,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "sync to ha group failed, because:%s",
    "en_US": "sync to ha group failed, because:{0}",
    "zh_CN": "",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 424,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "apply to ha group failed, because %s",
    "en_US": "apply to ha group failed, because {0}",
    "zh_CN": "",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 646,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "there has been a kvm host having management ip[%s]",
    "en_US": "there has been a kvm host having management ip[{0}]",
    "zh_CN": "已经存在一个拥有管理节点IP[{0}]的物理机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/kvm/KVMApiInterceptor.java"
  },
  {
    "raw": "KVMConnectExtensionForL2Network wont\u0027s support L2Network[type:%s]",
    "en_US": "KVMConnectExtensionForL2Network wont\u0027s support L2Network[type:{0}]",
    "zh_CN": "物理机二层网络连接插件不支持二层网络[类型:{0}]",
    "arguments": [
      "l2.getType()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/kvm/KVMConnectExtensionForL2Network.java"
  },
  {
    "raw": "unexpected VNC port number[%d] for VM [uuid:%s]",
    "en_US": "unexpected VNC port number[{0}] for VM [uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "rsp.getPort()",
      "vm.getUuid()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/kvm/KVMConsoleHypervisorBackend.java"
  },
  {
    "raw": "host[uuid:%s] has been deleted",
    "en_US": "host[uuid:{0}] has been deleted",
    "zh_CN": "物理机[uuid:{0}]已经被删除了",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 333,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to get first boot dev of vm[uuid:%s] on kvm host [uuid:%s, ip:%s], because %s",
    "en_US": "unable to get first boot dev of vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 499,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort:%d ] to do DNS check, please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2} ] to do DNS check, please check if username/password is wrong; {3}",
    "zh_CN": "无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "result.getExitErrorMessage()"
    ],
    "line": 713,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the host[uuid:%s, status:%s] is not Connected",
    "en_US": "the host[uuid:{0}, status:{1}] is not Connected",
    "zh_CN": "物理机[uuid:{0}, 状态:{1}]不是Connected状态",
    "arguments": [
      "self.getUuid()",
      "self.getStatus()"
    ],
    "line": 795,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot do volume snapshot merge when vm[uuid:%s] is in state of %s. The operation is only allowed when vm is Running or Stopped",
    "en_US": "cannot do volume snapshot merge when vm[uuid:{0}] is in state of {1}. The operation is only allowed when vm is Running or Stopped",
    "zh_CN": "当云主机[uuid:{0}]处于{1}状态的时候不能做云盘快照合并。此操作只能在云主机处在Running和Stopped状态时进行",
    "arguments": [
      "volume.getUuid()",
      "state"
    ],
    "line": 1121,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "live volume snapshot merge needs libvirt version greater than %s, current libvirt version is %s. Please stop vm and redo the operation or detach the volume if it\u0027s data volume",
    "en_US": "live volume snapshot merge needs libvirt version greater than {0}, current libvirt version is {1}. Please stop vm and redo the operation or detach the volume if it\u0027s data volume",
    "zh_CN": "实时云盘快照合并需要libvirt版本高于{0}，现在libvirt版本为{1}。请停止云主机后重试或卸载云盘（仅当为数据云盘时）",
    "arguments": [
      "KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION",
      "libvirtVersion"
    ],
    "line": 1128,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running or Stopped, current state[%s]",
    "en_US": "vm[uuid:{0}] is not Running or Stopped, current state[{1}]",
    "zh_CN": "云主机[uuid:{0}]未处在Running或Stopped状态, 现在状态为[{1}]",
    "arguments": [
      "msg.getVmUuid()",
      "vmState"
    ],
    "line": 1217,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to update nic[vm:%s] on kvm host[uuid:%s, ip:%s],because %s",
    "en_US": "failed to update nic[vm:{0}] on kvm host[uuid:{1}, ip:{2}],because {3}",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1578,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach nic[uuid:%s, vm:%s] on kvm host[uuid:%s, ip:%s],because %s",
    "en_US": "failed to attach nic[uuid:{0}, vm:{1}] on kvm host[uuid:{2}, ip:{3}],because {4}",
    "zh_CN": "在物理机[uuid:{3},IP:{3}]上加载网卡[uuid:{0},云主机:{1}]失败，因为:{4}",
    "arguments": [
      "msg.getNicInventory().getUuid()",
      "msg.getNicInventory().getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1625,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to detach data volume[uuid:%s, installPath:%s] from vm[uuid:%s, name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to detach data volume[uuid:{0}, installPath:{1}] from vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}",
    "zh_CN": "无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]卸载数据云盘[uuid:{0}, installPath:{1}]，因为: {6}",
    "arguments": [
      "vol.getUuid()",
      "vol.getInstallPath()",
      "vm.getUuid()",
      "vm.getName()",
      "getSelf().getUuid()",
      "getSelf().getManagementIp()",
      "ret.getError()"
    ],
    "line": 1672,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach data volume[uuid:%s, installPath:%s] to vm[uuid:%s, name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to attach data volume[uuid:{0}, installPath:{1}] to vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}",
    "zh_CN": "无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]挂载数据云盘[uuid:{0}, installPath:{1}]，因为: {6}",
    "arguments": [
      "vol.getUuid()",
      "vol.getInstallPath()",
      "vm.getUuid()",
      "vm.getName()",
      "getSelf().getUuid()",
      "getSelf().getManagementIp()",
      "ret.getError()"
    ],
    "line": 1759,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to destroy vm[uuid:%s name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to destroy vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "无法在物理机[uuid:{2}, ip:{3}]上删除云主机[uuid:{0} name:{1}]，原因: {4}",
    "arguments": [
      "vminv.getUuid()",
      "vminv.getName()",
      "self.getUuid()",
      "self.getManagementIp()",
      "e.getMessage()"
    ],
    "line": 1799,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to stop vm[uuid:%s name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to stop vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "在物理机[uuid:{2}, ip:{3}]上停止云主机[uuid:{0} 名称:{1}]失败，因为:{4}",
    "arguments": [
      "vminv.getUuid()",
      "vminv.getName()",
      "self.getUuid()",
      "self.getManagementIp()",
      "e.getMessage()"
    ],
    "line": 1928,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "Host[%s] update spice channel config faild, because %s",
    "en_US": "Host[{0}] update spice channel config faild, because {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getHostUuid()",
      "ret.getError()"
    ],
    "line": 2015,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to check physical network interfaces[names : %s] on kvm host[uuid:%s, ip:%s]",
    "en_US": "failed to check physical network interfaces[names : {0}] on kvm host[uuid:{1}, ip:{2}]",
    "zh_CN": "",
    "arguments": [
      "msg.getPhysicalInterface()",
      "context.getInventory().getUuid()",
      "context.getInventory().getManagementIp()"
    ],
    "line": 2414,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "detected abnormal status[host uuid change, expected: %s but: %s] of kvmagent,it\u0027s mainly caused by kvmagent restarts behind zstack management server. Report this to ping task, it will issue a reconnect soon",
    "en_US": "detected abnormal status[host uuid change, expected: {0} but: {1}] of kvmagent,it\u0027s mainly caused by kvmagent restarts behind zstack management server. Report this to ping task, it will issue a reconnect soon",
    "zh_CN": "监测到kvmagent异常的状态[host uuid改变，期望: {0}, 实际: {1}], 这很有可能是kvmagent重启导致的, 报告这个情况给ping, 它会触发重连",
    "arguments": [
      "self.getUuid()",
      "ret.getHostUuid()"
    ],
    "line": 2477,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to kvm host[uuid:%s, ip:%s, url:%s], because %s",
    "en_US": "unable to connect to kvm host[uuid:{0}, ip:{1}, url:{2}], because {3}",
    "zh_CN": "连接物理机[uuid:{0}, ip:{1}，url:{2}]失败，因为:{3}",
    "arguments": [
      "self.getUuid()",
      "self.getManagementIp()",
      "connectPath",
      "rsp.getError()"
    ],
    "line": 2602,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host can not access any primary storage, please check network",
    "en_US": "host can not access any primary storage, please check network",
    "zh_CN": "物理机无法访问任何主存储，请检查网络",
    "arguments": [],
    "line": 2660,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the host\u0027 ssh port[%s] not open after %s seconds, connect timeout",
    "en_US": "the host\u0027 ssh port[{0}] not open after {1} seconds, connect timeout",
    "zh_CN": "物理机的ssh端口[{0}]在{1}秒后仍未开启，连接超时",
    "arguments": [
      "getSelf().getPort()",
      "KVMGlobalConfig.TEST_SSH_PORT_ON_OPEN_TIMEOUT.value(Long.class)"
    ],
    "line": 2836,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to ping all DNS/IP in %s; please check /etc/resolv.conf to make sure your host is able to reach public internet",
    "en_US": "failed to ping all DNS/IP in {0}; please check /etc/resolv.conf to make sure your host is able to reach public internet",
    "zh_CN": "在{0}中的所有DNS/IP都ping失败了，请检查 /etc/resolv.conf 来确保你的主机能连接到公网",
    "arguments": [
      "checkList"
    ],
    "line": 2891,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort: %d, ] to do DNS check, please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort: {2}, ] to do DNS check, please check if username/password is wrong; {3}",
    "zh_CN": "无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "ret.getExitErrorMessage()"
    ],
    "line": 2889,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the KVM host[ip:%s] cannot access the management node\u0027s callback url. It seems that the KVM host cannot reach the management IP[%s]. %s %s",
    "en_US": "the KVM host[ip:{0}] cannot access the management node\u0027s callback url. It seems that the KVM host cannot reach the management IP[{1}]. {2} {3}",
    "zh_CN": "物理机[ip:{0}] 不能连接到管理节点 。 看起来是这个物理机无法到达管理节点的IP [{1}]. {2} {3}",
    "arguments": [
      "self.getManagementIp()",
      "restf.getHostName()",
      "ret.getStderr()",
      "ret.getExitErrorMessage()"
    ],
    "line": 2917,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort:%d] to check the management node connectivity,please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2}] to check the management node connectivity,please check if username/password is wrong; {3}",
    "zh_CN": "不能连接到物理机[ip:{0}, username:{1}, sshPort:{2}] 去检查与管理节点是否连通  ,请检查您的用户名或者密码是否有误; {3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "ret.getExitErrorMessage()"
    ],
    "line": 2914,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot find either \u0027vmx\u0027 or \u0027svm\u0027 in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting",
    "en_US": "cannot find either \u0027vmx\u0027 or \u0027svm\u0027 in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting",
    "zh_CN": "不能发现以下任意一个  \u0027vmx\u0027 or \u0027svm\u0027 在路径 /proc/cpuinfo 里, 请检查你是否在你的BIOS设置里开启了virtualization选项",
    "arguments": [],
    "line": 3123,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host [uuid:%s] cannot be added to cluster [uuid:%s] because qemu/libvirt version does not match",
    "en_US": "host [uuid:{0}] cannot be added to cluster [uuid:{1}] because qemu/libvirt version does not match",
    "zh_CN": "物理机[uuid:{0}]不能添加到集群[uuid:{1}]中，因为qemu/libvirt不匹配",
    "arguments": [
      "self.getUuid()",
      "self.getClusterUuid()"
    ],
    "line": 2748,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host [uuid:%s] cannot be added to cluster [uuid:%s] because cpu model name does not match",
    "en_US": "host [uuid:{0}] cannot be added to cluster [uuid:{1}] because cpu model name does not match",
    "zh_CN": "物理机[uuid:{0}]无法被添加到集群[uuid:{1}]因为cpu型号不一致",
    "arguments": [
      "self.getUuid()",
      "self.getClusterUuid()"
    ],
    "line": 2769,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host is not in the connected status, cannot update os",
    "en_US": "host is not in the connected status, cannot update os",
    "zh_CN": "物理机当前并不是已连接状态，不能升级操作系统",
    "arguments": [],
    "line": 3402,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host is in the premaintenance state, cannot update os",
    "en_US": "host is in the premaintenance state, cannot update os",
    "zh_CN": "物理机正处于预维护状态，不能升级操作系统",
    "arguments": [],
    "line": 3400,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot adapt version for the bellow rpm: livirt / qemu / cpumodel",
    "en_US": "cannot adapt version for the bellow rpm: livirt / qemu / cpumodel",
    "zh_CN": "源和目的之间的以下组件版本不兼容：livirt、qemu、cpumodel",
    "arguments": [],
    "line": 63,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostAllocatorFilterExtensionPoint.java"
  },
  {
    "raw": "The host[uuid:%s]\u0027s available memory capacity[%s] is lower than the reserved capacity[%s]",
    "en_US": "The host[uuid:{0}]\u0027s available memory capacity[{1}] is lower than the reserved capacity[{2}]",
    "zh_CN": "物理机[uuid:{0}]的可用内存[{1}]少于保留内存[{2}]",
    "arguments": [
      "host.getUuid()",
      "rsp.getTotalMemory()",
      "reservedSize"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostCapacityExtension.java"
  },
  {
    "raw": "fail to load host info from file. because\\n%s",
    "en_US": "fail to load host info from file. because\\n{0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "there are still hosts not have the same cpu model, details: %s",
    "en_US": "there are still hosts not have the same cpu model, details: {0}",
    "zh_CN": "仍存在host有不同的cpu模型，详细信息：{0}",
    "arguments": [
      "str.toString()"
    ],
    "line": 329,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "pci bridge need a value greater than 0 and lower than 32",
    "en_US": "pci bridge need a value greater than 0 and lower than 32",
    "zh_CN": "",
    "arguments": [
      "KVMSystemTags.VM_PREDEFINED_PCI_BRIDGE_NUM_TOKEN"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "host[uuid:%s] does not have cpu model information, you can reconnect the host to fix it",
    "en_US": "host[uuid:{0}] does not have cpu model information, you can reconnect the host to fix it",
    "zh_CN": "物理机[uuid:{0}]无cpu模型信息，你可以尝试重连来解决这个问题",
    "arguments": [
      "hostUuid"
    ],
    "line": 364,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}] on kvm host[uuid:{3}], because {4}",
    "zh_CN": "在物理机[uuid:{3}]上为L2网络[uuid:{1}, type:{2}]创建网桥[{0}]失败，原因: {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for l2NoVlanNetwork[uuid:%s, name:%s] on kvm host[uuid: %s], %s",
    "en_US": "failed to check bridge[{0}] for l2NoVlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid: {3}], {4}",
    "zh_CN": "在L2网络[uuid:{1}中检查网桥[{0}]失败，名字为[{2}]在物理机t[uuid: {3}]上, {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s, vlan:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "创建L2网络[uuid:{1}中的网桥[{0}]失败 , 类型为: {2}, vlan:{3}] 在物理机[uuid:{4}]上, 原因:  {5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vlan.getVlan()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for l2VlanNetwork[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check bridge[{0}] for l2VlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "检查在物理机[uuid:{3}]上L2网络[uuid:{1}, name:{2}]中的网桥[{0}]失败, {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2vlan.getUuid()",
      "l2vlan.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java"
  },
  {
    "raw": "failed to apply rules of security group rules to kvm host[uuid:%s], because %s",
    "en_US": "failed to apply rules of security group rules to kvm host[uuid:{0}], because {1}",
    "zh_CN": "不能应用安全组规则在物理机t[uuid:{0}]上, 因为 {1}",
    "arguments": [
      "hto.getHostUuid()",
      "rsp.getError()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java"
  },
  {
    "raw": "failed to check default rules of security group on kvm host[uuid:%s], because %s",
    "en_US": "failed to check default rules of security group on kvm host[uuid:{0}], because {1}",
    "zh_CN": "在host[uuid:{0}]上检查默认安全组规则失败",
    "arguments": [
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java"
  },
  {
    "raw": "unable to do vm sync on host[uuid:%s, ip:%s] because %s",
    "en_US": "unable to do vm sync on host[uuid:{0}, ip:{1}] because {2}",
    "zh_CN": "不能在物理机[uuid:{0}, ip:{1}]上执行云主机状态同步操作，因为{2}",
    "arguments": [
      "host.getUuid()",
      "host.getManagementIp()",
      "ret.getError()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "The vm[%s] state is in shutdown for a long time, check whether the vm is normal",
    "en_US": "The vm[{0}] state is in shutdown for a long time, check whether the vm is normal",
    "zh_CN": "",
    "arguments": [
      "vmUuid"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "unsupported LDAP/AD server scope",
    "en_US": "unsupported LDAP/AD server scope",
    "zh_CN": "",
    "arguments": [],
    "line": 67,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Wrong LdapServerType[%s], valid values: [%,%s]",
    "en_US": "Wrong LdapServerType[{0}], valid values: [%,{1}]",
    "zh_CN": "错误的LDAP服务类型[{0}]，有效的值: [%,{1}]",
    "arguments": [
      "type",
      "LdapConstant.OpenLdap.TYPE",
      "LdapConstant.WindowsAD.TYPE"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Cannot connect to LDAP/AD server, Invalid Credentials, please checkout User DN and password",
    "en_US": "Cannot connect to LDAP/AD server, Invalid Credentials, please checkout User DN and password",
    "zh_CN": "",
    "arguments": [],
    "line": 142,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Cannot connect to LDAP/AD server, communication false, please checkout IP, port and Base DN",
    "en_US": "Cannot connect to LDAP/AD server, communication false, please checkout IP, port and Base DN",
    "zh_CN": "",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Cannot connect to LDAP/AD server, %s",
    "en_US": "Cannot connect to LDAP/AD server, {0}",
    "zh_CN": "不能连接LDAP服务，{0}",
    "arguments": [
      "e.toString()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Account[uuid:%s] Not Found!!!",
    "en_US": "Account[uuid:{0}] Not Found!!!",
    "zh_CN": "",
    "arguments": [
      "vo.getAccountUuid()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/ldap/LdapManagerImpl.java"
  },
  {
    "raw": "query ldap entry[filter: %s] fail, because %s",
    "en_US": "query ldap entry[filter: {0}] fail, because {1}",
    "zh_CN": "",
    "arguments": [
      "filter",
      "errorMessage"
    ],
    "line": 456,
    "fileName": "src/main/java/org/zstack/ldap/LdapUtil.java"
  },
  {
    "raw": "query ldap entry fail, %s",
    "en_US": "query ldap entry fail, {0}",
    "zh_CN": "查询LDAP条目失败，{0}",
    "arguments": [
      "e.toString()"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/ldap/externalSearch/AggregateSearch.java"
  },
  {
    "raw": "Parse license error,\\n1. check your private key and application code is correct\\n2. check your license is not corrupted\\n3. use zstack-ctl clear_license to clear your licenses and try to reinstall\\n",
    "en_US": "Parse license error,\\n1. check your private key and application code is correct\\n2. check your license is not corrupted\\n3. use zstack-ctl clear_license to clear your licenses and try to reinstall\\n",
    "zh_CN": "",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/license/LicenseChecker.java"
  },
  {
    "raw": "Decode fail because %s",
    "en_US": "Decode fail because {0}",
    "zh_CN": "解码失败，因为{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Unexpected decoded license file length: %d",
    "en_US": "Unexpected decoded license file length: {0}",
    "zh_CN": "",
    "arguments": [
      "bytes.length"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Licensed VM number overrun",
    "en_US": "Licensed VM number overrun",
    "zh_CN": "VM数量超过云主机授权上限",
    "arguments": [],
    "line": 846,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "unexpected license policy: %d %s.",
    "en_US": "unexpected license policy: {0} {1}.",
    "zh_CN": "",
    "arguments": [
      "addonLicBy.first()",
      "addonLicBy.second()"
    ],
    "line": 1144,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Addon[%s] licensed %d %s, but platform is licensed with VM number",
    "en_US": "Addon[{0}] licensed {1} {2}, but platform is licensed with VM number",
    "zh_CN": "",
    "arguments": [
      "info.getProdInfo()",
      "addonLicBy.first()",
      "addonLicBy.second()"
    ],
    "line": 1195,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Addon[%s] licensed %d %s, but platform is licensed with host",
    "en_US": "Addon[{0}] licensed {1} {2}, but platform is licensed with host",
    "zh_CN": "",
    "arguments": [
      "info.getProdInfo()",
      "addonLicBy.first()",
      "addonLicBy.second()"
    ],
    "line": 1191,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Addon[%s] licensed %d %s, but platform is licensed with CPU socket",
    "en_US": "Addon[{0}] licensed {1} {2}, but platform is licensed with CPU socket",
    "zh_CN": "",
    "arguments": [
      "info.getProdInfo()",
      "addonLicBy.first()",
      "addonLicBy.second()"
    ],
    "line": 1187,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Add-on license is not supported when license type is Community",
    "en_US": "Add-on license is not supported when license type is Community",
    "zh_CN": "",
    "arguments": [],
    "line": 1507,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "License expired",
    "en_US": "License expired",
    "zh_CN": "",
    "arguments": [],
    "line": 1682,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "No factory found for type:%s",
    "en_US": "No factory found for type:{0}",
    "zh_CN": "",
    "arguments": [
      "struct.getType()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/log/LogConfigurationManagerImpl.java"
  },
  {
    "raw": "Unknown log configuration type %s",
    "en_US": "Unknown log configuration type {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getType()"
    ],
    "line": 464,
    "fileName": "src/main/java/org/zstack/log/LogConfigurationManagerImpl.java"
  },
  {
    "raw": "No factory found for log4j2 appender type:%s.",
    "en_US": "No factory found for log4j2 appender type:{0}.",
    "zh_CN": "",
    "arguments": [
      "lstruct.getAppenderType()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java"
  },
  {
    "raw": "Unknown log4j2 appender type %s",
    "en_US": "Unknown log4j2 appender type {0}",
    "zh_CN": "",
    "arguments": [
      "lstruct.getAppenderType()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java"
  },
  {
    "raw": "facility can not be null",
    "en_US": "facility can not be null",
    "zh_CN": "",
    "arguments": [],
    "line": 44,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "invalid facility %s",
    "en_US": "invalid facility {0}",
    "zh_CN": "",
    "arguments": [
      "configuration.facility"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "hostname can not be null",
    "en_US": "hostname can not be null",
    "zh_CN": "",
    "arguments": [],
    "line": 52,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "port can not be null",
    "en_US": "port can not be null",
    "zh_CN": "",
    "arguments": [],
    "line": 56,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "protocol can not be null",
    "en_US": "protocol can not be null",
    "zh_CN": "",
    "arguments": [],
    "line": 60,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "MN HA environment, but only updated license for %s",
    "en_US": "MN HA environment, but only updated license for {0}",
    "zh_CN": "管理节点有多个，但是仅更新了节点{0}的许可证",
    "arguments": [
      "Platform.getManagementServerIp()"
    ],
    "line": 1456,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Multiple MN exists but only supplied licenses for %s",
    "en_US": "Multiple MN exists but only supplied licenses for {0}",
    "zh_CN": "管理节点有多个，但是仅提供了节点{0}的许可证",
    "arguments": [
      "Platform.getManagementServerIp()"
    ],
    "line": 1454,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "unexpected license file",
    "en_US": "unexpected license file",
    "zh_CN": "许可证错误",
    "arguments": [],
    "line": 1569,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "unsupported protocol %s",
    "en_US": "unsupported protocol {0}",
    "zh_CN": "",
    "arguments": [
      "configuration.protocol"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "syslog server[address: %s:%s] is not available",
    "en_US": "syslog server[address: {0}:{1}] is not available",
    "zh_CN": "",
    "arguments": [
      "configuration.hostname",
      "configuration.port"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "syslog server[address: %s] is not available",
    "en_US": "syslog server[address: {0}] is not available",
    "zh_CN": "",
    "arguments": [
      "configuration.hostname"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "There is no LDAP/AD server in the system, Please add a LDAP/AD server first.",
    "en_US": "There is no LDAP/AD server in the system, Please add a LDAP/AD server first.",
    "zh_CN": "在系统中没有LDAP服务，请先添加一个LDAP服务",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/login/LdapLoginInterceptor.java"
  },
  {
    "raw": "Can not bind this ldap uid %s to virtual id [uuid:%s]",
    "en_US": "Can not bind this ldap uid {0} to virtual id [uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getLdapUid()",
      "msg.getVirtualIDUuid()"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/login/LdapLoginInterceptor.java"
  },
  {
    "raw": "This uid is already used",
    "en_US": "This uid is already used",
    "zh_CN": "",
    "arguments": [],
    "line": 53,
    "fileName": "src/main/java/org/zstack/login/LdapLoginInterceptor.java"
  },
  {
    "raw": "ZStack is loading ldap organizations from DB now, can not execute sync operation",
    "en_US": "ZStack is loading ldap organizations from DB now, can not execute sync operation",
    "zh_CN": "",
    "arguments": [],
    "line": 230,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to sync ldap entry[], because %s",
    "en_US": "Failed to sync ldap entry[], because {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 352,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to sync organizations, because %s",
    "en_US": "Failed to sync organizations, because {0}",
    "zh_CN": "",
    "arguments": [
      "reply.getError().getReadableDetails()"
    ],
    "line": 975,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to transform ldap entry to organization ndoe",
    "en_US": "Failed to transform ldap entry to organization ndoe",
    "zh_CN": "",
    "arguments": [],
    "line": 923,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "failed to sync ldap organization",
    "en_US": "failed to sync ldap organization",
    "zh_CN": "",
    "arguments": [],
    "line": 912,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Can not sync LDAP/AD server whose scope is not %s",
    "en_US": "Can not sync LDAP/AD server whose scope is not {0}",
    "zh_CN": "",
    "arguments": [
      "scope.toString()"
    ],
    "line": 1380,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to validate uid[%s], maybe it has been deleted",
    "en_US": "Failed to validate uid[{0}], maybe it has been deleted",
    "zh_CN": "",
    "arguments": [
      "uid"
    ],
    "line": 1503,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to create iam2 virtual id for uid[%s], because %s",
    "en_US": "Failed to create iam2 virtual id for uid[{0}], because {1}",
    "zh_CN": "",
    "arguments": [
      "uid",
      "reply.getError().getReadableDetails()"
    ],
    "line": 1544,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to validate dn [%s], maybe it has been deleted",
    "en_US": "Failed to validate dn [{0}], maybe it has been deleted",
    "zh_CN": "",
    "arguments": [
      "ldapUid"
    ],
    "line": 1679,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "invalid json format",
    "en_US": "invalid json format",
    "zh_CN": "",
    "arguments": [],
    "line": 2097,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "name is mandatory field %",
    "en_US": "name is mandatory field %",
    "zh_CN": "",
    "arguments": [],
    "line": 2108,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "attribute is mandatory field %",
    "en_US": "attribute is mandatory field %",
    "zh_CN": "",
    "arguments": [],
    "line": 2112,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "type is mandatory field %",
    "en_US": "type is mandatory field %",
    "zh_CN": "",
    "arguments": [],
    "line": 2116,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "optional is mandatory field %",
    "en_US": "optional is mandatory field %",
    "zh_CN": "",
    "arguments": [],
    "line": 2120,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "name should use values in %s",
    "en_US": "name should use values in {0}",
    "zh_CN": "",
    "arguments": [
      "fieldNames"
    ],
    "line": 2124,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Invalid attribute. Attribute[%s] is required, but found there are some record not matched",
    "en_US": "Invalid attribute. Attribute[{0}] is required, but found there are some record not matched",
    "zh_CN": "",
    "arguments": [
      "rule.getAttribute()"
    ],
    "line": 2150,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "strategy is mandatory field %",
    "en_US": "strategy is mandatory field %",
    "zh_CN": "",
    "arguments": [],
    "line": 2101,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Invalid rule expression, add access control rule fail because: %s",
    "en_US": "Invalid rule expression, add access control rule fail because: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlApiInterceptor.java"
  },
  {
    "raw": "wrong format of password strength config",
    "en_US": "wrong format of password strength config",
    "zh_CN": "",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "unrecognized key: %s",
    "en_US": "unrecognized key: {0}",
    "zh_CN": "",
    "arguments": [
      "key"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "missing key:value of %s",
    "en_US": "missing key:value of {0}",
    "zh_CN": "",
    "arguments": [
      "opt.get()"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "minimum can not be larger than maximum",
    "en_US": "minimum can not be larger than maximum",
    "zh_CN": "",
    "arguments": [],
    "line": 158,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "Consult result expect to be 1, but actually %s",
    "en_US": "Consult result expect to be 1, but actually {0}",
    "zh_CN": "查询结果期望是1，但是实际上是{0}",
    "arguments": [
      "results.size()"
    ],
    "line": 321,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "No available processor for %s",
    "en_US": "No available processor for {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getResourceName()"
    ],
    "line": 505,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "can not get suitable captcha with[uuid:%s], related to resourceName[uuid:%s]",
    "en_US": "can not get suitable captcha with[uuid:{0}], related to resourceName[uuid:{1}]",
    "zh_CN": "找不到和名称[uuid:{1}]对应的验证码[uuid:{0}]",
    "arguments": [
      "msg.getCaptchaUuid()",
      "msg.getResourceName()"
    ],
    "line": 529,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "%s is not an API",
    "en_US": "{0} is not an API",
    "zh_CN": "{0}不是一个API",
    "arguments": [
      "msg.getJobName()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "cannot cancel longjob that is succeeded",
    "en_US": "cannot cancel longjob that is succeeded",
    "zh_CN": "不能取消已经成功的longjob",
    "arguments": [],
    "line": 127,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "cannot cancel longjob that is failed",
    "en_US": "cannot cancel longjob that is failed",
    "zh_CN": "不能取消已经失败的longjob",
    "arguments": [],
    "line": 130,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "delete longjob only when it\u0027s succeeded, canceled, or failed",
    "en_US": "delete longjob only when it\u0027s succeeded, canceled, or failed",
    "zh_CN": "只能删除已经成功、取消、失败的longjob",
    "arguments": [],
    "line": 141,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "rerun longjob only when it\u0027s succeeded, canceled, or failed",
    "en_US": "rerun longjob only when it\u0027s succeeded, canceled, or failed",
    "zh_CN": "",
    "arguments": [],
    "line": 152,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "%s has no corresponding longjob",
    "en_US": "{0} has no corresponding longjob",
    "zh_CN": "{0}没有与之对应的longjob",
    "arguments": [
      "jobName"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/longjob/LongJobFactoryImpl.java"
  },
  {
    "raw": "unable to attach a L3 network. The cidr of l3[%s] to attach overlapped with l3[%s] already attached to vm",
    "en_US": "unable to attach a L3 network. The cidr of l3[{0}] to attach overlapped with l3[{1}] already attached to vm",
    "zh_CN": "不能绑定这个三层网络。这个虚拟机上已经绑定的三层网络[{1}]和这个三层网络[{0}]的CIDR存在重叠",
    "arguments": [
      "l3NetworkUuid",
      "vmNicVO.getL3NetworkUuid()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vm[name:%s, uuid:%s] already has some port forwarding rules%s attached",
    "en_US": "the vm[name:{0}, uuid:{1}] already has some port forwarding rules{2} attached",
    "zh_CN": "云主机[name:{0}, uuid:{1}] 已经设置了一些端口转发规则{2}",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "StringUtils.join(pfStr, \",\")"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vm[name:%s, uuid:%s] already has some EIPs%s attached",
    "en_US": "the vm[name:{0}, uuid:{1}] already has some EIPs{2} attached",
    "zh_CN": "云主机[name:{0}, uuid:{1}] 已经配置了弹性IP{2}",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "StringUtils.join(eipStr, \",\")"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vip[uuid:%s] already has bound to other service[%s]",
    "en_US": "the vip[uuid:{0}] already has bound to other service[{1}]",
    "zh_CN": "该虚拟IP[uuid:{0}]已经绑定了其他服务",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "Current port range[%s, %s] is conflicted with used port range [%s, %s] with vip[uuid: %s] protocol: %s ",
    "en_US": "Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: {5} ",
    "zh_CN": "现在的端口范围[{0}, {1}]和虚拟IP使用的端口范围[{2}, {3}]",
    "arguments": [
      "Long.toString(range.getStart())",
      "Long.toString(range.getEnd())",
      "Long.toString(cur.getStart())",
      "Long.toString(cur.getEnd())",
      "vipUuid",
      "protocol"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "L3 network[uuid:%s] not found. Please correct your system tag[%s] of static IP",
    "en_US": "L3 network[uuid:{0}] not found. Please correct your system tag[{1}] of static IP",
    "zh_CN": "找不到L3网络[uuid:0]。请确认静态IP的系统标签",
    "arguments": [
      "l3Uuid",
      "systemTag"
    ],
    "line": 772,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "for shareable volume, the only supported primary storage type is %s, current is %s",
    "en_US": "for shareable volume, the only supported primary storage type is {0}, current is {1}",
    "zh_CN": "共享云盘仅支持在主存储类型为{0}的主存储上使用，当前的类型为{1}",
    "arguments": [
      "supportSharedVolumePrimaryStorage",
      "psType"
    ],
    "line": 304,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s] is larger than %d",
    "en_US": "invalid volume bandwidth[{0}] is larger than {1}",
    "zh_CN": "云盘带宽[{0}]大于{1}是无效的",
    "arguments": [
      "bandwidth",
      "Long.MAX_VALUE"
    ],
    "line": 734,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s] is not a number",
    "en_US": "invalid volume bandwidth[{0}] is not a number",
    "zh_CN": "错误的云盘带宽 ，[{0}] 这个不是数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 732,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s], it must be greater than 1024 (include 1024)",
    "en_US": "invalid volume bandwidth[{0}], it must be greater than 1024 (include 1024)",
    "zh_CN": "无效的云盘带宽，它必须大于等于1M",
    "arguments": [
      "bandwidth"
    ],
    "line": 729,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s] is not a number",
    "en_US": "invalid volume IOPS[{0}] is not a number",
    "zh_CN": "错误的云盘每秒读写速度[{0}]，它应该是个数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 753,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s] is larger than %d",
    "en_US": "invalid volume IOPS[{0}] is larger than {1}",
    "zh_CN": "云盘IOPS[{0}]大于{1}是无效的",
    "arguments": [
      "bandwidth",
      "Long.MAX_VALUE"
    ],
    "line": 755,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s], it must be greater than 0",
    "en_US": "invalid volume IOPS[{0}], it must be greater than 0",
    "zh_CN": "错误的云盘每秒读写速度[{0}]，它应该大于0",
    "arguments": [
      "bandwidth"
    ],
    "line": 750,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "Unknown code[%s] of Security Level",
    "en_US": "Unknown code[{0}] of Security Level",
    "zh_CN": "",
    "arguments": [
      "level"
    ],
    "line": 810,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "[%s] is not a standard cidr",
    "en_US": "[{0}] is not a standard cidr",
    "zh_CN": "",
    "arguments": [
      "cidr"
    ],
    "line": 832,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "the host[uuid:%s]\u0027s operating system %s %s is too old, the QEMU doesn\u0027t support QoS of network or disk IO. Please choose another instance offering with no QoS configuration",
    "en_US": "the host[uuid:{0}]\u0027s operating system {1} {2} is too old, the QEMU doesn\u0027t support QoS of network or disk IO. Please choose another instance offering with no QoS configuration",
    "zh_CN": "物理机[uuid:{0}] 的操作系统{1} {2} 过老,  QEMU 不支持云盘的QOS IO设置 。 请选择别的没有Qos的计算规格",
    "arguments": [
      "hostUuid",
      "distro",
      "version"
    ],
    "line": 849,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it\u0027s not a double",
    "en_US": "invalid value[{0}], it\u0027s not a double",
    "zh_CN": "错误的值[{0}]，这个不是双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 1082,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it must be a double greater than 0",
    "en_US": "invalid value[{0}], it must be a double greater than 0",
    "zh_CN": "错误的值[{0}]，必须是一个大于0的双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 1050,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it must be a double between (0, 1]",
    "en_US": "invalid value[{0}], it must be a double between (0, 1]",
    "zh_CN": "错误的值[{0}]，这个必须在0~1之间的双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 1079,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], ZStack doesn\u0027t have such host allocator type",
    "en_US": "invalid value[{0}], ZStack doesn\u0027t have such host allocator type",
    "zh_CN": "错误值[{0}]，Zstack没有这样的分配器类型",
    "arguments": [
      "newValue"
    ],
    "line": 1093,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "%s value is[%s], which is conflict with %s value [%s]",
    "en_US": "{0} value is[{1}], which is conflict with {2} value [{3}]",
    "zh_CN": "",
    "arguments": [
      "MevocoGlobalConfig.AIO_NATIVE.getCanonicalName()",
      "MevocoGlobalConfig.AIO_NATIVE.value()",
      "KVMGlobalConfig.LIBVIRT_CACHE_MODE.getCanonicalName()",
      "KVMGlobalConfig.LIBVIRT_CACHE_MODE.value()"
    ],
    "line": 1115,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "obj is not instanceof NicQos!",
    "en_US": "obj is not instanceof NicQos!",
    "zh_CN": "",
    "arguments": [],
    "line": 1371,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "unexpected host management IPs: [%s]",
    "en_US": "unexpected host management IPs: [{0}]",
    "zh_CN": "",
    "arguments": [
      "String.join(\",\", ips)"
    ],
    "line": 1732,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not set local and configure at same time",
    "en_US": "can not set local and configure at same time",
    "zh_CN": "",
    "arguments": [],
    "line": 1864,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not find node A config info",
    "en_US": "can not find node A config info",
    "zh_CN": "",
    "arguments": [],
    "line": 1916,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not find node A address info from bootstrap agent",
    "en_US": "can not find node A address info from bootstrap agent",
    "zh_CN": "",
    "arguments": [],
    "line": 1926,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not get bootstrap job %s result after 900s",
    "en_US": "can not get bootstrap job {0} result after 900s",
    "zh_CN": "",
    "arguments": [
      "s.getJobUuid()"
    ],
    "line": 1987,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "curl bootstrap agent finished, return code: %s, stdout: %s, stderr: %s",
    "en_US": "curl bootstrap agent finished, return code: {0}, stdout: {1}, stderr: {2}",
    "zh_CN": "",
    "arguments": [
      "ret.getRetCode()",
      "ret.getStdout()",
      "ret.getStderr()"
    ],
    "line": 1995,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "node A update factory mode failed, details: %s",
    "en_US": "node A update factory mode failed, details: {0}",
    "zh_CN": "",
    "arguments": [
      "errorOfNodeA.getCauses().get(0)"
    ],
    "line": 2459,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "all management node update factory mode failed, details: %s",
    "en_US": "all management node update factory mode failed, details: {0}",
    "zh_CN": "",
    "arguments": [
      "errorCodeList.getCauses().get(0)"
    ],
    "line": 2457,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "management node status is not %s",
    "en_US": "management node status is not {0}",
    "zh_CN": "",
    "arguments": [
      "ManagementNodeState.RUNNING"
    ],
    "line": 2566,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "some node on factory mode exists, detail of arping: %s",
    "en_US": "some node on factory mode exists, detail of arping: {0}",
    "zh_CN": "",
    "arguments": [
      "r.getStdout()"
    ],
    "line": 2493,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "set address on node A failed",
    "en_US": "set address on node A failed",
    "zh_CN": "",
    "arguments": [],
    "line": 2514,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "this node is not node A",
    "en_US": "this node is not node A",
    "zh_CN": "",
    "arguments": [],
    "line": 2511,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "networkInboundBandwidth format error %s",
    "en_US": "networkInboundBandwidth format error {0}",
    "zh_CN": "下行网络带宽格式错误{0}",
    "arguments": [
      "bandwidth"
    ],
    "line": 2651,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "networkOutboundBandwidth format error %s",
    "en_US": "networkOutboundBandwidth format error {0}",
    "zh_CN": "上行网络带宽超格式错误{0}",
    "arguments": [
      "bandwidth"
    ],
    "line": 2663,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "networkOutboundBandwidth execeds the max value 32G bps",
    "en_US": "networkOutboundBandwidth execeds the max value 32G bps",
    "zh_CN": "超过上行网络带宽超过最大值32G bps",
    "arguments": [],
    "line": 2660,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "Shareable Volume[uuid:%s] has already been attached to VM[uuid:%s]",
    "en_US": "Shareable Volume[uuid:{0}] has already been attached to VM[uuid:{1}]",
    "zh_CN": "共享云盘[uuid:{0}]已经挂载到云主机[uuid:{1}]上",
    "arguments": [
      "volume.getUuid()",
      "vm.getUuid()"
    ],
    "line": 2855,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "shareable disk only support virtio-scsi type for now",
    "en_US": "shareable disk only support virtio-scsi type for now",
    "zh_CN": "目前共享盘只支持virtio-scsi",
    "arguments": [],
    "line": 2873,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "shareable volume(s)[uuid: %s] attached, not support to group snapshot.",
    "en_US": "shareable volume(s)[uuid: {0}] attached, not support to group snapshot.",
    "zh_CN": "",
    "arguments": [
      "sharedVolUuids"
    ],
    "line": 3279,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "How can a Running VM[uuid:%s] has no hostUuid?",
    "en_US": "How can a Running VM[uuid:{0}] has no hostUuid?",
    "zh_CN": "",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 331,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Unexpectedly, VM[uuid:%s] is not running any more, please try again later",
    "en_US": "Unexpectedly, VM[uuid:{0}] is not running any more, please try again later",
    "zh_CN": "",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 329,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not take snapshot for volumes[%s] while volume[uuid: %s] not attached",
    "en_US": "can not take snapshot for volumes[{0}] while volume[uuid: {1}] not attached",
    "zh_CN": "当云盘[uuid:{1}]未加载时，无法给云盘[{0}]创建快照",
    "arguments": [
      "msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList())",
      "job.getVolumeUuid()"
    ],
    "line": 719,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not take snapshot for volumes[%s] while volume[uuid: %s] appears twice",
    "en_US": "can not take snapshot for volumes[{0}] while volume[uuid: {1}] appears twice",
    "zh_CN": "当云盘[uuid:{1}]出现多次时，无法给云盘[{0}]创建快照",
    "arguments": [
      "msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList())",
      "job.getVolumeUuid()"
    ],
    "line": 725,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not take snapshot for volumes[%s] attached multiple vms[%s, %s]",
    "en_US": "can not take snapshot for volumes[{0}] attached multiple vms[{1}, {2}]",
    "zh_CN": "当云盘[uuid:{1}]加载到多个虚拟机上时，无法给云盘[{0}]创建快照",
    "arguments": [
      "msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList())",
      "job.getVolumeUuid()",
      "volumeVOS.get(0).getVmInstanceUuid()"
    ],
    "line": 732,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "no volumes found",
    "en_US": "no volumes found",
    "zh_CN": "找不到云盘",
    "arguments": [],
    "line": 739,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "this snapshot recording the volume state before resize to %fG is created automatically",
    "en_US": "this snapshot recording the volume state before resize to {0}G is created automatically",
    "zh_CN": "该快照记录云盘扩容到{0}G之前的状态，由系统自动创建",
    "arguments": [
      "SizeUnit.BYTE.toGigaByte((double) resize)"
    ],
    "line": 971,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "DeleteVolumeQos [%s] ingor because of account privilege.",
    "en_US": "DeleteVolumeQos [{0}] ingor because of account privilege.",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1238,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Cannot delete vm\u0027s volume qos on host %s, because the current vm is in state of %s, but support expect states are [%s, %s]",
    "en_US": "Cannot delete vm\u0027s volume qos on host {0}, because the current vm is in state of {1}, but support expect states are [{2}, {3}]",
    "zh_CN": "",
    "arguments": [
      "ivo.getHostUuid()",
      "ivo.getState()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Stopped.toString()"
    ],
    "line": 1270,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "non admin account cannot set bandwidth more than %s",
    "en_US": "non admin account cannot set bandwidth more than {0}",
    "zh_CN": "",
    "arguments": [
      "VolumeQos.getVolumeQosByMode(self.getVolumeQos(), msg.getMode())"
    ],
    "line": 1428,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "volume [%s] isn\u0027t attached to any vm, cannot get qos by forceSync",
    "en_US": "volume [{0}] isn\u0027t attached to any vm, cannot get qos by forceSync",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1469,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "volume [%s] isn\u0027t attached to any vm (or vm is not existed now), cannot sync volume qos",
    "en_US": "volume [{0}] isn\u0027t attached to any vm (or vm is not existed now), cannot sync volume qos",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1475,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "vm [%s]\u0027 state must be Running or Paused to sync volume qos",
    "en_US": "vm [{0}]\u0027 state must be Running or Paused to sync volume qos",
    "zh_CN": "",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 1480,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "vm [%s]\u0027s HostUuid is null, cannot sync volume qos",
    "en_US": "vm [{0}]\u0027s HostUuid is null, cannot sync volume qos",
    "zh_CN": "",
    "arguments": [],
    "line": 1485,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "failed to detach shareable volume[uuid:%s] from VmInstance[uuid:%s]",
    "en_US": "failed to detach shareable volume[uuid:{0}] from VmInstance[uuid:{1}]",
    "zh_CN": "不能卸载云主机[uuid:{1}]上的共享盘[uuid:{0}]",
    "arguments": [
      "msg.getVolume().getUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 1595,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "failed to detach shareable volume from VmInstance:[\\n%s]",
    "en_US": "failed to detach shareable volume from VmInstance:[\\n{0}]",
    "zh_CN": "不能卸载云主机[uuid:{0}]上的共享盘",
    "arguments": [
      "StringUtils.join(errors, \"\\n\\n\")"
    ],
    "line": 1607,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "the current version of license does not support modifying this global config [name:%s]",
    "en_US": "the current version of license does not support modifying this global config [name:{0}]",
    "zh_CN": "当前license版本不支持修改此全局设置[name:{0}]",
    "arguments": [
      "getName()"
    ],
    "line": 27,
    "fileName": "src/main/java/org/zstack/mevoco/PremiumGlobalConfig.java"
  },
  {
    "raw": "the current version of license does not support modifying this resource config [name:%s]",
    "en_US": "the current version of license does not support modifying this resource config [name:{0}]",
    "zh_CN": "",
    "arguments": [
      "globalConfig.getName()"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/mevoco/PremiumResourceConfig.java"
  },
  {
    "raw": "invalid volume qos mode: %s",
    "en_US": "invalid volume qos mode: {0}",
    "zh_CN": "",
    "arguments": [
      "mode"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/mevoco/VolumeQos.java"
  },
  {
    "raw": "cannot find mode from null VolumeQos",
    "en_US": "cannot find mode from null VolumeQos",
    "zh_CN": "",
    "arguments": [],
    "line": 199,
    "fileName": "src/main/java/org/zstack/mevoco/VolumeQos.java"
  },
  {
    "raw": "cannot find monitor trigger[uuid:%s], it may have been deleted",
    "en_US": "cannot find monitor trigger[uuid:{0}], it may have been deleted",
    "zh_CN": "不能找到触发监控器[uuid:{0}]，它可能已经被删除了",
    "arguments": [
      "msg.getMonitorTriggerUuid()"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "cannot find monitor trigger action[uuid:%s], it may have been deleted",
    "en_US": "cannot find monitor trigger action[uuid:{0}], it may have been deleted",
    "zh_CN": "为找到这个监控触发行为[uuid:{0}]，它可能已经被删除了",
    "arguments": [
      "msg.getMonitorTriggerActionUuid()"
    ],
    "line": 199,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "the resource[type:%s] doesn\u0027t have any monitoring items",
    "en_US": "the resource[type:{0}] doesn\u0027t have any monitoring items",
    "zh_CN": "该资源[type:{0}]没有任何监控条目",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "the resource[uuid:%s] doesn\u0027t belong to the account[uuid:%s]",
    "en_US": "the resource[uuid:{0}] doesn\u0027t belong to the account[uuid:{1}]",
    "zh_CN": "该资源[uuid:{0}]不属于账户[uuid:{1}]",
    "arguments": [
      "msg.getTargetResourceUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 335,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "cannot find type for the resource[uuid:%s]",
    "en_US": "cannot find type for the resource[uuid:{0}]",
    "zh_CN": "未找到资源[uuid:{0}]这种类型",
    "arguments": [
      "resourceUuid"
    ],
    "line": 386,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "no monitoring item found for the resourceType[%s] and item[%s]",
    "en_US": "no monitoring item found for the resourceType[{0}] and item[{1}]",
    "zh_CN": "未找到资源类型[{0}]和条目[{1}]这种监控条目",
    "arguments": [
      "resourceType",
      "triggerExpression.getItem()"
    ],
    "line": 391,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "A resource[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]\u0027s monitoring trigger[uuid:{triggerUuid}] changes status to {triggerStatus}",
    "en_US": "A resource[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]\u0027s monitoring trigger[uuid:{triggerUuid}] changes status to {triggerStatus}",
    "zh_CN": "资源[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]的监听触发器[uuid:{triggerUuid}]修改状态为{triggerStatus}",
    "arguments": [
      "args"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\n\u003d\u003d\u003d BELOW ARE DETAILS OF THE PREVIOUS ALERT \u003d\u003d\u003d",
    "en_US": "\\n\u003d\u003d\u003d BELOW ARE DETAILS OF THE PREVIOUS ALERT \u003d\u003d\u003d",
    "zh_CN": "\\n\u003d\u003d\u003d 以下是上一次警告内容 \u003d\u003d\u003d",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\nalert details:",
    "en_US": "\\nalert details:",
    "zh_CN": "\\n警告内容: ",
    "arguments": [],
    "line": 58,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\ncondition: {itemName} {operator} {threshold}",
    "en_US": "\\ncondition: {itemName} {operator} {threshold}",
    "zh_CN": "\\n环境: {itemName} {operator} {threshold}",
    "arguments": [
      "args"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\ncurrent value: {value}",
    "en_US": "\\ncurrent value: {value}",
    "zh_CN": "\\n当前值: {value}",
    "arguments": [
      "args"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "Host CPU utilization",
    "en_US": "Host CPU utilization",
    "zh_CN": "CPU使用率",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java"
  },
  {
    "raw": "VM CPU utilization",
    "en_US": "VM CPU utilization",
    "zh_CN": "虚拟机CPU使用率",
    "arguments": [],
    "line": 29,
    "fileName": "src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java"
  },
  {
    "raw": "conflict alert rule[%s], there has been a rule[%s] with the same name",
    "en_US": "conflict alert rule[{0}], there has been a rule[{1}] with the same name",
    "zh_CN": "冲突提示规则[{0}]，这里已经存在和它一样名称的规则",
    "arguments": [
      "rb.name",
      "r"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java"
  },
  {
    "raw": "ALERT:\\n resource[name: %s, uuid: %s, type: %s]\\nevent: %s %s %s\\ncurrent value: %s\\nduration: %s seconds\\n",
    "en_US": "ALERT:\\n resource[name: {0}, uuid: {1}, type: {2}]\\nevent: {3} {4} {5}\\ncurrent value: {6}\\nduration: {7} seconds\\n",
    "zh_CN": "警告:\\n 资源[名称: {0}, uuid: {1}, 类型: {2}]\\n 事件: {3} {4} {5}\\n 周期: {7}\\n",
    "arguments": [
      "resourceName",
      "resourceUuid",
      "toI18nString(resourceType)",
      "itemName",
      "toI18nString(expression.getOperator())",
      "expression.getConstant()",
      "value",
      "tvo.getDuration()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusAlert.java"
  },
  {
    "raw": "the relativeTime[%s] is invalid, it must be in format of, for example, 10s, 1h",
    "en_US": "the relativeTime[{0}] is invalid, it must be in format of, for example, 10s, 1h",
    "zh_CN": "相关时间[{0}]不合法,格式必须例如10s，1h",
    "arguments": [
      "msg.getRelativeTime()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java"
  },
  {
    "raw": "the relativeTime[%s] is invalid, it\u0027s too big",
    "en_US": "the relativeTime[{0}] is invalid, it\u0027s too big",
    "zh_CN": "相关时间[{0}]不合法，值\u0027s 过大",
    "arguments": [
      "msg.getRelativeTime()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java"
  },
  {
    "raw": "CPU number",
    "en_US": "CPU number",
    "zh_CN": "CPU数量",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilAlertWriter.java"
  },
  {
    "raw": "invalid cpu[%s], the host[uuid:%s] doesn\u0027t have a CPU numbered by %s",
    "en_US": "invalid cpu[{0}], the host[uuid:{1}] doesn\u0027t have a CPU numbered by {2}",
    "zh_CN": "无效CPU数目[{0}]，物理机[uuid:{1}]存在的CPU数目是{2}",
    "arguments": [
      "cpu",
      "trigger.getTargetResourceUuid()",
      "cpuNum"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilItem.java"
  },
  {
    "raw": "Host Disk Capacity",
    "en_US": "Host Disk Capacity",
    "zh_CN": "物理机磁盘容量",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Host Disk Capacity type",
    "en_US": "Host Disk Capacity type",
    "zh_CN": "物理机磁盘容量类型",
    "arguments": [],
    "line": 98,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Host devices",
    "en_US": "Host devices",
    "zh_CN": "物理机服务",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "invalid type[%s], only %s are allowed",
    "en_US": "invalid type[{0}], only {1} are allowed",
    "zh_CN": "无效类型[{0}]，只有{1}被允许",
    "arguments": [
      "type",
      "ALLOWED_TYPES"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityItem.java"
  },
  {
    "raw": "Host",
    "en_US": "Host",
    "zh_CN": "物理机",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostNetworkIOAlertWriter.java"
  },
  {
    "raw": "query failure, errorType:%s, error: %s",
    "en_US": "query failure, errorType:{0}, error: {1}",
    "zh_CN": "查询失败，错误类型: {0}, 错误: {1}",
    "arguments": [
      "ret.get(\"errorType\")",
      "ret.get(\"error\")"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusMonitorProviderFactory.java"
  },
  {
    "raw": "CPU Utilization",
    "en_US": "CPU Utilization",
    "zh_CN": "CPU使用率",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java"
  },
  {
    "raw": "CPU utilization type",
    "en_US": "CPU utilization type",
    "zh_CN": "CPU使用类型",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java"
  },
  {
    "raw": "Disk IO",
    "en_US": "Disk IO",
    "zh_CN": "磁盘IO",
    "arguments": [],
    "line": 86,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java"
  },
  {
    "raw": "Disk IO direction",
    "en_US": "Disk IO direction",
    "zh_CN": "磁盘IO方向",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java"
  },
  {
    "raw": "Disk IO type",
    "en_US": "Disk IO type",
    "zh_CN": "磁盘IO类型",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java"
  },
  {
    "raw": "Memory Utilization",
    "en_US": "Memory Utilization",
    "zh_CN": "内存使用率",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilAlertWriter.java"
  },
  {
    "raw": "invalid right value[%s], it must be a float or double number",
    "en_US": "invalid right value[{0}], it must be a float or double number",
    "zh_CN": "无效的参数值[{0}]，它必须是一个float或者double类型的数值",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "invalid right value[%s], it must be float or double number greater than zero and lesser than one",
    "en_US": "invalid right value[{0}], it must be float or double number greater than zero and lesser than one",
    "zh_CN": "无效参数值[{0}]，它必须是一个float或者double类型的大于0小于1的数值",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "invalid arguments %s, no argument is allowed",
    "en_US": "invalid arguments {0}, no argument is allowed",
    "zh_CN": "无效参数列表{0}，没有被参数被允许",
    "arguments": [
      "expression.getArguments().keySet()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "Network IO",
    "en_US": "Network IO",
    "zh_CN": "网络IO",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java"
  },
  {
    "raw": "Network IO direction",
    "en_US": "Network IO direction",
    "zh_CN": "网络IO方向",
    "arguments": [],
    "line": 89,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java"
  },
  {
    "raw": "Virtual Machine",
    "en_US": "Virtual Machine",
    "zh_CN": "虚拟机器",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java"
  },
  {
    "raw": "invalid right value[%s], it must be a number(int, long, float, double)",
    "en_US": "invalid right value[{0}], it must be a number(int, long, float, double)",
    "zh_CN": "无效参数值[{0}]，他应该是一个数字(int, long, float, double)",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java"
  },
  {
    "raw": "invalid direction[%s], only %s are allowed",
    "en_US": "invalid direction[{0}], only {1} are allowed",
    "zh_CN": "无效direction[{0}]，只有{1}被允许",
    "arguments": [
      "dir",
      "ALLOWED_DIRECTION"
    ],
    "line": 18,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java"
  },
  {
    "raw": "invalid expression: %s, %s",
    "en_US": "invalid expression: {0}, {1}",
    "zh_CN": "无效的语句: {0}, {1}",
    "arguments": [
      "expr",
      "e.getMessage()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "invalid expression: %s, no expression found",
    "en_US": "invalid expression: {0}, no expression found",
    "zh_CN": "无效的语句: {0}，未找到该语句",
    "arguments": [
      "expr"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "missing parameter \u0027%s\u0027 in the expression",
    "en_US": "missing parameter \u0027{0}\u0027 in the expression",
    "zh_CN": "在语句中缺失参数{0}",
    "arguments": [
      "key"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "wrong type of parameter \u0027%s\u0027 in the expression, it must be type of %s, but got %s",
    "en_US": "wrong type of parameter \u0027{0}\u0027 in the expression, it must be type of {1}, but got {2}",
    "zh_CN": "在语句中{0}参数类型错误，它必须是{1}这种类型，但是获得的是{2}",
    "arguments": [
      "key",
      "clz",
      "value.getClass()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "Rendezvous Point [%s] is not a unicast address",
    "en_US": "Rendezvous Point [{0}] is not a unicast address",
    "zh_CN": "组播聚合点地址[{0}]不是单播地址",
    "arguments": [
      "rpAddress"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "group address [%s] is not a multicast address",
    "en_US": "group address [{0}] is not a multicast address",
    "zh_CN": "地址 [{0}] 不是组播地址",
    "arguments": [
      "multicastGroup"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "rp address pair [%s: %s] already existed for multicast router [uuid:%s]",
    "en_US": "rp address pair [{0}: {1}] already existed for multicast router [uuid:{2}]",
    "zh_CN": "组播聚合点地址对[{0}: {1}]已经存在于组播路由器[uuid:{2}]的配置中",
    "arguments": [
      "msg.getRpAddress()",
      "msg.getGroupAddress()",
      "msg.getUuid()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "rp address tuple [%s : %s] is not existed for multicast router [uuid:%s]",
    "en_US": "rp address tuple [{0} : {1}] is not existed for multicast router [uuid:{2}]",
    "zh_CN": "组播聚合点地址对[{0}: {1}]不存于组播路由器[uuid:{2}]的配置中",
    "arguments": [
      "msg.getRpAddress()",
      "msg.getGroupAddress()",
      "msg.getUuid()"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "multicastRouter[uuid:%s] has not been attached to vpc router",
    "en_US": "multicastRouter[uuid:{0}] has not been attached to vpc router",
    "zh_CN": "组播路由器[uuid:{0}]没有关联到VPC路由器",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "multicast already enabled on vpc router uuid[:%s]",
    "en_US": "multicast already enabled on vpc router uuid[:{0}]",
    "zh_CN": "VPC路由器[uuid:{0}]的组播路功能已经打开",
    "arguments": [
      "msg.getVpcRouterVmUuid()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "vpc router for multicast router [uuid:%s] has been deleted",
    "en_US": "vpc router for multicast router [uuid:{0}] has been deleted",
    "zh_CN": "组播路由器[uuid:{0}]关联的VPC路由器已经被删除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 316,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "multicast router [uuid:%s] is not attached to Vpc Router",
    "en_US": "multicast router [uuid:{0}] is not attached to Vpc Router",
    "zh_CN": "组播路由器[uuid:{0}]没有关联到VPC路由器",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 759,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "multicast router [uuid:%s] has been delete during enable multilcast on backend",
    "en_US": "multicast router [uuid:{0}] has been delete during enable multilcast on backend",
    "zh_CN": "组播路由器[uuid:{0}]已经被删除",
    "arguments": [
      "vrUuid"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/multicast/router/backend/MulticastRouterVyosBackendImpl.java"
  },
  {
    "raw": "nas file system [%s] is not existed yet",
    "en_US": "nas file system [{0}] is not existed yet",
    "zh_CN": "",
    "arguments": [
      "msg.getNasFileSystemUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java"
  },
  {
    "raw": "cannot find nas factory for type: %s",
    "en_US": "cannot find nas factory for type: {0}",
    "zh_CN": "",
    "arguments": [
      "type"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java"
  },
  {
    "raw": "duplicate NasFileSystemFactory[%s, %s] for type[%s]",
    "en_US": "duplicate NasFileSystemFactory[{0}, {1}] for type[{2}]",
    "zh_CN": "",
    "arguments": [
      "f.getClass().getSimpleName()",
      "old.getClass().getSimpleName()",
      "f.getNasFileSystemType()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java"
  },
  {
    "raw": "l2Network[uuid:%s] has attached to cluster[uuid:%s], can\u0027t attach again",
    "en_US": "l2Network[uuid:{0}] has attached to cluster[uuid:{1}], can\u0027t attach again",
    "zh_CN": "不能再次挂载l2网络[uuid:{0}]，因为已经挂载到集群[uuid:{1}]上了",
    "arguments": [
      "msg.getL2NetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "l2Network[uuid:%s] has not attached to cluster[uuid:%s]",
    "en_US": "l2Network[uuid:{0}] has not attached to cluster[uuid:{1}]",
    "zh_CN": "L2网络[uuid:{0}]没有挂载到集群上[uuid:{1}]",
    "arguments": [
      "msg.getL2NetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "unsupported l2Network type[%s]",
    "en_US": "unsupported l2Network type[{0}]",
    "zh_CN": "不支持的网络类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "There has been a L2VlanNetwork[uuid:%s, name:%s] attached to cluster[uuid:%s] that has physical interface[%s], vlan[%s]. Failed to attach L2VlanNetwork[uuid:%s]",
    "en_US": "There has been a L2VlanNetwork[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}], vlan[{4}]. Failed to attach L2VlanNetwork[uuid:{5}]",
    "zh_CN": "L2网络挂载失败[uuid:{5}]: L2网络[uuid:{0}, name:{1}]的物理接口[{3}], vlan[{4}]已经挂载到集群[uuid:{2}]上",
    "arguments": [
      "vl2.getUuid()",
      "vl2.getName()",
      "msg.getClusterUuid()",
      "vl2.getPhysicalInterface()",
      "vl2.getVlan()",
      "tl2.getUuid()"
    ],
    "line": 558,
    "fileName": "src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java"
  },
  {
    "raw": "There has been a l2Network[uuid:%s, name:%s] attached to cluster[uuid:%s] that has physical interface[%s]. Failed to attach l2Network[uuid:%s]",
    "en_US": "There has been a l2Network[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}]. Failed to attach l2Network[uuid:{4}]",
    "zh_CN": "L2网络挂载失败[uuid:{4}]: L2网络[uuid:{0}, name:{1}]的物理接口[{3}]]已经挂载到集群[uuid:{2}]上",
    "arguments": [
      "l2.getUuid()",
      "l2.getName()",
      "msg.getClusterUuid()",
      "l2.getPhysicalInterface()",
      "tl2.getUuid()"
    ],
    "line": 540,
    "fileName": "src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java"
  },
  {
    "raw": "cannot configure vxlan network for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为云主机[uuid:{0}]在目标物理机[uuid:{1}]上配置VXLAN网络",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 218,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java"
  },
  {
    "raw": "find multiple vtep ips[%s] for one host[uuid:%s], need to delete host and add again",
    "en_US": "find multiple vtep ips[{0}] for one host[uuid:{1}], need to delete host and add again",
    "zh_CN": "在一个物理机[uuid:{1}]发现多个VTEP IP，需要删除物理机在进行添加",
    "arguments": [
      "vtepIps",
      "hostUuid"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s, vni:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vni:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "为L2网络[uuid:{1}, type:{2}, vni:{3}]在KVM物理机[uuid:{4}]上创建网桥[{0}]失败，错误细节: {5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vxlan.getVni()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to check cidr[%s] for l2VxlanNetwork[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check cidr[{0}] for l2VxlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "为KVM物理机[uuid:{3}]上的L2 VXLAN 网络[uuid:{1}, name:{2}]检查CIDR[{0}]失败，错误细节: {4}",
    "arguments": [
      "cmd.getCidr()",
      "l2vxlan.getUuid()",
      "l2vxlan.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to realize vxlan network pool[uuid:%s, type:%s, vnis:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to realize vxlan network pool[uuid:{0}, type:{1}, vnis:{2}] on kvm host[uuid:{3}], because {4}",
    "zh_CN": "在kvm物理机[uuid:{3}]实现vxlan network pool[uuid:{0}, type:{1}, vnis:{2}]失败，因为{4}",
    "arguments": [
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2networks",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 251,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java"
  },
  {
    "raw": "failed to check cidr[%s] for l2VxlanNetworkPool[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check cidr[{0}] for l2VxlanNetworkPool[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "检查在kvm物理机[uuid:{3}]上的l2VxlanNetworkPool[uuid:{1}, name:{2}]的CIDR[{0}]失败，{4}",
    "arguments": [
      "cmd.getCidr()",
      "vxlanPool.getUuid()",
      "vxlanPool.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java"
  },
  {
    "raw": "vxlan vtep address for host [uuid : %s] and pool [uuid : %s] pair already existed",
    "en_US": "vxlan vtep address for host [uuid : {0}] and pool [uuid : {1}] pair already existed",
    "zh_CN": "物理机[uuid : {0}]在vxlan资源池[uuid : {1}]中隧道端点地址已经配置",
    "arguments": [
      "msg.getHostUuid()",
      "msg.getPoolUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanPoolApiInterceptor.java"
  },
  {
    "raw": "it is used",
    "en_US": "it is used",
    "zh_CN": "被占用",
    "arguments": [],
    "line": 27,
    "fileName": "src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java"
  },
  {
    "raw": "it is not in this range",
    "en_US": "it is not in this range",
    "zh_CN": "不在IP地址范围内",
    "arguments": [],
    "line": 25,
    "fileName": "src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java"
  },
  {
    "raw": "it is gateway",
    "en_US": "it is gateway",
    "zh_CN": "网关不能分配",
    "arguments": [],
    "line": 23,
    "fileName": "src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java"
  },
  {
    "raw": "you must update system and category both",
    "en_US": "you must update system and category both",
    "zh_CN": "必须同时更行system属性和category属性",
    "arguments": [],
    "line": 116,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "not valid combination of system and category,only %s are valid",
    "en_US": "not valid combination of system and category,only {0} are valid",
    "zh_CN": "无效的system属性和category属性的组合，只有{0}是有效的",
    "arguments": [
      "L3NetworkCategory.validCombination"
    ],
    "line": 355,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "invalid IP[%s]",
    "en_US": "invalid IP[{0}]",
    "zh_CN": "错误的IP值[{0}]",
    "arguments": [
      "msg.getIp()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "no ip range in l3[%s]",
    "en_US": "no ip range in l3[{0}]",
    "zh_CN": "没有IP在三层网络范围中",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip[%s] is not in the cidr of ip range[uuid:%s, cidr:%s] which l3 network[%s] attached",
    "en_US": "ip[{0}] is not in the cidr of ip range[uuid:{1}, cidr:{2}] which l3 network[{3}] attached",
    "zh_CN": "IP[{0}]没有在三层网络[{3}]的CIDR的IP范围内[uuid:{1}, cidr:{2}]",
    "arguments": [
      "msg.getRouterInterfaceIp()",
      "ipRangeVO.getUuid()",
      "ipRangeVO.getNetworkCidr()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip[%s] in ip range[uuid:%s, startIp:%s, endIp:%s] which l3 network[%s] attached, this is not allowed",
    "en_US": "ip[{0}] in ip range[uuid:{1}, startIp:{2}, endIp:{3}] which l3 network[{4}] attached, this is not allowed",
    "zh_CN": "IP[{0}]在三层网络[{4}]绑定的IP范围内[uuid:{1}, startIp:{2}, endIp:{3}]，这是不被允许的",
    "arguments": [
      "msg.getRouterInterfaceIp()",
      "ipRangeVO.getUuid()",
      "ipRangeVO.getStartIp()",
      "ipRangeVO.getEndIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.",
    "en_US": "ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.",
    "zh_CN": "IP段和L3的uuid不能都为空，您必须选择一个填上",
    "arguments": [],
    "line": 167,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid network cidr",
    "en_US": "{0} is not a valid network cidr",
    "zh_CN": "{0}不是有效的无类别域间路由",
    "arguments": [
      "msg.getNetworkCidr()"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid ipv6 address",
    "en_US": "{0} is not a valid ipv6 address",
    "zh_CN": "{0}不是有效的IPv6地址",
    "arguments": [
      "msg.getGateway()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "[startIp %s, endIp %s, prefixLen %d, gateway %s] is not a valid ipv6 range",
    "en_US": "[startIp {0}, endIp {1}, prefixLen {2}, gateway {3}] is not a valid ipv6 range",
    "zh_CN": "IPv6地址段{0}-{1}/{2}, 网关{3}不是有效的IPv6地址段",
    "arguments": [
      "msg.getStartIp()",
      "msg.getEndIp()",
      "msg.getPrefixLen()",
      "msg.getGateway()"
    ],
    "line": 218,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip range prefix length is out of range [%d - %d] ",
    "en_US": "ip range prefix length is out of range [{0} - {1}] ",
    "zh_CN": "IPv6地址前缀长度不在有效范围内[{0}-{1}]",
    "arguments": [
      "IPv6Constants.IPV6_PREFIX_LEN_MIN",
      "IPv6Constants.IPV6_PREFIX_LEN_MAX"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "l3 network [uuid %s: name %s] is not a ipv6 network",
    "en_US": "l3 network [uuid {0}: name {1}] is not a ipv6 network",
    "zh_CN": "三层网络[uuid:{0},名称{1}]不是IPv6网络",
    "arguments": [
      "l3Vo.getUuid()",
      "l3Vo.getName()"
    ],
    "line": 234,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "addressMode[%s] is different from L3Netowork address mode[%s]",
    "en_US": "addressMode[{0}] is different from L3Netowork address mode[{1}]",
    "zh_CN": "地址模式[{0}]和三层网络的地址模式[{1}]不同",
    "arguments": [
      "ipr.getAddressMode()",
      "rangeVOS.get(0).getAddressMode()"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipv6 prefix length must be %d for Stateless-DHCP or SLAAC",
    "en_US": "ipv6 prefix length must be {0} for Stateless-DHCP or SLAAC",
    "zh_CN": "Stateless-DHCP or SLAAC地址模式IPv6网络前缀长度必须是{0}",
    "arguments": [
      "IPv6Constants.IPV6_STATELESS_PREFIX_LEN"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "new ip range [startip :%s, endip :%s] is overlaped with old ip range[startip :%s, endip :%s]",
    "en_US": "new ip range [startip :{0}, endip :{1}] is overlaped with old ip range[startip :{2}, endip :{3}]",
    "zh_CN": "新的IP地址段[{0}-{1}]和旧的IP地址段[{2}-{3}]冲突",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()",
      "r.getStartIp()",
      "r.getEndIp()"
    ],
    "line": 256,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "new network CIDR [%s] is different from old network cidr [%s]",
    "en_US": "new network CIDR [{0}] is different from old network cidr [{1}]",
    "zh_CN": "同一L3网络上不能加载多个CIDR。",
    "arguments": [
      "r.getNetworkCidr()",
      "ipr.getNetworkCidr()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "new add ip range gateway %s is different from old gateway %s",
    "en_US": "new add ip range gateway {0} is different from old gateway {1}",
    "zh_CN": "新ip段的网关地址{0}和已有ip段的网关地址{1}冲突",
    "arguments": [
      "ipr.getGateway()",
      "r.getGateway()"
    ],
    "line": 468,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not an allowed network cidr, because it doesn\u0027t have usable ip range",
    "en_US": "{0} is not an allowed network cidr, because it doesn\u0027t have usable ip range",
    "zh_CN": "{0}是不允许的无类别域间路由，因为它不支持可用的IP段",
    "arguments": [
      "msg.getNetworkCidr()"
    ],
    "line": 286,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not the first or last address of the cidr %s",
    "en_US": "{0} is not the first or last address of the cidr {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getGateway()",
      "msg.getNetworkCidr()"
    ],
    "line": 290,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "ipRangeUuids, L3NetworkUuids, zoneUuids 至少一个不是为空列表，或者全部不为空",
    "arguments": [],
    "line": 313,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "unsupported l3network type[%s]",
    "en_US": "unsupported l3network type[{0}]",
    "zh_CN": "不支持的L3网络类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid domain name",
    "en_US": "{0} is not a valid domain name",
    "zh_CN": "{0}不是有效的域名",
    "arguments": [
      "msg.getDnsDomain()"
    ],
    "line": 340,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "l3 network [uuid %s: name %s] is not a ipv4 network",
    "en_US": "l3 network [uuid {0}: name {1}] is not a ipv4 network",
    "zh_CN": "三层网络[uuid:{0},name:{1}]不是IPv4网络",
    "arguments": [
      "l3Vo.getUuid()",
      "l3Vo.getName()"
    ],
    "line": 382,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains D class addresses which are for multicast",
    "en_US": "the IP range[{0} ~ {1}] contains D class addresses which are for multicast",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了D类的组播地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 386,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains E class addresses which are reserved",
    "en_US": "the IP range[{0} ~ {1}] contains E class addresses which are reserved",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了E类的保留地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 390,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains link local addresses which are reserved",
    "en_US": "the IP range[{0} ~ {1}] contains link local addresses which are reserved",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了本地的保留地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 394,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the gateway[%s] is not in the subnet %s/%s",
    "en_US": "the gateway[{0}] is not in the subnet {1}/{2}",
    "zh_CN": "网关[{0}]不在子网{1}/{2}",
    "arguments": [
      "ipr.getGateway()",
      "ipr.getStartIp()",
      "ipr.getNetmask()"
    ],
    "line": 400,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the endip[%s] is not in the subnet %s/%s",
    "en_US": "the endip[{0}] is not in the subnet {1}/{2}",
    "zh_CN": "IP段结束地址不在子网{1}/{2}范围内",
    "arguments": [
      "ipr.getEndIp()",
      "ipr.getStartIp()",
      "ipr.getNetmask()"
    ],
    "line": 404,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "start ip[%s] is not a IPv4 address",
    "en_US": "start ip[{0}] is not a IPv4 address",
    "zh_CN": "开始的ip[{0}] 不是IPV4的地址",
    "arguments": [
      "ipr.getStartIp()"
    ],
    "line": 408,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "end ip[%s] is not a IPv4 address",
    "en_US": "end ip[{0}] is not a IPv4 address",
    "zh_CN": "结束的ip[{0}] 不是IPV4的地址",
    "arguments": [
      "ipr.getEndIp()"
    ],
    "line": 412,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "gateway[%s] is not a IPv4 address",
    "en_US": "gateway[{0}] is not a IPv4 address",
    "zh_CN": "网关[{0}]不是IPV4的地址",
    "arguments": [
      "ipr.getGateway()"
    ],
    "line": 416,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "netmask[%s] is not a netmask, and the IP range netmask cannot be 0.0.0.0",
    "en_US": "netmask[{0}] is not a netmask, and the IP range netmask cannot be 0.0.0.0",
    "zh_CN": "子网掩码[{0}]不是子网掩码，并且IP段的子网掩码不能是0.0.0.0",
    "arguments": [
      "ipr.getNetmask()"
    ],
    "line": 420,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip allocation can not contain network address or broadcast address",
    "en_US": "ip allocation can not contain network address or broadcast address",
    "zh_CN": "ip 地址分配不能包含网络地址或广播的地址",
    "arguments": [],
    "line": 424,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "start ip[%s] is behind end ip[%s]",
    "en_US": "start ip[{0}] is behind end ip[{1}]",
    "zh_CN": "起始ip[{0}]在尾ip[{1}]后",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "gateway[%s] can not be part of range[%s, %s]",
    "en_US": "gateway[{0}] can not be part of range[{1}, {2}]",
    "zh_CN": "网关[{0}]不能是IP段[{1}, {2}]的一部分",
    "arguments": [
      "ipr.getGateway()",
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 437,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "overlap with ip range[uuid:%s, start ip:%s, end ip: %s]",
    "en_US": "overlap with ip range[uuid:{0}, start ip:{1}, end ip: {2}]",
    "zh_CN": "重叠的IP段[uuid:{0}, 起始ip:{1}, 尾ip: {2}]",
    "arguments": [
      "r.getUuid()",
      "r.getStartIp()",
      "r.getEndIp()"
    ],
    "line": 448,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:%s, CIDR:%s], the new IP range[CIDR:%s] is not in the CIDR with the existing one",
    "en_US": "multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:{0}, CIDR:{1}], the new IP range[CIDR:{2}] is not in the CIDR with the existing one",
    "zh_CN": "在相同的三层网络上多个CIDR是不允许的，已有的IP范围 [uuid: {0}，CIDR: {1}]。新的IP范围 [CIDR: {2}] 不在现有的一个CIDR",
    "arguments": [
      "r.getUuid()",
      "rcidr",
      "cidr"
    ],
    "line": 458,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s[%s] is not a IPv6 address",
    "en_US": "{0}[{1}] is not a IPv6 address",
    "zh_CN": "{0}[{1}]不是IPv6地址",
    "arguments": [
      "manner",
      "ip"
    ],
    "line": 490,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s[%s] is not a IPv4 address",
    "en_US": "{0}[{1}] is not a IPv4 address",
    "zh_CN": "{0}[{1}]不是IPv4地址",
    "arguments": [
      "manner",
      "ip"
    ],
    "line": 486,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "there has been a DNS[%s] on L3 network[uuid:%s]",
    "en_US": "there has been a DNS[{0}] on L3 network[uuid:{1}]",
    "zh_CN": "在L3网络[uuid:{1}]上已经存在一个DNS[{0}]",
    "arguments": [
      "msg.getDns()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 502,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "prefix [%s] is not a IPv4 network cidr",
    "en_US": "prefix [{0}] is not a IPv4 network cidr",
    "zh_CN": "网络段{0}不是合法的网络段",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 525,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "nexthop[%s] is not a IPv4 address",
    "en_US": "nexthop[{0}] is not a IPv4 address",
    "zh_CN": "下一跳{0}不是有效的IP地址",
    "arguments": [
      "msg.getNexthop()"
    ],
    "line": 512,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "there has been a hostroute for prefix[%s] on L3 network[uuid:%s]",
    "en_US": "there has been a hostroute for prefix[{0}] on L3 network[uuid:{1}]",
    "zh_CN": "三层网络{1}已配置主机路由{0}",
    "arguments": [
      "msg.getPrefix()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 519,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "there is no hostroute for prefix[%s] on L3 network[uuid:%s]",
    "en_US": "there is no hostroute for prefix[{0}] on L3 network[uuid:{1}]",
    "zh_CN": "三层网络{1}没有主机路由{0}",
    "arguments": [
      "msg.getPrefix()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 532,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "VM nics[uuids:%s] are not on L3 networks that have been attached to the security group[uuid:%s]",
    "en_US": "VM nics[uuids:{0}] are not on L3 networks that have been attached to the security group[uuid:{1}]",
    "zh_CN": "云主机网卡[uuids:{0}]不在安全组[uuid:{1}]挂载的L3网络上",
    "arguments": [
      "wrongUuids",
      "securityGroupUuid"
    ],
    "line": 171,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "security group[uuid:%s] has not attached to l3Network[uuid:%s], can\u0027t detach",
    "en_US": "security group[uuid:{0}] has not attached to l3Network[uuid:{1}], can\u0027t detach",
    "zh_CN": "不能卸载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为还未挂载",
    "arguments": [
      "msg.getSecurityGroupUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "security group[uuid:%s] has attached to l3Network[uuid:%s], can\u0027t attach again",
    "en_US": "security group[uuid:{0}] has attached to l3Network[uuid:{1}], can\u0027t attach again",
    "zh_CN": "不能再次挂载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为已经挂载了",
    "arguments": [
      "msg.getSecurityGroupUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid:%s] doesn\u0027t have the network service type[%s] enabled",
    "en_US": "the L3 network[uuid:{0}] doesn\u0027t have the network service type[{1}] enabled",
    "zh_CN": "L3网络[uuid:{0}]没有开启[{1}]类型的网络服务",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid:%s] ipVersion [%d] is different from securityGroup [uuid:%s] ipVersion [%d]",
    "en_US": "the L3 network[uuid:{0}] ipVersion [{1}] is different from securityGroup [uuid:{2}] ipVersion [{3}]",
    "zh_CN": "",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "l3Vo.getIpVersion()",
      "msg.getSecurityGroupUuid()",
      "sgVo.getIpVersion()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "rule type can not be null. rule dump: %s",
    "en_US": "rule type can not be null. rule dump: {0}",
    "zh_CN": "规则类型(rule type)不能为空(null)。规则内容为: {0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "unknown rule type[%s], rule can only be Ingress/Egress. rule dump: %s",
    "en_US": "unknown rule type[{0}], rule can only be Ingress/Egress. rule dump: {1}",
    "zh_CN": "未知的规则类型(rule type)[{0}]，规则类型只能为Ingress/Egress。规则内容为: {1}",
    "arguments": [
      "ao.getType()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 219,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "protocol can not be null. rule dump: %s",
    "en_US": "protocol can not be null. rule dump: {0}",
    "zh_CN": "协议(protocol)不能为空(null)。规则内容为: {0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid protocol[%s]. Valid protocols are [TCP, UDP, ICMP, ALL]. rule dump: %s",
    "en_US": "invalid protocol[{0}]. Valid protocols are [TCP, UDP, ICMP, ALL]. rule dump: {1}",
    "zh_CN": "无效的协议(protocol)[{0}]。有效的协议类型为[TCP,UDP,ICMP,ALL]。规则内容为: {1}",
    "arguments": [
      "ao.getProtocol()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "can not set port for protocol [type:ALL]. rule dump: %s",
    "en_US": "can not set port for protocol [type:ALL]. rule dump: {0}",
    "zh_CN": "不能为协议类型为 ALL 的规则指定端口号，规则为:{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 238,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "startPort can not be null. rule dump: %s",
    "en_US": "startPort can not be null. rule dump: {0}",
    "zh_CN": "起始端口(startPort)不能为空(null)。规则内容为: {0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 236,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid startPort[%s]. Valid range is [0, 65535]. rule dump: %s",
    "en_US": "invalid startPort[{0}]. Valid range is [0, 65535]. rule dump: {1}",
    "zh_CN": "无效的起始端口(startPort)[{0}]。有效的范围为[0,65535]。规则内容为: {1}",
    "arguments": [
      "ao.getStartPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid ICMP type[%s]. Valid type is [-1, 255]. rule dump: %s",
    "en_US": "invalid ICMP type[{0}]. Valid type is [-1, 255]. rule dump: {1}",
    "zh_CN": "无效的ICMP类型[{0}]。有效的类型为[-1,255]。规则内容为: {1}",
    "arguments": [
      "ao.getStartPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid endPort[%s]. Valid range is [0, 65535]. rule dump: %s",
    "en_US": "invalid endPort[{0}]. Valid range is [0, 65535]. rule dump: {1}",
    "zh_CN": "无效的结束端口(endPort)[{0}]。有效的范围为[0,65535]。规则内容为: {1}",
    "arguments": [
      "ao.getEndPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid ICMP code[%s]. Valid range is [-1, 3]. rule dump: %s",
    "en_US": "invalid ICMP code[{0}]. Valid range is [-1, 3]. rule dump: {1}",
    "zh_CN": "无效的ICMP编码[{0}]。有效的范围为[-1,3]。规则内容为: {1}",
    "arguments": [
      "ao.getEndPort()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "invalid CIDR[%s]. rule dump: %s",
    "en_US": "invalid CIDR[{0}]. rule dump: {1}",
    "zh_CN": "无效的CIDR[{0}]。规则内容为: {1}",
    "arguments": [
      "ao.getAllowedCidr()",
      "JSONObjectUtil.toJsonString(ao)"
    ],
    "line": 279,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "security group rule ipVersion [%d] is different from security group version [%d]",
    "en_US": "security group rule ipVersion [{0}] is different from security group version [{1}]",
    "zh_CN": "远端安全组IP协议号[{0}]和本地安全组的IP协议号[{1}]",
    "arguments": [
      "sgVo.getIpVersion()",
      "ao.getIpVersion()"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "rule should not be duplicated. rule dump: %s",
    "en_US": "rule should not be duplicated. rule dump: {0}",
    "zh_CN": "规则不应该重复。规则内容为: {0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(msg.getRules().get(j))"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "rule exist. rule dump: %s, remoteSecurityGroupUuid:[%s]",
    "en_US": "rule exist. rule dump: {0}, remoteSecurityGroupUuid:[{1}]",
    "zh_CN": "规则已存在，规则内容为:{0}，源安全组[uuid:{1}]",
    "arguments": [
      "JSONObjectUtil.toJsonString(sao)",
      "svo.getRemoteSecurityGroupUuid()"
    ],
    "line": 318,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "remote security group ipVersion [%d] is different from security group version [%d]",
    "en_US": "remote security group ipVersion [{0}] is different from security group version [{1}]",
    "zh_CN": "远端安全组IP协议号[{0}]和安全组协议号[{1}]不一致",
    "arguments": [
      "rsgVo.getIpVersion()",
      "sgVo.getIpVersion()"
    ],
    "line": 345,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "L3Network [uuid: %s] provide type null",
    "en_US": "L3Network [uuid: {0}] provide type null",
    "zh_CN": "三层网络{0}后端为空",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/network/service/HostRouteExtension.java"
  },
  {
    "raw": "L3Network [uuid: %s] does not have host route service",
    "en_US": "L3Network [uuid: {0}] does not have host route service",
    "zh_CN": "三层网络{0}没有主机路由功能",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/network/service/HostRouteExtension.java"
  },
  {
    "raw": "networkServices cannot be empty",
    "en_US": "networkServices cannot be empty",
    "zh_CN": "网络服务(networkServices)不能为空",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "network service for provider[uuid:%s] must be specified",
    "en_US": "network service for provider[uuid:{0}] must be specified",
    "zh_CN": "服务提供器[uuid:{0}]的网络服务必须被指定",
    "arguments": [
      "puuid"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "cannot find network service provider[uuid:%s] or it provides no services",
    "en_US": "cannot find network service provider[uuid:{0}] or it provides no services",
    "zh_CN": "无法找到网络服务提供器[uuid:{0}]或它没有提供任何服务",
    "arguments": [
      "puuid"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "network service provider[uuid:%s] doesn\u0027t provide services%s",
    "en_US": "network service provider[uuid:{0}] doesn\u0027t provide services{1}",
    "zh_CN": "网络服务提供器[uuid:{0}]无法提供服务{1}",
    "arguments": [
      "puuid",
      "notSupported"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "there has been a network service[%s] attached to L3 network[uuid:%s]",
    "en_US": "there has been a network service[{0}] attached to L3 network[uuid:{1}]",
    "zh_CN": "已经有一个网络服务[{0}]被挂载到L3网络[uuid:{1}]",
    "arguments": [
      "type",
      "msg.getL3NetworkUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "L3Network[uuid:%s] doesn\u0027t have network service[type:%s] enabled or no provider provides this network service",
    "en_US": "L3Network[uuid:{0}] doesn\u0027t have network service[type:{1}] enabled or no provider provides this network service",
    "zh_CN": "L3网络[uuid:{0}]上没有网络服务[type:{1}]被启用或没有服务提供器提供该网络服务",
    "arguments": [
      "l3NetworkUuid",
      "serviceType"
    ],
    "line": 342,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java"
  },
  {
    "raw": "either eipUuid or vipUuid must be set",
    "en_US": "either eipUuid or vipUuid must be set",
    "zh_CN": "eipUuid或vipUuid必须有一个被指定",
    "arguments": [],
    "line": 82,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] is not in state of Enabled, cannot get attachable vm nic",
    "en_US": "eip[uuid:{0}] is not in state of Enabled, cannot get attachable vm nic",
    "zh_CN": "eip[uuid:{0}]没有被启用，无法获取可挂载的虚拟机网卡",
    "arguments": [
      "msg.getEipUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "ip [uuid:%s] is attached to vm nic [%s]",
    "en_US": "ip [uuid:{0}] is attached to vm nic [{1}]",
    "zh_CN": "IP地址[uuid:{0}]已经绑定到网卡[{1}]",
    "arguments": [
      "guestIpUuid",
      "vmNicUuid"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] has attached to another vm nic[uuid:%s], can\u0027t attach again",
    "en_US": "eip[uuid:{0}] has attached to another vm nic[uuid:{1}], can\u0027t attach again",
    "zh_CN": "eip[uuid:{0}]已经被挂载到另外一台虚拟机网卡[uuid:{1}]，无法再次挂载",
    "arguments": [
      "msg.getEipUuid()",
      "vmNicUuid"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid: %s] can only be attached when state is %s, current state is %s",
    "en_US": "eip[uuid: {0}] can only be attached when state is {1}, current state is {2}",
    "zh_CN": "eip[uuid:{0}]只有在状态(state)为{1}的情况下可以被挂载，当前状态是{2}",
    "arguments": [
      "msg.getEipUuid()",
      "EipState.Enabled",
      "state"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of EIP[uuid:%s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of EIP[uuid:{1}] are the same network",
    "zh_CN": "虚拟机网卡[uuid:{0}]的客户L3网络，和EIP[uuid:{1}]的虚拟ip L3网络是同一个网络",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getEipUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "Ip address [uuid:%s] is not belonged to nic [uuid:%s]",
    "en_US": "Ip address [uuid:{0}] is not belonged to nic [uuid:{1}]",
    "zh_CN": "IP地址[uuid:{0}]没有绑定到网卡[uuid:{1}]",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getVmNicUuid()"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] has not attached to any vm nic",
    "en_US": "eip[uuid:{0}] has not attached to any vm nic",
    "zh_CN": "eip[uuid:{0}]还没有被挂载到任意虚拟机网卡",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 180,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip ipVersion [%d] is different from guestIp ipVersion [%d].",
    "en_US": "vip ipVersion [{0}] is different from guestIp ipVersion [{1}].",
    "zh_CN": "虚拟IP的协议号[{0}]和网卡的IP协议号[{1}]不同",
    "arguments": [
      "vipIp.getIpVersion()",
      "guestIp.getIpVersion()"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "Vip[%s] is in the guest ip range [%s, %s]",
    "en_US": "Vip[{0}] is in the guest ip range [{1}, {2}]",
    "zh_CN": "虚拟IP[{0}]和网卡的IP不能在相同地址段[{1}-{2}]",
    "arguments": [
      "vipIp.getIp()",
      "guestRange.getStartIp()",
      "guestRange.getEndIp()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] that the EIP is about to attach is already on the public network[uuid:%s] from which the vip[uuid:%s, name:%s, ip:%s] comes",
    "en_US": "the vm[uuid:{0}] that the EIP is about to attach is already on the public network[uuid:{1}] from which the vip[uuid:{2}, name:{3}, ip:{4}] comes",
    "zh_CN": "EIP将要挂载到的虚拟机[uuid:{0}]已经处于公共网络[uuid:{1}]上，该网络上已有vip[uuid:{2}, name:{3}, ip:{4}]",
    "arguments": [
      "vmUuid",
      "vip.getL3NetworkUuid()",
      "vip.getUuid()",
      "vip.getName()",
      "vip.getIp()"
    ],
    "line": 230,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip[uuid:%s] has been occupied other network service entity[%s]",
    "en_US": "vip[uuid:{0}] has been occupied other network service entity[{1}]",
    "zh_CN": "vip[uuid:{0}]已经被其他网络服务实体[{1}]占用",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 241,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip[uuid:%s] is not in state[%s], current state is %s",
    "en_US": "vip[uuid:{0}] is not in state[{1}], current state is {2}",
    "zh_CN": "vip[uuid:{0}]不处于状态[{1}]中，当前状态[{2}]",
    "arguments": [
      "msg.getVipUuid()",
      "VipState.Enabled",
      "vip.getState()"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vm state[%s] is not allowed to operate eip, maybe you should wait the vm process complete",
    "en_US": "vm state[{0}] is not allowed to operate eip, maybe you should wait the vm process complete",
    "zh_CN": "云主机状态[{0}]不允许进行弹性IP操作，你可能需要等待云主机操作完成",
    "arguments": [
      "state.toString()"
    ],
    "line": 281,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "cannot find Eip guest ip: %s in vmNic ips :%s",
    "en_US": "cannot find Eip guest ip: {0} in vmNic ips :{1}",
    "zh_CN": "",
    "arguments": [
      "eip.getGuestIp()",
      "nicIps"
    ],
    "line": 944,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipManagerImpl.java"
  },
  {
    "raw": "unable to attach the L3 network[uuid:%s, name:%s] to the vm[uuid:%s, name:%s], because the L3 network is providing EIP to one of the vm\u0027s nic",
    "en_US": "unable to attach the L3 network[uuid:{0}, name:{1}] to the vm[uuid:{2}, name:{3}], because the L3 network is providing EIP to one of the vm\u0027s nic",
    "zh_CN": "无法将L3网络[uuid:{0}, name:{1}]挂载到虚拟机[uuid:{2}, name:{3}]，因为L3网络正在为虚拟机上的一块网卡提供EIP",
    "arguments": [
      "l3.getUuid()",
      "l3.getName()",
      "vm.getUuid()",
      "vm.getName()"
    ],
    "line": 1305,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipManagerImpl.java"
  },
  {
    "raw": "Session/account uuid is not valid.",
    "en_US": "Session/account uuid is not valid.",
    "zh_CN": "",
    "arguments": [],
    "line": 39,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java"
  },
  {
    "raw": "the account[uuid:%s] has no access to the resource[uuid:%s, type:L3NetworkVO]",
    "en_US": "the account[uuid:{0}] has no access to the resource[uuid:{1}, type:L3NetworkVO]",
    "zh_CN": "",
    "arguments": [
      "accountUuid",
      "msg.getL3NetworkUuid()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java"
  },
  {
    "raw": "l3 network uuid cannot be null",
    "en_US": "l3 network uuid cannot be null",
    "zh_CN": "L3网络的uuid不能为空",
    "arguments": [],
    "line": 712,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "Cannot find DhcpIp for l3 network[uuid:%s]",
    "en_US": "Cannot find DhcpIp for l3 network[uuid:{0}]",
    "zh_CN": "无法为L3网络[uuid:{0}]找到DHCP IP",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 728,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "L3 network[uuid:%s] does not have any iprange",
    "en_US": "L3 network[uuid:{0}] does not have any iprange",
    "zh_CN": "三层网络[{0}]没有配置ip段",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 823,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "cannot configure DHCP for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure DHCP for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为目标物理机[uuid:{1}]上的虚拟机[uuid:{0}]配置DHCP",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 1089,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is not a IPv6 address",
    "en_US": "DHCP server ip [{0}] is not a IPv6 address",
    "zh_CN": "DHCP服务器地址[{0}]不是一个正确的IPv6地址",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1959,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is not in the cidr [%s]",
    "en_US": "DHCP server ip [{0}] is not in the cidr [{1}]",
    "zh_CN": "DHCP服务器地址[{0}]不在网络段[{1}]的范围内",
    "arguments": [
      "dhcpServerIp",
      "inv.getNetworkCidr()"
    ],
    "line": 1955,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is not a IPv4 address",
    "en_US": "DHCP server ip [{0}] is not a IPv4 address",
    "zh_CN": "DHCP服务器地址[{0}]不是一个正确的IPv4地址",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1951,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is already existed in l3 network [%s]",
    "en_US": "DHCP server ip [{0}] is already existed in l3 network [{1}]",
    "zh_CN": "三层网络[{1}]已经配置了DHCP服务器地址[{0}]",
    "arguments": [
      "IPv6NetworkUtils.ipv6TagValueToAddress(oldDhcpServer)",
      "inv.getL3NetworkUuid()"
    ],
    "line": 1970,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] can not be equaled to gateway ip",
    "en_US": "DHCP server ip [{0}] can not be equaled to gateway ip",
    "zh_CN": "DHCP服务器地址[{0}]不能等于网关地址",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1975,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] can not be configured to system l3",
    "en_US": "DHCP server ip [{0}] can not be configured to system l3",
    "zh_CN": "系统网络不能配置DHCP服务器地址[{0}]",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1981,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "L2Network where vip\u0027s L3Network based hasn\u0027t attached the cluster where vmNic[uuid:%s] located",
    "en_US": "L2Network where vip\u0027s L3Network based hasn\u0027t attached the cluster where vmNic[uuid:{0}] located",
    "zh_CN": "基于虚拟IP三层网络的二层网络没有绑定到虚拟机网卡所在的集群",
    "arguments": [
      "vmNicUuid"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java"
  },
  {
    "raw": "unable to apply the EIP operation for the the vm[uuid:%s, state:%s], because cannot find the VM\u0027s hostUUid",
    "en_US": "unable to apply the EIP operation for the the vm[uuid:{0}, state:{1}], because cannot find the VM\u0027s hostUUid",
    "zh_CN": "无法为虚拟机[uuid:{0}, state:{1}]应用EIP操作，因为无法找到该虚拟机的物理机uuid(hostUuid)",
    "arguments": [
      "vmUuid",
      "vm.getState()"
    ],
    "line": 573,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipBackend.java"
  },
  {
    "raw": "host[uuid:%s] is not connected",
    "en_US": "host[uuid:{0}] is not connected",
    "zh_CN": "物理机[uuid:{0}]未连接",
    "arguments": [
      "struct.getHostUuid()"
    ],
    "line": 353,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatUserdataBackend.java"
  },
  {
    "raw": "invalid health target[%s], the format is targetCheckProtocol:port, for example, tcp:default",
    "en_US": "invalid health target[{0}], the format is targetCheckProtocol:port, for example, tcp:default",
    "zh_CN": "无效的健康检查目标[{0}]，格式为[目标检查协议(targetCheckProtocol):端口(port)], 例如[tcp:default]",
    "arguments": [
      "target"
    ],
    "line": 672,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the access control list group[%s] is being used by the load balancer listeners[%s]",
    "en_US": "the access control list group[{0}] is being used by the load balancer listeners[{1}]",
    "zh_CN": "访问控制组[{0}]正在被监听器[{1}]使用",
    "arguments": [
      "msg.getUuid()",
      "refs"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "operation failure, not support the ip version %d",
    "en_US": "operation failure, not support the ip version {0}",
    "zh_CN": "操作失败，不支持IPv{0}",
    "arguments": [
      "ipVer"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "operation failure, duplicate/overlap ip entry in %s of accesscontrol list group:%s",
    "en_US": "operation failure, duplicate/overlap ip entry in {0} of accesscontrol list group:{1}",
    "zh_CN": "操作失败，在访问控制组：{1}中有重复/重叠ip{0}",
    "arguments": [
      "ips",
      "acl.getUuid()"
    ],
    "line": 209,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "operation failure, ip format only supports ip/iprange/cidr, but find %s",
    "en_US": "operation failure, ip format only supports ip/iprange/cidr, but find {0}",
    "zh_CN": "操作失败，只支持IP地址/IP段/IP网络格式的参数，不支持{0}",
    "arguments": [
      "ips"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "ip range[%s, %s] is overlap with start ip:%s, end ip: %s of access-control-list group:%s",
    "en_US": "ip range[{0}, {1}] is overlap with start ip:{2}, end ip: {3} of access-control-list group:{4}",
    "zh_CN": "ip段[{0}, {1}]和访问控制列表组：{4}中的ip段[{2},{3}]重叠",
    "arguments": [
      "startIp",
      "endIp",
      "NetworkUtils.longToIpv4String(r.lowerEndpoint())",
      "NetworkUtils.longToIpv4String(r.upperEndpoint())",
      "acl.getUuid()"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t attach the type access-control-list group[%s] whose ip version is different with LoadBalancer[%s]",
    "en_US": "Can\u0027t attach the type access-control-list group[{0}] whose ip version is different with LoadBalancer[{1}]",
    "zh_CN": "负载均衡器[{1}]不能添加IP版本不一致的访问控制列表组[{0}]",
    "arguments": [
      "aclUuids",
      "lbUuid"
    ],
    "line": 242,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[uuid:%s] are already on the load balancer listener[uuid:%s]",
    "en_US": "the access-control-list groups[uuid:{0}] are already on the load balancer listener[uuid:{1}]",
    "zh_CN": "负载均衡监听器[uuid:{1}]已经添加了访问控制列表组[uuid:{0}]",
    "arguments": [
      "existingAcls",
      "msg.getListenerUuid()"
    ],
    "line": 302,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the load balancer listener[uuid:%s] just only attach the %s type access-control-list group",
    "en_US": "the load balancer listener[uuid:{0}] just only attach the {1} type access-control-list group",
    "zh_CN": "负载均衡监听器[uuid:{0}]只能以{1}方式添加访问控制列表组",
    "arguments": [
      "msg.getListenerUuid()",
      "type.toString()"
    ],
    "line": 308,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the load balancer listener[uuid:%s] can\u0027t  attach more than %d access-control-list groups",
    "en_US": "the load balancer listener[uuid:{0}] can\u0027t  attach more than {1} access-control-list groups",
    "zh_CN": "负载均衡监听器[uuid:{0}]最多只能添加{1}个访问控制列表组",
    "arguments": [
      "msg.getListenerUuid()",
      "LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "L3 networks[uuids:%s] of the vm nics has no network service[%s] enabled",
    "en_US": "L3 networks[uuids:{0}] of the vm nics has no network service[{1}] enabled",
    "zh_CN": "虚拟机网卡的三层网络没有可用的网络服务",
    "arguments": [
      "l3Uuids",
      "LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING"
    ],
    "line": 339,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the vm nics[uuid:%s] are already on the load balancer listener[uuid:%s]",
    "en_US": "the vm nics[uuid:{0}] are already on the load balancer listener[uuid:{1}]",
    "zh_CN": "虚拟机网卡[uuid:{0}]已经处于负载均衡监听器[uuid:{1}]上",
    "arguments": [
      "existingNics",
      "msg.getListenerUuid()"
    ],
    "line": 349,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the listener with protocol [%s] doesn\u0027t support this health check:[%s]",
    "en_US": "the listener with protocol [{0}] doesn\u0027t support this health check:[{1}]",
    "zh_CN": "[{0}]类型的监听器不支持此类型[{1}]的健康检查",
    "arguments": [
      "listenerVO.getProtocol()",
      "msg.getHealthCheckProtocol()"
    ],
    "line": 678,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the http health check protocol must be specified its healthy checking parameter healthCheckURI",
    "en_US": "the http health check protocol must be specified its healthy checking parameter healthCheckURI",
    "zh_CN": "http类型的健康检查必须提供healthCheckURI参数",
    "arguments": [],
    "line": 652,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the http health check protocol\u0027s expecting code [%s] is invalidate",
    "en_US": "the http health check protocol\u0027s expecting code [{0}] is invalidate",
    "zh_CN": "http健康检查协议的expeting-code参数非法",
    "arguments": [
      "msg.getHealthCheckHttpCode()"
    ],
    "line": 659,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t attach more than %d access-control-list groups to a listener",
    "en_US": "Can\u0027t attach more than {0} access-control-list groups to a listener",
    "zh_CN": "一个监听器加载的访问控制组不能超过{0}",
    "arguments": [
      "LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)"
    ],
    "line": 457,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid max connection[%s], %s is larger than upper threshold %d",
    "en_US": "invalid max connection[{0}], {1} is larger than upper threshold {2}",
    "zh_CN": "非法的最大连接数标签[{0}]，因为其值{1}大于上限值{2}",
    "arguments": [
      "tag",
      "s",
      "LoadBalancerConstants.MAX_CONNECTION_LIMIT"
    ],
    "line": 537,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "conflict loadBalancerPort[%s], a listener[uuid:%s] has used that port",
    "en_US": "conflict loadBalancerPort[{0}], a listener[uuid:{1}] has used that port",
    "zh_CN": "冲突的负载均衡器端口(loadBalancerPort)[{0}]，一个监听器[uuid:{1}]已经使用了该端口",
    "arguments": [
      "msg.getLoadBalancerPort()",
      "luuid"
    ],
    "line": 559,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "udp port 53 is used by dns daemon",
    "en_US": "udp port 53 is used by dns daemon",
    "zh_CN": "udp端口53已经被dns进程使用",
    "arguments": [],
    "line": 564,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "tcp port 22, 7272 is used by vrouter",
    "en_US": "tcp port 22, 7272 is used by vrouter",
    "zh_CN": "tcp端口22,7272已经被vrouter管理进程进程使用",
    "arguments": [],
    "line": 577,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadbalancer listener with type %s does not need certificate",
    "en_US": "loadbalancer listener with type {0} does not need certificate",
    "zh_CN": "[{0}]类型证书不需要证书",
    "arguments": [
      "vo.getProtocol()"
    ],
    "line": 604,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadbalancer listener [uuid:%s] already had certificate[uuid:%s]",
    "en_US": "loadbalancer listener [uuid:{0}] already had certificate[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getListenerUuid()",
      "msg.getCertificateUuid()"
    ],
    "line": 608,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "certificate [uuid:%s] is not added to loadbalancer listener [uuid:%s]",
    "en_US": "certificate [uuid:{0}] is not added to loadbalancer listener [uuid:{1}]",
    "zh_CN": "证书[uuid:{0}]未添加到负载均衡监听器[uuid:{1}]",
    "arguments": [
      "msg.getCertificateUuid()",
      "msg.getListenerUuid()"
    ],
    "line": 618,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "healthCheck target [%s] error, it must be \u0027default\u0027 or number between[1~65535] ",
    "en_US": "healthCheck target [{0}] error, it must be \u0027default\u0027 or number between[1~65535] ",
    "zh_CN": "健康检查端口[{0}]错误,值必须是\u0027default\u0027或者数字[1~65535]",
    "arguments": [
      "target"
    ],
    "line": 633,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the http health check protocol must be specified its healthy checking parameters including healthCheckMethod and healthCheckURI",
    "en_US": "the http health check protocol must be specified its healthy checking parameters including healthCheckMethod and healthCheckURI",
    "zh_CN": "http类型的健康检查协议必须提供healthCheckMethod和healthCheckURI参数",
    "arguments": [],
    "line": 683,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the L3 network of vm nic[uuid:%s] doesn\u0027t have load balancer service enabled",
    "en_US": "the L3 network of vm nic[uuid:{0}] doesn\u0027t have load balancer service enabled",
    "zh_CN": "虚拟机网卡[uuid:{0}]的L3网络没有启用负载均衡服务",
    "arguments": [
      "msg.getVmNicUuids().get(0)"
    ],
    "line": 1113,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "service provider type mismatching. The load balancer[uuid:%s] is provided by the service provider[type:%s], but the L3 network of vm nic[uuid:%s] is enabled with the service provider[type: %s]",
    "en_US": "service provider type mismatching. The load balancer[uuid:{0}] is provided by the service provider[type:{1}], but the L3 network of vm nic[uuid:{2}] is enabled with the service provider[type: {3}]",
    "zh_CN": "网络服务提供器的类型不匹配。负载均衡器[uuid:{0}]由服务提供器[type:{1}]提供，但虚拟机网卡[uuid:{2}]的L3网络启用服务器类型为[type: {3}]",
    "arguments": [
      "self.getUuid()",
      "self.getProviderType()",
      "msg.getVmNicUuids().get(0)",
      "providerType"
    ],
    "line": 1140,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "invalid health checking parameters[%s], the format is method:URI:code, for example, GET:/index.html:http_2xx",
    "en_US": "invalid health checking parameters[{0}], the format is method:URI:code, for example, GET:/index.html:http_2xx",
    "zh_CN": "无效的健康检查参数[{0}]，正确格式：method:URI:code，例如 GET:/index.html:http_2xx",
    "arguments": [
      "param"
    ],
    "line": 1670,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "cannot find the load balancer[uuid:%s]",
    "en_US": "cannot find the load balancer[uuid:{0}]",
    "zh_CN": "无法找到负载均衡器[uuid:{0}]",
    "arguments": [
      "msg.getLoadBalancerUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "cannot delete the system tag[%s]. The load balancer plugin relies on it, you can only update it",
    "en_US": "cannot delete the system tag[{0}]. The load balancer plugin relies on it, you can only update it",
    "zh_CN": "无法删除系统标签[{0}]。负载均衡器插件依赖于该标签，该标签只能被更新",
    "arguments": [
      "tag.getTag()"
    ],
    "line": 381,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "nic[uuid:%s] not found. Please correct your system tag[%s] of loadbalancer",
    "en_US": "nic[uuid:{0}] not found. Please correct your system tag[{1}] of loadbalancer",
    "zh_CN": "找不到网卡[uuid:{0}]。请检查负载均衡器的系统标签[{1}]",
    "arguments": [
      "nicUuid",
      "systemTag"
    ],
    "line": 399,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balancer weight[%s], %s is not a number",
    "en_US": "invalid balancer weight[{0}], {1} is not a number",
    "zh_CN": "无效的权重值[{0}], {1}不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 411,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balancer weight[%s], %s is not in the range [%d, %d]",
    "en_US": "invalid balancer weight[{0}], {1} is not in the range [{2}, {3}]",
    "zh_CN": "无效的权重值[{0}], {1}不在允许范围[{2}, {3}]中",
    "arguments": [
      "systemTag",
      "s",
      "LoadBalancerConstants.BALANCER_WEIGHT_MIN",
      "LoadBalancerConstants.BALANCER_WEIGHT_MAX"
    ],
    "line": 407,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balance algorithm[%s], valid algorithms are %s",
    "en_US": "invalid balance algorithm[{0}], valid algorithms are {1}",
    "zh_CN": "无效的均衡算法[{0}]，有效的为[{1}]",
    "arguments": [
      "algorithm",
      "LoadBalancerConstants.BALANCE_ALGORITHMS"
    ],
    "line": 423,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid unhealthy threshold[%s], %s is not a number",
    "en_US": "invalid unhealthy threshold[{0}], {1} is not a number",
    "zh_CN": "无效的不健康阈值[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 497,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid healthy threshold[%s], %s is not a number",
    "en_US": "invalid healthy threshold[{0}], {1} is not a number",
    "zh_CN": "无效的健康阈值[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 511,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid healthy timeout[%s], %s is not a number",
    "en_US": "invalid healthy timeout[{0}], {1} is not a number",
    "zh_CN": "无效的健康超时[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 525,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid connection idle timeout[%s], %s is not a number",
    "en_US": "invalid connection idle timeout[{0}], {1} is not a number",
    "zh_CN": "无效的连接空闲超时[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 539,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid health check interval[%s], %s is not a number",
    "en_US": "invalid health check interval[{0}], {1} is not a number",
    "zh_CN": "无效的健康检查间隔[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 553,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid max connection[%s], %s is not a number",
    "en_US": "invalid max connection[{0}], {1} is not a number",
    "zh_CN": "无效的最大连接[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 567,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid health target[%s], the target checking protocol[%s] is invalid, valid protocols are %s",
    "en_US": "invalid health target[{0}], the target checking protocol[{1}] is invalid, valid protocols are {2}",
    "zh_CN": "无效的健康检查目标[{0}]，目标检查协议无效[{1}]，有效的为[{2}]",
    "arguments": [
      "systemTag",
      "protocol",
      "LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS"
    ],
    "line": 585,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid invalid health target[%s], port[%s] is not a number",
    "en_US": "invalid invalid health target[{0}], port[{1}] is not a number",
    "zh_CN": "无效的健康检查目标[{0}]，端口[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "port"
    ],
    "line": 597,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid invalid health target[%s], port[%s] is not in the range of [1, 65535]",
    "en_US": "invalid invalid health target[{0}], port[{1}] is not in the range of [1, 65535]",
    "zh_CN": "无效的无效健康检查目标[{0}]，端口[{1}]不在范围[1, 65535]内",
    "arguments": [
      "systemTag",
      "port"
    ],
    "line": 594,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balancer weight for nic:%s, %d is not in the range [%d, %d]",
    "en_US": "invalid balancer weight for nic:{0}, {1} is not in the range [{2}, {3}]",
    "zh_CN": "无效的网卡:{0}权重值{1}，不在有效范围[{2}, {3}]内",
    "arguments": [
      "nicUuid",
      "weight",
      "LoadBalancerConstants.BALANCER_WEIGHT_MIN",
      "LoadBalancerConstants.BALANCER_WEIGHT_MAX"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerWeightOperator.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of vip[uuid: %s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of vip[uuid: {1}] are the same network",
    "zh_CN": "虚拟机网卡[uuid:{0}]的客户L3网络和虚拟IP[uuid:{1}]的虚拟IP L3网络是同一个网络",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getVipUuid()"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "the vip[uuid:%s] has been occupied other network service entity[%s]",
    "en_US": "the vip[uuid:{0}] has been occupied other network service entity[{1}]",
    "zh_CN": "虚拟IP[uuid:{0}]已经被其他网络服务占用",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "Port forwarding rule[uuid:%s] is not in state of Enabled, current state is %s",
    "en_US": "Port forwarding rule[uuid:{0}] is not in state of Enabled, current state is {1}",
    "zh_CN": "端口转发规则[uuid:{0}]未启用，当前状态[{1}]",
    "arguments": [
      "msg.getRuleUuid()",
      "state"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule rule[uuid:%s] has not been attached to any vm nic, can\u0027t detach",
    "en_US": "port forwarding rule rule[uuid:{0}] has not been attached to any vm nic, can\u0027t detach",
    "zh_CN": "端口转发规则[uuid:{0}]尚未被挂载到任何虚拟机网卡，无法卸载",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule[uuid:%s] has been attached to vm nic[uuid:%s], can\u0027t attach again",
    "en_US": "port forwarding rule[uuid:{0}] has been attached to vm nic[uuid:{1}], can\u0027t attach again",
    "zh_CN": "端口转发规则[uuid:{0}]已经被挂载到虚拟机网卡[uuid:{1}]，无法再次挂载",
    "arguments": [
      "msg.getRuleUuid()",
      "vmNicUuid"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule[uuid:%s] is not in state of Enabled,  current state is %s. A rule can only be attached when its state is Enabled",
    "en_US": "port forwarding rule[uuid:{0}] is not in state of Enabled,  current state is {1}. A rule can only be attached when its state is Enabled",
    "zh_CN": "端口转发规则[uuid:{0}]没有启用，当前状态为{1}。一个规则只能在启用时被挂载",
    "arguments": [
      "msg.getRuleUuid()",
      "state"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of port forwarding rule[uuid:%s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of port forwarding rule[uuid:{1}] are the same network",
    "zh_CN": "虚拟机网卡[uuid:{0}]的客户L3网络和端口转发规则[uuid:{1}]的VIP L3网络是同一个网络",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getRuleUuid()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "for range port forwarding, the port range size must match; vip range[%s, %s]\u0027s size doesn\u0027t match range[%s, %s]\u0027s size",
    "en_US": "for range port forwarding, the port range size must match; vip range[{0}, {1}]\u0027s size doesn\u0027t match range[{2}, {3}]\u0027s size",
    "zh_CN": "对于范围端口转发，端口范围大小必须匹配；VIP范围[{0}, {1}]的大小不匹配范围[{2}, {3}]的大小",
    "arguments": [
      "msg.getVipPortStart()",
      "msg.getVipPortEnd()",
      "msg.getPrivatePortStart()",
      "msg.getPrivatePortEnd()"
    ],
    "line": 166,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "invalid CIDR[%s]",
    "en_US": "invalid CIDR[{0}]",
    "zh_CN": "无效的CIDR[{0}]",
    "arguments": [
      "msg.getAllowedCidr()"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "vip port range[vipStartPort:%s, vipEndPort:%s] overlaps with rule[uuid:%s, vipStartPort:%s, vipEndPort:%s]",
    "en_US": "vip port range[vipStartPort:{0}, vipEndPort:{1}] overlaps with rule[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]",
    "zh_CN": "虚拟IP（vip）端口范围[vipStartPort:{0}, vipEndPort:{1}]与规则[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]重叠",
    "arguments": [
      "vipStart",
      "vipEnd",
      "vo.getUuid()",
      "vo.getVipPortStart()",
      "vo.getVipPortEnd()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "the VM[name:%s uuid:%s] already has port forwarding rules that have different VIPs than the one[uuid:%s]",
    "en_US": "the VM[name:{0} uuid:{1}] already has port forwarding rules that have different VIPs than the one[uuid:{2}]",
    "zh_CN": "虚拟机[name:{0} uuid:{1}]已经有端口转发规则，且与[uuid:{2}]有不同的VIPs",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "vipUuid"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "unsupported ip allocation strategy[%s]",
    "en_US": "unsupported ip allocation strategy[{0}]",
    "zh_CN": "不支持的ip分配策略[{0}]",
    "arguments": [
      "msg.getAllocatorStrategy()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "requiredIp[%s] is not in valid IPv6 mediaType",
    "en_US": "requiredIp[{0}] is not in valid IPv6 mediaType",
    "zh_CN": "请求的ip[{0}]不是有效的IPv6地址",
    "arguments": [
      "msg.getRequiredIp()"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "requiredIp[%s] is not in valid IPv4 mediaType",
    "en_US": "requiredIp[{0}] is not in valid IPv4 mediaType",
    "zh_CN": "请求的ip[{0}]不是有效的IPv4地址",
    "arguments": [
      "msg.getRequiredIp()"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "there is already a vip[%s] on l3Network[uuid:%s]",
    "en_US": "there is already a vip[{0}] on l3Network[uuid:{1}]",
    "zh_CN": "已有一个vip[{0}]在L3网络[uuid:{1}]上",
    "arguments": [
      "msg.getRequiredIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "service provider of the vip[uuid:%s, name:%s, ip: %s] has been set to %s",
    "en_US": "service provider of the vip[uuid:{0}, name:{1}, ip: {2}] has been set to {3}",
    "zh_CN": "vip[uuid:{0}, name:{1}, ip: {2}]的服务提供器已经被设置成[{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getIp()",
      "self.getServiceProvider()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipBase.java"
  },
  {
    "raw": "Vip [uuid %s, ip %s] of router public interface can not be deleted",
    "en_US": "Vip [uuid {0}, ip {1}] of router public interface can not be deleted",
    "zh_CN": "路由公共接口的虚拟IP[uuid {0}, ip {1}]不能删除",
    "arguments": [
      "self.getUuid()",
      "self.getIp()"
    ],
    "line": 712,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipBase.java"
  },
  {
    "raw": "VipQos for ipv6 wil be added soon",
    "en_US": "VipQos for ipv6 wil be added soon",
    "zh_CN": "",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] already existed",
    "en_US": "VipQos for Vip [uuid: {0}] already existed",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos已经存在了",
    "arguments": [
      "msg.getVipUuid()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] port %s already existed",
    "en_US": "VipQos for Vip [uuid: {0}] port {1} already existed",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos端口{1}已经存在",
    "arguments": [
      "msg.getVipUuid()",
      "Integer.toString(msg.getPort())"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "SetVipQos MUST set InboundBandwidth or OutboundBandwidth",
    "en_US": "SetVipQos MUST set InboundBandwidth or OutboundBandwidth",
    "zh_CN": "设置虚拟IP的Qos是必须设置上行网络带宽和下行网络带宽",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "Cannot set Qos for this Vip. Not all peer l3networks provide VipQos service.",
    "en_US": "Cannot set Qos for this Vip. Not all peer l3networks provide VipQos service.",
    "zh_CN": "",
    "arguments": [],
    "line": 67,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] does not exist",
    "en_US": "VipQos for Vip [uuid: {0}] does not exist",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] port %s does not exist",
    "en_US": "VipQos for Vip [uuid: {0}] port {1} does not exist",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos端口{1}不存在",
    "arguments": [
      "msg.getUuid()",
      "Integer.toString(msg.getPort())"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "Can not find VipQos backend for Vip [uuid:%s]",
    "en_US": "Can not find VipQos backend for Vip [uuid:{0}]",
    "zh_CN": "未找到虚拟IP的Qos后端",
    "arguments": [
      "vipUuid"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosManagerImpl.java"
  },
  {
    "raw": "operation error, vip %s has not bind to vm",
    "en_US": "operation error, vip {0} has not bind to vm",
    "zh_CN": "操作失败，虚拟IP{0}没有绑定虚拟机",
    "arguments": [
      "hostUuid"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/flat/FlatVipQosBackend.java"
  },
  {
    "raw": "the virtual router[name:%s, uuid:%s, current state:%s] is not running,and cannot perform required operation. Please retry your operation later once it is running",
    "en_US": "the virtual router[name:{0}, uuid:{1}, current state:{2}] is not running,and cannot perform required operation. Please retry your operation later once it is running",
    "zh_CN": "云路由[name:{0}, uuid:{1}, current state:{2}]没有运行，无法执行请求的操作。请在其启动后重试",
    "arguments": [
      "self.getName()",
      "self.getUuid()",
      "self.getState()"
    ],
    "line": 277,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "virtual router[uuid:%s] is in status of %s that cannot make http call to %s",
    "en_US": "virtual router[uuid:{0}] is in status of {1} that cannot make http call to {2}",
    "zh_CN": "云路由[uuid:{0}]处于状态{1}中，无法向{2}发送http调用",
    "arguments": [
      "self.getUuid()",
      "getSelf().getStatus()",
      "msg.getPath()"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "virtual router[uuid:%s] has no management nic that cannot make http call to %s",
    "en_US": "virtual router[uuid:{0}] has no management nic that cannot make http call to {1}",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "msg.getPath()"
    ],
    "line": 287,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "appliance vm %s reconnect failed",
    "en_US": "appliance vm {0} reconnect failed",
    "zh_CN": "",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 397,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "unable to add nic[ip:%s, mac:%s] to virtual router vm[uuid:%s ip:%s], because %s",
    "en_US": "unable to add nic[ip:{0}, mac:{1}] to virtual router vm[uuid:{2} ip:{3}], because {4}",
    "zh_CN": "不能添加网卡[ip:{0}, mac:{1}]到虚拟路由设备[uuid:{2} ip:{3}]，因为{4}",
    "arguments": [
      "info.getIp()",
      "info.getMac()",
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()"
    ],
    "line": 473,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "unable to detach nic[%s] from virtual router vm[uuid:%s ip:%s], because %s",
    "en_US": "unable to detach nic[{0}] from virtual router vm[uuid:{1} ip:{2}], because {3}",
    "zh_CN": "无法从云路由设备[uuid:{1} ip:{2}]上卸载网卡[{0}]，错误细节: {3}",
    "arguments": [
      "info",
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()"
    ],
    "line": 750,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "image[uuid:%s]\u0027s mediaType is %s, the mediaType of a virtual router image must be %s",
    "en_US": "image[uuid:{0}]\u0027s mediaType is {1}, the mediaType of a virtual router image must be {2}",
    "zh_CN": "镜像[uuid:{0}]的mediaType为{1}，云路由的mediaType必须为{2}",
    "arguments": [
      "msg.getImageUuid()",
      "type",
      "ImageMediaType.RootVolumeTemplate"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of format %s, cannot be used for virtual router",
    "en_US": "image[uuid:{0}] is of format {1}, cannot be used for virtual router",
    "zh_CN": "镜像[uuid:{0}]的格式为{1}，无法被用于云路由",
    "arguments": [
      "msg.getImageUuid()",
      "format"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "management network[uuid:%s] is not in the same zone[uuid:%s] this offering is going to create",
    "en_US": "management network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create",
    "zh_CN": "管理网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "public network[uuid:%s] is not in the same zone[uuid:%s] this offering is going to create",
    "en_US": "public network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create",
    "zh_CN": "公共网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] has the SNAT service enabled, it cannot be used as a public network",
    "en_US": "the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a public network",
    "zh_CN": "L3网络[uuid: {0}]启用了SNAT服务，无法被用作公共网络",
    "arguments": [
      "msg.getPublicNetworkUuid()"
    ],
    "line": 166,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] has the SNAT service enabled, it cannot be used as a management network",
    "en_US": "the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a management network",
    "zh_CN": "L3网络[uuid: {0}]启用了SNAT服务，无法被用作管理网络",
    "arguments": [
      "msg.getManagementNetworkUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] is same network address with [uuid: %s], it cannot be used for virtual router",
    "en_US": "the L3 network[uuid: {0}] is same network address with [uuid: {1}], it cannot be used for virtual router",
    "zh_CN": "L3网络[uuid: {0}] 和 网络 [uuid: {1}] 具有相同的网络地址，无法被用于云路由",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getPublicNetworkUuid()"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the management network[uuid:%s] doesn\u0027t have any IP range",
    "en_US": "the management network[uuid:{0}] doesn\u0027t have any IP range",
    "zh_CN": "管理网络[uuid:{0}]不包含任何的IP范围",
    "arguments": [
      "managementNetworkUuid"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the management network[uuid:%s, gateway:%s] is not reachable",
    "en_US": "the management network[uuid:{0}, gateway:{1}] is not reachable",
    "zh_CN": "管理网络[uuid:{0}, gateway:{1}]不可抵达",
    "arguments": [
      "managementNetworkUuid",
      "gateway"
    ],
    "line": 200,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "failed to create VirtualRouterBootstrapIso[%s] on kvm host[uuid:%s, ip:%s] for virtual router[uuid:%s], because %s",
    "en_US": "failed to create VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}, ip:{2}] for virtual router[uuid:{3}], because {4}",
    "zh_CN": "创建云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}, ip:{2}]上为云路由[uuid:{3}]执行的，原因为{4}",
    "arguments": [
      "iso.getIsoPath()",
      "vrSpec.getDestHost().getUuid()",
      "vrSpec.getDestHost().getManagementIp()",
      "iso.getVirtualRouterUuid()",
      "rsp.getError()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java"
  },
  {
    "raw": "failed to delete VirtualRouterBootstrapIso[%s] on kvm host[uuid:%s] for virtual router[uuid:%s], because %s",
    "en_US": "failed to delete VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}] for virtual router[uuid:{2}], because {3}",
    "zh_CN": "删除云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}]上为云路由[uuid:{2}]执行的，原因为{3}",
    "arguments": [
      "iso.getIsoPath()",
      "hostUuid",
      "iso.getVirtualRouterUuid()",
      "rsp.getError()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java"
  },
  {
    "raw": "cannot create virtual Router vm while virtual router network overlaps with private network in ip ",
    "en_US": "cannot create virtual Router vm while virtual router network overlaps with private network in ip ",
    "zh_CN": "当云路由规格的网络和私有网络IP范围有重叠时，无法创建云路由设备",
    "arguments": [],
    "line": 280,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "No virtual router instance offering with uuid:%s is found",
    "en_US": "No virtual router instance offering with uuid:{0} is found",
    "zh_CN": "",
    "arguments": [
      "offeringUuid"
    ],
    "line": 585,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "failed tot attach virtual router network services to l3Network[uuid:%s]. When eip is selected, snat must be selected too",
    "en_US": "failed tot attach virtual router network services to l3Network[uuid:{0}]. When eip is selected, snat must be selected too",
    "zh_CN": "挂载虚拟路由网络服务到L3网络[uuid:{0}]失败。选中EIP服务时，SNAT服务也必须被选中",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 1182,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "failed tot attach virtual router network services to l3Network[uuid:%s]. When port forwarding is selected, snat must be selected too",
    "en_US": "failed tot attach virtual router network services to l3Network[uuid:{0}]. When port forwarding is selected, snat must be selected too",
    "zh_CN": "挂载虚拟路由网络服务到L3网络[uuid:{0}]失败。选中端口转发服务时，SNAT服务也必须被选中",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 1186,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "can not detach nic [uuid:%s]",
    "en_US": "can not detach nic [uuid:{0}]",
    "zh_CN": "无法卸载网卡nic[uuid:{0}]",
    "arguments": [
      "toDeleteNics.stream().map( n -\u003e n.getUuid()).collect(Collectors.toList())"
    ],
    "line": 1698,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "unable to add dhcp entries to virtual router vm[uuid:%s ip:%s], because %s, dhcp entry[%s]",
    "en_US": "unable to add dhcp entries to virtual router vm[uuid:{0} ip:{1}], because {2}, dhcp entry[{3}]",
    "zh_CN": "无法向云路由[uuid:{0} ip:{1}]添加DHCP条目，因为{2}，DHCP条目为[{3}]",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()",
      "struct"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java"
  },
  {
    "raw": "unable to program dhcp entries served by virtual router[uuid:%s, ip:%s], %s",
    "en_US": "unable to program dhcp entries served by virtual router[uuid:{0}, ip:{1}], {2}",
    "zh_CN": "无法执行由云路由[uuid:{0}, ip:{1}]提供的DHCP条目{2}.",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "ret.getError()"
    ],
    "line": 208,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java"
  },
  {
    "raw": "virtual router[uuid:%s, ip:%s] failed to configure dns%s for L3Network[uuid:%s, name:%s], %s",
    "en_US": "virtual router[uuid:{0}, ip:{1}] failed to configure dns{2} for L3Network[uuid:{3}, name:{4}], {5}",
    "zh_CN": "云路由[uuid:{0}, ip:{1}]未能为L3网络[uuid:{3}, name:{4}]配置DNS{2}，错误细节: {5}",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "struct",
      "l3.getUuid()",
      "l3.getName()",
      "ret.getError()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterDnsBackend.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to configure dns%s, %s ",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to configure dns{2}, {3} ",
    "zh_CN": "云路由[name: {0}, uuid: {1}]未能配置DNS{2}，错误细节: {3}",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "JSONObjectUtil.toJsonString(dns)",
      "ret.getError()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java"
  },
  {
    "raw": "failed to sync eip on virtual router[uuid:%s], %s",
    "en_US": "failed to sync eip on virtual router[uuid:{0}], {1}",
    "zh_CN": "未能在云路由[uuid:{0}]上同步EIP，错误细节: {1}",
    "arguments": [
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 496,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "failed to create eip[uuid:%s, name:%s, ip:%s] for vm nic[uuid:%s] on virtual router[uuid:%s], %s",
    "en_US": "failed to create eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}",
    "zh_CN": "无法为虚拟机网卡[uuid:{3}]在云路由[uuid:{4}]上创建EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节: {5}",
    "arguments": [
      "struct.getEip().getUuid()",
      "struct.getEip().getName()",
      "struct.getVip().getIp()",
      "struct.getNic().getUuid()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to EIP[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to EIP[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]上为L3网络[uuid:{1}]找到了云路由规格[uuid:{0}]；但是，其公共网络[uuid:{3}]和EIP[uuid:{4}]的公共网络不是同一个L3网络。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该L3网络指定一个特定的云路有规格",
    "arguments": [
      "offering.getUuid()",
      "l3inv.getUuid()",
      "l3inv.getZoneUuid()",
      "struct.getVip().getL3NetworkUuid()",
      "struct.getEip().getUuid()"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "failed to remove eip[uuid:%s, name:%s, ip:%s] for vm nic[uuid:%s] on virtual router[uuid:%s], %s",
    "en_US": "failed to remove eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}",
    "zh_CN": "未能在云路由[uuid:{4}]上为虚拟机网卡[uuid:{3}]移除EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节: {5}",
    "arguments": [
      "struct.getEip().getUuid()",
      "struct.getEip().getName()",
      "struct.getVip().getIp()",
      "struct.getNic().getUuid()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 336,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "new add vm nics[uuids:%s] and attached vmnics are not on the same vrouter, they are on vrouters[uuids:%s]",
    "en_US": "new add vm nics[uuids:{0}] and attached vmnics are not on the same vrouter, they are on vrouters[uuids:{1}]",
    "zh_CN": "新添加的虚拟网卡[uuids:{0}]和绑定虚拟机的网卡没有在一个云路由上，它们分别在云路由[uuids:{1}]上",
    "arguments": [
      "msg.getVmNicUuids()",
      "vrUuids"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "new add vm nics[uuids:%s] and peer l3s[uuids:%s] of loadbalancer[uuid: %s]\u0027s vip are not on the same vrouter, they are on vrouters[uuids:%s]",
    "en_US": "new add vm nics[uuids:{0}] and peer l3s[uuids:{1}] of loadbalancer[uuid: {2}]\u0027s vip are not on the same vrouter, they are on vrouters[uuids:{3}]",
    "zh_CN": "新添加的虚拟机网卡[uuids:{0}]和负载均衡器[uuid: {2}]的弹性IP的三层网络[uuids:{1}]没有在相同的云路由上，它们分别在云路由[uuids:{3}]上",
    "arguments": [
      "msg.getVmNicUuids()",
      "peerL3NetworkUuids",
      "msg.getLoadBalancerUuid()",
      "vrUuids"
    ],
    "line": 182,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "cannot find virtual router for load balancer [uuid:%s]",
    "en_US": "cannot find virtual router for load balancer [uuid:{0}]",
    "zh_CN": "未能为负载均衡器[uuid:{0}]找到云路由",
    "arguments": [
      "struct.getLb().getUuid()"
    ],
    "line": 1318,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to sync snat%s, %s",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to sync snat{2}, {3}",
    "zh_CN": "云路由[name: {0}, uuid: {1}]未能同步SNAT{2}，错误细节: {3}",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "JSONObjectUtil.toJsonString(snatInfo)",
      "ret.getError()"
    ],
    "line": 331,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java"
  },
  {
    "raw": "guest l3Network[uuid:%s, name:%s] needs SNAT service provided by virtual router, but public l3Network[uuid:%s] of virtual router offering[uuid: %s, name:%s] is the same to this guest l3Network",
    "en_US": "guest l3Network[uuid:{0}, name:{1}] needs SNAT service provided by virtual router, but public l3Network[uuid:{2}] of virtual router offering[uuid: {3}, name:{4}] is the same to this guest l3Network",
    "zh_CN": "用户L3网络[uuid:{0}, name:{1}]需要云路由提供的SNAT服务，但是云路由规格[uuid: {3}, name:{4}]的公共L3网络[uuid:{2}]与该客户L3网络相同",
    "arguments": [
      "guestL3.getUuid()",
      "guestL3.getName()",
      "offering.getPublicNetworkUuid()",
      "offering.getUuid()",
      "offering.getName()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java"
  },
  {
    "raw": "failed to create port forwarding rule[vip ip: %s, private ip: %s, vip start port: %s, vip end port: %s, private start port: %s, private end port: %s], because %s",
    "en_US": "failed to create port forwarding rule[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}], because {6}",
    "zh_CN": "无法创建端口转发规则[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}]，错误细节: {6}",
    "arguments": [
      "to.getVipIp()",
      "to.getPrivateIp()",
      "to.getVipPortStart()",
      "to.getVipPortEnd()",
      "to.getPrivatePortStart()",
      "to.getPrivatePortEnd()",
      "ret.getError()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java"
  },
  {
    "raw": "failed to revoke port forwarding rules %s, because %s",
    "en_US": "failed to revoke port forwarding rules {0}, because {1}",
    "zh_CN": "未能解除端口转发规则{0}，原因: {1}",
    "arguments": [
      "JSONObjectUtil.toJsonString(to)",
      "ret.getError()"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to PortForwarding rule[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to PortForwarding rule[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]内为L3网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和端口转发规则[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该L3网络指定一个特定的云路有规格",
    "arguments": [
      "offering.getUuid()",
      "struct.getGuestL3Network().getUuid()",
      "struct.getGuestL3Network().getZoneUuid()",
      "struct.getVip().getL3NetworkUuid()",
      "struct.getRule().getUuid()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "virtual router doesn\u0027t support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule rule has a mismatching range: vip port[%s, %s], private port[%s, %s]",
    "en_US": "virtual router doesn\u0027t support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule rule has a mismatching range: vip port[{0}, {1}], private port[{2}, {3}]",
    "zh_CN": "云路由不支持范围性的端口转发重定向，vipPortStart和privatePortStart必须一致，vipPortEnd和privatePortEnd必须一致，但这条规则有个不匹配的范围: vip端口范围[{0}, {1}]，私有端口范围[{2}, {3}]",
    "arguments": [
      "rule.getVipPortStart()",
      "rule.getVipPortEnd()",
      "rule.getPrivatePortStart()",
      "rule.getPrivatePortEnd()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "failed to add portforwardings on virtual router[uuid:%s], %s",
    "en_US": "failed to add portforwardings on virtual router[uuid:{0}], {1}",
    "zh_CN": "在云路由[uuid:{0}]添加端口转发失败，{1}",
    "arguments": [
      "vrVO.getUuid()",
      "ret.getError()"
    ],
    "line": 402,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "failed to revoke port forwardings on virtual router[uuid:%s], %s",
    "en_US": "failed to revoke port forwardings on virtual router[uuid:{0}], {1}",
    "zh_CN": "取消在云路由[uuid:{0}]上端口转发服务失败，{1}",
    "arguments": [
      "vrVO.getUuid()",
      "ret.getError()"
    ],
    "line": 471,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "failed to sync port forwarding rules served by virtual router[name: %s, uuid: %s], because %s",
    "en_US": "failed to sync port forwarding rules served by virtual router[name: {0}, uuid: {1}], because {2}",
    "zh_CN": "未能同步由云路由[name: {0}, uuid: {1}]提供的端口转发规则，因为: {2}",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to create vip for public ip %s because no ip range for l3NetworkUuid %s",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to create vip for public ip {2} because no ip range for l3NetworkUuid {3}",
    "zh_CN": "虚拟路由[name: {0}, uuid: {1}]为公有IP创建虚拟IP失败，因为三层网络[uuid:{3}]的没有IP段",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "nic.getIp()",
      "nic.getL3NetworkUuid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterCreateVipForPublicIpFlow.java"
  },
  {
    "raw": "failed to remove vip%s, because %s",
    "en_US": "failed to remove vip{0}, because {1}",
    "zh_CN": "未能移除VIP{0}，因为{1}",
    "arguments": [
      "tos",
      "ret.getError()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java"
  },
  {
    "raw": "failed to create vip%s on virtual router[uuid:%s], because %s",
    "en_US": "failed to create vip{0} on virtual router[uuid:{1}], because {2}",
    "zh_CN": "未能在云路由[uuid:{1}]上创建VIP{0}，因为{2}",
    "arguments": [
      "tos",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java"
  },
  {
    "raw": "failed to sync vips[ips: %s] on virtual router[uuid:%s] for attaching nic[uuid: %s, ip: %s], because %s",
    "en_US": "failed to sync vips[ips: {0}] on virtual router[uuid:{1}] for attaching nic[uuid: {2}, ip: {3}], because {4}",
    "zh_CN": "为了绑定网卡[uuid: {2}, ip: {3}]在云路由[uuid:{1}]上同步虚拟IP[ips: {0}]失败，因为{4}",
    "arguments": [
      "vips.stream().map( v -\u003e v.getIp()).collect(Collectors.toList())",
      "nic.getVmInstanceUuid()",
      "nic.getUuid()",
      "nic.getIp()",
      "ret.getError()"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java"
  },
  {
    "raw": "virtual router[uuid:%s, state:%s] is not running",
    "en_US": "virtual router[uuid:{0}, state:{1}] is not running",
    "zh_CN": "云路由[uuid:{0}, state:{1}]没有运行",
    "arguments": [
      "vrUuid",
      "vrState"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to VIP[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to VIP[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]内为L3网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和VIP[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该L3网络指定一个特定的云路有规格",
    "arguments": [
      "offering.getUuid()",
      "s.getL3Network().getUuid()",
      "s.getL3Network().getZoneUuid()",
      "self.getL3NetworkUuid()",
      "self.getUuid()"
    ],
    "line": 303,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "failed to change nic[ip:%s, mac:%s] firewall default action of virtual router vm[uuid:%s], because %s",
    "en_US": "failed to change nic[ip:{0}, mac:{1}] firewall default action of virtual router vm[uuid:{2}], because {3}",
    "zh_CN": "修改云路由[uuid:{2}]的网卡[ip:{0}, mac:{1}]的默认防火墙规则失败，因为{3}",
    "arguments": [
      "nic.getIp()",
      "nic.getMac()",
      "nic.getVmInstanceUuid()",
      "rsp.getError()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosChangePrivateL3FirewallDefaultActionExtensionPoint.java"
  },
  {
    "raw": "virtual router[uuid: %s] failed to get version because %s ",
    "en_US": "virtual router[uuid: {0}] failed to get version because {1} ",
    "zh_CN": "获取云路由[uuid: {0}]版本失败，因为{1}",
    "arguments": [
      "vrUuid",
      "ret.getError()"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java"
  },
  {
    "raw": "virtual router[uuid: %s] doesn\u0027t have version",
    "en_US": "virtual router[uuid: {0}] doesn\u0027t have version",
    "zh_CN": "云路由[uuid: {0}]没有版本信息",
    "arguments": [
      "vrUuid"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java"
  },
  {
    "raw": "virtual router[uuid: %s] version [%s] format error",
    "en_US": "virtual router[uuid: {0}] version [{1}] format error",
    "zh_CN": "云路由[uuid{0}]版本号[{1}]格式错误",
    "arguments": [
      "vrUuid",
      "ret.getVersion()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java"
  },
  {
    "raw": "virtual router[uuid: %s] version [%s] is older than management node version [%s]",
    "en_US": "virtual router[uuid: {0}] version [{1}] is older than management node version [{2}]",
    "zh_CN": "云路由[uuid: {0}]版本[{1}]比管理节点的版本[{2}]旧",
    "arguments": [
      "vrUuid",
      "ret.getVersion()",
      "managementVersion"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosVersionVersionManagerImpl.java"
  },
  {
    "raw": "failed to start vm[uuid:%s] because not all pci specs[uuids:%s] exist",
    "en_US": "failed to start vm[uuid:{0}] because not all pci specs[uuids:{1}] exist",
    "zh_CN": "云主机[uuid:{0}]启动失败，因为所设置的PCI设备规格[uuids:{1}]中有部分不存在",
    "arguments": [
      "vmUuid",
      "specMap.keySet()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/pciDevice/HostDeviceAllocatorFlow.java"
  },
  {
    "raw": "no candidate host with enough spec related pci devices for vm[uuid:%s]",
    "en_US": "no candidate host with enough spec related pci devices for vm[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/pciDevice/HostDeviceAllocatorFlow.java"
  },
  {
    "raw": "failed to start vm[uuid:%s] because not all mdev specs[uuids:%s] exist",
    "en_US": "failed to start vm[uuid:{0}] because not all mdev specs[uuids:{1}] exist",
    "zh_CN": "云主机[uuid:{0}]启动失败，由于所设置的MDEV设备规格[uuids:{1}]中有部分不存在",
    "arguments": [
      "vmUuid",
      "specMap.keySet()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/pciDevice/HostDeviceAllocatorFlow.java"
  },
  {
    "raw": "no candidate host with enough spec related mdev devices for vm[uuid:%s]",
    "en_US": "no candidate host with enough spec related mdev devices for vm[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/pciDevice/HostDeviceAllocatorFlow.java"
  },
  {
    "raw": "failed to find enough pci device of spec[uuid:%s] in dest host[uuid:%s] for vm[uuid:%s]",
    "en_US": "failed to find enough pci device of spec[uuid:{0}] in dest host[uuid:{1}] for vm[uuid:{2}]",
    "zh_CN": "无法在物理机[uuid:{1}]上为云主机[uuid:{2}]找到足够多满足规格[uuid:{0}]的PCI设备",
    "arguments": [
      "specUuid",
      "hostUuid",
      "vmUuid"
    ],
    "line": 260,
    "fileName": "src/main/java/org/zstack/pciDevice/HostDeviceAllocatorFlow.java"
  },
  {
    "raw": "failed to find enough mdev device of spec[uuid:%s] in dest host[uuid:%s] for vm[uuid:%s]",
    "en_US": "failed to find enough mdev device of spec[uuid:{0}] in dest host[uuid:{1}] for vm[uuid:{2}]",
    "zh_CN": "无法在物理机[uuid:{1}]上为云主机[uuid:{2}]找到足够多满足规格[uuid:{0}]的MDEV设备",
    "arguments": [
      "specUuid",
      "hostUuid",
      "vmUuid"
    ],
    "line": 337,
    "fileName": "src/main/java/org/zstack/pciDevice/HostDeviceAllocatorFlow.java"
  },
  {
    "raw": "failed to sort host candidates for vm [uuid:%s] in HostDeviceAllocatorFlow: %s",
    "en_US": "failed to sort host candidates for vm [uuid:{0}] in HostDeviceAllocatorFlow: {1}",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "errorCode"
    ],
    "line": 411,
    "fileName": "src/main/java/org/zstack/pciDevice/HostDeviceAllocatorFlow.java"
  },
  {
    "raw": "specified pci devices not on same host: pci device[uuid: %s] on host[uuid: %s] while pci device[uuid: %s] on host[uuid: %s]",
    "en_US": "specified pci devices not on same host: pci device[uuid: {0}] on host[uuid: {1}] while pci device[uuid: {2}] on host[uuid: {3}]",
    "zh_CN": "云主机试图挂载来自不同物理机的PCI设备：设备[uuid: {0}]来自物理机[uuid: {1}]，而设备[uuid: {2}]来自物理机[uuid: {3}]",
    "arguments": [
      "vo.getUuid()",
      "vo.getHostUuid()",
      "attachedPciUuid",
      "dstHostUuid"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceAllocatorFactory.java"
  },
  {
    "raw": "cannot find required pci device on hosts",
    "en_US": "cannot find required pci device on hosts",
    "zh_CN": "没有物理机满足需要的pci 设备条件",
    "arguments": [],
    "line": 140,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceAllocatorFactory.java"
  },
  {
    "raw": "pci device[uuid:%s] doesn\u0027t exist",
    "en_US": "pci device[uuid:{0}] doesn\u0027t exist",
    "zh_CN": "PCI设备[uuid:{0}]不存在",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 416,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci devices in host[uuid:%s] already sriov virtualized",
    "en_US": "pci devices in host[uuid:{0}] already sriov virtualized",
    "zh_CN": "物理机[uuid:{0}]上的PCI设备已经SRIOV虚拟化，无法再次切分",
    "arguments": [
      "pci.getHostUuid()"
    ],
    "line": 426,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot sr-iov virtualize pci devices in host[uuid:%s] that are attached to vm",
    "en_US": "cannot sr-iov virtualize pci devices in host[uuid:{0}] that are attached to vm",
    "zh_CN": "物理机[uuid:{0}]上的PCI设备已经挂载到云主机，无法SRIOV虚拟化",
    "arguments": [
      "pci.getHostUuid()"
    ],
    "line": 437,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "only %d virtual pci devices can be generated by %ss in host[uuid:%s]",
    "en_US": "only {0} virtual pci devices can be generated by {1}s in host[uuid:{2}]",
    "zh_CN": "物理机[uuid:{2}]上的{1}类型PCI设备最多被切分出{0}个虚拟PCI设备",
    "arguments": [
      "minIns",
      "pci.getType()",
      "pci.getHostUuid()"
    ],
    "line": 457,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "the host[uuid:%s] that pci device[uuid:%s] in is not Connected",
    "en_US": "the host[uuid:{0}] that pci device[uuid:{1}] in is not Connected",
    "zh_CN": "PCI设备[uuid:{1}]所在物理机[uuid:{0}]已失联",
    "arguments": [
      "pci.getHostUuid()",
      "pci.getUuid()"
    ],
    "line": 569,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] doesn\u0027t exist or is not sriov virtualized",
    "en_US": "pci device[uuid:{0}] doesn\u0027t exist or is not sriov virtualized",
    "zh_CN": "PCI设备[uuid:{0}]不存在，或者未处于SRIOV虚拟化状态",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 477,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "virtual pci devices generated from pci devices in host[uuid:%s] still attached to vm",
    "en_US": "virtual pci devices generated from pci devices in host[uuid:{0}] still attached to vm",
    "zh_CN": "物理机[uuid:{0}]上存在仍处于已挂载状态的虚拟PCI设备，无法执行虚拟化还原操作",
    "arguments": [
      "pci.getHostUuid()"
    ],
    "line": 488,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] cannot be virtualized into mdevs, make sure it\u0027s enabled and un-attached",
    "en_US": "pci device[uuid:{0}] cannot be virtualized into mdevs, make sure it\u0027s enabled and un-attached",
    "zh_CN": "PCI设备[uuid:{0}]无法被切分为MDEV设备，请确保它处于启用状态，并且没有挂载到云主机",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 510,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] cannot be virtualized by mdev spec[uuid:%s]",
    "en_US": "pci device[uuid:{0}] cannot be virtualized by mdev spec[uuid:{1}]",
    "zh_CN": "PCI设备[uuid:{0}]无法使用MDEV设备规格[uuid:{1}]进行虚拟化切分",
    "arguments": [
      "msg.getPciDeviceUuid()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 521,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] is not virtualized into mdevs",
    "en_US": "pci device[uuid:{0}] is not virtualized into mdevs",
    "zh_CN": "PCI设备[uuid:{0}]未处于VFIO_MDEV虚拟化状态",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 543,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "mdev devices generated from pci device[uuid:%s] still attached to vm",
    "en_US": "mdev devices generated from pci device[uuid:{0}] still attached to vm",
    "zh_CN": "PCI设备[uuid:{0}]切分出的MDEV设备仍处于已挂载状态，无法执行虚拟化还原操作",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 560,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "illegal type[%s] for pci device spec, only %s are legal",
    "en_US": "illegal type[{0}] for pci device spec, only {1} are legal",
    "zh_CN": "",
    "arguments": [
      "spec.getType()",
      "PciDeviceType.leagalPciDeviceCandidateTypes"
    ],
    "line": 989,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "illegal type[%s] for pci device, only %s are legal",
    "en_US": "illegal type[{0}] for pci device, only {1} are legal",
    "zh_CN": "",
    "arguments": [
      "vo.getType()",
      "PciDeviceType.leagalPciDeviceCandidateTypes"
    ],
    "line": 978,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "can not attach this pci device[uuid:%s] to vm[uuid:%s] due to host allocation",
    "en_US": "can not attach this pci device[uuid:{0}] to vm[uuid:{1}] due to host allocation",
    "zh_CN": "由于物理机分配问题导致不能将PCI设备[uuid:{0}]绑定虚拟机[uuid:{1}]",
    "arguments": [
      "msg.getPciDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 637,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "can not migrate vm[uuid:%s] since pci device attached",
    "en_US": "can not migrate vm[uuid:{0}] since pci device attached",
    "zh_CN": "当PCI设备绑定后不能迁移虚拟机[uuid:{0}]",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 910,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are pci devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are pci devices attached",
    "zh_CN": "不能迁移根云盘[uuid:{0}]，因为它所在的云主机挂载了PCI设备",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 941,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "pci device[uuid:%s] doesn\u0027t exist or is disabled for vm[uuid:%s]",
    "en_US": "pci device[uuid:{0}] doesn\u0027t exist or is disabled for vm[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "pciUuid",
      "vmUuid"
    ],
    "line": 1167,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "pci device[uuid:%s] already attached to vm[uuid:%s], cannot attach to vm[uuid:%s]",
    "en_US": "pci device[uuid:{0}] already attached to vm[uuid:{1}], cannot attach to vm[uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "pciUuid",
      "vo.getVmInstanceUuid()",
      "vmUuid"
    ],
    "line": 1176,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "The host [%s] has failed to enter the maintenance, The vm [%s] cannot migrate automatically because it contains the PCI device",
    "en_US": "The host [{0}] has failed to enter the maintenance, The vm [{1}] cannot migrate automatically because it contains the PCI device",
    "zh_CN": "物理机[{0}]进入维护状态失败，这个虚拟机[{1}]不能自动迁移，因为虚拟机包含了PCI设备",
    "arguments": [
      "inventory.getUuid()",
      "hasPciVmUuids.toString()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/pciDevice/PciHostChangeStateExtension.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to set pci device spec",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to set pci device spec",
    "zh_CN": "云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以设置PCI设备规格",
    "arguments": [
      "vmUuid",
      "state"
    ],
    "line": 258,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] already has pci device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] already has pci device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经设置过了PCI设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getPciSpecUuid()"
    ],
    "line": 169,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] doesn\u0027t have pci device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] doesn\u0027t have pci device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]未设置PCI设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getPciSpecUuid()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to remove pci device spec[uuid:%s]",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to remove pci device spec[uuid:{2}]",
    "zh_CN": "云主机[uuid:{0}], state:{1}需要处于关机状态下才可以取消PCI设备规格[uuid:{2}]",
    "arguments": [
      "vm.getUuid()",
      "vm.getState()",
      "msg.getPciSpecUuid()"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] already has mdev device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] already has mdev device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经设置过了MDEV设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 285,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to set mdev device spec",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to set mdev device spec",
    "zh_CN": "云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以设置MDEV设备规格",
    "arguments": [
      "vm.getUuid()",
      "vm.getState()"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] doesn\u0027t have mdev device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] doesn\u0027t have mdev device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]未设置过MDEV设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to remove mdev device spec[uuid:%s]",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to remove mdev device spec[uuid:{2}]",
    "zh_CN": "云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以取消MDEV设备规格[uuid:{2}]",
    "arguments": [
      "vm.getUuid()",
      "vm.getState()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "pci device spec[uuid:%s] is not available for vm[uuid:%s]",
    "en_US": "pci device spec[uuid:{0}] is not available for vm[uuid:{1}]",
    "zh_CN": "云主机[uuid:{1}]无法设置PCI设备规格[uuid:{0}]",
    "arguments": [
      "msg.getPciSpecUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 374,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "no pci device spec available for vm[uuid:%s]",
    "en_US": "no pci device spec available for vm[uuid:{0}]",
    "zh_CN": "云主机[uuid:{0}]无可用的PCI设备规格",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 372,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "failed to get pci device spec available for vm[uuid:%s]: %s",
    "en_US": "failed to get pci device spec available for vm[uuid:{0}]: {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "rly.getError()"
    ],
    "line": 367,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "mdev device spec[uuid:%s] is not available for vm[uuid:%s]",
    "en_US": "mdev device spec[uuid:{0}] is not available for vm[uuid:{1}]",
    "zh_CN": "云主机[uuid:{1}]无法设置MDEV设备规格[uuid:{0}]",
    "arguments": [
      "msg.getMdevSpecUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 544,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "no mdev device spec available for vm[uuid:%s]",
    "en_US": "no mdev device spec available for vm[uuid:{0}]",
    "zh_CN": "云主机[uuid:{0}]无可用的MDEV设备规格",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 537,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "pci device spec[uuid:%s] doesn\u0027t exist",
    "en_US": "pci device spec[uuid:{0}] doesn\u0027t exist",
    "zh_CN": "PCI设备规格[uuid:{0}]不存在",
    "arguments": [
      "specUuid",
      "systemTag"
    ],
    "line": 756,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "mdev device spec[uuid:%s] doesn\u0027t exist",
    "en_US": "mdev device spec[uuid:{0}] doesn\u0027t exist",
    "zh_CN": "MDEV设备规格[uuid:{0}]不存在",
    "arguments": [
      "specUuid",
      "systemTag"
    ],
    "line": 769,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "cluster uuids or host uuid or vm uuid can not be set at same time",
    "en_US": "cluster uuids or host uuid or vm uuid can not be set at same time",
    "zh_CN": "获取候选规格列表时不要同时指定集群UUIDs、物理机UUID或云主机UUID",
    "arguments": [],
    "line": 153,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "clusters not exist or disabled",
    "en_US": "clusters not exist or disabled",
    "zh_CN": "集群不存在或已禁用",
    "arguments": [],
    "line": 160,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "illegal mdev device type [%s], only %s are legal",
    "en_US": "illegal mdev device type [{0}], only {1} are legal",
    "zh_CN": "非法的MDEV设备类型[{0}]，只有{1}才是合法的",
    "arguments": [
      "type",
      "legalTypes"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot change the state of mdev device that\u0027s in attached status",
    "en_US": "cannot change the state of mdev device that\u0027s in attached status",
    "zh_CN": "MDEV设备处于已挂载状态，无法修改其状态",
    "arguments": [],
    "line": 67,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot attach mdev device[uuid:%s] to vm, make sure it\u0027s enabled and un-attached",
    "en_US": "cannot attach mdev device[uuid:{0}] to vm, make sure it\u0027s enabled and un-attached",
    "zh_CN": "无法为云主机挂载MDEV设备[uuid:{0}]，因为该设备处于禁用状态或已被挂载",
    "arguments": [
      "msg.getMdevDeviceUuid()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot attach mdev device to vm instance that\u0027s not stopped",
    "en_US": "cannot attach mdev device to vm instance that\u0027s not stopped",
    "zh_CN": "云主机需要处于关机状态下才可以挂载MDEV设备",
    "arguments": [],
    "line": 182,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] has pci devices attached that are in different host with mdev device[uuid:%s]",
    "en_US": "vm[uuid:{0}] has pci devices attached that are in different host with mdev device[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经挂载了PCI设备，并且它们和MDEV设备[uuid:{1}]不在同一台物理机上",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevDeviceUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] has mdev devices attached that are in different host with mdev device[uuid:%s]",
    "en_US": "vm[uuid:{0}] has mdev devices attached that are in different host with mdev device[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经挂载了MDEV设备，并且它们和MDEV设备[uuid:{1}]不在同一台物理机上",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevDeviceUuid()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "the host[uuid:%s] that holds mdev device[uuid:%s] is not [%s] and [%s]",
    "en_US": "the host[uuid:{0}] that holds mdev device[uuid:{1}] is not [{2}] and [{3}]",
    "zh_CN": "",
    "arguments": [
      "mdev.getHostUuid()",
      "mdev.getUuid()",
      "HostState.Enabled",
      "HostStatus.Connected"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "IOMMU of the host[uuid:%s] that hosts pci device[uuid:%s] is not [%s] and [%s]",
    "en_US": "IOMMU of the host[uuid:{0}] that hosts pci device[uuid:{1}] is not [{2}] and [{3}]",
    "zh_CN": "",
    "arguments": [
      "mdev.getHostUuid()",
      "mdev.getUuid()",
      "HostState.Enabled",
      "HostStatus.Connected"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "mdev device [uuid:%s] is not attached to vm[uuid:%s]",
    "en_US": "mdev device [uuid:{0}] is not attached to vm[uuid:{1}]",
    "zh_CN": "MDEV设备[uuid:{0}]没有挂载到云主机[uuid:{1}]",
    "arguments": [
      "msg.getMdevDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot detach mdev device from vm instance when it\u0027s not stopped",
    "en_US": "cannot detach mdev device from vm instance when it\u0027s not stopped",
    "zh_CN": "云主机需要处于关机状态下才可以卸载MDEV设备",
    "arguments": [],
    "line": 143,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] cannot start in host that hold mdev device[uuid:%s]",
    "en_US": "vm[uuid:{0}] cannot start in host that hold mdev device[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]无法在MDEV设备[uuid:{1}]所在的物理机上启动",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevDeviceUuid()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java"
  },
  {
    "raw": "pci device[uuid:%s] is known as %s, but cannot find it\u0027s mdev spec, so abort.",
    "en_US": "pci device[uuid:{0}] is known as {1}, but cannot find it\u0027s mdev spec, so abort.",
    "zh_CN": "PCI设备[uuid:{0}]是{1}，但无法找到可用的MDEV设备规格",
    "arguments": [
      "pciDevice.getUuid()",
      "PciDeviceVirtStatus.VFIO_MDEV_VIRTUALIZED"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFactory.java"
  },
  {
    "raw": "The host [%s] has failed to enter the maintenance, because vm[%s] has mdev devices attached and cannot migrate automatically",
    "en_US": "The host [{0}] has failed to enter the maintenance, because vm[{1}] has mdev devices attached and cannot migrate automatically",
    "zh_CN": "物理机[{0}]无法进入维护模式，因为云主机[{1}]挂载了MDEV设备导致无法迁移",
    "arguments": [
      "inventory.getUuid()",
      "hasMdevVmUuids.toString()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceHostChangeStateExtension.java"
  },
  {
    "raw": "failed to get candidate hosts to start vm[uuid:%s], %s",
    "en_US": "failed to get candidate hosts to start vm[uuid:{0}], {1}",
    "zh_CN": "无法为云主机[uuid:{0}]寻找到可启动的物理机：{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "rly.getError()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "cannot find mdev device[uuid:%s], it may have been deleted",
    "en_US": "cannot find mdev device[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到MDEV设备[uuid:{0}]",
    "arguments": [
      "msg.getMdevDeviceUuid()"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "mdev device[uuid:%s] doesn\u0027t exist or is disabled for vm[uuid:%s]",
    "en_US": "mdev device[uuid:{0}] doesn\u0027t exist or is disabled for vm[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "mdevUuid",
      "vmUuid"
    ],
    "line": 403,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "mdev device[uuid:%s] already attached to vm[uuid:%s], cannot attach to vm [uuid:%s]",
    "en_US": "mdev device[uuid:{0}] already attached to vm[uuid:{1}], cannot attach to vm [uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "mdevUuid",
      "vo.getVmInstanceUuid()",
      "vmUuid"
    ],
    "line": 412,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "can not migrate vm[uuid:%s] since mdev device attached",
    "en_US": "can not migrate vm[uuid:{0}] since mdev device attached",
    "zh_CN": "无法迁移云主机[uuid:{0}]，因为它挂载了MDEV设备",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 509,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are mdev devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are mdev devices attached",
    "zh_CN": "无法迁移跟云盘[uuid:{0}]，因为它所在云主机挂载了MDEV设备",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 538,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "cannot migrate vm[uuid:%s] because there are mdev devices attached",
    "en_US": "cannot migrate vm[uuid:{0}] because there are mdev devices attached",
    "zh_CN": "无法迁移云主机[uuid:{0}]，因为它挂载了MDEV设备",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 553,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "specified mdev devices not on same host: mdev device[uuid: %s] on host[uuid: %s] while mdev device[uuid: %s] on host[uuid: %s]",
    "en_US": "specified mdev devices not on same host: mdev device[uuid: {0}] on host[uuid: {1}] while mdev device[uuid: {2}] on host[uuid: {3}]",
    "zh_CN": "云主机试图挂载来自不同物理机的MDEV设备：设备[uuid: {0}]来自物理机[uuid: {1}]，而设备[uuid: {2}]来自物理机[uuid: {3}]",
    "arguments": [
      "mdev.getUuid()",
      "mdev.getHostUuid()",
      "attachedMdevUuid",
      "dstHostUuid"
    ],
    "line": 796,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "no candidate host with enough mdev devices",
    "en_US": "no candidate host with enough mdev devices",
    "zh_CN": "没有物理机满足mdev device设备的条件",
    "arguments": [],
    "line": 829,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "No host with fewer than %s vms found",
    "en_US": "No host with fewer than {0} vms found",
    "zh_CN": "",
    "arguments": [
      "maxInstancePerHost"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostAllocatorFlow.java"
  },
  {
    "raw": "Select %s strategy, you must set %s",
    "en_US": "Select {0} strategy, you must set {1}",
    "zh_CN": "选择策略{0}，你必须设置{1}",
    "arguments": [
      "HostAllocatorConstant.MAX_INSTANCE_PER_HOST_HOST_ALLOCATOR_STRATEGY_TYPE",
      "HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java"
  },
  {
    "raw": "Incorrect %s settings, valid value is %s",
    "en_US": "Incorrect {0} settings, valid value is {1}",
    "zh_CN": "不正确的设置{0}，有效的值是{1}",
    "arguments": [
      "HostAllocatorSystemTags.MINIMUM_MEMORY_USAGE_HOST_ALLOCATOR_STRATEGY_MODE_TOKEN",
      "modes"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/pluginpremium/compute/allocator/MinimumMemoryUsageHostAllocatorStrategyFactory.java"
  },
  {
    "raw": "can not find related virtual router",
    "en_US": "can not find related virtual router",
    "zh_CN": "",
    "arguments": [],
    "line": 326,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "l3[%s] already attached a policy route ruleSet",
    "en_US": "l3[{0}] already attached a policy route ruleSet",
    "zh_CN": "",
    "arguments": [
      "msg.getL3Uuid()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "VRouter[%s] already has a ruleSet named %s",
    "en_US": "VRouter[{0}] already has a ruleSet named {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getvRouterUuid()",
      "msg.getName()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "DestinationCidr must be in cidr format but found [%s]",
    "en_US": "DestinationCidr must be in cidr format but found [{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getDestinationCidr()"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "NextHopIp must be in ipv4 format but found [%s]",
    "en_US": "NextHopIp must be in ipv4 format but found [{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getNextHopIp()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "can not find related vRouter",
    "en_US": "can not find related vRouter",
    "zh_CN": "",
    "arguments": [],
    "line": 249,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "VRouter[%s] already has a policy route table [%s]",
    "en_US": "VRouter[{0}] already has a policy route table [{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getvRouterUuid()",
      "msg.getNumber()"
    ],
    "line": 271,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "ruleSet[%s] is still attached to nic",
    "en_US": "ruleSet[{0}] is still attached to nic",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 309,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "virtual router[uuid:%s] can not find",
    "en_US": "virtual router[uuid:{0}] can not find",
    "zh_CN": "云路由[uuid:{0}]未找到",
    "arguments": [
      "vrouterVmUuid"
    ],
    "line": 743,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java"
  },
  {
    "raw": "can not find service factory for virtual router type[%s]",
    "en_US": "can not find service factory for virtual router type[{0}]",
    "zh_CN": "未找到云路由类型为[{0}]的服务工厂",
    "arguments": [
      "vo.getApplianceVmType()"
    ],
    "line": 748,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java"
  },
  {
    "raw": "Invalid parameter [%s], make sure it\u0027s PortMirror Network",
    "en_US": "Invalid parameter [{0}], make sure it\u0027s PortMirror Network",
    "zh_CN": "",
    "arguments": [
      "msg.getMirrorNetworkUuid()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The network[%s] has been attached with a PortMirror service",
    "en_US": "The network[{0}] has been attached with a PortMirror service",
    "zh_CN": "",
    "arguments": [
      "msg.getMirrorNetworkUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service[%s] has not been created",
    "en_US": "The PortMirror service[{0}] has not been created",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The nic[%s, %s] has been mirrored by service[%s]",
    "en_US": "The nic[{0}, {1}] has been mirrored by service[{2}]",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcEndPoint()",
      "msg.getDstEndPoint()",
      "mirror.getUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The nic[%s] can\u0027t been mirrored for service[%s] using",
    "en_US": "The nic[{0}] can\u0027t been mirrored for service[{1}] using",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcEndPoint()",
      "mirror.getUuid()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service doesn\u0027t support to mirror the nic[%s]",
    "en_US": "The PortMirror service doesn\u0027t support to mirror the nic[{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcEndPoint()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service doesn\u0027t support the nic[%s] because of its hypervisor type",
    "en_US": "The PortMirror service doesn\u0027t support the nic[{0}] because of its hypervisor type",
    "zh_CN": "",
    "arguments": [
      "msg.getDstEndPoint()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror to the nic[%s] that is not a non-default interface of a vm",
    "en_US": "The PortMirror service can\u0027t mirror to the nic[{0}] that is not a non-default interface of a vm",
    "zh_CN": "",
    "arguments": [
      "msg.getDstEndPoint()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror the nic[%s] that is not an interface of any vm",
    "en_US": "The PortMirror service can\u0027t mirror the nic[{0}] that is not an interface of any vm",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcEndPoint()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror the nic[%s]  to nic[%s] because the mirror network[%s] can\u0027t setup the mirror tunnel",
    "en_US": "The PortMirror service can\u0027t mirror the nic[{0}]  to nic[{1}] because the mirror network[{2}] can\u0027t setup the mirror tunnel",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcEndPoint()",
      "msg.getDstEndPoint()",
      "vo.getMirrorNetworkUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror the nic[%s] to itself",
    "en_US": "The PortMirror service can\u0027t mirror the nic[{0}] to itself",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcEndPoint()"
    ],
    "line": 157,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t work at the nic with configured Qos",
    "en_US": "The PortMirror service can\u0027t work at the nic with configured Qos",
    "zh_CN": "",
    "arguments": [],
    "line": 163,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "failed to delete portMirror session[%s] from hypervisor, detail: %s",
    "en_US": "failed to delete portMirror session[{0}] from hypervisor, detail: {1}",
    "zh_CN": "",
    "arguments": [
      "sessionVO.getUuid()",
      "errorCode.getDetails()"
    ],
    "line": 750,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java"
  },
  {
    "raw": "failed to release portMirror session[%s] from hypervisor, detail: %s",
    "en_US": "failed to release portMirror session[{0}] from hypervisor, detail: {1}",
    "zh_CN": "",
    "arguments": [
      "sessionVO.getUuid()",
      "errorCode.getDetails()"
    ],
    "line": 783,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java"
  },
  {
    "raw": "cannot find internal id of the session[uuid:%s], are there too many sessions in a host???",
    "en_US": "cannot find internal id of the session[uuid:{0}], are there too many sessions in a host???",
    "zh_CN": "",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 901,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java"
  },
  {
    "raw": "resourceUuid[%s] is not a valid uuid. A valid uuid is a UUID(v4 recommended) with \u0027-\u0027 stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of UUID, the regular expression ZStack uses to validate a UUID is \u0027[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}\u0027",
    "en_US": "resourceUuid[{0}] is not a valid uuid. A valid uuid is a UUID(v4 recommended) with \u0027-\u0027 stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of UUID, the regular expression ZStack uses to validate a UUID is \u0027[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}\u0027",
    "zh_CN": "资源UUID（）不是一个有效的uuid。一个有效的UUID是一个没有-的UUID（建议为UUIDv4）.格式参见http://en.wikipedia.org/wiki/Universally_unique_identifier，ZStack中验证一个UUID的正则表达式为: [0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}",
    "arguments": [
      "cmsg.getResourceUuid()"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java"
  },
  {
    "raw": "non support method: %s",
    "en_US": "non support method: {0}",
    "zh_CN": "",
    "arguments": [
      "method"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java"
  },
  {
    "raw": "http request error! status_code: %s, error: %s",
    "en_US": "http request error! status_code: {0}, error: {1}",
    "zh_CN": "",
    "arguments": [
      "statusCode",
      "response.getStatusLine().getReasonPhrase()"
    ],
    "line": 135,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java"
  },
  {
    "raw": "sqlite3 execute failed, because: %s",
    "en_US": "sqlite3 execute failed, because: {0}",
    "zh_CN": "",
    "arguments": [
      "r.getStderr()"
    ],
    "line": 24,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDB.java"
  },
  {
    "raw": "cannot find folder: %s in dashboard",
    "en_US": "cannot find folder: {0} in dashboard",
    "zh_CN": "",
    "arguments": [
      "GrafanaDB.folderTitle"
    ],
    "line": 34,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDashboard.java"
  },
  {
    "raw": "cannot copy %s to %s, caused: %s",
    "en_US": "cannot copy {0} to {1}, caused: {2}",
    "zh_CN": "",
    "arguments": [
      "src.getAbsolutePath()",
      "dst.getAbsolutePath()",
      "rst.getStderr()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/premium/externalservice/loki/LokiFactory.java"
  },
  {
    "raw": "ssh failed",
    "en_US": "ssh failed",
    "zh_CN": "",
    "arguments": [],
    "line": 103,
    "fileName": "src/main/java/org/zstack/premium/externalservice/loki/PromtailFactory.java"
  },
  {
    "raw": "unknown value type %s, key \u003d %s",
    "en_US": "unknown value type {0}, key \u003d {1}",
    "zh_CN": "",
    "arguments": [
      "v.getClass().getSimpleName()",
      "k"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java"
  },
  {
    "raw": "failed to HTTP call all prometheus instances",
    "en_US": "failed to HTTP call all prometheus instances",
    "zh_CN": "",
    "arguments": [],
    "line": 132,
    "fileName": "src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java"
  },
  {
    "raw": "the operation is not permitted by white list of virtual-id[uuid:%s]",
    "en_US": "the operation is not permitted by white list of virtual-id[uuid:{0}]",
    "zh_CN": "无法操作，操作不存在用户[uuid:{0}]白名单中",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getUserUuid()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java"
  },
  {
    "raw": "the operation is denied by black list of virtual-id[uuid:%s]",
    "en_US": "the operation is denied by black list of virtual-id[uuid:{0}]",
    "zh_CN": "无法操作，操作被用户[uuid:{0}]黑名单拒绝",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getUserUuid()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java"
  },
  {
    "raw": "action: %s, is not supported for role identity: %s",
    "en_US": "action: {0}, is not supported for role identity: {1}",
    "zh_CN": "",
    "arguments": [
      "unmatchedApis",
      "identity.toString()"
    ],
    "line": 199,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "%s is a reserved name, please use another name",
    "en_US": "{0} is a reserved name, please use another name",
    "zh_CN": "",
    "arguments": [
      "msg.getName()"
    ],
    "line": 341,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "the name of initial user can not be updated",
    "en_US": "the name of initial user can not be updated",
    "zh_CN": "",
    "arguments": [],
    "line": 339,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot remove builtin system admin role from builtin system admin.",
    "en_US": "cannot remove builtin system admin role from builtin system admin.",
    "zh_CN": "",
    "arguments": [],
    "line": 376,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot remove builtin security admin role from builtin security admin.",
    "en_US": "cannot remove builtin security admin role from builtin security admin.",
    "zh_CN": "",
    "arguments": [],
    "line": 374,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot remove builtin audit admin role from builtin audit admin.",
    "en_US": "cannot remove builtin audit admin role from builtin audit admin.",
    "zh_CN": "",
    "arguments": [],
    "line": 372,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot delete builtin system admin.",
    "en_US": "cannot delete builtin system admin.",
    "zh_CN": "",
    "arguments": [],
    "line": 386,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot delete builtin security admin.",
    "en_US": "cannot delete builtin security admin.",
    "zh_CN": "",
    "arguments": [],
    "line": 384,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot delete builtin audit admin.",
    "en_US": "cannot delete builtin audit admin.",
    "zh_CN": "",
    "arguments": [],
    "line": 382,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "Confirm the roles you want to add have same identity",
    "en_US": "Confirm the roles you want to add have same identity",
    "zh_CN": "",
    "arguments": [],
    "line": 399,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "Cannot add role: %s with identity: %s to virtualID[uuid:%s]",
    "en_US": "Cannot add role: {0} with identity: {1} to virtualID[uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "msg.getRoleUuids()",
      "identitySet",
      "msg.getVirtualIDUuid()"
    ],
    "line": 413,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "can not add privilege admin[uuids:%s] to project[uuid:%s]",
    "en_US": "can not add privilege admin[uuids:{0}] to project[uuid:{1}]",
    "zh_CN": "无法将特殊管理员用户[uuids:{0}]加入到项目中去",
    "arguments": [
      "String.join(\",\", privilegeAdminUuids)",
      "msg.getProjectUuid()"
    ],
    "line": 425,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "condition name[%s] is invalid, no such field on inventory class[%s]",
    "en_US": "condition name[{0}] is invalid, no such field on inventory class[{1}]",
    "zh_CN": "条件名[{0}]非法，在清单类里面没有这个阈",
    "arguments": [
      "attr",
      "inventoryClass.getName()"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "condition name[%s] is invalid, field[%s] of inventory[%s] is annotated as @Unqueryable field",
    "en_US": "condition name[{0}] is invalid, field[{1}] of inventory[{2}] is annotated as @Unqueryable field",
    "zh_CN": "条件名[{0}]非法，清单[{2}]的值[{1}]不是被标记为@Unqueryable的值",
    "arguments": [
      "attr",
      "attr",
      "inventoryClass.getName()"
    ],
    "line": 437,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "entity meta class[%s] has no field[%s]",
    "en_US": "entity meta class[{0}] has no field[{1}]",
    "zh_CN": "实体元类[{0}]中没有值[{1}]",
    "arguments": [
      "info.jpaMetaClass.getName()",
      "attr"
    ],
    "line": 448,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "field[%s] is not a primitive of the inventory %s; you cannot specify it in the parameter \u0027fields\u0027;valid fields are %s",
    "en_US": "field[{0}] is not a primitive of the inventory {1}; you cannot specify it in the parameter \u0027fields\u0027;valid fields are {2}",
    "zh_CN": "值[{0}]不是清单{1}的原语；你不能在参数\u0027域\u0027中指定该参数；非法的域{2}",
    "arguments": [
      "f",
      "info.inventoryClass.getSimpleName()",
      "info.premitiveFieldNames"
    ],
    "line": 1000,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "\u0027value\u0027 of query condition %s cannot be null",
    "en_US": "\u0027value\u0027 of query condition {0} cannot be null",
    "zh_CN": "查询条件中{0}的\u0027值\u0027不能为空",
    "arguments": [
      "JSONObjectUtil.toJsonString(cond)"
    ],
    "line": 496,
    "fileName": "src/main/java/org/zstack/query/QueryFacadeImpl.java"
  },
  {
    "raw": "cannot find resource[uuid: %s]",
    "en_US": "cannot find resource[uuid: {0}]",
    "zh_CN": "",
    "arguments": [
      "resourceUuid"
    ],
    "line": 326,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfig.java"
  },
  {
    "raw": "ResourceConfig [category:%s, name:%s] cannot bind to resourceType: %s",
    "en_US": "ResourceConfig [category:{0}, name:{1}] cannot bind to resourceType: {2}",
    "zh_CN": "",
    "arguments": [
      "globalConfig.getCategory()",
      "globalConfig.getName()",
      "resourceType"
    ],
    "line": 330,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfig.java"
  },
  {
    "raw": "account has no access to the resource[uuid: %s]",
    "en_US": "account has no access to the resource[uuid: {0}]",
    "zh_CN": "账号没有访问资源[uuid:{0}]的权限",
    "arguments": [
      "msg.getResourceUuid()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java"
  },
  {
    "raw": "no global config[category:%s, name:%s] found",
    "en_US": "no global config[category:{0}, name:{1}] found",
    "zh_CN": "",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java"
  },
  {
    "raw": "global config[category:%s, name:%s] cannot bind resource",
    "en_US": "global config[category:{0}, name:{1}] cannot bind resource",
    "zh_CN": "",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java"
  },
  {
    "raw": "[%s] field is excepted an int or long, but was [%s].",
    "en_US": "[{0}] field is excepted an int or long, but was [{1}].",
    "zh_CN": "[{0}] 属性期望是一个整数，但是得到的是 [{1}]",
    "arguments": [
      "f.getName()",
      "source"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/rest/TypeVerifier.java"
  },
  {
    "raw": "Invalid value for boolean field [%s], [%s] is not a valid boolean string[true, false].",
    "en_US": "Invalid value for boolean field [{0}], [{1}] is not a valid boolean string[true, false].",
    "zh_CN": "boolean属性字段[{0}]无效，[{1}]不是一个有效的boolean字符串[true, false]",
    "arguments": [
      "f.getName()",
      "source"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/rest/TypeVerifier.java"
  },
  {
    "raw": "[%s] is not formatted as IPv4 address",
    "en_US": "[{0}] is not formatted as IPv4 address",
    "zh_CN": "",
    "arguments": [
      "msg.getAreaId()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "KeyID \u0026 password must be not null when authentication type is %s",
    "en_US": "KeyID \u0026 password must be not null when authentication type is {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getAreaAuth()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "password must be not null when authentication type is %s",
    "en_US": "password must be not null when authentication type is {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getAreaAuth()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "the length of password is at most than 8Bytes when authentication type is %s",
    "en_US": "the length of password is at most than 8Bytes when authentication type is {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getAreaAuth()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "AreaId[%s] type must be %s",
    "en_US": "AreaId[{0}] type must be {1}",
    "zh_CN": "",
    "arguments": [
      "vo.getAreaId()",
      "RouterAreaType.Standard.toString()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "AreaId[%s] has been created",
    "en_US": "AreaId[{0}] has been created",
    "zh_CN": "",
    "arguments": [
      "msg.getAreaId()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "The network[%s] have been added into the haGroup[%s]",
    "en_US": "The network[{0}] have been added into the haGroup[{1}]",
    "zh_CN": "",
    "arguments": [
      "vo.getL3NetworkUuid()",
      "haUuid"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "The network[%s] have been added into the virtual routerArea[%s]",
    "en_US": "The network[{0}] have been added into the virtual routerArea[{1}]",
    "zh_CN": "",
    "arguments": [
      "vo.getL3NetworkUuid()",
      "vo.getRouterAreaUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "Router ID[%s] is not formatted as IPv4 address",
    "en_US": "Router ID[{0}] is not formatted as IPv4 address",
    "zh_CN": "",
    "arguments": [
      "msg.getRouterId()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "Router ID[%s] is not unique in this system",
    "en_US": "Router ID[{0}] is not unique in this system",
    "zh_CN": "",
    "arguments": [
      "msg.getRouterId()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "cron must be set when use cron scheduler",
    "en_US": "cron must be set when use cron scheduler",
    "zh_CN": "当使用定时器任务时，必须设置cron",
    "arguments": [],
    "line": 188,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "cron task must follow format like this : \\\"0 0/3 17-23 * * ?\\\" ",
    "en_US": "cron task must follow format like this : \\\"0 0/3 17-23 * * ?\\\" ",
    "zh_CN": "定时器任务必须符合以下格式: \\\"0 0/3 17-23 * * ?\\\" ",
    "arguments": [],
    "line": 194,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "cron scheduler only need to specify cron task",
    "en_US": "cron scheduler only need to specify cron task",
    "zh_CN": "定时调度器（Cron Scheduler）仅需要指定定时任务（Cron Task）",
    "arguments": [],
    "line": 197,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime out of range",
    "en_US": "startTime out of range",
    "zh_CN": "开始时间超出范围",
    "arguments": [],
    "line": 206,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime must be positive integer or 0",
    "en_US": "startTime must be positive integer or 0",
    "zh_CN": "开始时间必须是正整数或者0",
    "arguments": [],
    "line": 202,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "stopTime has been passed",
    "en_US": "stopTime has been passed",
    "zh_CN": "截止时间已经过去了",
    "arguments": [],
    "line": 183,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "stopTime out of mysql timestamp range",
    "en_US": "stopTime out of mysql timestamp range",
    "zh_CN": "定时任务停止时间超出mysql的timestamp的范围",
    "arguments": [],
    "line": 181,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "duration time out of range",
    "en_US": "duration time out of range",
    "zh_CN": "任务需要的时间超出范围",
    "arguments": [],
    "line": 179,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "interval must be set when use simple scheduler when repeat more than once",
    "en_US": "interval must be set when use simple scheduler when repeat more than once",
    "zh_CN": "当简单定时任务执行超过一次时，必须设置间隔时间",
    "arguments": [],
    "line": 98,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "Can not add job[uuid:%s] twice to the same trigger[uuid:%s]",
    "en_US": "Can not add job[uuid:{0}] twice to the same trigger[uuid:{1}]",
    "zh_CN": "不能两次添加任务[uuid:{0}]到相同的触发器[uuid:{1}]",
    "arguments": [
      "msg.getSchedulerJobUuid()",
      "msg.getSchedulerTriggerUuid()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "Can not add job[uuid:%s] to a out of time trigger[uuid:%s]",
    "en_US": "Can not add job[uuid:{0}] to a out of time trigger[uuid:{1}]",
    "zh_CN": "不能添加任务[uuid:{0}]到一个已经过时的触发器[uuid:{1}]",
    "arguments": [
      "msg.getSchedulerJobUuid()",
      "msg.getSchedulerTriggerUuid()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "There are [%d] triggers added to job[uuid:%s], cannot add any more.",
    "en_US": "There are [{0}] triggers added to job[uuid:{1}], cannot add any more.",
    "zh_CN": "",
    "arguments": [
      "count",
      "msg.getSchedulerJobUuid()"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "There are [%d] triggers added to job group[uuid:%s], cannot add any more.",
    "en_US": "There are [{0}] triggers added to job group[uuid:{1}], cannot add any more.",
    "zh_CN": "",
    "arguments": [
      "count",
      "msg.getSchedulerJobGroupUuid()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "invalid cron expression",
    "en_US": "invalid cron expression",
    "zh_CN": "无效的cron表达式",
    "arguments": [],
    "line": 191,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime must be set for simple scheduler",
    "en_US": "startTime must be set for simple scheduler",
    "zh_CN": "simple类型的定时任务必须设置开始时间[startTime]",
    "arguments": [],
    "line": 171,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "schedulerInterval must be set for simple scheduler",
    "en_US": "schedulerInterval must be set for simple scheduler",
    "zh_CN": "simple类型的定时任务必须设置执行间隔[schedulerInterval]",
    "arguments": [],
    "line": 175,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "snapshotMaxNumber : %s format error because %s",
    "en_US": "snapshotMaxNumber : {0} format error because {1}",
    "zh_CN": "snapshotMaxNumber : {0} 转换类型失败，因为{1}",
    "arguments": [
      "msg.getParameters().get(SchedulerJobParameters.snapshotMax)",
      "e.getMessage()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "%d jobs have different job type with job group",
    "en_US": "{0} jobs have different job type with job group",
    "zh_CN": "",
    "arguments": [
      "n"
    ],
    "line": 265,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "job group has contained %d job, only %d seats left",
    "en_US": "job group has contained {0} job, only {1} seats left",
    "zh_CN": "",
    "arguments": [
      "count",
      "limit - count"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "trigger job[uuid: %s] failed, because %s",
    "en_US": "trigger job[uuid: {0}] failed, because {1}",
    "zh_CN": "",
    "arguments": [
      "jobUuid",
      "e.getMessage()"
    ],
    "line": 500,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java"
  },
  {
    "raw": "Scheduler job[uuid:%s] already in group[uuid: %s]",
    "en_US": "Scheduler job[uuid:{0}] already in group[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "jobUuid",
      "jobGroupUuid"
    ],
    "line": 613,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java"
  },
  {
    "raw": "field[%s] cannot be empty",
    "en_US": "field[{0}] cannot be empty",
    "zh_CN": "",
    "arguments": [
      "field.getName()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerJobParamCascadeUpdater.java"
  },
  {
    "raw": "vm[uuid:%s] is destroyed, state change is not allowed",
    "en_US": "vm[uuid:{0}] is destroyed, state change is not allowed",
    "zh_CN": "",
    "arguments": [
      "getTargetResourceUuid()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java"
  },
  {
    "raw": "Sdn controller type: %s in not in the supported list: %s ",
    "en_US": "Sdn controller type: {0} in not in the supported list: {1} ",
    "zh_CN": "",
    "arguments": [
      "msg.getVendorType()",
      "SdnControllerType.getAllTypeNames()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/sdnController/SdnControllerApiInterceptor.java"
  },
  {
    "raw": "H3C VCFC controller must include systemTags vdsUuid::{%s}",
    "en_US": "H3C VCFC controller must include systemTags vdsUuid::{{0}}",
    "zh_CN": "",
    "arguments": [],
    "line": 97,
    "fileName": "src/main/java/org/zstack/sdnController/SdnControllerApiInterceptor.java"
  },
  {
    "raw": "get sdn controller [ip:%s] vni range failed because %s",
    "en_US": "get sdn controller [ip:{0}] vni range failed because {1}",
    "zh_CN": "",
    "arguments": [
      "self.getIp()",
      "e.getLocalizedMessage()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "get vni range on sdn controller [ip:%s] failed",
    "en_US": "get vni range on sdn controller [ip:{0}] failed",
    "zh_CN": "",
    "arguments": [
      "self.getIp()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "there is no vni range on sdn controller [ip:%s]",
    "en_US": "there is no vni range on sdn controller [ip:{0}]",
    "zh_CN": "",
    "arguments": [
      "self.getIp()"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "there is no default tenant on sdn controller [ip:%s]",
    "en_US": "there is no default tenant on sdn controller [ip:{0}]",
    "zh_CN": "",
    "arguments": [
      "self.getIp()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "create vxlan network on sdn controller [ip:%s] failed because %s",
    "en_US": "create vxlan network on sdn controller [ip:{0}] failed because {1}",
    "zh_CN": "",
    "arguments": [
      "self.getIp()",
      "e.getMessage()"
    ],
    "line": 275,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "create vxlan network on sdn controller [ip:%s] failed",
    "en_US": "create vxlan network on sdn controller [ip:{0}] failed",
    "zh_CN": "",
    "arguments": [
      "self.getIp()"
    ],
    "line": 259,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "delete vxlan network on sdn controller [ip:%s] failed because %s",
    "en_US": "delete vxlan network on sdn controller [ip:{0}] failed because {1}",
    "zh_CN": "",
    "arguments": [
      "self.getIp()",
      "e.getMessage()"
    ],
    "line": 321,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "delete vxlan network on sdn controller [ip:%s] failed",
    "en_US": "delete vxlan network on sdn controller [ip:{0}] failed",
    "zh_CN": "",
    "arguments": [
      "self.getIp()"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "get token of sdn controller [ip:%s] failed because %s",
    "en_US": "get token of sdn controller [ip:{0}] failed because {1}",
    "zh_CN": "",
    "arguments": [
      "self.getIp()",
      "e.getMessage()"
    ],
    "line": 381,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "get leader of sdn controller [ip:%s] failed",
    "en_US": "get leader of sdn controller [ip:{0}] failed",
    "zh_CN": "",
    "arguments": [
      "self.getIp()"
    ],
    "line": 352,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "get token of sdn controller [ip:%s] failed",
    "en_US": "get token of sdn controller [ip:{0}] failed",
    "zh_CN": "",
    "arguments": [
      "self.getIp()"
    ],
    "line": 373,
    "fileName": "src/main/java/org/zstack/sdnController/h3c/H3cSdnController.java"
  },
  {
    "raw": "there is no sdn controller for vxlan pool [uuid:%s]",
    "en_US": "there is no sdn controller for vxlan pool [uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "vo.getPoolUuid()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetwork.java"
  },
  {
    "raw": "cannot configure hardware vxlan network for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure hardware vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 259,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkFactory.java"
  },
  {
    "raw": "overlap vni range with vxlan network pool [%s]",
    "en_US": "overlap vni range with vxlan network pool [{0}]",
    "zh_CN": "",
    "arguments": [
      "overlappedPool"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "hareware vxlan network pool doesn\u0027t support create l3 network",
    "en_US": "hareware vxlan network pool doesn\u0027t support create l3 network",
    "zh_CN": "",
    "arguments": [],
    "line": 110,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "hareware vxlan network pool must configure the physical interface",
    "en_US": "hareware vxlan network pool must configure the physical interface",
    "zh_CN": "",
    "arguments": [],
    "line": 116,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "ONLY hareware vxlan network can be created in hareware vxlan pool",
    "en_US": "ONLY hareware vxlan network can be created in hareware vxlan pool",
    "zh_CN": "",
    "arguments": [],
    "line": 124,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "hareware vxlan network can ONLY be created in hareware vxlan pool",
    "en_US": "hareware vxlan network can ONLY be created in hareware vxlan pool",
    "zh_CN": "",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "failed to create bridge[%s] for hardwareVxlan[uuid:%s, type:%s, vlan:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for hardwareVxlan[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "vlanId",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for hardwareVxlan[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check bridge[{0}] for hardwareVxlan[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "",
    "arguments": [
      "cmd.getBridgeName()",
      "vxlan.getUuid()",
      "vxlan.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java"
  },
  {
    "raw": "failed to check physical interface for HardwareVxlanPool[uuid:%s, name:%s] on kvm host[uuid: %s], %s",
    "en_US": "failed to check physical interface for HardwareVxlanPool[uuid:{0}, name:{1}] on kvm host[uuid: {2}], {3}",
    "zh_CN": "",
    "arguments": [
      "l2Network.getUuid()",
      "l2Network.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanPoolNetworkBackend.java"
  },
  {
    "raw": "set to disconnected",
    "en_US": "set to disconnected",
    "zh_CN": "",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/simulator/SimulatorHost.java"
  },
  {
    "raw": "can not add same email address to endpoint[uuid:%s]",
    "en_US": "can not add same email address to endpoint[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getApplicationEndpointUuid()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "invalid email address[%s]",
    "en_US": "invalid email address[{0}]",
    "zh_CN": "无效的email地址[{0}]",
    "arguments": [
      "errorEmails"
    ],
    "line": 171,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "cannot update email address to %s, which is already exists in endpoint[uuid:%s]",
    "en_US": "cannot update email address to {0}, which is already exists in endpoint[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getEmailAddress()",
      "msg.getApplicationEndpointUuid()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "phone number [%s] already exists",
    "en_US": "phone number [{0}] already exists",
    "zh_CN": "",
    "arguments": [
      "msg.getPhoneNumber()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "password is not set while username is set",
    "en_US": "password is not set while username is set",
    "zh_CN": "设置了用户名但未设置密码",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "username is not set while password is set",
    "en_US": "username is not set while password is set",
    "zh_CN": "设置了密码但未设置用户名",
    "arguments": [],
    "line": 103,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "phone number[%s] already exists",
    "en_US": "phone number[{0}] already exists",
    "zh_CN": "手机号码[{0}]已存在",
    "arguments": [
      "msg.getPhoneNumber()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "invalid url[%s]",
    "en_US": "invalid url[{0}]",
    "zh_CN": "无效的url[{0}]",
    "arguments": [
      "url"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "[%s] is not a legal ip",
    "en_US": "[{0}] is not a legal ip",
    "zh_CN": "",
    "arguments": [
      "host"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "invalid phone number[%s], the DingDing phone number is like +86-12388889999",
    "en_US": "invalid phone number[{0}], the DingDing phone number is like +86-12388889999",
    "zh_CN": "无效的手机号码[{0}], 钉钉手机号码格式应当为 +86-12388889999",
    "arguments": [
      "n"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "username and password must either absent at all or present with each other",
    "en_US": "username and password must either absent at all or present with each other",
    "zh_CN": "用户名和密码要么同时为空要么同时不为空",
    "arguments": [],
    "line": 150,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "can not create sns email endpoint without any email address",
    "en_US": "can not create sns email endpoint without any email address",
    "zh_CN": "",
    "arguments": [],
    "line": 158,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "the operation is not permitted for the system application platform",
    "en_US": "the operation is not permitted for the system application platform",
    "zh_CN": "禁止对该应用平台进行当前操作",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/sns/SNSApplicationPlatformBase.java"
  },
  {
    "raw": "cannot find the SNSTopic[uuid:%s], it may have been deleted",
    "en_US": "cannot find the SNSTopic[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到SNS主题[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getTopicUuid()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/sns/SNSManagerImpl.java"
  },
  {
    "raw": "cannot find SNSApplicationPlatform[uuid:%s], it may have been deleted",
    "en_US": "cannot find SNSApplicationPlatform[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到SNS应用平台[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getApplicationPlatformUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/sns/SNSManagerImpl.java"
  },
  {
    "raw": "cannot find SNSApplicationEndpoint[uuid:%s], it may have been deleted",
    "en_US": "cannot find SNSApplicationEndpoint[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到SNS应用接收终端[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getApplicationEndpointUuid()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/sns/SNSManagerImpl.java"
  },
  {
    "raw": "the topic is not subscribed by any endpoints",
    "en_US": "the topic is not subscribed by any endpoints",
    "zh_CN": "当前主题并未被任何应用终端订阅",
    "arguments": [],
    "line": 125,
    "fileName": "src/main/java/org/zstack/sns/SNSTopicBase.java"
  },
  {
    "raw": "application platform is disabled",
    "en_US": "application platform is disabled",
    "zh_CN": "应用平台被不可用",
    "arguments": [],
    "line": 149,
    "fileName": "src/main/java/org/zstack/sns/SNSTopicBase.java"
  },
  {
    "raw": "application endpoint is disabled",
    "en_US": "application endpoint is disabled",
    "zh_CN": "应用接收端被禁用",
    "arguments": [],
    "line": 201,
    "fileName": "src/main/java/org/zstack/sns/SNSTopicBase.java"
  },
  {
    "raw": "invalid phone number[%s], sms number is like +86-18654321234",
    "en_US": "invalid phone number[{0}], sms number is like +86-18654321234",
    "zh_CN": "",
    "arguments": [
      "number"
    ],
    "line": 34,
    "fileName": "src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsApiInterceptor.java"
  },
  {
    "raw": "Aliyun account[uuid:%s] not exists",
    "en_US": "Aliyun account[uuid:{0}] not exists",
    "zh_CN": "",
    "arguments": [
      "msg.getAccessKeyUuid()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsApiInterceptor.java"
  },
  {
    "raw": "Aliyun sms event text template not found.",
    "en_US": "Aliyun sms event text template not found.",
    "zh_CN": "",
    "arguments": [
      "SysErrors.RESOURCE_NOT_FOUND"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsEndpoint.java"
  },
  {
    "raw": "Sending message to DingTalk failure. status: %s, body: %s",
    "en_US": "Sending message to DingTalk failure. status: {0}, body: {1}",
    "zh_CN": "发送消息到DingTalk失败. status: {0}, body: {1}",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/sns/platform/dingtalk/SNSDingTalkEndpoint.java"
  },
  {
    "raw": "cannot connect SMTP server[server: %s, port: %s] in 15 seconds",
    "en_US": "cannot connect SMTP server[server: {0}, port: {1}] in 15 seconds",
    "zh_CN": "在15秒内无法连接到SMTP服务器[server: {0}, port: {1}]",
    "arguments": [
      "getSelf().getSmtpServer()",
      "getSelf().getSmtpPort()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "SMTP server validation error: %s",
    "en_US": "SMTP server validation error: {0}",
    "zh_CN": "SMTP服务器验证错误: {0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "the endpoint is disabled",
    "en_US": "the endpoint is disabled",
    "zh_CN": "通知终端不可用",
    "arguments": [],
    "line": 134,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "no subject",
    "en_US": "no subject",
    "zh_CN": "没有主题",
    "arguments": [],
    "line": 162,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "The problem may be caused by an incorrect user name or password or email permission denied",
    "en_US": "The problem may be caused by an incorrect user name or password or email permission denied",
    "zh_CN": "导致操作失败的原因可能是不正确的用户名、密码或邮件访问权限不足",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java"
  },
  {
    "raw": "Couldn\u0027t connect to host, port: %s, %d. The problem may be caused by an incorrect smtpServer or smtpPort",
    "en_US": "Couldn\u0027t connect to host, port: {0}, {1}. The problem may be caused by an incorrect smtpServer or smtpPort",
    "zh_CN": "连接{0}:{1}超时，导致原因可能是不正确的邮件服务器和邮件服务器端口",
    "arguments": [
      "smtpServer",
      "smtpPort"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java"
  },
  {
    "raw": "HTTP POST failure. status: %s, body: %s",
    "en_US": "HTTP POST failure. status: {0}, body: {1}",
    "zh_CN": "HTTP POST失败，状态码: {0}, body: {1}",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/sns/platform/http/SNSHttpEndpoint.java"
  },
  {
    "raw": "only HTTP endpoint can subscribe API topic, the endpoint[type:%s] is not a HTTP endpoint",
    "en_US": "only HTTP endpoint can subscribe API topic, the endpoint[type:{0}] is not a HTTP endpoint",
    "zh_CN": "仅HTTP通知终端可以订阅API通知主题，当前通知终端[type:{0}]不是一个HTTP通知终端",
    "arguments": [
      "endpoint.getType()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java"
  },
  {
    "raw": "API topic cannot be deleted",
    "en_US": "API topic cannot be deleted",
    "zh_CN": "API通知主题无法被删除",
    "arguments": [],
    "line": 191,
    "fileName": "src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java"
  },
  {
    "raw": "system alarm topic cannot be deleted",
    "en_US": "system alarm topic cannot be deleted",
    "zh_CN": "系统警报通知主题不能被删除",
    "arguments": [],
    "line": 76,
    "fileName": "src/main/java/org/zstack/sns/system/SNSSystemAlarmTopicManagerImpl.java"
  },
  {
    "raw": "%s should not be null",
    "en_US": "{0} should not be null",
    "zh_CN": "{0} 不能为空",
    "arguments": [
      "name"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "zoneUuids, backupStorageUuids 至少有一个不为空，或者all被设置为真 ",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "backup storage[uuid:%s] has not been attached to zone[uuid:%s]",
    "en_US": "backup storage[uuid:{0}] has not been attached to zone[uuid:{1}]",
    "zh_CN": "镜像服务器[uuid:{0}]没有被加载到zone[uuid:{1}]",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "backup storage[uuid:%s] has been attached to zone[uuid:%s]",
    "en_US": "backup storage[uuid:{0}] has been attached to zone[uuid:{1}]",
    "zh_CN": "镜像服务器[uuid:{0}]已经被加载到zone[uuid:{1}]",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "failed to get header of image url %s: %s",
    "en_US": "failed to get header of image url {0}: {1}",
    "zh_CN": "获取链接 {0} 的Header信息失败，原因：{1}",
    "arguments": [
      "url",
      "e.toString()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "failed to get header of image url %s",
    "en_US": "failed to get header of image url {0}",
    "zh_CN": "获取链接 {0} 的Header信息失败",
    "arguments": [
      "url"
    ],
    "line": 166,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "the backup storage[uuid:%s, name:%s] has not enough capacity to download the image[%s].Required size:%s, available size:%s",
    "en_US": "the backup storage[uuid:{0}, name:{1}] has not enough capacity to download the image[{2}].Required size:{3}, available size:{4}",
    "zh_CN": "镜像服务器[uuid:{0}, name:{1}]没有足够的容量可供下载镜像[{2}]。需要的大小: {3}，可用的大小: {4}",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "url",
      "size",
      "self.getAvailableCapacity()"
    ],
    "line": 176,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "the image size get from url %s is %d bytes, it\u0027s too small for an image, please check the url again.",
    "en_US": "the image size get from url {0} is {1} bytes, it\u0027s too small for an image, please check the url again.",
    "zh_CN": "从链接 {0} 获取到的镜像大小为{1}字节，对一个正常的镜像来说太小了，请检查该链接是否合法",
    "arguments": [
      "url",
      "size"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "backup storage cannot proceed message[%s] because its status is %s",
    "en_US": "backup storage cannot proceed message[{0}] because its status is {1}",
    "zh_CN": "镜像服务器无法处理消息[{0}]因为它的状态为{1}",
    "arguments": [
      "msg.getClass().getName()",
      "self.getStatus()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "backup storage cannot proceed message[%s] because its state is %s",
    "en_US": "backup storage cannot proceed message[{0}] because its state is {1}",
    "zh_CN": "镜像服务器无法处理消息[{0}]因为它的状态为{1}",
    "arguments": [
      "msg.getClass().getName()",
      "self.getState()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "cannot reserve %s on the backup storage[uuid:%s], it only has %s available",
    "en_US": "cannot reserve {0} on the backup storage[uuid:{1}], it only has {2} available",
    "zh_CN": "无法在镜像服务器{1}保留{0}，它仅有{2}可用容量",
    "arguments": [
      "size",
      "backupStorageUuid",
      "capacityVO.getAvailableCapacity()"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java"
  },
  {
    "raw": "capacity reservation on all backup storage failed",
    "en_US": "capacity reservation on all backup storage failed",
    "zh_CN": "在所有镜像服务器上保留容量失败",
    "arguments": [],
    "line": 279,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java"
  },
  {
    "raw": "after subtracting reserved capacity[%s], no backup storage has required capacity[%s bytes]",
    "en_US": "after subtracting reserved capacity[{0}], no backup storage has required capacity[{1} bytes]",
    "zh_CN": "在减去保留容量[{0}]，没有镜像服务器有容量[{1}] bytes",
    "arguments": [
      "BackupStorageGlobalConfig.RESERVED_CAPACITY.value()",
      "spec.getSize()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java"
  },
  {
    "raw": "missing \u0027retentionType\u0027 in job parameters",
    "en_US": "missing \u0027retentionType\u0027 in job parameters",
    "zh_CN": "parameters中缺少retentionType参数",
    "arguments": [],
    "line": 284,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "missing \u0027retentionValue\u0027 in job parameters",
    "en_US": "missing \u0027retentionValue\u0027 in job parameters",
    "zh_CN": "parameter中缺少retentionValue参数",
    "arguments": [],
    "line": 288,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "missing \u0027backupStorageUuids\u0027 in job parameters",
    "en_US": "missing \u0027backupStorageUuids\u0027 in job parameters",
    "zh_CN": "parameter中缺少backupStorageUuids参数",
    "arguments": [],
    "line": 292,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "job parameter \u0027backupStorageUuids\u0027 is empty",
    "en_US": "job parameter \u0027backupStorageUuids\u0027 is empty",
    "zh_CN": "parameter中backupStorageUuids为空",
    "arguments": [],
    "line": 296,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "unexpected backup storage uuid: %s",
    "en_US": "unexpected backup storage uuid: {0}",
    "zh_CN": "错误的镜像服务器uuid: {0}",
    "arguments": [
      "bsUuid"
    ],
    "line": 301,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "volume[uuid:%s] is deleted, state change is not allowed",
    "en_US": "volume[uuid:{0}] is deleted, state change is not allowed",
    "zh_CN": "",
    "arguments": [
      "getTargetResourceUuid()"
    ],
    "line": 484,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java"
  },
  {
    "raw": "bandWidth must be a positive number",
    "en_US": "bandWidth must be a positive number",
    "zh_CN": "",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java"
  },
  {
    "raw": "missing job parameters",
    "en_US": "missing job parameters",
    "zh_CN": "缺少parameters参数",
    "arguments": [],
    "line": 170,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java"
  },
  {
    "raw": "No available backup storage found, skip this job",
    "en_US": "No available backup storage found, skip this job",
    "zh_CN": "",
    "arguments": [],
    "line": 429,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java"
  },
  {
    "raw": "database backup[uuid%s] has not been exported from backupStorage[uuid:%s]",
    "en_US": "database backup[uuid{0}] has not been exported from backupStorage[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getDatabaseBackupUuid()",
      "msg.getBackupStorageUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "database backup[uuid%s] has been exported from backupStorage[uuid:%s]",
    "en_US": "database backup[uuid{0}] has been exported from backupStorage[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getDatabaseBackupUuid()",
      "msg.getBackupStorageUuid()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "do not allow cover database from backup",
    "en_US": "do not allow cover database from backup",
    "zh_CN": "",
    "arguments": [],
    "line": 120,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "installPath and bsUrl are both need",
    "en_US": "installPath and bsUrl are both need",
    "zh_CN": "",
    "arguments": [],
    "line": 124,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "databaseBackup[uuid:%s] is not Enabled and Ready",
    "en_US": "databaseBackup[uuid:{0}] is not Enabled and Ready",
    "zh_CN": "",
    "arguments": [],
    "line": 133,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "illegal url[%s], correct example is ssh://username:password@hostname[:sshPort]/path",
    "en_US": "illegal url[{0}], correct example is ssh://username:password@hostname[:sshPort]/path",
    "zh_CN": "",
    "arguments": [
      "url"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "sync task failed.",
    "en_US": "sync task failed.",
    "zh_CN": "同步失败",
    "arguments": [],
    "line": 467,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java"
  },
  {
    "raw": "unexpected task status: %s",
    "en_US": "unexpected task status: {0}",
    "zh_CN": "错误的任务状态{0}",
    "arguments": [
      "reply.getStatus()"
    ],
    "line": 474,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java"
  },
  {
    "raw": "One of the backup storage[uuids: %s, %s] is in the state of %s, can not do sync operation",
    "en_US": "One of the backup storage[uuids: {0}, {1}] is in the state of {2}, can not do sync operation",
    "zh_CN": "镜像服务器[uuid: {0}]处于状态{1}, 无法执行同步操作",
    "arguments": [
      "msg.getDstBackupStorageUuid()",
      "msg.getSrcBackupStorageUuid()",
      "BackupStorageState.Disabled.toString()"
    ],
    "line": 280,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java"
  },
  {
    "raw": "database backup[uuid:%s] is not Enabled and Ready",
    "en_US": "database backup[uuid:{0}] is not Enabled and Ready",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java"
  },
  {
    "raw": "database backup[uuid:%s] not found in backup storage[uuid:%s]",
    "en_US": "database backup[uuid:{0}] not found in backup storage[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getDatabaseBackupUuid()",
      "msg.getSrcBackupStorageUuid()"
    ],
    "line": 325,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java"
  },
  {
    "raw": "database backup [uuid:%s] is not existed yet",
    "en_US": "database backup [uuid:{0}] is not existed yet",
    "zh_CN": "",
    "arguments": [
      "msg.getDatabaseBackupUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "backup storage[uuid:%s] is not enabled and connected",
    "en_US": "backup storage[uuid:{0}] is not enabled and connected",
    "zh_CN": "",
    "arguments": [],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "not pass the restore security check:\\n%s",
    "en_US": "not pass the restore security check:\\n{0}",
    "zh_CN": "",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 600,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "cannot get free port to listen",
    "en_US": "cannot get free port to listen",
    "zh_CN": "",
    "arguments": [],
    "line": 612,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "database backup version[%s] is not match currently version[%s]",
    "en_US": "database backup version[{0}] is not match currently version[{1}]",
    "zh_CN": "",
    "arguments": [
      "version",
      "dbf.getDbVersion()"
    ],
    "line": 640,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "cannot ssh peer node via sshkey, please check connection",
    "en_US": "cannot ssh peer node via sshkey, please check connection",
    "zh_CN": "",
    "arguments": [],
    "line": 25,
    "fileName": "src/main/java/org/zstack/storage/backup/MultiDatabaseRecoverChecker.java"
  },
  {
    "raw": "cannot get zsha2 status, because %s",
    "en_US": "cannot get zsha2 status, because {0}",
    "zh_CN": "",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/storage/backup/MultiDatabaseRecoverChecker.java"
  },
  {
    "raw": "cannot get zsha2 config, because %s, maybe you need upgrade zsha2",
    "en_US": "cannot get zsha2 config, because {0}, maybe you need upgrade zsha2",
    "zh_CN": "",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/storage/backup/MultiDatabaseRecoverChecker.java"
  },
  {
    "raw": "please stop other node first!",
    "en_US": "please stop other node first!",
    "zh_CN": "",
    "arguments": [],
    "line": 19,
    "fileName": "src/main/java/org/zstack/storage/backup/SingleDatabaseRecoverChecker.java"
  },
  {
    "raw": "current backup storage state[%s] doesn\u0027t allow to proceed message[%s], allowed states are %s",
    "en_US": "current backup storage state[{0}] doesn\u0027t allow to proceed message[{1}], allowed states are {2}",
    "zh_CN": "当前镜像服务器状态[{0}]不能处理消息[{1}]，仅当镜像服务器处于{2}时才能处理该消息",
    "arguments": [
      "currentState",
      "msgName",
      "checker.getStatesForOperation(msgName)"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Unexpected backup storage[type:%s,uuid:%s]",
    "en_US": "Unexpected backup storage[type:{0},uuid:{1}]",
    "zh_CN": "错误的镜像服务器[type:{0}, uuid:{1}]",
    "arguments": [
      "bsType",
      "bsUuid"
    ],
    "line": 212,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Can not create volume backup for shareable volume[uuid:%s]",
    "en_US": "Can not create volume backup for shareable volume[uuid:{0}]",
    "zh_CN": "无法给共享云盘[uuid:{0}]创建云盘备份",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 233,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create volume backup for volume[uuid:%s], because it is not attached to any vm",
    "en_US": "Failed to create volume backup for volume[uuid:{0}], because it is not attached to any vm",
    "zh_CN": "无法给云盘[uuid:{0}]创建云盘备份，因为它未加载到虚拟机上",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 237,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create volume backup for volume[uuid:%s], because its attached volume is not in state[%s, %s]",
    "en_US": "Failed to create volume backup for volume[uuid:{0}], because its attached volume is not in state[{1}, {2}]",
    "zh_CN": "无法给云盘[uuid:{0}]创建云盘备份，因为加载到的虚拟机并不处于以下状态[{1}, {2}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create volume backup for volume[uuid:%s], because the vm is not in state[%s, %s]",
    "en_US": "Failed to create volume backup for volume[uuid:{0}], because the vm is not in state[{1}, {2}]",
    "zh_CN": "无法给云盘[uuid:{0}]创建云盘备份，因为加载到的虚拟机并不处于以下状态[{1}, {2}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is not root volume",
    "en_US": "Volume[uuid:{0}] is not root volume",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 255,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create backups for VM[uuid:%s], because it is not in state[%s, %s]",
    "en_US": "Failed to create backups for VM[uuid:{0}], because it is not in state[{1}, {2}]",
    "zh_CN": "",
    "arguments": [
      "t.get(0)",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "No volume backup found for group uuid: %s",
    "en_US": "No volume backup found for group uuid: {0}",
    "zh_CN": "",
    "arguments": [
      "groupUuid"
    ],
    "line": 276,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "root volume backup of group[uuid:%s] not found",
    "en_US": "root volume backup of group[uuid:{0}] not found",
    "zh_CN": "",
    "arguments": [
      "groupUuid"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "cannot specify primary storage which attached different cluster.",
    "en_US": "cannot specify primary storage which attached different cluster.",
    "zh_CN": "",
    "arguments": [],
    "line": 312,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "volume backup[uuid:%s] is in state %s, cannot revert volume to it",
    "en_US": "volume backup[uuid:{0}] is in state {1}, cannot revert volume to it",
    "zh_CN": "云盘备份[uuid:{0}]处于{1}状态，无法用于恢复云盘",
    "arguments": [
      "backupUuid",
      "state"
    ],
    "line": 335,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "original volume for backup[uuid:%s] has been deleted, cannot revert volume to it",
    "en_US": "original volume for backup[uuid:{0}] has been deleted, cannot revert volume to it",
    "zh_CN": "云盘备份[uuid:{0}]已经被删除，无法用于恢复云盘",
    "arguments": [
      "backupUuid"
    ],
    "line": 345,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "original volume[uuid:%s] for backup[uuid:%s] is no longer attached to vm[uuid:%s]",
    "en_US": "original volume[uuid:{0}] for backup[uuid:{1}] is no longer attached to vm[uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "volUuid",
      "backupUuid",
      "expectVmUuid"
    ],
    "line": 349,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "VM not found with volume backup[uuid:%s]",
    "en_US": "VM not found with volume backup[uuid:{0}]",
    "zh_CN": "找不到和云盘备份[uuid:{0}]对应的虚拟机",
    "arguments": [
      "backupUuid"
    ],
    "line": 359,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "VM is not in stopped state: %s",
    "en_US": "VM is not in stopped state: {0}",
    "zh_CN": "当前虚拟机状态并不是停止状态：{0}",
    "arguments": [
      "vmState"
    ],
    "line": 363,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "No available backup storage found",
    "en_US": "No available backup storage found",
    "zh_CN": "没有可用的镜像服务器",
    "arguments": [],
    "line": 380,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Operation not supported on shared volume",
    "en_US": "Operation not supported on shared volume",
    "zh_CN": "共享云盘不支持该操作",
    "arguments": [],
    "line": 181,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java"
  },
  {
    "raw": "No VM found for volume[uuid:%s]",
    "en_US": "No VM found for volume[uuid:{0}]",
    "zh_CN": "找不到和云盘[uuid:{0}]对应的虚拟机",
    "arguments": [
      "volumeVO.getUuid()"
    ],
    "line": 186,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java"
  },
  {
    "raw": "No VM found with root volume uuid: %s",
    "en_US": "No VM found with root volume uuid: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getRootVolumeUuid()"
    ],
    "line": 435,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java"
  },
  {
    "raw": "[%s] is not a standard cidr, do you mean [%s]?",
    "en_US": "[{0}] is not a standard cidr, do you mean [{1}]?",
    "zh_CN": "[{0}]不是一个标准的cidr, 是否指定的是[{1}]",
    "arguments": [
      "cidr",
      "fmtCidr"
    ],
    "line": 2041,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "failed to create image from backup %s",
    "en_US": "failed to create image from backup {0}",
    "zh_CN": "",
    "arguments": [
      "vos.stream().filter( vo -\u003e !succeedUuids.contains(vo.getUuid())).map(VolumeBackupVO::getUuid).collect(Collectors.toList())"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "sync volume backup metadata file in image store[uuid:%s] meet I/O error: %s",
    "en_US": "sync volume backup metadata file in image store[uuid:{0}] meet I/O error: {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getImageStoreUuid()",
      "e.getMessage()"
    ],
    "line": 660,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "No VolumeBackupFactory of type[%s] found",
    "en_US": "No VolumeBackupFactory of type[{0}] found",
    "zh_CN": "",
    "arguments": [
      "hypervisorType"
    ],
    "line": 697,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "One of the backup storage[uuid: %s] is in the state of %s, can not do sync operation",
    "en_US": "One of the backup storage[uuid: {0}] is in the state of {1}, can not do sync operation",
    "zh_CN": "镜像服务器[uuid: {0}]处于状态{1}, 无法执行同步操作",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "BackupStorageState.Disabled.toString()"
    ],
    "line": 714,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Volume backup[uuid:%s] not found on backup storage[uuid:%s]",
    "en_US": "Volume backup[uuid:{0}] not found on backup storage[uuid:{1}]",
    "zh_CN": "在镜像服务器[uuid:{1}]上找不到云盘备份[uuid:{0}]",
    "arguments": [
      "struct.getBackupUuid()",
      "struct.getBackupStorageUuid()"
    ],
    "line": 854,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "volume backup[uuid:%s] not found in backup storage[uuid:%s]",
    "en_US": "volume backup[uuid:{0}] not found in backup storage[uuid:{1}]",
    "zh_CN": "在镜像服务器[uuid:{1}]上找不到云盘备份[uuid:{0}]",
    "arguments": [
      "backupUuid",
      "srcBackupStorageUuid"
    ],
    "line": 1298,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "No volume backups found with group uuid: %s",
    "en_US": "No volume backups found with group uuid: {0}",
    "zh_CN": "",
    "arguments": [
      "groupUuid"
    ],
    "line": 1506,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Root volume missing within group uuid: %s",
    "en_US": "Root volume missing within group uuid: {0}",
    "zh_CN": "",
    "arguments": [
      "groupUuid"
    ],
    "line": 1513,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Multiple root volumes found within group uuid: %s",
    "en_US": "Multiple root volumes found within group uuid: {0}",
    "zh_CN": "",
    "arguments": [
      "groupUuid"
    ],
    "line": 1519,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "No permission to volume backups within group uuid: %s",
    "en_US": "No permission to volume backups within group uuid: {0}",
    "zh_CN": "",
    "arguments": [
      "groupUuid"
    ],
    "line": 1531,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Volume backup[uuid:%s] not found on any backup storage",
    "en_US": "Volume backup[uuid:{0}] not found on any backup storage",
    "zh_CN": "",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 1669,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "degree [%s] should be a positive number",
    "en_US": "degree [{0}] should be a positive number",
    "zh_CN": "",
    "arguments": [
      "degree"
    ],
    "line": 2068,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "invalid type[%s], should be [nfs]",
    "en_US": "invalid type[{0}], should be [nfs]",
    "zh_CN": "",
    "arguments": [
      "type"
    ],
    "line": 2102,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "invalid url[%s], should be hostname:/path",
    "en_US": "invalid url[{0}], should be hostname:/path",
    "zh_CN": "",
    "arguments": [
      "url"
    ],
    "line": 2108,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "generate volume backup metadata file on image store[uuid:%s] failure, because IO error: %s",
    "en_US": "generate volume backup metadata file on image store[uuid:{0}] failure, because IO error: {1}",
    "zh_CN": "",
    "arguments": [
      "inv.getUuid()",
      "e.getMessage()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java"
  },
  {
    "raw": "volume backup metadata operation failure, because %s",
    "en_US": "volume backup metadata operation failure, because {0}",
    "zh_CN": "",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 508,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java"
  },
  {
    "raw": "unable to connect to SimpleHttpBackupStorage[url:%s], because %s",
    "en_US": "unable to connect to SimpleHttpBackupStorage[url:{0}], because {1}",
    "zh_CN": "无法连接到SimpleHttpBackupStorage[url:{0}]，因为{1}",
    "arguments": [
      "url",
      "rsp.getError()"
    ],
    "line": 271,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "Missing cert file for downloading image: %s",
    "en_US": "Missing cert file for downloading image: {0}",
    "zh_CN": "下载镜像时证书文件丢失",
    "arguments": [
      "iinv.getName()"
    ],
    "line": 493,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "image store service is temporary not available, because it is reclaiming space now",
    "en_US": "image store service is temporary not available, because it is reclaiming space now",
    "zh_CN": "",
    "arguments": [],
    "line": 622,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "No response",
    "en_US": "No response",
    "zh_CN": "无响应",
    "arguments": [],
    "line": 798,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "reclaim imagestore error, because:%s",
    "en_US": "reclaim imagestore error, because:{0}",
    "zh_CN": "收回imagestore错误，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 871,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "failed to set max capacity on image store[uuid:%s], because: %s",
    "en_US": "failed to set max capacity on image store[uuid:{0}], because: {1}",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "ret.getError()"
    ],
    "line": 958,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "image[%s] not found on backup storage[%s]",
    "en_US": "image[{0}] not found on backup storage[{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getImageUuid()",
      "self.getUuid()"
    ],
    "line": 1085,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "image store [%s] cannot add image, because it is used for backup remote",
    "en_US": "image store [{0}] cannot add image, because it is used for backup remote",
    "zh_CN": "ImageStore[{0}]不能添加镜像，因为它已经被远程镜像使用",
    "arguments": [],
    "line": 1235,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "commercial license is required to use ImageStore",
    "en_US": "commercial license is required to use ImageStore",
    "zh_CN": "使用ImageStore需要商业许可证",
    "arguments": [],
    "line": 1435,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "the uuid of imagestoreBackupStorage agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of imagestoreBackupStorage agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "镜像镜像服务器的代理的uuid发生了改变[期望: {0}，实际: {1}]，很有可能代理被手动重启了，需要重连同步状态",
    "arguments": [
      "self.getUuid()",
      "ret.getUuid()"
    ],
    "line": 1468,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "hostname[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "hostname[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "主机名[{0}]不是一个IPv4的地址，而是一个非法的主机名",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "target backup storage[uuid:%s] already contains the image [uuid:%s]",
    "en_US": "target backup storage[uuid:{0}] already contains the image [uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "bsUuid",
      "imageUuid"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "source backup storage[%s] doesn\u0027t contain image[%s]",
    "en_US": "source backup storage[{0}] doesn\u0027t contain image[{1}]",
    "zh_CN": "源镜像服务器[{0}]不包含该镜像[{1}]",
    "arguments": [
      "msg.getSrcBackupStorageUuid()",
      "msg.getUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "src backupstorage[%s] doesn\u0027t contain image[%s]",
    "en_US": "src backupstorage[{0}] doesn\u0027t contain image[{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getSrcBackupStorageUuid()",
      "msg.getUuid()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "duplicate backup storage. There has been an image store backup storage[hostname:%s]",
    "en_US": "duplicate backup storage. There has been an image store backup storage[hostname:{0}]",
    "zh_CN": "重复的镜像服务器。已经存在一个镜像服务器[主机名: {0}]",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "file path needed",
    "en_US": "file path needed",
    "zh_CN": "需要文件路径",
    "arguments": [],
    "line": 147,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "absolute file path required: %s",
    "en_US": "absolute file path required: {0}",
    "zh_CN": "需要文件的绝对路径；{0}",
    "arguments": [
      "dir"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "the url contains an invalid folder[/dev or /proc or /sys]",
    "en_US": "the url contains an invalid folder[/dev or /proc or /sys]",
    "zh_CN": "URL包含了一个无效的目录[/dev or /proc or /sys]",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "file path contains invalid character: %s",
    "en_US": "file path contains invalid character: {0}",
    "zh_CN": "文件路径包含非法字符: {0}",
    "arguments": [
      "dir"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "cannot find a connected host in cluster to which PS [uuid: %s] attached",
    "en_US": "cannot find a connected host in cluster to which PS [uuid: {0}] attached",
    "zh_CN": "",
    "arguments": [
      "ps.getUuid()"
    ],
    "line": 188,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageExtension.java"
  },
  {
    "raw": "invalid url[%s], the url must be an absolute path starting with \u0027/\u0027",
    "en_US": "invalid url[{0}], the url must be an absolute path starting with \u0027/\u0027",
    "zh_CN": "无效的url[{0}]，url必须是以\u0027/\u0027开头的绝对路径",
    "arguments": [
      "amsg.getUrl()"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "existing SimpleHttpBackupStorage with hostname[%s] found",
    "en_US": "existing SimpleHttpBackupStorage with hostname[{0}] found",
    "zh_CN": "存在主机名为[{0}]的简单http镜像服务器",
    "arguments": [
      "hostname"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "ansible mkdir failed, due to: %s",
    "en_US": "ansible mkdir failed, due to: {0}",
    "zh_CN": "Ansible创建目录失败，因为{0}",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "ansible failed, due to: %s",
    "en_US": "ansible failed, due to: {0}",
    "zh_CN": "Ansible失败，因为{0}",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "ansible attach nas failed, due to: %s",
    "en_US": "ansible attach nas failed, due to: {0}",
    "zh_CN": "Ansible绑定失败，因为{0}",
    "arguments": [
      "result.getStdout()"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "create tmp file [%s] failed, due to: %s",
    "en_US": "create tmp file [{0}] failed, due to: {1}",
    "zh_CN": "创建tmp文件[{0}]失败，因为{1}",
    "arguments": [
      "tmpHostFile",
      "result.getStderr()"
    ],
    "line": 395,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java"
  },
  {
    "raw": "sync status failed.",
    "en_US": "sync status failed.",
    "zh_CN": "同步失败",
    "arguments": [],
    "line": 229,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java"
  },
  {
    "raw": "delete image metadata file failed: %s",
    "en_US": "delete image metadata file failed: {0}",
    "zh_CN": "删除镜像元数据文件失败: {0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 806,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "AddImage is forbidden in Disaster BS: [%s]",
    "en_US": "AddImage is forbidden in Disaster BS: [{0}]",
    "zh_CN": "在Disaster镜像服务器中添加镜像是被禁止的",
    "arguments": [
      "bsUuid"
    ],
    "line": 389,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Check image metadata file: %s failed",
    "en_US": "Check image metadata file: {0} failed",
    "zh_CN": "检查镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 735,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Create image metadata file : %s failed",
    "en_US": "Create image metadata file : {0} failed",
    "zh_CN": "创建镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 563,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Create image metadata file sync : %s failed",
    "en_US": "Create image metadata file sync : {0} failed",
    "zh_CN": "同步创建镜像元数据文件{0}失败了",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 538,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "parse create time error: %s",
    "en_US": "parse create time error: {0}",
    "zh_CN": "解析创建时间出错: {0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreImageStruct.java"
  },
  {
    "raw": "Cancel operation is not supported",
    "en_US": "Cancel operation is not supported",
    "zh_CN": "",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ReclaimSpaceFromImageStoreLongJob.java"
  },
  {
    "raw": "SftpBackupStorage doesn\u0027t support scheme[%s] in url[%s]",
    "en_US": "SftpBackupStorage doesn\u0027t support scheme[{0}] in url[{1}]",
    "zh_CN": "Sftp镜像服务器不支持在url[{1}]里包含scheme[{0}]",
    "arguments": [
      "scheme",
      "url"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "fail to download image, because %s",
    "en_US": "fail to download image, because {0}",
    "zh_CN": "下载镜像失败，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "fail to cancel download image, because %s",
    "en_US": "fail to cancel download image, because {0}",
    "zh_CN": "",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 233,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "the uuid of sftpBackupStorage agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of sftpBackupStorage agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "Sftp镜像镜像服务器的代理的uuid发生了改变[期望: {0}，实际: {1}]，很有可能代理被手动重启了，需要重连同步状态",
    "arguments": [
      "self.getUuid()",
      "ret.getUuid()"
    ],
    "line": 307,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "Please stop the vm before create volume template to sftp backup storage %s",
    "en_US": "Please stop the vm before create volume template to sftp backup storage {0}",
    "zh_CN": "",
    "arguments": [
      "bsUuid"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "duplicate backup storage. There has been a sftp backup storage[hostname:%s] existing",
    "en_US": "duplicate backup storage. There has been a sftp backup storage[hostname:{0}] existing",
    "zh_CN": "重复的镜像服务器。已经存在一个镜像服务器[主机名: {0}]",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "check image metadata file: %s failed",
    "en_US": "check image metadata file: {0} failed",
    "zh_CN": "检查镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 543,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "create image metadata file : %s failed",
    "en_US": "create image metadata file : {0} failed",
    "zh_CN": "创建镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 392,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "image metadata file: %s is not exist",
    "en_US": "image metadata file: {0} is not exist",
    "zh_CN": "镜像元数据文件: {0}不存在",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 548,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "operation failure, because the poolName[poolName:%s] can not include unprintable ascii characters.",
    "en_US": "operation failure, because the poolName[poolName:{0}] can not include unprintable ascii characters.",
    "zh_CN": "操作失败，因为pool名称[poolName:{0}]不能包含中文和特殊字符",
    "arguments": [
      "msg.getPoolName()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Ceph pool[uuid:%s] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.",
    "en_US": "Ceph pool[uuid:{0}] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.",
    "zh_CN": "池名称为此的扩展池[uuid:{0}]已经被添加进 ZStack 了，已做它用，不能复用该扩展池",
    "arguments": [
      "duplicatePoolUuid"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "creation failure, duplicate poolName[%s]. There has been a pool[uuid:%s] with the same name existing.",
    "en_US": "creation failure, duplicate poolName[{0}]. There has been a pool[uuid:{1}] with the same name existing.",
    "zh_CN": "创建失败，重复的池名称[{0}]。已经有一个相同名称的扩展池[uuid:{1}]存在",
    "arguments": [
      "msg.getPoolName()",
      "duplicatePoolUuid"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:%s]",
    "en_US": "cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:{0}]",
    "zh_CN": "无法添加ceph主存储，一定有某些ceph主存储使用了mon[主机名: {0}]",
    "arguments": [
      "existing"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Cannot add same host[%s] in mons",
    "en_US": "Cannot add same host[{0}] in mons",
    "zh_CN": "在mon中无法添加相同的物理机[{0}]",
    "arguments": [
      "uri.getHostname()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Adding the same Mon node is not allowed",
    "en_US": "Adding the same Mon node is not allowed",
    "zh_CN": "添加相同的Mon节点不被允许",
    "arguments": [],
    "line": 156,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:%s]",
    "en_US": "cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:{0}]",
    "zh_CN": "无法添加ceph镜像服务器，已经有某个ceph镜像服务器使用mon[主机名: {0}]",
    "arguments": [
      "existing"
    ],
    "line": 235,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "poolName is required when importImages is true",
    "en_US": "poolName is required when importImages is true",
    "zh_CN": "当importImages为真的时候必须填写池名",
    "arguments": [],
    "line": 243,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "The problem may be caused by an incorrect user name or password or SSH port or unstable network environment",
    "en_US": "The problem may be caused by an incorrect user name or password or SSH port or unstable network environment",
    "zh_CN": "该问题可能是由不正确的用户名、密码、SSH端口或者不稳定的网络环境引起的",
    "arguments": [],
    "line": 66,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephMonBase.java"
  },
  {
    "raw": "CephMon[hostname:%s] not found on backup storage[uuid:%s]",
    "en_US": "CephMon[hostname:{0}] not found on backup storage[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getHostname()",
      "msg.getBackupStorageUuid()"
    ],
    "line": 834,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "unable to connect to the ceph backup storage[uuid:%s]. Failed to connect all ceph mons. Errors are %s",
    "en_US": "unable to connect to the ceph backup storage[uuid:{0}]. Failed to connect all ceph mons. Errors are {1}",
    "zh_CN": "无法连接到ceph镜像服务器[uuid:{0}]。所有监控节点均无法连接。错误是{1}",
    "arguments": [
      "self.getUuid()",
      "JSONObjectUtil.toJsonString(errorCodes)"
    ],
    "line": 1218,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "there is another CEPH backup storage[name:%s, uuid:%s] with the same FSID[%s], you cannot add the same CEPH setup as two different backup storage",
    "en_US": "there is another CEPH backup storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different backup storage",
    "zh_CN": "有另外一个CEPH镜像服务器[name:{0}, uuid:{1}]有相同的FSID[{2}]，你不能添加同样的CEPH为两个不同的镜像服务器",
    "arguments": [
      "otherCeph.getName()",
      "otherCeph.getUuid()",
      "fsId"
    ],
    "line": 1339,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "cannot update status of the ceph backup storage mon[uuid:%s], it has been deleted.This error can be ignored",
    "en_US": "cannot update status of the ceph backup storage mon[uuid:{0}], it has been deleted.This error can be ignored",
    "zh_CN": "无法更新ceph镜像服务器监控节点[uuid:{0}]，他已经被删除。这个错误可以被忽略",
    "arguments": [
      "uuid"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java"
  },
  {
    "raw": "the backup storage[uuid:%s, name:%s, fsid:%s] is not in the same ceph cluster with the primary storage[uuid:%s, name:%s, fsid:%s]",
    "en_US": "the backup storage[uuid:{0}, name:{1}, fsid:{2}] is not in the same ceph cluster with the primary storage[uuid:{3}, name:{4}, fsid:{5}]",
    "zh_CN": "镜像服务器[uuid:{0}, name:{1}, fsid:{2}]和主存储[uuid:{3}, name:{4}, fsid:{5}]不在同一个ceph集群中",
    "arguments": [
      "backupStorage.getUuid()",
      "backupStorage.getName()",
      "bsFsid",
      "self.getUuid()",
      "self.getName()",
      "getSelf().getFsid()"
    ],
    "line": 1283,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find cephPrimaryStorage pool[poolName\u003d%s]",
    "en_US": "cannot find cephPrimaryStorage pool[poolName\u003d{0}]",
    "zh_CN": "",
    "arguments": [
      "poolName"
    ],
    "line": 1477,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cephPrimaryStorage pool[poolName\u003d%s] available capacity not enough",
    "en_US": "cephPrimaryStorage pool[poolName\u003d{0}] available capacity not enough",
    "zh_CN": "",
    "arguments": [
      "poolName"
    ],
    "line": 1483,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "fsid is not same between ps[%s] and bs[%s], create template is forbidden.",
    "en_US": "fsid is not same between ps[{0}] and bs[{1}], create template is forbidden.",
    "zh_CN": "在主存储和镜像服务器中fsid不是一样的，禁止创建模版。",
    "arguments": [
      "psUuid",
      "bsUuid"
    ],
    "line": 2303,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "ceph primary storage[uuid:%s] may have been deleted.",
    "en_US": "ceph primary storage[uuid:{0}] may have been deleted.",
    "zh_CN": "Ceph主存储[uuid:{0}]可能已经被删除",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2762,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to connect to the ceph primary storage[uuid:%s]. Failed to connect all ceph mons. Errors are %s",
    "en_US": "unable to connect to the ceph primary storage[uuid:{0}]. Failed to connect all ceph mons. Errors are {1}",
    "zh_CN": "无法连接到ceph主存储[uuid:{0}]。所有监控节点均连接失败。错误是{1}",
    "arguments": [
      "self.getUuid()",
      "JSONObjectUtil.toJsonString(errorCodes)"
    ],
    "line": 2749,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to connect to the ceph primary storage[uuid:%s]. Failed to connect all ceph mons.",
    "en_US": "unable to connect to the ceph primary storage[uuid:{0}]. Failed to connect all ceph mons.",
    "zh_CN": "未能连接ceph主存储[uuid:{0}]，连接所有的ceph mons失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2746,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\\n",
    "en_US": "the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\\n",
    "zh_CN": "监控节点返回的fsid不匹配，似乎监控节点属于不同的ceph集群",
    "arguments": [],
    "line": 2866,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "there is another CEPH primary storage[name:%s, uuid:%s] with the same FSID[%s], you cannot add the same CEPH setup as two different primary storage",
    "en_US": "there is another CEPH primary storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different primary storage",
    "zh_CN": "有另外一个CEPH主存储[name:{0}, uuid:{1}] 有相同的 FSID[{2}]，你不能添加相同的CEPH设置到两个不同的主存储",
    "arguments": [
      "otherCeph.getName()",
      "otherCeph.getUuid()",
      "fsId"
    ],
    "line": 2884,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the ceph primary storage[uuid:%s, name:%s] is down, as one mon[uuid:%s] reports an operation failure[%s]",
    "en_US": "the ceph primary storage[uuid:{0}, name:{1}] is down, as one mon[uuid:{2}] reports an operation failure[{3}]",
    "zh_CN": "ceph主存储[uuid:{0}, name:{1}]关闭，因为一个mon[uuid:{2}]报告了一个操作失败[{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "mon.getSelf().getUuid()",
      "res.error"
    ],
    "line": 3135,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to upload bits to the backup storage[type:%s], we only support CEPH",
    "en_US": "unable to upload bits to the backup storage[type:{0}], we only support CEPH",
    "zh_CN": "不能上传bits到镜像服务器[type:{0}]，目前只支持CEPH",
    "arguments": [
      "bsType"
    ],
    "line": 3736,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot reinit rootvolume [%s] because image [%s] has been deleted and imagecache cannot be found",
    "en_US": "cannot reinit rootvolume [{0}] because image [{1}] has been deleted and imagecache cannot be found",
    "zh_CN": "",
    "arguments": [
      "volume.getUuid()",
      "volume.getRootImageUuid()"
    ],
    "line": 3910,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find backupstorage to download image [%s] to primarystorage [%s]",
    "en_US": "cannot find backupstorage to download image [{0}] to primarystorage [{1}]",
    "zh_CN": "",
    "arguments": [
      "volume.getRootImageUuid()",
      "getSelf().getUuid()"
    ],
    "line": 3929,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find any Connected ceph mon for the primary storage[uuid:%s]",
    "en_US": "cannot find any Connected ceph mon for the primary storage[uuid:{0}]",
    "zh_CN": "无法为Ceph主存储[uuid:{0}]找到一台处于Connected状态的的监控节点",
    "arguments": [
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 457,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "not support take volumes snapshots on multiple ps when including ceph",
    "en_US": "not support take volumes snapshots on multiple ps when including ceph",
    "zh_CN": "",
    "arguments": [],
    "line": 758,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "ceph pool conflict, the ceph pool specified by the instance offering is %s, and the ceph pool specified in the creation parameter is %s",
    "en_US": "ceph pool conflict, the ceph pool specified by the instance offering is {0}, and the ceph pool specified in the creation parameter is {1}",
    "zh_CN": "",
    "arguments": [
      "targetCephPoolName",
      "cephPoolName"
    ],
    "line": 853,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "ceph pool conflict, the ceph pool specified by the disk offering is %s, and the ceph pool specified in the creation parameter is %s",
    "en_US": "ceph pool conflict, the ceph pool specified by the disk offering is {0}, and the ceph pool specified in the creation parameter is {1}",
    "zh_CN": "",
    "arguments": [
      "targetCephPoolName",
      "cephPoolName"
    ],
    "line": 984,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "get rootVolume[%s] rbd image watchers fail, %s",
    "en_US": "get rootVolume[{0}] rbd image watchers fail, {1}",
    "zh_CN": "查询根云盘[{0}] rbd image watchers失败，{1}",
    "arguments": [
      "rootVolume.getInstallPath()",
      "reply.getError().getDetails()"
    ],
    "line": 1203,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "rootVolume[%s] is already in use(ceph rbd image[%s] already has watchers), in order to prevent brain splitting, Starting VM is prohibited.",
    "en_US": "rootVolume[{0}] is already in use(ceph rbd image[{1}] already has watchers), in order to prevent brain splitting, Starting VM is prohibited.",
    "zh_CN": "根云盘[{0}]正在使用中(ceph rbd 镜像[{1}]存在watchers)，为了防止云主机脑裂，禁止启动云主机",
    "arguments": [
      "msg.getVolumeUuid()",
      "installPath"
    ],
    "line": 1219,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot update status of the ceph primary storage mon[uuid:%s], it has been deleted.This error can be ignored",
    "en_US": "cannot update status of the ceph primary storage mon[uuid:{0}], it has been deleted.This error can be ignored",
    "zh_CN": "不能更新一台已经被删除的Ceph主存储监控节点[uuid:{0}]，这个错误可被忽略",
    "arguments": [
      "uuid"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java"
  },
  {
    "raw": "scsi lun[uuid: %s] and [uuid: %s] does not has a common host",
    "en_US": "scsi lun[uuid: {0}] and [uuid: {1}] does not has a common host",
    "zh_CN": "",
    "arguments": [
      "firstScsiLunVO.getUuid()",
      "scsiLunVO.getUuid()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java"
  },
  {
    "raw": "scsi lun[uuid: %s] is in disabled state",
    "en_US": "scsi lun[uuid: {0}] is in disabled state",
    "zh_CN": "",
    "arguments": [
      "scsiLunVO.getUuid()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java"
  },
  {
    "raw": "iSCSI server[ip: %s, port: %s] already exists",
    "en_US": "iSCSI server[ip: {0}, port: {1}] already exists",
    "zh_CN": "",
    "arguments": [
      "msg.getIp()",
      "msg.getPort()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server ip: %s is not valid",
    "en_US": "iSCSI server ip: {0} is not valid",
    "zh_CN": "",
    "arguments": [
      "msg.getIp()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server[uuid: %s] already attached to cluster[uuid: %s]",
    "en_US": "iSCSI server[uuid: {0}] already attached to cluster[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server[uuid: %s] not attached to cluster[uuid: %s]",
    "en_US": "iSCSI server[uuid: {0}] not attached to cluster[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server[uuid: %s] still attached to cluster[uuid: %s]",
    "en_US": "iSCSI server[uuid: {0}] still attached to cluster[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()",
      "clusterUuid"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "scsi lun[wwid: %s] has been attached to vm instance %s",
    "en_US": "scsi lun[wwid: {0}] has been attached to vm instance {1}",
    "zh_CN": "",
    "arguments": [
      "scsiLunVO.getWwid()",
      "refVO.getVmInstanceUuid()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "vm instance[%s] state [%s] not in allowed state[%s] for operation",
    "en_US": "vm instance[{0}] state [{1}] not in allowed state[{2}] for operation",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()",
      "vmInstanceVO.getState()",
      "allowedVmOperationStates"
    ],
    "line": 1188,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "vm instance[uuid: %s] host[uuid: %s] not attached scsi lun[uuid: %s]",
    "en_US": "vm instance[uuid: {0}] host[uuid: {1}] not attached scsi lun[uuid: {2}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()",
      "vmInstanceVO.getHostUuid()",
      "msg.getUuid()"
    ],
    "line": 1197,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "vm instance[%s] state[%s] not in allowed state[%s] for operation",
    "en_US": "vm instance[{0}] state[{1}] not in allowed state[{2}] for operation",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "vmInstanceVO.getState()",
      "allowedVmOperationStates"
    ],
    "line": 1256,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "vm instance[%s] host[uuid: %s] not attached scsi lun[uuid: %s]",
    "en_US": "vm instance[{0}] host[uuid: {1}] not attached scsi lun[uuid: {2}]",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "hostVO.getUuid()",
      "msg.getUuid()"
    ],
    "line": 1265,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "different iscsi configuration were found on host[uuid:%s, targets:%s]and host[uuid:%s, targets:%s]",
    "en_US": "different iscsi configuration were found on host[uuid:{0}, targets:{1}]and host[uuid:{2}, targets:{3}]",
    "zh_CN": "",
    "arguments": [
      "scannedServer.getKey()",
      "JSONObjectUtil.toJsonString(scannedTargets)",
      "hostVO.getUuid()",
      "JSONObjectUtil.toJsonString(returnValue.getIscsiTargets())"
    ],
    "line": 1447,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "specified scsi lun[wwid: %s] not exists or disabled",
    "en_US": "specified scsi lun[wwid: {0}] not exists or disabled",
    "zh_CN": "",
    "arguments": [
      "refVO.getScsiLunUuid()"
    ],
    "line": 2055,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "No host available for block live migration",
    "en_US": "No host available for block live migration",
    "zh_CN": "",
    "arguments": [],
    "line": 256,
    "fileName": "src/main/java/org/zstack/storage/migration/KvmStorageLiveMigrationFlowChain.java"
  },
  {
    "raw": "live block migration failed: %s",
    "en_US": "live block migration failed: {0}",
    "zh_CN": "",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 494,
    "fileName": "src/main/java/org/zstack/storage/migration/KvmStorageLiveMigrationFlowChain.java"
  },
  {
    "raw": "do not support storage migration with iso in ceph backup storage attached",
    "en_US": "do not support storage migration with iso in ceph backup storage attached",
    "zh_CN": "",
    "arguments": [],
    "line": 123,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration of vm[uuid:%s, name: %s] while shared volume attached",
    "en_US": "do not support storage migration of vm[uuid:{0}, name: {1}] while shared volume attached",
    "zh_CN": "",
    "arguments": [
      "srcVm.getUuid()",
      "srcVm.getName()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration from [%s] to [%s] with data volume",
    "en_US": "do not support storage migration from [{0}] to [{1}] with data volume",
    "zh_CN": "不支持从[{0}]到[{1}]的带数据盘的存储迁移",
    "arguments": [
      "srcPsType",
      "dstPsType"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration from [%s] to [%s] with snapshot",
    "en_US": "do not support storage migration from [{0}] to [{1}] with snapshot",
    "zh_CN": "不支持从[{0}]到[{1}]的存在云盘快照的存储迁移",
    "arguments": [
      "srcPsType",
      "dstPsType"
    ],
    "line": 180,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration from [%s] to [%s]",
    "en_US": "do not support storage migration from [{0}] to [{1}]",
    "zh_CN": "不支持从[{0}]到[{1}]的存储迁移",
    "arguments": [
      "primaryStorageVO.getType()",
      "dstPrimaryStorageVO.getType()"
    ],
    "line": 188,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] is running but host uuid is missing",
    "en_US": "VM[uuid:{0}] is running but host uuid is missing",
    "zh_CN": "",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source BS and Destination BS cannot be the same.",
    "en_US": "Source BS and Destination BS cannot be the same.",
    "zh_CN": "源镜像服务器和目标镜像服务器不能相同",
    "arguments": [],
    "line": 205,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source BS and Destination BS must not be Disabled.",
    "en_US": "Source BS and Destination BS must not be Disabled.",
    "zh_CN": "源镜像服务器和目标镜像服务器必须不是不可用。",
    "arguments": [],
    "line": 213,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Image[uuid:%s] is not in status Ready, cannot migrate it.",
    "en_US": "Image[uuid:{0}] is not in status Ready, cannot migrate it.",
    "zh_CN": "镜像[uuid:{0}]的状态不是已准备，不能迁移它",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Image[uuid:%s] is not in source backup storage[uuid:%s]",
    "en_US": "Image[uuid:{0}] is not in source backup storage[uuid:{1}]",
    "zh_CN": "镜像[uuid:{0}]没有在源镜像服务器[uuid:{1}]",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getSrcBackupStorageUuid()"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate image from %s to %s.",
    "en_US": "Cannot migrate image from {0} to {1}.",
    "zh_CN": "不能从{0}迁移镜像到{1}",
    "arguments": [
      "srcBS.getType()",
      "dstBS.getType()"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source PS and Destination PS must not be Disabled or Maintenance state.",
    "en_US": "Source PS and Destination PS must not be Disabled or Maintenance state.",
    "zh_CN": "源主存储和目标主存储必须不是不可用或者维护状态。",
    "arguments": [],
    "line": 260,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is already in PS[uuid:%s], cannot migrate.",
    "en_US": "Volume[uuid:{0}] is already in PS[uuid:{1}], cannot migrate.",
    "zh_CN": "云盘[uuid:{0}]已经在主存储[uuid:{1}]里，不能迁移。",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getDstPrimaryStorageUuid()"
    ],
    "line": 267,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is not in status Ready, cannot migrate it.",
    "en_US": "Volume[uuid:{0}] is not in status Ready, cannot migrate it.",
    "zh_CN": "云盘[uuid:{0}]状态不是已准备，不能进行迁移",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is still attached on vm[uuid:%s], please detach it before migration.",
    "en_US": "the volume[uuid:{0}] is still attached on vm[uuid:{1}], please detach it before migration.",
    "zh_CN": "云盘[uuid:{0}]一直连接在虚拟机[uuid:{1}]，在迁移之前请先断开连接",
    "arguments": [
      "msg.getVolumeUuid()",
      "srcVolume.getVmInstanceUuid()"
    ],
    "line": 330,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration while shared volume[uuid: %s, name: %s] attached",
    "en_US": "do not support storage migration while shared volume[uuid: {0}, name: {1}] attached",
    "zh_CN": "加载了共享云盘[uuid:{0}, name:{1}]不支持存储迁移",
    "arguments": [
      "srcVolume.getUuid()",
      "srcVolume.getName()"
    ],
    "line": 338,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate root volume when vm instance is not stopped.",
    "en_US": "Cannot migrate root volume when vm instance is not stopped.",
    "zh_CN": "当虚拟机不是已停止，不能迁移根云盘。",
    "arguments": [],
    "line": 287,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate root volume when there are data volumes attached to the vm instance.",
    "en_US": "Cannot migrate root volume when there are data volumes attached to the vm instance.",
    "zh_CN": "当数据云盘连接在虚拟机上时，不能迁移根云盘",
    "arguments": [],
    "line": 304,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.",
    "en_US": "The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.",
    "zh_CN": "目标主存储不能连接任何和源集群一样的二层网络的集群",
    "arguments": [],
    "line": 323,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate volume from %s to %s.",
    "en_US": "Cannot migrate volume from {0} to {1}.",
    "zh_CN": "不能从{0}迁移云盘到{1}",
    "arguments": [
      "srcPS.getType()",
      "dstPS.getType()"
    ],
    "line": 348,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "not support vm state[%s] to do storage migration",
    "en_US": "not support vm state[{0}] to do storage migration",
    "zh_CN": "虚拟机状态为[{0}],无法进行存储迁移",
    "arguments": [
      "vmInstanceVO.getState()"
    ],
    "line": 531,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "there are not enough capacity for vm[uuid: %s] storage migration, required capacity(include image cache): %s, current available physical capacity: %s",
    "en_US": "there are not enough capacity for vm[uuid: {0}] storage migration, required capacity(include image cache): {1}, current available physical capacity: {2}",
    "zh_CN": "对虚拟机[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量（容量计算包含镜像cache），但现在只有{2}的空余容量",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "size",
      "dstPrimaryStorageVO.getCapacity().getAvailablePhysicalCapacity()"
    ],
    "line": 472,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "VM[uuid: %s] not found",
    "en_US": "VM[uuid: {0}] not found",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 582,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "unsupported primary storage type[%s] for storage migration",
    "en_US": "unsupported primary storage type[{0}] for storage migration",
    "zh_CN": "当前存储[类型:{0}]，不支持存储迁移",
    "arguments": [
      "srcPs.getType()"
    ],
    "line": 815,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "not support to cancel %s",
    "en_US": "not support to cancel {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getType()"
    ],
    "line": 1001,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "Cannot reserve enough space for Image[uuid:%s] in BS[uuid:%s]",
    "en_US": "Cannot reserve enough space for Image[uuid:{0}] in BS[uuid:{1}]",
    "zh_CN": "不能在镜像服务器[uuid:{1}]上为镜像[uuid:{0}]预留足够的空间",
    "arguments": [
      "imageUuid",
      "dstBsUuid"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ReserveCapacityFromDstBSFlow.java"
  },
  {
    "raw": "all ceph mons are Disconnected in ceph backup storage[uuid:%s]",
    "en_US": "all ceph mons are Disconnected in ceph backup storage[uuid:{0}]",
    "zh_CN": "所有在ceph镜像服务器[uuid:{0}]的监控节点都处于失联状态",
    "arguments": [
      "dstBsVO.getUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java"
  },
  {
    "raw": "Failed to migrate Image %s from BS %s to BS %s. cause: %s",
    "en_US": "Failed to migrate Image {0} from BS {1} to BS {2}. cause: {3}",
    "zh_CN": "",
    "arguments": [
      "imageUuid",
      "srcBsUuid",
      "dstBsUuid",
      "errCode.getDetails()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java"
  },
  {
    "raw": "found trashId(%s) in BackupStorage [%s] for the migrate installPath[%s]. Please clean it first by \u0027APICleanUpTrashOnBackupStorageMsg\u0027 if you insist to migrate the image[%s]",
    "en_US": "found trashId({0}) in BackupStorage [{1}] for the migrate installPath[{2}]. Please clean it first by \u0027APICleanUpTrashOnBackupStorageMsg\u0027 if you insist to migrate the image[{3}]",
    "zh_CN": "在备份存储[{1}]的回收数据({0})中己存在要迁移的目标路径[{2}]，如果要继续迁移镜像[{3}]，请先调用\u0027APICleanUpTrashOnBackupStorageMsg\u0027来手动清理该回收数据",
    "arguments": [
      "reply1.getTrashId()",
      "dstBsUuid",
      "dstImageInstallPath",
      "reply1.getResourceUuid()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java"
  },
  {
    "raw": "Cannot reserve enough space for Volume[uuid:%s] in PS[uuid:%s]",
    "en_US": "Cannot reserve enough space for Volume[uuid:{0}] in PS[uuid:{1}]",
    "zh_CN": "不能在主存储[uuid:{1}]为云盘[uuid:{0}]预留足够的空间",
    "arguments": [
      "volumeUuid",
      "dstPsUuid"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ReserveCapacityFromDstPSFlow.java"
  },
  {
    "raw": "all ceph mons are Disconnected in ceph primary storage[uuid:%s]",
    "en_US": "all ceph mons are Disconnected in ceph primary storage[uuid:{0}]",
    "zh_CN": "所有的ceph mons无法连接到主存储[uuid:{0}]",
    "arguments": [
      "dstPsVO.getUuid()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java"
  },
  {
    "raw": "The type [%s] of volume is invalid.",
    "en_US": "The type [{0}] of volume is invalid.",
    "zh_CN": "",
    "arguments": [
      "volume.getType()"
    ],
    "line": 571,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java"
  },
  {
    "raw": "cannot find any connected host to perform the storage migration operation",
    "en_US": "cannot find any connected host to perform the storage migration operation",
    "zh_CN": "为了执行存储迁移操作，未找到连接的物理机",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java"
  },
  {
    "raw": "both image %s and its cache is missing",
    "en_US": "both image {0} and its cache is missing",
    "zh_CN": "",
    "arguments": [
      "imageUuid"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java"
  },
  {
    "raw": "\u0027resourceUuid\u0027 and \u0027resourceType\u0027 must be set both or neither!",
    "en_US": "\u0027resourceUuid\u0027 and \u0027resourceType\u0027 must be set both or neither!",
    "zh_CN": "",
    "arguments": [],
    "line": 189,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "区域、集群、主存储的Uuids中必须至少有一个不为空列表，除非将字段 all 设为 true",
    "arguments": [],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] has not been attached to cluster[uuid:%s] yet",
    "en_US": "primary storage[uuid:{0}] has not been attached to cluster[uuid:{1}] yet",
    "zh_CN": "主存储[uuid:{0}]还未加载到集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] has been attached to cluster[uuid:%s]",
    "en_US": "primary storage[uuid:{0}] has been attached to cluster[uuid:{1}]",
    "zh_CN": "主存储[uuid:{0}]已被加载到集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] and cluster[uuid:%s] are not in the same zone",
    "en_US": "primary storage[uuid:{0}] and cluster[uuid:{1}] are not in the same zone",
    "zh_CN": "主存储[uuid:{0}]和集群[uuid:{1}]不在同一个区域内",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "url[%s] has been occupied, it cannot be duplicate in same cluster",
    "en_US": "url[{0}] has been occupied, it cannot be duplicate in same cluster",
    "zh_CN": "url[{0}]已经被占用，在相同的集群里它不能再次使用",
    "arguments": [
      "url"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] cannot be deleted for still being attached to cluster[uuid:%s].",
    "en_US": "primary storage[uuid:{0}] cannot be deleted for still being attached to cluster[uuid:{1}].",
    "zh_CN": "不能删除主存储[uuid:{0}]，因为它还被加载在集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "clusterUuidsString"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage(s) [uuid: %s] where volume(s) locate is not Enabled or Connected",
    "en_US": "primary storage(s) [uuid: {0}] where volume(s) locate is not Enabled or Connected",
    "zh_CN": "",
    "arguments": [
      "psUuids"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "after removing primary storage%s to avoid, there is no candidate primary storage anymore. please check primary storage status and state in the cluster.",
    "en_US": "after removing primary storage{0} to avoid, there is no candidate primary storage anymore. please check primary storage status and state in the cluster.",
    "zh_CN": "把主存储{0}移到排除列表后，就没有可用的主存储了，请确认集群中主存储的状态",
    "arguments": [
      "spec.getAvoidPrimaryStorageUuids()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java"
  },
  {
    "raw": "cannot attach ISO to a primary storage[uuid:%s] which is disabled",
    "en_US": "cannot attach ISO to a primary storage[uuid:{0}] which is disabled",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "backup storage[uuid:%s] is not attached to zone[uuid:%s] the primary storage[uuid:%s] belongs to",
    "en_US": "backup storage[uuid:{0}] is not attached to zone[uuid:{1}] the primary storage[uuid:{2}] belongs to",
    "zh_CN": "镜像服务器[uuid:{0}]没有加载到主存储[uuid:{2}]所在的区域[uuid:{1}]",
    "arguments": [
      "bsUuid",
      "self.getZoneUuid()",
      "self.getUuid()"
    ],
    "line": 657,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "operation not supported",
    "en_US": "operation not supported",
    "zh_CN": "不支持的操作",
    "arguments": [],
    "line": 781,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "cannot attach volume[uuid:%s] whose primary storage is Maintenance",
    "en_US": "cannot attach volume[uuid:{0}] whose primary storage is Maintenance",
    "zh_CN": "无法挂载云盘[uuid:{0}]，其主存储处于维护模式",
    "arguments": [
      "volumeUuid"
    ],
    "line": 1558,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "cannot reserve %s bytes on the primary storage[uuid:%s], it\u0027s short of available capacity",
    "en_US": "cannot reserve {0} bytes on the primary storage[uuid:{1}], it\u0027s short of available capacity",
    "zh_CN": "无法在主存储[uuid:{1}]上保留{0}字节，可用容量不足",
    "arguments": [
      "size",
      "capacityVO.getUuid()"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is not in status of Connected, current status is %s",
    "en_US": "the primary storage[uuid:{0}] is not in status of Connected, current status is {1}",
    "zh_CN": "主存储[uuid:{0}]的状态不是已连接，当前的状态是{1}",
    "arguments": [
      "ps.getUuid()",
      "ps.getStatus().toString()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageDeleteBitGC.java"
  },
  {
    "raw": "%s is invalid. %s is not a valid zstack uuid",
    "en_US": "{0} is invalid. {1} is not a valid zstack uuid",
    "zh_CN": "{0}是无效的，{1}不是一个有效的ZStack uuid",
    "arguments": [
      "systemTag",
      "uuid"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "no primary storage[uuid:%s] found",
    "en_US": "no primary storage[uuid:{0}] found",
    "zh_CN": "找不到主存储[uuid:{0}]",
    "arguments": [
      "resourceUuid"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "primaryStorage[uuid\u003d%s] does not exist",
    "en_US": "primaryStorage[uuid\u003d{0}] does not exist",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "cannot find any qualified primary storage, errors are %s",
    "en_US": "cannot find any qualified primary storage, errors are {0}",
    "zh_CN": "找不到可用的主存储，错误为:{0}",
    "arguments": [
      "errs"
    ],
    "line": 482,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "cidr[%s] Input Format Error",
    "en_US": "cidr[{0}] Input Format Error",
    "zh_CN": "",
    "arguments": [
      "cidr"
    ],
    "line": 558,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "only one primaryStorage cidr system tag is allowed, but %d got",
    "en_US": "only one primaryStorage cidr system tag is allowed, but {0} got",
    "zh_CN": "",
    "arguments": [
      "cidrCount"
    ],
    "line": 554,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "primaryStorageUuid conflict, the primary storage specified by the instance offering is %s, and the primary storage specified in the creation parameter is %s",
    "en_US": "primaryStorageUuid conflict, the primary storage specified by the instance offering is {0}, and the primary storage specified in the creation parameter is {1}",
    "zh_CN": "",
    "arguments": [
      "psUuid",
      "msg.getPrimaryStorageUuidForRootVolume()"
    ],
    "line": 903,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "primaryStorageUuid conflict, the primary storage specified by the disk offering is %s, and the primary storage specified in the creation parameter is %s",
    "en_US": "primaryStorageUuid conflict, the primary storage specified by the disk offering is {0}, and the primary storage specified in the creation parameter is {1}",
    "zh_CN": "",
    "arguments": [
      "psUuid",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 985,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "after subtracting reserved capacity[%s], there is no primary storage having required size[%s bytes], may be the threshold of primary storage physical capacity setting is lower",
    "en_US": "after subtracting reserved capacity[{0}], there is no primary storage having required size[{1} bytes], may be the threshold of primary storage physical capacity setting is lower",
    "zh_CN": "",
    "arguments": [
      "PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value()",
      "spec.getSize()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageReservedCapacityAllocatorFlow.java"
  },
  {
    "raw": "cannot find primary storage[uuid:%s], the uuid is specified in instance offering or disk offering",
    "en_US": "cannot find primary storage[uuid:{0}], the uuid is specified in instance offering or disk offering",
    "zh_CN": "找不到由计算规格或云盘规格指定的主存储[uuid:{0}]",
    "arguments": [
      "uuid"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java"
  },
  {
    "raw": "cannot find primary storage having user tag[%s]. The user tag is specified in instance offering or disk offering",
    "en_US": "cannot find primary storage having user tag[{0}]. The user tag is specified in instance offering or disk offering",
    "zh_CN": "找不到带有指定用户标签的主存储[uuid:{0}]，该标签由计算规格或者云盘规格指定",
    "arguments": [
      "tag"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java"
  },
  {
    "raw": "PrimaryStorageTagAllocatorExtensionPoint[%s] returns zero primary storage candidate",
    "en_US": "PrimaryStorageTagAllocatorExtensionPoint[{0}] returns zero primary storage candidate",
    "zh_CN": "主存储标签分配插件[{0}]找不到可用的主存储",
    "arguments": [
      "extp.getClass().getName()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java"
  },
  {
    "raw": "all mons failed to execute http call[%s], errors are %s",
    "en_US": "all mons failed to execute http call[{0}], errors are {1}",
    "zh_CN": "所有的监控节点都无法执行http call[{0}]，错误是{1}",
    "arguments": [
      "path",
      "JSONObjectUtil.toJsonString(errorCodes)"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "all ceph mons of primary storage[uuid:%s] are not in Connected state",
    "en_US": "all ceph mons of primary storage[uuid:{0}] are not in Connected state",
    "zh_CN": "Ceph主存储[uuid:{0}]所有的监控节点都不是已连接状态",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "CephPrimaryStorage[%s] not existed!",
    "en_US": "CephPrimaryStorage[{0}] not existed!",
    "zh_CN": "Ceph镜像服务器[{0}]不存在",
    "arguments": [
      "param.getPrimaryStorageUuid()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "current license[%s] is not valid license while download from imagestore backupstorage",
    "en_US": "current license[{0}] is not valid license while download from imagestore backupstorage",
    "zh_CN": "当从ImageStore镜像服务器进行下载操作，当前证书[{0}]是无效的证书",
    "arguments": [
      "licMgr.getLicenseType().toString()"
    ],
    "line": 170,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "System can\u0027t find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),",
    "en_US": "System can\u0027t find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),",
    "zh_CN": "系统找不到镜像仓库镜像服务器。请不要设置镜像服务器IP为localhost(127.*.*.*)",
    "arguments": [],
    "line": 207,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "%s failed to download bits from the imagestore backup storage[hostname:%s, path: %s] to the local primary storage[uuid:%s, path: %s], %s",
    "en_US": "{0} failed to download bits from the imagestore backup storage[hostname:{1}, path: {2}] to the local primary storage[uuid:{3}, path: {4}], {5}",
    "zh_CN": "{0}从镜像仓库镜像服务器[hostname:{1}, path: {2}]到本地主存储[uuid:{3}, path: {4}]下载失败，{5}",
    "arguments": [
      "operationSuggestion",
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "failed to upload bits from the local storage[uuid:%s, path:%s] to image store [hostname:%s], %s",
    "en_US": "failed to upload bits from the local storage[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}",
    "zh_CN": "无法从本地存储[uuid:{0}, path:{1}]上传数据到镜像仓库[主机名:{2}]，因为{3}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "rsp.getError()"
    ],
    "line": 270,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "fails to create root volume[uuid:%s] from cached image[path:%s] because %s",
    "en_US": "fails to create root volume[uuid:{0}] from cached image[path:{1}] because {2}",
    "zh_CN": "从镜像[path:{1}]创建根云盘失败，因为{2}",
    "arguments": [
      "volume.getUuid()",
      "image.getImageUuid()",
      "rsp.getError()"
    ],
    "line": 207,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "failed to download bits from the imagestore backup storage[hostname:%s, path: %s] to the nfs primary storage[uuid:%s, path: %s], %s",
    "en_US": "failed to download bits from the imagestore backup storage[hostname:{0}, path: {1}] to the nfs primary storage[uuid:{2}, path: {3}], {4}",
    "zh_CN": "无法从ImageStore镜像服务器[hostname:{0}, path: {1}]下载数据到NFS主存储[uuid:{2}, path: {3}]，错误细节: {4}",
    "arguments": [
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "failed to upload bits from the NFS[uuid:%s, path:%s] to image store [hostname:%s], %s",
    "en_US": "failed to upload bits from the NFS[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}",
    "zh_CN": "无法从NFS主存储[uuid:{0}, path:{1}]上传数据到镜像仓库[主机名:{2}]，因为{3}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "rsp.getError()"
    ],
    "line": 323,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because no MonIP available",
    "en_US": "failed to get primaryStorage[{0}] license info, because no MonIP available",
    "zh_CN": "",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because no data returned",
    "en_US": "failed to get primaryStorage[{0}] license info, because no data returned",
    "zh_CN": "",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because the returned data does not have an active license",
    "en_US": "failed to get primaryStorage[{0}] license info, because the returned data does not have an active license",
    "zh_CN": "",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because expired_time is null",
    "en_US": "failed to get primaryStorage[{0}] license info, because expired_time is null",
    "zh_CN": "",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "no hosts can provide %s bytes for all volumes of the vm[uuid:%s]",
    "en_US": "no hosts can provide {0} bytes for all volumes of the vm[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "volumeSize",
      "spec.getVmInstance().getUuid()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/primary/local/AllocatePrimaryStorageForVmMigrationFlow.java"
  },
  {
    "raw": "localstorage allocator failed",
    "en_US": "localstorage allocator failed",
    "zh_CN": "localstorage类型的主存储过滤失败",
    "arguments": [],
    "line": 306,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java"
  },
  {
    "raw": "the volume[uuid:%s] is not on any local primary storage",
    "en_US": "the volume[uuid:{0}] is not on any local primary storage",
    "zh_CN": "云盘[uuid:{0}]不在任一本地主存储上",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is already on the host[uuid:%s]",
    "en_US": "the volume[uuid:{0}] is already on the host[uuid:{1}]",
    "zh_CN": "云盘[uuid:{0}]已经在物理机[uuid:{1}]上",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getDestHostUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is not found",
    "en_US": "the primary storage[uuid:{0}] is not found",
    "zh_CN": "主存储[uuid:{0}]未找到",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is disabled or maintenance cold migrate is not allowed",
    "en_US": "the primary storage[uuid:{0}] is disabled or maintenance cold migrate is not allowed",
    "zh_CN": "主存储[uuid:{0}]为Disabled或维护状态时不允许冷迁移",
    "arguments": [
      "ref.getPrimaryStorageUuid()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the dest host[uuid:%s] doesn\u0027t belong to the local primary storage[uuid:%s] where the volume[uuid:%s] locates",
    "en_US": "the dest host[uuid:{0}] doesn\u0027t belong to the local primary storage[uuid:{1}] where the volume[uuid:{2}] locates",
    "zh_CN": "目标物理机[uuid:{0}]不在云盘[uuid:{2}]位于的本地主存储[uuid:{1}]上",
    "arguments": [
      "msg.getDestHostUuid()",
      "ref.getPrimaryStorageUuid()",
      "msg.getVolumeUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the dest host[uuid:%s] doesn\u0027t have enough physical capacity due to the threshold of primary storage[uuid:%s] is %f but available physical capacity is %d",
    "en_US": "the dest host[uuid:{0}] doesn\u0027t have enough physical capacity due to the threshold of primary storage[uuid:{1}] is {2} but available physical capacity is {3}",
    "zh_CN": "目标物理机[uuid:{0}]没有足够的物理容量，因为设置的主存储[uuid:{1}]可用阈值为{2}，但实际可用物理容量是{3}",
    "arguments": [
      "msg.getDestHostUuid()",
      "msg.getPrimaryStorageUuid()",
      "physicalThreshold",
      "refVO.getAvailablePhysicalCapacity()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is not in status of Ready, cannot migrate it",
    "en_US": "the volume[uuid:{0}] is not in status of Ready, cannot migrate it",
    "zh_CN": "云盘[uuid:{0}]的状态不是Ready，不能迁移",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm is in state of %s, please stop it before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm is in state of {2}, please stop it before migration",
    "zh_CN": "云盘[uuid:{0}]是云主机[uuid:{1}]的根云盘。当前云主机的状态为{2}，请停止后再迁移",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()",
      "vmstate"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm still has %s data volumes attached, please detach them before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has {2} data volumes attached, please detach them before migration",
    "zh_CN": "云盘[uuid:{0}]是云主机[uuid:{1}]的根云盘。当前云主机仍有已挂载的数据云盘，请卸载后再迁移",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()",
      "count"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm still has ISO attached, please detach it before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has ISO attached, please detach it before migration",
    "zh_CN": "",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "The two clusters[uuid:%s,uuid:%s] cannot access each other in l2 network  when migrate the vm[uuid:%s] to another cluster",
    "en_US": "The two clusters[uuid:{0},uuid:{1}] cannot access each other in l2 network  when migrate the vm[uuid:{2}] to another cluster",
    "zh_CN": "两个集群[uuid:{0},uuid:{1}]无法在L2网络中互相访问对方，当迁移云主机[uuid:{2}]从其中一个集群到另一个集群时",
    "arguments": [
      "originClusterUuid",
      "clusterUuid",
      "vol.getVmInstanceUuid()"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the data volume[uuid:%s, name: %s] is still attached to the VM[uuid:%s]. Please detach it before migration",
    "en_US": "the data volume[uuid:{0}, name: {1}] is still attached to the VM[uuid:{2}]. Please detach it before migration",
    "zh_CN": "数据云盘[uuid:{0}, 名称: {1}]仍然挂载在云主机[uuid:{2}]上，请在迁移前卸载",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()",
      "vol.getVmInstanceUuid()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the url[%s] is not an absolute path starting with \u0027/\u0027",
    "en_US": "the url[{0}] is not an absolute path starting with \u0027/\u0027",
    "zh_CN": "url[{0}]不是一个以\u0027/\u0027开头的绝对路径",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "The primary storage[uuid:%s] is disabled cold migrate is not allowed",
    "en_US": "The primary storage[uuid:{0}] is disabled cold migrate is not allowed",
    "zh_CN": "主存储[uuid:{0}]Disabled时不允许冷迁移",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 258,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "volume[uuid:%s] is not on the local storage anymore,it may have been deleted",
    "en_US": "volume[uuid:{0}] is not on the local storage anymore,it may have been deleted",
    "zh_CN": "云盘[uuid:{0}]已经不在本地存储上，可能已经被删除",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 560,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "failed to download image[uuid:%s] to all hosts in the local storage[uuid:%s]. %s",
    "en_US": "failed to download image[uuid:{0}] to all hosts in the local storage[uuid:{1}]. {2}",
    "zh_CN": "在所有属于本地存储[uuid:{1}]的物理机上，均无法下载镜像[uuid:{0}]。{2}",
    "arguments": [
      "msg.getImage().getUuid()",
      "self.getUuid()",
      "JSONObjectUtil.toJsonString(ret.errorCodes)"
    ],
    "line": 1143,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "Resource[uuid:%s] can only be operated on host[uuid:%s], but the host has been deleted",
    "en_US": "Resource[uuid:{0}] can only be operated on host[uuid:{1}], but the host has been deleted",
    "zh_CN": "资源[uuid:{0}]只能在物理机[uuid:{0}]上对其操作，但是该物理机已经被删除了",
    "arguments": [
      "resUuid",
      "uuid"
    ],
    "line": 1392,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "cannot find any host which has resource[uuid:%s]",
    "en_US": "cannot find any host which has resource[uuid:{0}]",
    "zh_CN": "找不到任何拥有资源[uuid:{0}]的物理机",
    "arguments": [
      "resUuid"
    ],
    "line": 1389,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "host[uuid: %s] of local primary storage[uuid: %s] doesn\u0027t have enough capacity[current: %s bytes, needed: %s]",
    "en_US": "host[uuid: {0}] of local primary storage[uuid: {1}] doesn\u0027t have enough capacity[current: {2} bytes, needed: {3}]",
    "zh_CN": "主存储[uuid:{1}]上的物理机[uuid:{0}]没有足够的容量[现在: {2} bytes, 需要: {3}]",
    "arguments": [
      "hostUuid",
      "self.getUuid()",
      "ref.getAvailableCapacity()",
      "size"
    ],
    "line": 1764,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "unable to create the data volume[uuid: %s] on a local primary storage[uuid:%s], because the hostUuid is not specified.",
    "en_US": "unable to create the data volume[uuid: {0}] on a local primary storage[uuid:{1}], because the hostUuid is not specified.",
    "zh_CN": "不能在本地主存储[uuid:{1}]上创建云盘[uuid:{0}]，因为物理机uuid没有指定",
    "arguments": [
      "msg.getVolumeUuid()",
      "self.getUuid()"
    ],
    "line": 2111,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "No Host state is Enabled, Please check the availability of the host",
    "en_US": "No Host state is Enabled, Please check the availability of the host",
    "zh_CN": "",
    "arguments": [],
    "line": 2634,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "host[uuid:%s] cannot access local storage[uuid:%s], maybe it is detached",
    "en_US": "host[uuid:{0}] cannot access local storage[uuid:{1}], maybe it is detached",
    "zh_CN": "",
    "arguments": [
      "hostUuid",
      "self.getUuid()"
    ],
    "line": 2741,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "resource[uuid:%s, type: %s] is not on the local primary storage[uuid:%s]",
    "en_US": "resource[uuid:{0}, type: {1}] is not on the local primary storage[uuid:{2}]",
    "zh_CN": "",
    "arguments": [
      "resUuid",
      "resourceType",
      "self.getUuid()"
    ],
    "line": 2765,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "resource[uuid:%s, type: %s] on the local primary storage[uuid:%s] maps to multiple hypervisor%s",
    "en_US": "resource[uuid:{0}, type: {1}] on the local primary storage[uuid:{2}] maps to multiple hypervisor{3}",
    "zh_CN": "",
    "arguments": [
      "resUuid",
      "resourceType",
      "self.getUuid()",
      "ret"
    ],
    "line": 2770,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "There is no LocalStorage primary storage[state\u003d%s,status\u003d%s] on the cluster[%s], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters",
    "en_US": "There is no LocalStorage primary storage[state\u003d{0},status\u003d{1}] on the cluster[{2}], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters",
    "zh_CN": "在集群[{2}]里没有LocalStorage主存储[state\u003d{0},status\u003d{1}]，当集群挂载了多个主存储的时候，系统默认的是local主存储。检查主存储的状态并确定是否连接了集群",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "clusterUuid"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java"
  },
  {
    "raw": "the type of primary storage[uuid:%s] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage",
    "en_US": "the type of primary storage[uuid:{0}] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage",
    "zh_CN": "被选择的主存储[uuid:{0}]的类型不是本地存储，检查该资源能否在其他存储上被创建当集群已经挂载了本地存储",
    "arguments": [
      "psUuid"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster mounts multiple primary storage[%s(%s), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified %s",
    "en_US": "The cluster mounts multiple primary storage[{0}({1}), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified {2}",
    "zh_CN": "集群绑定了多个主存储[{0}({1}), 其他的非LocalStorage主存储]，主存储根云盘未进行指定{2}",
    "arguments": [
      "requiredPrimaryStorageUuidForDataVolume.getUuid()",
      "requiredPrimaryStorageUuidForDataVolume.getType()",
      "LocalStorageConstants.LOCAL_STORAGE_TYPE"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster[uuid\u003d%s] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located",
    "en_US": "The cluster[uuid\u003d{0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located",
    "zh_CN": "集群[uuid\u003d{0}]绑定了多个主存储[LocalStorage, 其他非LocalStorage主存储]，需要检验下根云盘所在的主存储",
    "arguments": [
      "spec.getDestHost().getClusterUuid()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster[uuid\u003d%s] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located",
    "en_US": "The cluster[uuid\u003d{0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located",
    "zh_CN": "集群[uuid\u003d{0}]绑定了多个主存储[LocalStorage, 其他非LocalStorage主存储]，需要检验下根云盘所在的主存储。",
    "arguments": [
      "spec.getDestHost().getClusterUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java"
  },
  {
    "raw": "local storage doesn\u0027t support live migration for hypervisor[%s]",
    "en_US": "local storage doesn\u0027t support live migration for hypervisor[{0}]",
    "zh_CN": "本地存储不支持对虚拟化类型[{0}]进行热迁移",
    "arguments": [
      "spec.getVmInventory().getHypervisorType()"
    ],
    "line": 365,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "cannot attach the data volume[uuid:%s] to the vm[uuid:%s]. Both vm\u0027s root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:%s] is on the host[uuid:%s] but the data volume[uuid: %s] is on the host[uuid: %s]",
    "en_US": "cannot attach the data volume[uuid:{0}] to the vm[uuid:{1}]. Both vm\u0027s root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:{2}] is on the host[uuid:{3}] but the data volume[uuid: {4}] is on the host[uuid: {5}]",
    "zh_CN": "不能加载数据云盘[uuid:{0}]到云主机[uuid:{1}]。根云盘和数据云盘都在本地主存储上，但他们属于不同的物理机。根云盘[uuid:{2}]在物理机[uuid:{3}]上，但数据云盘[uuid:{4}]在物理机[uuid:{5}]上",
    "arguments": [
      "volume.getUuid()",
      "vm.getUuid()",
      "vm.getRootVolumeUuid()",
      "rootHost",
      "volume.getUuid()",
      "dataHost"
    ],
    "line": 581,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "the data volume[name:%s, uuid:%s] is on the local storage[uuid:%s]; however,the host on which the data volume is has been deleted. Unable to recover this volume",
    "en_US": "the data volume[name:{0}, uuid:{1}] is on the local storage[uuid:{2}]; however,the host on which the data volume is has been deleted. Unable to recover this volume",
    "zh_CN": "数据云盘[name:{0}, uuid:{1}]在本地存储[uuid:{2}]上；然而物理机内的数据云盘已经被删除了",
    "arguments": [
      "vol.getName()",
      "vol.getUuid()",
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 809,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to recover the vm[uuid:%s, name:%s]. The vm\u0027s root volume is on the local storage[uuid:%s]; however, the host on which the root volume is has been deleted",
    "en_US": "unable to recover the vm[uuid:{0}, name:{1}]. The vm\u0027s root volume is on the local storage[uuid:{2}]; however, the host on which the root volume is has been deleted",
    "zh_CN": "不能恢复云主机[uuid:{0}, name:{1}]。云主机的根云盘在本地存储[uuid:{2}]上；然而物理机内的根云盘已经被删除了",
    "arguments": [
      "vm.getUuid()",
      "vm.getName()",
      "psuuid"
    ],
    "line": 851,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with data volumes on local storage. Need detach all data volumes first.",
    "en_US": "unable to live migrate vm[uuid:{0}] with data volumes on local storage. Need detach all data volumes first.",
    "zh_CN": "无法在本地存储上热迁移挂载了数据云盘的云主机[uuid:{0}]。需要先手动卸载所有数据云盘",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 888,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with local storage. Only linux guest is supported. Current platform is [%s]",
    "en_US": "unable to live migrate vm[uuid:{0}] with local storage. Only linux guest is supported. Current platform is [{1}]",
    "zh_CN": "无法在本地存储上热迁移云主机[uuid:{0}]。只有Linux类型的云主机支持该操作。当前类型为: [{1}]",
    "arguments": [
      "vm.getUuid()",
      "vm.getPlatform()"
    ],
    "line": 893,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with ISO on local storage. Need detach all ISO first.",
    "en_US": "unable to live migrate vm[uuid:{0}] with ISO on local storage. Need detach all ISO first.",
    "zh_CN": "",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 898,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate with local storage. The vm[uuid:%s] has volumes on local storage,to protect your data, please stop the vm and do the volume migration",
    "en_US": "unable to live migrate with local storage. The vm[uuid:{0}] has volumes on local storage,to protect your data, please stop the vm and do the volume migration",
    "zh_CN": "本地存储不能热迁移。云主机[uuid:{0}]在本地存储上有云盘，为了保护你的数据，请停止云主机做云盘迁移",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 929,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [%s]",
    "en_US": "To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [{0}]",
    "zh_CN": "要在本地主存储上创建数据云盘，必须用系统标签[{0}]指定创建数据云盘的物理机",
    "arguments": [
      "LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()"
    ],
    "line": 979,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "the host[uuid:%s] doesn\u0027t belong to the local primary storage[uuid:%s]",
    "en_US": "the host[uuid:{0}] doesn\u0027t belong to the local primary storage[uuid:{1}]",
    "zh_CN": "物理机[uuid:{0}] 不属于本地主存储[uuid:{1}]",
    "arguments": [
      "hostUuid",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 989,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "root image has been deleted, cannot reimage now",
    "en_US": "root image has been deleted, cannot reimage now",
    "zh_CN": "系统镜像已经被删除，无法重制云主机",
    "arguments": [],
    "line": 1782,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java"
  },
  {
    "raw": "cannot find flag file [%s] on host [%s], it might not mount correct path",
    "en_US": "cannot find flag file [{0}] on host [{1}], it might not mount correct path",
    "zh_CN": "",
    "arguments": [
      "makeInitializedFilePath()",
      "hostUuid"
    ],
    "line": 3117,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java"
  },
  {
    "raw": "KVM host[uuid: %s] fails to be added into local primary storage[uuid: %s], %s",
    "en_US": "KVM host[uuid: {0}] fails to be added into local primary storage[uuid: {1}], {2}",
    "zh_CN": "本地存储[uuid:{1}]添加物理机[uuid:{0}]失败，{2}",
    "arguments": [
      "context.getInventory().getUuid()",
      "priUuid",
      "reply.getError()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmFactory.java"
  },
  {
    "raw": "unable to create an empty volume[uuid:%s, name:%s] on the kvm host[uuid:%s]",
    "en_US": "unable to create an empty volume[uuid:{0}, name:{1}] on the kvm host[uuid:{2}]",
    "zh_CN": "不能在物理机[uuid:{2}]上创建空云盘[uuid:{0}, name:{1}]",
    "arguments": [
      "p.volume.getUuid()",
      "p.volume.getName()",
      "dstHostUuid"
    ],
    "line": 1196,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmMigrateVmFlow.java"
  },
  {
    "raw": "failed to download bits from the SFTP backup storage[hostname:%s, path: %s] to the local primary storage[uuid:%s, path: %s], %s",
    "en_US": "failed to download bits from the SFTP backup storage[hostname:{0}, path: {1}] to the local primary storage[uuid:{2}, path: {3}], {4}",
    "zh_CN": "从SFTP镜像服务器[hostname:{0}, path: {1}] 下载到本地存储[uuid:{2}, path: {3}]失败，{4}",
    "arguments": [
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java"
  },
  {
    "raw": "failed to upload bits from the local storage[uuid:%s, path:%s] to the SFTP backup storage[hostname:%s, path:%s], %s",
    "en_US": "failed to upload bits from the local storage[uuid:{0}, path:{1}] to the SFTP backup storage[hostname:{2}, path:{3}], {4}",
    "zh_CN": "从本地存储[uuid:{0}, path: {1}]上传到SFTP镜像服务器[hostname:{2}, path:{3}]失败, {4}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "backupStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 254,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java"
  },
  {
    "raw": "no local primary storage can satisfy conditions[state: %s, status: %s] or contain hosts satisfying conditions[state: %s, status: %s, size \u003e %s bytes]",
    "en_US": "no local primary storage can satisfy conditions[state: {0}, status: {1}] or contain hosts satisfying conditions[state: {2}, status: {3}, size \u003e {4} bytes]",
    "zh_CN": "",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()"
    ],
    "line": 157,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "no local primary storage in zone[uuid:%s] can satisfy conditions[state: %s, status: %s] or contain hosts satisfying conditions[state: %s, status: %s, size \u003e %s bytes]",
    "en_US": "no local primary storage in zone[uuid:{0}] can satisfy conditions[state: {1}, status: {2}] or contain hosts satisfying conditions[state: {3}, status: {4}, size \u003e {5} bytes]",
    "zh_CN": "",
    "arguments": [
      "spec.getRequiredZoneUuid()",
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "the required host[uuid:%s] cannot satisfy conditions[state: %s, status: %s, size \u003e %s bytes], or doesn\u0027t belong to a local primary storage satisfying conditions[state: %s, status: %s], or its cluster doesn\u0027t attach to any local primary storage",
    "en_US": "the required host[uuid:{0}] cannot satisfy conditions[state: {1}, status: {2}, size \u003e {3} bytes], or doesn\u0027t belong to a local primary storage satisfying conditions[state: {4}, status: {5}], or its cluster doesn\u0027t attach to any local primary storage",
    "zh_CN": "",
    "arguments": [
      "spec.getRequiredHostUuid()",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()",
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "required local primary storage[uuid:%s] cannot satisfy conditions[state: %s, status: %s], or hosts providing the primary storage don\u0027t satisfy conditions[state: %s, status: %s, size \u003e %s bytes]",
    "en_US": "required local primary storage[uuid:{0}] cannot satisfy conditions[state: {1}, status: {2}], or hosts providing the primary storage don\u0027t satisfy conditions[state: {3}, status: {4}, size \u003e {5} bytes]",
    "zh_CN": "",
    "arguments": [
      "spec.getRequiredPrimaryStorageUuid()",
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "{the physical capacity usage of the host[uuid:%s] has exceeded the threshold[%s]}",
    "en_US": "{the physical capacity usage of the host[uuid:{0}] has exceeded the threshold[{1}]}",
    "zh_CN": "",
    "arguments": [
      "ref.getHostUuid()",
      "physicalCapacityMgr.getRatio(ref.getPrimaryStorageUuid())"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "not supported",
    "en_US": "not supported",
    "zh_CN": "不支持",
    "arguments": [],
    "line": 1002,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "cannot reserve enough space for primary storage[uuid: %s] on host[uuid: %s], not enough physical capacity",
    "en_US": "cannot reserve enough space for primary storage[uuid: {0}] on host[uuid: {1}], not enough physical capacity",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "hostUuid"
    ],
    "line": 1104,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "cannot find proper hypervisorType for primary storage[uuid:%s] to handle image format or volume format[%s]",
    "en_US": "cannot find proper hypervisorType for primary storage[uuid:{0}] to handle image format or volume format[{1}]",
    "zh_CN": "对主存储[uuid:{0}]来说不能发现合适的管理程序类型来处理镜像格式或云盘格式[{1}]",
    "arguments": [
      "psUuid",
      "imageFormat"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "the mini storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the mini storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 226,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "can not determine which host",
    "en_US": "can not determine which host",
    "zh_CN": "",
    "arguments": [],
    "line": 449,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "host[uuid: %s] of mini primary storage[uuid: %s] doesn\u0027t have enough capacity[current: %s bytes, needed: %s]",
    "en_US": "host[uuid: {0}] of mini primary storage[uuid: {1}] doesn\u0027t have enough capacity[current: {2} bytes, needed: {3}]",
    "zh_CN": "",
    "arguments": [
      "hostUuid",
      "self.getUuid()",
      "ref.getAvailableCapacity()",
      "size"
    ],
    "line": 1118,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "no LocalStorageBackupStorageMediator supporting hypervisor[%s] and backup storage type[%s] ",
    "en_US": "no LocalStorageBackupStorageMediator supporting hypervisor[{0}] and backup storage type[{1}] ",
    "zh_CN": "没有LocalStorageBackupStorageMediator支持hypervisor[{0}]和镜像服务器类型[{1}]",
    "arguments": [
      "hvType",
      "bsType"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageFactory.java"
  },
  {
    "raw": "can not get cluster uuid of volume %s",
    "en_US": "can not get cluster uuid of volume {0}",
    "zh_CN": "",
    "arguments": [
      "volumeUuid"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageImageStoreBackend.java"
  },
  {
    "raw": "%s",
    "en_US": "{0}",
    "zh_CN": "{0}",
    "arguments": [
      "returnValue.error"
    ],
    "line": 736,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java"
  },
  {
    "raw": "no connected host found in the cluster[uuid:%s]",
    "en_US": "no connected host found in the cluster[uuid:{0}]",
    "zh_CN": "cluster[uuid:{0}]不存在已连接的物理机",
    "arguments": [
      "clusterUuid"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java"
  },
  {
    "raw": "cannot find backup storage[uuid:%s]",
    "en_US": "cannot find backup storage[uuid:{0}]",
    "zh_CN": "找不到镜像服务器[uuid:{0}]",
    "arguments": [
      "backupStorageUuid"
    ],
    "line": 1271,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java"
  },
  {
    "raw": "can not find volume[uuid: %s]",
    "en_US": "can not find volume[uuid: {0}]",
    "zh_CN": "找不到云盘[uuid: {0}]",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 1056,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java"
  },
  {
    "raw": "can not find any available host to resize volume[uuid: %s] on mini storage[uuid: %s]",
    "en_US": "can not find any available host to resize volume[uuid: {0}] on mini storage[uuid: {1}]",
    "zh_CN": "",
    "arguments": [
      "volume.getUuid()",
      "volume.getPrimaryStorageUuid()"
    ],
    "line": 723,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java"
  },
  {
    "raw": "can not find replication of volume %s on host %s",
    "en_US": "can not find replication of volume {0} on host {1}",
    "zh_CN": "",
    "arguments": [
      "resourceUuid",
      "hostUuid"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePathManagerImpl.java"
  },
  {
    "raw": "no candidate host with the scsi lun with enough cpu / memory or Enabled/Connected status",
    "en_US": "no candidate host with the scsi lun with enough cpu / memory or Enabled/Connected status",
    "zh_CN": "需要的lun所在的物理机都不满足cpu / memory 以及物理机状态的条件",
    "arguments": [],
    "line": 187,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "required cluster %s not attached to primary storage %s for volume %s create",
    "en_US": "required cluster {0} not attached to primary storage {1} for volume {2} create",
    "zh_CN": "",
    "arguments": [
      "clusterUuid",
      "msg.getPrimaryStorageUuid()",
      "volume.getUuid()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "can not find avaliable host on required cluster %s for volume %s create",
    "en_US": "can not find avaliable host on required cluster {0} for volume {1} create",
    "zh_CN": "",
    "arguments": [
      "clusterUuid",
      "volume.getUuid()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "cannot find an available host to execute command for primary storage[uuid: %s]",
    "en_US": "cannot find an available host to execute command for primary storage[uuid: {0}]",
    "zh_CN": "",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 347,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "can not allocate storage sync port on host %s: %s",
    "en_US": "can not allocate storage sync port on host {0}: {1}",
    "zh_CN": "",
    "arguments": [
      "hostUuid"
    ],
    "line": 378,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "expect operate on hosts[%s] but only host %s are connected and enabled",
    "en_US": "expect operate on hosts[{0}] but only host {1} are connected and enabled",
    "zh_CN": "",
    "arguments": [
      "hostUuids",
      "connectedEnabledHosts"
    ],
    "line": 490,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "there has been a nfs primary storage having url as %s in zone[uuid:%s]",
    "en_US": "there has been a nfs primary storage having url as {0} in zone[uuid:{1}]",
    "zh_CN": "区域[uuid:{1}]内已经存在 url 为 {0} 的 NFS 主存储",
    "arguments": [
      "url",
      "zoneUuid"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "found multiple CIDR",
    "en_US": "found multiple CIDR",
    "zh_CN": "返现多个CIDR",
    "arguments": [],
    "line": 65,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "invalid CIDR: %s",
    "en_US": "invalid CIDR: {0}",
    "zh_CN": "无效CIDR: {0}",
    "arguments": [
      "cidr"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "IP address[%s] is not in CIDR[%s]",
    "en_US": "IP address[{0}] is not in CIDR[{1}]",
    "zh_CN": "IP地址[{0}]没有在CIDR[{1}]内",
    "arguments": [
      "ipAddr",
      "cidr"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "there are %s running VMs on the NFS primary storage, please stop them and try again:\\n%s\\n",
    "en_US": "there are {0} running VMs on the NFS primary storage, please stop them and try again:\\n{1}\\n",
    "zh_CN": "在NFS主存储上有{0}个运行中的VM，请先手动关闭再尝试: \\n{1}\\n",
    "arguments": [
      "vms.size()",
      "StringUtils.join(vms, \"\\n\")"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "cannot find usable backend",
    "en_US": "cannot find usable backend",
    "zh_CN": "无法找到可用的NFS主存储后端",
    "arguments": [],
    "line": 227,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no usable backend found",
    "en_US": "no usable backend found",
    "zh_CN": "无法找到可用的NFS主存储后端",
    "arguments": [],
    "line": 286,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no host in Connected status to which nfs primary storage[uuid:%s, name:%s] attached found to revert volume[uuid:%s] to snapshot[uuid:%s, name:%s]",
    "en_US": "no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to snapshot[uuid:{3}, name:{4}]",
    "zh_CN": "没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到快照[uuid:{3}, name:{4}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getSnapshot().getUuid()",
      "msg.getSnapshot().getName()"
    ],
    "line": 426,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no host in Connected status to which nfs primary storage[uuid:%s, name:%s] attached found to revert volume[uuid:%s] to image[uuid:%s]",
    "en_US": "no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to image[uuid:{3}]",
    "zh_CN": "没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到镜像[uuid:{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getVolume().getRootImageUuid()"
    ],
    "line": 457,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running, Paused or Stopped, current state is %s",
    "en_US": "vm[uuid:{0}] is not Running, Paused or Stopped, current state is {1}",
    "zh_CN": "云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是{1}",
    "arguments": [
      "vol.getVmInstanceUuid()",
      "state"
    ],
    "line": 536,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "primary storage[uuid:%s] doesn\u0027t attach to any cluster",
    "en_US": "primary storage[uuid:{0}] doesn\u0027t attach to any cluster",
    "zh_CN": "主存储[uuid:{0}]没有挂载到任何集群",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 579,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] cannot find any usable host to create the data volume[uuid:%s, name:%s]",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] cannot find any usable host to create the data volume[uuid:{2}, name:{3}]",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}]无法找到任何可用的物理机以创建数据云盘[uuid:{2}, name:{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getVolume().getName()"
    ],
    "line": 809,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] cannot find hosts in attached clusters to perform the operation",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] cannot find hosts in attached clusters to perform the operation",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}]不能找到物理机挂载到集群，执行此操作",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1425,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}] 没有挂载到任何一个集群，或者挂载到集群的物理机均无法连接",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1392,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s] is not attached to any clusters, and cannot expunge the root volume[uuid:%s] of the VM[uuid:%s]",
    "en_US": "the NFS primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]",
    "zh_CN": "NFS主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除VM[uuid:{2}]的根云盘[uuid:{1}]",
    "arguments": [
      "psUuid",
      "vmUuid",
      "volumeUuid"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a Connected host to execute command for nfs primary storage[uuid:%s]",
    "en_US": "cannot find a Connected host to execute command for nfs primary storage[uuid:{0}]",
    "zh_CN": "对nfs主存储[uuid:{0}]来说不能发现一个可连接的物理机执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a connected host in cluster which ps [uuid: %s] attached",
    "en_US": "cannot find a connected host in cluster which ps [uuid: {0}] attached",
    "zh_CN": "",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:%s]",
    "en_US": "cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:{0}]",
    "zh_CN": "找不到一个和NFS主存储[uuid:{0}]处于已连接状态的物理机为其执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 297,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot get root image of volume[uuid:%s], may be it create from iso",
    "en_US": "cannot get root image of volume[uuid:{0}], may be it create from iso",
    "zh_CN": "",
    "arguments": [
      "msg.getVolume().getUuid()"
    ],
    "line": 673,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to attach a primary storage[uuid:%s, name:%s] to cluster[uuid:%s]. Kvm host in the cluster has qemu-img with version[%s]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[%s]. qemu-img version greater than %s is incompatible with versions less than %s, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "en_US": "unable to attach a primary storage[uuid:{0}, name:{1}] to cluster[uuid:{2}]. Kvm host in the cluster has qemu-img with version[{3}]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "zh_CN": "不能挂载主存储[uuid:{0}, name:{1}]到集群[uuid:{2}].集群中的物理机存在[{3}]版本qemu-img；但是主存储已经挂载到另一个物理机拥有[{4}]版本qemu-img的集群。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群",
    "arguments": [
      "inv.getUuid()",
      "inv.getName()",
      "clusterUuid",
      "versionInCluster",
      "otherVersion",
      "QCOW3_QEMU_IMG_VERSION",
      "QCOW3_QEMU_IMG_VERSION"
    ],
    "line": 241,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to create folder[installUrl:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "unable to create folder[installUrl:{0}] on kvm host[uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "",
    "arguments": [
      "cmd.getInstallUrl()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 316,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "no host in is Connected or primary storage[uuid:%s] attach no cluster",
    "en_US": "no host in is Connected or primary storage[uuid:{0}] attach no cluster",
    "zh_CN": "没有物理机处于Connected状态，或主存储[uuid:{0}]没有挂载到任何集群",
    "arguments": [
      "inv.getUuid()"
    ],
    "line": 394,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to ping nfs primary storage[uuid:%s] from host[uuid:%s],because %s. disconnect this host-ps connection",
    "en_US": "failed to ping nfs primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection",
    "zh_CN": "从物理机[uuid:{1}]Ping NFS主存储[uuid:{0}]失败，原因: {2}。断开该 物理机-主存储 连接",
    "arguments": [
      "psInv.getUuid()",
      "huuid",
      "reply.isSuccess() ? rsp.getError() : reply.getError()"
    ],
    "line": 433,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "The chosen host[uuid:%s] to perform storage migration is lost",
    "en_US": "The chosen host[uuid:{0}] to perform storage migration is lost",
    "zh_CN": "准备存储迁移的物理机[uuid:{0}]失联了",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 699,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to check existence of %s on nfs primary storage[uuid:%s], %s",
    "en_US": "failed to check existence of {0} on nfs primary storage[uuid:{1}], {2}",
    "zh_CN": "检查nfs主存储中是否存在{0}失败",
    "arguments": [
      "installPath",
      "inv.getUuid()",
      "rsp.getError()"
    ],
    "line": 835,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to create empty volume[uuid:%s,  name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "unable to create empty volume[uuid:{0},  name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "不能在物理机[uuid:{2}, ip:{3}]上创建空云盘[uuid:{0},  name:{1}]，因为{4}",
    "arguments": [
      "volume.getUuid()",
      "volume.getName()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 947,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to delete bits[%s] on nfs primary storage[uuid:%s], %s, will clean up installPath, pinv.getUuid(), rsp.getError()",
    "en_US": "failed to delete bits[{0}] on nfs primary storage[uuid:{1}], {2}, will clean up installPath, pinv.getUuid(), rsp.getError()",
    "zh_CN": "",
    "arguments": [
      "installPath",
      "pinv.getUuid()",
      "rsp.getError()"
    ],
    "line": 1051,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to revert volume[uuid:%s] to snapshot[uuid:%s] on kvm host[uuid:%s, ip:%s], %s",
    "en_US": "failed to revert volume[uuid:{0}] to snapshot[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}",
    "zh_CN": "回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到快照[uuid:{1}]的状态失败，{4}",
    "arguments": [
      "vol.getUuid()",
      "sinv.getUuid()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 1095,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to revert volume[uuid:%s] to image[uuid:%s] on kvm host[uuid:%s, ip:%s], %s",
    "en_US": "failed to revert volume[uuid:{0}] to image[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}",
    "zh_CN": "回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到镜像[uuid:{1}]，{4}",
    "arguments": [
      "vol.getUuid()",
      "vol.getRootImageUuid()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 1132,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "no hosts in the cluster[uuid:%s] are connected",
    "en_US": "no hosts in the cluster[uuid:{0}] are connected",
    "zh_CN": "",
    "arguments": [
      "clusterUuid"
    ],
    "line": 1270,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to download[%s] from SftpBackupStorage[hostname:%s] to nfs primary storage[uuid:%s, path:%s], %s",
    "en_US": "failed to download[{0}] from SftpBackupStorage[hostname:{1}] to nfs primary storage[uuid:{2}, path:{3}], {4}",
    "zh_CN": "从Sftp镜像服务器[hostname:{1}] 下载[{0}]到nfs主存储[uuid:{2}, path:{3}]失败，{4}",
    "arguments": [
      "backupStorageInstallPath",
      "greply.getHostname()",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java"
  },
  {
    "raw": "failed to upload bits from nfs primary storage[uuid:%s, path:%s] to SFTP backup storage[hostname:%s, path: %s], %s",
    "en_US": "failed to upload bits from nfs primary storage[uuid:{0}, path:{1}] to SFTP backup storage[hostname:{2}, path: {3}], {4}",
    "zh_CN": "从nfs主存储[uuid:{0}, path:{1}]上传数据到STFP镜像服务器[hostname:{2}, path: {3}]失败，{4}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "hostname",
      "backupStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java"
  },
  {
    "raw": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:%s] are disconnected",
    "en_US": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:{0}] are disconnected",
    "zh_CN": "找不到任何Connected的物理机去执行操作，看起来加载到shared mount point存储的集群上所有物理机都处于Disconnected状态",
    "arguments": [
      "this.primaryStorageUuid"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java"
  },
  {
    "raw": "primary storage[uuid: %s] has attached the scsi lun[wwid: %s]",
    "en_US": "primary storage[uuid: {0}] has attached the scsi lun[wwid: {1}]",
    "zh_CN": "",
    "arguments": [
      "sharedBlockVO.getSharedBlockGroupUuid()",
      "scsiLunVO.getWwid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid: %s] does not has additional qmp socket, it may because of the vm start without the global config[vm.additionalQmp] enabled, please make sure it enabled and reboot vm in zstack",
    "en_US": "the vm[uuid: {0}] does not has additional qmp socket, it may because of the vm start without the global config[vm.additionalQmp] enabled, please make sure it enabled and reboot vm in zstack",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "must specify at least one disk when add shared block group primary storage",
    "en_US": "must specify at least one disk when add shared block group primary storage",
    "zh_CN": "添加共享块存储时必须指定至少一个硬盘",
    "arguments": [],
    "line": 125,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "shared block[uuid:%s, diskUuid:%s, description:%s] already added to shared block group[uuid:%s]in new shared block group",
    "en_US": "shared block[uuid:{0}, diskUuid:{1}, description:{2}] already added to shared block group[uuid:{3}]in new shared block group",
    "zh_CN": "共享块[uuid:{0}, diskUuid:{1}, 描述:{2}]，已经添加到共享块组[uuid:{3}]",
    "arguments": [
      "vo.getUuid()",
      "vo.getDiskUuid()",
      "vo.getDescription()",
      "vo.getSharedBlockGroupUuid()"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "shared volume[uuid: %s] on shared block group primary storage can not resize",
    "en_US": "shared volume[uuid: {0}] on shared block group primary storage can not resize",
    "zh_CN": "SharedBlock主存储上的共享云盘[uuid: {0}]暂时不支持扩容",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 160,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "shared volume[uuid: %s] on shared block group primary storage has attached to not stopped vm instances[uuids: %s]",
    "en_US": "shared volume[uuid: {0}] on shared block group primary storage has attached to not stopped vm instances[uuids: {1}]",
    "zh_CN": "SharedBlock存储上的共享云盘[uuid: {0}]加载到了不是停止状态的虚拟机[uuid: {1}]，请先从虚拟机卸载或将虚拟机停止",
    "arguments": [
      "volumeUuid",
      "notStoppedVmUuids"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "the shared mount point primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the shared mount point primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "共享挂载点主存储[uuid:{0}, name:{1}]在挂载的集群中找不到任何可用的物理机来实例化云盘",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 301,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "can not found any cluster attached on shared block group primary storage[uuid: %S]",
    "en_US": "can not found any cluster attached on shared block group primary storage[uuid: %S]",
    "zh_CN": "找不到任何挂载了共享块主存储[uuid: %S]",
    "arguments": [
      "getSelfInventory().getUuid()"
    ],
    "line": 530,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "the shared block group primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the shared block group primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "SharedBlock主存储[uuid:{0}, name:{1}] 没有挂载到任何一个集群，或者挂载到集群的物理机均无法连接",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 880,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "empty migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "en_US": "empty migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "zh_CN": "",
    "arguments": [],
    "line": 1070,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "no volume in migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "en_US": "no volume in migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "zh_CN": "",
    "arguments": [],
    "line": 1076,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "the value[%s] is not power of 2",
    "en_US": "the value[{0}] is not power of 2",
    "zh_CN": "输入值[{0}]不是2的幂次",
    "arguments": [
      "newValue"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find an available host to execute command for shared block group primary storage[uuid:%s]",
    "en_US": "cannot find an available host to execute command for shared block group primary storage[uuid:{0}]",
    "zh_CN": "找不到加载了共享块存储的[uuid:{0}]可用的物理机",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 438,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has connected shared block to execute command for shared block group primary storage[uuid:%s]",
    "en_US": "cannot find a host which has connected shared block to execute command for shared block group primary storage[uuid:{0}]",
    "zh_CN": "找不到处于连接状态的加载了共享块存储[uuid:{0}]物理机执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 462,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "the image[uuid:%s, name: %s] is not available to download on any backup storage:\\n1. check if image is in status of Deleted\\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:%s]",
    "en_US": "the image[uuid:{0}, name: {1}] is not available to download on any backup storage:\\n1. check if image is in status of Deleted\\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:{2}]",
    "zh_CN": "不能从镜像服务器中下载镜像[uuid:%s, name: %s]\\n1.检查镜像是否处于被删除状态\\n2.检查镜像处于就绪状态的镜像服务器是否挂载到区域[uuid:{2}]",
    "arguments": [
      "img.getUuid()",
      "img.getName()",
      "self.getZoneUuid()"
    ],
    "line": 1104,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running, Paused or Stopped, current state[%s]",
    "en_US": "vm[uuid:{0}] is not Running, Paused or Stopped, current state[{1}]",
    "zh_CN": "云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是[{1}]",
    "arguments": [
      "vol.getVmInstanceUuid()",
      "state"
    ],
    "line": 832,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "the volume[uuid;%s] is attached to a VM[uuid:%s] which is in state of %s, cannot do the snapshot merge",
    "en_US": "the volume[uuid;{0}] is attached to a VM[uuid:{1}] which is in state of {2}, cannot do the snapshot merge",
    "zh_CN": "云盘[uuid;{0}] 挂载到处于{2}状态的虚拟机，不能合并快照",
    "arguments": [
      "volume.getUuid()",
      "volume.getVmInstanceUuid()",
      "state"
    ],
    "line": 986,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "not support online merge snapshot for shareable volume[uuid: %s] on sharedblock",
    "en_US": "not support online merge snapshot for shareable volume[uuid: {0}] on sharedblock",
    "zh_CN": "不支持对共享块存储上的共享云盘[uuid: {1}]做在线合并快照，请关机或卸载后操作",
    "arguments": [
      "volume.getUuid()"
    ],
    "line": 1075,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "the image[uuid: %s, name:%s] is not found on any backup storage",
    "en_US": "the image[uuid: {0}, name:{1}] is not found on any backup storage",
    "zh_CN": "",
    "arguments": [
      "img.getUuid()",
      "img.getName()"
    ],
    "line": 1120,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "hosts[uuid:%s] have the disk uuid of shared block, but actually different storage.",
    "en_US": "hosts[uuid:{0}] have the disk uuid of shared block, but actually different storage.",
    "zh_CN": "物理机[uuid:{0}]已经加载了相同uuid的共享块，但实际上是不同的存储",
    "arguments": [
      "ret.firstAccessHosts.stream().map( h -\u003e h.hostUuid).collect(Collectors.toList())"
    ],
    "line": 1561,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "not support convert thin volume to thick volume yet",
    "en_US": "not support convert thin volume to thick volume yet",
    "zh_CN": "",
    "arguments": [],
    "line": 1867,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "expected status is %s and current status",
    "en_US": "expected status is {0} and current status",
    "zh_CN": "",
    "arguments": [],
    "line": 1921,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared block group storage[uuid:%s] are disconnected",
    "en_US": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared block group storage[uuid:{0}] are disconnected",
    "zh_CN": "找不到任何可以执行操作的已连接状态的物理机，所有的共享存储[uuid:{0}]挂载的集群下的物理机都处于已失联状态",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2372,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find volume need to operate shared block group primary storage",
    "en_US": "can not find volume need to operate shared block group primary storage",
    "zh_CN": "找不到能进行共享块存储操作的云盘",
    "arguments": [],
    "line": 2344,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "KVM host which volume[uuid%s] attached disconnected with the shared block group storage[uuid:%s]",
    "en_US": "KVM host which volume[uuid{0}] attached disconnected with the shared block group storage[uuid:{1}]",
    "zh_CN": "云盘[uuid:{0}]所处的挂载了共享块存储[uuid:{1}]物理机均处于已失联状态",
    "arguments": [
      "volumeInventory.getUuid()",
      "self.getUuid()"
    ],
    "line": 2352,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find qualified kvm host for shared block group primary storage[uuid: %s]",
    "en_US": "can not find qualified kvm host for shared block group primary storage[uuid: {0}]",
    "zh_CN": "无法找到满足条件的物理机来对共享块存储[uuid: {0}]进行操作",
    "arguments": [
      "psUuid"
    ],
    "line": 2361,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "VM[uuid:%s] has multiple ISOs from different primary storage: %s",
    "en_US": "VM[uuid:{0}] has multiple ISOs from different primary storage: {1}",
    "zh_CN": "VM[uuid:{0}]挂载了来自不同主存储:{1}的ISO",
    "arguments": [
      "spec.getVmInventory().getUuid()",
      "String.join(\",\", psUuids)"
    ],
    "line": 2779,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "QCow2 shared volume[uuid:%s] is not supported",
    "en_US": "QCow2 shared volume[uuid:{0}] is not supported",
    "zh_CN": "",
    "arguments": [
      "volume.getUuid()"
    ],
    "line": 2954,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find any available host to resize volume[uuid: %s] on shared block group primary storage[uuid: %s]",
    "en_US": "can not find any available host to resize volume[uuid: {0}] on shared block group primary storage[uuid: {1}]",
    "zh_CN": "无法找到合适的物理机来对共享块存储[uuid: {1}]上的云盘[uuid: {0}]执行扩容",
    "arguments": [
      "volumeVO.getUuid()",
      "volumeVO.getPrimaryStorageUuid()"
    ],
    "line": 3819,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "the host[uuid: %s] running on is not available to resize volume[uuid: %s] on shared block group primary storage[uuid: %s]",
    "en_US": "the host[uuid: {0}] running on is not available to resize volume[uuid: {1}] on shared block group primary storage[uuid: {2}]",
    "zh_CN": "共享块存储[uuid: {2}]上的云盘[uuid : {1}]运行在物理机[uuid : {0}]上，但状态无法执行扩容操作",
    "arguments": [
      "struct.getVmHostUuid()",
      "volumeVO.getUuid()",
      "volumeVO.getPrimaryStorageUuid()"
    ],
    "line": 3825,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find any available host to take snapshot for volume[uuid: %s] on shared block group primary storage[uuid: %s]",
    "en_US": "can not find any available host to take snapshot for volume[uuid: {0}] on shared block group primary storage[uuid: {1}]",
    "zh_CN": "无法找到合适的物理机来对共享块存储[uuid : {1}]上的云盘[uuid: {0}]执行快照操作",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 3943,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find hosts both connect to primary storage[uuid: %s] and primary storage[uuid: %s]",
    "en_US": "can not find hosts both connect to primary storage[uuid: {0}] and primary storage[uuid: {1}]",
    "zh_CN": "无法找到同时连接主存储[uuid: {0}]和主存储[uuid: {1}]的物理机",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 4001,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "only support full",
    "en_US": "only support full",
    "zh_CN": "共享块存储目前只支持全量快照",
    "arguments": [],
    "line": 3956,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find any available host to migrate volume[uuid: %s] between shared block group primary storage[uuid: %s] and [uuid: %s]",
    "en_US": "can not find any available host to migrate volume[uuid: {0}] between shared block group primary storage[uuid: {1}] and [uuid: {2}]",
    "zh_CN": "无法找到合适的物理机来将云盘[uuid: {0}]在共享块存储[uuid : {1}]和共享块存储[uuid: {2}]之间迁移",
    "arguments": [
      "msg.getMigrateVolumeStructs().get(0).volumeUuid",
      "msg.getPrimaryStorageUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 3984,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find any available host to migrate for volume[uuid: %s] on shared block group primary storage[uuid: %s] and [uuid: %s]",
    "en_US": "can not find any available host to migrate for volume[uuid: {0}] on shared block group primary storage[uuid: {1}] and [uuid: {2}]",
    "zh_CN": "无法找到合适的物理机来将云盘[uuid: {0}]在共享块存储[uuid : {1}]和共享块存储[uuid: {2}]之间迁移",
    "arguments": [
      "msg.getMigrateVolumeStructs().get(0).volumeUuid",
      "msg.getTargetPrimaryStorageUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 3993,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "cannot find any connected host to perform the operation, it seems all KVM hosts attached with the shared block group storage[uuid:%s] are disconnected",
    "en_US": "cannot find any connected host to perform the operation, it seems all KVM hosts attached with the shared block group storage[uuid:{0}] are disconnected",
    "zh_CN": "无法找到任何已连接的物理机来执行操作，所有连接共享块存储[uuid: {1}]的物理机均处于失联状态",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 4045,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "get null install path in snapshot for vm %s",
    "en_US": "get null install path in snapshot for vm {0}",
    "zh_CN": "",
    "arguments": [
      "vmVolumesStruct.vmInstanceVO.getUuid()"
    ],
    "line": 4386,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "migrate volume without snapshot on shared block is not support to cancel.",
    "en_US": "migrate volume without snapshot on shared block is not support to cancel.",
    "zh_CN": "",
    "arguments": [],
    "line": 37,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkCancelMigrateVolumeFlow.java"
  },
  {
    "raw": "found trashId(%s) in PrimaryStorage [%s] for the migrate installPath[%s]. Please clean it first by \u0027APICleanUpTrashOnPrimaryStorageMsg\u0027 if you insist to migrate the volume[%s]",
    "en_US": "found trashId({0}) in PrimaryStorage [{1}] for the migrate installPath[{2}]. Please clean it first by \u0027APICleanUpTrashOnPrimaryStorageMsg\u0027 if you insist to migrate the volume[{3}]",
    "zh_CN": "在主存储[{1}]的回收数据({0})中己存在要迁移的目标路径[{2}]，如果要继续迁移云盘[{3}]，请先调用\u0027APICleanUpTrashOnPrimaryStorageMsg\u0027来手动清理该回收数据",
    "arguments": [
      "reply1.getTrashId()",
      "dstPsUuid",
      "dstVolumeFolderPath",
      "reply1.getResourceUuid()"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "there are not enough capacity for volume[uuid: %s] storage migration, required capacity: %s, current available physical capacity: %s",
    "en_US": "there are not enough capacity for volume[uuid: {0}] storage migration, required capacity: {1}, current available physical capacity: {2}",
    "zh_CN": "对云盘[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量，但现在只有{2}的空余容量",
    "arguments": [
      "volumeUuid",
      "volumeVO.getActualSize()",
      "dstPsInv.getAvailablePhysicalCapacity()"
    ],
    "line": 263,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\\n1. whether the backup storage is attached to the zone[uuid:%s]\\n2. whether the backup storage is in connected status; try to reconnect it if not",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\\n1. whether the backup storage is attached to the zone[uuid:{2}]\\n2. whether the backup storage is in connected status; try to reconnect it if not",
    "zh_CN": "在所有的已连接区域[uuid:{1}]的镜像服务器未找到镜像[uuid:{0}]。建议进行如下检查: \\n1.镜像服务器是否连接到区域[uuid:{2}]\\n2.镜像服务器是否是已连接状态，如果不是尝试重新连接",
    "arguments": [
      "imageUuid",
      "zoneUuid",
      "zoneUuid"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "there are not enough capacity for image[uuid: %s] download while volume[uuid: %s] storage migration, required capacity: %s, current available physical capacity: %s",
    "en_US": "there are not enough capacity for image[uuid: {0}] download while volume[uuid: {1}] storage migration, required capacity: {2}, current available physical capacity: {3}",
    "zh_CN": "对云盘[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量来下载镜像cache，但现在只有{2}的空余容量",
    "arguments": [
      "image.getUuid()",
      "volumeUuid",
      "image.getActualSize()",
      "dstPsInv.getAvailablePhysicalCapacity()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "data on source ps[uuid: %s] has been discarded, not support rollback",
    "en_US": "data on source ps[uuid: {0}] has been discarded, not support rollback",
    "zh_CN": "源主存储[uuid:{0}]上的数据已经被清理，无法回滚",
    "arguments": [
      "srcPsUuid"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkRollbackMigrateVolumeFlow.java"
  },
  {
    "raw": "hosts[uuid:%s] have the same mount path, but actually mount different storage.",
    "en_US": "hosts[uuid:{0}] have the same mount path, but actually mount different storage.",
    "zh_CN": "物理机[uuid:{0}]有相同挂载路径，但是实际上挂载在不同的存储上",
    "arguments": [
      "ret.firstAccessHostUuids"
    ],
    "line": 1673,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "host[uuid:%s] might mount storage which is different from SMP[uuid:%s], please check it",
    "en_US": "host[uuid:{0}] might mount storage which is different from SMP[uuid:{1}], please check it",
    "zh_CN": "",
    "arguments": [
      "msg.getHostUuid()",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 1837,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "not supported operation",
    "en_US": "not supported operation",
    "zh_CN": "不支持的操作",
    "arguments": [],
    "line": 497,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java"
  },
  {
    "raw": "the SMP primary storage[uuid:%s] is not attached to any clusters, and cannot expunge the root volume[uuid:%s] of the VM[uuid:%s]",
    "en_US": "the SMP primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]",
    "zh_CN": "SMP主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除云主机[uuid:{2}]的根云盘[uuid:{1}]",
    "arguments": [
      "psUuid",
      "vmUuid",
      "volumeUuid"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a Connected host to execute command for smp primary storage[uuid:%s]",
    "en_US": "cannot find a Connected host to execute command for smp primary storage[uuid:{0}]",
    "zh_CN": "找不到一个已连接状态的物理机为SMP主存储[uuid:{0}]执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:%s]",
    "en_US": "cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:{0}]",
    "zh_CN": "找不到一个和SMP主存储[uuid:{0}]处于已连接状态的物理机为其执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 320,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": " the url contains an invalid folder[/dev or /proc or /sys]",
    "en_US": " the url contains an invalid folder[/dev or /proc or /sys]",
    "zh_CN": "URL包含了一个无效的目录[/dev or /proc or /sys]",
    "arguments": [],
    "line": 25,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SharedMountPointApiInterceptor.java"
  },
  {
    "raw": "Can not take memory snapshot, expected vm states are [%s, %s]",
    "en_US": "Can not take memory snapshot, expected vm states are [{0}, {1}]",
    "zh_CN": "",
    "arguments": [
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is in state %s, cannot revert volume to it",
    "en_US": "volume snapshot[uuid:{0}] is in state {1}, cannot revert volume to it",
    "zh_CN": "云盘快照[uuid:{0}]出于状态{1}，不能恢复云盘到该快照状态",
    "arguments": [
      "msg.getUuid()",
      "state"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "original volume for snapshot[uuid:%s] has been deleted, cannot revert volume to it",
    "en_US": "original volume for snapshot[uuid:{0}] has been deleted, cannot revert volume to it",
    "zh_CN": "快照[uuid:{0}]的原版云盘已经被删除，不能恢复云盘到该快照",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 160,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "not support delete snapshots on different volumes[uuid: %s, %s]",
    "en_US": "not support delete snapshots on different volumes[uuid: {0}, {1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()",
      "snapshotVO.getVolumeUuid()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "can not find volume uuid for snapshosts[uuid: %s]",
    "en_US": "can not find volume uuid for snapshosts[uuid: {0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuids()"
    ],
    "line": 182,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "Unsupported maximum snapshot number (%d) for volume [uuid:%s]",
    "en_US": "Unsupported maximum snapshot number ({0}) for volume [uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "maxIncrementalSnapshotNum",
      "vo.getVolumeUuid()"
    ],
    "line": 521,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot ask primary storage[uuid:%s] for volume snapshot capability, see detail [%s]",
    "en_US": "cannot ask primary storage[uuid:{0}] for volume snapshot capability, see detail [{1}]",
    "zh_CN": "",
    "arguments": [
      "vol.getUuid()",
      "reply.getError()"
    ],
    "line": 618,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "primary storage[uuid:%s] doesn\u0027t support volume snapshot; cannot create snapshot for volume[uuid:%s]",
    "en_US": "primary storage[uuid:{0}] doesn\u0027t support volume snapshot; cannot create snapshot for volume[uuid:{1}]",
    "zh_CN": "主存储[uuid:{0}]不能支持云盘快照，不能为云盘[uuid:{1}]创建快照",
    "arguments": [
      "primaryStorageUuid",
      "vol.getUuid()"
    ],
    "line": 814,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot find type for primaryStorage [%s]",
    "en_US": "cannot find type for primaryStorage [{0}]",
    "zh_CN": "",
    "arguments": [
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 780,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot find snapshot: %s",
    "en_US": "cannot find snapshot: {0}",
    "zh_CN": "",
    "arguments": [
      "uuid"
    ],
    "line": 877,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot find volume snapshot[uuid:%s, name:%s], it may have been deleted by previous operation",
    "en_US": "cannot find volume snapshot[uuid:{0}, name:{1}], it may have been deleted by previous operation",
    "zh_CN": "不能创建云盘快照[uuid:{0}, name:{1}]，该快照可能已经被以前的操作删除",
    "arguments": [
      "currentRoot.getUuid()",
      "currentRoot.getName()"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "failed to change status of volume snapshot[uuid:%s, name:%s] by status event[%s]",
    "en_US": "failed to change status of volume snapshot[uuid:{0}, name:{1}] by status event[{2}]",
    "zh_CN": "通过状态事件[{2}]改变云盘快照[uuid:{0}, name:{1}]失败",
    "arguments": [
      "failSnapshot.getUuid()",
      "failSnapshot.getName()",
      "evt"
    ],
    "line": 759,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "unable to reset volume[uuid:%s] to snapshot[uuid:%s], the vm[uuid:%s] volume attached to is not in Stopped state, current state is %s",
    "en_US": "unable to reset volume[uuid:{0}] to snapshot[uuid:{1}], the vm[uuid:{2}] volume attached to is not in Stopped state, current state is {3}",
    "zh_CN": "不能重置云盘[uuid:{0}]到快照[uuid:{1}]状态，云盘的虚拟机[uuid:{2}]未处于停止状态，当前状态是{3}",
    "arguments": [
      "volumeInventory.getUuid()",
      "currentRoot.getUuid()",
      "vmUuid",
      "state"
    ],
    "line": 1465,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "snapshot(s) %s in the group has been deleted, can only revert one by one.",
    "en_US": "snapshot(s) {0} in the group has been deleted, can only revert one by one.",
    "zh_CN": "快照组里的快照{0}已经被删除了，仅能单盘恢复。",
    "arguments": [
      "String.join(\", \", deletedSnapshotInfos)"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java"
  },
  {
    "raw": "volume(s) %s is no longer attached, can only revert one by one. If you need to group revert, please re-attach it.",
    "en_US": "volume(s) {0} is no longer attached, can only revert one by one. If you need to group revert, please re-attach it.",
    "zh_CN": "云盘{0}已被卸载，仅能单盘恢复；如果需要整组恢复，请重新加载再执行操作",
    "arguments": [
      "String.join(\", \", detachedVolInfos)"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java"
  },
  {
    "raw": "new volume(s) %s attached after snapshot point, can only revert one by one. If you need to group revert, please detach it.",
    "en_US": "new volume(s) {0} attached after snapshot point, can only revert one by one. If you need to group revert, please detach it.",
    "zh_CN": "在快照点之后加载了新的云盘{0}，仅能单盘恢复；如果需要整组恢复，请先卸载再执行操作",
    "arguments": [
      "volInfos"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java"
  },
  {
    "raw": "Can\u0027t attach volume to VM, no qualified cluster",
    "en_US": "Can\u0027t attach volume to VM, no qualified cluster",
    "zh_CN": "不能加载云盘到虚拟机上，没有可用集群",
    "arguments": [],
    "line": 269,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not in status Ready, current is %s, can\u0027t create snapshot",
    "en_US": "volume[uuid:{0}] is not in status Ready, current is {1}, can\u0027t create snapshot",
    "zh_CN": "云盘[uuid:{0}]未出于就绪状态，当前是{1}，不能创建快照",
    "arguments": [
      "vol.getUuid()",
      "vol.getStatus()"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s, type:%s], can\u0027t create snapshot",
    "en_US": "volume[uuid:{0}, type:{1}], can\u0027t create snapshot",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()",
      "type"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is root volume",
    "en_US": "volume[uuid:{0}] is root volume",
    "zh_CN": "",
    "arguments": [
      "msg.getRootVolumeUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "Can not take memory snapshot, vm current state[%s], but expect state are [%s, %s]",
    "en_US": "Can not take memory snapshot, vm current state[{0}], but expect state are [{1}, {2}]",
    "zh_CN": "",
    "arguments": [
      "vmvo.getState().toString()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is not in status of deleted. This is operation is to recover a deleted data volume",
    "en_US": "the volume[uuid:{0}] is not in status of deleted. This is operation is to recover a deleted data volume",
    "zh_CN": "云盘[uuid:{0}]未处于删除状态。此操作将覆盖一个被删除的数据云盘",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is in status of deleted, cannot do the operation",
    "en_US": "the volume[uuid:{0}] is in status of deleted, cannot do the operation",
    "zh_CN": "云盘[uuid:{0}]已经被删除，不能执行此操作",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 296,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not %s, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not {1}, it\u0027s {2}",
    "zh_CN": "镜像[uuid:{0}]不是{1}，而是{2}",
    "arguments": [
      "msg.getImageUuid()",
      "ImageMediaType.DataVolumeTemplate",
      "type"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "镜像不能启用，此镜像是{1}",
    "arguments": [
      "img.getUuid()",
      "img.getState()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "镜像未准备就绪，此镜像是{1}",
    "arguments": [
      "img.getUuid()",
      "img.getStatus()"
    ],
    "line": 176,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "DataVolumeFromVolumeTemplate not support Shareable",
    "en_US": "DataVolumeFromVolumeTemplate not support Shareable",
    "zh_CN": "",
    "arguments": [],
    "line": 182,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is Root volume, can not be attach to vm",
    "en_US": "volume[uuid:{0}] is Root volume, can not be attach to vm",
    "zh_CN": "云盘[uuid:{0}]是一个根云盘，不能被手动挂载到其他云主机",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is in state[%s], data volume can only be attached when state is %s",
    "en_US": "volume[uuid:{0}] is in state[{1}], data volume can only be attached when state is {2}",
    "zh_CN": "云盘[uuid:{0}]处于[{1}]状态，数据云盘只能在处于{2}状态的时候挂载",
    "arguments": [
      "msg.getVolumeUuid()",
      "state",
      "VolumeState.Enabled"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is in status[%s], data volume can only be attached when status is %s or %S",
    "en_US": "volume[uuid:{0}] is in status[{1}], data volume can only be attached when status is {2} or %S",
    "zh_CN": "云盘[uuid:{0}]处于[{1}]，数据云盘只能在处于{2}或%S状态的时候挂载",
    "arguments": [
      "msg.getVolumeUuid()",
      "status",
      "VolumeStatus.Ready",
      "VolumeStatus.NotInstantiated"
    ],
    "line": 209,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] is not attached to any vm, can\u0027t detach",
    "en_US": "data volume[uuid:{0}] is not attached to any vm, can\u0027t detach",
    "zh_CN": "数据云盘没有被挂载到任何云主机上，不能卸载",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "to detach shareable data volume[uuid:%s], vm uuid is needed.",
    "en_US": "to detach shareable data volume[uuid:{0}], vm uuid is needed.",
    "zh_CN": "卸载共享数据云盘[uuid:{0}]需要虚拟机的uuid",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s, type:%s] can\u0027t detach it",
    "en_US": "the volume[uuid:{0}, name:{1}, type:{2}] can\u0027t detach it",
    "zh_CN": "",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()",
      "vol.getType()"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] doesn\u0027t support to online attach volume[%s] on the basis of that the image platform type of the vm is other ",
    "en_US": "the vm[uuid:{0}] doesn\u0027t support to online attach volume[{1}] on the basis of that the image platform type of the vm is other ",
    "zh_CN": "云主机[uuid:{0}]不支持在线挂载云盘[{1}]。因为镜像平台类型和云主机平台类型不一致",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getVolumeUuid()"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s] is Root Volume, can\u0027t attach it",
    "en_US": "the volume[uuid:{0}, name:{1}] is Root Volume, can\u0027t attach it",
    "zh_CN": "不能挂载根云盘[uuid:{0}, name:{1}]",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()"
    ],
    "line": 287,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] is Disabled, can\u0027t attach",
    "en_US": "data volume[uuid:{0}] is Disabled, can\u0027t attach",
    "zh_CN": "数据云盘已被禁用，不能挂载",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] has been attached to some vm, can\u0027t attach again",
    "en_US": "data volume[uuid:{0}] has been attached to some vm, can\u0027t attach again",
    "zh_CN": "数据云盘[uuid:{0}]已经被加载上云主机了，不能再次加载",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume can only be attached when status is [%s, %s], current is %s",
    "en_US": "data volume can only be attached when status is [{0}, {1}], current is {2}",
    "zh_CN": "数据云盘仅能当处于[{0}, {1}]状态挂载，当前状态是{2}",
    "arguments": [
      "VolumeStatus.Ready",
      "VolumeStatus.NotInstantiated",
      "vol.getStatus()"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] has format[%s] that can only be attached to hypervisor[%s], but vm[uuid:%s] has hypervisor type[%s]. Can\u0027t attach",
    "en_US": "data volume[uuid:{0}] has format[{1}] that can only be attached to hypervisor[{2}], but vm[uuid:{3}] has hypervisor type[{4}]. Can\u0027t attach",
    "zh_CN": "只有[{1}]格式的数据云盘[uuid:{0}]才能被挂载到管理程序[{2}]，但是虚拟机是[{4}]类型的管理程序，数据云盘不能挂载到该虚拟机",
    "arguments": [
      "vol.getUuid()",
      "vol.getFormat()",
      "hvTypes",
      "msg.getVmInstanceUuid()",
      "hvType"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "hypervisor[%s] only allows max %s data volumes to be attached to a single vm; there have been %s data volumes attached to vm[uuid:%s]",
    "en_US": "hypervisor[{0}] only allows max {1} data volumes to be attached to a single vm; there have been {2} data volumes attached to vm[uuid:{3}]",
    "zh_CN": "[{0}]管理程序仅允许最大不超过{1}数据云盘挂载到单个虚拟机。{2} data volumes已经挂载到虚拟机[uuid:{3}]",
    "arguments": [
      "hvType",
      "maxDataVolumeNum",
      "count",
      "msg.getVmInstanceUuid()"
    ],
    "line": 326,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "it\u0027s not allowed to backup root volume, uuid:%s",
    "en_US": "it\u0027s not allowed to backup root volume, uuid:{0}",
    "zh_CN": "备份根云盘不被允许，uuid:{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 338,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "unexpected disk size settings",
    "en_US": "unexpected disk size settings",
    "zh_CN": "",
    "arguments": [],
    "line": 347,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s, type:%s] can\u0027t be deleted",
    "en_US": "volume[uuid:{0}, type:{1}] can\u0027t be deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getVolumeUuid()",
      "type"
    ],
    "line": 365,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is already in status of deleted",
    "en_US": "volume[uuid:{0}] is already in status of deleted",
    "zh_CN": "云盘[uuid:{0}]早已处于被删除状态",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 370,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "it\u0027s not allowed to change state of root volume, uuid:%s",
    "en_US": "it\u0027s not allowed to change state of root volume, uuid:{0}",
    "zh_CN": "不能改变根云盘状态，uuid:{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 384,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s] is not deleted yet, can\u0027t expunge it",
    "en_US": "the volume[uuid:{0}, name:{1}] is not deleted yet, can\u0027t expunge it",
    "zh_CN": "云盘[uuid:{0}, name:{1}]仍未被删除，不能清除该云盘",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 687,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] has been deleted on all backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] has been deleted on all backup storage",
    "zh_CN": "镜像[uuid:{0}, name:{1}]已经从所有的镜像服务器中删除",
    "arguments": [
      "template.getUuid()",
      "template.getName()"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "cannot find a backup storage on which the image[uuid:%s] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:%s] is",
    "en_US": "cannot find a backup storage on which the image[uuid:{0}] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:{1}] is",
    "zh_CN": "无法找到一个镜像[uuid:{0}]所在的镜像服务器符合全部的下列条件: 状态启动[state:Enabled]，已连接[status:Connected]，被挂载到主存储[uuid:{1}]所在的区域中",
    "arguments": [
      "template.getUuid()",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "there should not be more than one %s implementation.",
    "en_US": "there should not be more than one {0} implementation.",
    "zh_CN": "不允许超过一种实现",
    "arguments": [
      "VolumeFactory.class.getSimpleName()"
    ],
    "line": 695,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "volume[uuid:%s] can not found",
    "en_US": "volume[uuid:{0}] can not found",
    "zh_CN": "",
    "arguments": [
      "volumeUuid"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "not support take snapshots volume[uuid:%s, uuid:%s] on different vms[uuid:%s, uuid:%s]",
    "en_US": "not support take snapshots volume[uuid:{0}, uuid:{1}] on different vms[uuid:{2}, uuid:{3}]",
    "zh_CN": "",
    "arguments": [
      "volumeUuid",
      "volumeVOS.get(0).getUuid()",
      "volumeVO.getVmInstanceUuid()",
      "volumeVOS.get(0).getVmInstanceUuid()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not ready",
    "en_US": "volume[uuid:{0}] is not ready",
    "zh_CN": "",
    "arguments": [
      "volumeUuid"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "state of vm[uuid: %s] is %s, not allowed to take snapshots",
    "en_US": "state of vm[uuid: {0}] is {1}, not allowed to take snapshots",
    "zh_CN": "",
    "arguments": [
      "vmInstanceVO.getUuid()",
      "vmInstanceVO.getState()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not data volume",
    "en_US": "volume[uuid:{0}] is not data volume",
    "zh_CN": "云盘[uuid:{0}]不是数据云盘",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not root volume",
    "en_US": "volume[uuid:{0}] is not root volume",
    "zh_CN": "云盘[uuid:{0}]不是根云盘",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "SharedVolume cannot be set bandwidth.",
    "en_US": "SharedVolume cannot be set bandwidth.",
    "zh_CN": "共享云盘不允许设置带宽",
    "arguments": [],
    "line": 174,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Cannot shrink [%s] volume[uuid:%s]\u0027s size",
    "en_US": "Cannot shrink [{0}] volume[uuid:{1}]\u0027s size",
    "zh_CN": "不能缩小云盘[uuid:{1}]的大小",
    "arguments": [
      "vo.getType()",
      "vo.getUuid()"
    ],
    "line": 182,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Minimum increase size should be larger than 4MB",
    "en_US": "Minimum increase size should be larger than 4MB",
    "zh_CN": "最小扩容量需要大于4MB",
    "arguments": [],
    "line": 189,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Expansion operation not allowed at all host disable",
    "en_US": "Expansion operation not allowed at all host disable",
    "zh_CN": "扩展操作不被允许在所有不可用的物理机上进行",
    "arguments": [],
    "line": 213,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Expansion operation not allowed at host disable",
    "en_US": "Expansion operation not allowed at host disable",
    "zh_CN": "扩展操作不被允许在不可用的物理机上进行",
    "arguments": [],
    "line": 200,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "shared volume[uuid: %s] has attached to not stopped vm instances[uuids: %s]",
    "en_US": "shared volume[uuid: {0}] has attached to not stopped vm instances[uuids: {1}]",
    "zh_CN": "",
    "arguments": [
      "vo.getUuid()",
      "notStoppedVmUuids"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "no resource type[%s] found in tag system",
    "en_US": "no resource type[{0}] found in tag system",
    "zh_CN": "标签系统中不存在[{0}]资源类型",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "tag[uuid:%s] is an inherent system tag, can not be removed",
    "en_US": "tag[uuid:{0}] is an inherent system tag, can not be removed",
    "zh_CN": "固有系统标签[uuid:{0}]禁止移除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "The argument :\u0027resourceType\u0027 doesn\u0027t match uuid",
    "en_US": "The argument :\u0027resourceType\u0027 doesn\u0027t match uuid",
    "zh_CN": "参数: 资源类型（resourceType）与UUID不匹配",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "Duplicated Tag[tag:%s, type:%s, resourceType:%s, resourceUuid:%s]",
    "en_US": "Duplicated Tag[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]",
    "zh_CN": "标签[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]重复",
    "arguments": [
      "tag",
      "type",
      "resourceType",
      "resourceUuid"
    ],
    "line": 207,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "no system tag matches[%s] for resourceType[%s]",
    "en_US": "no system tag matches[{0}] for resourceType[{1}]",
    "zh_CN": "没有系统标签[{0}]与资源类型[{1}]匹配",
    "arguments": [
      "tag",
      "resourceType"
    ],
    "line": 645,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "no system tag matches %s",
    "en_US": "no system tag matches {0}",
    "zh_CN": "没有找到匹配{0}的系统标签",
    "arguments": [
      "tag"
    ],
    "line": 818,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "tag[%s] is only for admin",
    "en_US": "tag[{0}] is only for admin",
    "zh_CN": "",
    "arguments": [
      "tag"
    ],
    "line": 847,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "cannot update simple tag pattern format",
    "en_US": "cannot update simple tag pattern format",
    "zh_CN": "",
    "arguments": [],
    "line": 85,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "you can only update token name",
    "en_US": "you can only update token name",
    "zh_CN": "",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "simple tag pattern has no tokens",
    "en_US": "simple tag pattern has no tokens",
    "zh_CN": "",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "illegal tag uuids %s, tag type must be simple,",
    "en_US": "illegal tag uuids {0}, tag type must be simple,",
    "zh_CN": "",
    "arguments": [
      "sub"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "Invalid color specification[%s], must like #FF00FF",
    "en_US": "Invalid color specification[{0}], must like #FF00FF",
    "zh_CN": "",
    "arguments": [
      "color"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "Get format[%s], format must like that name::{tokenName1}::{tokenName2} ... ::{tokenNameN} or {tokenName1}::{tokenName2} ... ::{tokenNameN} Name cannot contain \u0027{}:\u0027",
    "en_US": "Get format[{0}], format must like that name::{tokenName1}::{tokenName2} ... ::{tokenNameN} or {tokenName1}::{tokenName2} ... ::{tokenNameN} Name cannot contain \u0027{}:\u0027",
    "zh_CN": "",
    "arguments": [
      "format"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "all tokens %s must be specify",
    "en_US": "all tokens {0} must be specify",
    "zh_CN": "",
    "arguments": [
      "formatTokens"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "resource[uuids:%s] is not owned by account[uuid:%s]",
    "en_US": "resource[uuids:{0}] is not owned by account[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "invalidUuids",
      "expectAccountUuid"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "resource[uuid:%s] has been attached %d tags, cannot attach any more",
    "en_US": "resource[uuid:{0}] has been attached {1} tags, cannot attach any more",
    "zh_CN": "",
    "arguments": [
      "resourceUuid",
      "attachedCount"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/tag2/TagPatternBase.java"
  },
  {
    "raw": "Unable to find TemplateConfig[category: %s, name: %s, templateUuid: %s]",
    "en_US": "Unable to find TemplateConfig[category: {0}, name: {1}, templateUuid: {2}]",
    "zh_CN": "",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()",
      "msg.getTemplateUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java"
  },
  {
    "raw": "ticket[uuid:%s, name:%s] can only be updated after being cancelled, current status is %s",
    "en_US": "ticket[uuid:{0}, name:{1}] can only be updated after being cancelled, current status is {2}",
    "zh_CN": "工单[uuid:{0}, name:{1}]当前状态为{2}，不支持更新操作",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getStatus()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/ticket/TicketBase.java"
  },
  {
    "raw": "operation denied. the operator needs to be done by account/virtual ID[uuid:%s]",
    "en_US": "operation denied. the operator needs to be done by account/virtual ID[uuid:{0}]",
    "zh_CN": "操作无效，需要account/virtual ID[uuid:{0}]才能完成操作",
    "arguments": [
      "operator.operatorUuid"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/ticket/TicketBase.java"
  },
  {
    "raw": "Ticket flow collection[uuid:%s] is invalid, contact admin to correct it",
    "en_US": "Ticket flow collection[uuid:{0}] is invalid, contact admin to correct it",
    "zh_CN": "当前工单流程[uuid:{0}]失效，请联系admin修复",
    "arguments": [
      "msg.getFlowCollectionUuid()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "Ticket flow collection[uuid:%s] is disable, can not be used",
    "en_US": "Ticket flow collection[uuid:{0}] is disable, can not be used",
    "zh_CN": "工单流程[uuid:{0}]处于禁用状态，无法被使用",
    "arguments": [
      "msg.getFlowCollectionUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "no accountSystemType[%s] defined in system",
    "en_US": "no accountSystemType[{0}] defined in system",
    "zh_CN": "未定义的accountSystemType[{0}]类型",
    "arguments": [
      "msg.getAccountSystemType()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "not matched ticket type found",
    "en_US": "not matched ticket type found",
    "zh_CN": "",
    "arguments": [],
    "line": 74,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "Ticket flow collection[uuid:%s] not matches ticket type[uuid:%s]",
    "en_US": "Ticket flow collection[uuid:{0}] not matches ticket type[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getFlowCollectionUuid()",
      "ticketTypeUuid"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "no matched ticket flow collection or no default ticket flow collection found, you must specify the flowCollectionUuid or create a default ticket flow collection in system",
    "en_US": "no matched ticket flow collection or no default ticket flow collection found, you must specify the flowCollectionUuid or create a default ticket flow collection in system",
    "zh_CN": "",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "invalid request. no API[%s] found",
    "en_US": "invalid request. no API[{0}] found",
    "zh_CN": "无效的请求。找不到API[{0}]",
    "arguments": [
      "req.apiName"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "invalid request, cannot create API[%s] from apiBody, %s",
    "en_US": "invalid request, cannot create API[{0}] from apiBody, {1}",
    "zh_CN": "无效的请求，无法通过apiBody创建API[{0}]，{1}",
    "arguments": [
      "clz",
      "e.getMessage()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "operation denied. the ticket is in status of %s, cannot do the operation[%s]",
    "en_US": "operation denied. the ticket is in status of {0}, cannot do the operation[{1}]",
    "zh_CN": "操作无效。当前工单状态为{0}，无法进行操作[{0}]",
    "arguments": [
      "this",
      "event"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/ticket/entity/TicketStatus.java"
  },
  {
    "raw": "No api class[name:%s] is found",
    "en_US": "No api class[name:{0}] is found",
    "zh_CN": "",
    "arguments": [
      "request.apiName"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java"
  },
  {
    "raw": "failed to get value from event: %s",
    "en_US": "failed to get value from event: {0}",
    "zh_CN": "",
    "arguments": [
      "exception.getMessage()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java"
  },
  {
    "raw": "operation denied because the ticket submitter[uuid:%s] has been deleted, the ticket[uuid:%s, name:%s] can only be deleted now",
    "en_US": "operation denied because the ticket submitter[uuid:{0}] has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now",
    "zh_CN": "操作无效。因为工单的提交者[uuid:{0}]已经被删除，工单[uuid:{1}, name:{2}]仅支持删除操作",
    "arguments": [
      "ctx.getVirtualIDUuid()",
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "operation denied because the project[uuid:%s] of the ticket has been deleted, the ticket[uuid:%s, name:%s] can only be deleted now",
    "en_US": "operation denied because the project[uuid:{0}] of the ticket has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now",
    "zh_CN": "操作无效。因为工单所属的项目[uuid:{0}]已经被删除，工单[uuid:{1}, name:{2}]仅支持删除操作",
    "arguments": [
      "ctx.getProjectUuid()",
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "operation denied because flow collection[uuid:%s] it not belong the project[uuid:%s]",
    "en_US": "operation denied because flow collection[uuid:{0}] it not belong the project[uuid:{1}]",
    "zh_CN": "操作无效，因为流程[uuid:{0}]不属于项目[uuid:{1}]",
    "arguments": [],
    "line": 61,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "the virtual ID[uuid:%s] is not the owner of the ticket[uuid:%s, name:%s]",
    "en_US": "the virtual ID[uuid:{0}] is not the owner of the ticket[uuid:{1}, name:{2}]",
    "zh_CN": "virtual ID[uuid:{0}]不是工单[uuid:{1}, name:{2}]的所有者",
    "arguments": [
      "msg.getSession().getUserUuid()",
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "approver is removed from project or deleted, flow collection changed to invalid, reject this ticket",
    "en_US": "approver is removed from project or deleted, flow collection changed to invalid, reject this ticket",
    "zh_CN": "审批人已经离开项目或者被删除，流程失效，因此驳回当前工单",
    "arguments": [],
    "line": 194,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2TicketManager.java"
  },
  {
    "raw": "at least one flow is needed for create flow collection",
    "en_US": "at least one flow is needed for create flow collection",
    "zh_CN": "创建流程时需要至少一个步骤",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "wrong approver title %s, valid value is %s",
    "en_US": "wrong approver title {0}, valid value is {1}",
    "zh_CN": "错误的审批人职位{0}, 有效输入为{1}",
    "arguments": [
      "flow.approverTitle",
      "approveTitles"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "can not find IAM2VirtualIDVO[uuid:%s]",
    "en_US": "can not find IAM2VirtualIDVO[uuid:{0}]",
    "zh_CN": "找不到对应的IAM2VirtualIDVO[uuid:{0}]",
    "arguments": [
      "flow.approverUuid"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "name is needed when create a flow",
    "en_US": "name is needed when create a flow",
    "zh_CN": "创建步骤时需要填写名称",
    "arguments": [],
    "line": 64,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "primaryStorage[uuid:%s] has no enough space to rebase snapshot[uuid:%s], please free more than %s bytes storage space",
    "en_US": "primaryStorage[uuid:{0}] has no enough space to rebase snapshot[uuid:{1}], please free more than {2} bytes storage space",
    "zh_CN": "主存储[uuid:{0}]没有足够的空间合并快照，请释放大于{2}字节的存储空间。",
    "arguments": [
      "currentRoot.getPrimaryStorageUuid()",
      "currentLeaf.getUuid()",
      "Math.abs(requiredSize - primaryStorageVO.getCapacity().getAvailablePhysicalCapacity())"
    ],
    "line": 427,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "one ticket type can only have one matches flow collection",
    "en_US": "one ticket type can only have one matches flow collection",
    "zh_CN": "",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "admin is required as approver of the last flow",
    "en_US": "admin is required as approver of the last flow",
    "zh_CN": "",
    "arguments": [],
    "line": 103,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "name cannot be null",
    "en_US": "name cannot be null",
    "zh_CN": "名称不能为空",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "approverUuid cannot be null",
    "en_US": "approverUuid cannot be null",
    "zh_CN": "",
    "arguments": [],
    "line": 133,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "virtual id[uuid:%s] not belong to project[uuid:%s]",
    "en_US": "virtual id[uuid:{0}] not belong to project[uuid:{1}]",
    "zh_CN": "virtual id[uuid:{0}]不属于项目[uuid:{1}]",
    "arguments": [
      "flow.approverUuid",
      "projectUuid"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "two factor authenticator is not enabled",
    "en_US": "two factor authenticator is not enabled",
    "zh_CN": "双因子认证未启用",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java"
  },
  {
    "raw": "host[%s] has started more than 64 usb redirect port",
    "en_US": "host[{0}] has started more than 64 usb redirect port",
    "zh_CN": "",
    "arguments": [
      "usbInv.getHostUuid()"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java"
  },
  {
    "raw": "unable to start usb server on host[%s], because host is not connected",
    "en_US": "unable to start usb server on host[{0}], because host is not connected",
    "zh_CN": "",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java"
  },
  {
    "raw": "failed to start usbredirect server from host[uuid:%s]",
    "en_US": "failed to start usbredirect server from host[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "usbInv.getHostUuid()"
    ],
    "line": 296,
    "fileName": "src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java"
  },
  {
    "raw": "no candidate host with the usb device have enough cpu / memory or Enabled/Connected status",
    "en_US": "no candidate host with the usb device have enough cpu / memory or Enabled/Connected status",
    "zh_CN": "usb设备所在的物理机都不满足cpu / memory或状态的条件",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceAllocatorFactory.java"
  },
  {
    "raw": "the usb device[uuid:%s] has already been attached to another vm[uuid:%s]",
    "en_US": "the usb device[uuid:{0}] has already been attached to another vm[uuid:{1}]",
    "zh_CN": "USB设备[uuid:{0}]已经被绑定在其他的虚拟机[uuid:{1}]",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "usb.getVmInstanceUuid()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] is not in attachable state of %s",
    "en_US": "the usb device[uuid:{0}] is not in attachable state of {1}",
    "zh_CN": "USB设备[uuid:{0}]不处于可绑定的状态[{1}]",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "UsbDeviceState.Enabled"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the vm instance[uuid:%s] is not in attachable state of %s for usb device",
    "en_US": "the vm instance[uuid:{0}] is not in attachable state of {1} for usb device",
    "zh_CN": "虚拟机[uuid:{0}]不能绑定{1}状态的USB设备",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "allowedVmInstanceAttachableState"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the host that the usb device[uuid:%s] pluged in is not in valid state[%s] or status[%s]",
    "en_US": "the host that the usb device[uuid:{0}] pluged in is not in valid state[{1}] or status[{2}]",
    "zh_CN": "插上USB设备的物理机没有处于一种有效的状态[{1}、{2}]",
    "arguments": [
      "usb.getHostUuid()",
      "msg.getUsbDeviceUuid()",
      "HostState.Enabled",
      "HostStatus.Connected"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] has different hostUuid than devices that already attached to the vm instance[uuid:%s]",
    "en_US": "the usb device[uuid:{0}] has different hostUuid than devices that already attached to the vm instance[uuid:{1}]",
    "zh_CN": "与已经绑定虚拟机实例相比，USB设备[uuid:{0}]有不同的物理机uuid",
    "arguments": [
      "usb.getUuid()",
      "vm.getUuid()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] is not attached to any vm instance.",
    "en_US": "the usb device[uuid:{0}] is not attached to any vm instance.",
    "zh_CN": "USB设备[uuid:{0}]不能绑定任何虚拟机实例",
    "arguments": [
      "usb.getUuid()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the vm instance that the usb device[uuid:%s] is attached to is not in detachable state of %s",
    "en_US": "the vm instance that the usb device[uuid:{0}] is attached to is not in detachable state of {1}",
    "zh_CN": "绑定了USB设备[uuid:{0}]的虚拟机实例处于一种不能解绑的状态{1}",
    "arguments": [
      "usb.getUuid()",
      "allowedVmInstanceDetachableState"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s] not in attachable state of %s for usb device",
    "en_US": "vm instance[uuid:{0}] not in attachable state of {1} for usb device",
    "zh_CN": "虚拟机实例[uuid:{0}]对于USB设备没有处于一种可绑定的状态{1}",
    "arguments": [
      "vm.getUuid()",
      "allowedVmInstanceAttachableState"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot disable usb device[uuid:%s] when it\u0027s attached to a vm instance",
    "en_US": "cannot disable usb device[uuid:{0}] when it\u0027s attached to a vm instance",
    "zh_CN": "当USB设备绑定到虚拟机上时不能禁用该USB设备",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot migrate vm[uuid:%s] because there are pci devices attached",
    "en_US": "cannot migrate vm[uuid:{0}] because there are pci devices attached",
    "zh_CN": "虚拟机[uuid:{0}]加载了pci设备无法迁移",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 711,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "You can attach at most %s USB 1.0 devices to one vm instance.",
    "en_US": "You can attach at most {0} USB 1.0 devices to one vm instance.",
    "zh_CN": "最多可以绑定{0}个USB 1.0设备到一个虚拟机上",
    "arguments": [
      "UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "You can attach at most %s USB 2.0 devices to one vm instance.",
    "en_US": "You can attach at most {0} USB 2.0 devices to one vm instance.",
    "zh_CN": "最多可以绑定{0}个USB 2.0设备到一个虚拟机上",
    "arguments": [
      "UsbDeviceConstants.MAX_USB_2_DEVICE_PER_VM"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "You can attach at most %s USB 3.0 devices to one vm instance.",
    "en_US": "You can attach at most {0} USB 3.0 devices to one vm instance.",
    "zh_CN": "最多可以绑定{0}个USB 3.0设备到一个虚拟机上",
    "arguments": [
      "UsbDeviceConstants.MAX_USB_3_DEVICE_PER_VM"
    ],
    "line": 232,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "PassThrough only support use on vm running host",
    "en_US": "PassThrough only support use on vm running host",
    "zh_CN": "",
    "arguments": [],
    "line": 160,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot attach the usb device[uuid:%s] to vm[uuid:%s] due to host allocation",
    "en_US": "cannot attach the usb device[uuid:{0}] to vm[uuid:{1}] due to host allocation",
    "zh_CN": "不能绑定USB设备[uuid:{0}]到虚拟机[uuid:{1}]，因为物理机的配置",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "vm[%s] cannot start because usb redirect host is not connected",
    "en_US": "vm[{0}] cannot start because usb redirect host is not connected",
    "zh_CN": "",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 647,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot migrate vm[uuid:%s] because there are usb devices attached by passthrough",
    "en_US": "cannot migrate vm[uuid:{0}] because there are usb devices attached by passthrough",
    "zh_CN": "不能迁移虚拟机[uuid:{0}]，因为虚拟机通过直连的方式绑定了USB设备",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 660,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are usb devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are usb devices attached",
    "zh_CN": "不能迁移根云盘[uuid:{0}]，因为USB设备已经被绑定",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 693,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "not the time to clean",
    "en_US": "not the time to clean",
    "zh_CN": "",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java"
  },
  {
    "raw": "conversionHost[uuid:%s, hostUuid:%s] is not Connected",
    "en_US": "conversionHost[uuid:{0}, hostUuid:{1}] is not Connected",
    "zh_CN": "",
    "arguments": [
      "conversionHost.getUuid()",
      "conversionHost.getHostUuid()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java"
  },
  {
    "raw": "host[uuid:%s] is not Connected",
    "en_US": "host[uuid:{0}] is not Connected",
    "zh_CN": "",
    "arguments": [
      "hostUuid"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/v2v/ResumeConvertVmJobGC.java"
  },
  {
    "raw": "primaryStorage[uuid%s] is not Connected",
    "en_US": "primaryStorage[uuid{0}] is not Connected",
    "zh_CN": "",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/v2v/ResumeConvertVmJobGC.java"
  },
  {
    "raw": "Not allowed same mac [%s]",
    "en_US": "Not allowed same mac [{0}]",
    "zh_CN": "不允许存在相同的MAC地址[{0}]",
    "arguments": [
      "duplicateMac.get()"
    ],
    "line": 186,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t add same uuid in the l3Network,uuid: %s",
    "en_US": "Can\u0027t add same uuid in the l3Network,uuid: {0}",
    "zh_CN": "不能添加相同的uuid{0}在L3网络中",
    "arguments": [
      "duplicateElements.get(0)"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "zone[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "zone[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "区域[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getZoneUuid()"
    ],
    "line": 252,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "cluster[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "集群[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "host[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "物理机[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s] is specified but it\u0027s connection status is %s, can not create vm from it",
    "en_US": "host[uuid:{0}] is specified but it\u0027s connection status is {1}, can not create vm from it",
    "zh_CN": "物理机[uuid:{0}]虽然被指定了但是它的连接状态是{1}，不能从这上面创建云主机",
    "arguments": [
      "msg.getHostUuid()",
      "connectionState"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "defaultL3NetworkUuid[uuid:%s] is not in l3NetworkUuids%s",
    "en_US": "defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids{1}",
    "zh_CN": "默认L3网络的uuid是[uuid:{0}]，不在L3网络uuid们中{1}",
    "arguments": [
      "msg.getDefaultL3NetworkUuid()",
      "msg.getL3NetworkUuids()"
    ],
    "line": 234,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s] must be Enabled and Connected to be a conversion host",
    "en_US": "host[uuid:{0}] must be Enabled and Connected to be a conversion host",
    "zh_CN": "",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "v2v conversion host storage path must be absolute path",
    "en_US": "v2v conversion host storage path must be absolute path",
    "zh_CN": "",
    "arguments": [],
    "line": 89,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "invalid v2v url: %s",
    "en_US": "invalid v2v url: {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s] does not exist or is not a vmware vm",
    "en_US": "vm instance[uuid:{0}] does not exist or is not a vmware vm",
    "zh_CN": "",
    "arguments": [
      "srcVmUuid"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "conversionHostUuid should not be null",
    "en_US": "conversionHostUuid should not be null",
    "zh_CN": "",
    "arguments": [],
    "line": 130,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "conversion host[uuid:%s] should be Enabled",
    "en_US": "conversion host[uuid:{0}] should be Enabled",
    "zh_CN": "",
    "arguments": [
      "msg.getConversionHostUuid()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "underlying host of conversion host[uuid:%s] should be Connected",
    "en_US": "underlying host of conversion host[uuid:{0}] should be Connected",
    "zh_CN": "迁移服务器[uuid:{0}]所关联的物理机应处于己连接状态",
    "arguments": [
      "msg.getConversionHostUuid()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "conversion host[uuid:%s] cannot connect to primary storage[uuid:%s]",
    "en_US": "conversion host[uuid:{0}] cannot connect to primary storage[uuid:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getConversionHostUuid()",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "Duplicate mac address %s",
    "en_US": "Duplicate mac address {0}",
    "zh_CN": "",
    "arguments": [
      "duplicateMacs"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] is not supported for v2v",
    "en_US": "primary storage[uuid:{0}] is not supported for v2v",
    "zh_CN": "",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] is neither Enabled nor Connected",
    "en_US": "primary storage[uuid:{0}] is neither Enabled nor Connected",
    "zh_CN": "",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "Unable to find L3Network[uuid:%s] to start the current vm, it may have been deleted, Operation suggestion: delete this vm, recreate a new vm",
    "en_US": "Unable to find L3Network[uuid:{0}] to start the current vm, it may have been deleted, Operation suggestion: delete this vm, recreate a new vm",
    "zh_CN": "",
    "arguments": [
      "l3Uuid"
    ],
    "line": 577,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "invalid network bandwidth[%s], it is not a number",
    "en_US": "invalid network bandwidth[{0}], it is not a number",
    "zh_CN": "错误的网络带宽[{0}]，这不是数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 1150,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "invalid network bandwidth[%s], it must be greater than or equal to 8192",
    "en_US": "invalid network bandwidth[{0}], it must be greater than or equal to 8192",
    "zh_CN": "错误的网络带宽[{0}],这个数字必须大于等于8K",
    "arguments": [
      "bandwidth"
    ],
    "line": 1145,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "networkInboundBandwidth execeds the max value 32G bps",
    "en_US": "networkInboundBandwidth execeds the max value 32G bps",
    "zh_CN": "超过下行网络带宽超过最大值32G bps",
    "arguments": [],
    "line": 1147,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "can not find type for src vm[url:%s]",
    "en_US": "can not find type for src vm[url:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 624,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "can not find factory for src vm[url:%s, v2vType:%s]",
    "en_US": "can not find factory for src vm[url:{0}, v2vType:{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUrl()",
      "msg.getType()"
    ],
    "line": 638,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "there has been a v2v conversion host with hostUuid %s",
    "en_US": "there has been a v2v conversion host with hostUuid {0}",
    "zh_CN": "",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 898,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "invalid v2v qos systemtag",
    "en_US": "invalid v2v qos systemtag",
    "zh_CN": "",
    "arguments": [],
    "line": 1139,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "No root volume found for VM: %s",
    "en_US": "No root volume found for VM: {0}",
    "zh_CN": "",
    "arguments": [
      "srcVmUuid"
    ],
    "line": 863,
    "fileName": "src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java"
  },
  {
    "raw": "v2v job[uuid:%s] is running",
    "en_US": "v2v job[uuid:{0}] is running",
    "zh_CN": "V2V迁移任务[uuid:{0}]正在运行",
    "arguments": [
      "job.getUuid()"
    ],
    "line": 189,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "failed to get virt-v2v uri for %s",
    "en_US": "failed to get virt-v2v uri for {0}",
    "zh_CN": "",
    "arguments": [
      "srcVmUrl"
    ],
    "line": 788,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "Failed to parse url %s",
    "en_US": "Failed to parse url {0}",
    "zh_CN": "",
    "arguments": [
      "urlBuilder.toString()"
    ],
    "line": 953,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "Target vm name can not contain those characters %s",
    "en_US": "Target vm name can not contain those characters {0}",
    "zh_CN": "",
    "arguments": [
      "NOT_SUPPORTED_SPECIAL_CHARACTER"
    ],
    "line": 1231,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "There is already a long job[uuid:%s] convert vm from %s",
    "en_US": "There is already a long job[uuid:{0}] convert vm from {1}",
    "zh_CN": "",
    "arguments": [
      "jobUuid",
      "msg.getUrl()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java"
  },
  {
    "raw": "Failed to update conversion host dependency",
    "en_US": "Failed to update conversion host dependency",
    "zh_CN": "",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java"
  },
  {
    "raw": "host is not connected",
    "en_US": "host is not connected",
    "zh_CN": "",
    "arguments": [],
    "line": 151,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "vmUuid [%s] not found in ESX host [%s]",
    "en_US": "vmUuid [{0}] not found in ESX host [{1}]",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "self.getUuid()"
    ],
    "line": 329,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "VM not found: %s",
    "en_US": "VM not found: {0}",
    "zh_CN": "",
    "arguments": [
      "vmUuid"
    ],
    "line": 673,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to suspend VM [%s]: %s",
    "en_US": "failed to suspend VM [{0}]: {1}",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "VMwareHelper.exStr(ex)"
    ],
    "line": 602,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to suspend VM, task status: %s",
    "en_US": "failed to suspend VM, task status: {0}",
    "zh_CN": "",
    "arguments": [
      "t.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 598,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to resume VM [%s]: %s",
    "en_US": "failed to resume VM [{0}]: {1}",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "VMwareHelper.exStr(ex)"
    ],
    "line": 636,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to resume VM, task status: %s",
    "en_US": "failed to resume VM, task status: {0}",
    "zh_CN": "",
    "arguments": [
      "t.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 632,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to shutdown guest: %s, %s",
    "en_US": "failed to shutdown guest: {0}, {1}",
    "zh_CN": "",
    "arguments": [
      "vmUuid",
      "VMwareHelper.exStr(ex)"
    ],
    "line": 704,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "instance uuid [%s] not found",
    "en_US": "instance uuid [{0}] not found",
    "zh_CN": "",
    "arguments": [
      "vmInv.getInstanceOfferingUuid()"
    ],
    "line": 1314,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "Image [%s] not found",
    "en_US": "Image [{0}] not found",
    "zh_CN": "",
    "arguments": [
      "vmInv.getImageUuid()"
    ],
    "line": 1324,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "VM [%s] not found in vCenter",
    "en_US": "VM [{0}] not found in vCenter",
    "zh_CN": "",
    "arguments": [
      "vmUuid"
    ],
    "line": 1423,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to power on VM, task status: %s",
    "en_US": "failed to power on VM, task status: {0}",
    "zh_CN": "",
    "arguments": [
      "t.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 1592,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "vCenter login name expected.",
    "en_US": "vCenter login name expected.",
    "zh_CN": "vCenter登录名称为空",
    "arguments": [],
    "line": 47,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "domainName[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "domainName[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "域名[{0}]不是一个IPv4地址或有效的主机名",
    "arguments": [
      "msg.getDomainName()"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "vCenter [domainName:%s] has been added",
    "en_US": "vCenter [domainName:{0}] has been added",
    "zh_CN": "vCenter[domainName:{0}]已经被添加",
    "arguments": [
      "msg.getDomainName()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] and L2[uuid:%s] belongs to different DCs",
    "en_US": "Cluster[uuid:{0}] and L2[uuid:{1}] belongs to different DCs",
    "zh_CN": "集群[uuid:{0}]和二层网络[uuid:{1}]属于不同的DC",
    "arguments": [
      "clusterUuid",
      "l2uuid"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "No hosts found within cluster: %s",
    "en_US": "No hosts found within cluster: {0}",
    "zh_CN": "在集群{0}中未发现物理机",
    "arguments": [
      "clusterUuid"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "vSwitch/dvSwitch not found: %s, or vSwitch: %s on different ESX host doesn\u0027t has same portgroup",
    "en_US": "vSwitch/dvSwitch not found: {0}, or vSwitch: {1} on different ESX host doesn\u0027t has same portgroup",
    "zh_CN": "vSwitch/dvSwitch未找到: {0}, 或者vSwitch: {1}在不同的ESX Host上的portgroup配置不同",
    "arguments": [
      "phyinf",
      "phyinf"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "L2[uuid:%s] doesn\u0027t belong to vCenter[uuid:%s] cluster[uuid:%s]",
    "en_US": "L2[uuid:{0}] doesn\u0027t belong to vCenter[uuid:{1}] cluster[uuid:{2}]",
    "zh_CN": "二层网络[uuid:{0}]不属于vCenter[uuid:{1}]集群[uuid:{2}]",
    "arguments": [
      "l2uuid",
      "vcvo.getUuid()",
      "clusterUuid"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "No data-store attached to %s",
    "en_US": "No data-store attached to {0}",
    "zh_CN": "",
    "arguments": [
      "bsUuid"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "Data-store not found for %s",
    "en_US": "Data-store not found for {0}",
    "zh_CN": "",
    "arguments": [
      "bsUuid"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "unexpected protocol: %s",
    "en_US": "unexpected protocol: {0}",
    "zh_CN": "不支持的协议类型：{0}",
    "arguments": [
      "url.getProtocol()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "%s already exists",
    "en_US": "{0} already exists",
    "zh_CN": "",
    "arguments": [
      "iinv.getName()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "vcenter backup storage do not support to cancel download image",
    "en_US": "vcenter backup storage do not support to cancel download image",
    "zh_CN": "",
    "arguments": [],
    "line": 138,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "image not found in BS",
    "en_US": "image not found in BS",
    "zh_CN": "在镜像服务器上未找到目标镜像",
    "arguments": [],
    "line": 188,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "not supported yet",
    "en_US": "not supported yet",
    "zh_CN": "",
    "arguments": [],
    "line": 200,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "no candidate host for vcenter vm",
    "en_US": "no candidate host for vcenter vm",
    "zh_CN": "找不到VCenter的物理机去启动vm",
    "arguments": [],
    "line": 357,
    "fileName": "src/main/java/org/zstack/vmware/VCenterHostAllocatorFilterExtensionPoint.java"
  },
  {
    "raw": "Duplicated mac address[%s] on VM[uuid: %s, name: %s] and VM[uuid: %s, name: %s]",
    "en_US": "Duplicated mac address[{0}] on VM[uuid: {1}, name: {2}] and VM[uuid: {3}, name: {4}]",
    "zh_CN": "云主机[uuid：{1}，名称：{2}]和云主机 [uuid：{3}，名称：{4}]中存在重复的mac地址[{0}]",
    "arguments": [
      "nicvo.getMac()",
      "vm1.getUuid()",
      "vm1.getName()",
      "vm2.getUuid()",
      "vm2.getName()"
    ],
    "line": 938,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "can\u0027t sync before datastores are separated",
    "en_US": "can\u0027t sync before datastores are separated",
    "zh_CN": "",
    "arguments": [],
    "line": 1804,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "VCenter[uuid:%s] not found: ",
    "en_US": "VCenter[uuid:{0}] not found: ",
    "zh_CN": "VCenter[uuid:{0}]不存在",
    "arguments": [
      "msg.getVCenterUuid()"
    ],
    "line": 2858,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Login failed, please check your login parameters.",
    "en_US": "Login failed, please check your login parameters.",
    "zh_CN": "登录失败，请检查用户名密码是否正确",
    "arguments": [],
    "line": 2974,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "connect %s failed: %s",
    "en_US": "connect {0} failed: {1}",
    "zh_CN": "连接{0}失败:{1}",
    "arguments": [
      "msg.getDomainName()",
      "ex.getMessage()"
    ],
    "line": 2978,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Login to vCenter [%s] failed with user [%s],please check your network connection and credential.",
    "en_US": "Login to vCenter [{0}] failed with user [{1}],please check your network connection and credential.",
    "zh_CN": "用户[{1}]登录vCenter[{0}]失败，请检查您的网络连接和凭据",
    "arguments": [
      "msg.getDomainName()",
      "msg.getUsername()"
    ],
    "line": 2984,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Parse response failed from vCenter [%s],please check the port number[%d].",
    "en_US": "Parse response failed from vCenter [{0}],please check the port number[{1}].",
    "zh_CN": "解析vCenter[{0}]响应失败，请检查端口号[{1}]",
    "arguments": [
      "msg.getDomainName()",
      "msg.getPort() \u003d\u003d null ? 443 : msg.getPort()"
    ],
    "line": 2991,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "No clustered compute resource found",
    "en_US": "No clustered compute resource found",
    "zh_CN": "未找到集群资源",
    "arguments": [],
    "line": 3070,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "No dvSwitch or qualified vSwitch found",
    "en_US": "No dvSwitch or qualified vSwitch found",
    "zh_CN": "未找到可使用的dvSwitch/vSwitch",
    "arguments": [],
    "line": 3074,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Datastore %s not found for vCenter %s",
    "en_US": "Datastore {0} not found for vCenter {1}",
    "zh_CN": "vCenter{1}中未找到Datastore{0}",
    "arguments": [
      "dsMorVal",
      "vcUuid"
    ],
    "line": 3255,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Missing host UUID in message",
    "en_US": "Missing host UUID in message",
    "zh_CN": "消息中缺失物理机UUID",
    "arguments": [],
    "line": 3627,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Missing destination host uuid.",
    "en_US": "Missing destination host uuid.",
    "zh_CN": "缺少目标物理机的Uuid",
    "arguments": [],
    "line": 3725,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Destination host is not ESX host.",
    "en_US": "Destination host is not ESX host.",
    "zh_CN": "目标物理机不是Esx类型物理机",
    "arguments": [],
    "line": 3730,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Checking compatibility with vm %s failed on host %s",
    "en_US": "Checking compatibility with vm {0} failed on host {1}",
    "zh_CN": "检查主机{1}与虚拟机{0}的兼容性失败",
    "arguments": [
      "vm.getConfig().getName()",
      "hvo.getManagementIp()"
    ],
    "line": 3768,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "HOST CPU/software NOT compatible",
    "en_US": "HOST CPU/software NOT compatible",
    "zh_CN": "物理机的CPU/software不兼容",
    "arguments": [],
    "line": 3765,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "No virtual disk manager",
    "en_US": "No virtual disk manager",
    "zh_CN": "",
    "arguments": [],
    "line": 204,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "No file manager",
    "en_US": "No file manager",
    "zh_CN": "",
    "arguments": [],
    "line": 211,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "No file Datacenter",
    "en_US": "No file Datacenter",
    "zh_CN": "",
    "arguments": [],
    "line": 220,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "failed to get VM[%s] root disk usage",
    "en_US": "failed to get VM[{0}] root disk usage",
    "zh_CN": "获取VM[{0}]根盘使用率失败",
    "arguments": [
      "vm.getName()"
    ],
    "line": 324,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "failed to get VM from installPath: %s",
    "en_US": "failed to get VM from installPath: {0}",
    "zh_CN": "在路径{0}下未找到云主机",
    "arguments": [
      "msg.getInstallPath()"
    ],
    "line": 320,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "failed to connect to vCenter: %s: %s",
    "en_US": "failed to connect to vCenter: {0}: {1}",
    "zh_CN": "无法连接到vCenter：{0}：{1}",
    "arguments": [
      "vCenterUrl",
      "ex.getMessage()"
    ],
    "line": 230,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "vdisk not found: %s",
    "en_US": "vdisk not found: {0}",
    "zh_CN": "",
    "arguments": [
      "installPath"
    ],
    "line": 362,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "list storage failed for %s",
    "en_US": "list storage failed for {0}",
    "zh_CN": "",
    "arguments": [
      "getVcDomainName(si)"
    ],
    "line": 437,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No datastore found for VM: %s",
    "en_US": "No datastore found for VM: {0}",
    "zh_CN": "",
    "arguments": [
      "vm.getName()"
    ],
    "line": 457,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "failed to set ESX VM uuid [%s:%s]",
    "en_US": "failed to set ESX VM uuid [{0}:{1}]",
    "zh_CN": "设置ESX VM uuid [{0}：{1}]失败",
    "arguments": [
      "info.getName()",
      "info.getInstanceUuid()"
    ],
    "line": 511,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "template [%s] not found",
    "en_US": "template [{0}] not found",
    "zh_CN": "",
    "arguments": [
      "zsImageUuid"
    ],
    "line": 592,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "failed to search resource pool for host %s",
    "en_US": "failed to search resource pool for host {0}",
    "zh_CN": "搜索物理机{0}资源池失败",
    "arguments": [
      "host.getName()"
    ],
    "line": 669,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No resource pool found for host %s",
    "en_US": "No resource pool found for host {0}",
    "zh_CN": "在物理机{0}上未找到资源池",
    "arguments": [
      "host.getName()"
    ],
    "line": 665,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No unit number available for data disk %s",
    "en_US": "No unit number available for data disk {0}",
    "zh_CN": "",
    "arguments": [
      "installPath"
    ],
    "line": 2105,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "guest tools not installed or running for VM: %s",
    "en_US": "guest tools not installed or running for VM: {0}",
    "zh_CN": "云主机{0}上未安装或运行guest tools",
    "arguments": [
      "vm.getName()"
    ],
    "line": 1245,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "upload file failed for VM: %s",
    "en_US": "upload file failed for VM: {0}",
    "zh_CN": "云主机{0}上传文件失败",
    "arguments": [
      "vm.getName()"
    ],
    "line": 1280,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "list dvSwitch failed for %s",
    "en_US": "list dvSwitch failed for {0}",
    "zh_CN": "",
    "arguments": [
      "vcvo.getName()"
    ],
    "line": 1368,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "get vCenter cluster[%s] name failed",
    "en_US": "get vCenter cluster[{0}] name failed",
    "zh_CN": "",
    "arguments": [
      "clusterUuid"
    ],
    "line": 1630,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "dvSwitch name [%s] not unique",
    "en_US": "dvSwitch name [{0}] not unique",
    "zh_CN": "",
    "arguments": [
      "dvSwitch"
    ],
    "line": 1739,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create portgroup failed for host %s",
    "en_US": "create portgroup failed for host {0}",
    "zh_CN": "物理机{0}创建端口组失败",
    "arguments": [
      "hvo.getName()"
    ],
    "line": 1797,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create portgroup failed for host %s: because %s",
    "en_US": "create portgroup failed for host {0}: because {1}",
    "zh_CN": "物理机{0}创建端口组失败，因为{1}",
    "arguments": [
      "hvo.getName()",
      "((OperationFailureException) ex).getErrorCode().getDetails()"
    ],
    "line": 1794,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "Host[%s:%s] not found on vCenter",
    "en_US": "Host[{0}:{1}] not found on vCenter",
    "zh_CN": "vCenter上未找到物理机[{0}:{1}]",
    "arguments": [
      "hvo.getName()",
      "hvo.getUuid()"
    ],
    "line": 1761,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "portgroup[%s] already exists on host[%s] but with different vlanId(%d)",
    "en_US": "portgroup[{0}] already exists on host[{1}] but with different vlanId({2})",
    "zh_CN": "",
    "arguments": [
      "pgLabel",
      "hvo.getName()",
      "vlanId"
    ],
    "line": 1773,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create dvPortGroup failed for %s",
    "en_US": "create dvPortGroup failed for {0}",
    "zh_CN": "",
    "arguments": [
      "vcvo.getName()"
    ],
    "line": 1836,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "dvSwitch [%s] not found on vCenter [%s]",
    "en_US": "dvSwitch [{0}] not found on vCenter [{1}]",
    "zh_CN": "",
    "arguments": [
      "dvSwitchName",
      "vcvo.getName()"
    ],
    "line": 1831,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "no dataCenter found for datastore",
    "en_US": "no dataCenter found for datastore",
    "zh_CN": "",
    "arguments": [
      "ds.getName()"
    ],
    "line": 2026,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "virtual disk manager unavailable",
    "en_US": "virtual disk manager unavailable",
    "zh_CN": "",
    "arguments": [],
    "line": 2031,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "delete vdisk[%s] failed: %s",
    "en_US": "delete vdisk[{0}] failed: {1}",
    "zh_CN": "",
    "arguments": [
      "installPath",
      "mf.getLocalizedMessage()"
    ],
    "line": 2042,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create dvPortGroup failed for dvSwitch [%s], %s",
    "en_US": "create dvPortGroup failed for dvSwitch [{0}], {1}",
    "zh_CN": "",
    "arguments": [
      "dvSwitch.getName()",
      "task.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 2171,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "failed to set ZStack uuid to VCenter ManagedEntity [name:%s, mor:%s] because %s",
    "en_US": "failed to set ZStack uuid to VCenter ManagedEntity [name:{0}, mor:{1}] because {2}",
    "zh_CN": "在VCenter ManagedEntity [name：{0}，mor：{1}]上设置ZStack uuid失败，因为{2}",
    "arguments": [
      "me.getName()",
      "mor.val",
      "ex.getMessage()"
    ],
    "line": 2275,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No VNC ports available",
    "en_US": "No VNC ports available",
    "zh_CN": "未找到可用的VNC端口",
    "arguments": [],
    "line": 162,
    "fileName": "src/main/java/org/zstack/vmware/VncPortAllocatorImpl.java"
  },
  {
    "raw": "no ip ranges attached with l3 network[uuid:%s]",
    "en_US": "no ip ranges attached with l3 network[uuid:{0}]",
    "zh_CN": "在三层网络[uuid:{0}]上没有IP范围被绑定",
    "arguments": [
      "l3NetworkVO.getUuid()"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "l3 network[uuid:%s] can not detach from vpc vrouter[uuid:%s] since network services attached vips[%s] still used in l3",
    "en_US": "l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] since network services attached vips[{2}] still used in l3",
    "zh_CN": "",
    "arguments": [
      "l3NetworkVO.getUuid()",
      "vmInstanceVO.getUuid()",
      "vipPeerVOs.stream().map( n -\u003e n.getVipUuid()).collect(Collectors.toList())"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "vpc l3 network[uuid:%s] can not detach from vpc vrouter[uuid:%s] since vm nics[%s] still used in l3",
    "en_US": "vpc l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] since vm nics[{2}] still used in l3",
    "zh_CN": "",
    "arguments": [
      "l3NetworkVO.getUuid()",
      "vmInstanceVO.getUuid()",
      "vmNicVOS.stream().map( n -\u003e n.getUuid()).collect(Collectors.toList())"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "virtual router offering[uuid: %s] is not enabled",
    "en_US": "virtual router offering[uuid: {0}] is not enabled",
    "zh_CN": "云路由规格[uuid: {0}]是不可用的",
    "arguments": [
      "msg.getVirtualRouterOfferingUuid()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "only vpc l3 network can attach to vpc vrouter",
    "en_US": "only vpc l3 network can attach to vpc vrouter",
    "zh_CN": "只有VPC三层网络可以绑定到VPC云路由",
    "arguments": [],
    "line": 218,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "public network[uuid: %s] vip[uuid: %s, ip: %s] peer with l3network[uuid: %s] not on vpc vr[uuid: %s]",
    "en_US": "public network[uuid: {0}] vip[uuid: {1}, ip: {2}] peer with l3network[uuid: {3}] not on vpc vr[uuid: {4}]",
    "zh_CN": "在VPC云路由[uuid: {4}]上，三层网络[uuid: {3}]没有和公有网络[uuid: {0}]虚拟IP[uuid: {1}, ip: {2}]同阶",
    "arguments": [
      "vip.getL3NetworkUuid()",
      "vip.getUuid()",
      "vip.getIp()",
      "msg.getL3NetworkUuid()",
      "vmInstanceVO.getUuid()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "the gateway[ip:%s] of l3[uuid:%s] has been occupied",
    "en_US": "the gateway[ip:{0}] of l3[uuid:{1}] has been occupied",
    "zh_CN": "三层网络[uuid:{1}]的网关[uuid:{0}]已经被占用",
    "arguments": [
      "gateway",
      "msg.getL3NetworkUuid()"
    ],
    "line": 261,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "the static ip[%s] specified in message not equals to gateway ip[%s] of l3 network[uuid:%s]",
    "en_US": "the static ip[{0}] specified in message not equals to gateway ip[{1}] of l3 network[uuid:{2}]",
    "zh_CN": "在消息中指定的静态IP地址[{0}]和三层网络[uuid:{2}]的网关IP地址[{1}]不一样",
    "arguments": [
      "msg.getStaticIp()",
      "gateway",
      "l3NetworkVO.getUuid()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "l3 network [uuid:%s] must be attached first, because there is vip on that l3 network",
    "en_US": "l3 network [uuid:{0}] must be attached first, because there is vip on that l3 network",
    "zh_CN": "",
    "arguments": [
      "vipL3Uuid"
    ],
    "line": 284,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "dns[%s] is not a IP address",
    "en_US": "dns[{0}] is not a IP address",
    "zh_CN": "dns地址[{0}]不是有效的IP地址",
    "arguments": [
      "msg.getDns()"
    ],
    "line": 335,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "dns address [%s] is not added to vpc router [uuid:%s]",
    "en_US": "dns address [{0}] is not added to vpc router [uuid:{1}]",
    "zh_CN": "dns地址[{0}]未添加到vpc路由[uuid:{1}]",
    "arguments": [
      "msg.getDns()",
      "msg.getUuid()"
    ],
    "line": 296,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "chrony server not configured!",
    "en_US": "chrony server not configured!",
    "zh_CN": "",
    "arguments": [],
    "line": 1056,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not get connections of distributed routing to virtual router %s",
    "en_US": "can not get connections of distributed routing to virtual router {0}",
    "zh_CN": "不能获取分布式路由到云路由的连接",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 314,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not set state of distributed routing to virtual router %s",
    "en_US": "can not set state of distributed routing to virtual router {0}",
    "zh_CN": "不能设置分布式路由到云路由的状态",
    "arguments": [
      "vrinv.getUuid()"
    ],
    "line": 351,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not get state of distributed routing to virtual router %s",
    "en_US": "can not get state of distributed routing to virtual router {0}",
    "zh_CN": "获取路由器 {0} 分布式路由的状态失败",
    "arguments": [
      "vrinv.getUuid()"
    ],
    "line": 595,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "not support to get the service %s state to virtual router %s",
    "en_US": "not support to get the service {0} state to virtual router {1}",
    "zh_CN": "路由器 {1} 不支持网络功能{0}",
    "arguments": [
      "msg.getNetworkService()",
      "msg.getUuid()"
    ],
    "line": 469,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "not support to update the service %s state to virtual router %s",
    "en_US": "not support to update the service {0} state to virtual router {1}",
    "zh_CN": "路由器 {1} 不支持更新网络功能{0}",
    "arguments": [
      "msg.getNetworkService()",
      "msg.getUuid()"
    ],
    "line": 613,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)",
    "en_US": "vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)",
    "zh_CN": "在做设置云路由的任何操作（如启动/停止虚拟机、创建负载均衡等），VPC三层网络必须首先绑定三层路由",
    "arguments": [],
    "line": 1004,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "dns address [%s] has bean added to vpc router [uuid:%s]",
    "en_US": "dns address [{0}] has bean added to vpc router [uuid:{1}]",
    "zh_CN": "在路由器[uuid:{1}]上已经存在一个DNS[{0}]",
    "arguments": [
      "msg.getDns()",
      "msg.getVpcRouterUuid()"
    ],
    "line": 1281,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not detach nic from vpc vr[uuid:%s]",
    "en_US": "can not detach nic from vpc vr[uuid:{0}]",
    "zh_CN": "不能从VPC云路由[uuid:{0}]解绑网卡",
    "arguments": [
      "vpc.getUuid()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/vpc/VpcVRouterFactory.java"
  },
  {
    "raw": "can not detach nic from vpc during delete ip range[uuid:%s]",
    "en_US": "can not detach nic from vpc during delete ip range[uuid:{0}]",
    "zh_CN": "",
    "arguments": [
      "ipRange.getUuid()"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/vpc/VpcVRouterFactory.java"
  },
  {
    "raw": "the gateway[ip:%s] of l3[uuid:%s] has been occupied on vpc vr[uuid: %s]",
    "en_US": "the gateway[ip:{0}] of l3[uuid:{1}] has been occupied on vpc vr[uuid: {2}]",
    "zh_CN": "在VPC的云路由[uuid: {2}]上，三层网络[uuid:{1}]的网关[uuid:{0}]已经被占用",
    "arguments": [
      "gateway",
      "l3.getUuid()",
      "vm.getUuid()"
    ],
    "line": 342,
    "fileName": "src/main/java/org/zstack/vpc/VpcVRouterFactory.java"
  },
  {
    "raw": "unable to ssh in to the vyos[%s], the ssh port seems not open",
    "en_US": "unable to ssh in to the vyos[{0}], the ssh port seems not open",
    "zh_CN": "未能通过ssh进入vyos[{0}]，ssh端口看起来没有打开",
    "arguments": [
      "mgmtNicIp"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/vpc/VpcVyosDeployZsnAgentFlow.java"
  },
  {
    "raw": "there is no master router of router [uuid:%s]",
    "en_US": "there is no master router of router [uuid:{0}]",
    "zh_CN": "路由器[uuid:{0}]的高可用组没有主路由器",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "invalid monitor ip address [%s]",
    "en_US": "invalid monitor ip address [{0}]",
    "zh_CN": "仲裁地址[{0}]错误",
    "arguments": [
      "ip"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpcHaRouter [uuid:%s] is deleted",
    "en_US": "vpcHaRouter [uuid:{0}] is deleted",
    "zh_CN": "高可用组[uuid:{0}]被删除了",
    "arguments": [
      "vpcHaUuid"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "there are more than 2 vpc routers attached to haGroup [uuid:%s]",
    "en_US": "there are more than 2 vpc routers attached to haGroup [uuid:{0}]",
    "zh_CN": "高可用组[uuid:{0}]的路由器数量已经超过2",
    "arguments": [
      "haUuid"
    ],
    "line": 182,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "ha group management l3 and public l3 networks[uuid:%s] are different from offering l3 networks [uuid:%s]",
    "en_US": "ha group management l3 and public l3 networks[uuid:{0}] are different from offering l3 networks [uuid:{1}]",
    "zh_CN": "高可用组的管理网，公网组合[uuid:{0}]和云路由规格的三层网络[uuid:{1}]不同",
    "arguments": [
      "l3Uuids",
      "offeringL3Uuids"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc router l3 networks [uuid:%s] are different from ha group l3 networks [uuid:%s], !!! please delete this router and recreate it",
    "en_US": "vpc router l3 networks [uuid:{0}] are different from ha group l3 networks [uuid:{1}], !!! please delete this router and recreate it",
    "zh_CN": "vpc路由器的三层网路[uuid:{0}]和高可用组的三层网络[uuid:{1}]不同",
    "arguments": [
      "vpcL3Uuids",
      "vpcHaGroupL3Uuids"
    ],
    "line": 267,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc router has been attached to ha group [uuid:%s]",
    "en_US": "vpc router has been attached to ha group [uuid:{0}]",
    "zh_CN": "vpc路由器不在高可用组[uuid:{0}]中",
    "arguments": [
      "oldHaUuid"
    ],
    "line": 275,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc ha group [uuid:%s] is not existed",
    "en_US": "vpc ha group [uuid:{0}] is not existed",
    "zh_CN": "高可用组[uuid:{0}]不存在",
    "arguments": [
      "haUuid"
    ],
    "line": 279,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "there are more than 1 vpc routers attached to haGroup [uuid:%s]",
    "en_US": "there are more than 1 vpc routers attached to haGroup [uuid:{0}]",
    "zh_CN": "高可用组[uuid:{0}]的路由器数量已经超过1",
    "arguments": [
      "haUuid"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc router [uuid:%s] can not be upgraded to ha router because it public network is same to management network",
    "en_US": "vpc router [uuid:{0}] can not be upgraded to ha router because it public network is same to management network",
    "zh_CN": "vpc路由器[uuid:{0}]不能升级高可用路由器因为它的管理网和公网相同",
    "arguments": [
      "haUuid"
    ],
    "line": 288,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "create affinityGroup for ha group [uuid:%s] failed",
    "en_US": "create affinityGroup for ha group [uuid:{0}] failed",
    "zh_CN": "高可用组[uuid:{0}]创建亲和组失败",
    "arguments": [
      "ha.getName()"
    ],
    "line": 571,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java"
  },
  {
    "raw": "failed to enable ha on virtual router[uuid:%s], %s",
    "en_US": "failed to enable ha on virtual router[uuid:{0}], {1}",
    "zh_CN": "路由器[uuid:{0}]打开高可用功能失败，{1}",
    "arguments": [
      "vrUuid",
      "ret.getError()"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/vpc/ha/vyos/vyosVpcHaRouterBackendManagerImpl.java"
  },
  {
    "raw": "operation failure, ip format only supports ipv4/iprange/cidr, but find %s",
    "en_US": "operation failure, ip format only supports ipv4/iprange/cidr, but find {0}",
    "zh_CN": "",
    "arguments": [
      "ips"
    ],
    "line": 291,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "illegal protocol type %s",
    "en_US": "illegal protocol type {0}",
    "zh_CN": "",
    "arguments": [
      "protocol"
    ],
    "line": 317,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "RuleSet[%s] already has a rule with rule number %s.",
    "en_US": "RuleSet[{0}] already has a rule with rule number {1}.",
    "zh_CN": "",
    "arguments": [
      "msg.getRuleSetUuid()",
      "msg.getRuleNumber()"
    ],
    "line": 342,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "only tcp or udp protocol can use port",
    "en_US": "only tcp or udp protocol can use port",
    "zh_CN": "",
    "arguments": [],
    "line": 372,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not detach system default ruleSet",
    "en_US": "can not detach system default ruleSet",
    "zh_CN": "",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not delete ruleSet[%s] because it still attached to nic",
    "en_US": "can not delete ruleSet[{0}] because it still attached to nic",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not delete system default ruleSet",
    "en_US": "can not delete system default ruleSet",
    "zh_CN": "",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not delete system default rule",
    "en_US": "can not delete system default rule",
    "zh_CN": "",
    "arguments": [],
    "line": 125,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "VPC Router[uuid:%s] already has a firewall.",
    "en_US": "VPC Router[uuid:{0}] already has a firewall.",
    "zh_CN": "",
    "arguments": [
      "msg.getVpcUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not update default rule[%s]",
    "en_US": "can not update default rule[{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 157,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "only tcp protocol can use tcp flag",
    "en_US": "only tcp protocol can use tcp flag",
    "zh_CN": "",
    "arguments": [],
    "line": 377,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "only icmp protocol can use icmp type",
    "en_US": "only icmp protocol can use icmp type",
    "zh_CN": "",
    "arguments": [],
    "line": 381,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "Rule [%s] not support update state",
    "en_US": "Rule [{0}] not support update state",
    "zh_CN": "",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "Default ruleSet can not be attached to other nic",
    "en_US": "Default ruleSet can not be attached to other nic",
    "zh_CN": "",
    "arguments": [],
    "line": 227,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "Only out direction support attach ruleSet",
    "en_US": "Only out direction support attach ruleSet",
    "zh_CN": "",
    "arguments": [],
    "line": 231,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "L3[%s] forward[%s] already attached a ruleSet",
    "en_US": "L3[{0}] forward[{1}] already attached a ruleSet",
    "zh_CN": "",
    "arguments": [
      "msg.getL3Uuid()",
      "msg.getForward()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "Invalid rule expression, the detail: %s",
    "en_US": "Invalid rule expression, the detail: {0}",
    "zh_CN": "",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 302,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "operation failure, duplicate/overlap ip entry in %s",
    "en_US": "operation failure, duplicate/overlap ip entry in {0}",
    "zh_CN": "",
    "arguments": [
      "ips"
    ],
    "line": 284,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "operation failure, there are overlap ip range[start ip:%s, end ip: %s and start ip:%s, end ip: %s]",
    "en_US": "operation failure, there are overlap ip range[start ip:{0}, end ip: {1} and start ip:{2}, end ip: {3}]",
    "zh_CN": "",
    "arguments": [
      "startIp",
      "endIp",
      "NetworkUtils.longToIpv4String(r.lowerEndpoint())",
      "NetworkUtils.longToIpv4String(r.upperEndpoint())"
    ],
    "line": 295,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "operation failure, port format only supports port/portRange, but find %s",
    "en_US": "operation failure, port format only supports port/portRange, but find {0}",
    "zh_CN": "",
    "arguments": [
      "port"
    ],
    "line": 309,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "protocol state only support new/established/invalid/related,but found %s",
    "en_US": "protocol state only support new/established/invalid/related,but found {0}",
    "zh_CN": "",
    "arguments": [
      "state"
    ],
    "line": 331,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "sync firewall config failed,because %s",
    "en_US": "sync firewall config failed,because {0}",
    "zh_CN": "",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 290,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "update firewall ruleSet action failed, because %s",
    "en_US": "update firewall ruleSet action failed, because {0}",
    "zh_CN": "",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 441,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "create firewall rule[%s] failed, because %s",
    "en_US": "create firewall rule[{0}] failed, because {1}",
    "zh_CN": "",
    "arguments": [
      "cmd.getRule().getRuleNumber()",
      "rsp.getError()"
    ],
    "line": 516,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "delete firewall on vRouter[%s],because %s",
    "en_US": "delete firewall on vRouter[{0}],because {1}",
    "zh_CN": "",
    "arguments": [
      "vRouterUuid",
      "re.getError().getCause()"
    ],
    "line": 591,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "create firewall ruleSet[%s] failed, because %s",
    "en_US": "create firewall ruleSet[{0}] failed, because {1}",
    "zh_CN": "",
    "arguments": [
      "cmd.getRuleSet().getName()",
      "re.getError().getCause()"
    ],
    "line": 664,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "delete firewall rule failed on vRouter[%s], because %s",
    "en_US": "delete firewall rule failed on vRouter[{0}], because {1}",
    "zh_CN": "",
    "arguments": [
      "vRouterUuid",
      "rsp.getError()"
    ],
    "line": 744,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "change firewall rule state on vRouter[%s] failed, because %s",
    "en_US": "change firewall rule state on vRouter[{0}] failed, because {1}",
    "zh_CN": "",
    "arguments": [
      "vRouterUuid",
      "rsp.getError()"
    ],
    "line": 822,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "Can not find l3[%] related mac on vRouter[%s]",
    "en_US": "Can not find l3[%] related mac on vRouter[{0}]",
    "zh_CN": "",
    "arguments": [
      "struct.getL3Uuid()",
      "vRouterUuid"
    ],
    "line": 996,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "attach firewall ruleSet[%s] failed, because %s",
    "en_US": "attach firewall ruleSet[{0}] failed, because {1}",
    "zh_CN": "",
    "arguments": [
      "cmd.getRef().getRuleSetName()",
      "re.getError()"
    ],
    "line": 921,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "detach ruleSet failed, maybe it has been deleted",
    "en_US": "detach ruleSet failed, maybe it has been deleted",
    "zh_CN": "",
    "arguments": [],
    "line": 956,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "detach firewall ruleSet[%s] failed,because %s",
    "en_US": "detach firewall ruleSet[{0}] failed,because {1}",
    "zh_CN": "",
    "arguments": [
      "cmd.getRef().getRuleSetName()",
      "re.getError().getCause()"
    ],
    "line": 1024,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "delete firewall ruleSet[%s] failed,because %s",
    "en_US": "delete firewall ruleSet[{0}] failed,because {1}",
    "zh_CN": "",
    "arguments": [
      "cmd.getRuleSetName()",
      "re.getError().getCause()"
    ],
    "line": 1102,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "attach firewall ruleSet[%s] to l3[%s] failed,because %s",
    "en_US": "attach firewall ruleSet[{0}] to l3[{1}] failed,because {2}",
    "zh_CN": "",
    "arguments": [
      "msg.getRuleSetUuid()",
      "msg.getL3Uuid()",
      "errorCode.getCause()"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBase.java"
  },
  {
    "raw": "detach firewall ruleSet from l3[%s] failed,because %s",
    "en_US": "detach firewall ruleSet from l3[{0}] failed,because {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getL3Uuid()",
      "errorCode.getCause()"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBase.java"
  },
  {
    "raw": "cannot find vpcFirewall[uuid:%s], it may have been deleted",
    "en_US": "cannot find vpcFirewall[uuid:{0}], it may have been deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getVpcFirewallUuid()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java"
  },
  {
    "raw": "cannot find vpcFirewall[uuid:%s] related vRouter",
    "en_US": "cannot find vpcFirewall[uuid:{0}] related vRouter",
    "zh_CN": "",
    "arguments": [
      "vo.getVpcFirewallUuid()"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java"
  },
  {
    "raw": "cannot find vpcFirewallRule[uuid:%s], it may have been deleted",
    "en_US": "cannot find vpcFirewallRule[uuid:{0}], it may have been deleted",
    "zh_CN": "",
    "arguments": [
      "msg.getVpcFirewallRuleUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java"
  },
  {
    "raw": "cannot find the route table [uuid:%s]",
    "en_US": "cannot find the route table [uuid:{0}]",
    "zh_CN": "找不到路由表[uuid:{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 466,
    "fileName": "src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java"
  },
  {
    "raw": "cluster[uuid:%s] hypervisorType is not %s",
    "en_US": "cluster[uuid:{0}] hypervisorType is not {1}",
    "zh_CN": "",
    "arguments": [
      "msg.getClusterUuid()",
      "XDragonConstant.HYPERVISOR_TYPE"
    ],
    "line": 34,
    "fileName": "src/main/java/org/zstack/xdragon/XDragonHostFactory.java"
  },
  {
    "raw": "the url is null, please config the YunShan NSP.",
    "en_US": "the url is null, please config the YunShan NSP.",
    "zh_CN": "",
    "arguments": [],
    "line": 46,
    "fileName": "src/main/java/org/zstack/yunshan/util/YunshanClient.java"
  },
  {
    "raw": "invalid order by clause, expect direction[asc,desc] but got %s",
    "en_US": "invalid order by clause, expect direction[asc,desc] but got {0}",
    "zh_CN": "",
    "arguments": [
      "node.getDirection()"
    ],
    "line": 13,
    "fileName": "src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java"
  },
  {
    "raw": "invalid order by clause, inventory[%s] doesn\u0027t have field[%s]",
    "en_US": "invalid order by clause, inventory[{0}] doesn\u0027t have field[{1}]",
    "zh_CN": "",
    "arguments": [
      "m.simpleInventoryName()",
      "node.getField()"
    ],
    "line": 19,
    "fileName": "src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java"
  },
  {
    "raw": "the field to sum must be specified",
    "en_US": "the field to sum must be specified",
    "zh_CN": "",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/zql/ast/visitors/plugin/SumPlugin.java"
  },
  {
    "raw": "resource[%s] doesn\u0027t support zwatch return with clause",
    "en_US": "resource[{0}] doesn\u0027t support zwatch return with clause",
    "zh_CN": "",
    "arguments": [
      "clz.getName()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java"
  },
  {
    "raw": "unknown parameter[%s] in zwatch return with clause, %s",
    "en_US": "unknown parameter[{0}] in zwatch return with clause, {1}",
    "zh_CN": "",
    "arguments": [
      "paramName",
      "normalizedExpr"
    ],
    "line": 270,
    "fileName": "src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java"
  },
  {
    "raw": "invalid zwatch return with clause: %s, %s",
    "en_US": "invalid zwatch return with clause: {0}, {1}",
    "zh_CN": "",
    "arguments": [
      "expr",
      "e.getMessage()"
    ],
    "line": 279,
    "fileName": "src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java"
  },
  {
    "raw": "update eventData[dataUuid\u003d%s] failed, %s",
    "en_US": "update eventData[dataUuid\u003d{0}] failed, {1}",
    "zh_CN": "",
    "arguments": [
      "eventData.getDataUuid()",
      "t.getMessage()"
    ],
    "line": 571,
    "fileName": "src/main/java/org/zstack/zwatch/ZWatchManagerImpl.java"
  },
  {
    "raw": "update alarmData[dataUuid\u003d%s] failed, %s",
    "en_US": "update alarmData[dataUuid\u003d{0}] failed, {1}",
    "zh_CN": "",
    "arguments": [
      "alarmData.getDataUuid()",
      "t.getMessage()"
    ],
    "line": 694,
    "fileName": "src/main/java/org/zstack/zwatch/ZWatchManagerImpl.java"
  },
  {
    "raw": "Some messages have expired. The expired messages are not allowed to be modified. The system will automatically clean up the expired messages. Please operate later",
    "en_US": "Some messages have expired. The expired messages are not allowed to be modified. The system will automatically clean up the expired messages. Please operate later",
    "zh_CN": "部分消息已过期，过期消息不允许修改。系统会自动清理过期消息，请稍后再操作",
    "arguments": [],
    "line": 705,
    "fileName": "src/main/java/org/zstack/zwatch/ZWatchManagerImpl.java"
  },
  {
    "raw": "the action[uuid:%s] already attached to the event subscription[uuid:%s]",
    "en_US": "the action[uuid:{0}] already attached to the event subscription[uuid:{1}]",
    "zh_CN": "报警动作[uuid:{0}]已经被加载到报警时间订阅[uuid:{1}]",
    "arguments": [
      "msg.getActionUuid()",
      "msg.getSubscriptionUuid()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "event doesn\u0027t have label[%s]",
    "en_US": "event doesn\u0027t have label[{0}]",
    "zh_CN": "报警事件没有标签[{0}]",
    "arguments": [
      "msg.getKey()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "the event subscription already has the label[%s]",
    "en_US": "the event subscription already has the label[{0}]",
    "zh_CN": "事件订阅已经有标签[{0}]",
    "arguments": [
      "msg.getKey()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "namespace[%s] not found",
    "en_US": "namespace[{0}] not found",
    "zh_CN": "找不到命名空间[{0}]",
    "arguments": [
      "msg.getNamespace()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "namespace[%s] doesn\u0027t have the event[%s]",
    "en_US": "namespace[{0}] doesn\u0027t have the event[{1}]",
    "zh_CN": "命名空间[{0}]中没有事件[{1}]",
    "arguments": [
      "ns.getName()",
      "msg.getEventName()"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "event[%s] doesn\u0027t have the label[%s]",
    "en_US": "event[{0}] doesn\u0027t have the label[{1}]",
    "zh_CN": "事件[{0}]不存在标签[{1}]",
    "arguments": [
      "msg.getEventName()",
      "l.getKey()"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "duplicate key[%s] with values%s",
    "en_US": "duplicate key[{0}] with values{1}",
    "zh_CN": "重复的键[{0}]和键值{1}",
    "arguments": [
      "k",
      "l"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "Period field is not supported for metric [name:%s]",
    "en_US": "Period field is not supported for metric [name:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getMetricName()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "Period field can not be null for metric [name:%s]",
    "en_US": "Period field can not be null for metric [name:{0}]",
    "zh_CN": "",
    "arguments": [
      "msg.getMetricName()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "namespace[%s] doesn\u0027t have the metric[%s]",
    "en_US": "namespace[{0}] doesn\u0027t have the metric[{1}]",
    "zh_CN": "命名空间[{0}]不包含时序数据[{1}]",
    "arguments": [
      "msg.getNamespace()",
      "msg.getMetricName()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "the metric[%s] is admin only, not available for current user",
    "en_US": "the metric[{0}] is admin only, not available for current user",
    "zh_CN": "",
    "arguments": [
      "msg.getMetricName()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "the metric[%s] doesn\u0027t have the label[%s]",
    "en_US": "the metric[{0}] doesn\u0027t have the label[{1}]",
    "zh_CN": "时序数据[{0}]没有标签[{0}]",
    "arguments": [
      "msg.getMetricName()",
      "l.getKey()"
    ],
    "line": 186,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "invalid action type[%s]",
    "en_US": "invalid action type[{0}]",
    "zh_CN": "无效的报警动作类型[{0}]",
    "arguments": [
      "actionType"
    ],
    "line": 209,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "action[uuid:%s, type:%s] not found",
    "en_US": "action[uuid:{0}, type:{1}] not found",
    "zh_CN": "找不到报警动作[uuid:{0}, 类型:{1}]",
    "arguments": [
      "actionUuid",
      "actionType"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "duplicated action[uuid:%s, type:%s] for the alarm[uuid:%s]",
    "en_US": "duplicated action[uuid:{0}, type:{1}] for the alarm[uuid:{2}]",
    "zh_CN": "报警器[uuid:{2}]已经存在报警动作[uuid:{0}, 类型:{1}]",
    "arguments": [
      "msg.getActionUuid()",
      "msg.getActionType()",
      "msg.getAlarmUuid()"
    ],
    "line": 222,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "duplicate label[key:%s, operator:%s, value:%s] for the alarm[uuid:%s]",
    "en_US": "duplicate label[key:{0}, operator:{1}, value:{2}] for the alarm[uuid:{3}]",
    "zh_CN": "报警器[uuid:{2}]已经存在标签[key:{0}, operator:{1}, value:{2}]",
    "arguments": [
      "msg.getKey()",
      "msg.getOperator()",
      "msg.getValue()",
      "msg.getAlarmUuid()"
    ],
    "line": 232,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "cannot find the event subscription[uuid:%s], it may have been deleted",
    "en_US": "cannot find the event subscription[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到事件订阅[uuid:{0}]，它可能已经被删除",
    "arguments": [
      "msg.getSubscriptionUuid()"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java"
  },
  {
    "raw": "cannot find the alarm[uuid:%s], it may have been deleted",
    "en_US": "cannot find the alarm[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到报警器[uuid:{0}]，它可能已经被删除",
    "arguments": [
      "msg.getAlarmUuid()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java"
  },
  {
    "raw": "the metric[%s] repeatInterval value cannot be less than 1h",
    "en_US": "the metric[{0}] repeatInterval value cannot be less than 1h",
    "zh_CN": "时序数据[{0}]的报警间隔时间不能低于1h",
    "arguments": [
      "alarmVO.getMetricName()"
    ],
    "line": 576,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java"
  },
  {
    "raw": "InsufficientData",
    "en_US": "InsufficientData",
    "zh_CN": "数据不足",
    "arguments": [],
    "line": 16,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java"
  },
  {
    "raw": "Alarm",
    "en_US": "Alarm",
    "zh_CN": "已触发",
    "arguments": [],
    "line": 14,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java"
  },
  {
    "raw": "OK",
    "en_US": "OK",
    "zh_CN": "监控中",
    "arguments": [],
    "line": 12,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java"
  },
  {
    "raw": "cannot find the topic[uuid:%s]",
    "en_US": "cannot find the topic[uuid:{0}]",
    "zh_CN": "找不到主题[uuid:{0}]",
    "arguments": [
      "actionUuid"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java"
  },
  {
    "raw": "cannot find SNSTextTemplate[uuid:%s], it may have been deleted",
    "en_US": "cannot find SNSTextTemplate[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到报警文本模板[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getAlarmTextTemplateUuid()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java"
  },
  {
    "raw": "invalid application platform type[%s]",
    "en_US": "invalid application platform type[{0}]",
    "zh_CN": "无效的平台类型[{0}]",
    "arguments": [
      "msg.getApplicationPlatformType()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "parameters:\\n %s are not supported by ZStack, available values are:\\n %s",
    "en_US": "parameters:\\n {0} are not supported by ZStack, available values are:\\n {1}",
    "zh_CN": "",
    "arguments": [
      "String.join(\",\\n\", errorParams)",
      "String.join(\",\\n\", AbstractTextTemplate.defaultSupportedParams)"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "application platform/endpoint [%s] doesn\u0027t support user-defined template",
    "en_US": "application platform/endpoint [{0}] doesn\u0027t support user-defined template",
    "zh_CN": "应用平台/终端[{0}]不支持用户定义模板",
    "arguments": [
      "msg.getApplicationPlatformType()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "The length of aliyun sms sign should between 2 to 12 characters. Got sign: [%s] with [%d] characters.",
    "en_US": "The length of aliyun sms sign should between 2 to 12 characters. Got sign: [{0}] with [{1}] characters.",
    "zh_CN": "",
    "arguments": [
      "sign",
      "sign.length()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "Sms template code is a string with 13 characters. Got alarm template code: [%s] with [%d] characters.",
    "en_US": "Sms template code is a string with 13 characters. Got alarm template code: [{0}] with [{1}] characters.",
    "zh_CN": "",
    "arguments": [
      "alarmTemplateCode",
      "alarmTemplateCode.length()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "Sms template code is a string with 13 characters. Got event template code: [%s] with [%d] characters.",
    "en_US": "Sms template code is a string with 13 characters. Got event template code: [{0}] with [{1}] characters.",
    "zh_CN": "",
    "arguments": [
      "eventTemplateCode",
      "eventTemplateCode.length()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "alarm[uuid:%s] is a system alarm which cannot be deleted",
    "en_US": "alarm[uuid:{0}] is a system alarm which cannot be deleted",
    "zh_CN": "报警器[uuid:{0}]是一个系统报警器，不能被删除",
    "arguments": [
      "DATA_DIR_CAPACITY_ALARM_UUID"
    ],
    "line": 587,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java"
  },
  {
    "raw": "removing system topic[uuid:%s] from system alarm[uuid:%s] is forbidden",
    "en_US": "removing system topic[uuid:{0}] from system alarm[uuid:{1}] is forbidden",
    "zh_CN": "禁止从系统报警器[uuid:{1}]移除系统主题[uuid:{0}]",
    "arguments": [
      "SNSSystemAlarmTopicManager.SYSTEM_ALARM_TOPIC_UUID",
      "DATA_DIR_CAPACITY_ALARM_UUID"
    ],
    "line": 598,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java"
  },
  {
    "raw": "invalid label[%s], valid queryable labels are %s",
    "en_US": "invalid label[{0}], valid queryable labels are {1}",
    "zh_CN": "无效的标签[{0}]，有效的可查询标签是{1}",
    "arguments": [
      "l.getKey()",
      "AuditDataV2.queryableLoginLabels"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "startTime[%s] is greater than endTime[%s]",
    "en_US": "startTime[{0}] is greater than endTime[{1}]",
    "zh_CN": "开始时间[{0}]大于结束时间[{1}]",
    "arguments": [
      "msg.getStartTime()",
      "msg.getEndTime()"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "dataUuid cannot be missed",
    "en_US": "dataUuid cannot be missed",
    "zh_CN": "",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "dataStartTime and dataEndTime cannot be missed",
    "en_US": "dataStartTime and dataEndTime cannot be missed",
    "zh_CN": "",
    "arguments": [],
    "line": 120,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "dataStartTime[%s] is greater than dataEndTime[%s]",
    "en_US": "dataStartTime[{0}] is greater than dataEndTime[{1}]",
    "zh_CN": "",
    "arguments": [
      "msg.getDataStartTime()",
      "msg.getDataEndTime()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "namespace name cannot start with %s that is reserved",
    "en_US": "namespace name cannot start with {0} that is reserved",
    "zh_CN": "名字空间(namespace)不能以{0}开头",
    "arguments": [
      "Namespace.ZSTACK_NAMESPACE_PREFIX"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "cannot find namespace[%s]",
    "en_US": "cannot find namespace[{0}]",
    "zh_CN": "名字空间(namespace[{0}]不存在",
    "arguments": [
      "msg.getNamespace()"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "cannot find metric[%s] in namespace[%s]",
    "en_US": "cannot find metric[{0}] in namespace[{1}]",
    "zh_CN": "名字空间(namespace[{1}]中找不到时序数据[{0}]",
    "arguments": [
      "msg.getMetricName()",
      "msg.getNamespace()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "metric[%s]\u0027s labels[%s] does not include [%s]",
    "en_US": "metric[{0}]\u0027s labels[{1}] does not include [{2}]",
    "zh_CN": "时序数据[{0}]的标签列表[{1}]没有指定的标签[{2}]",
    "arguments": [
      "msg.getMetricName()",
      "metric.getLabelNames()",
      "l.getKey()"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "metric[%s] does not has filter[%s]",
    "en_US": "metric[{0}] does not has filter[{1}]",
    "zh_CN": "时序数据[{0}]不包含过滤条件[{1}]",
    "arguments": [
      "msg.getMetricName()",
      "l.getValue()"
    ],
    "line": 186,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "label[%s] must be specified",
    "en_US": "label[{0}] must be specified",
    "zh_CN": "必须指定标签[{0}]",
    "arguments": [
      "AuditDataV2.TAG_RESOURCE_UUID"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "endTime[%s, %sms] must not be before startTime[%s, %sms]",
    "en_US": "endTime[{0}, {1}ms] must not be before startTime[{2}, {3}ms]",
    "zh_CN": "停止时间(endTime)[{0}, {1}ms]不能在开始时间(startTime)[{2}, {3}ms]",
    "arguments": [
      "end",
      "msg.getEndTime()",
      "start",
      "msg.getStartTime()"
    ],
    "line": 271,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "no namespace[%s] defined in the system",
    "en_US": "no namespace[{0}] defined in the system",
    "zh_CN": "系统中未定义名字空间(namespace[{0}])",
    "arguments": [
      "msg.getNamespace()"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "the namespace[%s] has no metric[%s]",
    "en_US": "the namespace[{0}] has no metric[{1}]",
    "zh_CN": "名字空间(namespace[{0}])不包含时序数据[{1}]",
    "arguments": [
      "msg.getNamespace()",
      "msg.getMetricName()"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "Normal",
    "en_US": "Normal",
    "zh_CN": "提示",
    "arguments": [],
    "line": 19,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java"
  },
  {
    "raw": "Important",
    "en_US": "Important",
    "zh_CN": "严重",
    "arguments": [],
    "line": 17,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java"
  },
  {
    "raw": "Emergent",
    "en_US": "Emergent",
    "zh_CN": "紧急",
    "arguments": [],
    "line": 15,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java"
  },
  {
    "raw": "invalid function: %s, %s",
    "en_US": "invalid function: {0}, {1}",
    "zh_CN": "无效的方法: {0}, {1}",
    "arguments": [
      "expr",
      "e.getMessage()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Function.java"
  },
  {
    "raw": "invalid expression: %s, no function found",
    "en_US": "invalid expression: {0}, no function found",
    "zh_CN": "无效的表达式: {0}，找不到对应的方法",
    "arguments": [
      "expr"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Function.java"
  },
  {
    "raw": "the label string[%s] contains no valid operator",
    "en_US": "the label string[{0}] contains no valid operator",
    "zh_CN": "标签中[{0}]未包含有效的比较符号(operator)",
    "arguments": [
      "str"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "invalid label, \u0027key\u0027 field cannot be null. %s",
    "en_US": "invalid label, \u0027key\u0027 field cannot be null. {0}",
    "zh_CN": "无效的标签\"key\"不能为空。{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(this)"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "invalid label, \u0027op\u0027 field is null or something another than Regex and Equal. %s",
    "en_US": "invalid label, \u0027op\u0027 field is null or something another than Regex and Equal. {0}",
    "zh_CN": "无效的标签，\u0027op\u0027为空或者是其它的非正则或者等于符号。{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(this)"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "invalid label, \u0027value\u0027 field cannot be null. %s",
    "en_US": "invalid label, \u0027value\u0027 field cannot be null. {0}",
    "zh_CN": "无效的标签\"value\"不能为空。{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(this)"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "invalid value[%s] of the argument[%s]",
    "en_US": "invalid value[{0}] of the argument[{1}]",
    "zh_CN": "参数[{1}]值(value)[{0}]无效",
    "arguments": [
      "value",
      "name"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/zwatch/function/ArgumentChecker.java"
  },
  {
    "raw": "value[%s] is not a Integer number",
    "en_US": "value[{0}] is not a Integer number",
    "zh_CN": "值(value)[{0}]不是一个整数",
    "arguments": [
      "v"
    ],
    "line": 21,
    "fileName": "src/main/java/org/zstack/zwatch/function/LimitFunction.java"
  },
  {
    "raw": "invalid argument[limit:%s], it can\u0027t be a negative number",
    "en_US": "invalid argument[limit:{0}], it can\u0027t be a negative number",
    "zh_CN": "无效的参数[limit:{0}]，不能是负数",
    "arguments": [
      "v"
    ],
    "line": 18,
    "fileName": "src/main/java/org/zstack/zwatch/function/LimitFunction.java"
  },
  {
    "raw": "missing required argument[%s]",
    "en_US": "missing required argument[{0}]",
    "zh_CN": "缺少参数[{0}]",
    "arguments": [
      "name"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/zwatch/function/MetricFunction.java"
  },
  {
    "raw": "duplicate argument[%s]",
    "en_US": "duplicate argument[{0}]",
    "zh_CN": "重复的参数[{0}]",
    "arguments": [
      "k"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/zwatch/function/MetricFunction.java"
  },
  {
    "raw": "unknown function[%s]",
    "en_US": "unknown function[{0}]",
    "zh_CN": "未知方法[{0}]",
    "arguments": [
      "func.getName()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/zwatch/function/MetricFunction.java"
  },
  {
    "raw": "unknown argument[%s]",
    "en_US": "unknown argument[{0}]",
    "zh_CN": "未知参数[{0}]",
    "arguments": [
      "arg.name"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/zwatch/function/SortFunction.java"
  },
  {
    "raw": "cannot find EventFamily[name:%s]",
    "en_US": "cannot find EventFamily[name:{0}]",
    "zh_CN": "找不到事件族[name:{0}]",
    "arguments": [
      "name"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java"
  },
  {
    "raw": "cannot find EventFamily[name:%s, namespace:%s]",
    "en_US": "cannot find EventFamily[name:{0}, namespace:{1}]",
    "zh_CN": "找不到事件族[name:{0}, namespace:{1}]",
    "arguments": [
      "name",
      "namespace"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java"
  },
  {
    "raw": "invalid query label[%s]. Allowed label names are %s",
    "en_US": "invalid query label[{0}]. Allowed label names are {1}",
    "zh_CN": "无效的查询标签[{0}]。允许标签名是 {1}",
    "arguments": [
      "label.getKey()",
      "names"
    ],
    "line": 632,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java"
  },
  {
    "raw": "there are multiple EventFamily with the name[%s], you must specify the label[%s]",
    "en_US": "there are multiple EventFamily with the name[{0}], you must specify the label[{1}]",
    "zh_CN": "存在多个名为[{0}]的事件族，你必须指定标签[{1}]",
    "arguments": [
      "name.getValue()",
      "InfluxEventDataV2.FIELD_NAMESPACE"
    ],
    "line": 666,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDBEventDatabaseDriver.java"
  },
  {
    "raw": "unable to query influxdb, %s",
    "en_US": "unable to query influxdb, {0}",
    "zh_CN": "",
    "arguments": [
      "ret.getError()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "invalid influxdb response: %s, no name found in columns",
    "en_US": "invalid influxdb response: {0}, no name found in columns",
    "zh_CN": "",
    "arguments": [
      "JSONObjectUtil.toJsonString(ret)"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "failed to create influxdb retention \u0027%s\u0027, %s",
    "en_US": "failed to create influxdb retention \u0027{0}\u0027, {1}",
    "zh_CN": "",
    "arguments": [
      "retention",
      "res.getError()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "failed to alter influxdb retention \u0027%s\u0027, %s",
    "en_US": "failed to alter influxdb retention \u0027{0}\u0027, {1}",
    "zh_CN": "",
    "arguments": [
      "retention",
      "res.getError()"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "failed to create influxdb default user \u0027%s\u0027, %s",
    "en_US": "failed to create influxdb default user \u0027{0}\u0027, {1}",
    "zh_CN": "",
    "arguments": [
      "defaultUserName",
      "res.getError()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "no mysql namespace[%s] found",
    "en_US": "no mysql namespace[{0}] found",
    "zh_CN": "",
    "arguments": [
      "qo.getNamespaceName()"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/zwatch/mysql/MysqlDatabaseDriver.java"
  },
  {
    "raw": "namespace[%s] has no metric[%s]",
    "en_US": "namespace[{0}] has no metric[{1}]",
    "zh_CN": "名字空间(namespace)[{0}]没有任何时序数据(metric)[{1}]",
    "arguments": [
      "getName()",
      "queryObject.getMetricName()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java"
  },
  {
    "raw": "metric[%s] of the namespace[%s] has no label named %s",
    "en_US": "metric[{0}] of the namespace[{1}] has no label named {2}",
    "zh_CN": "名字空间(namespace)[{1}]的时序数据(metric)[{1}]没有名为{2}的标签",
    "arguments": [
      "m.getName()",
      "getName()",
      "l.getKey()"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java"
  },
  {
    "raw": "error happened but reason not specified",
    "en_US": "error happened but reason not specified",
    "zh_CN": "发生了意想不到的错误",
    "arguments": [],
    "line": 406,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/NamespaceEventManagerImpl.java"
  },
  {
    "raw": "folder[%s] not found on the management server[%s]",
    "en_US": "folder[{0}] not found on the management server[{1}]",
    "zh_CN": "在管理服务器[{1}]上找不到对应的文件夹[{0}]",
    "arguments": [
      "d",
      "Platform.getManagementServerIp()"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/SystemNamespace.java"
  },
  {
    "raw": "LessThanOrEqualTo",
    "en_US": "LessThanOrEqualTo",
    "zh_CN": "小于等于",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "LessThan",
    "en_US": "LessThan",
    "zh_CN": "小于",
    "arguments": [],
    "line": 33,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "GreaterThan",
    "en_US": "GreaterThan",
    "zh_CN": "大于",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "GreaterThanOrEqualTo",
    "en_US": "GreaterThanOrEqualTo",
    "zh_CN": "大于等于",
    "arguments": [],
    "line": 29,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "unit test asks it to fail",
    "en_US": "unit test asks it to fail",
    "zh_CN": "",
    "arguments": [],
    "line": 40,
    "fileName": "src/test/java/org/zstack/test/aop/ManInTheMiddleService.java"
  },
  {
    "raw": "On purpose",
    "en_US": "On purpose",
    "zh_CN": "",
    "arguments": [],
    "line": 22,
    "fileName": "src/test/java/org/zstack/test/compute/hostallocator/HostAllocateExtension.java"
  },
  {
    "raw": "on purpose",
    "en_US": "on purpose",
    "zh_CN": "",
    "arguments": [],
    "line": 27,
    "fileName": "src/test/java/org/zstack/test/kvm/KVMPingAgentExtensionForTest.java"
  }
]
