[
  {
    "raw": "no pemission to do the operation for [accountUuid:%s, userUuid:%s]",
    "en_US": "no pemission to do the operation for [accountUuid:{0}, userUuid:{1}]",
    "zh_CN": "没有可对[AccountUuId：{0}，UserUuId：{1}]执行操作的pEmission",
    "arguments": [
      "accountUuid",
      "userUuid"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "If a specified Accesskey is expected, the AccesskeyId and the AccesskeySecret must be provided at the same time.",
    "en_US": "If a specified Accesskey is expected, the AccesskeyId and the AccesskeySecret must be provided at the same time.",
    "zh_CN": "如果需要指定的AccessKey，则必须同时提供AccessKeyId和AccessKeySecret。",
    "arguments": [],
    "line": 50,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "[accountId: %s, userID: %s] is not valid account or iam2 porject/user",
    "en_US": "[accountId: {0}, userID: {1}] is not valid account or iam2 porject/user",
    "zh_CN": "[帐户ID：{0}，用户ID：{1}]不是有效的帐户或IAM2对象/用户",
    "arguments": [
      "msg.getAccountUuid()",
      "msg.getUserUuid()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "accessKey number for [accountId: %s, userID: %s]exceeds the max",
    "en_US": "accessKey number for [accountId: {0}, userID: {1}]exceeds the max",
    "zh_CN": "[AccountId：{0}，UserId：{1}]的AccessKey编号超出最大值",
    "arguments": [
      "msg.getAccountUuid()",
      "msg.getUserUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java"
  },
  {
    "raw": "not support the ip version %d",
    "en_US": "not support the ip version {0}",
    "zh_CN": "不支持的IP版本{0}",
    "arguments": [
      "ipVer"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "%s duplicate/overlap ip entry with access-control-list group:%s",
    "en_US": "{0} duplicate/overlap ip entry with access-control-list group:{1}",
    "zh_CN": "{0}中有和访问控制组{1}里的ip重复/重叠",
    "arguments": [
      "ips",
      "acl.getUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "ip format only supports ip/iprange/cidr, but find %s",
    "en_US": "ip format only supports ip/iprange/cidr, but find {0}",
    "zh_CN": "只支持IP地址/IP段/IP网络的格式，不支持{0}",
    "arguments": [
      "ips"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "ip range[%s, %s] is overlap with [%s, %s] in access-control-list group:%s",
    "en_US": "ip range[{0}, {1}] is overlap with [{2}, {3}] in access-control-list group:{4}",
    "zh_CN": "IP段[{0}，{1}]和访问控制组：{4}里的[{2}, {3}]有重叠的ip",
    "arguments": [
      "startIp",
      "endIp",
      "NetworkUtils.longToIpv4String(r.lowerEndpoint())",
      "NetworkUtils.longToIpv4String(r.upperEndpoint())",
      "acl.getUuid()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[%s] already own redirect rule, can not add IP Entry",
    "en_US": "the access-control-list groups[{0}] already own redirect rule, can not add IP Entry",
    "zh_CN": "访问控制列表组[{0}]已拥有重定向规则，无法添加IP条目",
    "arguments": [
      "acl.getUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[%s] can\u0027t be added more than %d ip entries",
    "en_US": "the access-control-list groups[{0}] can\u0027t be added more than {1} ip entries",
    "zh_CN": "访问控制组[{0}]最多只能添加{1}ip组",
    "arguments": [
      "acl.getUuid()",
      "AccessControlListConstants.MAX_ENTRY_COUNT_PER_GROUP"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[%s] already own redirect rule, can not add ip entry",
    "en_US": "the access-control-list groups[{0}] already own redirect rule, can not add ip entry",
    "zh_CN": "访问控制列表组[{0}]已拥有重定向规则，无法添加IP条目",
    "arguments": [
      "acl.getUuid()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[%s] already own ip entry, can not add redirect rule",
    "en_US": "the access-control-list groups[{0}] already own ip entry, can not add redirect rule",
    "zh_CN": "访问控制列表组[{0}]已拥有IP条目，无法添加重定向规则",
    "arguments": [
      "acl.getUuid()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[%s] already own one redirect rule, can not add redirect rule",
    "en_US": "the access-control-list groups[{0}] already own one redirect rule, can not add redirect rule",
    "zh_CN": "访问控制列表组[{0}]已拥有一个重定向规则，无法添加重定向规则",
    "arguments": [
      "acl.getUuid()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "domain and url can not both empty",
    "en_US": "domain and url can not both empty",
    "zh_CN": "域和URL不能同时为空",
    "arguments": [],
    "line": 162,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "url[%s] is not validate url",
    "en_US": "url[{0}] is not validate url",
    "zh_CN": "URL[{0}]不是验证URL",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "domain[%s] is not validate domain",
    "en_US": "domain[{0}] is not validate domain",
    "zh_CN": "域[{0}]不是验证域",
    "arguments": [
      "msg.getDomain()"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java"
  },
  {
    "raw": "cannot connect to [%s] in %d milliseconds, so aliyun openapi is unreachable.",
    "en_US": "cannot connect to [{0}] in {1} milliseconds, so aliyun openapi is unreachable.",
    "zh_CN": "无法在{1}毫秒内连接到[{0}]，因此无法访问阿里云OpenAPI。",
    "arguments": [
      "builder.deleteCharAt(builder.length() - 1)",
      "timeout"
    ],
    "line": 348,
    "fileName": "src/main/java/org/zstack/aliyun/account/AliyunAccountBase.java"
  },
  {
    "raw": "no bucket found for backup",
    "en_US": "no bucket found for backup",
    "zh_CN": "没有可用的Bucket执行备份",
    "arguments": [],
    "line": 466,
    "fileName": "src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java"
  },
  {
    "raw": "accessKey and keySecret must be set",
    "en_US": "accessKey and keySecret must be set",
    "zh_CN": "必须设置accessKey和keySecret",
    "arguments": [],
    "line": 28,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java"
  },
  {
    "raw": "ocean api endpoint must not be null",
    "en_US": "ocean api endpoint must not be null",
    "zh_CN": "Ocean API终结点不能为空",
    "arguments": [],
    "line": 73,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java"
  },
  {
    "raw": "accessKey and keySecret must be set!",
    "en_US": "accessKey and keySecret must be set!",
    "zh_CN": "必须设置AccessKey和KeySecret！",
    "arguments": [],
    "line": 33,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunNasClient.java"
  },
  {
    "raw": "regionId must be set!",
    "en_US": "regionId must be set!",
    "zh_CN": "必须设置RegionID！",
    "arguments": [],
    "line": 40,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunNasClient.java"
  },
  {
    "raw": "entry is still existed after %s ms",
    "en_US": "entry is still existed after {0} ms",
    "zh_CN": "虚拟路由器删除超时（{0} ms）",
    "arguments": [
      "AliyunConstant.DEFAULT_ENTRY_WAIT_STATUS_TIMEOUT"
    ],
    "line": 2162,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "cannot find EcsInstance[%s], please check if it exists in Aliyun console",
    "en_US": "cannot find EcsInstance[{0}], please check if it exists in Aliyun console",
    "zh_CN": "找不到ECSInstance[{0}]，请检查阿里云控制台是否存在",
    "arguments": [
      "request.getInstanceIds()"
    ],
    "line": 2648,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "image already existed remote, please use sync first.",
    "en_US": "image already existed remote, please use sync first.",
    "zh_CN": "镜像已经存在阿里云服务器上，请尝试同步数据",
    "arguments": [],
    "line": 2708,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "regionId[%s] is invalid by aliyun!",
    "en_US": "regionId[{0}] is invalid by aliyun!",
    "zh_CN": "regionId[{0}]是无效的！",
    "arguments": [
      "request.getRegionId()"
    ],
    "line": 3015,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java"
  },
  {
    "raw": "Not a valid message!",
    "en_US": "Not a valid message!",
    "zh_CN": "无效消息！",
    "arguments": [],
    "line": 61,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "%s failed, ErrorCode: %s, ErrorMessage: %s",
    "en_US": "{0} failed, ErrorCode: {1}, ErrorMessage: {2}",
    "zh_CN": "{0}失败，错误代码：{1}，错误消息：{2}",
    "arguments": [
      "action",
      "result.ErrorCode",
      "result.ErrorMessage"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "Device Not Ready in %d milli seconds",
    "en_US": "Device Not Ready in {0} milli seconds",
    "zh_CN": "设备在{0}毫秒内未就绪",
    "arguments": [
      "15000"
    ],
    "line": 301,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "snapshot task status is finished %s",
    "en_US": "snapshot task status is finished {0}",
    "zh_CN": "快照任务状态为已完成{0}",
    "arguments": [
      "result.Content.TaskStatus"
    ],
    "line": 497,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "snapshot task cannot finished in %d milliseconds, now progress is %d, status is %s",
    "en_US": "snapshot task cannot finished in {0} milliseconds, now progress is {1}, status is {2}",
    "zh_CN": "快照任务无法在{0}毫秒内完成，当前进度为{1}，状态为{2}",
    "arguments": [
      "msg.getTimeout()",
      "result.Content.Progress",
      "result.Content.TaskStatus"
    ],
    "line": 493,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "not supported HybridClient",
    "en_US": "not supported HybridClient",
    "zh_CN": "不支持HybridClient",
    "arguments": [],
    "line": 898,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java"
  },
  {
    "raw": "add endpoint to sdk failed, due to: %s",
    "en_US": "add endpoint to sdk failed, due to: {0}",
    "zh_CN": "将终结点添加到SDK失败，原因是：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 259,
    "fileName": "src/main/java/org/zstack/aliyun/core/AliyunUtils.java"
  },
  {
    "raw": "cannot find key / secret from msg",
    "en_US": "cannot find key / secret from msg",
    "zh_CN": "无法从消息中找到密钥/机密",
    "arguments": [],
    "line": 86,
    "fileName": "src/main/java/org/zstack/aliyun/core/OssSdkImpl.java"
  },
  {
    "raw": "cannot input 0-length file as vm images!",
    "en_US": "cannot input 0-length file as vm images!",
    "zh_CN": "无法将长度为0的文件作为云主机镜像输入！",
    "arguments": [],
    "line": 410,
    "fileName": "src/main/java/org/zstack/aliyun/core/OssSdkImpl.java"
  },
  {
    "raw": "Permission denied for: %s",
    "en_US": "Permission denied for: {0}",
    "zh_CN": "权限被拒绝：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 499,
    "fileName": "src/main/java/org/zstack/aliyun/core/OssSdkImpl.java"
  },
  {
    "raw": "Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: %s)",
    "en_US": "Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: {0})",
    "zh_CN": "Bucket名称已经存在（可能已经被别的用户使用了），请尝试使用一个新的命名。（阿里云请求ID: {0}）",
    "arguments": [
      "e.getRequestId()"
    ],
    "line": 588,
    "fileName": "src/main/java/org/zstack/aliyun/core/OssSdkImpl.java"
  },
  {
    "raw": "arg \u0027endpoint\u0027 must be set in %s type",
    "en_US": "arg \u0027endpoint\u0027 must be set in {0} type",
    "zh_CN": "必须在{0}类型中设置参数“ endpoint ”",
    "arguments": [
      "HybridType.AliyunEBS.toString()"
    ],
    "line": 277,
    "fileName": "src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java"
  },
  {
    "raw": "not supported datacenter [%s] type here!",
    "en_US": "not supported datacenter [{0}] type here!",
    "zh_CN": "此处不支持数据中心[{0}]类型！",
    "arguments": [
      "type.toString()"
    ],
    "line": 332,
    "fileName": "src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java"
  },
  {
    "raw": "must indicate zoneId in private aliyun.",
    "en_US": "must indicate zoneId in private aliyun.",
    "zh_CN": "必须在私有阿里云中注明ZoneID。",
    "arguments": [],
    "line": 175,
    "fileName": "src/main/java/org/zstack/aliyun/core/identityzone/AliyunPrivateIdentityZoneBase.java"
  },
  {
    "raw": "make ocean api signature string failed: %s",
    "en_US": "make ocean api signature string failed: {0}",
    "zh_CN": "生成Ocean API签名字符串失败：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/OceanApi.java"
  },
  {
    "raw": "url(ocean endpoint) must be set for aliyun ebs backupstorage",
    "en_US": "url(ocean endpoint) must be set for aliyun ebs backupstorage",
    "zh_CN": "阿里云EBS备份存储必须设置URL（海洋端点）",
    "arguments": [],
    "line": 30,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageApiInterceptor.java"
  },
  {
    "raw": "aliyun ebs backup storage do not support to cancel download image",
    "en_US": "aliyun ebs backup storage do not support to cancel download image",
    "zh_CN": "阿里云EBS备份存储不支持取消下载镜像",
    "arguments": [],
    "line": 376,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java"
  },
  {
    "raw": "no such object %s found in bucket %s",
    "en_US": "no such object {0} found in bucket {1}",
    "zh_CN": "在存储桶{1}中找不到此类对象{0}",
    "arguments": [
      "objectFile",
      "ovo.getBucketName()"
    ],
    "line": 620,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java"
  },
  {
    "raw": "cannot delete oss bucket [%s], Aliyun Ebs BackupStorage [%s] still existed, please delete it first.",
    "en_US": "cannot delete oss bucket [{0}], Aliyun Ebs BackupStorage [{1}] still existed, please delete it first.",
    "zh_CN": "无法删除OSS Bucket[{0}]，Aliyun EBS BackupStorage[{1}]仍然存在，请先将其删除。",
    "arguments": [
      "oss.getUuid()",
      "evo.getUuid()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageCascadeExtenstion.java"
  },
  {
    "raw": "cannot find device path from volume: %s",
    "en_US": "cannot find device path from volume: {0}",
    "zh_CN": "无法从卷中找到设备路径：{0}",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java"
  },
  {
    "raw": "aliyun ebs not support resize on running vm now.",
    "en_US": "aliyun ebs not support resize on running vm now.",
    "zh_CN": "阿里云EBS现在不支持在运行的云主机上调整大小。",
    "arguments": [],
    "line": 490,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java"
  },
  {
    "raw": "iso [%s] has been attached, we can not attach it until detach it",
    "en_US": "iso [{0}] has been attached, we can not attach it until detach it",
    "zh_CN": "已附加ISO[{0}]，在分离它之前无法附加它",
    "arguments": [
      "isoUuid"
    ],
    "line": 612,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java"
  },
  {
    "raw": "url must starts with http:// or https://, but got %s",
    "en_US": "url must starts with http:// or https://, but got {0}",
    "zh_CN": "URL必须以HTTP：//或HTTPS：//开头，但获得了{0}",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "url(ocean endpoint) must be set for aliyun ebs primarystorage",
    "en_US": "url(ocean endpoint) must be set for aliyun ebs primarystorage",
    "zh_CN": "阿里云EBS PrimaryStorage必须设置URL（海洋端点）",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "panguPartitionUuid or identityZoneUuid must be set.",
    "en_US": "panguPartitionUuid or identityZoneUuid must be set.",
    "zh_CN": "必须设置PangUpartitionUuid或IdentityZoneUuid。",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "panguPartitionUuid [%s] not be matched with identityZoneUuid [%s]",
    "en_US": "panguPartitionUuid [{0}] not be matched with identityZoneUuid [{1}]",
    "zh_CN": "panguPartitionUuid[{0}]与identityZoneUuid[{1}]不匹配",
    "arguments": [
      "msg.getPanguPartitionUuid()",
      "msg.getIdentityZoneUuid()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "the aliyun ebs primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the aliyun ebs primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "阿里云EBS主存储[uuid：{0}，名称：{1}]在连接的集群中找不到任何可用于实例化卷的物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 669,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "create snapshot timeout, progress is %d",
    "en_US": "create snapshot timeout, progress is {0}",
    "zh_CN": "创建快照超时，进度为{0}",
    "arguments": [
      "reply1.getProgress()"
    ],
    "line": 2888,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find snapshot from image: %s, maybe the image has been deleted",
    "en_US": "cannot find snapshot from image: {0}, maybe the image has been deleted",
    "zh_CN": "无法从镜像中找到快照：{0}，该镜像可能已被删除",
    "arguments": [
      "msg.getVolume().getRootImageUuid()"
    ],
    "line": 1971,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "ebs primarystorage cannot support decrease size now",
    "en_US": "ebs primarystorage cannot support decrease size now",
    "zh_CN": "EBS主存储现在无法支持减小大小",
    "arguments": [],
    "line": 2746,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "aliyun ebs primarystorage only support aliyun ebs bs, actually get type: %s",
    "en_US": "aliyun ebs primarystorage only support aliyun ebs bs, actually get type: {0}",
    "zh_CN": "阿里云EBS PrimaryStorage仅支持阿里云EBS BS，实际获取类型：{0}",
    "arguments": [
      "bsvo.getType()"
    ],
    "line": 3134,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java"
  },
  {
    "raw": "cannot delete identity zone [%s], Aliyun Ebs PrimaryStorage [%s] still existed, please delete it first.",
    "en_US": "cannot delete identity zone [{0}], Aliyun Ebs PrimaryStorage [{1}] still existed, please delete it first.",
    "zh_CN": "无法删除标识区[{0}]，阿里云EBS PrimaryStorage[{1}]仍然存在，请先删除。",
    "arguments": [
      "iz.getUuid()",
      "evo.getUuid()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageCascadeExtension.java"
  },
  {
    "raw": "invalid install path: %s",
    "en_US": "invalid install path: {0}",
    "zh_CN": "安装路径无效：{0}",
    "arguments": [
      "installPath"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "append volumeId: %s, but another volumeId existed in url: %s",
    "en_US": "append volumeId: {0}, but another volumeId existed in url: {1}",
    "zh_CN": "附加VolumeID：{0}，但URL中存在另一个VolumeID：{1}",
    "arguments": [
      "volumeId",
      "url"
    ],
    "line": 24,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "invalid install url: %s",
    "en_US": "invalid install url: {0}",
    "zh_CN": "无效的安装URL：{0}",
    "arguments": [
      "url"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "hostUuid [%s] already existed in url: %s",
    "en_US": "hostUuid [{0}] already existed in url: {1}",
    "zh_CN": "URL{1}中已存在HostUuid[{0}]",
    "arguments": [
      "hostUuid",
      "url"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "cannot find devicePath on host: %s",
    "en_US": "cannot find devicePath on host: {0}",
    "zh_CN": "在物理机上找不到DevicePath：{0}",
    "arguments": [
      "hostUuid"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "invalid snapshot install path: %s",
    "en_US": "invalid snapshot install path: {0}",
    "zh_CN": "快照安装路径无效：{0}",
    "arguments": [
      "installPath"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java"
  },
  {
    "raw": "ecs image existed remote and local, ecs image uuid: %s, name: %s, created time: %s",
    "en_US": "ecs image existed remote and local, ecs image uuid: {0}, name: {1}, created time: {2}",
    "zh_CN": "云主机镜像存在于阿里云服务器和本地，云主机镜像的uuid: {0}，名称: {1}，创建时间: {2}",
    "arguments": [
      "eivo.getUuid()",
      "eivo.getName()",
      "eivo.getCreateDate()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java"
  },
  {
    "raw": "ecs image existed remote, name: %s, created time: %s",
    "en_US": "ecs image existed remote, name: {0}, created time: {1}",
    "zh_CN": "云主机镜像已经存在于阿里云服务器上，名称: {0}，创建时间: {1}",
    "arguments": [
      "msg.getName()",
      "new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss\").format(HybridUtilsForAliyun.fmtTime(rpl.getCreateDate()))"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java"
  },
  {
    "raw": "No Available instance types now.",
    "en_US": "No Available instance types now.",
    "zh_CN": "没有可用的实例类型",
    "arguments": [],
    "line": 184,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java"
  },
  {
    "raw": "This region [%s] cannot produce instance type [%s] now, please select another instance type or another region",
    "en_US": "This region [{0}] cannot produce instance type [{1}] now, please select another instance type or another region",
    "zh_CN": "此地区[{0}]现在无法生成实例类型[{1}]，请选择其他实例类型或其他地区",
    "arguments": [
      "regionId",
      "data1.get(\"type\")"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java"
  },
  {
    "raw": "no system disk found for ecs: [%s], ecs id is: [%s]",
    "en_US": "no system disk found for ecs: [{0}], ecs id is: [{1}]",
    "zh_CN": "没有系统云盘可用来创建云主机，云主机id是: [{1}]",
    "arguments": [
      "ecs.getUuid()",
      "ecs.getEcsInstanceId()"
    ],
    "line": 344,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java"
  },
  {
    "raw": "Only delete ecs which status is running or stopped, now is %s",
    "en_US": "Only delete ecs which status is running or stopped, now is {0}",
    "zh_CN": "只能删除状态为运行中或者已停止的云主机，现在云主机状态为{0}",
    "arguments": [
      "evo.getEcsStatus().toString()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "Only postpaid ecs support delete remote, the indicate ecs charge type is: %s",
    "en_US": "Only postpaid ecs support delete remote, the indicate ecs charge type is: {0}",
    "zh_CN": "只有已付费的云主机支持删除，目前云主机付费状态是: {0}",
    "arguments": [
      "evo.getChargeType().toString()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "Only admin can set parameter [onlyZstack] \u003d false",
    "en_US": "Only admin can set parameter [onlyZstack] \u003d false",
    "zh_CN": "只有管理员能设置[onlyZsatck]参数为false",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "vSwitch availableIpAddress is not enough, now is (%d)",
    "en_US": "vSwitch availableIpAddress is not enough, now is ({0})",
    "zh_CN": "虚拟交换机可用IP地址不够，现有IP地址数量({0})",
    "arguments": [
      "evo.getAvailableIpAddressCount()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not in cidr range: %s",
    "en_US": "{0} is not in cidr range: {1}",
    "zh_CN": "{0}没有在CIDR范围中: {1}",
    "arguments": [
      "privateIp",
      "cidr"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "private ip is existed in vswitch: %s, allocated to ecs: %s",
    "en_US": "private ip is existed in vswitch: {0}, allocated to ecs: {1}",
    "zh_CN": "私有IP已经存在虚拟交换机中: {0}，已分配给云主机: {1}",
    "arguments": [
      "vSwitchUuid",
      "ecs.getUuid()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "bandwidth must be set while allocate publicIp",
    "en_US": "bandwidth must be set while allocate publicIp",
    "zh_CN": "当分配公有IP时带宽必须被设置",
    "arguments": [],
    "line": 137,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not ipv4 address",
    "en_US": "{0} is not ipv4 address",
    "zh_CN": "{0}不是一个ipv4地址",
    "arguments": [
      "msg.getPrivateIpAddress()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "%s is not valid volume type, valid types are [%s]",
    "en_US": "{0} is not valid volume type, valid types are [{1}]",
    "zh_CN": "{0}不是有效的云盘类型，有效的云盘类型有[{1}]",
    "arguments": [
      "msg.getEcsRootVolumeType()",
      "EcsInstanceConstant.validVolumeCategory.toString()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "instanceOffering or instanceType must be set!",
    "en_US": "instanceOffering or instanceType must be set!",
    "zh_CN": "计算规格和实例类型必须被设置",
    "arguments": [],
    "line": 147,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java"
  },
  {
    "raw": "decode url failed: %s",
    "en_US": "decode url failed: {0}",
    "zh_CN": "url解码失败: {0}",
    "arguments": [
      "rly1.getVncUrl()"
    ],
    "line": 517,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java"
  },
  {
    "raw": "image has been deleted!",
    "en_US": "image has been deleted!",
    "zh_CN": "图像已删除！",
    "arguments": [],
    "line": 52,
    "fileName": "src/main/java/org/zstack/aliyun/ecs/ExportImageFromBSFlow.java"
  },
  {
    "raw": "no identity found",
    "en_US": "no identity found",
    "zh_CN": "找不到身份",
    "arguments": [],
    "line": 187,
    "fileName": "src/main/java/org/zstack/aliyun/identityzone/AliyunIdentityZoneBase.java"
  },
  {
    "raw": "the operation only custom image",
    "en_US": "the operation only custom image",
    "zh_CN": "这个操作只能对用户自己的镜像进行",
    "arguments": [],
    "line": 71,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "Only system disks can create mirrors",
    "en_US": "Only system disks can create mirrors",
    "zh_CN": "只有系统云盘可以创建快照",
    "arguments": [],
    "line": 80,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "can not delete ecs system image remote",
    "en_US": "can not delete ecs system image remote",
    "zh_CN": "不能删除阿里云服务器上的云主机系统镜像",
    "arguments": [],
    "line": 131,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "Only support ImageStoreBackupStorage",
    "en_US": "Only support ImageStoreBackupStorage",
    "zh_CN": "用本地镜像创建阿里云上的镜像只支持ImageStore镜像服务器",
    "arguments": [],
    "line": 142,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "image name cannot starts with http:// or https://",
    "en_US": "image name cannot starts with http:// or https://",
    "zh_CN": "镜像名称不可以以http://或https://开始",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "no backup storage found for imageUuid: %s",
    "en_US": "no backup storage found for imageUuid: {0}",
    "zh_CN": "未找到uuid为{0}的镜像服务器",
    "arguments": [
      "imageUuid"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "exceeded backup storage found for the imageUuid: %s, please indicate it manually",
    "en_US": "exceeded backup storage found for the imageUuid: {0}, please indicate it manually",
    "zh_CN": "发现多个存在镜像uuid为{0}的镜像服务器，请尝试指定镜像服务器",
    "arguments": [
      "imageUuid"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "valid platform:[%s] for aliyun image import, valid value are: [%s]",
    "en_US": "valid platform:[{0}] for aliyun image import, valid value are: [{1}]",
    "zh_CN": "有效的导入阿里云镜像平台: [{0}]，有效值是[{1}]",
    "arguments": [
      "platform",
      "EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "image [%s] is not enable now",
    "en_US": "image [{0}] is not enable now",
    "zh_CN": "镜像[{0}]不可用",
    "arguments": [
      "ivo.getUuid()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java"
  },
  {
    "raw": "no ossbucket attached to the datacenter: %s",
    "en_US": "no ossbucket attached to the datacenter: {0}",
    "zh_CN": "没有oss Bucket添加到数据中心{0}",
    "arguments": [
      "msg.getDataCenterUuid()"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java"
  },
  {
    "raw": "the indicated image [%s] is importing to datacenter [%s] now...",
    "en_US": "the indicated image [{0}] is importing to datacenter [{1}] now...",
    "zh_CN": "指定的镜像[{0}]正在被导入到数据中心[{1}]中...",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getDataCenterUuid()"
    ],
    "line": 361,
    "fileName": "src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java"
  },
  {
    "raw": "PrimaryStorage [%s] still running, can not delete access group",
    "en_US": "PrimaryStorage [{0}] still running, can not delete access group",
    "zh_CN": "PrimaryStorage[{0}]仍在运行，无法删除访问组",
    "arguments": [
      "psUuids.toString()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/aliyun/nas/core/AliyunNasApiInterceptor.java"
  },
  {
    "raw": "access group rule [%s] already existed in access group [%s]",
    "en_US": "access group rule [{0}] already existed in access group [{1}]",
    "zh_CN": "访问组规则[{0}]已存在于访问组[{1}]中",
    "arguments": [
      "msg.getSourceCidrIp()",
      "msg.getAccessGroupUuid()"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java"
  },
  {
    "raw": "access group [%s] already existed in datacenter [%s]",
    "en_US": "access group [{0}] already existed in datacenter [{1}]",
    "zh_CN": "数据中心[{1}]中已存在访问组[{0}]",
    "arguments": [
      "msg.getName()",
      "msg.getDataCenterUuid()"
    ],
    "line": 849,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java"
  },
  {
    "raw": "no filesystem [%s] found in region: %s",
    "en_US": "no filesystem [{0}] found in region: {1}",
    "zh_CN": "在数据中心{1}中找不到文件系统[{0}]",
    "arguments": [
      "self.getFileSystemId()",
      "regionId"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java"
  },
  {
    "raw": "nas filesystem existed in datacenter: %s",
    "en_US": "nas filesystem existed in datacenter: {0}",
    "zh_CN": "NAS文件系统存在于数据中心：{0}",
    "arguments": [
      "msg.getDataCenterUuid()"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java"
  },
  {
    "raw": "some primary storage [%s] used this nas, can not delete it until delete the primary storage.",
    "en_US": "some primary storage [{0}] used this nas, can not delete it until delete the primary storage.",
    "zh_CN": "某个主存储[{0}]使用了此NAS，在删除主存储之前无法将其删除。",
    "arguments": [
      "refs.toString()"
    ],
    "line": 304,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java"
  },
  {
    "raw": "mount domain not valid after %d milliseconds, delete it...",
    "en_US": "mount domain not valid after {0} milliseconds, delete it...",
    "zh_CN": "装载域在{0}毫秒后无效，请将其删除..",
    "arguments": [
      "cmsg.getWait()"
    ],
    "line": 314,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "there are no nas access group existed, please create at least one",
    "en_US": "there are no nas access group existed, please create at least one",
    "zh_CN": "不存在NAS访问组，请至少创建一个",
    "arguments": [],
    "line": 422,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "no such mount target [%s] in nas: %s",
    "en_US": "no such mount target [{0}] in nas: {1}",
    "zh_CN": "NAS中没有这样的装载目标[{0}]：{1}",
    "arguments": [
      "self.getMountDomain()",
      "self.getNasFileSystemUuid()"
    ],
    "line": 404,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "nas mount target [%s] existed in filesystem: %s",
    "en_US": "nas mount target [{0}] existed in filesystem: {1}",
    "zh_CN": "文件系统{1}中存在NAS装载目标[{0}]",
    "arguments": [
      "msg.getMountDomain()",
      "msg.getNasFSUuid()"
    ],
    "line": 472,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "the access group attached is already: %s",
    "en_US": "the access group attached is already: {0}",
    "zh_CN": "附加的访问组已为：{0}",
    "arguments": [
      "self.getAccessGroupUuid()"
    ],
    "line": 512,
    "fileName": "src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java"
  },
  {
    "raw": "image [uuid:%s] has been deleted",
    "en_US": "image [uuid:{0}] has been deleted",
    "zh_CN": "镜像[uuid:{0}]已经被删除",
    "arguments": [
      "imageVO.getUuid()"
    ],
    "line": 2907,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "EcsVSwitchVO[%s] is not existed, may be it has been deleted!",
    "en_US": "EcsVSwitchVO[{0}] is not existed, may be it has been deleted!",
    "zh_CN": "ECSVSwitchVO[{0}]不存在，可能已被删除！",
    "arguments": [
      "vSwitchUuid"
    ],
    "line": 535,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "AliyunNasAccessGroupVO[%s] is not existed, may be it has been deleted!",
    "en_US": "AliyunNasAccessGroupVO[{0}] is not existed, may be it has been deleted!",
    "zh_CN": "AliyunNASAccessGroupVO[{0}]不存在，可能已被删除！",
    "arguments": [
      "accessGroupUuid"
    ],
    "line": 528,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "cannot find an available host to operation in primary storage: %s",
    "en_US": "cannot find an available host to operation in primary storage: {0}",
    "zh_CN": "在主存储中找不到可用于操作的物理机：{0}",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 827,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "failed to ping aliyun nas primary storage[uuid:%s] from host[uuid:%s],because %s. disconnect this host-ps connection",
    "en_US": "failed to ping aliyun nas primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection",
    "zh_CN": "无法从物理机[uuid：{1}]Ping Aliyun NAS主存储[uuid：{0}]，因为{2}。断开此物理机-PS连接",
    "arguments": [
      "self.getUuid()",
      "hostUuid",
      "rsp.error"
    ],
    "line": 906,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "nas primary storage not mounted, please init it first!",
    "en_US": "nas primary storage not mounted, please init it first!",
    "zh_CN": "NAS主存储未装载，请先将其初始化！",
    "arguments": [],
    "line": 1394,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "cannot find host to operate volume: [%s]",
    "en_US": "cannot find host to operate volume: [{0}]",
    "zh_CN": "找不到操作卷[{0}]的物理机",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 2004,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "cannot find and host to sync volume size in primary: %s",
    "en_US": "cannot find and host to sync volume size in primary: {0}",
    "zh_CN": "在主节点中找不到要同步卷大小的物理机：{0}",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2241,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "image [%s] has been deleted, cannot reinit root volume from it",
    "en_US": "image [{0}] has been deleted, cannot reinit root volume from it",
    "zh_CN": "镜像[{0}]已删除，无法从中重新初始化根卷",
    "arguments": [],
    "line": 2268,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "no available host could check mountPath!",
    "en_US": "no available host could check mountPath!",
    "zh_CN": "没有可用的物理机可以检查装载路径！",
    "arguments": [],
    "line": 2423,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "unable to allocate backup storage specified by uuids: %s, becasue: %s",
    "en_US": "unable to allocate backup storage specified by uuids: {0}, becasue: {1}",
    "zh_CN": "不能给uuid列表{0}分配镜像服务器，因为{1}",
    "arguments": [
      "String.join(\",\", msg.getBackupStorageUuids())",
      "errorCodes.getCauses().get(0).getDetails()"
    ],
    "line": 2653,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "aliyun nas primarystorage only support imagestore bs, actually get type: %s",
    "en_US": "aliyun nas primarystorage only support imagestore bs, actually get type: {0}",
    "zh_CN": "阿里云NAS PrimaryStorage仅支持ImageStore BS，实际获取类型：{0}",
    "arguments": [
      "bsvo.getType()"
    ],
    "line": 2795,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java"
  },
  {
    "raw": "unable to attach a primary storage to cluster. Kvm host[uuid:%s, name:%s] in cluster has qemu-img with version[%s]; but the primary storage has attached to a cluster that has kvm host[uuid:%s], which has qemu-img with version[%s]. qemu-img version greater than %s is incompatible with versions less than %s, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "en_US": "unable to attach a primary storage to cluster. Kvm host[uuid:{0}, name:{1}] in cluster has qemu-img with version[{2}]; but the primary storage has attached to a cluster that has kvm host[uuid:{3}], which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "zh_CN": "不能挂载主存储到集群。集群中的物理机[uuid:{0}, name:{1}]拥有[{2}]版本的qemu-img；但是主存储已经挂载到拥有[{4}]版本qemu-img的集群上。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群",
    "arguments": [
      "context.getInventory().getUuid()",
      "context.getInventory().getName()",
      "mine",
      "e.getKey()",
      "version",
      "QCOW3_QEMU_IMG_VERSION",
      "QCOW3_QEMU_IMG_VERSION"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java"
  },
  {
    "raw": "no available host could download imagecache!",
    "en_US": "no available host could download imagecache!",
    "zh_CN": "没有可用的物理机可以下载ImageCache！",
    "arguments": [],
    "line": 344,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java"
  },
  {
    "raw": "resource[uuid: %s] cannot found",
    "en_US": "resource[uuid: {0}] cannot found",
    "zh_CN": "找不到资源[uuid：{0}]",
    "arguments": [
      "msg.getResourceUuid()"
    ],
    "line": 1147,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "the aliyun nas primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "Aliyun NAS主存储[uuid：{0}，名称：{1}]在连接的集群中找不到任何可用于实例化卷的物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "the aliyun nas primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for delete bits on primarystorage",
    "en_US": "the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for delete bits on primarystorage",
    "zh_CN": "Aliyun NAS主存储[uuid：{0}，名称：{1}]在连接的集群中找不到任何可用于主存储删除位的物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 208,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "the Aliyun Nas primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the Aliyun Nas primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "阿里云NAS主存储[uuid：{0}，名称：{1}]未挂接任何集群，或挂接的集群中没有物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 619,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "failed to check mount path on host: %s",
    "en_US": "failed to check mount path on host: {0}",
    "zh_CN": "无法检查物理机上的装载路径：{0}",
    "arguments": [
      "hostUuid"
    ],
    "line": 936,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find a host to cleanup image cache.",
    "en_US": "cannot find a host to cleanup image cache.",
    "zh_CN": "找不到用于清除镜像缓存的物理机。",
    "arguments": [],
    "line": 1023,
    "fileName": "src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java"
  },
  {
    "raw": "ecs instance[%s] isn\u0027t existed, please check it.",
    "en_US": "ecs instance[{0}] isn\u0027t existed, please check it.",
    "zh_CN": "云主机[{0}]不存在，请进行核查",
    "arguments": [
      "eipVo.getAllocateResourceUuid()"
    ],
    "line": 533,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [%s] status is [%s] now ",
    "en_US": "Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [{0}] status is [{1}] now ",
    "zh_CN": "只有正在运行或已停止状态的云主机才能绑定弹性IP，但是云主机[{0}]状态为[{1}]",
    "arguments": [
      "ecsVo.getUuid()",
      "ecsVo.getEcsStatus()"
    ],
    "line": 537,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "virtual border: %s has been deleted",
    "en_US": "virtual border: {0} has been deleted",
    "zh_CN": "边界路由器: {0}已经被删除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 2860,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "destination cidr [%s] is existed and point to another instance-id [%s], please check or delete it first",
    "en_US": "destination cidr [{0}] is existed and point to another instance-id [{1}], please check or delete it first",
    "zh_CN": "目标CIDR[{0}]已经存在且指向其他云主机[{1}]，请检查或删除它",
    "arguments": [
      "tupleCidr",
      "msg.getNextHopUuid()"
    ],
    "line": 3389,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Only esc instances that are in the running and stopped status can attach the eip , but the ecs [%s] status is [%s] now ",
    "en_US": "Only esc instances that are in the running and stopped status can attach the eip , but the ecs [{0}] status is [{1}] now ",
    "zh_CN": "只有正在运行或已停止状态的云主机才能绑定弹性IP，但是云主机[{0}]状态为[{1}]",
    "arguments": [
      "evo.getUuid()",
      "evo.getEcsStatus()"
    ],
    "line": 3902,
    "fileName": "src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java"
  },
  {
    "raw": "Vbr: [%s] is in create connection progress, please wait...",
    "en_US": "Vbr: [{0}] is in create connection progress, please wait...",
    "zh_CN": "虚拟边界路由器: [{0}]正在创建连接中，请稍后...",
    "arguments": [
      "msg.getVbrUuid()"
    ],
    "line": 585,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/AliyunConnectionManagerImpl.java"
  },
  {
    "raw": "custom cidr [%s] is already existed in vbr [%s], it is overlapped with target cidr [%s], please check and delete it first.",
    "en_US": "custom cidr [{0}] is already existed in vbr [{1}], it is overlapped with target cidr [{2}], please check and delete it first.",
    "zh_CN": "自定义CIDR[{0]已经存在于虚拟边界路由器[{1}]，它已经和目标CIDR[{2}]重叠了，请检查然后删除它",
    "arguments": [
      "tuple.get(0, String.class)",
      "msg.getVbrUuid()",
      "vpcCidr"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java"
  },
  {
    "raw": "custom cidr [%s] is already existed in vrouter [%s], it is overlapped with target cidr [%s], please check and delete it first.",
    "en_US": "custom cidr [{0}] is already existed in vrouter [{1}], it is overlapped with target cidr [{2}], please check and delete it first.",
    "zh_CN": "原始的CIDR[{0}]已经存在于虚拟路由器中[{1}]，已经被目标CIDR所覆盖，请先检验然后删除它",
    "arguments": [
      "tuple.get(0, String.class)",
      "vRouterUuid",
      "cidr"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java"
  },
  {
    "raw": "No Such Cidr found for l3network: %s",
    "en_US": "No Such Cidr found for l3network: {0}",
    "zh_CN": "未找到三层网络{0}对应的CIDR",
    "arguments": [
      "msg.getL3networkUuid()"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java"
  },
  {
    "raw": "No Such VRouter nic found for l3network: %s",
    "en_US": "No Such VRouter nic found for l3network: {0}",
    "zh_CN": "未找到三层网络{0}对应的虚拟路由器网卡",
    "arguments": [
      "msg.getL3networkUuid()"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java"
  },
  {
    "raw": "no such vpc found for: %s",
    "en_US": "no such vpc found for: {0}",
    "zh_CN": "未找到该VPC: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such vm found for: %s",
    "en_US": "no such vm found for: {0}",
    "zh_CN": "没有找到该云主机: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such vbr found for: %s",
    "en_US": "no such vbr found for: {0}",
    "zh_CN": "没有找到该虚拟边界路由器: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "no such l3network found for: %s",
    "en_US": "no such l3network found for: {0}",
    "zh_CN": "没有找到该三层网络: {0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "not a supported resource type: %s",
    "en_US": "not a supported resource type: {0}",
    "zh_CN": "不支持资源类型: {0}",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "Only admin can create connections",
    "en_US": "Only admin can create connections",
    "zh_CN": "只有admin才能创建连接",
    "arguments": [],
    "line": 68,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "CpeIp must be ipv4 address, but now is %s",
    "en_US": "CpeIp must be ipv4 address, but now is {0}",
    "zh_CN": "CpeIp必须是ipv4地址，但是现在是{0}",
    "arguments": [
      "msg.getCpeIp()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "cpeIp must be ipv4 address",
    "en_US": "cpeIp must be ipv4 address",
    "zh_CN": "cpeIp必须是ipv4地址",
    "arguments": [],
    "line": 76,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "l3network %s and vpc %s already connected, please check it",
    "en_US": "l3network {0} and vpc {1} already connected, please check it",
    "zh_CN": "三层网络{0}和vpc{1}已经连接",
    "arguments": [
      "msg.getL3networkUuid()",
      "msg.getVpcUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java"
  },
  {
    "raw": "vpn gateway and user gateway are not in the same dataCenterUuid!",
    "en_US": "vpn gateway and user gateway are not in the same dataCenterUuid!",
    "zh_CN": "vpn网关和用户网关不是同一个dataCenterUuid",
    "arguments": [],
    "line": 955,
    "fileName": "src/main/java/org/zstack/aliyun/network/vpn/AliyunVpcVpnBase.java"
  },
  {
    "raw": "ossBucket [%s] is already added in dataCenter [%s]",
    "en_US": "ossBucket [{0}] is already added in dataCenter [{1}]",
    "zh_CN": "oss Bucket[{0]已经被添加数据中心[{1}]",
    "arguments": [
      "msg.getBucketName()",
      "msg.getDataCenterUuid()"
    ],
    "line": 33,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java"
  },
  {
    "raw": "OssBucket[%s] is not attached.",
    "en_US": "OssBucket[{0}] is not attached.",
    "zh_CN": "oss Bucket[{0}]没有被添加",
    "arguments": [
      "ovo.getUuid()"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java"
  },
  {
    "raw": "domain, key, secret must be set all",
    "en_US": "domain, key, secret must be set all",
    "zh_CN": "域、密钥、机密必须全部设置",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java"
  },
  {
    "raw": "oss bucket is not empty!",
    "en_US": "oss bucket is not empty!",
    "zh_CN": "oss Bucket不为空",
    "arguments": [],
    "line": 107,
    "fileName": "src/main/java/org/zstack/aliyun/oss/OssBucketCascadeExtension.java"
  },
  {
    "raw": "appName: %s, partitionName: %s is existed in identityZone: %s",
    "en_US": "appName: {0}, partitionName: {1} is existed in identityZone: {2}",
    "zh_CN": "AppName：{0}，PartitionName：{1}存在于IdentityZone：{2}中",
    "arguments": [
      "appName",
      "partitionName",
      "vo.getIdentityZoneUuid()"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/aliyun/pangu/AliyunPanguApiInterceptor.java"
  },
  {
    "raw": "Root volume cannot be deleted",
    "en_US": "Root volume cannot be deleted",
    "zh_CN": "云盘不能被删除",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is cloud and portable property is false",
    "en_US": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is cloud and portable property is false",
    "zh_CN": "当云盘的category属性是cloud且portable为false，不能设置云盘的deleteWithInstance属性为false",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is ephemeral",
    "en_US": "Cannot set the disk\u0027s deleteWithInstance property to false when the category property of the disk is ephemeral",
    "zh_CN": "当云盘的category属性为ephemeral时，不能设置云盘的deleteWithInstance属性为false",
    "arguments": [],
    "line": 78,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk [%s] is not attach on any instance ",
    "en_US": "The disk [{0}] is not attach on any instance ",
    "zh_CN": "该云盘[{0}]没有加载到任何云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The state of the ecs [%s] instance must be running or stopped",
    "en_US": "The state of the ecs [{0}] instance must be running or stopped",
    "zh_CN": "云主机[{0}]的状态必须是运行或者已停止",
    "arguments": [
      "msg.getEcsUuid()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Only data disk can be mounted on ecs",
    "en_US": "Only data disk can be mounted on ecs",
    "zh_CN": "只有云盘可以挂装到云主机上",
    "arguments": [],
    "line": 105,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk not be attach on any ecs",
    "en_US": "The disk not be attach on any ecs",
    "zh_CN": "该云盘没有加载到任何云主机",
    "arguments": [],
    "line": 109,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Non-independent disk can only be destroyed with instances",
    "en_US": "Non-independent disk can only be destroyed with instances",
    "zh_CN": "未独立的云盘只能和云主机一起删除",
    "arguments": [],
    "line": 143,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Disk and ecs instances must be in the same zone",
    "en_US": "Disk and ecs instances must be in the same zone",
    "zh_CN": "云盘和云主机必须在相同的区域下",
    "arguments": [],
    "line": 126,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The disk [%s] is already mounted on the instance [%s]",
    "en_US": "The disk [{0}] is already mounted on the instance [{1}]",
    "zh_CN": "云盘[{0}]已经安装到云服务器实例[{1}]",
    "arguments": [
      "msg.getDiskUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Only data disk can attach to ecs",
    "en_US": "Only data disk can attach to ecs",
    "zh_CN": "只有云盘能加载到云服务器",
    "arguments": [],
    "line": 135,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Cannot attach disk when in use",
    "en_US": "Cannot attach disk when in use",
    "zh_CN": "不能加载正在使用的云盘",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.",
    "en_US": "The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.",
    "zh_CN": "在请求参数中size和快照id必须选择一项以便于指定磁盘大小或创建一个快照使用的磁盘",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "Not allowed create disk on root volume snapshot",
    "en_US": "Not allowed create disk on root volume snapshot",
    "zh_CN": "不允许在云盘快照上创建云盘",
    "arguments": [],
    "line": 167,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "the disk name or description cannot set start with \u0027http://\u0027 or \u0027https://\u0027 ",
    "en_US": "the disk name or description cannot set start with \u0027http://\u0027 or \u0027https://\u0027 ",
    "zh_CN": "云盘名称和介绍不能以http://或https://开头",
    "arguments": [],
    "line": 176,
    "fileName": "src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java"
  },
  {
    "raw": "The operation allows only when ecs state of the ecs instance status be running or stopped",
    "en_US": "The operation allows only when ecs state of the ecs instance status be running or stopped",
    "zh_CN": "当云主机态为运行中或已停止时该操作才被允许",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/aliyun/storage/snapshot/AliyunSnapshotApiInterceptor.java"
  },
  {
    "raw": "More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:%s] existing. The BackupStorage type to be added is %s. ",
    "en_US": "More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. ",
    "zh_CN": "有超过一个镜像服务器拥有相同的物理机名，已经存在一个 SFTP 镜像服务器 [物理机名:{0}]，被添加的镜像服务器类型为 {1}",
    "arguments": [
      "hostname",
      "newBS"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/apimediator/ApiValidator.java"
  },
  {
    "raw": "More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:%s] existing. The BackupStorage type to be added is %s. ",
    "en_US": "More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. ",
    "zh_CN": "有超过一个镜像服务器拥有相同的物理机名，已经存在一个镜像服务器 [物理机名:{0}]，被添加的镜像服务器类型为 {1}",
    "arguments": [
      "hostname",
      "newBS"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/apimediator/ApiValidator.java"
  },
  {
    "raw": "PublishAppVO[uuid: %s] is not existed",
    "en_US": "PublishAppVO[uuid: {0}] is not existed",
    "zh_CN": "PublishAppVO[uuid：{0}]不存在",
    "arguments": [
      "msg.getAppUuid()"
    ],
    "line": 486,
    "fileName": "src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java"
  },
  {
    "raw": "[appcenter] filterName must be appcenter:true or appcenter:false",
    "en_US": "[appcenter] filterName must be appcenter:true or appcenter:false",
    "zh_CN": "[appCenter]FilterName必须为appCenter：true或appCenter：false",
    "arguments": [],
    "line": 588,
    "fileName": "src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java"
  },
  {
    "raw": "%s is in preParameters, but not be set",
    "en_US": "{0} is in preParameters, but not be set",
    "zh_CN": "{0}在前参数中，但未设置",
    "arguments": [
      "struct.getParamName()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java"
  },
  {
    "raw": "%s need Number value, but got wrong type",
    "en_US": "{0} need Number value, but got wrong type",
    "zh_CN": "{0}需要数值，但类型错误",
    "arguments": [],
    "line": 131,
    "fileName": "src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java"
  },
  {
    "raw": "%s need Boolean value, but got wrong type",
    "en_US": "{0} need Boolean value, but got wrong type",
    "zh_CN": "{0}需要布尔值，但类型错误",
    "arguments": [],
    "line": 136,
    "fileName": "src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java"
  },
  {
    "raw": "%s need String value, but got wrong type",
    "en_US": "{0} need String value, but got wrong type",
    "zh_CN": "{0}需要字符串值，但获取的类型错误",
    "arguments": [],
    "line": 141,
    "fileName": "src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java"
  },
  {
    "raw": "cannot find build system [%s]",
    "en_US": "cannot find build system [{0}]",
    "zh_CN": "找不到生成系统[{0}]",
    "arguments": [
      "msg.getBuildSystemUuid()"
    ],
    "line": 389,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "build system[uuid: %s] has been attached to zone[uuid: %s]",
    "en_US": "build system[uuid: {0}] has been attached to zone[uuid: {1}]",
    "zh_CN": "生成系统[uuid：{0}]已附加到区域[uuid：{1}]",
    "arguments": [
      "msg.getBuildSystemUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 339,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "build system[uuid: %s] has not been attached to zone[uuid: %s]",
    "en_US": "build system[uuid: {0}] has not been attached to zone[uuid: {1}]",
    "zh_CN": "生成系统[uuid：{0}]尚未附加到区域[uuid：{1}]",
    "arguments": [
      "msg.getBuildSystemUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 396,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "cannot find build application: [%s]",
    "en_US": "cannot find build application: [{0}]",
    "zh_CN": "找不到生成应用程序：[{0}]",
    "arguments": [
      "appUuid"
    ],
    "line": 620,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "imageStore is not Enabled",
    "en_US": "imageStore is not Enabled",
    "zh_CN": "未启用ImageStore",
    "arguments": [],
    "line": 989,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "imageStore is not Connected",
    "en_US": "imageStore is not Connected",
    "zh_CN": "ImageStore未连接",
    "arguments": [],
    "line": 993,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "cannot find imageUuid for image[%s]",
    "en_US": "cannot find imageUuid for image[{0}]",
    "zh_CN": "找不到镜像[{0}]的ImageUuid",
    "arguments": [
      "p.getDefaultValue()"
    ],
    "line": 1147,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "cannot find build-app[uuid: %s], or it was in Deleting status",
    "en_US": "cannot find build-app[uuid: {0}], or it was in Deleting status",
    "zh_CN": "找不到Build-App[uuid：{0}]，或者它处于删除状态",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1159,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java"
  },
  {
    "raw": "build-app[%s] is exported or is exporting, please delete it first",
    "en_US": "build-app[{0}] is exported or is exporting, please delete it first",
    "zh_CN": "Build-App[{0}]已导出或正在导出，请先删除它",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "another build system[uuid: %s, name: %s] in this host[%s] used the url[%s]",
    "en_US": "another build system[uuid: {0}, name: {1}] in this host[{2}] used the url[{3}]",
    "zh_CN": "此物理机[{2}]中的另一个生成系统[uuid：{0}，名称：{1}]使用了URL[{3}]",
    "arguments": [
      "build.getUuid()",
      "build.getName()",
      "build.getHostname()",
      "build.getUrl()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "dataPath must start with \u0027/\u0027, actually got [%s]",
    "en_US": "dataPath must start with \u0027/\u0027, actually got [{0}]",
    "zh_CN": "数据路径必须以“/”开头，实际获得[{0}]",
    "arguments": [
      "msg.getDataPath()"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "both backupStorageUuid and hostname are null",
    "en_US": "both backupStorageUuid and hostname are null",
    "zh_CN": "backupStorageUuid和hostname均为空",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "cannot find imageStore which hostname is :%s",
    "en_US": "cannot find imageStore which hostname is :{0}",
    "zh_CN": "找不到物理机名为{0}的ImageStore",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "find more than one imageStore which hostname is: %s, please use backupStorageUuid instead",
    "en_US": "find more than one imageStore which hostname is: {0}, please use backupStorageUuid instead",
    "zh_CN": "找到多个物理机名为{0}的ImageStore，请改用BackupStorageUuid",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "both backupStorageUuid and hostname are set, but they are not the same host",
    "en_US": "both backupStorageUuid and hostname are set, but they are not the same host",
    "zh_CN": "同时设置了backupStorageuuid和hostname，但它们不是同一物理机",
    "arguments": [],
    "line": 102,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "buildAppUuid and exportId cannot both be null",
    "en_US": "buildAppUuid and exportId cannot both be null",
    "zh_CN": "BuildAppuuid和ExportId不能同时为空",
    "arguments": [],
    "line": 116,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "buildAppUuid and buildSystemUuid cannot both be null",
    "en_US": "buildAppUuid and buildSystemUuid cannot both be null",
    "zh_CN": "BuildAppUuid和BuildSystemUuid不能同时为空",
    "arguments": [],
    "line": 120,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "no such exportId in build export history",
    "en_US": "no such exportId in build export history",
    "zh_CN": "在生成导出历史记录中没有这样的导出ID",
    "arguments": [],
    "line": 126,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "both exportId and buildAppUuid are set but they are not equal",
    "en_US": "both exportId and buildAppUuid are set but they are not equal",
    "zh_CN": "同时设置了ExportId和BuildAppUuid，但它们不相等",
    "arguments": [],
    "line": 130,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java"
  },
  {
    "raw": "unable to do the operation because the build system is in status of %s",
    "en_US": "unable to do the operation because the build system is in status of {0}",
    "zh_CN": "无法执行该操作，因为生成系统处于{0}状态",
    "arguments": [
      "self.getStatus()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "cannot find the build app by uuid[%s]",
    "en_US": "cannot find the build app by uuid[{0}]",
    "zh_CN": "按uuid[{0}]找不到生成应用程序",
    "arguments": [
      "msg.getBuildAppUuid()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "build app is in %s status, which can not support the current operation.",
    "en_US": "build app is in {0} status, which can not support the current operation.",
    "zh_CN": "生成应用程序处于{0}状态，无法支持当前操作。",
    "arguments": [
      "status.toString()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "rest call %s failed, because: %s",
    "en_US": "rest call {0} failed, because: {1}",
    "zh_CN": "REST调用{0}失败，因为：{1}",
    "arguments": [
      "buildUrl(path)",
      "rsp.error"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "build application is disabled because build system is in \u0027Disabled\u0027 state",
    "en_US": "build application is disabled because build system is in \u0027Disabled\u0027 state",
    "zh_CN": "生成应用程序已禁用，因为生成系统处于“禁用”状态",
    "arguments": [],
    "line": 353,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "create BuildApp failed, because appId[%s: %s] is duplicated by another BuildApp",
    "en_US": "create BuildApp failed, because appId[{0}: {1}] is duplicated by another BuildApp",
    "zh_CN": "创建BuildApp失败，因为AppId[{0}：{1}]与另一个BuildApp重复",
    "arguments": [
      "meta.getAppId()",
      "meta.getVersion().getVersion()"
    ],
    "line": 506,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "unable to connect to localstorage build system[url:%s], because %s",
    "en_US": "unable to connect to localstorage build system[url:{0}], because {1}",
    "zh_CN": "无法连接到localStorage生成系统[URL：{0}]，因为{1}",
    "arguments": [
      "buildUrl(CONNECT_BUILDSYSTEM_PATH)",
      "errorCode"
    ],
    "line": 659,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "add BuildApp failed, because appId[%s:%s] is duplicated by another BuildApp",
    "en_US": "add BuildApp failed, because appId[{0}:{1}] is duplicated by another BuildApp",
    "zh_CN": "添加BuildApp失败，因为AppId[{0}：{1}]与另一个BuildApp重复",
    "arguments": [
      "struct.getAppId()",
      "struct.getVersion().getVersion()"
    ],
    "line": 762,
    "fileName": "src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java"
  },
  {
    "raw": "cannot find raw-template json file at: %s",
    "en_US": "cannot find raw-template json file at: {0}",
    "zh_CN": "在{0}处找不到原始模板JSON文件",
    "arguments": [
      "file"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java"
  },
  {
    "raw": "Unable to create json template",
    "en_US": "Unable to create json template",
    "zh_CN": "无法创建JSON模板",
    "arguments": [
      "e"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java"
  },
  {
    "raw": "there is no available nicType on L2 network [%s]",
    "en_US": "there is no available nicType on L2 network [{0}]",
    "zh_CN": "二层网络[{0}]上没有可用的nicType",
    "arguments": [
      "l2NetworkVO.getUuid()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmAllocateNicFlow.java"
  },
  {
    "raw": "appliance vm[uuid:%s] is in status of %s that cannot make http call to %s",
    "en_US": "appliance vm[uuid:{0}] is in status of {1} that cannot make http call to {2}",
    "zh_CN": "系统云主机[uuid:{0}]处于{1}状态，无法对[{2}]执行HTTP RPC调用",
    "arguments": [
      "self.getUuid()",
      "getSelf().getStatus()",
      "msg.getPath()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s stopped",
    "en_US": "appliance vm {0} stopped",
    "zh_CN": "应用装置VM{0}已停止",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 430,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s reboot",
    "en_US": "appliance vm {0} reboot",
    "zh_CN": "应用装置云主机{0}重新启动",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 709,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s reboot failed",
    "en_US": "appliance vm {0} reboot failed",
    "zh_CN": "应用装置云主机{0}重新启动失败",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 719,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "appliance vm %s start failed",
    "en_US": "appliance vm {0} start failed",
    "zh_CN": "应用装置VM{0}启动失败",
    "arguments": [
      "getSelf().getUuid()"
    ],
    "line": 781,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmBase.java"
  },
  {
    "raw": "set appliance bootstrapinfo error, because:%s",
    "en_US": "set appliance bootstrapinfo error, because:{0}",
    "zh_CN": "设置装置BootstrapInfo错误，原因：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/appliancevm/ApplianceVmKvmBootstrapFlow.java"
  },
  {
    "raw": "listener[uuid:%s] are being used by the autoScalingVmTemplate[%s] and cannot be deleted",
    "en_US": "listener[uuid:{0}] are being used by the autoScalingVmTemplate[{1}] and cannot be deleted",
    "zh_CN": "侦听器[uuid：{0}]正由AutoScalingVMTemplate[{1}]使用，无法删除",
    "arguments": [
      "msg.getUuid()",
      "uuid"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java"
  },
  {
    "raw": "The instance[%s] does not exist in the scaling group[%s]",
    "en_US": "The instance[{0}] does not exist in the scaling group[{1}]",
    "zh_CN": "缩放组[{1}]中不存在实例[{0}]",
    "arguments": [
      "msg.getInstanceUuid()",
      "msg.getGroupUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java"
  },
  {
    "raw": "alarm[uuid:%s] are being used by the autoScalingGroup[%s] which cannot be deleted",
    "en_US": "alarm[uuid:{0}] are being used by the autoScalingGroup[{1}] which cannot be deleted",
    "zh_CN": "无法删除的AutoScalingGroup[{1}]正在使用报警[uuid：{0}]",
    "arguments": [
      "msg.getAlarmUuid()",
      "ruleVO.getScalingGroupUuid()"
    ],
    "line": 163,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java"
  },
  {
    "raw": "rule[%s] state is Disabled",
    "en_US": "rule[{0}] state is Disabled",
    "zh_CN": "规则[{0}]状态已禁用",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java"
  },
  {
    "raw": "invalid l3 network uuids[%s] for listener that belongs lb[%s], all the networks must be attached the LB service and be attached with the same vRouter with LB",
    "en_US": "invalid l3 network uuids[{0}] for listener that belongs lb[{1}], all the networks must be attached the LB service and be attached with the same vRouter with LB",
    "zh_CN": "属于LB[{1}]的侦听器的三层网络uuid[{0}]无效，所有网络都必须附加到LB服务，并且必须附加到与LB相同的VRouter",
    "arguments": [
      "l3Uuids",
      "uuid"
    ],
    "line": 386,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java"
  },
  {
    "raw": "detach autoScalingTemplate[%s] from AutoScalingGroup failed, errors are %s",
    "en_US": "detach autoScalingTemplate[{0}] from AutoScalingGroup failed, errors are {1}",
    "zh_CN": "从AutoScalingGroup分离AutoScalingTemplate[{0}]失败，错误为{1}",
    "arguments": [
      "msg.getTemplateUuid()",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 744,
    "fileName": "src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java"
  },
  {
    "raw": "image[uuid:%s] is of mediaType: %s, only RootVolumeTemplate and ISO can be used to create vm",
    "en_US": "image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate and ISO can be used to create vm",
    "zh_CN": "镜像[uuid:{0}] 类型为{1}，只能用RootVolumeTemplate和ISO来创建云主机",
    "arguments": [
      "imageVO.getUuid()",
      "imageVO.getMediaType()"
    ],
    "line": 890,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "rootDiskOfferingUuid cannot be null when image mediaType is ISO",
    "en_US": "rootDiskOfferingUuid cannot be null when image mediaType is ISO",
    "zh_CN": "云盘规格不能为空在镜像类型为ISO时",
    "arguments": [],
    "line": 893,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "Only one scaling activity can be executed in the same scaling group at the same time.",
    "en_US": "Only one scaling activity can be executed in the same scaling group at the same time.",
    "zh_CN": "同一伸缩组中同一时间只能执行一个伸缩活动。",
    "arguments": [],
    "line": 367,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "The number of instances exceeds the limit",
    "en_US": "The number of instances exceeds the limit",
    "zh_CN": "实例数超过限制",
    "arguments": [],
    "line": 1317,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "add vm nic to loadBalancer failed, No loadBalancer[uuids\u003d%s] can be found.",
    "en_US": "add vm nic to loadBalancer failed, No loadBalancer[uuids\u003d{0}] can be found.",
    "zh_CN": "将VM NIC添加到LoadBalancer失败，找不到LoadBalancer[uuid\u003d{0}]。",
    "arguments": [
      "loadBalancerListenerUuidListStr"
    ],
    "line": 645,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "autoScalingGroup[%s] add newly created vm to loadBalancer failed completely, errors are %s",
    "en_US": "autoScalingGroup[{0}] add newly created vm to loadBalancer failed completely, errors are {1}",
    "zh_CN": "AutoScalingGroup[{0}]将新创建的VM添加到LoadBalancer完全失败，错误为{1}",
    "arguments": [
      "msg.getAutoScalingGroupUuid()",
      "JSONObjectUtil.toJsonString(addVmNicToLoadBalancerErrorCodes)"
    ],
    "line": 684,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "add vm nic to securityGroup failed, No securityGroup[uuid\u003d%s] can be found.",
    "en_US": "add vm nic to securityGroup failed, No securityGroup[uuid\u003d{0}] can be found.",
    "zh_CN": "将VM NIC添加到SecurityGroup失败，找不到SecurityGroup[uuid\u003d{0}]。",
    "arguments": [
      "securityGroupUuid"
    ],
    "line": 719,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "autoScalingGroup[%s] add newly created vm to securityGroup failed completely, errors are %s",
    "en_US": "autoScalingGroup[{0}] add newly created vm to securityGroup failed completely, errors are {1}",
    "zh_CN": "AutoScalingGroup[{0}]将新创建的VM添加到SecurityGroup完全失败，错误为{1}",
    "arguments": [
      "msg.getAutoScalingGroupUuid()",
      "JSONObjectUtil.toJsonString(addVmNicToSecurityGroupErrorCodes)"
    ],
    "line": 755,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:AutoScalingVmTemplateVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:AutoScalingVmTemplateVO] not found",
    "zh_CN": "找不到资源，详细信息：找不到资源[uuid：{0}，类型：AutoScalingVMTemplateVo]",
    "arguments": [
      "templateGroupRefVO.getTemplateUuid()"
    ],
    "line": 865,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:InstanceOfferingVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:InstanceOfferingVO] not found",
    "zh_CN": "找不到资源，详细信息：找不到资源[uuid：{0}，类型：InstanceOfferingVO]",
    "arguments": [
      "vmTemplateVO.getVmInstanceOfferingUuid()"
    ],
    "line": 870,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:ImageVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:ImageVO] not found",
    "zh_CN": "找不到资源，详细信息：找不到资源[uuid：{0}，类型：ImageVO]",
    "arguments": [
      "vmTemplateVO.getImageUuid()"
    ],
    "line": 881,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:DiskOfferingVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:DiskOfferingVO] not found",
    "zh_CN": "找不到资源，详细信息：找不到资源[uuid：{0}，类型：DiskOfferingVO]",
    "arguments": [
      "diskOffering"
    ],
    "line": 905,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "A resource can not be found, details: resource[uuid:%s, type:L3NetworkVO] not found",
    "en_US": "A resource can not be found, details: resource[uuid:{0}, type:L3NetworkVO] not found",
    "zh_CN": "找不到资源，详细信息：找不到资源[uuid：{0}，类型：L3NetworkVO]",
    "arguments": [
      "l3Uuid"
    ],
    "line": 918,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "defaultL3NetworkUuid[uuid:%s] is not in l3NetworkUuids %s",
    "en_US": "defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids {1}",
    "zh_CN": "默认L3NetworkUuid[Uuid：{0}]不在L3NetworkUuids{1}中",
    "arguments": [
      "vmTemplateVO.getDefaultL3NetworkUuid()",
      "l3Uuids"
    ],
    "line": 934,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "the auto scaling group[%s] state error, expected: %s state",
    "en_US": "the auto scaling group[{0}] state error, expected: {1} state",
    "zh_CN": "自动缩放组[{0}]状态错误，应为：{1}状态",
    "arguments": [
      "self.getUuid()",
      "AutoScalingGroupState.Enabled.toString()"
    ],
    "line": 1018,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "The autoScalingGroup[%s] not attach any vm template",
    "en_US": "The autoScalingGroup[{0}] not attach any vm template",
    "zh_CN": "AutoScalingGroup[{0}]未附加任何VM模板",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 1055,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "autoScalingGroup[%s] destroy vms[%s] failed completely, errors are %s",
    "en_US": "autoScalingGroup[{0}] destroy vms[{1}] failed completely, errors are {2}",
    "zh_CN": "AutoScalingGroup[{0}]销毁云主机[{1}]完全失败，错误为{2}",
    "arguments": [
      "self.getUuid()",
      "vmInstanceUuids",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 1123,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "Cannot find deleted target instance list",
    "en_US": "Cannot find deleted target instance list",
    "zh_CN": "找不到已删除的目标实例列表",
    "arguments": [],
    "line": 1330,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "need skip autoScalingGroup activity",
    "en_US": "need skip autoScalingGroup activity",
    "zh_CN": "需要跳过自动缩放组活动",
    "arguments": [],
    "line": 1569,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "delete autoScalingRule[%s] triggers failed, errors are %s",
    "en_US": "delete autoScalingRule[{0}] triggers failed, errors are {1}",
    "zh_CN": "删除AutoScalingRule[{0}]触发器失败，错误为{1}",
    "arguments": [
      "ruleUuid",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 1835,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "Unsupported RemovalPolicy[%s] type",
    "en_US": "Unsupported RemovalPolicy[{0}] type",
    "zh_CN": "不支持RemovalPolicy[{0}]类型",
    "arguments": [
      "removalPolicy.toString()"
    ],
    "line": 2452,
    "fileName": "src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java"
  },
  {
    "raw": "AutoScalingRuleSchedulerJobTriggerVO[uuid:%s] is %s, state change is not allowed",
    "en_US": "AutoScalingRuleSchedulerJobTriggerVO[uuid:{0}] is {1}, state change is not allowed",
    "zh_CN": "AutoScalingRuleSchedulerJobTriggerVO[uuid：{0}]为{1}，不允许更改状态",
    "arguments": [
      "triggerVO.getUuid()",
      "triggerVO.getState()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java"
  },
  {
    "raw": "AutoScalingRuleSchedulerJobTriggerVO[uuid:%s] is be in cooldownDate",
    "en_US": "AutoScalingRuleSchedulerJobTriggerVO[uuid:{0}] is be in cooldownDate",
    "zh_CN": "AutoScalingRuleSchedulerJobTriggerVO[uuid：{0}]在CooldownDate中",
    "arguments": [
      "ruleUuid"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java"
  },
  {
    "raw": "AutoScalingRuleVO[uuid:%s] is %s, state change is not allowed",
    "en_US": "AutoScalingRuleVO[uuid:{0}] is {1}, state change is not allowed",
    "zh_CN": "AutoScalingRuleVO[uuid：{0}]为{1}，不允许更改状态",
    "arguments": [
      "ruleUuid",
      "AutoScalingRuleState.Disabled.toString()"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java"
  },
  {
    "raw": "Failed to reach the bare-metal chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.",
    "en_US": "Failed to reach the bare-metal chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.",
    "zh_CN": "无法连通裸金属设备，请确认：1，管理节点与裸金属设备远程控制口连通；2，IPMI地址、端口、账号、密码是正确的；3，BIOS中启用LAN上的IPMI功能。",
    "arguments": [],
    "line": 64,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] is not a baremetal cluster.",
    "en_US": "Cluster[uuid:{0}] is not a baremetal cluster.",
    "zh_CN": "集群[uuid:{0}]不是一个裸金属集群",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "IPMI Address and Port %s:%d already exists.",
    "en_US": "IPMI Address and Port {0}:{1} already exists.",
    "zh_CN": "IPMI地址为{0}，端口为{1}的裸金属设备已经存在",
    "arguments": [
      "address",
      "port"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "no usable baremetal pxeserver attached to cluster[uuid:%s]",
    "en_US": "no usable baremetal pxeserver attached to cluster[uuid:{0}]",
    "zh_CN": "裸金属集群[uuid:{0}]中没有可用的部署服务器",
    "arguments": [
      "clusterUuid"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java"
  },
  {
    "raw": "baremetal chassis[uuid:%s] is supposed to using pxeserver[uuid:%s], but it was pxeserver[uuid:%s] that actually handled the DHCP request",
    "en_US": "baremetal chassis[uuid:{0}] is supposed to using pxeserver[uuid:{1}], but it was pxeserver[uuid:{2}] that actually handled the DHCP request",
    "zh_CN": "裸金属设备[uuid:{0}]应当由部署服务器[uuid:{1}]提供DHCP服务，但实际情况是部署服务器[uuid:{2}]提供的DHCP服务",
    "arguments": [
      "chassis.getUuid()",
      "chassis.getPxeServerUuid()",
      "cmd.content"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "failed to delete baremetal chassis %s",
    "en_US": "failed to delete baremetal chassis {0}",
    "zh_CN": "无法删除裸机机箱{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 671,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Failed to remotely power on baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power on baremetal chassis[uuid:{0}]",
    "zh_CN": "无法远程启动裸金属设备[uuid:{0}]",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 737,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Failed to remotely power reset baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power reset baremetal chassis[uuid:{0}]",
    "zh_CN": "无法远程重启裸金属设备[uuid:{0}]",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 753,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Failed to remotely pxe boot chassis[uuid:%s]",
    "en_US": "Failed to remotely pxe boot chassis[uuid:{0}]",
    "zh_CN": "无法远程设置裸金属设备[uuid:{0}]从网卡启动",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 764,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "failed to connect to chassis [uuid:%s], please check ipmi connection.",
    "en_US": "failed to connect to chassis [uuid:{0}], please check ipmi connection.",
    "zh_CN": "无法连接到裸金属设备[uuid:{0}], 请确认IPMI连接可用",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 924,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "fail to load chassis info from file, because: %s",
    "en_US": "fail to load chassis info from file, because: {0}",
    "zh_CN": "无法从文件中读取裸金属设备信息，因为：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 1010,
    "fileName": "src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java"
  },
  {
    "raw": "Baremetal chassis[uuid:%s] does not exist",
    "en_US": "Baremetal chassis[uuid:{0}] does not exist",
    "zh_CN": "裸机机箱[uuid：{0}]不存在",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Baremetal chassis[uuid:%s] is not Enabled or Available, please choose another one.",
    "en_US": "Baremetal chassis[uuid:{0}] is not Enabled or Available, please choose another one.",
    "zh_CN": "裸金属设备[uuid:{0}]被停用或者已被分配，请重新选择",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "no corresponding pxeserver, please inspect baremetal chassis[uuid:%s] again",
    "en_US": "no corresponding pxeserver, please inspect baremetal chassis[uuid:{0}] again",
    "zh_CN": "裸金属设备[uuid:{0}]没有关联部署服务器，请重新获取硬件信息",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "No hardware info found for baremetal chassis[uuid:%s], please choose another one.",
    "en_US": "No hardware info found for baremetal chassis[uuid:{0}], please choose another one.",
    "zh_CN": "裸金属设备[uuid:{0}]硬件信息未知，请重新选择",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid:%s] is neither Enabled nor Connected, please check",
    "en_US": "baremetal pxeserver[uuid:{0}] is neither Enabled nor Connected, please check",
    "zh_CN": "Baremetal Pxeserver[uuid：{0}]既未启用也未连接，请检查",
    "arguments": [
      "chassis.getPxeServerUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Mac address %s is invalid. It should be like 6c:b3:11:1b:0b:1e",
    "en_US": "Mac address {0} is invalid. It should be like 6c:b3:11:1b:0b:1e",
    "zh_CN": "MAC地址{0}不合法",
    "arguments": [
      "mac"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Baremetal chassis[uuid:%s] doesn\u0027t have nic with mac address %s",
    "en_US": "Baremetal chassis[uuid:{0}] doesn\u0027t have nic with mac address {1}",
    "zh_CN": "裸金属设备[uuid:{0}]硬件信息中未发现MAC地址为{1}的网卡",
    "arguments": [
      "chassis.getUuid()",
      "mac"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "duplicated bm bonding uuid detacted",
    "en_US": "duplicated bm bonding uuid detacted",
    "zh_CN": "已分离重复的BM绑定uuid",
    "arguments": [],
    "line": 136,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Baremetal Bonding does not exist",
    "en_US": "Baremetal Bonding does not exist",
    "zh_CN": "裸机焊接不存在",
    "arguments": [],
    "line": 140,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "duplicated l3 network uuid detacted",
    "en_US": "duplicated l3 network uuid detacted",
    "zh_CN": "已分离重复的三层网络uuid",
    "arguments": [],
    "line": 148,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "the selected l3 network doesn\u0027t exist",
    "en_US": "the selected l3 network doesn\u0027t exist",
    "zh_CN": "选定的三层网络不存在",
    "arguments": [],
    "line": 152,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "the selected l3 network cannot be assigned to chassis[uuid:%s]",
    "en_US": "the selected l3 network cannot be assigned to chassis[uuid:{0}]",
    "zh_CN": "无法将选定的三层网络分配给机箱[uuid：{0}]",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "only iso image is supported in zstack baremetal service",
    "en_US": "only iso image is supported in zstack baremetal service",
    "zh_CN": "目前仅支持为裸机部署ISO镜像",
    "arguments": [],
    "line": 177,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "only ImageStoreBackupStorage is supported in zstack baremetal service",
    "en_US": "only ImageStoreBackupStorage is supported in zstack baremetal service",
    "zh_CN": "目前仅支持从镜像仓库中为裸机选择ISO镜像",
    "arguments": [],
    "line": 186,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "cannot recover baremetal instance that\u0027s not in Destroyed state",
    "en_US": "cannot recover baremetal instance that\u0027s not in Destroyed state",
    "zh_CN": "只能恢复处于Destroyed状态的裸金属物理机",
    "arguments": [],
    "line": 200,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "cannot expunge baremetal instance that\u0027s not in Destroyed state",
    "en_US": "cannot expunge baremetal instance that\u0027s not in Destroyed state",
    "zh_CN": "只能彻底删除处于Destroyed状态的裸金属物理机",
    "arguments": [],
    "line": 212,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java"
  },
  {
    "raw": "Failed to remotely power off baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power off baremetal chassis[uuid:{0}]",
    "zh_CN": "无法远程关闭裸金属设备[uuid:{0}]",
    "arguments": [
      "bmc.getUuid()"
    ],
    "line": 461,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java"
  },
  {
    "raw": "failed to allocate baremetal pxeserver, make sure there is a pxeserver with enough available capacity attached on cluster[uuid:%s]",
    "en_US": "failed to allocate baremetal pxeserver, make sure there is a pxeserver with enough available capacity attached on cluster[uuid:{0}]",
    "zh_CN": "分配部署服务器失败，请确认裸金属集群[uuid:{0}]中所挂载的部署服务器拥有足够的剩余存储空间用于保存镜像缓存",
    "arguments": [
      "self.getClusterUuid()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java"
  },
  {
    "raw": "Failed to remotely power %s baremetal chassis[uuid:%s]",
    "en_US": "Failed to remotely power {0} baremetal chassis[uuid:{1}]",
    "zh_CN": "无法远程启动{0}裸机机箱[uuid：{1}]",
    "arguments": [
      "reboot ? \"reset\" : \"on\"",
      "bmc.getUuid()"
    ],
    "line": 453,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java"
  },
  {
    "raw": "there are bm instances using ip address allocated from l2[uuid:%s]",
    "en_US": "there are bm instances using ip address allocated from l2[uuid:{0}]",
    "zh_CN": "存在使用从L2[uuid：{0}]分配的IP地址的BM实例",
    "arguments": [
      "msg.getL2NetworkUuid()"
    ],
    "line": 1141,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java"
  },
  {
    "raw": "there are bm instances using ip address allocated from l3[uuid:%s]",
    "en_US": "there are bm instances using ip address allocated from l3[uuid:{0}]",
    "zh_CN": "存在使用从L3[uuid：{0}]分配的IP地址的BM实例",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 1149,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java"
  },
  {
    "raw": "there are bm instances using ip address allocated from ip range[uuid:%s]",
    "en_US": "there are bm instances using ip address allocated from ip range[uuid:{0}]",
    "zh_CN": "存在使用从IP范围[uuid：{0}]分配的IP地址的BM实例",
    "arguments": [
      "msg.getIpRangeUuid()"
    ],
    "line": 1169,
    "fileName": "src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java"
  },
  {
    "raw": "creating bm bonding is only allowed before creating bm instance",
    "en_US": "creating bm bonding is only allowed before creating bm instance",
    "zh_CN": "只能在创建BM实例之前创建BM绑定",
    "arguments": [],
    "line": 39,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "bond name %s already exists",
    "en_US": "bond name {0} already exists",
    "zh_CN": "结合名称{0}已存在",
    "arguments": [
      "msg.getName()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "Slave address %s is invalid. It should be like 6c:b3:11:1b:0b:1e,6c:b3:11:1b:0b:1f",
    "en_US": "Slave address {0} is invalid. It should be like 6c:b3:11:1b:0b:1e,6c:b3:11:1b:0b:1f",
    "zh_CN": "从属地址{0}无效。它应该类似于6C：B3:11:1B:0B:1E，6C：B3:11:1B:0B:1F",
    "arguments": [
      "slave"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "mac address %s does not belong to chassis[uuid:%s]",
    "en_US": "mac address {0} does not belong to chassis[uuid:{1}]",
    "zh_CN": "MAC地址{0}不属于机箱[uuid：{1}]",
    "arguments": [
      "slave",
      "msg.getChassisUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "mac address %s is already a bond slave",
    "en_US": "mac address {0} is already a bond slave",
    "zh_CN": "MAC地址{0}已是绑定从属地址",
    "arguments": [
      "slave"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot update predefined preconfiguration templates",
    "en_US": "cannot update predefined preconfiguration templates",
    "zh_CN": "无法更新预定义的预配置模板",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java"
  },
  {
    "raw": "cannot delete predefined preconfiguration templates",
    "en_US": "cannot delete predefined preconfiguration templates",
    "zh_CN": "无法删除预定义的预配置模板",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java"
  },
  {
    "raw": "cannot change state of predefined preconfiguration templates",
    "en_US": "cannot change state of predefined preconfiguration templates",
    "zh_CN": "无法更改预定义的预配置模板的状态",
    "arguments": [],
    "line": 63,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java"
  },
  {
    "raw": "cannot find PreconfigurationTemplateVO[uuid:%s], it may have been deleted",
    "en_US": "cannot find PreconfigurationTemplateVO[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到PreConfigurationTemplateVo[uuid：{0}]，它可能已被删除",
    "arguments": [
      "msg.getTemplateUuid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationManagerImpl.java"
  },
  {
    "raw": "PXE Server DHCP Range Netmask %s is invalid.",
    "en_US": "PXE Server DHCP Range Netmask {0} is invalid.",
    "zh_CN": "部署服务器DHCP服务子网掩码{0}非法",
    "arguments": [
      "netmask"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Range Start %s and Range Stop %s do not belong to the same subnet.",
    "en_US": "PXE Server DHCP Range Start {0} and Range Stop {1} do not belong to the same subnet.",
    "zh_CN": "部署服务器DHCP地址区间起始IP{0}和结束IP{1}不属于一个子网内",
    "arguments": [
      "begin",
      "end"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server with hostname %s already exists.",
    "en_US": "PXE Server with hostname {0} already exists.",
    "zh_CN": "地址为{0}的部署服务器已经存在",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "there is already a baremetal2 gateway with management ip %s, do not use it to create baremetal pxe server",
    "en_US": "there is already a baremetal2 gateway with management ip {0}, do not use it to create baremetal pxe server",
    "zh_CN": "已存在管理IP为{0}的BareMetal2网关，请不要使用它来创建BareMetal PXE服务器",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "storagePath should be an absolute path",
    "en_US": "storagePath should be an absolute path",
    "zh_CN": "部署服务器的存储路径必须是绝对路径",
    "arguments": [],
    "line": 110,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "failed to connect to %s, please check network connection between zstack management node and baremetal pxeserver",
    "en_US": "failed to connect to {0}, please check network connection between zstack management node and baremetal pxeserver",
    "zh_CN": "请检查管理节点与部署服务器{0}之间的网络连接",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "no local repo found under /opt/zstack-dvd of %s, please download zstack iso and create local repo first",
    "en_US": "no local repo found under /opt/zstack-dvd of {0}, please download zstack iso and create local repo first",
    "zh_CN": "部署服务器{0}中缺少使用ZStack ISO创建的本地源",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "PXE Server DHCP Interface %s does not exists, or it does not have an IP address.",
    "en_US": "PXE Server DHCP Interface {0} does not exists, or it does not have an IP address.",
    "zh_CN": "部署服务器DHCP接口{0}不存在，或者它没有IP地址",
    "arguments": [
      "msg.getDhcpInterface()"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "%s ~ %s cannot connect to dhcp interface %s",
    "en_US": "{0} ~ {1} cannot connect to dhcp interface {2}",
    "zh_CN": "{0} ~ {1} 无法连通DHCP监听网卡{2}",
    "arguments": [
      "msg.getDhcpRangeBegin()",
      "msg.getDhcpRangeEnd()",
      "msg.getDhcpInterface()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] and pxeserver[uuid:%s] don\u0027t belong to one zone",
    "en_US": "cluster[uuid:{0}] and pxeserver[uuid:{1}] don\u0027t belong to one zone",
    "zh_CN": "裸金属集群[uuid:{0}]和部署服务器[uuid:{1}]不属于同一个区域",
    "arguments": [
      "msg.getClusterUuid()",
      "msg.getPxeServerUuid()"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is not baremetal cluster",
    "en_US": "cluster[uuid:{0}] is not baremetal cluster",
    "zh_CN": "集群[uuid:{0}]不是一个裸金属集群",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid:%s] already attached to cluster[uuid:%s]",
    "en_US": "baremetal pxeserver[uuid:{0}] already attached to cluster[uuid:{1}]",
    "zh_CN": "部署服务器[uuid:{0}]已经挂载到裸金属集群[uuid:{1}]，无需再次挂载",
    "arguments": [
      "msg.getPxeServerUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 212,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid:%s] is not compatible with baremetal instances in cluster[uuid:%s], existing nic ip %s is out of pxeserver dhcp range %s ~ %s.",
    "en_US": "baremetal pxeserver[uuid:{0}] is not compatible with baremetal instances in cluster[uuid:{1}], existing nic ip {2} is out of pxeserver dhcp range {3} ~ {4}.",
    "zh_CN": "部署服务器[uuid:{0}]不适合于集群[uuid:{1}]，因为集群中已有的裸金属物理机网卡地址{2}超出了部署服务器的DHCP范围{3} ~ {4}",
    "arguments": [
      "msg.getPxeServerUuid()",
      "msg.getClusterUuid()",
      "ip",
      "begin",
      "end"
    ],
    "line": 238,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "baremetal pxeserver[uuid: %s] not attached to cluster[uuid: %s]",
    "en_US": "baremetal pxeserver[uuid: {0}] not attached to cluster[uuid: {1}]",
    "zh_CN": "部署服务器[uuid:{0}]没有挂载到裸金属集群[uuid:{1}]",
    "arguments": [
      "msg.getPxeServerUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 255,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java"
  },
  {
    "raw": "failed to init configs on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to init configs on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "部署服务器[uuid:{0}]初始化配置失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 295,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create bm instance configs on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to create bm instance configs on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上创建裸金属物理机相关配置失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete bm instance configs on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to delete bm instance configs on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上删除裸金属物理机相关配置失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 463,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create bm instance novnc proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to create bm instance novnc proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上创建裸金属物理机NoVNC代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 494,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete bm instance novnc proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to delete bm instance novnc proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上删除裸金属物理机NoVNC代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 525,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create bm instance nginx proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to create bm instance nginx proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上创建裸金属物理机Nginx代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 558,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete bm instance nginx proxy on baremetal pxeserver[uuid:%s]",
    "en_US": "failed to delete bm instance nginx proxy on baremetal pxeserver[uuid:{0}]",
    "zh_CN": "在部署服务器[uuid:{0}]上删除裸金属物理机Nginx代理失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 589,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to start baremetal pxeserver[uuid:%s]",
    "en_US": "failed to start baremetal pxeserver[uuid:{0}]",
    "zh_CN": "启动部署服务器[uuid:{0}]失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 620,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to stop baremetal pxeserver[uuid:%s]",
    "en_US": "failed to stop baremetal pxeserver[uuid:{0}]",
    "zh_CN": "停止部署服务器[uuid:{0}]失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 653,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to create dhcp config of chassis[uuid:%s] on pxeserver[uuid:%s]",
    "en_US": "failed to create dhcp config of chassis[uuid:{0}] on pxeserver[uuid:{1}]",
    "zh_CN": "无法在Pxeserver[uuid：{1}]上创建机箱[uuid：{0}]的DHCP配置",
    "arguments": [
      "msg.getChassisUuid()",
      "self.getUuid()"
    ],
    "line": 968,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to delete dhcp config of chassis[uuid:%s] on pxeserver[uuid:%s]",
    "en_US": "failed to delete dhcp config of chassis[uuid:{0}] on pxeserver[uuid:{1}]",
    "zh_CN": "无法删除机箱[uuid：{0}]（在Pxeserver[uuid：{1}]上）的DHCP配置",
    "arguments": [
      "msg.getChassisUuid()",
      "self.getUuid()"
    ],
    "line": 997,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "the uuid of baremtal pxeserver agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of baremtal pxeserver agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "Baremtal PXEServer代理的uuid已更改[应为：{0}，实际为：{1}]，代理很可能已手动重新启动。发出重新连接以同步状态",
    "arguments": [
      "self.getUuid()",
      "ret.uuid"
    ],
    "line": 1055,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "unable to connect to baremetal pxeserver[url:%s], because %s",
    "en_US": "unable to connect to baremetal pxeserver[url:{0}], because {1}",
    "zh_CN": "连接部署服务器[uuid:{0}]失败，因为: {1}",
    "arguments": [
      "url",
      "rsp.error"
    ],
    "line": 1270,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "failed to mount baremetal cache of image[uuid:%s]",
    "en_US": "failed to mount baremetal cache of image[uuid:{0}]",
    "zh_CN": "挂载裸金属镜像缓存[uuid:{0}]失败",
    "arguments": [
      "cache.getImageUuid()"
    ],
    "line": 1362,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "no enough space left in baremetal image cache for image[uuid:%s]",
    "en_US": "no enough space left in baremetal image cache for image[uuid:{0}]",
    "zh_CN": "部署服务器存储路径剩余空间不足",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 1467,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "unsupported backup storage type for baremetal",
    "en_US": "unsupported backup storage type for baremetal",
    "zh_CN": "裸金属管理所不支持的镜像服务器类型",
    "arguments": [],
    "line": 1563,
    "fileName": "src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java"
  },
  {
    "raw": "bond name %s has been existed",
    "en_US": "bond name {0} has been existed",
    "zh_CN": "债券名称{0}已存在",
    "arguments": [
      "msg.getName()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java"
  },
  {
    "raw": "nic with mac:%s has been bonded",
    "en_US": "nic with mac:{0} has been bonded",
    "zh_CN": "已绑定具有MAC：{0}的NIC",
    "arguments": [
      "mac"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java"
  },
  {
    "raw": "cannot find the cluster of baremetal2 chassis[uuid:%s], maybe it doesn\u0027t exist",
    "en_US": "cannot find the cluster of baremetal2 chassis[uuid:{0}], maybe it doesn\u0027t exist",
    "zh_CN": "找不到BareMetal2机箱[uuid：{0}]的群集，该群集可能不存在",
    "arguments": [
      "chassisUuid"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java"
  },
  {
    "raw": "there is no baremetal2 gateway found in cluster[uuid:%s]",
    "en_US": "there is no baremetal2 gateway found in cluster[uuid:{0}]",
    "zh_CN": "在群集[uuid：{0}]中找不到BareMetal2网关",
    "arguments": [
      "clusterUuid"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java"
  },
  {
    "raw": "there is no usable baremetal2 gateway found in cluster[uuid:%s]",
    "en_US": "there is no usable baremetal2 gateway found in cluster[uuid:{0}]",
    "zh_CN": "在群集[uuid：{0}]中找不到可用的Baremetal2网关",
    "arguments": [
      "clusterUuid"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java"
  },
  {
    "raw": "there is no baremetal2 provision network found in cluster[uuid:%s]",
    "en_US": "there is no baremetal2 provision network found in cluster[uuid:{0}]",
    "zh_CN": "在群集[uuid：{0}]中找不到BareMetal2配置网络",
    "arguments": [
      "clusterUuid"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java"
  },
  {
    "raw": "baremetal2 provision network[uuid:%s] is not usable, make sure it\u0027s Enabled",
    "en_US": "baremetal2 provision network[uuid:{0}] is not usable, make sure it\u0027s Enabled",
    "zh_CN": "Baremetal2配置网络[uuid：{0}]不可用，请确保它已启用",
    "arguments": [
      "provisionNetworkUuid"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java"
  },
  {
    "raw": "wrong baremetal2 chassis hardware info format: %s",
    "en_US": "wrong baremetal2 chassis hardware info format: {0}",
    "zh_CN": "错误的Baremetal2机箱硬件信息格式：{0}",
    "arguments": [
      "hardwareInfo"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java"
  },
  {
    "raw": "the cpu architecture of the chassis[arch:%s] and the cluster[arch:%s] don\u0027t match",
    "en_US": "the cpu architecture of the chassis[arch:{0}] and the cluster[arch:{1}] don\u0027t match",
    "zh_CN": "机箱[arch：{0}]和群集[arch：{1}]的CPU体系结构不匹配",
    "arguments": [
      "info.architecture",
      "clusterArchitecture"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java"
  },
  {
    "raw": "only baremetal2 chassis with boot mode %s is supported",
    "en_US": "only baremetal2 chassis with boot mode {0} is supported",
    "zh_CN": "仅支持引导模式为{0}的BareMetal2机箱",
    "arguments": [
      "BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java"
  },
  {
    "raw": "wrong baremetal2 chassis nic hardware info format: %s",
    "en_US": "wrong baremetal2 chassis nic hardware info format: {0}",
    "zh_CN": "错误的Baremetal2机箱NIC硬件信息格式：{0}",
    "arguments": [
      "hardwareInfo"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java"
  },
  {
    "raw": "there must be one and only one provision nic in a baremetal2 chassis",
    "en_US": "there must be one and only one provision nic in a baremetal2 chassis",
    "zh_CN": "Baremetal2机箱中必须有且只有一个配置NIC",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java"
  },
  {
    "raw": "wrong baremetal2 chassis disk hardware info format: %s",
    "en_US": "wrong baremetal2 chassis disk hardware info format: {0}",
    "zh_CN": "错误的Baremetal2机箱磁盘硬件信息格式：{0}",
    "arguments": [
      "hardwareInfo"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java"
  },
  {
    "raw": "other chassis has nics with the same mac address, which is impossible",
    "en_US": "other chassis has nics with the same mac address, which is impossible",
    "zh_CN": "其他机箱具有相同MAC地址的NIC，这是不可能的",
    "arguments": [],
    "line": 167,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java"
  },
  {
    "raw": "BareMetal2 Chassis[uuid:%s] doesn\u0027t exist or is disabled",
    "en_US": "BareMetal2 Chassis[uuid:{0}] doesn\u0027t exist or is disabled",
    "zh_CN": "Baremetal2机箱[uuid：{0}]不存在或已禁用",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 372,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java"
  },
  {
    "raw": "no available baremetal2 chassis found in baremetal2 clusters[uuids:%s]",
    "en_US": "no available baremetal2 chassis found in baremetal2 clusters[uuids:{0}]",
    "zh_CN": "在Baremetal2群集中找不到可用的Baremetal2机箱[uuid：{0}]",
    "arguments": [
      "msg.getRequiredClusterUuids()"
    ],
    "line": 438,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java"
  },
  {
    "raw": "no available baremetal2 chassis found",
    "en_US": "no available baremetal2 chassis found",
    "zh_CN": "找不到可用的Baremetal2机箱",
    "arguments": [],
    "line": 430,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java"
  },
  {
    "raw": "IPMI Address %s is not valid",
    "en_US": "IPMI Address {0} is not valid",
    "zh_CN": "IPMI地址{0}是无效的",
    "arguments": [
      "address"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "Baremetal Chassis of IPMI address %s and IPMI port %d has already been created.",
    "en_US": "Baremetal Chassis of IPMI address {0} and IPMI port {1} has already been created.",
    "zh_CN": "IPMI地址为{0}，端口为{1}的裸金属设备已经被创建",
    "arguments": [
      "address",
      "port"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "BareMetal2 Chassis of IPMI address %s and IPMI port %d has already been created.",
    "en_US": "BareMetal2 Chassis of IPMI address {0} and IPMI port {1} has already been created.",
    "zh_CN": "已创建IPMI地址为{0}、IPMI端口为{1}的BareMetal2机箱。",
    "arguments": [
      "address",
      "port"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] does not exists.",
    "en_US": "Cluster[uuid:{0}] does not exists.",
    "zh_CN": "集群[uuid:{0}]不存在",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] is not Enabled.",
    "en_US": "Cluster[uuid:{0}] is not Enabled.",
    "zh_CN": "集群[uuid:{0}]处于停用状态",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "Bare Metal IPMI 2 Chassis %s:%d already exists",
    "en_US": "Bare Metal IPMI 2 Chassis {0}:{1} already exists",
    "zh_CN": "裸机IPMI 2机箱{0}：{1}已存在",
    "arguments": [
      "address",
      "port"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "Failed to reach the baremetal2 chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.",
    "en_US": "Failed to reach the baremetal2 chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.",
    "zh_CN": "无法访问Baremetal2机箱，请确保:1.IPMI连接处于活动状态；2.IPMI地址、端口、用户名和密码正确；3.在BIOS中启用了IPMI over LAN。",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] is not a BareMetal2 Cluster.",
    "en_US": "Cluster[uuid:{0}] is not a BareMetal2 Cluster.",
    "zh_CN": "群集[uuid：{0}]不是BareMetal2群集。",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "no usable baremetal2 gateway in cluster[uuid:%s]",
    "en_US": "no usable baremetal2 gateway in cluster[uuid:{0}]",
    "zh_CN": "群集[uuid：{0}]中没有可用的Baremetal2网关",
    "arguments": [
      "clusterUuid"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java"
  },
  {
    "raw": "failed to power on baremetal2 ipmi chassis[uuid:%s]",
    "en_US": "failed to power on baremetal2 ipmi chassis[uuid:{0}]",
    "zh_CN": "无法打开BareMetal2 IPMI机箱[uuid：{0}]",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java"
  },
  {
    "raw": "failed to power off baremetal2 ipmi chassis[uuid:%s]",
    "en_US": "failed to power off baremetal2 ipmi chassis[uuid:{0}]",
    "zh_CN": "无法关闭BareMetal2 IPMI机箱[uuid：{0}]",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java"
  },
  {
    "raw": "failed to power reset baremetal2 ipmi chassis[uuid:%s]",
    "en_US": "failed to power reset baremetal2 ipmi chassis[uuid:{0}]",
    "zh_CN": "无法重新启动BareMetal2 IPMI机箱[uuid：{0}]",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java"
  },
  {
    "raw": "Failed to remotely ipxe boot chassis[uuid:%s]",
    "en_US": "Failed to remotely ipxe boot chassis[uuid:{0}]",
    "zh_CN": "无法远程IPXE引导机箱[uuid：{0}]",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 340,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java"
  },
  {
    "raw": "fail to load baremetal2 ipmi chassis info from file, because: %s",
    "en_US": "fail to load baremetal2 ipmi chassis info from file, because: {0}",
    "zh_CN": "无法从文件加载BareMetal2 IPMI机箱信息，原因是：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java"
  },
  {
    "raw": "the api message\u0027s chassis type is ipmi, but it\u0027s not an APICreateBareMetal2ChassisHardwareInfoMsg",
    "en_US": "the api message\u0027s chassis type is ipmi, but it\u0027s not an APICreateBareMetal2ChassisHardwareInfoMsg",
    "zh_CN": "API消息的机箱类型为IPMI，但它不是APICreateBareMetal2ChassisHardwareInfoMsg",
    "arguments": [],
    "line": 94,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java"
  },
  {
    "raw": "received hardware info for unknown baremetal2 chassis[ipmi_addr:%s, ipmi_port:%d]",
    "en_US": "received hardware info for unknown baremetal2 chassis[ipmi_addr:{0}, ipmi_port:{1}]",
    "zh_CN": "收到未知Baremetal2机箱的硬件信息[IPMI_地址：{0}，IPMI_端口：{1}]",
    "arguments": [
      "imsg.getIpmiAddress()",
      "imsg.getIpmiPort()"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java"
  },
  {
    "raw": "cluster type and hypervisor type should all be baremetal2 or all not",
    "en_US": "cluster type and hypervisor type should all be baremetal2 or all not",
    "zh_CN": "群集类型和云主机管理程序类型应全部为BareMetal2或全部为非BareMetal2",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java"
  },
  {
    "raw": "the architecture must be set when create new baremetal2 clusters",
    "en_US": "the architecture must be set when create new baremetal2 clusters",
    "zh_CN": "创建新的Baremetal2群集时必须设置体系结构",
    "arguments": [],
    "line": 90,
    "fileName": "src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java"
  },
  {
    "raw": "do not add host into baremetal2 cluster",
    "en_US": "do not add host into baremetal2 cluster",
    "zh_CN": "不要将物理机添加到BareMetal2群集中",
    "arguments": [],
    "line": 101,
    "fileName": "src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java"
  },
  {
    "raw": "l2 network should not have the same interface name with provision network that\u0027s already attached to the cluster",
    "en_US": "l2 network should not have the same interface name with provision network that\u0027s already attached to the cluster",
    "zh_CN": "二层网络不应与已连接到群集的Provision网络具有相同的接口名称",
    "arguments": [],
    "line": 123,
    "fileName": "src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java"
  },
  {
    "raw": "Can not attach third-party ceph with token into aarch64 cluster.",
    "en_US": "Can not attach third-party ceph with token into aarch64 cluster.",
    "zh_CN": "无法使用令牌将第三方 分布式存储 附加到Aarch64集群。",
    "arguments": [],
    "line": 29,
    "fileName": "src/main/java/org/zstack/baremetal2/cluster/CephStorageAttachBm2ClusterMetric.java"
  },
  {
    "raw": "Can not attach local storage into baremetal2 cluster.",
    "en_US": "Can not attach local storage into baremetal2 cluster.",
    "zh_CN": "无法将本地存储连接到BareMetal2群集。",
    "arguments": [],
    "line": 12,
    "fileName": "src/main/java/org/zstack/baremetal2/cluster/LocalStorageAttachBm2ClusterMetric.java"
  },
  {
    "raw": "no provision nic found for baremetal2 instance[uuid:%s]",
    "en_US": "no provision nic found for baremetal2 instance[uuid:{0}]",
    "zh_CN": "未找到BareMetal2实例[uuid：{0}]的配置NIC",
    "arguments": [
      "msg.getInstanceUuid()"
    ],
    "line": 1328,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to delete convert volume to chassis local disk configurations in gateway[uuid:%s] for baremetal2 instance[uuid:%s]",
    "en_US": "failed to delete convert volume to chassis local disk configurations in gateway[uuid:{0}] for baremetal2 instance[uuid:{1}]",
    "zh_CN": "无法删除将网关[uuid：{0}]中的卷转换为机箱本地磁盘配置（对于BareMetal2实例[uuid：{1}]）",
    "arguments": [
      "self.getUuid()",
      "msg.getInstanceUuid()"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to create provision configurations for baremetal2 instance[uuid:%s] in gateway[uuid:%s], because %s",
    "en_US": "failed to create provision configurations for baremetal2 instance[uuid:{0}] in gateway[uuid:{1}], because {2}",
    "zh_CN": "无法为网关[uuid：{1}]中的BareMetal2实例[uuid：{0}]创建设置配置，因为{2}",
    "arguments": [
      "msg.getInstanceUuid()",
      "self.getUuid()",
      "ret.getError()"
    ],
    "line": 1342,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "chassis:%s disk does not have wwn info, please inspect chassis and try again",
    "en_US": "chassis:{0} disk does not have wwn info, please inspect chassis and try again",
    "zh_CN": "机箱：{0}磁盘没有WWN信息，请检查机箱并重试",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 418,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to power on baremetal2 chassis[uuid:%s] using ipmitool",
    "en_US": "failed to power on baremetal2 chassis[uuid:{0}] using ipmitool",
    "zh_CN": "无法使用ipmitool打开Baremetal2机箱[uuid：{0}]的电源",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 1809,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "convert image data to local disk failed",
    "en_US": "convert image data to local disk failed",
    "zh_CN": "将图像数据转换到本地磁盘失败",
    "arguments": [],
    "line": 567,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] convert volume failed on baremetal2 chassis[uuid:%s] , timeout after %s minutes ",
    "en_US": "baremetal2 instance[uuid:{0}] convert volume failed on baremetal2 chassis[uuid:{1}] , timeout after {2} minutes ",
    "zh_CN": "Baremetal2实例[uuid：{0}]转换卷在Baremetal2机箱[uuid：{1}]上失败，{2}分钟后超时",
    "arguments": [
      "instanceVO.getUuid()",
      "chassis.getUuid()",
      "BareMetal2GlobalConfig.CONVERT_VOLUME_TO_LOCAL_DISK_TIMEOUT.value(Integer.class)"
    ],
    "line": 576,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to prepare provision network in gateway[uuid:%s], because %s",
    "en_US": "failed to prepare provision network in gateway[uuid:{0}], because {1}",
    "zh_CN": "无法在网关[uuid：{0}]中准备设置网络，因为{1}",
    "arguments": [
      "self.getUuid()",
      "ret.getError()"
    ],
    "line": 1235,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to destroy provision network in gateway[uuid:%s], because %s",
    "en_US": "failed to destroy provision network in gateway[uuid:{0}], because {1}",
    "zh_CN": "无法销毁网关[uuid：{0}]中的设置网络，因为{1}",
    "arguments": [
      "self.getUuid()",
      "ret.getError()"
    ],
    "line": 1304,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to delete provision configurations for baremetal2 instance[uuid:%s] in gateway[uuid:%s], because %s",
    "en_US": "failed to delete provision configurations for baremetal2 instance[uuid:{0}] in gateway[uuid:{1}], because {2}",
    "zh_CN": "无法删除Baremetal2实例[uuid：{0}]（在网关[uuid：{1}]中）的设置配置，因为{2}",
    "arguments": [
      "msg.getInstanceUuid()",
      "self.getUuid()",
      "ret.getError()"
    ],
    "line": 1391,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to create console proxy for baremetal2 instance[uuid:%s] in gateway[uuid:%s], because %s",
    "en_US": "failed to create console proxy for baremetal2 instance[uuid:{0}] in gateway[uuid:{1}], because {2}",
    "zh_CN": "无法为网关[uuid：{1}]中的BareMetal2实例[uuid：{0}]创建控制台代理，因为{2}",
    "arguments": [
      "msg.getInstanceUuid()",
      "self.getUuid()",
      "ret.getError()"
    ],
    "line": 1435,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to change default network from l3[uuid:%s] to l3[uuid:%s] for baremetal2 instance[uuid:%s], because %s",
    "en_US": "failed to change default network from l3[uuid:{0}] to l3[uuid:{1}] for baremetal2 instance[uuid:{2}], because {3}",
    "zh_CN": "无法将默认网络从第3层[uuid：{0}]更改为第3层[uuid：{1}]（对于BareMetal2实例[UUid：{2}]），因为{3}",
    "arguments": [
      "msg.getOldDefaultL3Uuid()",
      "msg.getNewDefaultL3Uuid()",
      "msg.getInstanceUuid()",
      "ret.getError()"
    ],
    "line": 1492,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to ping baremetal2 instance[uuid:%s] through gateway[uuid:%s], because %s",
    "en_US": "failed to ping baremetal2 instance[uuid:{0}] through gateway[uuid:{1}], because {2}",
    "zh_CN": "无法通过网关[uuid：{1}]Ping BareMetal2实例[uuid：{0}]，因为{2}",
    "arguments": [
      "msg.getInstanceUuid()",
      "msg.getGatewayUuid()",
      "ret.getError()"
    ],
    "line": 1531,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to change the password of baremetal2 instance[uuid:%s] through gateway[uuid:%s], because %s",
    "en_US": "failed to change the password of baremetal2 instance[uuid:{0}] through gateway[uuid:{1}], because {2}",
    "zh_CN": "无法通过网关[uuid：{1}]更改BareMetal2实例[uuid：{0}]的密码，因为{2}",
    "arguments": [
      "msg.getInstanceUuid()",
      "msg.getGatewayUuid()",
      "ret.getError()"
    ],
    "line": 1578,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "third party ceph with token not support local disk yet",
    "en_US": "third party ceph with token not support local disk yet",
    "zh_CN": "带有令牌的第三方 分布式存储 尚不支持本地磁盘",
    "arguments": [],
    "line": 1677,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to power off baremetal2 chassis[uuid:%s] using ipmitool",
    "en_US": "failed to power off baremetal2 chassis[uuid:{0}] using ipmitool",
    "zh_CN": "无法使用ipmitool关闭Baremetal2机箱[uuid：{0}]的电源",
    "arguments": [
      "chassis.getUuid()"
    ],
    "line": 1838,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "baremetal2 chassis[uuid:%s] is still not POWER_OFF %d seconds later",
    "en_US": "baremetal2 chassis[uuid:{0}] is still not POWER_OFF {1} seconds later",
    "zh_CN": "Baremetal2机箱[uuid：{0}]在{1}秒后仍未关闭电源_。",
    "arguments": [
      "chassis.getUuid()",
      "timeout"
    ],
    "line": 1923,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to power off baremetal2 instance[uuid:%s] by bm agent, because %s",
    "en_US": "failed to power off baremetal2 instance[uuid:{0}] by bm agent, because {1}",
    "zh_CN": "无法通过BM代理关闭BareMetal2实例[uuid：{0}]，因为{1}",
    "arguments": [
      "bm.getUuid()",
      "ret.getError()"
    ],
    "line": 1896,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "vmInstanceUuids is empty",
    "en_US": "vmInstanceUuids is empty",
    "zh_CN": "VMInstanceUuids为空",
    "arguments": [],
    "line": 2103,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "the baremetal2 gateway[uuid:%s, status:%s] is not Connected",
    "en_US": "the baremetal2 gateway[uuid:{0}, status:{1}] is not Connected",
    "zh_CN": "Baremetal2网关[uuid：{0}，状态：{1}]未连接",
    "arguments": [
      "self.getUuid()",
      "self.getStatus()"
    ],
    "line": 2109,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] not connected, cannot attach nic to it",
    "en_US": "baremetal2 instance[uuid:{0}] not connected, cannot attach nic to it",
    "zh_CN": "BareMetal2实例[uuid：{0}]未连接，无法将NIC连接到该实例",
    "arguments": [
      "bmUuid"
    ],
    "line": 2186,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to attach nic[uuid:%s] to baremetal2 instance[uuid:%s] through gateway[uuid:%s], because %s",
    "en_US": "failed to attach nic[uuid:{0}] to baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}",
    "zh_CN": "无法通过网关[uuid：{2}]将NIC[uuid：{0}]连接到BareMetal2实例[Uuid：{1}]，因为{3}",
    "arguments": [
      "nicUuid",
      "bmUuid",
      "gatewayUuid",
      "ret.getError()"
    ],
    "line": 2209,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] is not connected, cannot detach nic from it",
    "en_US": "baremetal2 instance[uuid:{0}] is not connected, cannot detach nic from it",
    "zh_CN": "BareMetal2实例[uuid：{0}]未连接，无法将NIC与其分离",
    "arguments": [
      "bmUuid"
    ],
    "line": 2252,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to detach nic[uuid:%s] from baremetal2 instance[uuid:%s] through gateway[uuid:%s], because %s",
    "en_US": "failed to detach nic[uuid:{0}] from baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}",
    "zh_CN": "无法通过网关[uuid：{2}]从BareMetal2实例[uuid：{1}]分离NIC[Uuid：{0}]，因为{3}",
    "arguments": [
      "nicUuid",
      "bmUuid",
      "gatewayUuid",
      "ret.getError()"
    ],
    "line": 2275,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] is not connected, cannot attach volume to it",
    "en_US": "baremetal2 instance[uuid:{0}] is not connected, cannot attach volume to it",
    "zh_CN": "BareMetal2实例[uuid：{0}]未连接，无法将卷附加到该实例",
    "arguments": [
      "bmUuid"
    ],
    "line": 2441,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to prepare volume[uuid:%s] for baremetal2 instance[uuid:%s] through gateway[uuid:%s], because %s",
    "en_US": "failed to prepare volume[uuid:{0}] for baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}",
    "zh_CN": "无法通过网关[uuid：{2}]为BareMetal2实例[uuid：{1}]准备卷[Uuid：{0}]，因为{3}",
    "arguments": [
      "volumeUuid",
      "bmUuid",
      "gatewayUuid",
      "ret.getError()"
    ],
    "line": 2338,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to attach volume[uuid:%s] to baremetal2 instance[uuid:%s] through gateway[uuid:%s], because %s",
    "en_US": "failed to attach volume[uuid:{0}] to baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}",
    "zh_CN": "无法通过网关[uuid：{2}]将卷[uuid：{0}]附加到BareMetal2实例[Uuid：{1}]，因为{3}",
    "arguments": [
      "volumeUuid",
      "bmUuid",
      "gatewayUuid",
      "ret.getError()"
    ],
    "line": 2399,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to get volume[uuid:%s] lunid for baremetal2 instance[uuid:%s] in gateway[uuid:%s], because %s",
    "en_US": "failed to get volume[uuid:{0}] lunid for baremetal2 instance[uuid:{1}] in gateway[uuid:{2}], because {3}",
    "zh_CN": "无法获取卷[uuid：{0}]的lunid（针对网关[uuid：{2}]中的BareMetal2实例[Uuid：{1}]），因为{3}",
    "arguments": [
      "volumeUuid",
      "bmUuid",
      "gatewayUuid",
      "ret.getError()"
    ],
    "line": 2480,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to detach volume[uuid:%s] from baremetal2 instance[uuid:%s] through gateway[uuid:%s], because %s",
    "en_US": "failed to detach volume[uuid:{0}] from baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}",
    "zh_CN": "无法通过网关[uuid：{2}]分离卷[uuid：{0}]（从BareMetal2实例[Uuid：{1}]），因为{3}",
    "arguments": [
      "volumeUuid",
      "bmUuid",
      "gatewayUuid",
      "ret.getError()"
    ],
    "line": 2535,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "failed to destroy volume[uuid:%s] for baremetal2 instance[uuid:%s] in gateway[uuid:%s], because %s",
    "en_US": "failed to destroy volume[uuid:{0}] for baremetal2 instance[uuid:{1}] in gateway[uuid:{2}], because {3}",
    "zh_CN": "无法销毁网关[uuid：{2}]中BareMetal2实例[uuid：{1}]的卷[Uuid：{0}]，因为{3}",
    "arguments": [
      "volumeUuid",
      "bmUuid",
      "gatewayUuid",
      "ret.getError()"
    ],
    "line": 2570,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java"
  },
  {
    "raw": "there has been a baremetal2 gateway having management ip %s",
    "en_US": "there has been a baremetal2 gateway having management ip {0}",
    "zh_CN": "存在管理IP为{0}的BareMetal2网关",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "there is already a baremetal pxe server with management ip %s, do not use it to create baremetal2 gateway",
    "en_US": "there is already a baremetal pxe server with management ip {0}, do not use it to create baremetal2 gateway",
    "zh_CN": "已存在管理IP为{0}的Baremetal PXE服务器，请不要使用它来创建Baremetal2网关",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "there has been a host having management ip %s",
    "en_US": "there has been a host having management ip {0}",
    "zh_CN": "已存在管理IP为{0}的物理机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "management ip[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "management ip[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "管理IP[{0}]既不是IPv4地址也不是有效的物理机名",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "cannot add baremetal2 gateway in non-baremetal2 cluster[uuid:%s]",
    "en_US": "cannot add baremetal2 gateway in non-baremetal2 cluster[uuid:{0}]",
    "zh_CN": "无法在非Baremetal2群集[uuid：{0}]中添加Baremetal2网关",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "cannot attach baremetal2 gateway[uuid:%s] to non-baremetal2 cluster[uuid:%s]",
    "en_US": "cannot attach baremetal2 gateway[uuid:{0}] to non-baremetal2 cluster[uuid:{1}]",
    "zh_CN": "无法将Baremetal2网关[uuid：{0}]连接到非Baremetal2群集[uuid：{1}]",
    "arguments": [
      "msg.getGatewayUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] already attached to cluster[uuid:%s]",
    "en_US": "baremetal2 gateway[uuid:{0}] already attached to cluster[uuid:{1}]",
    "zh_CN": "Baremetal2网关[uuid：{0}]已连接到群集[uuid：{1}]",
    "arguments": [
      "msg.getGatewayUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] can only attach to one cluster",
    "en_US": "baremetal2 gateway[uuid:{0}] can only attach to one cluster",
    "zh_CN": "Baremetal2网关[uuid：{0}]只能连接到一个群集",
    "arguments": [
      "msg.getGatewayUuid()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] not attached to cluster[uuid:%s], no need to detach",
    "en_US": "baremetal2 gateway[uuid:{0}] not attached to cluster[uuid:{1}], no need to detach",
    "zh_CN": "Baremetal2网关[uuid：{0}]未连接到群集[uuid：{1}]，无需分离",
    "arguments": [
      "msg.getGatewayUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is attached to only one cluster now, do not detach it",
    "en_US": "baremetal2 gateway[uuid:{0}] is attached to only one cluster now, do not detach it",
    "zh_CN": "BareMetal2网关[uuid：{0}]现在仅连接到一个群集，请不要将其分离",
    "arguments": [
      "msg.getGatewayUuid()"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] does not exist",
    "en_US": "cluster[uuid:{0}] does not exist",
    "zh_CN": "群集[uuid：{0}]不存在",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is not a baremetal2 cluster",
    "en_US": "cluster[uuid:{0}] is not a baremetal2 cluster",
    "zh_CN": "群集[uuid：{0}]不是BareMetal2群集",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "gateway[uuid:%s] does not exist",
    "en_US": "gateway[uuid:{0}] does not exist",
    "zh_CN": "网关[uuid：{0}]不存在",
    "arguments": [
      "msg.getGatewayUuid()"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is already in cluster[uuid:%s]",
    "en_US": "baremetal2 gateway[uuid:{0}] is already in cluster[uuid:{1}]",
    "zh_CN": "Baremetal2网关[uuid：{0}]已在群集[uuid：{1}]中",
    "arguments": [
      "msg.getGatewayUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is not in the same zone as cluster[uuid:%s]",
    "en_US": "baremetal2 gateway[uuid:{0}] is not in the same zone as cluster[uuid:{1}]",
    "zh_CN": "Baremetal2网关[uuid：{0}]与群集[uuid：{1}]不在同一个区域中",
    "arguments": [
      "msg.getGatewayUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "cannot change the cluster of baremetal2 gateway[uuid:%s] when there are running instances depending on it",
    "en_US": "cannot change the cluster of baremetal2 gateway[uuid:{0}] when there are running instances depending on it",
    "zh_CN": "存在依赖于Baremetal2网关[uuid：{0}]的正在运行的实例时，无法更改该群集",
    "arguments": [
      "msg.getGatewayUuid()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] doesn\u0027t exist, cannot generate its console url",
    "en_US": "baremetal2 instance[uuid:{0}] doesn\u0027t exist, cannot generate its console url",
    "zh_CN": "Baremetal2实例[uuid：{0}]不存在，无法生成其控制台URL",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is not Connected, cannot generate console url for instance[uuid:%s]",
    "en_US": "baremetal2 gateway[uuid:{0}] is not Connected, cannot generate console url for instance[uuid:{1}]",
    "zh_CN": "Baremetal2网关[uuid：{0}]未连接，无法为实例[uuid：{1}]生成控制台URL",
    "arguments": [
      "bm.getGatewayUuid()",
      "bm.getUuid()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java"
  },
  {
    "raw": "cluster[%s] is not baremetal2 type",
    "en_US": "cluster[{0}] is not baremetal2 type",
    "zh_CN": "群集[{0}]不是BareMetal2类型",
    "arguments": [
      "resourceUuid"
    ],
    "line": 258,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayManagerImpl.java"
  },
  {
    "raw": "failed to allocate baremetal2 gateway",
    "en_US": "failed to allocate baremetal2 gateway",
    "zh_CN": "无法分配Baremetal2网关",
    "arguments": [],
    "line": 102,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/allocator/AbstractGatewayAllocatorStrategy.java"
  },
  {
    "raw": "no available baremetal2 gateway found",
    "en_US": "no available baremetal2 gateway found",
    "zh_CN": "找不到可用的Baremetal2网关",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/baremetal2/gateway/allocator/BareMetal2GatewayMainAllocatorFlow.java"
  },
  {
    "raw": "only baremetal2 image with boot mode %s is supported",
    "en_US": "only baremetal2 image with boot mode {0} is supported",
    "zh_CN": "仅支持引导模式为{0}的BareMetal2镜像",
    "arguments": [
      "BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE"
    ],
    "line": 166,
    "fileName": "src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java"
  },
  {
    "raw": "only one baremetal2 system tag is allowed, but %d was got",
    "en_US": "only one baremetal2 system tag is allowed, but {0} was got",
    "zh_CN": "只允许一个Baremetal2系统标记，但获得了{0}",
    "arguments": [
      "bm2ImageCount"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java"
  },
  {
    "raw": "only root volume template of format raw/qcow2 can be tagged with baremetal2",
    "en_US": "only root volume template of format raw/qcow2 can be tagged with baremetal2",
    "zh_CN": "只有RAW/QCOW2格式的根卷模板才能使用BareMetal2进行标记",
    "arguments": [],
    "line": 158,
    "fileName": "src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java"
  },
  {
    "raw": "the bootMode tag is mandatory for baremetal2 images",
    "en_US": "the bootMode tag is mandatory for baremetal2 images",
    "zh_CN": "对于BareMetal2镜像，bootmode标记是必需的",
    "arguments": [],
    "line": 162,
    "fileName": "src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java"
  },
  {
    "raw": "required chassis disk[%s] not belong to chassis[%s]",
    "en_US": "required chassis disk[{0}] not belong to chassis[{1}]",
    "zh_CN": "所需的机箱磁盘[{0}]不属于机箱[{1}]",
    "arguments": [
      "spec.getRequiredChassisDiskUuid()",
      "chassis.getUuid()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java"
  },
  {
    "raw": "chassis not have engouh capacity for image[%s]",
    "en_US": "chassis not have engouh capacity for image[{0}]",
    "zh_CN": "机箱没有足够的容量用于镜像[{0}]",
    "arguments": [
      "chassis.getUuid()",
      "spec.getImageSpec().getInventory().getUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java"
  },
  {
    "raw": "not enough information to determine which baremetal2 cluster should be used",
    "en_US": "not enough information to determine which baremetal2 cluster should be used",
    "zh_CN": "没有足够的信息来确定应使用哪个BareMetal2群集",
    "arguments": [],
    "line": 85,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java"
  },
  {
    "raw": "no baremetal2 cluster found",
    "en_US": "no baremetal2 cluster found",
    "zh_CN": "未找到BareMetal2群集",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java"
  },
  {
    "raw": "failed to allocate primary storage in clusters[uuids:%s] for baremetal2 instance[uuid:%s]",
    "en_US": "failed to allocate primary storage in clusters[uuids:{0}] for baremetal2 instance[uuid:{1}]",
    "zh_CN": "无法在群集[uuid：{0}]中为Baremetal2实例[uuid：{1}]分配主存储",
    "arguments": [
      "spec.getRequiredClusterUuids()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java"
  },
  {
    "raw": "failed to allocate gateway in clusters[uuids:%s] for baremetal2 instance[uuid:%s]",
    "en_US": "failed to allocate gateway in clusters[uuids:{0}] for baremetal2 instance[uuid:{1}]",
    "zh_CN": "无法在群集[uuid：{0}]中为BareMetal2实例[uuid：{1}]分配网关",
    "arguments": [
      "spec.getRequiredClusterUuids()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 224,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java"
  },
  {
    "raw": "failed to allocate chassis in clusters[uuids:%s] for baremetal2 instance[uuid:%s]",
    "en_US": "failed to allocate chassis in clusters[uuids:{0}] for baremetal2 instance[uuid:{1}]",
    "zh_CN": "无法在群集[uuid：{0}]中为Baremetal2实例[uuid：{1}]分配机箱",
    "arguments": [
      "spec.getRequiredClusterUuids()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java"
  },
  {
    "raw": "only baremetal2 clusters[uuid:%s] meet the needs for chassis and gateway, but they have no provision network attached",
    "en_US": "only baremetal2 clusters[uuid:{0}] meet the needs for chassis and gateway, but they have no provision network attached",
    "zh_CN": "只有BareMetal2群集[uuid：{0}]满足机箱和网关的需求，但它们没有连接的配置网络",
    "arguments": [
      "clusterUuids"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java"
  },
  {
    "raw": "no baremetal2 cluster found in clusters[uuid:%s]",
    "en_US": "no baremetal2 cluster found in clusters[uuid:{0}]",
    "zh_CN": "在群集[uuid：{0}]中找不到BareMetal2群集",
    "arguments": [
      "spec.getRequiredClusterUuids()"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java"
  },
  {
    "raw": "the primary storage[%s] of the root volume and the primary storage[%s] of the data volume are not in the same cluster",
    "en_US": "the primary storage[{0}] of the root volume and the primary storage[{1}] of the data volume are not in the same cluster",
    "zh_CN": "根卷的主存储[{0}]和数据云盘的主存储[{1}]不在同一群集中",
    "arguments": [
      "msg.getPrimaryStorageUuidForRootVolume()",
      "msg.getPrimaryStorageUuidForDataVolume()"
    ],
    "line": 881,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "make sure all baremetal2 gateways on provision network[uuid:%s] are Connected",
    "en_US": "make sure all baremetal2 gateways on provision network[uuid:{0}] are Connected",
    "zh_CN": "确保配置网络[uuid：{0}]上的所有Baremetal2网关均已连接",
    "arguments": [
      "networkUuid"
    ],
    "line": 244,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "neither chassisUuid nor chassisOfferingUuid is set when create baremetal2 instance",
    "en_US": "neither chassisUuid nor chassisOfferingUuid is set when create baremetal2 instance",
    "zh_CN": "创建BareMetal2实例时，Chassisuuid和ChassisOfferuuid均未设置",
    "arguments": [],
    "line": 707,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "only support vpc network support attach eip on baremetal2 instance",
    "en_US": "only support vpc network support attach eip on baremetal2 instance",
    "zh_CN": "仅支持VPC网络支持在Baremetal2实例上附加EIP",
    "arguments": [],
    "line": 169,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "bare metal instance not allowed to change vm nic network",
    "en_US": "bare metal instance not allowed to change vm nic network",
    "zh_CN": "不允许裸机实例更改VM NIC网络",
    "arguments": [],
    "line": 179,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "current operation is not supported on local baremetal instance",
    "en_US": "current operation is not supported on local baremetal instance",
    "zh_CN": "本地裸机实例不支持当前操作",
    "arguments": [],
    "line": 190,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "not supported by baremetal2 instance",
    "en_US": "not supported by baremetal2 instance",
    "zh_CN": "BareMetal2实例不支持",
    "arguments": [],
    "line": 201,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] is not Connected",
    "en_US": "baremetal2 instance[uuid:{0}] is not Connected",
    "zh_CN": "BareMetal2实例[uuid：{0}]未连接",
    "arguments": [
      "bm.getUuid()"
    ],
    "line": 207,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] is not stopped",
    "en_US": "baremetal2 instance[uuid:{0}] is not stopped",
    "zh_CN": "Baremetal2实例[uuid：{0}]未停止",
    "arguments": [
      "bm.getUuid()"
    ],
    "line": 215,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] is running but its agent is not Connected",
    "en_US": "baremetal2 instance[uuid:{0}] is running but its agent is not Connected",
    "zh_CN": "Baremetal2实例[uuid：{0}]正在运行，但其代理未连接",
    "arguments": [
      "bm.getUuid()"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis offering[uuid:%s] does not exist",
    "en_US": "baremetal2 chassis offering[uuid:{0}] does not exist",
    "zh_CN": "Baremetal2机箱产品[uuid：{0}]不存在",
    "arguments": [
      "msg.getChassisOfferingUuid()"
    ],
    "line": 607,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] is not stopped can not change its chassis offering",
    "en_US": "baremetal2 instance[uuid:{0}] is not stopped can not change its chassis offering",
    "zh_CN": "Baremetal2实例[uuid：{0}]未停止，无法更改其机箱产品",
    "arguments": [
      "msg.getInstanceUuid()"
    ],
    "line": 318,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] has not been allocated a chassis, start the instance and try again",
    "en_US": "baremetal2 instance[uuid:{0}] has not been allocated a chassis, start the instance and try again",
    "zh_CN": "尚未为BareMetal2实例[uuid：{0}]分配机箱，请启动该实例并重试",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 337,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "only l3 network with ip version %d is supported by baremetal2 instance",
    "en_US": "only l3 network with ip version {0} is supported by baremetal2 instance",
    "zh_CN": "Baremetal2实例仅支持IP版本为{0}的三层网络",
    "arguments": [
      "ipVersion"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "l2 network type %s not supported by baremetal2 instance",
    "en_US": "l2 network type {0} not supported by baremetal2 instance",
    "zh_CN": "二层网络类型{0}不受Baremetal2实例支持",
    "arguments": [
      "l2Type"
    ],
    "line": 349,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "customMac is mandatory when attaching l3 network to baremetal2 instance",
    "en_US": "customMac is mandatory when attaching l3 network to baremetal2 instance",
    "zh_CN": "将三层网络连接到Baremetal2实例时，CustomMAC是必需的",
    "arguments": [],
    "line": 355,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "%s is not valid mac address",
    "en_US": "{0} is not valid mac address",
    "zh_CN": "{0}不是有效的MAC地址",
    "arguments": [
      "msg.getCustomMac()"
    ],
    "line": 359,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "duplicated mac address %s",
    "en_US": "duplicated mac address {0}",
    "zh_CN": "重复的MAC地址{0}",
    "arguments": [
      "msg.getCustomMac()"
    ],
    "line": 364,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] running on chassis[uuid:%s], which doesn\u0027t have non-provisioning nic with mac address %s",
    "en_US": "baremetal2 instance[uuid:{0}] running on chassis[uuid:{1}], which doesn\u0027t have non-provisioning nic with mac address {2}",
    "zh_CN": "机箱[uuid：{1}]上运行的Baremetal2实例[uuid：{0}]没有MAC地址为{2}的非配置NIC",
    "arguments": [
      "bm.getUuid()",
      "bm.getChassisUuid()",
      "msg.getCustomMac()"
    ],
    "line": 373,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "mac address %s has already been used, try another one",
    "en_US": "mac address {0} has already been used, try another one",
    "zh_CN": "MAC地址{0}已被使用，请尝试其他地址",
    "arguments": [
      "msg.getCustomMac()"
    ],
    "line": 382,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "nic with mac:%s cannot be attached l3Network, because it has been bonded",
    "en_US": "nic with mac:{0} cannot be attached l3Network, because it has been bonded",
    "zh_CN": "MAC为{0}的NIC无法连接到L3Network，因为它已绑定",
    "arguments": [
      "msg.getCustomMac()"
    ],
    "line": 399,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "third party ceph cannot mixed with other primary storage",
    "en_US": "third party ceph cannot mixed with other primary storage",
    "zh_CN": "第三方 分布式存储 不能与其他主存储混合",
    "arguments": [],
    "line": 448,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is not an Enabled baremetal2 cluster, cannot start instance[uuid:%s] in it",
    "en_US": "cluster[uuid:{0}] is not an Enabled baremetal2 cluster, cannot start instance[uuid:{1}] in it",
    "zh_CN": "群集[uuid：{0}]不是已启用的BareMetal2群集，无法在其中启动实例[uuid：{1}]",
    "arguments": [
      "msg.getClusterUuid()",
      "msg.getUuid()"
    ],
    "line": 571,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] does not exist or is not Enabled or Connected",
    "en_US": "baremetal2 gateway[uuid:{0}] does not exist or is not Enabled or Connected",
    "zh_CN": "Baremetal2网关[uuid：{0}]不存在，或者未启用或未连接",
    "arguments": [
      "msg.getGatewayUuid()"
    ],
    "line": 583,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is not in cluster [uuid:%s]",
    "en_US": "baremetal2 gateway[uuid:{0}] is not in cluster [uuid:{1}]",
    "zh_CN": "Baremetal2网关[uuid：{0}]不在群集[uuid：{1}]中",
    "arguments": [
      "msg.getGatewayUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 594,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "please specify chassis uuid or chassis offering uuid to start baremetal2 instance[uuid:%s]",
    "en_US": "please specify chassis uuid or chassis offering uuid to start baremetal2 instance[uuid:{0}]",
    "zh_CN": "请指定机箱uuid或机箱提供uuid以启动BareMetal2实例[uuid：{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 600,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis offering[uuid:%s] is not Enabled",
    "en_US": "baremetal2 chassis offering[uuid:{0}] is not Enabled",
    "zh_CN": "未启用Baremetal2机箱产品[uuid：{0}]",
    "arguments": [
      "msg.getChassisOfferingUuid()"
    ],
    "line": 611,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "do not set chassisUuid and chassisOfferingUuid at the same time",
    "en_US": "do not set chassisUuid and chassisOfferingUuid at the same time",
    "zh_CN": "不要同时设置Chassisuuid和ChassisOfferuuid",
    "arguments": [],
    "line": 711,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "no need to set chassisOfferingUuid because the instance has been assigned an chassis already",
    "en_US": "no need to set chassisOfferingUuid because the instance has been assigned an chassis already",
    "zh_CN": "无需设置Chassisofferinguuid，因为实例已分配机箱",
    "arguments": [],
    "line": 619,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "no need to set chassisOfferingUuid because the instance has been assigned an chassis offering already",
    "en_US": "no need to set chassisOfferingUuid because the instance has been assigned an chassis offering already",
    "zh_CN": "无需设置ChassisOfferinguuid，因为已为实例分配了机箱产品",
    "arguments": [],
    "line": 623,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis[uuid:%s] does not exist",
    "en_US": "baremetal2 chassis[uuid:{0}] does not exist",
    "zh_CN": "Baremetal2机箱[uuid：{0}]不存在",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 631,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis[uuid:%s] is not belonging to chassis offering[uuid:%s]",
    "en_US": "baremetal2 chassis[uuid:{0}] is not belonging to chassis offering[uuid:{1}]",
    "zh_CN": "Baremetal2机箱[uuid：{0}]不属于机箱产品[uuid：{1}]",
    "arguments": [
      "msg.getChassisUuid()",
      "bm.getChassisOfferingUuid()"
    ],
    "line": 636,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis[uuid:%s] is not Enabled",
    "en_US": "baremetal2 chassis[uuid:{0}] is not Enabled",
    "zh_CN": "未启用Baremetal2机箱[uuid：{0}]",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 641,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis[uuid:%s] has already been allocated",
    "en_US": "baremetal2 chassis[uuid:{0}] has already been allocated",
    "zh_CN": "已分配Baremetal2机箱[uuid：{0}]",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 645,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is not in the same cluster with chassis[uuid:%s]",
    "en_US": "baremetal2 gateway[uuid:{0}] is not in the same cluster with chassis[uuid:{1}]",
    "zh_CN": "Baremetal2网关[uuid：{0}]与机箱[uuid：{1}]不在同一群集中",
    "arguments": [
      "msg.getGatewayUuid()",
      "msg.getChassisUuid()"
    ],
    "line": 763,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "zone[uuid:%s] is specified but it\u0027s not Enabled, can not create baremetal2 instance from it",
    "en_US": "zone[uuid:{0}] is specified but it\u0027s not Enabled, can not create baremetal2 instance from it",
    "zh_CN": "区域[uuid：{0}]已指定但未启用，无法从中创建BareMetal2实例",
    "arguments": [
      "msg.getZoneUuid()"
    ],
    "line": 685,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is specified but it\u0027s not an Enabled baremetal2 cluster, can not create baremetal2 instance from it",
    "en_US": "cluster[uuid:{0}] is specified but it\u0027s not an Enabled baremetal2 cluster, can not create baremetal2 instance from it",
    "zh_CN": "指定了群集[uuid：{0}]，但它不是启用的BareMetal2群集，无法从中创建BareMetal2实例",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 699,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis[uuid:%s] is not Enabled, can\u0027t create baremetal2 instance from it",
    "en_US": "baremetal2 chassis[uuid:{0}] is not Enabled, can\u0027t create baremetal2 instance from it",
    "zh_CN": "Baremetal2机箱[uuid：{0}]未启用，无法从中创建Baremetal2实例",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 717,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis[uuid:%s] is not Available, can\u0027t create baremetal2 instance from it",
    "en_US": "baremetal2 chassis[uuid:{0}] is not Available, can\u0027t create baremetal2 instance from it",
    "zh_CN": "Baremetal2机箱[uuid：{0}]不可用，无法从中创建Baremetal2实例",
    "arguments": [
      "msg.getChassisUuid()"
    ],
    "line": 722,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 chassis offering[uuid:%s] is not Enabled, can\u0027t create baremetal2 instance from it",
    "en_US": "baremetal2 chassis offering[uuid:{0}] is not Enabled, can\u0027t create baremetal2 instance from it",
    "zh_CN": "Baremetal2机箱产品[uuid：{0}]未启用，无法从中创建Baremetal2实例",
    "arguments": [
      "msg.getChassisOfferingUuid()"
    ],
    "line": 732,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is not Enabled, can\u0027t create baremetal2 instance from it",
    "en_US": "baremetal2 gateway[uuid:{0}] is not Enabled, can\u0027t create baremetal2 instance from it",
    "zh_CN": "Baremetal2网关[uuid：{0}]未启用，无法从中创建Baremetal2实例",
    "arguments": [
      "msg.getGatewayUuid()"
    ],
    "line": 743,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 gateway[uuid:%s] is not Connected, can\u0027t create baremetal2 instance from it",
    "en_US": "baremetal2 gateway[uuid:{0}] is not Connected, can\u0027t create baremetal2 instance from it",
    "zh_CN": "Baremetal2网关[uuid：{0}]未连接，无法从中创建Baremetal2实例",
    "arguments": [
      "msg.getGatewayUuid()"
    ],
    "line": 748,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "image cannot be empty unless chassis is in direct mode",
    "en_US": "image cannot be empty unless chassis is in direct mode",
    "zh_CN": "除非机箱处于直接模式，否则镜像不能为空",
    "arguments": [],
    "line": 780,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "direct mode not support choose image",
    "en_US": "direct mode not support choose image",
    "zh_CN": "直接模式不支持选择镜像",
    "arguments": [],
    "line": 787,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] does not exist",
    "en_US": "image[uuid:{0}] does not exist",
    "zh_CN": "镜像[uuid：{0}]不存在",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 794,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "Chassis disk[%s] not have enough capacity for image[%s]",
    "en_US": "Chassis disk[{0}] not have enough capacity for image[{1}]",
    "zh_CN": "机箱磁盘[{0}]没有足够的容量用于镜像[{1}]",
    "arguments": [
      "disk.getUuid()",
      "image.getUuid()"
    ],
    "line": 800,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Enabled, can\u0027t create baremetal2 instance from it",
    "en_US": "image[uuid:{0}] is not Enabled, can\u0027t create baremetal2 instance from it",
    "zh_CN": "镜像[uuid：{0}]未启用，无法从中创建BareMetal2实例",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 805,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Ready, can\u0027t create baremetal2 instance from it",
    "en_US": "image[uuid:{0}] is not Ready, can\u0027t create baremetal2 instance from it",
    "zh_CN": "镜像[uuid：{0}]未就绪，无法从中创建BareMetal2实例",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 810,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of mediaType: %s, only RootVolumeTemplate can be used to create baremetal2 instance",
    "en_US": "image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate can be used to create baremetal2 instance",
    "zh_CN": "镜像[uuid：{0}]的媒体类型为：{1}，只有RootVolumeTemplate可用于创建BareMetal2实例",
    "arguments": [
      "msg.getImageUuid()",
      "image.getMediaType()"
    ],
    "line": 815,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of format: %s, only %s can be used to create baremetal2 instance",
    "en_US": "image[uuid:{0}] is of format: {1}, only {2} can be used to create baremetal2 instance",
    "zh_CN": "镜像[uuid：{0}]的格式为：{1}，只有{2}可用于创建BareMetal2实例",
    "arguments": [
      "image.getFormat()",
      "BareMetal2InstanceConstant.IMAGE_FORMAT_FOR_BM"
    ],
    "line": 820,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not baremetal2 image, can\u0027t create baremetal2 instance from it",
    "en_US": "image[uuid:{0}] is not baremetal2 image, can\u0027t create baremetal2 instance from it",
    "zh_CN": "镜像[uuid：{0}]不是BareMetal2镜像，无法从中创建BareMetal2实例",
    "arguments": [
      "image.getUuid()"
    ],
    "line": 826,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "only image with boot mode %s is supported to create baremetal2 instance",
    "en_US": "only image with boot mode {0} is supported to create baremetal2 instance",
    "zh_CN": "仅支持引导模式为{0}的镜像来创建BareMetal2实例",
    "arguments": [
      "BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE"
    ],
    "line": 832,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "different boot mode between the image and chassis/offering",
    "en_US": "different boot mode between the image and chassis/offering",
    "zh_CN": "镜像和机箱/产品之间的引导模式不同",
    "arguments": [],
    "line": 841,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "the architecture of baremetal2 cluster[arch:%s] and image[arch:%s] don\u0027t match",
    "en_US": "the architecture of baremetal2 cluster[arch:{0}] and image[arch:{1}] don\u0027t match",
    "zh_CN": "BareMetal2群集[arch：{0}]的体系结构与镜像[arch：{1}]不匹配",
    "arguments": [
      "clusterArchitecture",
      "image.getArchitecture()"
    ],
    "line": 851,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "not all disk offerings[uuids:%s] are Enabled, can not create baremetal2 instance from them",
    "en_US": "not all disk offerings[uuids:{0}] are Enabled, can not create baremetal2 instance from them",
    "zh_CN": "并非所有磁盘产品[uuid：{0}]都已启用，无法从中创建BareMetal2实例",
    "arguments": [
      "msg.getDataDiskOfferingUuids()"
    ],
    "line": 863,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "cannot decide which zone the baremetal2 instance should be created in",
    "en_US": "cannot decide which zone the baremetal2 instance should be created in",
    "zh_CN": "无法确定应在哪个区域中创建BareMetal2实例",
    "arguments": [],
    "line": 890,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java"
  },
  {
    "raw": "baremetal2 instance[uuid:%s] is either not exist or not Connected, cannot change its password",
    "en_US": "baremetal2 instance[uuid:{0}] is either not exist or not Connected, cannot change its password",
    "zh_CN": "Baremetal2实例[uuid：{0}]不存在或未连接，无法更改其密码",
    "arguments": [],
    "line": 476,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceBase.java"
  },
  {
    "raw": "%s can only be created or deleted",
    "en_US": "{0} can only be created or deleted",
    "zh_CN": "只能创建或删除{0}",
    "arguments": [
      "releaseTag"
    ],
    "line": 386,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java"
  },
  {
    "raw": "%s can only be created or deleted when the baremetal2 instance is Running",
    "en_US": "{0} can only be created or deleted when the baremetal2 instance is Running",
    "zh_CN": "只能在运行BareMetal2实例时创建或删除{0}",
    "arguments": [
      "releaseTag"
    ],
    "line": 397,
    "fileName": "src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java"
  },
  {
    "raw": "there already exists a baremetal2 provision network with dhcpInterface \u003d %s, dhcpRangeStartIp \u003d %s, dhcpRangeEndIp \u003d %s, dhcpRangeNetmask \u003d %s, dhcpRangeGateway \u003d %s",
    "en_US": "there already exists a baremetal2 provision network with dhcpInterface \u003d {0}, dhcpRangeStartIp \u003d {1}, dhcpRangeEndIp \u003d {2}, dhcpRangeNetmask \u003d {3}, dhcpRangeGateway \u003d {4}",
    "zh_CN": "已存在DHCPINTERFACE\u003d{0}、DHCPRANGESTARTIP\u003d{1}、DHCPRANGEENDIP\u003d{2}、DhcpRangeNetMask\u003d{3}、DhcpRangeGateway\u003d{4}的BareMetal2配置网络",
    "arguments": [
      "dhcpInterface",
      "dhcpRangeStartIp",
      "dhcpRangeEndIp",
      "dhcpRangeNetmask",
      "dhcpRangeGateway"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot update baremetal2 provision network[uuid:%s] dhcp configuration when there are instances depending on it",
    "en_US": "cannot update baremetal2 provision network[uuid:{0}] dhcp configuration when there are instances depending on it",
    "zh_CN": "当有实例依赖于网络[uuid：{0}]DHCP配置时，无法更新该配置",
    "arguments": [
      "msg.getNetworkUuid()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "baremetal2 provision network dhcp range netmask %s is invalid",
    "en_US": "baremetal2 provision network dhcp range netmask {0} is invalid",
    "zh_CN": "Baremetal2设置网络DHCP范围网络掩码{0}无效",
    "arguments": [
      "netmask"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "baremetal2 provision network start ip %s and stop ip %s do not belong to the same subnet",
    "en_US": "baremetal2 provision network start ip {0} and stop ip {1} do not belong to the same subnet",
    "zh_CN": "Baremetal2配置网络启动IP{0}和停止IP{1}不属于同一子网",
    "arguments": [
      "begin",
      "end"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot delete baremetal2 provision network[uuid:%s] when there are instances depending on it",
    "en_US": "cannot delete baremetal2 provision network[uuid:{0}] when there are instances depending on it",
    "zh_CN": "有实例依赖于BareMetal2配置网络[uuid：{0}]时，无法删除该网络",
    "arguments": [
      "msg.getNetworkUuid()"
    ],
    "line": 157,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot attach baremetal2 provision network[uuid:%s] to non-baremetal2 cluster[uuid:%s]",
    "en_US": "cannot attach baremetal2 provision network[uuid:{0}] to non-baremetal2 cluster[uuid:{1}]",
    "zh_CN": "无法将BareMetal2设置网络[uuid：{0}]连接到非BareMetal2群集[uuid：{1}]",
    "arguments": [
      "msg.getNetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 171,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "baremetal2 provision network[uuid:%s] is already attached to cluster[uuid:%s]",
    "en_US": "baremetal2 provision network[uuid:{0}] is already attached to cluster[uuid:{1}]",
    "zh_CN": "Baremetal2配置网络[uuid：{0}]已连接到群集[uuid：{1}]",
    "arguments": [
      "msg.getNetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 182,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot attach baremetal2 provision network[uuid:%s] to cluster[uuid:%s] because the cluster already have one",
    "en_US": "cannot attach baremetal2 provision network[uuid:{0}] to cluster[uuid:{1}] because the cluster already have one",
    "zh_CN": "无法将BareMetal2设置网络[uuid：{0}]附加到群集[uuid：{1}]，因为该群集已有一个网络",
    "arguments": [
      "msg.getNetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 188,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot attach baremetal2 provision network[uuid:%s] to cluster[uuid:%s] because they are not in the same zone",
    "en_US": "cannot attach baremetal2 provision network[uuid:{0}] to cluster[uuid:{1}] because they are not in the same zone",
    "zh_CN": "无法将BareMetal2配置网络[uuid：{0}]附加到群集[uuid：{1}]，因为它们不在同一区域中",
    "arguments": [
      "msg.getNetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot attach baremetal2 provision network[uuid:%s] to cluster[uuid:%s], because we need to make sure that every gateway attached to the clusters that have the same provision network attached",
    "en_US": "cannot attach baremetal2 provision network[uuid:{0}] to cluster[uuid:{1}], because we need to make sure that every gateway attached to the clusters that have the same provision network attached",
    "zh_CN": "无法将BareMetal2配置网络[uuid：{0}]连接到群集[uuid：{1}]，因为我们需要确保连接到具有相同配置网络的群集的每个网关",
    "arguments": [
      "msg.getNetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 219,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "provision network should not have the same interface name with l2 networks that are already attached to the cluster",
    "en_US": "provision network should not have the same interface name with l2 networks that are already attached to the cluster",
    "zh_CN": "设置网络不应与已连接到群集的二层网络具有相同的接口名称",
    "arguments": [],
    "line": 241,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot detach baremetal2 provision network[uuid:%s] when there are running instances depending on it",
    "en_US": "cannot detach baremetal2 provision network[uuid:{0}] when there are running instances depending on it",
    "zh_CN": "存在依赖于Baremetal2配置网络[uuid：{0}]的正在运行的实例时，无法分离该网络",
    "arguments": [
      "msg.getNetworkUuid()"
    ],
    "line": 251,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "networkUuids is empty",
    "en_US": "networkUuids is empty",
    "zh_CN": "网络uuid为空",
    "arguments": [],
    "line": 258,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "not all baremetal2 provision networks exist in %s",
    "en_US": "not all baremetal2 provision networks exist in {0}",
    "zh_CN": "{0}中并不存在所有BareMetal2配置网络",
    "arguments": [
      "msg.getNetworkUuids()"
    ],
    "line": 265,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java"
  },
  {
    "raw": "failed to prepare provision network[uuid:%s] in gateway[uuid:%s]: %s",
    "en_US": "failed to prepare provision network[uuid:{0}] in gateway[uuid:{1}]: {2}",
    "zh_CN": "无法准备设置网络[uuid：{0}]（在网关[uuid：{1}]中）：{2}",
    "arguments": [
      "networkUuid",
      "gatewayUuid",
      "reply.getError()"
    ],
    "line": 496,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java"
  },
  {
    "raw": "failed to update provision network[uuid:%s] in gateway[uuid:%s]: %s",
    "en_US": "failed to update provision network[uuid:{0}] in gateway[uuid:{1}]: {2}",
    "zh_CN": "无法更新设置网络[uuid：{0}]（在网关[uuid：{1}]中）：{2}",
    "arguments": [
      "networkUuid",
      "gatewayUuid",
      "reply.getError()"
    ],
    "line": 308,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java"
  },
  {
    "raw": "failed to allocate ip from baremetal2 provision network[uuid:%s]",
    "en_US": "failed to allocate ip from baremetal2 provision network[uuid:{0}]",
    "zh_CN": "无法从BareMetal2配置网络[uuid：{0}]分配IP",
    "arguments": [
      "msg.getNetworkUuid()"
    ],
    "line": 650,
    "fileName": "src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java"
  },
  {
    "raw": "billing is disabled",
    "en_US": "billing is disabled",
    "zh_CN": "已禁用计费",
    "arguments": [],
    "line": 73,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "the start date must be greater than the end date",
    "en_US": "the start date must be greater than the end date",
    "zh_CN": "开始时间必须早于结束时间",
    "arguments": [],
    "line": 120,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "resourceType and resourceUuid cannot be empty at the same time",
    "en_US": "resourceType and resourceUuid cannot be empty at the same time",
    "zh_CN": "ResourceType和Resourceuuid不能同时为空",
    "arguments": [],
    "line": 124,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "the minimal resource unit is megabyte, cannot be byte",
    "en_US": "the minimal resource unit is megabyte, cannot be byte",
    "zh_CN": "资源的最小单位必须为MB，而不是byte",
    "arguments": [],
    "line": 244,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "price must be 0 and 999999999.99",
    "en_US": "price must be 0 and 999999999.99",
    "zh_CN": "价格必须为0和999999999.99",
    "arguments": [],
    "line": 252,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "gpu price must be bound to gpu uuid empty",
    "en_US": "gpu price must be bound to gpu uuid empty",
    "zh_CN": "GPU类型的价格必须绑定一个GPU设备",
    "arguments": [],
    "line": 259,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "gpu price must be bound to gpu uuid %s",
    "en_US": "gpu price must be bound to gpu uuid {0}",
    "zh_CN": "GPU类型的价格必须绑定一个正确的GPU设备{0}",
    "arguments": [
      "price.getSystemTags()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "resourceName[%s] is invalid",
    "en_US": "resourceName[{0}] is invalid",
    "zh_CN": "资源名称[{0}]无效",
    "arguments": [
      "resourceName"
    ],
    "line": 226,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "The account[uuid\u003d%s] has attach price table",
    "en_US": "The account[uuid\u003d{0}] has attach price table",
    "zh_CN": "帐户[uuid\u003d{0}]具有附加价格表",
    "arguments": [
      "msg.getAccountUuid()"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "This priceTable[uuid\u003d%s] is not allowed to delete",
    "en_US": "This priceTable[uuid\u003d{0}] is not allowed to delete",
    "zh_CN": "不允许删除此价格表[uuid\u003d{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 284,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "accountUuid/tableUuid only one of them is allowed to be set",
    "en_US": "accountUuid/tableUuid only one of them is allowed to be set",
    "zh_CN": "Accountuuid/Tableuuid只允许设置其中一个",
    "arguments": [],
    "line": 298,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong is not allowed to be negative",
    "en_US": "endDateInLong is not allowed to be negative",
    "zh_CN": "EndDateInLong不允许为负数",
    "arguments": [],
    "line": 304,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong and setEndDateInLongBaseOnCurrentTime are not allowed to set at the same time",
    "en_US": "endDateInLong and setEndDateInLongBaseOnCurrentTime are not allowed to set at the same time",
    "zh_CN": "不允许同时设置EndDateInLong和SetEndDateInLongBaseOnCurrentTime",
    "arguments": [],
    "line": 308,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong is set, no modification allowed",
    "en_US": "endDateInLong is set, no modification allowed",
    "zh_CN": "EndDateInLong已设置，不允许修改",
    "arguments": [],
    "line": 321,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "endDateInLong cannot be earlier than dateInLong",
    "en_US": "endDateInLong cannot be earlier than dateInLong",
    "zh_CN": "EndDateInlong不能早于DateInlong",
    "arguments": [],
    "line": 329,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "billing is enable, This operation is only allowed in the disabled state",
    "en_US": "billing is enable, This operation is only allowed in the disabled state",
    "zh_CN": "计费已启用，只有在禁用状态下才能执行此操作",
    "arguments": [],
    "line": 336,
    "fileName": "src/main/java/org/zstack/billing/BillingApiInterceptor.java"
  },
  {
    "raw": "priceKeyName is null",
    "en_US": "priceKeyName is null",
    "zh_CN": "PriceKeyName为空",
    "arguments": [],
    "line": 451,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "dateInLong is less than %s",
    "en_US": "dateInLong is less than {0}",
    "zh_CN": "DateInLong小于{0}",
    "arguments": [
      "currentPriceVO.getDateInLong()"
    ],
    "line": 1084,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "please set the correct priceUserConfig, for example: priceUserConfig:{\\nrootVolume:{\\npriceKeyName:\\\"priceKeyName\\\"}}",
    "en_US": "please set the correct priceUserConfig, for example: priceUserConfig:{\\nrootVolume:{\\npriceKeyName:\\\"priceKeyName\\\"}}",
    "zh_CN": "请设置正确的priceUserConfig，例如：priceUserConfig：{\\nRootVolume：{\\nPriceKeyName：\\“ priceKeyName\\”}}",
    "arguments": [],
    "line": 3090,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "please set the correct priceUserConfig, for example: priceUserConfig:{\\nvolume:{\\npriceKeyName:\\\"priceKeyName\\\"}}",
    "en_US": "please set the correct priceUserConfig, for example: priceUserConfig:{\\nvolume:{\\npriceKeyName:\\\"priceKeyName\\\"}}",
    "zh_CN": "请设置正确的priceUserConfig，例如：priceUserConfig：{\\nVolume：{\\nPriceKeyName：\\“ priceKeyName\\”}}",
    "arguments": [],
    "line": 3105,
    "fileName": "src/main/java/org/zstack/billing/BillingManagerImpl.java"
  },
  {
    "raw": "unsupported billing resource type [%s]",
    "en_US": "unsupported billing resource type [{0}]",
    "zh_CN": "不支持的计费资源类型[{0}]",
    "arguments": [
      "resourceType"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/billing/ResourceSpendingHelper.java"
  },
  {
    "raw": "there is no such type[%s] in CAS",
    "en_US": "there is no such type[{0}] in CAS",
    "zh_CN": "CAS中没有此类型[{0}]",
    "arguments": [
      "type"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/cas/CasInterceptor.java"
  },
  {
    "raw": "wrong virtual ID[name:%s], not existing or wrong password",
    "en_US": "wrong virtual ID[name:{0}], not existing or wrong password",
    "zh_CN": "错误的virtual ID[名称:{0}], 密码不存在或者密码错误",
    "arguments": [
      "loginContext.getUsername()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/cas/CasLoginBackend.java"
  },
  {
    "raw": "missing property of cas driver",
    "en_US": "missing property of cas driver",
    "zh_CN": "缺少CAS驱动程序的属性",
    "arguments": [],
    "line": 57,
    "fileName": "src/main/java/org/zstack/cas/CasLoginBackend.java"
  },
  {
    "raw": "Unsupported cas driver: %s",
    "en_US": "Unsupported cas driver: {0}",
    "zh_CN": "不支持的CAS驱动程序：{0}",
    "arguments": [
      "casDriverType"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/cas/CasLoginBackend.java"
  },
  {
    "raw": "cannot find such ResourceStackVO by uuid [%s]",
    "en_US": "cannot find such ResourceStackVO by uuid [{0}]",
    "zh_CN": "无法通过uuid[{0}]找到此类ResourceStackVO",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "restart resource stack only support %s status!",
    "en_US": "restart resource stack only support {0} status!",
    "zh_CN": "重新启动资源堆栈仅支持{0}状态！",
    "arguments": [
      "validStatus"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "templateContent and uuid mustn\u0027t both be empty or both be set!",
    "en_US": "templateContent and uuid mustn\u0027t both be empty or both be set!",
    "zh_CN": "TemplateContent和uuid不能同时为空或同时设置！",
    "arguments": [],
    "line": 173,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "expect %s status!",
    "en_US": "expect {0} status!",
    "zh_CN": "预期{0}状态！",
    "arguments": [
      "validStatus"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "templateContent and templateUuid mustn\u0027t both be empty!",
    "en_US": "templateContent and templateUuid mustn\u0027t both be empty!",
    "zh_CN": "TemplateContent和TemplateUuid不能同时为空！",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "templateContent and url mustn\u0027t both be empty or both be set!",
    "en_US": "templateContent and url mustn\u0027t both be empty or both be set!",
    "zh_CN": "TemplateContent和URL不能同时为空或同时设置！",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "only admin could enable/disable system StackTemplate",
    "en_US": "only admin could enable/disable system StackTemplate",
    "zh_CN": "只有管理员才能启用/禁用系统堆栈模板",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java"
  },
  {
    "raw": "cannot delete or update system template: %s",
    "en_US": "cannot delete or update system template: {0}",
    "zh_CN": "无法删除或更新系统模板：{0}",
    "arguments": [
      "vo.getName()"
    ],
    "line": 1032,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "no stackUuid found for the vmInstance[%s]",
    "en_US": "no stackUuid found for the vmInstance[{0}]",
    "zh_CN": "找不到VMInstance[{0}]stackUuid",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 322,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "ResourceStackVO: [%s] has been deleted...",
    "en_US": "ResourceStackVO: [{0}] has been deleted...",
    "zh_CN": "ResourceStackVO：[{0}]已被删除..",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 612,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "ResourceStackVO [%s] already been deleted!",
    "en_US": "ResourceStackVO [{0}] already been deleted!",
    "zh_CN": "ResourceStackVO[{0}]已被删除！",
    "arguments": [
      "uuid"
    ],
    "line": 642,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "templateContent must be set!",
    "en_US": "templateContent must be set!",
    "zh_CN": "必须设置TemplateContent！",
    "arguments": [],
    "line": 871,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "template [%s] chosen is disabled",
    "en_US": "template [{0}] chosen is disabled",
    "zh_CN": "所选模板[{0}]已禁用",
    "arguments": [
      "template.getUuid()"
    ],
    "line": 865,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "cannot find parameters for %s, which is %s type, please check parameters",
    "en_US": "cannot find parameters for {0}, which is {1} type, please check parameters",
    "zh_CN": "找不到{1}类型的{0}的参数，请检查参数",
    "arguments": [
      "p.getParamName()",
      "p.getResourceType()"
    ],
    "line": 955,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "StackTemplateVO has been deleted...",
    "en_US": "StackTemplateVO has been deleted...",
    "zh_CN": "StackTemplateVo已被删除..",
    "arguments": [],
    "line": 1025,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "content must be set by templateContent or url!",
    "en_US": "content must be set by templateContent or url!",
    "zh_CN": "必须通过TemplateContent或URL设置内容！",
    "arguments": [],
    "line": 1048,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "get null content input",
    "en_US": "get null content input",
    "zh_CN": "获取空内容输入",
    "arguments": [],
    "line": 1066,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "invalid cloudformation template version: %s",
    "en_US": "invalid cloudformation template version: {0}",
    "zh_CN": "CloudFormation模板版本无效：{0}",
    "arguments": [
      "result.getTemplateVersion()"
    ],
    "line": 1073,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "StackTemplateVO: [%s] has been deleted...",
    "en_US": "StackTemplateVO: [{0}] has been deleted...",
    "zh_CN": "StackTemplateVo：[{0}]已删除..",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1087,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "[cloudformation] filterName must be cloudformation:true or cloudformation:false",
    "en_US": "[cloudformation] filterName must be cloudformation:true or cloudformation:false",
    "zh_CN": "[cloudFormation]FilterName必须为cloudFormation：true或cloudFormat：false",
    "arguments": [],
    "line": 1385,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java"
  },
  {
    "raw": "get null element in template content",
    "en_US": "get null element in template content",
    "zh_CN": "获取模板内容中的空元素",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationUtils.java"
  },
  {
    "raw": "template must contain [ZStackTemplateFormatVersion]",
    "en_US": "template must contain [ZStackTemplateFormatVersion]",
    "zh_CN": "模板必须包含[ZStackTemplateFormatVersion]",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationUtils.java"
  },
  {
    "raw": "invalid ZStackTemplateFormatVersion: [%s, expected: %s]",
    "en_US": "invalid ZStackTemplateFormatVersion: [{0}, expected: {1}]",
    "zh_CN": "无效的ZStackTemplateFormatVersion：[{0}，应为：{1}]",
    "arguments": [
      "result.getTemplateVersion()",
      "CloudFormationConstant.version"
    ],
    "line": 38,
    "fileName": "src/main/java/org/zstack/cloudformation/CloudFormationUtils.java"
  },
  {
    "raw": "cannot find l2_bridge_name of l2[%s] from systemTag",
    "en_US": "cannot find l2_bridge_name of l2[{0}] from systemTag",
    "zh_CN": "在系统标记中找不到L2[{0}]的L 2_Bridge_名称",
    "arguments": [
      "l2Uuid"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java"
  },
  {
    "raw": "cannot find default ip on vm[%s]",
    "en_US": "cannot find default ip on vm[{0}]",
    "zh_CN": "在云主机[{0}]上找不到默认IP",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 135,
    "fileName": "src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java"
  },
  {
    "raw": "cannot find resource of properties set before!",
    "en_US": "cannot find resource of properties set before!",
    "zh_CN": "找不到以前设置的属性的资源！",
    "arguments": [],
    "line": 97,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "invalid dynamic variables, which must contained ${: %s",
    "en_US": "invalid dynamic variables, which must contained ${: {0}",
    "zh_CN": "动态变量无效，必须包含${：{0}",
    "arguments": [
      "value"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "verb must contain \u0027::\u0027!",
    "en_US": "verb must contain \u0027::\u0027!",
    "zh_CN": "谓词必须包含“：:”！",
    "arguments": [],
    "line": 174,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "need List for resource [%s] output here, but got %s.",
    "en_US": "need List for resource [{0}] output here, but got {1}.",
    "zh_CN": "此处需要资源[{0}]输出的列表，但获得了{1}。",
    "arguments": [
      "t[0]",
      "last.getClass().getName()"
    ],
    "line": 218,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "Some actions are invalid",
    "en_US": "Some actions are invalid",
    "zh_CN": "某些操作无效",
    "arguments": [],
    "line": 380,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java"
  },
  {
    "raw": "no root element found, please check your cfn formation!",
    "en_US": "no root element found, please check your cfn formation!",
    "zh_CN": "找不到根元素，请检查您的CFN结构！",
    "arguments": [],
    "line": 253,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java"
  },
  {
    "raw": "Wrong json format, causes: %s",
    "en_US": "Wrong json format, causes: {0}",
    "zh_CN": "错误的JSON格式，导致：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java"
  },
  {
    "raw": "CfnRootDecoder\u0027s weight must between 0-100, 0 means decode first, default is 50",
    "en_US": "CfnRootDecoder\u0027s weight must between 0-100, 0 means decode first, default is 50",
    "zh_CN": "cfnRootDecoder的权重必须介于0-100之间，0表示先解码，默认值为50",
    "arguments": [],
    "line": 14,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/AbstractCfnRootDecoder.java"
  },
  {
    "raw": "Condition body cannot support json null or array!",
    "en_US": "Condition body cannot support json null or array!",
    "zh_CN": "条件体不支持JSON NULL或数组！",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "Only support ZStack Template Functions in \u0027Condition\u0027 field!",
    "en_US": "Only support ZStack Template Functions in \u0027Condition\u0027 field!",
    "zh_CN": "仅支持“条件”字段中的ZStack模板函数！",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "Value must be boolean in \u0027Condition\u0027 field",
    "en_US": "Value must be boolean in \u0027Condition\u0027 field",
    "zh_CN": "“条件”字段中的值必须为布尔值",
    "arguments": [],
    "line": 37,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "Condition key: %s only support 1 element in the json object of value, but got %d elements!",
    "en_US": "Condition key: {0} only support 1 element in the json object of value, but got {1} elements!",
    "zh_CN": "条件键：{0}在值为的JSON对象中只支持1个元素，但得到了{1}个元素！",
    "arguments": [
      "key",
      "es.size()"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java"
  },
  {
    "raw": "cannot find such msg: %s for create",
    "en_US": "cannot find such msg: {0} for create",
    "zh_CN": "无法为创建找到这样的消息：{0}",
    "arguments": [
      "msg"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/DecoderUtils.java"
  },
  {
    "raw": "Mapping value body cannot support null!",
    "en_US": "Mapping value body cannot support null!",
    "zh_CN": "映射值正文不能支持Null！",
    "arguments": [],
    "line": 56,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java"
  },
  {
    "raw": "Mapping value body cannot support json array!",
    "en_US": "Mapping value body cannot support json array!",
    "zh_CN": "映射值主体不支持JSON数组！",
    "arguments": [],
    "line": 54,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java"
  },
  {
    "raw": "mappingName must be found in result, or it is invalid cfn json.",
    "en_US": "mappingName must be found in result, or it is invalid cfn json.",
    "zh_CN": "必须在结果中找到MappingName，否则它是无效的CFN JSON。",
    "arguments": [],
    "line": 66,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java"
  },
  {
    "raw": "Mapping body cannot support json null!",
    "en_US": "Mapping body cannot support json null!",
    "zh_CN": "映射体不支持JSON NULL！",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java"
  },
  {
    "raw": "Mapping body cannot support non map value!",
    "en_US": "Mapping body cannot support non map value!",
    "zh_CN": "映射体不支持非映射值！",
    "arguments": [],
    "line": 82,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java"
  },
  {
    "raw": "Output body cannot support json null!",
    "en_US": "Output body cannot support json null!",
    "zh_CN": "输出正文不支持JSON NULL！",
    "arguments": [],
    "line": 57,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java"
  },
  {
    "raw": "Description in Outputs must be String type!",
    "en_US": "Description in Outputs must be String type!",
    "zh_CN": "输出中的描述必须是字符串类型！",
    "arguments": [],
    "line": 70,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java"
  },
  {
    "raw": "paramName must be found in result, or it is invalid cfn json.",
    "en_US": "paramName must be found in result, or it is invalid cfn json.",
    "zh_CN": "必须在结果中找到ParamName，否则它是无效的CFN JSON。",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java"
  },
  {
    "raw": "Parameters root body must be json object!",
    "en_US": "Parameters root body must be json object!",
    "zh_CN": "参数根体必须是JSON对象！",
    "arguments": [],
    "line": 53,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/PreParameterDecoder.java"
  },
  {
    "raw": "Mappings root body must be json object!",
    "en_US": "Mappings root body must be json object!",
    "zh_CN": "映射根体必须是JSON对象！",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "resourceName must be found in result, or it is invalid cfn json.",
    "en_US": "resourceName must be found in result, or it is invalid cfn json.",
    "zh_CN": "ResourceName必须在结果中找到，或者它是无效的CFN JSON。",
    "arguments": [],
    "line": 112,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Parameters body cannot support null!",
    "en_US": "Parameters body cannot support null!",
    "zh_CN": "参数体不支持NULL！",
    "arguments": [],
    "line": 123,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource value body cannot support null!",
    "en_US": "Resource value body cannot support null!",
    "zh_CN": "资源值体不能支持null！",
    "arguments": [],
    "line": 68,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource %s cannot depends on itself, please check %s in Resource [%s]",
    "en_US": "Resource {0} cannot depends on itself, please check {1} in Resource [{2}]",
    "zh_CN": "资源{0}不能依赖自身，请检查资源[{2}]中的{1}",
    "arguments": [
      "resource.getResourceName()",
      "e.getKey()",
      "resource.getResourceName()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource root body must be json object!",
    "en_US": "Resource root body must be json object!",
    "zh_CN": "资源根体必须是JSON对象！",
    "arguments": [],
    "line": 254,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "Resource Type must be String!",
    "en_US": "Resource Type must be String!",
    "zh_CN": "资源类型必须是字符串！",
    "arguments": [],
    "line": 216,
    "fileName": "src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java"
  },
  {
    "raw": "cannot find condition[%s] in \u0027Conditions\u0027",
    "en_US": "cannot find condition[{0}] in \u0027Conditions\u0027",
    "zh_CN": "在“条件”中找不到条件[{0}]",
    "arguments": [
      "cond"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/IfTemplateFunction.java"
  },
  {
    "raw": "expect \u0027true\u0027, \u0027false\u0027 for the object, but got %s",
    "en_US": "expect \u0027true\u0027, \u0027false\u0027 for the object, but got {0}",
    "zh_CN": "该对象应为“ true ”和“ false ”，但得到了{0}",
    "arguments": [
      "e.getAsString()"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java"
  },
  {
    "raw": "expect \u0027true\u0027, \u0027false\u0027 or an other Condition, current Conditions include: %s, but got %s",
    "en_US": "expect \u0027true\u0027, \u0027false\u0027 or an other Condition, current Conditions include: {0}, but got {1}",
    "zh_CN": "应为“ true ”、“ false ”或其他条件，当前条件包括：{0}，但得到了{1}",
    "arguments": [
      "keys",
      "e.getAsString()"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java"
  },
  {
    "raw": "Fn::Select out of range, please check your json file!",
    "en_US": "Fn::Select out of range, please check your json file!",
    "zh_CN": "FN：:选择超出范围，请检查您的JSON文件！",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/SelectTemplateFunction.java"
  },
  {
    "raw": "only functions can in Function, but found %s",
    "en_US": "only functions can in Function, but found {0}",
    "zh_CN": "只能在函数中使用函数，但找到了{0}",
    "arguments": [
      "e.getKey()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java"
  },
  {
    "raw": "element is null!",
    "en_US": "element is null!",
    "zh_CN": "元素为空！",
    "arguments": [],
    "line": 90,
    "fileName": "src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java"
  },
  {
    "raw": "duplicate nic params",
    "en_US": "duplicate nic params",
    "zh_CN": "复制NIC参数",
    "arguments": [],
    "line": 26,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "l3NetworkUuid of vm nic can not be null",
    "en_US": "l3NetworkUuid of vm nic can not be null",
    "zh_CN": "云主机NIC的L3Networkuuid不能为空",
    "arguments": [],
    "line": 32,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "l3NetworkUuid of vm nic is not in l3[%s]",
    "en_US": "l3NetworkUuid of vm nic is not in l3[{0}]",
    "zh_CN": "云主机NIC的l3NetworkUuid不在L3[{0}]中",
    "arguments": [
      "l3Uuids"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "outbound bandwidth[%d] of vm nic is out of [8192, 32212254720]",
    "en_US": "outbound bandwidth[{0}] of vm nic is out of [8192, 32212254720]",
    "zh_CN": "VM NIC的出站带宽[{0}]超出[8192，32212254720]",
    "arguments": [
      "nic.getOutboundBandwidth()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "inbound bandwidth[%d] of vm nic is out of [8192, 32212254720]",
    "en_US": "inbound bandwidth[{0}] of vm nic is out of [8192, 32212254720]",
    "zh_CN": "VM NIC的入站带宽[{0}]超出[8192，32212254720]",
    "arguments": [
      "nic.getInboundBandwidth()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "multi queue num[%d] of vm nic is out of [1,256]",
    "en_US": "multi queue num[{0}] of vm nic is out of [1,256]",
    "zh_CN": "VM NIC的多队列数[{0}]超出[1，256]",
    "arguments": [
      "nic.getMultiQueueNum()"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "vm nic of l3[uuid:%s] state[%s] is not %s or %s ",
    "en_US": "vm nic of l3[uuid:{0}] state[{1}] is not {2} or {3} ",
    "zh_CN": "L3[uuid：{0}]状态[{1}]的VM NIC不是{2}或{3}",
    "arguments": [
      "nic.getL3NetworkUuid()",
      "nic.getState()",
      "VmNicState.enable.toString()",
      "VmNicState.disable.toString()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "vm nic driver %s not support yet",
    "en_US": "vm nic driver {0} not support yet",
    "zh_CN": "VM NIC驱动程序{0}尚不支持",
    "arguments": [
      "driverType"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/compute/VmNicUtils.java"
  },
  {
    "raw": "VM [uuid: %s] has already been added to affinityGroup [uuid: %s]",
    "en_US": "VM [uuid: {0}] has already been added to affinityGroup [uuid: {1}]",
    "zh_CN": "VM[uuid:{0}已经被添加到亲和组[uuid:{1}]中。]",
    "arguments": [
      "resourceUuid",
      "affinityGroupUuid"
    ],
    "line": 420,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "There are other VMs on this host [uuid: %s] belonging to same affinityGroup [%s]",
    "en_US": "There are other VMs on this host [uuid: {0}] belonging to same affinityGroup [{1}]",
    "zh_CN": "在物理机[uuid:{0}]上的云主机属于同一个亲和组中[{1}]",
    "arguments": [
      "hostUuid",
      "affinityGroupUuid"
    ],
    "line": 437,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "affinityGroup [uuid:%s] reserve host [uuid:%s] for vm [uuid: %s] failed",
    "en_US": "affinityGroup [uuid:{0}] reserve host [uuid:{1}] for vm [uuid: {2}] failed",
    "zh_CN": "亲和组[uuid:{0}]为云主机[uuid:{2}]预分配物理机资源[uuid:{1}]失败",
    "arguments": [
      "self.getUuid()",
      "host.getUuid()",
      "vmUuid"
    ],
    "line": 468,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "vm [uuid:%s] doesn\u0027t satisfy the affinityGroup [uuid:%s]",
    "en_US": "vm [uuid:{0}] doesn\u0027t satisfy the affinityGroup [uuid:{1}]",
    "zh_CN": "云主机[uuid:{1}]不满足亲和组[uuid:{2}]的要求",
    "arguments": [
      "inv.getResourceUuid()",
      "self.getUuid()"
    ],
    "line": 538,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java"
  },
  {
    "raw": "can not satisfied affinity group conditions",
    "en_US": "can not satisfied affinity group conditions",
    "zh_CN": "不能满足亲和组的条件",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupFilterFlow.java"
  },
  {
    "raw": "Vm can change its affinityGroup only in state [%s,%s], but vm is in state [%s]",
    "en_US": "Vm can change its affinityGroup only in state [{0},{1}], but vm is in state [{2}]",
    "zh_CN": "只有状态为[{0},{1}]的云主机可以改变亲和组，但是现在云主机的状态为[{2}]",
    "arguments": [
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Stopped.toString()",
      "state.toString()"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "Vm [uuid: %s] is already added to affinityGroup [uuid: %s]",
    "en_US": "Vm [uuid: {0}] is already added to affinityGroup [uuid: {1}]",
    "zh_CN": "云主机[uuid:{0}]已经被添加至亲和组[uuid:{1}]中",
    "arguments": [
      "msg.getUuid()",
      "agUuid"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "AffinityGroup [uuid: %s] does not existed",
    "en_US": "AffinityGroup [uuid: {0}] does not existed",
    "zh_CN": "亲和组[uuid:{0}]不存在",
    "arguments": [
      "affinityGroupUuid"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "Can not operate on affinity group created by system",
    "en_US": "Can not operate on affinity group created by system",
    "zh_CN": "不能对系统创建的亲和组进行操作",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "Can not operate on affinityGroup [uuid: %s] which is not enabled",
    "en_US": "Can not operate on affinityGroup [uuid: {0}] which is not enabled",
    "zh_CN": "不能对不是enabled状态的亲和组操作",
    "arguments": [
      "affinityGroupUuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java"
  },
  {
    "raw": "cannot find the affinity group[uuid:%s], it may have been deleted",
    "en_US": "cannot find the affinity group[uuid:{0}], it may have been deleted",
    "zh_CN": "未找到亲和组[uuid:{0}]，它可能已经被删除",
    "arguments": [
      "msg.getAffinityGroupUuid()"
    ],
    "line": 219,
    "fileName": "src/main/java/org/zstack/compute/affinityGroup/AffinityGroupManagerImpl.java"
  },
  {
    "raw": "no host found in clusters that has attached to L2Networks which have L3Networks%s",
    "en_US": "no host found in clusters that has attached to L2Networks which have L3Networks{0}",
    "zh_CN": "在连接到具有L3Networks{0}的L2Networks的群集中找不到物理机",
    "arguments": [
      "spec.getL3NetworkUuids()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/compute/allocator/AttachedL2NetworkAllocatorFlow.java"
  },
  {
    "raw": "no host found in clusters that have attached to primary storage %s",
    "en_US": "no host found in clusters that have attached to primary storage {0}",
    "zh_CN": "在已连接到主存储{0}的群集中找不到物理机",
    "arguments": [
      "psuuids"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/compute/allocator/AttachedPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "cannot find root volume of vm[uuid:%s]",
    "en_US": "cannot find root volume of vm[uuid:{0}]",
    "zh_CN": "找不到VM[uuid：{0}]的根卷",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "no host found in clusters which have attached to all primary storage %s where vm[uuid:%s]\u0027s volumes locate",
    "en_US": "no host found in clusters which have attached to all primary storage {0} where vm[uuid:{1}]\u0027s volumes locate",
    "zh_CN": "在已连接到VM[uuid：{1}]的卷所在的所有主存储{0}的群集中找不到物理机",
    "arguments": [
      "requiredPsUuids",
      "vm.getUuid()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "after rule out avoided host%s, there is no host left in candidates",
    "en_US": "after rule out avoided host{0}, there is no host left in candidates",
    "zh_CN": "在排除避免的物理机{0}后，候选物理机中没有剩余的物理机",
    "arguments": [
      "spec.getAvoidHostUuids()"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/compute/allocator/AvoidHostAllocatorFlow.java"
  },
  {
    "raw": "the backup storage[uuid:%s, type:%s] requires bound primary storage, however, the primary storage has not been added",
    "en_US": "the backup storage[uuid:{0}, type:{1}] requires bound primary storage, however, the primary storage has not been added",
    "zh_CN": "无法找到跟镜像服务器[uuid:{0}, type:{1}]配对的主存储。一些镜像服务器必须跟配对的主存储共同使用，例如Ceph镜像服务器监控节点只能搭配分布式存储使用。请检查你主存储的设置",
    "arguments": [
      "spec.getRequiredBackupStorageUuid()",
      "bsType"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "The image[uuid:%s] is on the backup storage[uuid:%s, type:%s] that requires to work with primary storage[uuids:%s],however, no host found suitable to work with those primary storage",
    "en_US": "The image[uuid:{0}] is on the backup storage[uuid:{1}, type:{2}] that requires to work with primary storage[uuids:{3}],however, no host found suitable to work with those primary storage",
    "zh_CN": "镜像[uuid:{0}]所在的镜像服务器[uuid:{1}, type:{2}]必须跟主存储[uuid:{3}]配对使用，但无法找到可以跟满足条件并可以访问该主存储的物理机",
    "arguments": [
      "spec.getImage().getUuid()",
      "spec.getRequiredBackupStorageUuid()",
      "type",
      "psUuids"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "The image[uuid:%s, name:%s] is on the backup storage[uuid:%s, type:%s] that requires to work with primary storage[types:%s],however, no host found suitable to work with those primary storage",
    "en_US": "The image[uuid:{0}, name:{1}] is on the backup storage[uuid:{2}, type:{3}] that requires to work with primary storage[types:{4}],however, no host found suitable to work with those primary storage",
    "zh_CN": "镜像[uuid:{0},name:{1}]所在的镜像服务器[uuid:{2}, type:{3}]必须跟主存储[uuid:{4}]一起使用，但无法找到可以跟满足条件并可以访问该主存储的物理机",
    "arguments": [
      "spec.getImage().getUuid()",
      "name",
      "spec.getRequiredBackupStorageUuid()",
      "spec.getImage().getType()",
      "possiblePrimaryStorageTypes"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "No host with %s found",
    "en_US": "No host with {0} found",
    "zh_CN": "找不到具有{0}的物理机",
    "arguments": [
      "args"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/compute/allocator/DesignatedHostAllocatorFlow.java"
  },
  {
    "raw": "after filtering, HostAllocatorFilterExtensionPoint[%s] returns zero candidate host, it means: %s",
    "en_US": "after filtering, HostAllocatorFilterExtensionPoint[{0}] returns zero candidate host, it means: {1}",
    "zh_CN": "过滤后，HostAllocatorFilterExtensionPoint[{0}]返回零候选物理机，表示：{1}",
    "arguments": [
      "filter.getClass().getSimpleName()",
      "filter.filterErrorReason()"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/compute/allocator/FilterFlow.java"
  },
  {
    "raw": "either volumeUuid or volumeSnapshotUuid must be set",
    "en_US": "either volumeUuid or volumeSnapshotUuid must be set",
    "zh_CN": "云盘uuid或者快照uuid必须被设置",
    "arguments": [],
    "line": 56,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true",
    "zh_CN": "区域uuid，集群uuid,物理机uuid必须有一个不为空，或者全部都填写",
    "arguments": [],
    "line": 75,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java"
  },
  {
    "raw": "no host having cpu[%s], memory[%s bytes] found",
    "en_US": "no host having cpu[{0}], memory[{1} bytes] found",
    "zh_CN": "未找到CPU为[{0}]、内存为[{1}字节]的物理机",
    "arguments": [
      "spec.getCpuCapacity()",
      "spec.getMemoryCapacity()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostCapacityAllocatorFlow.java"
  },
  {
    "raw": "no candidate host has version[%s]",
    "en_US": "no candidate host has version[{0}]",
    "zh_CN": "没有版本为[{0}]的候选物理机",
    "arguments": [
      "currentHostOs"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostOsVersionAllocatorFlow.java"
  },
  {
    "raw": "cannot find available primary storage[state: %s or %s, status: %s]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "en_US": "cannot find available primary storage[state: {0} or {1}, status: {2}]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "zh_CN": "找不到可用的主存储[状态：{0}或{1}，状态：{2}]。检查主存储的状态，并确保它们已连接到群集",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageState.Disabled",
      "PrimaryStorageStatus.Connected"
    ],
    "line": 248,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "cannot find available primary storage[state: %s, status: %s, available capacity %s bytes]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "en_US": "cannot find available primary storage[state: {0}, status: {1}, available capacity {2} bytes]. Check the state/status of primary storage and make sure they have been attached to clusters",
    "zh_CN": "找不到可用的主存储[状态：{0}，状态：{1}，可用容量为{2}字节]。检查主存储的状态，并确保它们已连接到群集",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "spec.getDiskSize()"
    ],
    "line": 244,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "[Host Allocation]: %s on host[uuid:%s]. try next one. %s",
    "en_US": "[Host Allocation]: {0} on host[uuid:{1}]. try next one. {2}",
    "zh_CN": "[物理机分配]：物理机[uuid：{1}]上的{0}。请尝试下一个。{2}",
    "arguments": [
      "e.getMessage()",
      "host.getUuid()",
      "e.getMessage()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostSortorChain.java"
  },
  {
    "raw": "no host having state\u003dEnabled status\u003dConnected hypervisorType\u003d%s found",
    "en_US": "no host having state\u003dEnabled status\u003dConnected hypervisorType\u003d{0} found",
    "zh_CN": "未找到状态为“已启用”、状态为“已连接”、管理程序类型为“{0}”的物理机",
    "arguments": [
      "spec.getHypervisorType()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no host having state\u003dEnabled status\u003dConnected found",
    "en_US": "no host having state\u003dEnabled status\u003dConnected found",
    "zh_CN": "未找到状态\u003d已启用、状态\u003d已连接的物理机",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no Enabled hosts found in the [%s] candidate hosts having the hypervisor type [%s]",
    "en_US": "no Enabled hosts found in the [{0}] candidate hosts having the hypervisor type [{1}]",
    "zh_CN": "在具有云主机监控程序类型[{1}]的[{0}]候选物理机中未找到已启用的物理机",
    "arguments": [
      "candidates.size()",
      "spec.getHypervisorType()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no Enabled hosts found in the [%s] candidate hosts",
    "en_US": "no Enabled hosts found in the [{0}] candidate hosts",
    "zh_CN": "在[{0}]个候选物理机中找不到已启用的物理机",
    "arguments": [
      "candidates.size()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "no Connected hosts found in the [%s] candidate hosts",
    "en_US": "no Connected hosts found in the [{0}] candidate hosts",
    "zh_CN": "在[{0}]个候选物理机中找不到已连接的物理机",
    "arguments": [
      "candidates.size()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is deleted on all backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is deleted on all backup storage",
    "zh_CN": "镜像[uuid:{0}, name:{1}]已经从所有镜像服务器上删除，无法执行相应操作",
    "arguments": [
      "spec.getImage().getUuid()",
      "spec.getImage().getName()"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java"
  },
  {
    "raw": "no host found in zones[uuids:%s] that attaches to backup storage where image[%s] is on",
    "en_US": "no host found in zones[uuids:{0}] that attaches to backup storage where image[{1}] is on",
    "zh_CN": "在区域[uuid：{0}]中找不到连接到镜像[{1}]所在的备份存储的物理机",
    "arguments": [
      "zoneUuids",
      "spec.getImage().getUuid()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java"
  },
  {
    "raw": "resource binding not support type %s yet",
    "en_US": "resource binding not support type {0} yet",
    "zh_CN": "资源绑定尚不支持类型{0}",
    "arguments": [
      "entry.getKey()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java"
  },
  {
    "raw": "no available host found with binded resource %s",
    "en_US": "no available host found with binded resource {0}",
    "zh_CN": "未找到具有绑定资源{0}的可用物理机",
    "arguments": [
      "resources"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java"
  },
  {
    "raw": "InstanceOfferingTagAllocatorExtensionPoint[%s] return zero candidate host",
    "en_US": "InstanceOfferingTagAllocatorExtensionPoint[{0}] return zero candidate host",
    "zh_CN": "InstanceOfferingTagAllocatorExtensionPoint[{0}]返回零个候选物理机",
    "arguments": [
      "extp.getClass().getName()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java"
  },
  {
    "raw": "DiskOfferingTagAllocatorExtensionPoint[%s] return zero candidate host",
    "en_US": "DiskOfferingTagAllocatorExtensionPoint[{0}] return zero candidate host",
    "zh_CN": "DiskOfferingTagAllocatorExtensionPoint[{0}]返回零候选物理机",
    "arguments": [
      "extp.getClass().getName()"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java"
  },
  {
    "raw": "cannot bind with interface configured with vtep ip",
    "en_US": "cannot bind with interface configured with vtep ip",
    "zh_CN": "无法与配置了VTEP IP的接口绑定",
    "arguments": [],
    "line": 108,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "invalid bonding name[%s], it must be shorter than [%s] characters",
    "en_US": "invalid bonding name[{0}], it must be shorter than [{1}] characters",
    "zh_CN": "绑定名称[{0}]无效，它必须少于[{1}]个字符",
    "arguments": [
      "bondingName",
      "HostNetworkBondingConstant.BONDING_NAME_MAX"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "invalid bonding name[%s], it must only contains letters, numbers and underscores",
    "en_US": "invalid bonding name[{0}], it must only contains letters, numbers and underscores",
    "zh_CN": "绑定名称[{0}]无效，它只能包含字母、数字和下划线",
    "arguments": [
      "bondingName"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "bonding card can not have occupied bondingName:[%s], which was already been used by host[%s].",
    "en_US": "bonding card can not have occupied bondingName:[{0}], which was already been used by host[{1}].",
    "zh_CN": "绑定卡不能占用BondingName：[{0}]，它已被物理机[{1}]使用。",
    "arguments": [
      "bondingName",
      "hostUuid"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "cannot bind with interface corresponding to the management network",
    "en_US": "cannot bind with interface corresponding to the management network",
    "zh_CN": "无法与管理网络对应的接口绑定",
    "arguments": [],
    "line": 103,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "bonding card can not have interfaces which is not on the same host[%s].",
    "en_US": "bonding card can not have interfaces which is not on the same host[{0}].",
    "zh_CN": "绑定卡不能具有不在同一物理机[{0}]上的接口。",
    "arguments": [
      "hostUuid"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "bonding card can not have occupied interfaces, which was already been used by host[%s].",
    "en_US": "bonding card can not have occupied interfaces, which was already been used by host[{0}].",
    "zh_CN": "绑定卡不能占用接口，该接口已被物理机[{0}]使用。",
    "arguments": [
      "hostUuid"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "bonding card can not have interfaces that has been used as a network bridge, which was already been used by host[%s].",
    "en_US": "bonding card can not have interfaces that has been used as a network bridge, which was already been used by host[{0}].",
    "zh_CN": "绑定卡不能具有已用作网桥的接口，该接口已被物理机[{0}]使用。",
    "arguments": [
      "hostUuid"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "bonding card can not have interface[%s] which have been sriov virtualized.",
    "en_US": "bonding card can not have interface[{0}] which have been sriov virtualized.",
    "zh_CN": "绑定卡不能具有已被SRIOV虚拟化的接口[{0}]。",
    "arguments": [
      "interfaceVO.getUuid()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "bonding card can not have interfaces with different speed, which is on the host[%s].",
    "en_US": "bonding card can not have interfaces with different speed, which is on the host[{0}].",
    "zh_CN": "绑定卡不能有不同速度的接口，在物理机[{0}]上。",
    "arguments": [
      "hostUuid"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "[%s] bonding card can not designate [%s], Only mode 802.3ad support specifying different xmit_hash_policys",
    "en_US": "[{0}] bonding card can not designate [{1}], Only mode 802.3ad support specifying different xmit_hash_policys",
    "zh_CN": "[{0}]绑定卡无法指定[{1}]，只有模式802.3ad支持指定不同的xmit_哈希_策略",
    "arguments": [
      "mode",
      "xmitHashPolicy"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "[%s] bonding can not have [%s] interfaces, it must be the number between[1~2].",
    "en_US": "[{0}] bonding can not have [{1}] interfaces, it must be the number between[1~2].",
    "zh_CN": "[{0}]绑定不能有[{1}]个接口，其数量必须在[1~2]之间。",
    "arguments": [
      "mode",
      "size"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "[%s] bonding card can not have [%s] interfaces, it must be the number between[1~8].",
    "en_US": "[{0}] bonding card can not have [{1}] interfaces, it must be the number between[1~8].",
    "zh_CN": "[{0}]个绑定卡不能有[{1}]个接口，必须在[1~8]之间。",
    "arguments": [
      "mode",
      "size"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "invalid bonding type[%s]",
    "en_US": "invalid bonding type[{0}]",
    "zh_CN": "绑定类型[{0}]无效",
    "arguments": [
      "msg.getType()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "cannot delete bonding corresponding to the management network",
    "en_US": "cannot delete bonding corresponding to the management network",
    "zh_CN": "无法删除与管理网络对应的绑定",
    "arguments": [],
    "line": 242,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "cannot delete bonding configured with vtep ip",
    "en_US": "cannot delete bonding configured with vtep ip",
    "zh_CN": "无法删除使用VTEP IP配置的绑定",
    "arguments": [],
    "line": 247,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java"
  },
  {
    "raw": "failed to add linux bonding to host[uuid:%s] : %s",
    "en_US": "failed to add linux bonding to host[uuid:{0}] : {1}",
    "zh_CN": "无法将Linux绑定添加到物理机[uuid：{0}]：{1}",
    "arguments": [
      "bondingInv.getHostUuid()",
      "reply.getError()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java"
  },
  {
    "raw": "failed to update linux bonding on host[uuid:%s] : %s",
    "en_US": "failed to update linux bonding on host[uuid:{0}] : {1}",
    "zh_CN": "无法更新物理机[uuid：{0}]上的Linux绑定：{1}",
    "arguments": [
      "bondingInv.getHostUuid()",
      "reply.getError()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java"
  },
  {
    "raw": "failed to remove linux bonding from host[uuid:%s] : %s",
    "en_US": "failed to remove linux bonding from host[uuid:{0}] : {1}",
    "zh_CN": "无法从物理机[uuid：{0}]中删除Linux绑定：{1}",
    "arguments": [
      "bondingInv.getHostUuid()",
      "reply.getError()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java"
  },
  {
    "raw": "if cluster type is baremetal, then hypervisorType must be baremetal too, or vice versa",
    "en_US": "if cluster type is baremetal, then hypervisorType must be baremetal too, or vice versa",
    "zh_CN": "如果群集类型为裸机，则hypervisorType也必须为裸机，反之亦然",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "only kvm hosts\u0027 operating system can be updated, for now",
    "en_US": "only kvm hosts\u0027 operating system can be updated, for now",
    "zh_CN": "目前只支持升级KVM物理机操作系统",
    "arguments": [],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "there are hosts in cluster[uuid:%s] in the PreMaintenance state, cannot update cluster os right now",
    "en_US": "there are hosts in cluster[uuid:{0}] in the PreMaintenance state, cannot update cluster os right now",
    "zh_CN": "集群[uuid:{0}] 中存在处于预维护模式的物理机，无法执行操作系统升级操作",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "not all hosts in cluster[uuid:%s] are in the Connected status, cannot update cluster os right now",
    "en_US": "not all hosts in cluster[uuid:{0}] are in the Connected status, cannot update cluster os right now",
    "zh_CN": "集群[uuid:{0}] 中存在未处于已连接状态的物理机，无法执行操作系统升级操作",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java"
  },
  {
    "raw": "invalid cpu pinning ref[%s]. correct example is [1,3:3-6,^5]",
    "en_US": "invalid cpu pinning ref[{0}]. correct example is [1,3:3-6,^5]",
    "zh_CN": "CPU固定引用[{0}]无效。正确的例子是[1，3:3-6，^5]",
    "arguments": [
      "r"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java"
  },
  {
    "raw": "Invalid cpuset [%s]",
    "en_US": "Invalid cpuset [{0}]",
    "zh_CN": "无效的CPUSet[{0}]",
    "arguments": [
      "word"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/compute/cpuPinning/CpuRangeSet.java"
  },
  {
    "raw": "the host vm located only have % CPUs",
    "en_US": "the host vm located only have % CPUs",
    "zh_CN": "所定位的物理机云主机只有%的CPU",
    "arguments": [
      "pCpuNum"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java"
  },
  {
    "raw": "incorrect input format, only accept \u0027^[0-9,]+$\u0027",
    "en_US": "incorrect input format, only accept \u0027^[0-9,]+$\u0027",
    "zh_CN": "输入格式不正确，只接受\u0027^[0-9，]+$\u0027",
    "arguments": [],
    "line": 46,
    "fileName": "src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java"
  },
  {
    "raw": "vcpu pinning pcpu id \u003e host cores",
    "en_US": "vcpu pinning pcpu id \u003e host cores",
    "zh_CN": "vcpu要绑定的pcpu id大于了物理机实际核数",
    "arguments": [],
    "line": 37,
    "fileName": "src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningFilterFlow.java"
  },
  {
    "raw": "webssh server is not running.",
    "en_US": "webssh server is not running.",
    "zh_CN": "WebSSH服务器未运行。",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "managementIp[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "managementIp[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "管理IP[{0}]既不是有效的IPv4地址也不是有效的物理机名",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "can not maintain host[uuid:%s, status:%s]which is not Connected",
    "en_US": "can not maintain host[uuid:{0}, status:{1}]which is not Connected",
    "zh_CN": "只能对已连接状态的物理机[uuid:{0}, status:{1}]进行维护操作",
    "arguments": [
      "msg.getHostUuid()",
      "hostStatus"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/compute/host/HostApiInterceptor.java"
  },
  {
    "raw": "host[%s] does not have ipmi device or ipmi does not have address.After config ipmi address, please reconnect host to refresh host ipmi information",
    "en_US": "host[{0}] does not have ipmi device or ipmi does not have address.After config ipmi address, please reconnect host to refresh host ipmi information",
    "zh_CN": "物理机[{0}]没有IPMI设备或IPMI没有地址。配置IPMI地址后，请重新连接物理机以刷新物理机IPMI信息",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "failed to migrate vm[uuids:%s] on host[uuid:%s, name:%s, ip:%s], will try stopping it.",
    "en_US": "failed to migrate vm[uuids:{0}] on host[uuid:{1}, name:{2}, ip:{3}], will try stopping it.",
    "zh_CN": "无法迁移物理机[uuid：{1}，名称：{2}，IP：{3}]上的VM[uuid：{0}]，将尝试停止它。",
    "arguments": [
      "vmFailedToMigrate.keySet()",
      "self.getUuid()",
      "self.getName()",
      "self.getManagementIp()"
    ],
    "line": 435,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "host is connecting, ping failed",
    "en_US": "host is connecting, ping failed",
    "zh_CN": "物理机正在连接, 不能进行ping操作",
    "arguments": [],
    "line": 841,
    "fileName": "src/main/java/org/zstack/compute/host/HostBase.java"
  },
  {
    "raw": "mock power off host[%s] by ipmi failed.",
    "en_US": "mock power off host[{0}] by ipmi failed.",
    "zh_CN": "通过IPMI模拟物理机[{0}]断电失败。",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "power off host[%s] by ipmi failed.",
    "en_US": "power off host[{0}] by ipmi failed.",
    "zh_CN": "通过IPMI关闭物理机[{0}]失败。",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "mock power on host[%s] by ipmi failed.",
    "en_US": "mock power on host[{0}] by ipmi failed.",
    "zh_CN": "通过IPMI模拟物理机[{0}]上的电源失败。",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "power on host[%s] by ipmi failed.",
    "en_US": "power on host[{0}] by ipmi failed.",
    "zh_CN": "通过IPMI打开物理机[{0}]电源失败。",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "mock power reset host[%s] by ipmi failed.",
    "en_US": "mock power reset host[{0}] by ipmi failed.",
    "zh_CN": "通过IPMI模拟电源重置物理机[{0}]失败。",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "power reset host[%s] by ipmi failed.",
    "en_US": "power reset host[{0}] by ipmi failed.",
    "zh_CN": "通过IPMI对物理机[{0}]进行电源重置失败。",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 171,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "ipmi information is not complete.",
    "en_US": "ipmi information is not complete.",
    "zh_CN": "IPMI信息不完整。",
    "arguments": [],
    "line": 192,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "host[%s] can not connect ipmi[%s], because:%s",
    "en_US": "host[{0}] can not connect ipmi[{1}], because:{2}",
    "zh_CN": "物理机[{0}]无法连接IPMI[{1}]，因为：{2}",
    "arguments": [
      "ipmi.getUuid()",
      "rst.getStderr()"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "host[%s] got unexpected return value",
    "en_US": "host[{0}] got unexpected return value",
    "zh_CN": "物理机[{0}]获得意外的返回值",
    "arguments": [
      "ipmi.getUuid()"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "host ipmi[%s] is not reachable.because %s",
    "en_US": "host ipmi[{0}] is not reachable.because {1}",
    "zh_CN": "无法访问物理机IPMI[{0}]。原因是{1}",
    "arguments": [
      "ipmi.getIpmiAddress()",
      "rst.getStderr()"
    ],
    "line": 222,
    "fileName": "src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java"
  },
  {
    "raw": "there has been a host having managementIp[%s]",
    "en_US": "there has been a host having managementIp[{0}]",
    "zh_CN": "已经存在一个管理IP是[{0}]的物理机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 264,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "cluster[uuid:%s] is not existing",
    "en_US": "cluster[uuid:{0}] is not existing",
    "zh_CN": "群集[uuid：{0}]不存在",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 270,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "after connecting, host[name:%s, ip:%s] returns a null architecture",
    "en_US": "after connecting, host[name:{0}, ip:{1}] returns a null architecture",
    "zh_CN": "连接后，物理机[名称：{0}，IP：{1}]返回空体系结构",
    "arguments": [
      "vo.getName()",
      "vo.getManagementIp()"
    ],
    "line": 364,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "cluster[uuid:%s]\u0027s architecture is %s, not match the host[name:%s, ip:%s] architecture %s",
    "en_US": "cluster[uuid:{0}]\u0027s architecture is {1}, not match the host[name:{2}, ip:{3}] architecture {4}",
    "zh_CN": "群集[uuid：{0}]的体系结构为{1}，与物理机[名称：{2}，IP：{3}]的体系结构{4}不匹配",
    "arguments": [
      "vo.getClusterUuid()",
      "cluster.getArchitecture()",
      "vo.getName()",
      "vo.getManagementIp()",
      "arch"
    ],
    "line": 379,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "no running api[%s] task on hosts",
    "en_US": "no running api[{0}] task on hosts",
    "zh_CN": "物理机上没有正在运行的API[{0}]任务",
    "arguments": [
      "msg.getCancellationApiId()"
    ],
    "line": 515,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "primary storage[uuid:%s] becomes disconnected, the host has no connected primary storage attached",
    "en_US": "primary storage[uuid:{0}] becomes disconnected, the host has no connected primary storage attached",
    "zh_CN": "主存储[uuid:{0}]失联，物理机没有关联的主存储",
    "arguments": [
      "d.getPrimaryStorageUuid()"
    ],
    "line": 733,
    "fileName": "src/main/java/org/zstack/compute/host/HostManagerImpl.java"
  },
  {
    "raw": "host(s) [%s] is not Connected, not support to power off",
    "en_US": "host(s) [{0}] is not Connected, not support to power off",
    "zh_CN": "物理机[{0}]未连接，不支持关机",
    "arguments": [
      "nameips.stream().map( it -\u003e it.get(1, String.class) + \"/\" + it.get(0, String.class)).collect(Collectors.joining(\", \"))"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "invalid ip address format[%s]",
    "en_US": "invalid ip address format[{0}]",
    "zh_CN": "IP地址格式[{0}]无效",
    "arguments": [
      "ipAddress"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "invalid netmask format[%s]",
    "en_US": "invalid netmask format[{0}]",
    "zh_CN": "网络掩码格式[{0}]无效",
    "arguments": [
      "netmask"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "invalid ip set, it must be set with netmask",
    "en_US": "invalid ip set, it must be set with netmask",
    "zh_CN": "设置的IP无效，必须使用网络掩码进行设置",
    "arguments": [],
    "line": 75,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "cannot set ip on interface corresponding to the management network",
    "en_US": "cannot set ip on interface corresponding to the management network",
    "zh_CN": "无法在与管理网络对应的接口上设置IP",
    "arguments": [],
    "line": 91,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "cannot set ip which has been set on the other interfaces",
    "en_US": "cannot set ip which has been set on the other interfaces",
    "zh_CN": "无法设置已在其他接口上设置的IP",
    "arguments": [],
    "line": 192,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "cannot set ip on bonding slaves",
    "en_US": "cannot set ip on bonding slaves",
    "zh_CN": "无法在绑定从属服务器上设置IP",
    "arguments": [],
    "line": 126,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "cannot set ip on bridge slaves",
    "en_US": "cannot set ip on bridge slaves",
    "zh_CN": "无法在网桥从属服务器上设置IP",
    "arguments": [],
    "line": 203,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "invalid interface uuid",
    "en_US": "invalid interface uuid",
    "zh_CN": "接口uuid无效",
    "arguments": [
      "msg.getInterfaceUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "cannot set ip on bonding corresponding to the management network",
    "en_US": "cannot set ip on bonding corresponding to the management network",
    "zh_CN": "无法在与管理网络对应的绑定上设置IP",
    "arguments": [],
    "line": 168,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "invalid bonding uuid",
    "en_US": "invalid bonding uuid",
    "zh_CN": "绑定uuid无效",
    "arguments": [
      "msg.getBondingUuid()"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java"
  },
  {
    "raw": "no available network interface on the host to start the vm",
    "en_US": "no available network interface on the host to start the vm",
    "zh_CN": "物理机上没有可用于启动云主机的网络接口",
    "arguments": [],
    "line": 141,
    "fileName": "src/main/java/org/zstack/compute/host/HostNetworkInterfaceStateAllocatorFlow.java"
  },
  {
    "raw": "vm security level not consistent with vms running on host",
    "en_US": "vm security level not consistent with vms running on host",
    "zh_CN": "云主机安全级别与物理机上运行的云主机不一致",
    "arguments": [],
    "line": 68,
    "fileName": "src/main/java/org/zstack/compute/host/HostSecurityLevelAllocatorFilterExtensionPoint.java"
  },
  {
    "raw": "host[uuid:%s, name:%s] is in state[%s], cannot perform required operation",
    "en_US": "host[uuid:{0}, name:{1}] is in state[{2}], cannot perform required operation",
    "zh_CN": "物理机[uuid:{0}, name:{1}]处于状态[{2}]中，不能处理该请求",
    "arguments": [
      "host.getUuid()",
      "host.getName()",
      "host.getState()"
    ],
    "line": 280,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "operation error, because %s",
    "en_US": "operation error, because {0}",
    "zh_CN": "操作错误，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 917,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "failed to allocate pci device for l3[uuid:%s] on host[uuid:%s]",
    "en_US": "failed to allocate pci device for l3[uuid:{0}] on host[uuid:{1}]",
    "zh_CN": "无法为物理机[uuid：{1}]上的L3[uuid：{0}]分配PCI设备",
    "arguments": [
      "l3Uuid",
      "msg.getHostUuid()"
    ],
    "line": 370,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "networkInterface[name:%s] of host[uuid:%s] can not find",
    "en_US": "networkInterface[name:{0}] of host[uuid:{1}] can not find",
    "zh_CN": "找不到物理机[uuid：{1}]的网络接口[名称：{0}]",
    "arguments": [
      "msg.getNetworkInterfaceName()",
      "msg.getHostUuid()"
    ],
    "line": 622,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "only support do live snapshot on vm state[%s], but vm is on [%s] state",
    "en_US": "only support do live snapshot on vm state[{0}], but vm is on [{1}] state",
    "zh_CN": "仅支持在VM状态[{0}]上执行实时快照，但VM处于[{1}]状态",
    "arguments": [
      "vmInstanceVO.getUuid()",
      "vmInstanceVO.getState()"
    ],
    "line": 805,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "sync vm port config failed: %s",
    "en_US": "sync vm port config failed: {0}",
    "zh_CN": "同步云主机端口配置失败：{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 1389,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "set vm hostname failed: %s",
    "en_US": "set vm hostname failed: {0}",
    "zh_CN": "设置VM物理机名失败：{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 1423,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBase.java"
  },
  {
    "raw": "host[uuid:%s] has multi ips in cidr[%s]",
    "en_US": "host[uuid:{0}] has multi ips in cidr[{1}]",
    "zh_CN": "物理机[uuid：{0}]在CIDR[{1}]中具有多个IP",
    "arguments": [
      "huuid",
      "cidr"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostBaseFactory.java"
  },
  {
    "raw": "host[uuid:%s] can not find",
    "en_US": "host[uuid:{0}] can not find",
    "zh_CN": "找不到物理机[uuid：{0}]",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 1058,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java"
  },
  {
    "raw": "failed to update interface ip, because %s",
    "en_US": "failed to update interface ip, because {0}",
    "zh_CN": "无法更新接口IP，因为{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 408,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java"
  },
  {
    "raw": "failed to update bonding ip, because %s",
    "en_US": "failed to update bonding ip, because {0}",
    "zh_CN": "无法更新绑定IP，因为{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 510,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java"
  },
  {
    "raw": "cluster[uuids:%s, hypervisorType:%s] are not exist!",
    "en_US": "cluster[uuids:{0}, hypervisorType:{1}] are not exist!",
    "zh_CN": "群集[uuid：{0}，HypervisorType：{1}]不存在！",
    "arguments": [
      "clusterUuids",
      "hypervisorType"
    ],
    "line": 1024,
    "fileName": "src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java"
  },
  {
    "raw": "ovs cpu pinning resource config:[%s] format error.",
    "en_US": "ovs cpu pinning resource config:[{0}] format error.",
    "zh_CN": "OVS CPU固定资源配置：[{0}]格式错误。",
    "arguments": [
      "newValue"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/compute/ovs/VSwitchOvsManagerImpl.java"
  },
  {
    "raw": "vm nic[uuid:%s] doesn\u0027t exist",
    "en_US": "vm nic[uuid:{0}] doesn\u0027t exist",
    "zh_CN": "VM NIC[uuid：{0}]不存在",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "only %s support sriov",
    "en_US": "only {0} support sriov",
    "zh_CN": "仅{0}支持SRIOV",
    "arguments": [
      "VmVfNicConstant.SRIOVABLE_L2_NETWORK_TYPES"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "%s don\u0027t support sriov",
    "en_US": "{0} don\u0027t support sriov",
    "zh_CN": "{0}不支持SRIOV",
    "arguments": [
      "L2NetworkConstant.VSWITCH_TYPE_OVS_DPDK"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "L3 Network [uuid:%s] doesn\u0027t exist",
    "en_US": "L3 Network [uuid:{0}] doesn\u0027t exist",
    "zh_CN": "三层网络[uuid：{0}]不存在",
    "arguments": [
      "l3Uuid"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "related l2 network[uuid:%s] of l3 network[uuid:%s] is not sriov enabled",
    "en_US": "related l2 network[uuid:{0}] of l3 network[uuid:{1}] is not sriov enabled",
    "zh_CN": "三层网络[uuid：{1}]的相关二层网络[uuid：{0}]未启用SRIOV",
    "arguments": [
      "l2Uuid",
      "l3Uuid"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "vm nic[uuid:%s] is already of type %s, no need to change",
    "en_US": "vm nic[uuid:{0}] is already of type {1}, no need to change",
    "zh_CN": "VM NIC[uuid：{0}]已属于类型{1}，无需更改",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getVmNicType()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "change vm nic type only when the vm is stopped",
    "en_US": "change vm nic type only when the vm is stopped",
    "zh_CN": "仅在VM停止时更改VM NIC类型",
    "arguments": [],
    "line": 146,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "cant not change vf nic to normal type",
    "en_US": "cant not change vf nic to normal type",
    "zh_CN": "无法将VF NIC更改为正常类型",
    "arguments": [],
    "line": 190,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "cant not change nic to vf type",
    "en_US": "cant not change nic to vf type",
    "zh_CN": "无法将NIC更改为VF类型",
    "arguments": [],
    "line": 197,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java"
  },
  {
    "raw": "no candidate host with enough vf nic pci devices",
    "en_US": "no candidate host with enough vf nic pci devices",
    "zh_CN": "没有具有足够VF NIC PCI设备的候选物理机",
    "arguments": [],
    "line": 89,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicFilterFlow.java"
  },
  {
    "raw": "enableSRIOV tag is not supported for vm type [%s]",
    "en_US": "enableSRIOV tag is not supported for vm type [{0}]",
    "zh_CN": "云主机类型[{0}]不支持EnableSriov标记",
    "arguments": [
      "vmType"
    ],
    "line": 275,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java"
  },
  {
    "raw": "vm[uuid:%s] needs to be running when attach vf nics, but no hostUuid found",
    "en_US": "vm[uuid:{0}] needs to be running when attach vf nics, but no hostUuid found",
    "zh_CN": "连接VF NIC时需要运行VM[uuid：{0}]，但未找到HOSTuuid",
    "arguments": [
      "vmUuid"
    ],
    "line": 476,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java"
  },
  {
    "raw": "cannot find available vf nic pci device on host[uuid:%s] for l3[uuid:%s]",
    "en_US": "cannot find available vf nic pci device on host[uuid:{0}] for l3[uuid:{1}]",
    "zh_CN": "对于L3[uuid：{1}]，在物理机[uuid：{0}]上找不到可用的VF NIC PCI设备",
    "arguments": [
      "hostUuid",
      "l3Uuid"
    ],
    "line": 499,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java"
  },
  {
    "raw": "reserve pci address for on host[uuid] for vm [uuid:%s] failed,",
    "en_US": "reserve pci address for on host[uuid] for vm [uuid:{0}] failed,",
    "zh_CN": "在物理机[uuid]上为云主机[uuid：{0}]保留的PCI地址失败，",
    "arguments": [
      "hostUuid",
      "vmUuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/compute/sriov/VmVfNicReserveFlow.java"
  },
  {
    "raw": "failed to delete vHost User Client in host[uuid:%s] for vm[uuid:%s] : %s",
    "en_US": "failed to delete vHost User Client in host[uuid:{0}] for vm[uuid:{1}] : {2}",
    "zh_CN": "无法删除云主机[uuid：{1}]的物理机[uuid：{0}]中的vhost用户客户端：{2}",
    "arguments": [
      "hostUuid",
      "vmUuid",
      "reply.getError()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java"
  },
  {
    "raw": "failed to generate vHost User Client in host[uuid:%s] for vm[uuid:%s] : %s",
    "en_US": "failed to generate vHost User Client in host[uuid:{0}] for vm[uuid:{1}] : {2}",
    "zh_CN": "无法在物理机[uuid：{0}]中为VM[uuid：{1}]生成vhost用户客户端：{2}",
    "arguments": [
      "hostUuid",
      "vmUuid",
      "reply.getError()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java"
  },
  {
    "raw": "cannot generate vhost user client for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot generate vhost user client for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为目标物理机[uuid：{1}]上的云主机[uuid：{0}]生成vhost用户客户端",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 309,
    "fileName": "src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicManagerImpl.java"
  },
  {
    "raw": "only %s support vdpa",
    "en_US": "only {0} support vdpa",
    "zh_CN": "仅{0}支持VDPA",
    "arguments": [
      "VmVdpaNicConstant.VDPA_L2_NETWORK_TYPES"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java"
  },
  {
    "raw": "can not create %s with physical interface:[%s] which was already been used by another vSwitch type.",
    "en_US": "can not create {0} with physical interface:[{1}] which was already been used by another vSwitch type.",
    "zh_CN": "无法创建物理接口为[{1}]的{0}，该接口已由另一个vSwitch类型使用。",
    "arguments": [
      "l2Vo.getvSwitchType()",
      "l2Vo.getPhysicalInterface()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] do not support ovs-dpdk",
    "en_US": "cluster[uuid:{0}] do not support ovs-dpdk",
    "zh_CN": "群集[uuid：{0}]不支持OVS-DPDK",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java"
  },
  {
    "raw": "physical interface[%s] in host[uuid:%s] is not sriov virtualized, please perform sriov cutting operation on physical interface[%s].",
    "en_US": "physical interface[{0}] in host[uuid:{1}] is not sriov virtualized, please perform sriov cutting operation on physical interface[{2}].",
    "zh_CN": "物理机[uuid：{1}]中的物理接口[{0}]未进行SRIOV虚拟化，请对物理接口[{2}]进行SRIOV裁剪操作。",
    "arguments": [
      "l2NicName",
      "hostUuid",
      "l2NicName"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java"
  },
  {
    "raw": "failed to delete vdpas in host[uuid:%s] for vm[uuid:%s] : %s",
    "en_US": "failed to delete vdpas in host[uuid:{0}] for vm[uuid:{1}] : {2}",
    "zh_CN": "无法删除物理机[uuid：{0}]中VM[uuid：{1}]的VDPA：{2}",
    "arguments": [
      "hostUuid",
      "vmUuid",
      "reply.getError()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java"
  },
  {
    "raw": "failed to generate vdpas in host[uuid:%s] for vm[uuid:%s] : %s",
    "en_US": "failed to generate vdpas in host[uuid:{0}] for vm[uuid:{1}] : {2}",
    "zh_CN": "无法在物理机[uuid：{0}]中为VM[uuid：{1}]生成VDPA：{2}",
    "arguments": [
      "hostUuid",
      "vmUuid",
      "reply.getError()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java"
  },
  {
    "raw": "cannot find available vdpa nic pci device on host[uuid:%s] for l3[uuid:%s]",
    "en_US": "cannot find available vdpa nic pci device on host[uuid:{0}] for l3[uuid:{1}]",
    "zh_CN": "在物理机[uuid：{0}]上找不到可用于L3[uuid：{1}]的VDPA NIC PCI设备",
    "arguments": [
      "hostUuid",
      "l3Uuid"
    ],
    "line": 650,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java"
  },
  {
    "raw": "vm[uuid:%s] needs to be running when attach vdpa nics, but no hostUuid found",
    "en_US": "vm[uuid:{0}] needs to be running when attach vdpa nics, but no hostUuid found",
    "zh_CN": "连接VDPA NIC时需要运行VM[uuid：{0}]，但未找到HOSTuuid",
    "arguments": [
      "vmUuid"
    ],
    "line": 263,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java"
  },
  {
    "raw": "cannot generate vdpa for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot generate vdpa for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为目标物理机[uuid：{1}]上的云主机[uuid：{0}]生成VDPA",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 688,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java"
  },
  {
    "raw": "no candidate host with enough vdpa resource",
    "en_US": "no candidate host with enough vdpa resource",
    "zh_CN": "没有具有足够VDPA资源的候选物理机",
    "arguments": [],
    "line": 835,
    "fileName": "src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java"
  },
  {
    "raw": "not dest host found in db, can\u0027t send change password cmd to the host!",
    "en_US": "not dest host found in db, can\u0027t send change password cmd to the host!",
    "zh_CN": "没有在物理机上发现数据库，不能发送更改密码的指令到这个物理机上",
    "arguments": [],
    "line": 63,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "not account preference found,  send change password cmd to the host!",
    "en_US": "not account preference found,  send change password cmd to the host!",
    "zh_CN": "没有优先级账户去发送改变密码的指令到物理机",
    "arguments": [],
    "line": 64,
    "fileName": "src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java"
  },
  {
    "raw": "fail to attach virtio driver because read md5 of file[%s] fail in mn[uuid:%s]: file not found on classpath",
    "en_US": "fail to attach virtio driver because read md5 of file[{0}] fail in mn[uuid:{1}]: file not found on classpath",
    "zh_CN": "无法附加virtio驱动程序，因为在Mn[uuid：{1}]中读取文件[{0}]的MD5失败：在类路径中找不到文件",
    "arguments": [
      "srcPath",
      "getManagementServerId()"
    ],
    "line": 160,
    "fileName": "src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java"
  },
  {
    "raw": "fail to attach virtio driver because read md5 of file[%s] fail in mn[uuid:%s]: %s",
    "en_US": "fail to attach virtio driver because read md5 of file[{0}] fail in mn[uuid:{1}]: {2}",
    "zh_CN": "无法附加virtio驱动程序，因为在Mn[uuid：{1}]中读取文件[{0}]的MD5失败：{2}",
    "arguments": [
      "srcPath",
      "getManagementServerId()",
      "e.getMessage()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java"
  },
  {
    "raw": "fail to attach virtio driver because of invalid md5 of file[%s] in mn[uuid:%s]",
    "en_US": "fail to attach virtio driver because of invalid md5 of file[{0}] in mn[uuid:{1}]",
    "zh_CN": "无法附加virtio驱动程序，因为Mn[uuid：{1}]中文件[{0}]的MD5无效",
    "arguments": [
      "srcPath",
      "getManagementServerId()"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java"
  },
  {
    "raw": "only host(s)[uuid(s): %s] can access data volume.",
    "en_US": "only host(s)[uuid(s): {0}] can access data volume.",
    "zh_CN": "只有物理机[uuid：{0}]可以访问数据云盘。",
    "arguments": [
      "spec.getDataVolumeRequiredHostUuids()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/compute/vm/CheckIfCreateTemporaryTemplateFlow.java"
  },
  {
    "raw": "cpu topology is not correct, cpuNum[%s], configured cpuSockets[%s], cpuCores[%s], cpuThreads[%s]; Calculated cpuSockets[%s], cpuCores[%s], cpuThreads[%s]",
    "en_US": "cpu topology is not correct, cpuNum[{0}], configured cpuSockets[{1}], cpuCores[{2}], cpuThreads[{3}]; Calculated cpuSockets[{4}], cpuCores[{5}], cpuThreads[{6}]",
    "zh_CN": "CPU拓扑结构不正确，cpunum[{0}]，已配置的cpusockets[{1}]，cpuCore[{2}]，cpuThreads[{3}]。计算的CPU套接字[{4}]，CPU核心[{5}]，CPU线程[{6}]",
    "arguments": [
      "cpuNum",
      "cpuSockets",
      "cpuCores",
      "cpuThreads",
      "socketNum",
      "coreNum",
      "threadNum"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/compute/vm/CpuTopology.java"
  },
  {
    "raw": "VM[uuid:%s] has attached ISO[uuid:%s]",
    "en_US": "VM[uuid:{0}] has attached ISO[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经加载了ISO[uuid:{1}]",
    "arguments": [
      "vmUuid",
      "isoUuid"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/compute/vm/IsoOperator.java"
  },
  {
    "raw": "All vm[uuid:%s] CD-ROMs have mounted ISO",
    "en_US": "All vm[uuid:{0}] CD-ROMs have mounted ISO",
    "zh_CN": "所有VM[uuid：{0}]CD-ROM都已装载ISO",
    "arguments": [
      "vmUuid"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/compute/vm/IsoOperator.java"
  },
  {
    "raw": "invalid virtio driver device format: %s",
    "en_US": "invalid virtio driver device format: {0}",
    "zh_CN": "无效的virtio驱动程序设备格式：{0}",
    "arguments": [
      "driverFormat"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/compute/vm/KvmUserVmVirtIODriverExtension.java"
  },
  {
    "raw": "This is not a valid MAC address [%s]",
    "en_US": "This is not a valid MAC address [{0}]",
    "zh_CN": "这是一个无效的MAC地址",
    "arguments": [
      "mac"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "Not a valid MAC address [%s]",
    "en_US": "Not a valid MAC address [{0}]",
    "zh_CN": "这是一个无效的MAC地址[{0}]",
    "arguments": [
      "mac"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "Disallowed address",
    "en_US": "Disallowed address",
    "zh_CN": "不被允许的MAC地址",
    "arguments": [],
    "line": 90,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "Expected unicast mac address, found multicast MAC address [%s]",
    "en_US": "Expected unicast mac address, found multicast MAC address [{0}]",
    "zh_CN": "期望的是一个单播的MAC地址，但找到的是一个组播的MAC地址[{0}]",
    "arguments": [
      "mac"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/compute/vm/MacOperator.java"
  },
  {
    "raw": "state of vm[uuid:%s] is not in Running state, can not sync clock",
    "en_US": "state of vm[uuid:{0}] is not in Running state, can not sync clock",
    "zh_CN": "VM[uuid：{0}]的状态未处于运行状态，无法同步时钟",
    "arguments": [],
    "line": 251,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "hot plug is not turned off,can not open vm numa",
    "en_US": "hot plug is not turned off,can not open vm numa",
    "zh_CN": "热插拔未关闭，无法打开VM NUMA",
    "arguments": [],
    "line": 442,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm[uuid: %s]\u0027s state is not Stopped now, cannot operate \u0027changevmimage\u0027 action",
    "en_US": "vm[uuid: {0}]\u0027s state is not Stopped now, cannot operate \u0027changevmimage\u0027 action",
    "zh_CN": "VM[uuid：{0}]的状态现在未停止，无法执行“ ChangeVMImage ”操作",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 609,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm[uuid:%s] cluster uuid is null, cannot change image for it",
    "en_US": "vm[uuid:{0}] cluster uuid is null, cannot change image for it",
    "zh_CN": "VM[uuid：{0}]群集uuid为空，无法更改其镜像",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 662,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm[uuid:%s] is in cluster[uuid:%s], but there is no available host in the cluster, cannot change image for the vm",
    "en_US": "vm[uuid:{0}] is in cluster[uuid:{1}], but there is no available host in the cluster, cannot change image for the vm",
    "zh_CN": "云主机[uuid：{0}]位于集群[uuid：{1}]中，但集群中没有可用的物理机，无法更改云主机的镜像",
    "arguments": [
      "self.getUuid()",
      "self.getClusterUuid()"
    ],
    "line": 675,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "cannot find backupStorage for volume[uuid: %s, psUuid: %s], required primary storage uuid:%s",
    "en_US": "cannot find backupStorage for volume[uuid: {0}, psUuid: {1}], required primary storage uuid:{2}",
    "zh_CN": "找不到卷[uuid：{0}，PSuuid：{1}]的BackupStorage，所需的主存储uuid为{2}",
    "arguments": [
      "vivo.getRootVolumeUuid()",
      "vivo.getRootVolume().getPrimaryStorageUuid()",
      "msg.getPrimaryStorageUuidForRootVolume()"
    ],
    "line": 967,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "can not find backup storage, unable to commit volume snapshot[psUuid:%s] as image, destination required PS uuid:%s",
    "en_US": "can not find backup storage, unable to commit volume snapshot[psUuid:{0}] as image, destination required PS uuid:{1}",
    "zh_CN": "找不到备份存储，无法将卷快照[PSuuid：{0}]作为镜像提交，目标需要PS uuid：{1}",
    "arguments": [
      "vol.getPrimaryStorageUuid()",
      "requiredPsUuid"
    ],
    "line": 1152,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "direction must be set to in or out",
    "en_US": "direction must be set to in or out",
    "zh_CN": "方法必须设置in或者out",
    "arguments": [],
    "line": 2052,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "inboundBandwidth must be set no more than %s.",
    "en_US": "inboundBandwidth must be set no more than {0}.",
    "zh_CN": "下行带宽不能超过{0}",
    "arguments": [
      "struct.inboundBandwidthUpthreshold"
    ],
    "line": 2132,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "outboundBandwidth must be set no more than %s.",
    "en_US": "outboundBandwidth must be set no more than {0}.",
    "zh_CN": "上行带宽不能超过{0}",
    "arguments": [
      "struct.outboundBandwidthUpthreshold"
    ],
    "line": 2142,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm [%s]\u0027 state must be Running or Paused to sync nic qos",
    "en_US": "vm [{0}]\u0027 state must be Running or Paused to sync nic qos",
    "zh_CN": "VM[{0}]状态必须为“正在运行”或“已暂停”才能同步NIC QoS",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2199,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm [%s]\u0027s HostUuid is null, cannot sync nic qos",
    "en_US": "vm [{0}]\u0027s HostUuid is null, cannot sync nic qos",
    "zh_CN": "VM[{0}]的Hostuuid为空，无法同步NIC QoS",
    "arguments": [],
    "line": 2204,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "not dest host found in db by uuid: %s, can\u0027t send change password cmd to the host!",
    "en_US": "not dest host found in db by uuid: {0}, can\u0027t send change password cmd to the host!",
    "zh_CN": "没有在物理机{0}上发现数据库，不能发送更改密码的指令到这个物理机上",
    "arguments": [
      "amsg.getVmInstanceUuid()"
    ],
    "line": 2661,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "state is not correct while change password.",
    "en_US": "state is not correct while change password.",
    "zh_CN": "该状态不支持修改密码",
    "arguments": [],
    "line": 2691,
    "fileName": "src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java"
  },
  {
    "raw": "vm[uuid:%s] cdRom deviceId repetition",
    "en_US": "vm[uuid:{0}] cdRom deviceId repetition",
    "zh_CN": "VM[uuid：{0}]CDROM DeviceID重复",
    "arguments": [
      "spec.getVmInventory().getUuid()"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocateCdRomFlow.java"
  },
  {
    "raw": "creation rely on image cache[uuid:%s, locate ps uuids: [%s]], cannot create other places.",
    "en_US": "creation rely on image cache[uuid:{0}, locate ps uuids: [{1}]], cannot create other places.",
    "zh_CN": "创建依赖于镜像缓存[uuid：{0}，定位PS uuid：[{1}]]，无法创建其他位置。",
    "arguments": [
      "imageUuid",
      "cachedPsUuids"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocateHostAndPrimaryStorageFlow.java"
  },
  {
    "raw": "there is no available ipRange on L3 network [%s]",
    "en_US": "there is no available ipRange on L3 network [{0}]",
    "zh_CN": "三层网络[{0}]中没有可用的网络段",
    "arguments": [
      "v.getL3Invs().get(0).getUuid()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocateNicIpFlow.java"
  },
  {
    "raw": " Can not find the vm\u0027s host, please start the vm[%s], then mount the disk",
    "en_US": " Can not find the vm\u0027s host, please start the vm[{0}], then mount the disk",
    "zh_CN": "未找到云主机的物理机，请重启云主机[{0}]，然后挂载云盘",
    "arguments": [
      "spec.getVmInventory().getUuid()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java"
  },
  {
    "raw": "cannot find the iso[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is running\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the iso[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is running\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现iso[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \\n1. 镜像服务器是否已经挂载到区域中的任何运行状态的云主机[name: {2}, uuid:{3}]上；\\n2. 如果镜像服务器不是处于连接状态，请尝试重连",
    "arguments": [
      "iso.getUuid()",
      "host.getZoneUuid()",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java"
  },
  {
    "raw": "VM[uuid:%s] already has an ISO[uuid:%s] attached",
    "en_US": "VM[uuid:{0}] already has an ISO[uuid:{1}] attached",
    "zh_CN": "云主机[uuid:{0}]已经挂载了ISO[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getIsoUuid()"
    ],
    "line": 713,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "either l3NetworkUuids or backupStorageUuid must be set",
    "en_US": "either l3NetworkUuids or backupStorageUuid must be set",
    "zh_CN": "必须设置L3Networkuuid或BackupStorageuuid",
    "arguments": [],
    "line": 169,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to L3 network. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to change to L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "无法更改为三层网络。VM[uuid：{0}]未运行或已停止。当前状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to L3 network. The L3 network[uuid:%s] doesn\u0027t has have ip range",
    "en_US": "unable to change to L3 network. The L3 network[uuid:{0}] doesn\u0027t has have ip range",
    "zh_CN": "无法更改为三层网络。三层网络[uuid：{0}]没有IP范围",
    "arguments": [
      "msg.getDestL3NetworkUuid()"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to L3 network. The L3 network[uuid:%s] are belonged to different l2 networks [uuids:%s]",
    "en_US": "unable to change to L3 network. The L3 network[uuid:{0}] are belonged to different l2 networks [uuids:{1}]",
    "zh_CN": "无法更改为三层网络。三层网络[uuid：{0}]属于不同的二层网络[uuid：{1}]",
    "arguments": [
      "newAddedL3Uuids",
      "l2Uuids"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to L3 network. The L3 network[uuid:%s] are belonged to l2 networks [uuids:%s] that have not been attached to any cluster",
    "en_US": "unable to change to L3 network. The L3 network[uuid:{0}] are belonged to l2 networks [uuids:{1}] that have not been attached to any cluster",
    "zh_CN": "无法更改为三层网络。三层网络[uuid：{0}]属于尚未连接到任何群集的二层网络[uuid：{1}]",
    "arguments": [
      "newAddedL3Uuids",
      "l2Uuids"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to L3 network. The L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to change to L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "无法更改为三层网络。三层网络[uuid：{0}]已连接到云主机[uuid：{1}]",
    "arguments": [
      "attachedL3Uuids",
      "msg.getVmInstanceUuid()"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to a non-guest L3 network. The L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to change to a non-guest L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "无法更改为非来宾三层网络。三层网络[uuid：{0}]已连接到云主机[uuid：{1}]",
    "arguments": [
      "attachedL3Uuids",
      "msg.getVmInstanceUuid()"
    ],
    "line": 247,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to L3 network. The L3 network[uuid:%s] is disabled",
    "en_US": "unable to change to L3 network. The L3 network[uuid:{0}] is disabled",
    "zh_CN": "无法更改为三层网络。三层网络[uuid：{0}]已禁用",
    "arguments": [
      "l3Uuid"
    ],
    "line": 255,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to change to L3 network. The L3 network[uuid:%s] is a system network and vm is a user vm",
    "en_US": "unable to change to L3 network. The L3 network[uuid:{0}] is a system network and vm is a user vm",
    "zh_CN": "无法更改为三层网络。三层网络[uuid：{0}]是系统网络，VM是用户VM",
    "arguments": [
      "l3Uuid"
    ],
    "line": 258,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the static IP[%s] is not in any IP range of the L3 network[uuid:%s]",
    "en_US": "the static IP[{0}] is not in any IP range of the L3 network[uuid:{1}]",
    "zh_CN": "该静态IP[{0}]不在三层网络[uuid:{1}]的任何IP段",
    "arguments": [
      "staticIp",
      "l3Uuid"
    ],
    "line": 942,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the static IP[%s] has been occupied on the L3 network[uuid:%s]",
    "en_US": "the static IP[{0}] has been occupied on the L3 network[uuid:{1}]",
    "zh_CN": "该静态IP[{0}]已经存在在三层网络[uuid:{1}]中",
    "arguments": [
      "staticIp",
      "l3Uuid"
    ],
    "line": 949,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "static ip l3 uuid[%s] is not included in nic l3 [%s]",
    "en_US": "static ip l3 uuid[{0}] is not included in nic l3 [{1}]",
    "zh_CN": "静态IP的三层网络[uuid:{0}]不在网卡的L3列表[uuid:{1}]中",
    "arguments": [
      "e.getKey()",
      "newAddedL3Uuids"
    ],
    "line": 912,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the image[name:%s, uuid:%s] is an ISO, rootDiskSize must be set",
    "en_US": "the image[name:{0}, uuid:{1}] is an ISO, rootDiskSize must be set",
    "zh_CN": "镜像[name:{0}, uuid:{1}]是一个IOS, 必须设置云盘大小",
    "arguments": [
      "image.getName()",
      "image.getUuid()"
    ],
    "line": 373,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Can not create CD-ROM for vm[uuid:%s] which is in state[%s] ",
    "en_US": "Can not create CD-ROM for vm[uuid:{0}] which is in state[{1}] ",
    "zh_CN": "无法为处于状态[{1}]的VM[uuid：{0}]创建CD-ROM",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "vo.getState().toString()"
    ],
    "line": 383,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Current platform %s not support update nic driver yet",
    "en_US": "Current platform {0} not support update nic driver yet",
    "zh_CN": "当前平台{0}尚不支持更新NIC驱动程序",
    "arguments": [
      "vo.getPlatform()"
    ],
    "line": 391,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "rootDiskSize is needed when image media type is ISO",
    "en_US": "rootDiskSize is needed when image media type is ISO",
    "zh_CN": "当镜像类型是ISO时云盘大小需要设置",
    "arguments": [],
    "line": 407,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] is already on host[uuid:%s]",
    "en_US": "the vm[uuid:{0}] is already on host[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经运行于物理机[uuid:{1}]上",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getHostUuid()"
    ],
    "line": 419,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM cannot do online cpu/memory update because of disabling Instance Offering Online Modification. Please stop the VM then do the cpu/memory update again",
    "en_US": "the VM cannot do online cpu/memory update because of disabling Instance Offering Online Modification. Please stop the VM then do the cpu/memory update again",
    "zh_CN": "云主机无法执行在线升级CPU/内存，因为未启用计算规格在线修改。请关闭该云主机再尝试",
    "arguments": [],
    "line": 436,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The state of vm[uuid:%s] is %s. Only these state[%s] is allowed to update cpu or memory.",
    "en_US": "The state of vm[uuid:{0}] is {1}. Only these state[{2}] is allowed to update cpu or memory.",
    "zh_CN": "云主机[uuid:{0}]的状态为{1}。只有这些状态[{2}]允许在线升级CPU/内存",
    "arguments": [
      "vo.getUuid()",
      "vo.getState()",
      "StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), \",\")"
    ],
    "line": 495,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease capacity when vm[uuid:%s] is running",
    "en_US": "can\u0027t decrease capacity when vm[uuid:{0}] is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少容量",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 452,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM cannot do cpu hot plug because of disabling cpu hot plug. Please stop the VM then do the cpu hot plug again",
    "en_US": "the VM cannot do cpu hot plug because of disabling cpu hot plug. Please stop the VM then do the cpu hot plug again",
    "zh_CN": "云主机无法执行在线添加CPU，因为未启用CPU热插拔。请关闭该云主机再尝试",
    "arguments": [],
    "line": 482,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM cannot do memory hot plug because of disabling memory hot plug. Please stop the VM then do the memory hot plug again",
    "en_US": "the VM cannot do memory hot plug because of disabling memory hot plug. Please stop the VM then do the memory hot plug again",
    "zh_CN": "云主机无法执行在线添加内存，因为未启用内存热插拔。请关闭该云主机再尝试",
    "arguments": [],
    "line": 488,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease cpu of vm[uuid:%s] when it is running",
    "en_US": "can\u0027t decrease cpu of vm[uuid:{0}] when it is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少CPU数目",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 506,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can\u0027t decrease memory size of vm[uuid:%s] when it is running",
    "en_US": "can\u0027t decrease memory size of vm[uuid:{0}] when it is running",
    "zh_CN": "无法在云主机[uuid:{0}]运行时减少容量",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 512,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "either l3NetworkUuids or imageUuid must be set",
    "en_US": "either l3NetworkUuids or imageUuid must be set",
    "zh_CN": "三层网络的uuid们或者镜像的uuid必须被设置",
    "arguments": [],
    "line": 523,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid IPv4 address",
    "en_US": "{0} is not a valid IPv4 address",
    "zh_CN": "{0}不是有效的IPv4地址",
    "arguments": [
      "ip"
    ],
    "line": 538,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ip address [%s] already set to vmNic [uuid:%s]",
    "en_US": "ip address [{0}] already set to vmNic [uuid:{1}]",
    "zh_CN": "IP地址[{0}]已经设置到网卡[uuid:{1}]",
    "arguments": [
      "ip",
      "vmNicVO.getUuid()"
    ],
    "line": 576,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ip address [%s] is not in ip range [%s]",
    "en_US": "ip address [{0}] is not in ip range [{1}]",
    "zh_CN": "IP地址[{0}]不在IP地址段[{1}]范围内",
    "arguments": [
      "ip",
      "rangeVO.getNetworkCidr()"
    ],
    "line": 557,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid IPv6 address",
    "en_US": "{0} is not a valid IPv6 address",
    "zh_CN": "{0}不是有效的IPv6地址",
    "arguments": [
      "ip"
    ],
    "line": 566,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ip address [%s] is not in ip range [startIp %s, endIp %s]",
    "en_US": "ip address [{0}] is not in ip range [startIp {1}, endIp {2}]",
    "zh_CN": "IP地址[{0}]不在IP地址段[{1}-{2}]范围内",
    "arguments": [
      "ip",
      "rangeVO.getStartIp()",
      "rangeVO.getEndIp()"
    ],
    "line": 584,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "could not set ip address, due to no ip address is specified",
    "en_US": "could not set ip address, due to no ip address is specified",
    "zh_CN": "无法设置IP地址，因为未指定IP地址",
    "arguments": [],
    "line": 595,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "static ip [%s] format error",
    "en_US": "static ip [{0}] format error",
    "zh_CN": "静态IP[{0}]格式错误",
    "arguments": [
      "msg.getIp()"
    ],
    "line": 610,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ipv4 address need a netmask",
    "en_US": "ipv4 address need a netmask",
    "zh_CN": "IPv4地址需要网络掩码",
    "arguments": [],
    "line": 622,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ip address [%s] already set to vmNic",
    "en_US": "ip address [{0}] already set to vmNic",
    "zh_CN": "IP地址[{0}]已设置为vmnic",
    "arguments": [
      "msg.getIp6()"
    ],
    "line": 640,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "ipv6 address need a prefix",
    "en_US": "ipv6 address need a prefix",
    "zh_CN": "IPv6地址需要前缀",
    "arguments": [],
    "line": 634,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the VM[uuid:%s] has no nic on the L3 network[uuid:%s]",
    "en_US": "the VM[uuid:{0}] has no nic on the L3 network[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]在三层网络[uuid:{1}]上没有任何网卡",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 654,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "could not delete static ip [%s] for vm [uuid:%s] because it doesn\u0027t existed",
    "en_US": "could not delete static ip [{0}] for vm [uuid:{1}] because it doesn\u0027t existed",
    "zh_CN": "无法删除VM[uuid：{1}]的静态IP[{0}]，因为它不存在",
    "arguments": [
      "msg.getStaticIp()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 661,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "invalid boot device[%s] in boot order%s",
    "en_US": "invalid boot device[{0}] in boot order{1}",
    "zh_CN": "在启动列表{1}中的设备[{0}]启动失败",
    "arguments": [
      "o",
      "msg.getBootOrder()"
    ],
    "line": 673,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "boot volume cannot be shareable.",
    "en_US": "boot volume cannot be shareable.",
    "zh_CN": "启动卷无法共享。",
    "arguments": [],
    "line": 696,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] must be attached to vm[uuid:%s]",
    "en_US": "volume[uuid:{0}] must be attached to vm[uuid:{1}]",
    "zh_CN": "卷[uuid：{0}]必须连接到云主机[uuid：{1}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 700,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "the vm %s with memory snapshots do not support setting boot volume",
    "en_US": "the vm {0} with memory snapshots do not support setting boot volume",
    "zh_CN": "具有内存快照的云主机{0}不支持设置启动卷",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 705,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Unsupported Image Media Type: [%s] ",
    "en_US": "Unsupported Image Media Type: [{0}] ",
    "zh_CN": "不支持的镜像媒体类型：[{0}]",
    "arguments": [
      "type"
    ],
    "line": 718,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The cdRom[uuid:%s] does not exist",
    "en_US": "The cdRom[uuid:{0}] does not exist",
    "zh_CN": "CDROM[uuid：{0}]不存在",
    "arguments": [
      "cdRomUuid"
    ],
    "line": 733,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] cdRom[uuid:%s] has mounted the ISO",
    "en_US": "VM[uuid:{0}] cdRom[uuid:{1}] has mounted the ISO",
    "zh_CN": "VM[uuid：{0}]CDROM[uuid：{1}]已装载ISO",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "cdRomUuid"
    ],
    "line": 737,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] has multiple ISOs attached, specify the isoUuid when detaching",
    "en_US": "VM[uuid:{0}] has multiple ISOs attached, specify the isoUuid when detaching",
    "zh_CN": "云主机[uuid:{0}]已经加载了多个ISO，卸载ISO时需要指定isoUuid",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 755,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is disabled",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is disabled",
    "zh_CN": "不能挂载三层网络，因为该三层网络[uuid:{0}]处于未启动状态",
    "arguments": [
      "l3Uuid"
    ],
    "line": 863,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to attach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "无法挂载三层网络。云主机[uuid: {0}]既不处于Running也不处于Stopped状态中，当前状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 813,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] doesn\u0027t has have ip range",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] doesn\u0027t has have ip range",
    "zh_CN": "无法连接三层网络。三层网络[uuid：{0}]没有IP范围",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 819,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] are belonged to different l2 networks [uuids:%s]",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] are belonged to different l2 networks [uuids:{1}]",
    "zh_CN": "不能挂载三层网络，三层网络[uuid:{0}]属于不同的二层网络",
    "arguments": [
      "newAddedL3Uuids",
      "l2Uuids"
    ],
    "line": 829,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] are belonged to l2 networks [uuids:%s] that have not been attached to any cluster",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] are belonged to l2 networks [uuids:{1}] that have not been attached to any cluster",
    "zh_CN": "无法连接三层网络。三层网络[uuid：{0}]属于尚未连接到任何群集的二层网络[uuid：{1}]",
    "arguments": [
      "newAddedL3Uuids",
      "l2Uuids"
    ],
    "line": 836,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "不能挂载三层网络，三层网络[uuid:{0}]已经挂载到云主机[uuid: {1}]上了",
    "arguments": [
      "attachedL3Uuids",
      "msg.getVmInstanceUuid()"
    ],
    "line": 848,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a non-guest L3 network. The L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach a non-guest L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "无法连接非来宾三层网络。三层网络[uuid：{0}]已连接到云主机[uuid：{1}]",
    "arguments": [
      "attachedL3Uuids",
      "msg.getVmInstanceUuid()"
    ],
    "line": 855,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach a L3 network. The L3 network[uuid:%s] is a system network and vm is a user vm",
    "en_US": "unable to attach a L3 network. The L3 network[uuid:{0}] is a system network and vm is a user vm",
    "zh_CN": "不能连接三层网络。这个三层网络[uuid:{0}]是系统网络，但云主机是一个用户云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 866,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "invalid json format, causes: %s",
    "en_US": "invalid json format, causes: {0}",
    "zh_CN": "无效的JSON格式，原因：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 1300,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to attach the nic. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "无法连接NIC。VM[uuid：{0}]未运行或已停止。当前状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 986,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. The nic has been attached with vm[uuid: %s]",
    "en_US": "unable to attach the nic. The nic has been attached with vm[uuid: {0}]",
    "zh_CN": "无法连接NIC。已使用VM[uuid：{0}]连接NIC",
    "arguments": [
      "vmNicVO.getVmInstanceUuid()"
    ],
    "line": 993,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach the nic. Its L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "无法连接NIC。其三层网络[uuid：{0}]已连接到云主机[uuid：{1}]",
    "arguments": [
      "vmNicVO.getL3NetworkUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 1004,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic with a non-guest L3 network. Its L3 network[uuid:%s] is already attached to the vm[uuid: %s]",
    "en_US": "unable to attach the nic with a non-guest L3 network. Its L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]",
    "zh_CN": "无法将NIC连接到非来宾三层网络。其三层网络[uuid：{0}]已连接到云主机[uuid：{1}]",
    "arguments": [
      "vmNicVO.getL3NetworkUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 1009,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its L3 network[uuid:%s] is disabled",
    "en_US": "unable to attach the nic. Its L3 network[uuid:{0}] is disabled",
    "zh_CN": "无法连接NIC。其三层网络[uuid：{0}]已禁用",
    "arguments": [
      "l3NetworkVO.getUuid()"
    ],
    "line": 1018,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its L3 network[uuid:%s] is a system network and vm is a user vm",
    "en_US": "unable to attach the nic. Its L3 network[uuid:{0}] is a system network and vm is a user vm",
    "zh_CN": "无法连接NIC。其三层网络[uuid：{0}]是系统网络，VM是用户VM",
    "arguments": [
      "l3NetworkVO.getUuid()"
    ],
    "line": 1021,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to attach the nic. Its l2 network [uuid:%s] that have not been attached to any cluster",
    "en_US": "unable to attach the nic. Its l2 network [uuid:{0}] that have not been attached to any cluster",
    "zh_CN": "无法连接NIC。其二层网络[uuid：{0}]尚未连接到任何群集",
    "arguments": [
      "l3NetworkVO.getL2NetworkUuid()"
    ],
    "line": 1028,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "could not update nic[uuid: %s] state, due to nic type[%s] not support",
    "en_US": "could not update nic[uuid: {0}] state, due to nic type[{1}] not support",
    "zh_CN": "无法更新NIC[uuid：{0}]状态，因为不支持NIC类型[{1}]",
    "arguments": [
      "msg.getVmNicUuid()",
      "nicVO.getType()"
    ],
    "line": 1037,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "could not update nic[uuid: %s] state, due to vm not support",
    "en_US": "could not update nic[uuid: {0}] state, due to vm not support",
    "zh_CN": "无法更新NIC[uuid：{0}]状态，因为VM不支持",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 1043,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "unable to detach a L3 network. The vm[uuid: %s] is not Running or Stopped; the current state is %s",
    "en_US": "unable to detach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}",
    "zh_CN": "不能卸载三层网络，云主机[uuid: {0}]不是运行状态或者暂停状态，状态为{1}",
    "arguments": [
      "vmUuid",
      "state"
    ],
    "line": 1060,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] can only attach volume when state is Running or Stopped, current state is %s",
    "en_US": "vm[uuid:{0}] can only attach volume when state is Running or Stopped, current state is {1}",
    "zh_CN": "云主机[uuid:{0}]挂载盘时状态只能是运行或者暂停状态，而现在的状态是{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 1075,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "image mediaType is ISO but missing root disk settings",
    "en_US": "image mediaType is ISO but missing root disk settings",
    "zh_CN": "镜像媒体类型为ISO，但缺少根磁盘设置",
    "arguments": [],
    "line": 1083,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Unexpected root disk settings",
    "en_US": "Unexpected root disk settings",
    "zh_CN": "意外的根磁盘设置",
    "arguments": [],
    "line": 1087,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Unexpected data disk settings. dataDiskSizes need to be greater than 0",
    "en_US": "Unexpected data disk settings. dataDiskSizes need to be greater than 0",
    "zh_CN": "意外的数据磁盘设置。DataDiskSizes需要大于0",
    "arguments": [],
    "line": 1154,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "at least one of field platform in msg or image[uuid:%s] should be set",
    "en_US": "at least one of field platform in msg or image[uuid:{0}] should be set",
    "zh_CN": "至少应设置消息或镜像[uuid：{0}]中的一个字段平台",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 1206,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "at least one of field guestOsType in msg or image[uuid:%s] should be set",
    "en_US": "at least one of field guestOsType in msg or image[uuid:{0}] should be set",
    "zh_CN": "至少应设置邮件或镜像[uuid：{0}]中的一个字段GuestOsType",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 1210,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "at least one of field architecture in msg or image[uuid:%s] should be set",
    "en_US": "at least one of field architecture in msg or image[uuid:{0}] should be set",
    "zh_CN": "至少应设置消息或镜像[uuid：{0}]中的一个字段体系结构",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 1214,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "cannot create vm instance from a shareable volume.",
    "en_US": "cannot create vm instance from a shareable volume.",
    "zh_CN": "无法从可共享云盘创建VM实例。",
    "arguments": [],
    "line": 1249,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "could not create vm instance from a attached volume.",
    "en_US": "could not create vm instance from a attached volume.",
    "zh_CN": "无法从连接的卷创建VM实例。",
    "arguments": [],
    "line": 1253,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] could not satisfy conditions[state:Enabled status:Ready]",
    "en_US": "volume[uuid:{0}] could not satisfy conditions[state:Enabled status:Ready]",
    "zh_CN": "卷[uuid：{0}]无法满足条件[状态：已启用状态：就绪]",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 1257,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "l3NetworkUuids and vmNicInventories mustn\u0027t both be empty or both be set",
    "en_US": "l3NetworkUuids and vmNicInventories mustn\u0027t both be empty or both be set",
    "zh_CN": "l3NetworkUuids和vmnicinventory不能同时为空或同时设置",
    "arguments": [],
    "line": 1293,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The image[uuid\u003d%s] does not exist",
    "en_US": "The image[uuid\u003d{0}] does not exist",
    "zh_CN": "镜像[uuid\u003d{0}]不存在",
    "arguments": [
      "cdRomIsoUuid"
    ],
    "line": 1415,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "Do not allow to mount duplicate ISO",
    "en_US": "Do not allow to mount duplicate ISO",
    "zh_CN": "不允许装载重复的ISO",
    "arguments": [],
    "line": 1420,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The console password cannot start with \u0027password\u0027 which may trigger a VNC security issue",
    "en_US": "The console password cannot start with \u0027password\u0027 which may trigger a VNC security issue",
    "zh_CN": "控制台密码不能以password开头，这样可能导致一个VNC安全问题",
    "arguments": [],
    "line": 1435,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "can not call this api because it\u0027s Deprecated",
    "en_US": "can not call this api because it\u0027s Deprecated",
    "zh_CN": "无法调用此API，因为它已被弃用",
    "arguments": [],
    "line": 1440,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "The CdRom[%s] Already the default",
    "en_US": "The CdRom[{0}] Already the default",
    "zh_CN": "CDROM[{0}]已经是默认的",
    "arguments": [
      "vmCdRomVO.getUuid()"
    ],
    "line": 1457,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s, name:%s] has been deleted",
    "en_US": "vm[uuid:{0}, name:{1}] has been deleted",
    "zh_CN": "云主机[uuid:{0}, name:{1}]已经被删除了",
    "arguments": [
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 271,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "failed to check state of the vm[uuid:%s] on the host[uuid:%s], %s",
    "en_US": "failed to check state of the vm[uuid:{0}] on the host[uuid:{1}], {2}",
    "zh_CN": "无法检查物理机[uuid：{1}]上的VM[uuid：{0}]的状态，{2}",
    "arguments": [
      "vmInv.getUuid()",
      "vmInv.getHostUuid()",
      "reply.getError()"
    ],
    "line": 595,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "got an unrecognized state of the vm[uuid:%s] on the host[uuid:%s]",
    "en_US": "got an unrecognized state of the vm[uuid:{0}] on the host[uuid:{1}]",
    "zh_CN": "物理机[uuid：{1}]上的VM[uuid：{0}]的状态无法识别",
    "arguments": [
      "vmInv.getUuid()",
      "vmInv.getHostUuid()"
    ],
    "line": 602,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the vm[uuid:%s] has no nic on the L3 network[uuid:%s]",
    "en_US": "the vm[uuid:{0}] has no nic on the L3 network[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}] 没有网卡在三层网络[uuid:{1}]上",
    "arguments": [
      "self.getUuid()",
      "l3Uuid"
    ],
    "line": 984,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the vm has been deleted",
    "en_US": "the vm has been deleted",
    "zh_CN": "云主机已经被删除了",
    "arguments": [],
    "line": 1382,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "VM[uuid:%s] state is not Running.",
    "en_US": "VM[uuid:{0}] state is not Running.",
    "zh_CN": "VM[uuid：{0}]状态未运行。",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 3758,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "the ISO[uuid:%s] is on backup storage that is not compatible of the primary storage[uuid:%s] where the VM[name:%s, uuid:%s] is on",
    "en_US": "the ISO[uuid:{0}] is on backup storage that is not compatible of the primary storage[uuid:{1}] where the VM[name:{2}, uuid:{3}] is on",
    "zh_CN": "ISO[uuid:{0}]在镜像服务器上，这个ISO不能兼容主存储[uuid:{1}]在云主机[name:{2}, uuid:{3}]上",
    "arguments": [
      "isoUuid",
      "psUuid",
      "self.getName()",
      "self.getUuid()"
    ],
    "line": 4837,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "host[uuid:%s] capacity is not enough to offer cpu[%s], memory[%s bytes]",
    "en_US": "host[uuid:{0}] capacity is not enough to offer cpu[{1}], memory[{2} bytes]",
    "zh_CN": "物理机[uuid:{0}]无法提供CPU: [{1}]，内存: [{2} bytes]",
    "arguments": [
      "self.getHostUuid()",
      "cpuNum - oldCpuNum",
      "struct.alignedMemory - oldMemorySize"
    ],
    "line": 5325,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "ISO[uuid:%s] is not attached to VM[uuid:%s]",
    "en_US": "ISO[uuid:{0}] is not attached to VM[uuid:{1}]",
    "zh_CN": "ISO[uuid:{0}]未被加载到云主机[uuid:{1}]",
    "arguments": [
      "isoUuid",
      "self.getUuid()"
    ],
    "line": 5633,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "One vm cannot create %s CDROMs, vm can only add %s CDROMs",
    "en_US": "One vm cannot create {0} CDROMs, vm can only add {1} CDROMs",
    "zh_CN": "一个VM无法创建{0}个CDROM，VM只能添加{1}个CDROM",
    "arguments": [
      "cdRomSpecs.size()",
      "max"
    ],
    "line": 7168,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "VM[uuid:%s] can only add %s CDROMs",
    "en_US": "VM[uuid:{0}] can only add {1} CDROMs",
    "zh_CN": "VM[uuid：{0}]只能添加{1}个CDROM",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "max"
    ],
    "line": 8150,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "update vm[%s] priority to [%s] failed,because %s",
    "en_US": "update vm[{0}] priority to [{1}] failed,because {2}",
    "zh_CN": "将云主机[{0}]的优先级更新为[{1}]失败，原因是{2}",
    "arguments": [
      "self.getUuid()",
      "msg.getPriority()",
      "reply.getError()"
    ],
    "line": 8219,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceBase.java"
  },
  {
    "raw": "VmInstanceStartNewCreatedVmExtensionPoint[%s] refuses to create vm[uuid:%s] because %s",
    "en_US": "VmInstanceStartNewCreatedVmExtensionPoint[{0}] refuses to create vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceStartNewCreatedVmExtensionPoint[{0}] 因为{2} 拒绝创建云主机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceRebootExtensionPoint[%s] refuses to reboot vm[uuid:%s] because %s",
    "en_US": "VmInstanceRebootExtensionPoint[{0}] refuses to reboot vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceRebootExtensionPoint[{0}] 因为{2} 拒绝重启云主机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceDestroyVmExtensionPoint[%s] refuses to destroy vm[uuid:%s] because %s",
    "en_US": "VmInstanceDestroyVmExtensionPoint[{0}] refuses to destroy vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceDestroyVmExtensionPoint[{0}] 因为{2} 拒绝删除云主机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 234,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "VmInstanceStartExtensionPoint[%s] refuses to start vm[uuid:%s] because %s",
    "en_US": "VmInstanceStartExtensionPoint[{0}] refuses to start vm[uuid:{1}] because {2}",
    "zh_CN": "VmInstanceStartExtensionPoint[{0}] 因为{2} 拒绝启动云主机[uuid:{1}]",
    "arguments": [
      "ext.getClass().getName()",
      "inv.getUuid()",
      "err"
    ],
    "line": 284,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java"
  },
  {
    "raw": "could not create vm, a vm with the name [%s] already exists",
    "en_US": "could not create vm, a vm with the name [{0}] already exists",
    "zh_CN": "无法创建VM，已存在名为[{0}]的VM",
    "arguments": [
      "msg.getName()"
    ],
    "line": 1136,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "rootDiskOfferingUuid cannot be null when create vm without image",
    "en_US": "rootDiskOfferingUuid cannot be null when create vm without image",
    "zh_CN": "在不使用镜像的情况下创建VM时，RootDiskOfferInGuuid不能为空",
    "arguments": [],
    "line": 2245,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Spice certificate does not exist, Please check if spice tls is enabled",
    "en_US": "Spice certificate does not exist, Please check if spice tls is enabled",
    "zh_CN": "SPICE证书不存在，请检查是否启用了SPICE TLS",
    "arguments": [],
    "line": 308,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the image[uuid:%s] is not on any backup storage that has been attached to the zone[uuid:%s]",
    "en_US": "the image[uuid:{0}] is not on any backup storage that has been attached to the zone[uuid:{1}]",
    "zh_CN": "镜像[uuid:{0}]不在任何加载到区域[uuid:{1}]的镜像服务器上",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 492,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "no primary storage accessible to the backup storage[uuid:%s, type:%s] is found",
    "en_US": "no primary storage accessible to the backup storage[uuid:{0}, type:{1}] is found",
    "zh_CN": "未找到镜像服务器[uuid:{0}, type:{1}]可访问的主存储",
    "arguments": [
      "bss.get(0).getUuid()",
      "bss.get(0).getType()"
    ],
    "line": 565,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the primary storages[uuids:%s] has not attached any cluster on the zone[uuid:%s]",
    "en_US": "the primary storages[uuids:{0}] has not attached any cluster on the zone[uuid:{1}]",
    "zh_CN": "主存储[uuids:{0}]尚未加载区域[uuid:{1}]上的任何集群",
    "arguments": [
      "psUuids",
      "zoneUuid"
    ],
    "line": 586,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "no l2Networks found in clusters that have attached to primary storages[uuids:%s]",
    "en_US": "no l2Networks found in clusters that have attached to primary storages[uuids:{0}]",
    "zh_CN": "在已加载到主存储[uuids:{0}]的集群中未找到二层网络",
    "arguments": [
      "psUuids"
    ],
    "line": 605,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "zoneUuid must be set because the image[name:%s, uuid:%s] is on multiple backup storage",
    "en_US": "zoneUuid must be set because the image[name:{0}, uuid:{1}] is on multiple backup storage",
    "zh_CN": "zoneUuid必须被设置，因为image[name:{0}, uuid:{1}]在多个镜像服务器上",
    "arguments": [
      "image.getName()",
      "image.getUuid()"
    ],
    "line": 672,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "CreateVmInstanceMsg cannot be null",
    "en_US": "CreateVmInstanceMsg cannot be null",
    "zh_CN": "CreateVmInstanceMsg不能为空",
    "arguments": [],
    "line": 1067,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "handle system tag fail when creating vm because [%s]",
    "en_US": "handle system tag fail when creating vm because [{0}]",
    "zh_CN": "由于[{0}]，在创建VM时处理系统标记失败",
    "arguments": [
      "StringUtils.join(errorCodes.stream().map(ErrorCode::getDescription).collect(Collectors.toList()), \", \")"
    ],
    "line": 1158,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "unable to enable this function. There are multi nics of L3 network[uuid:%s] in the vm[uuid: %s]",
    "en_US": "unable to enable this function. There are multi nics of L3 network[uuid:{0}] in the vm[uuid: {1}]",
    "zh_CN": "无法启用此功能。云主机[uuid：{1}]中存在多个三层网络[uuid：{0}]的NIC",
    "arguments": [
      "tuple.get(0, String.class)",
      "tuple.get(1, String.class)"
    ],
    "line": 1589,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "hostname[%s] specified in system tag[%s] is not a valid domain name",
    "en_US": "hostname[{0}] specified in system tag[{1}] is not a valid domain name",
    "zh_CN": "在系统标签[{1}]中特别声明的物理机名[{0}]不是一个有效的域名",
    "arguments": [
      "hostname",
      "tag"
    ],
    "line": 1623,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "only one hostname system tag is allowed, but %s got",
    "en_US": "only one hostname system tag is allowed, but {0} got",
    "zh_CN": "只允许通过系统标签设置一个物理机名，但是实际上有{0}",
    "arguments": [
      "hostnameCount"
    ],
    "line": 1635,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "%s is not a valid ip address. Please correct your system tag[%s] of static IP",
    "en_US": "{0} is not a valid ip address. Please correct your system tag[{1}] of static IP",
    "zh_CN": "{0}不是有效的IP地址。请更正静态IP的系统标记[{1}]",
    "arguments": [
      "ip",
      "sysTag"
    ],
    "line": 1660,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "IP[%s] is already used on the L3 network[uuid:%s]. Please correct your system tag[%s] of static IP",
    "en_US": "IP[{0}] is already used on the L3 network[uuid:{1}]. Please correct your system tag[{2}] of static IP",
    "zh_CN": "IP[{0}]已在三层网络[uuid：{1}]上使用。请更正静态IP的系统标记[{2}]",
    "arguments": [
      "ip",
      "l3Uuid",
      "sysTag"
    ],
    "line": 1666,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "IP[%s] is not available on the L3 network[uuid:%s] because: %s",
    "en_US": "IP[{0}] is not available on the L3 network[uuid:{1}] because: {2}",
    "zh_CN": "在三层网络[uuid:{1}]中，IP[{0}]不可用, 因为{2}",
    "arguments": [
      "ip",
      "l3Uuid",
      "cr.getReason()"
    ],
    "line": 1683,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "conflict hostname in system tag[%s]; there has been a VM[uuid:%s] having hostname[%s] on L3 network[uuid:%s]",
    "en_US": "conflict hostname in system tag[{0}]; there has been a VM[uuid:{1}] having hostname[{2}] on L3 network[uuid:{3}]",
    "zh_CN": "系统标签的物理机名存在冲突[{0}]；已经存在以一个物理机名为[{2}]的VM[uuid:{1}]出现在三层网络[uuid:{3}]中",
    "arguments": [
      "tag",
      "sameTag.getResourceUuid()",
      "hostname",
      "l3Uuid"
    ],
    "line": 1706,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "invalid boot device[%s] in boot order[%s]",
    "en_US": "invalid boot device[{0}] in boot order[{1}]",
    "zh_CN": "在引导顺序[{1}]中存在无效的引导设备[{0}]",
    "arguments": [
      "o",
      "order"
    ],
    "line": 1737,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "cpuSockets must be an integer",
    "en_US": "cpuSockets must be an integer",
    "zh_CN": "CPUSockets必须为整数",
    "arguments": [],
    "line": 1753,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "cpuCores must be an integer",
    "en_US": "cpuCores must be an integer",
    "zh_CN": "cpucores必须为整数",
    "arguments": [],
    "line": 1762,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "cpuThreads must be an integer",
    "en_US": "cpuThreads must be an integer",
    "zh_CN": "CPUThreads必须为整数",
    "arguments": [],
    "line": 1771,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Already have one userdata systemTag for vm[uuid: %s].",
    "en_US": "Already have one userdata systemTag for vm[uuid: {0}].",
    "zh_CN": "在云主机[uuid:{0}]已经存在一个userdata的系统标签",
    "arguments": [
      "resourceUuid"
    ],
    "line": 1782,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Shouldn\u0027t be more than one userdata systemTag for one vm.",
    "en_US": "Shouldn\u0027t be more than one userdata systemTag for one vm.",
    "zh_CN": "在一个云主机中不能存在多个userdata的系统标签",
    "arguments": [],
    "line": 1808,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "vm machine type requires [q35, pc, virt], but get [%s]",
    "en_US": "vm machine type requires [q35, pc, virt], but get [{0}]",
    "zh_CN": "VM计算机类型需要[q35，PC，virt]，但得到[{0}]",
    "arguments": [
      "type"
    ],
    "line": 1932,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "invalid securityElementEnable[%s], %s is not securityElementEnable tag",
    "en_US": "invalid securityElementEnable[{0}], {1} is not securityElementEnable tag",
    "zh_CN": "SecurityElementEnable[{0}]无效，{1}不是SecurityElementEnable标记",
    "arguments": [
      "systemTag",
      "SecurityElementEnableTokenByTag"
    ],
    "line": 1992,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "invalid securityElementEnable[%s], %s is not boolean class",
    "en_US": "invalid securityElementEnable[{0}], {1} is not boolean class",
    "zh_CN": "SecurityElementEnable[{0}]无效，{1}不是布尔类",
    "arguments": [
      "systemTag",
      "SecurityElementEnableTokenByTag"
    ],
    "line": 1995,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "invalid usbRedirect[%s], %s is not usbRedirect tag",
    "en_US": "invalid usbRedirect[{0}], {1} is not usbRedirect tag",
    "zh_CN": "usbRedirect[{0}]无效，{1}不是usbRedirect标记",
    "arguments": [
      "systemTag",
      "usbRedirectTokenByTag"
    ],
    "line": 2022,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "invalid usbRedirect[%s], %s is not boolean class",
    "en_US": "invalid usbRedirect[{0}], {1} is not boolean class",
    "zh_CN": "usbRedirect[{0}]无效，{1}不是布尔类",
    "arguments": [
      "systemTag",
      "usbRedirectTokenByTag"
    ],
    "line": 2025,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "the resource[uuid:%s] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to",
    "en_US": "the resource[uuid:{0}] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to",
    "zh_CN": "当前资源[uuid:{0}]是一个云盘，你不能改变它的所有者，但是你能够修改对应VM的所有者",
    "arguments": [
      "ref.getResourceUuid()"
    ],
    "line": 2561,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java"
  },
  {
    "raw": "Failed to instantiate volume. Because vm\u0027s host[uuid: %s] and allocated primary storage[uuid: %s] is not connected.",
    "en_US": "Failed to instantiate volume. Because vm\u0027s host[uuid: {0}] and allocated primary storage[uuid: {1}] is not connected.",
    "zh_CN": "无法实例化卷。因为VM的物理机[uuid：{0}]和分配的主存储[uuid：{1}]未连接。",
    "arguments": [
      "spec.getDestHost().getUuid()",
      "pinv.getUuid()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/compute/vm/VmInstantiateAttachingVolumeFlow.java"
  },
  {
    "raw": "Duplicate mac address [%s]",
    "en_US": "Duplicate mac address [{0}]",
    "zh_CN": "重复的MAC地址[{0}]",
    "arguments": [
      "msg.getMac()"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "clean traffic is not supported for vm type [%s]",
    "en_US": "clean traffic is not supported for vm type [{0}]",
    "zh_CN": "VM类型[{0}]不支持清理流量",
    "arguments": [
      "vmType"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The number of data volumes exceeds the limit[num: %s], please reduce the number of data volumes during vm creation.",
    "en_US": "The number of data volumes exceeds the limit[num: {0}], please reduce the number of data volumes during vm creation.",
    "zh_CN": "数据云盘的数量超过限制[数量：{0}]，请在创建云主机期间减少数据云盘的数量。",
    "arguments": [
      "KVMGlobalConfig.MAX_DATA_VOLUME_NUM.value(int.class)"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Can not set security level to not %s vm [uuid:%s]",
    "en_US": "Can not set security level to not {0} vm [uuid:{1}]",
    "zh_CN": "设置密级失败，无法对不处于{0}状态的云主机操作[uuid:{1}]",
    "arguments": [
      "VmInstanceState.Stopped",
      "msg.getVmInstanceUuid()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The operation only allows on user vm",
    "en_US": "The operation only allows on user vm",
    "zh_CN": "该操作仅允许在用户云主机上执行",
    "arguments": [],
    "line": 147,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "there are not enough capacity for full vm clone to vm[uuid: %s], volumes[uuid: %s] on primary storage[uuid: %s] required: %s bytes, current available capacity is %s bytes",
    "en_US": "there are not enough capacity for full vm clone to vm[uuid: {0}], volumes[uuid: {1}] on primary storage[uuid: {2}] required: {3} bytes, current available capacity is {4} bytes",
    "zh_CN": "没有足够的空间对云主机[uuid: {0}]做整机克隆，主存储[uuid: {2}]上的云盘[uuid: {1}]共需要[{3}]字节的空间，目前主存储的可用空间为[{4}]字节",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "volumeVOS.stream().map(VolumeVO::getUuid).collect(Collectors.toList())",
      "primaryStorageUuid",
      "(totalCapacity - snapshotsCapacity) * msg.getNames().size()",
      "primaryStorageVO.getCapacity().getAvailableCapacity()"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The nic [%s%s] is not mounted on the VM",
    "en_US": "The nic [{0}{1}] is not mounted on the VM",
    "zh_CN": "网卡[{0}]不能被挂载到云主机上",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The operation only allows on user vm ",
    "en_US": "The operation only allows on user vm ",
    "zh_CN": "该操作只能在用户云主机上进行",
    "arguments": [],
    "line": 197,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The operation only allows when vm [%s] state is stopped ",
    "en_US": "The operation only allows when vm [{0}] state is stopped ",
    "zh_CN": "该操作只有云主机[{0}]状态为已停止才能进行",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "user has no privilege to change image of vm %s",
    "en_US": "user has no privilege to change image of vm {0}",
    "zh_CN": "当前用户不能修改云主机{0}的镜像",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "do not change vm image when it\u0027s not stopped",
    "en_US": "do not change vm image when it\u0027s not stopped",
    "zh_CN": "当云主机镜像未停止时，不要更改它",
    "arguments": [],
    "line": 243,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "make sure the primary storage vm[uuid:%s] was on is Enabled and Connected",
    "en_US": "make sure the primary storage vm[uuid:{0}] was on is Enabled and Connected",
    "zh_CN": "确认主存储[uuid:{0}]是可用的且已连接",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 260,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "make sure the last host vm[uuid:%s] was on is Enabled and Connected",
    "en_US": "make sure the last host vm[uuid:{0}] was on is Enabled and Connected",
    "zh_CN": "确定物理机[uuid:{0}]是可用的且已连接",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 275,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] has no default l3, cannot change image for it",
    "en_US": "vm[uuid:{0}] has no default l3, cannot change image for it",
    "zh_CN": "VM[uuid：{0}]没有默认的L3，无法为其更改镜像",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 285,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "instance[uuid:%s] cannot be changed image to image[uuid:%s]",
    "en_US": "instance[uuid:{0}] cannot be changed image to image[uuid:{1}]",
    "zh_CN": "无法将实例[uuid：{0}]的镜像更改为镜像[uuid：{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getImageUuid()"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "either uuid or account or password must be set",
    "en_US": "either uuid or account or password must be set",
    "zh_CN": "uuid或者账户或者密码需要被设置",
    "arguments": [],
    "line": 314,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "direction must be set in (in, out), but was %s",
    "en_US": "direction must be set in (in, out), but was {0}",
    "zh_CN": "方向必须设置在(in, out)，但是输入的是{0}",
    "arguments": [
      "msg.getDirection()"
    ],
    "line": 327,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "Monitor number must be 1 or 2 or 4.",
    "en_US": "Monitor number must be 1 or 2 or 4.",
    "zh_CN": "监听器数量必须是1、2或4",
    "arguments": [],
    "line": 333,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "outboundBandwidth and inboundBandwidth must be set at lease one.",
    "en_US": "outboundBandwidth and inboundBandwidth must be set at lease one.",
    "zh_CN": "上行带宽和下行带宽至少有一个需要被设置",
    "arguments": [],
    "line": 341,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "the nic can\u0027t apply Qos with the port mirror service at same time.",
    "en_US": "the nic can\u0027t apply Qos with the port mirror service at same time.",
    "zh_CN": "NIC不能同时对端口镜像服务应用QoS。",
    "arguments": [],
    "line": 350,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "nic id: %s does not exist...",
    "en_US": "nic id: {0} does not exist...",
    "zh_CN": "网卡id: {0}不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 359,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "The \u0027uuids\u0027 parameter must belong to the VmInstanceVO or HostVO",
    "en_US": "The \u0027uuids\u0027 parameter must belong to the VmInstanceVO or HostVO",
    "zh_CN": "“ uuids ”参数必须属于vminstancevo或hostvo",
    "arguments": [],
    "line": 370,
    "fileName": "src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java"
  },
  {
    "raw": "vm current state[%s], modify virtio requires the vm state[%s]",
    "en_US": "vm current state[{0}], modify virtio requires the vm state[{1}]",
    "zh_CN": "VM当前状态[{0}]，修改virtio需要VM状态[{1}]",
    "arguments": [
      "state",
      "VmInstanceState.Stopped"
    ],
    "line": 261,
    "fileName": "src/main/java/org/zstack/compute/vm/VmNicManagerImpl.java"
  },
  {
    "raw": "wrong format of password strength config",
    "en_US": "wrong format of password strength config",
    "zh_CN": "密码强度配置的格式错误",
    "arguments": [],
    "line": 111,
    "fileName": "src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java"
  },
  {
    "raw": "minimum can not be larger than maximum",
    "en_US": "minimum can not be larger than maximum",
    "zh_CN": "最小值不能大于最大值",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java"
  },
  {
    "raw": "password length must be [%s-%s]",
    "en_US": "password length must be [{0}-{1}]",
    "zh_CN": "密码长度必须为[{0}-{1}]",
    "arguments": [
      "minimum",
      "maximum"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java"
  },
  {
    "raw": "password does not match numbers, uppercase and lowercase, and special character combinations",
    "en_US": "password does not match numbers, uppercase and lowercase, and special character combinations",
    "zh_CN": "密码与数字、大小写和特殊字符组合不匹配",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java"
  },
  {
    "raw": "missing parameter, resourceUuid: %s, vmInstanceUuid: %s is requested",
    "en_US": "missing parameter, resourceUuid: {0}, vmInstanceUuid: {1} is requested",
    "zh_CN": "缺少参数，ResourceUuid：{0}，请求vmInstanceUuid：{1}",
    "arguments": [
      "resourceUuid",
      "vmInstanceUuid"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java"
  },
  {
    "raw": "missing parameter, vmInstanceUuid: %s is requested",
    "en_US": "missing parameter, vmInstanceUuid: {0} is requested",
    "zh_CN": "缺少参数，请求了vmInstanceUuid：{0}",
    "arguments": [
      "vmInstanceUuid"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java"
  },
  {
    "raw": "cannot find vm with uuid: %s",
    "en_US": "cannot find vm with uuid: {0}",
    "zh_CN": "找不到uuid为{0}的云主机",
    "arguments": [
      "vmInstanceUuid"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java"
  },
  {
    "raw": "cannot find vm device with uuid: %s",
    "en_US": "cannot find vm device with uuid: {0}",
    "zh_CN": "找不到uuid为{0}的VM设备",
    "arguments": [
      "resourceUuid"
    ],
    "line": 338,
    "fileName": "src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java"
  },
  {
    "raw": "vm[%s] start fail,because numa is enable but host[%s] not have numa node",
    "en_US": "vm[{0}] start fail,because numa is enable but host[{1}] not have numa node",
    "zh_CN": "VM[{0}]启动失败，因为已启用NUMA，但物理机[{1}]没有NUMA节点",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 38,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java"
  },
  {
    "raw": "vm[%s] start fail,because numa is enable but cpu not pin",
    "en_US": "vm[{0}] start fail,because numa is enable but cpu not pin",
    "zh_CN": "VM[{0}]启动失败，因为NUMA已启用，但CPU未pin",
    "arguments": [
      "vmUuid"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java"
  },
  {
    "raw": "hot plug not close",
    "en_US": "hot plug not close",
    "zh_CN": "热插拔未关闭",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java"
  },
  {
    "raw": "vm cpu not all pinning",
    "en_US": "vm cpu not all pinning",
    "zh_CN": "云主机CPU未完全固定",
    "arguments": [],
    "line": 49,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java"
  },
  {
    "raw": "cpu[%s] not pin in a same host numa node",
    "en_US": "cpu[{0}] not pin in a same host numa node",
    "zh_CN": "CPU[{0}]未固定在同一物理机NUMA节点中",
    "arguments": [
      "entry.getKey().toString()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java"
  },
  {
    "raw": "vm[%s] start fail,because numa is enable but: %s",
    "en_US": "vm[{0}] start fail,because numa is enable but: {1}",
    "zh_CN": "VM[{0}]启动失败，因为NUMA已启用，但：{1}",
    "arguments": [
      "vmUuid",
      "String.join(VmNumaConstant.RULES_SEPARATOR, errors)"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java"
  },
  {
    "raw": "No host is available to create vm Instance.Because vNuma vms need to be created on hosts with same numa, but no hosts is available after filter primary vm\u0027s host",
    "en_US": "No host is available to create vm Instance.Because vNuma vms need to be created on hosts with same numa, but no hosts is available after filter primary vm\u0027s host",
    "zh_CN": "没有物理机可用于创建VM实例。因为需要在具有相同NUMA的物理机上创建vNUMA VM，但在筛选主VM的物理机后没有可用的物理机",
    "arguments": [],
    "line": 52,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/VmNumaFilterFlow.java"
  },
  {
    "raw": "fail to set vm numa, incorrect input format,only accept true or false",
    "en_US": "fail to set vm numa, incorrect input format,only accept true or false",
    "zh_CN": "无法设置VM NUMA，输入格式不正确，仅接受TRUE或FALSE",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/VmNumaManagerImpl.java"
  },
  {
    "raw": "invalid cpu set [%s]",
    "en_US": "invalid cpu set [{0}]",
    "zh_CN": "CPU集[{0}]无效",
    "arguments": [
      "word"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/compute/vm/numa/VmNumaUtils.java"
  },
  {
    "raw": "the host[uuid:%s] already attached to host scheduling group[uuid:%s]",
    "en_US": "the host[uuid:{0}] already attached to host scheduling group[uuid:{1}]",
    "zh_CN": "物理机[uuid：{0}]已连接到物理机调度组[uuid：{1}]",
    "arguments": [
      "msg.getHostUuid()",
      "refVO.getHostGroupUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "host clusterUuid is null",
    "en_US": "host clusterUuid is null",
    "zh_CN": "物理机Clusteruuid为空",
    "arguments": [],
    "line": 107,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "hosts that you can add to a host scheduling group must be enabled and connected to the MN.",
    "en_US": "hosts that you can add to a host scheduling group must be enabled and connected to the MN.",
    "zh_CN": "您可以添加到物理机调度组的物理机必须启用并连接到Mn。",
    "arguments": [],
    "line": 111,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "unmatched zone detected, host[uuid: %s, zone uuid: %s]\u0027s zone is different from host sheduling rule group[uuid: %s, zone uuid: %s]",
    "en_US": "unmatched zone detected, host[uuid: {0}, zone uuid: {1}]\u0027s zone is different from host sheduling rule group[uuid: {2}, zone uuid: {3}]",
    "zh_CN": "检测到不匹配的区域，物理机[uuid：{0}，区域uuid：{1}]的区域不同于物理机计划规则组[UUId：{2}，区域UUId：{3}]",
    "arguments": [
      "hostVO.getUuid()",
      "hostVO.getZoneUuid()",
      "hostGroup.getUuid()",
      "hostGroup.getZoneUuid()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] already attached to vm scheduling group[uuid:%s]",
    "en_US": "vm[uuid:{0}] already attached to vm scheduling group[uuid:{1}]",
    "zh_CN": "云主机[uuid：{0}]已连接到云主机调度组[uuid：{1}]",
    "arguments": [
      "msg.getVmUuid()",
      "refVO.getVmGroupUuid()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "unmatched zone detected, vm[uuid: %s, zone uuid: %s]\u0027s zone is different from vm sheduling rule group[uuid: %s, zone uuid: %s]",
    "en_US": "unmatched zone detected, vm[uuid: {0}, zone uuid: {1}]\u0027s zone is different from vm sheduling rule group[uuid: {2}, zone uuid: {3}]",
    "zh_CN": "检测到不匹配的区域，VM[uuid：{0}，区域uuid：{1}]的区域不同于VM调度规则组[UUId：{2}，区域UUId：{3}]",
    "arguments": [
      "vm.getUuid()",
      "vm.getZoneUuid()",
      "groupVO.getUuid()",
      "groupVO.getZoneUuid()"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "vm can change its vm scheduling group only in state [%s,%s], but vm is in state [%s]",
    "en_US": "vm can change its vm scheduling group only in state [{0},{1}], but vm is in state [{2}]",
    "zh_CN": "VM只能在状态[{0}，{1}]下更改其VM调度组，但VM处于状态[{2}]",
    "arguments": [
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Stopped.toString()",
      "vm.getState().toString()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "cannot operate vpc vm scheduling group",
    "en_US": "cannot operate vpc vm scheduling group",
    "zh_CN": "无法运行VPC云主机调度组",
    "arguments": [],
    "line": 171,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "zoneUuid is not null",
    "en_US": "zoneUuid is not null",
    "zh_CN": "zoneUuid不为空",
    "arguments": [],
    "line": 209,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "the vm scheduling group[uuid:%s] has already had a executed exclusive vm or affinitive vm scheduling policy attached. you cannot attach either of the two scheduling policies that require execution to the group again",
    "en_US": "the vm scheduling group[uuid:{0}] has already had a executed exclusive vm or affinitive vm scheduling policy attached. you cannot attach either of the two scheduling policies that require execution to the group again",
    "zh_CN": "VM调度组[uuid：{0}]已附加已执行的独占VM或关联VM调度策略。您不能再次将需要执行的两个计划策略中的任何一个附加到组",
    "arguments": [],
    "line": 399,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java"
  },
  {
    "raw": "can not satisfied vm scheduling rule group conditions",
    "en_US": "can not satisfied vm scheduling rule group conditions",
    "zh_CN": "无法满足VM调度规则组条件",
    "arguments": [],
    "line": 132,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleFilterFlow.java"
  },
  {
    "raw": "vm scheduling group[uuid:%s] reserve host [uuid:%s] for vm [uuid: %s] failed",
    "en_US": "vm scheduling group[uuid:{0}] reserve host [uuid:{1}] for vm [uuid: {2}] failed",
    "zh_CN": "云主机调度组[uuid：{0}]为云主机[uuid：{2}]保留物理机[UuId：{1}]失败",
    "arguments": [
      "self.getUuid()",
      "host.getUuid()",
      "vmUuid"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java"
  },
  {
    "raw": "vm[uuid:%s] is now running on host[uuid:%s],which does not comply with the scheduling rule associated with vm scheduling group[uuid:%s].",
    "en_US": "vm[uuid:{0}] is now running on host[uuid:{1}],which does not comply with the scheduling rule associated with vm scheduling group[uuid:{2}].",
    "zh_CN": "云主机[uuid：{0}]现在正在物理机[uuid：{1}]上运行，该物理机不符合与云主机调度组[uuid：{2}]关联的调度规则。",
    "arguments": [
      "vmInv.getUuid()",
      "hostUuid",
      "refVO.getVmGroupUuid()"
    ],
    "line": 392,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java"
  },
  {
    "raw": "hostGroup[uuid:%s] is no host",
    "en_US": "hostGroup[uuid:{0}] is no host",
    "zh_CN": "物理机组[uuid：{0}]不是物理机",
    "arguments": [
      "msg.getVmGroupUuid()"
    ],
    "line": 402,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java"
  },
  {
    "raw": "vm[uuid:%s] is now running on host[uuid:%s], which does not comply with the scheduling rule[%s] associated with vm scheduling group[uuid:%s].",
    "en_US": "vm[uuid:{0}] is now running on host[uuid:{1}], which does not comply with the scheduling rule[{2}] associated with vm scheduling group[uuid:{3}].",
    "zh_CN": "云主机[uuid：{0}]现在正在物理机[uuid：{1}]上运行，该物理机不符合与云主机调度组[uuid：{3}]关联的调度规则[{2}]。",
    "arguments": [
      "msg.getVmUuid()",
      "hostUuid",
      "VMSchedulingRuleType.AFFINITY.toString()",
      "msg.getVmGroupUuid()"
    ],
    "line": 407,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java"
  },
  {
    "raw": "vm[uuid:%s] is now running on host[uuid:%s],which does not comply with the scheduling rule[%s] associated with vm scheduling group[uuid:%s].",
    "en_US": "vm[uuid:{0}] is now running on host[uuid:{1}],which does not comply with the scheduling rule[{2}] associated with vm scheduling group[uuid:{3}].",
    "zh_CN": "云主机[uuid：{0}]现在正在物理机[uuid：{1}]上运行，该物理机不符合与云主机调度组[UuId：{3}]关联的调度规则[{2}]。",
    "arguments": [
      "msg.getVmUuid()",
      "hostUuid",
      "VMSchedulingRuleType.ANTIAFFINITY.toString()",
      "msg.getVmGroupUuid()"
    ],
    "line": 414,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java"
  },
  {
    "raw": "cannot find the host scheduling group[uuid:%s], it may have been deleted",
    "en_US": "cannot find the host scheduling group[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到物理机调度组[uuid：{0}]，它可能已被删除",
    "arguments": [
      "msg.getHostGroupUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java"
  },
  {
    "raw": "cannot find the vm scheduling rule[uuid:%s], it may have been deleted",
    "en_US": "cannot find the vm scheduling rule[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到VM计划规则[uuid：{0}]，它可能已被删除",
    "arguments": [
      "msg.getVmSchedulingRuleUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java"
  },
  {
    "raw": "cannot find the vm scheduling group[uuid:%s], it may have been deleted",
    "en_US": "cannot find the vm scheduling group[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到VM调度组[uuid：{0}]，它可能已被删除",
    "arguments": [
      "msg.getVmSchedulingRuleGroupUuid()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java"
  },
  {
    "raw": "unsupported host allocation strategy[%s]",
    "en_US": "unsupported host allocation strategy[{0}]",
    "zh_CN": "不被支持的物理机分配策略[{0}]",
    "arguments": [
      "msg.getAllocatorStrategy()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "unsupported instance offering type[%s]",
    "en_US": "unsupported instance offering type[{0}]",
    "zh_CN": "不被支持的计算规格类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "cpu num[%s] is less than 1",
    "en_US": "cpu num[{0}] is less than 1",
    "zh_CN": "cpu数量[{0}]少于1",
    "arguments": [
      "msg.getCpuNum()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "memory size[%s bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size",
    "en_US": "memory size[{0} bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size",
    "zh_CN": "内存大小[{0} bytes]少于16M，没有一个现代操作系统能够在如此小的内存里被引导",
    "arguments": [
      "msg.getMemorySize()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "unsupported primary storage allocation strategy[%s]",
    "en_US": "unsupported primary storage allocation strategy[{0}]",
    "zh_CN": "不被支持的主存储分配策略[{0}]",
    "arguments": [
      "msg.getAllocationStrategy()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java"
  },
  {
    "raw": "Already have one userdata systemTag for instanceOffering[uuid: %s].",
    "en_US": "Already have one userdata systemTag for instanceOffering[uuid: {0}].",
    "zh_CN": "实例[uuid：{0}]已有一个用户数据系统标记。",
    "arguments": [
      "resourceUuid"
    ],
    "line": 1043,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java"
  },
  {
    "raw": "Shouldn\u0027t be more than one systemTag for one instanceOffering.",
    "en_US": "Shouldn\u0027t be more than one systemTag for one instanceOffering.",
    "zh_CN": "对于一个实例提供，不应超过一个系统标记。",
    "arguments": [],
    "line": 1108,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java"
  },
  {
    "raw": "Already have one userdata systemTag for diskOffering[uuid: %s].",
    "en_US": "Already have one userdata systemTag for diskOffering[uuid: {0}].",
    "zh_CN": "DiskOffering[uuid：{0}]已有一个UserData系统标记。",
    "arguments": [
      "resourceUuid"
    ],
    "line": 1085,
    "fileName": "src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java"
  },
  {
    "raw": "the console agent is not connected; it\u0027s mostly like the management node just starts, please wait for the console agent connected, or you can reconnect it manually if disconnected for a long time.",
    "en_US": "the console agent is not connected; it\u0027s mostly like the management node just starts, please wait for the console agent connected, or you can reconnect it manually if disconnected for a long time.",
    "zh_CN": "控制台代理失联，很有可能管理节点刚刚启动，请等待控制台代理的连接，如果长时间没有连上可以尝试手动重连控制台代理。",
    "arguments": [],
    "line": 104,
    "fileName": "src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java"
  },
  {
    "raw": "cannot find host IP of the vm[uuid:%s], is the vm running???",
    "en_US": "cannot find host IP of the vm[uuid:{0}], is the vm running???",
    "zh_CN": "无法找到vm[uuid:{0}]的物理机IP，请确认该vm是否在运行？？？",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java"
  },
  {
    "raw": "Console is only available when the VM[uuid:%s] is Running or Crashed, but the current state is %s",
    "en_US": "Console is only available when the VM[uuid:{0}] is Running or Crashed, but the current state is {1}",
    "zh_CN": "控制台仅在VM[uuid：{0}]正在运行或崩溃时可用，但当前状态为{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/console/ConsoleApiInterceptor.java"
  },
  {
    "raw": "establish VNC: unexpected uri: %s",
    "en_US": "establish VNC: unexpected uri: {0}",
    "zh_CN": "建立VNC：意外的URI：{0}",
    "arguments": [
      "uri.toString()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyBase.java"
  },
  {
    "raw": "unable to check console proxy availability, because %s",
    "en_US": "unable to check console proxy availability, because {0}",
    "zh_CN": "无法检查控制台代理是否可用，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/console/ConsoleProxyBase.java"
  },
  {
    "raw": "Ansible private key not found.",
    "en_US": "Ansible private key not found.",
    "zh_CN": "找不到Ansible私钥。",
    "arguments": [],
    "line": 189,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "invalid management node uuid[%s]",
    "en_US": "invalid management node uuid[{0}]",
    "zh_CN": "非法的管理节点uuid[{0}]",
    "arguments": [
      "uuid"
    ],
    "line": 387,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "failed to configure consoleProxyOverriddenIp[code:%d] or consoleProxyPort[code:%d]",
    "en_US": "failed to configure consoleProxyOverriddenIp[code:{0}] or consoleProxyPort[code:{1}]",
    "zh_CN": "无法配置ConsoleProxyOverriddeNip[代码：{0}]或ConsoleProxyPort[代码：{1}]",
    "arguments": [],
    "line": 520,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "failed to reconnect console proxy",
    "en_US": "failed to reconnect console proxy",
    "zh_CN": "重连控制台代理失败",
    "arguments": [],
    "line": 543,
    "fileName": "src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java"
  },
  {
    "raw": "User name or password or port number may be problematic",
    "en_US": "User name or password or port number may be problematic",
    "zh_CN": "用户名、密码或者端口可能是错误的",
    "arguments": [],
    "line": 426,
    "fileName": "src/main/java/org/zstack/core/ansible/AnsibleRunner.java"
  },
  {
    "raw": "cannot check md5sum of files in the folder[%s].\\nstdout:%s\\nstderr:%s",
    "en_US": "cannot check md5sum of files in the folder[{0}].\\nstdout:{1}\\nstderr:{2}",
    "zh_CN": "无法检查文件夹[{0}]下文件的md5sum.\\nstdout:{1}\\nstderr:{2}",
    "arguments": [
      "srcFolder",
      "srcRes.getStdout()",
      "srcRes.getStderr()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java"
  },
  {
    "raw": "cannot check md5sum of files in the folder[%s] on the host[ip:%s].\\nstdout:%s\\nstderr:%s",
    "en_US": "cannot check md5sum of files in the folder[{0}] on the host[ip:{1}].\\nstdout:{2}\\nstderr:{3}",
    "zh_CN": "无法检查物理机[ip:{1}]的文件夹[{0}]下文件的md5sum.\\nstdout:{2}\\nstderr:{3}",
    "arguments": [
      "dstFolder",
      "hostname",
      "dstRes.getStdout()",
      "dstRes.getStderr()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java"
  },
  {
    "raw": "message is not in corrected JSON mediaType, %s",
    "en_US": "message is not in corrected JSON mediaType, {0}",
    "zh_CN": "消息是错误的JSON格式，{0}",
    "arguments": [
      "errMsg"
    ],
    "line": 684,
    "fileName": "src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java"
  },
  {
    "raw": "for webhooks with type[%s], the field opaque cannot be null",
    "en_US": "for webhooks with type[{0}], the field opaque cannot be null",
    "zh_CN": "对于[{0}]类型的webhooks，opaque字段不能为null",
    "arguments": [
      "EventFacade.WEBHOOK_TYPE"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java"
  },
  {
    "raw": "do not allow skip verification",
    "en_US": "do not allow skip verification",
    "zh_CN": "不允许跳过验证",
    "arguments": [],
    "line": 430,
    "fileName": "src/main/java/org/zstack/core/config/GlobalConfig.java"
  },
  {
    "raw": "Unable to find GlobalConfig[category: %s, name: %s]",
    "en_US": "Unable to find GlobalConfig[category: {0}, name: {1}]",
    "zh_CN": "无法找到全局变量[category:{0}, name:{1}]",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java"
  },
  {
    "raw": "taskInfo was not found",
    "en_US": "taskInfo was not found",
    "zh_CN": "未找到TaskInfo",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/core/debug/DebugManagerImpl.java"
  },
  {
    "raw": "Encryption error : %s",
    "en_US": "Encryption error : {0}",
    "zh_CN": "加密错误：{0}",
    "arguments": [
      "encrypt.error"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/core/encrypt/EncryptFacadeImpl.java"
  },
  {
    "raw": "non file or jsoncontent input",
    "en_US": "non file or jsoncontent input",
    "zh_CN": "非文件或JSON内容输入",
    "arguments": [],
    "line": 71,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "file or jsoncontent cannot both nonempty",
    "en_US": "file or jsoncontent cannot both nonempty",
    "zh_CN": "文件或JSONContent不能同时为非空",
    "arguments": [],
    "line": 76,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "Unable to scan folder: %s",
    "en_US": "Unable to scan folder: {0}",
    "zh_CN": "无法扫描文件夹：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "%s is not existed or is empty folder",
    "en_US": "{0} is not existed or is empty folder",
    "zh_CN": "{0}不存在或为空文件夹",
    "arguments": [
      "filename"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "elaboration code must be number!",
    "en_US": "elaboration code must be number!",
    "zh_CN": "精化代码必须为数字！",
    "arguments": [],
    "line": 249,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "%s: %s",
    "en_US": "{0}: {1}",
    "zh_CN": "{0}: {1}",
    "arguments": [
      "returnValue.get(0).getContent()",
      "returnValue.get(0).getReason()"
    ],
    "line": 318,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "input args \u0027regex\u0027 or \u0027category\u0027 must be set",
    "en_US": "input args \u0027regex\u0027 or \u0027category\u0027 must be set",
    "zh_CN": "必须设置输入参数“ regex ”或“ category ”",
    "arguments": [],
    "line": 415,
    "fileName": "src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java"
  },
  {
    "raw": "service[%s] has been registered",
    "en_US": "service[{0}] has been registered",
    "zh_CN": "服务(service)[{0}]已经被注册",
    "arguments": [
      "service.getName()"
    ],
    "line": 32,
    "fileName": "src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java"
  },
  {
    "raw": "service[%s] is not registered",
    "en_US": "service[{0}] is not registered",
    "zh_CN": "服务[{0}]未注册",
    "arguments": [
      "msg.getName()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java"
  },
  {
    "raw": "service[%s] does not support reload config",
    "en_US": "service[{0}] does not support reload config",
    "zh_CN": "服务[{0}]不支持重新加载配置",
    "arguments": [
      "msg.getName()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java"
  },
  {
    "raw": "service[%s] is not running",
    "en_US": "service[{0}] is not running",
    "zh_CN": "服务[{0}]未运行",
    "arguments": [
      "msg.getName()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java"
  },
  {
    "raw": "cannot trigger a finished GC job[uuid:%s, name:%s]",
    "en_US": "cannot trigger a finished GC job[uuid:{0}, name:{1}]",
    "zh_CN": "无法触发一个完成过的GC任务",
    "arguments": [
      "vo.getUuid()",
      "vo.getName()"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java"
  },
  {
    "raw": "parameter apiId[%s] is not a valid uuid.",
    "en_US": "parameter apiId[{0}] is not a valid uuid.",
    "zh_CN": "参数apiId[{0}]不是一个有效的uuid",
    "arguments": [
      "msg.getApiId()"
    ],
    "line": 38,
    "fileName": "src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java"
  },
  {
    "raw": "unable to echo %s in %sms",
    "en_US": "unable to echo {0} in {1}ms",
    "zh_CN": "无法在{1}ms内返回{0}",
    "arguments": [
      "url",
      "finalTimeout"
    ],
    "line": 656,
    "fileName": "src/main/java/org/zstack/core/rest/RESTFacadeImpl.java"
  },
  {
    "raw": "an operation[%s] fails after retrying %s times with the interval %s seconds",
    "en_US": "an operation[{0}] fails after retrying {1} times with the interval {2} seconds",
    "zh_CN": "在重试{1}次间隔时间为{2}后操作[{0}]失败",
    "arguments": [
      "__name__",
      "times",
      "interval"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/core/retry/Retry.java"
  },
  {
    "raw": "failed to run salt state[%s] on system[%s], failed after %s retries",
    "en_US": "failed to run salt state[{0}] on system[{1}], failed after {2} retries",
    "zh_CN": "重试{2}次之后，在系统[{1}]上运行加盐状态[{0}]失败",
    "arguments": [
      "stateName",
      "targetIp",
      "retry"
    ],
    "line": 297,
    "fileName": "src/main/java/org/zstack/core/salt/SaltRunner.java"
  },
  {
    "raw": "scp is not found on system[%s], unable to setup salt",
    "en_US": "scp is not found on system[{0}], unable to setup salt",
    "zh_CN": "在系统[{0}]上找不到SCP，无法设置销售",
    "arguments": [
      "targetIp"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/core/salt/SaltSetupMinionJob.java"
  },
  {
    "raw": "api timeout cannot be set smaller than %s",
    "en_US": "api timeout cannot be set smaller than {0}",
    "zh_CN": "API超时不能设置为小于{0}",
    "arguments": [
      "ApiTimeoutGlobalProperty.MINIMAL_TIMEOUT"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/core/timeout/ApiTimeoutManagerImpl.java"
  },
  {
    "raw": "Invalid url[%s]",
    "en_US": "Invalid url[{0}]",
    "zh_CN": "无效的URL[{0}]",
    "arguments": [
      "url"
    ],
    "line": 28,
    "fileName": "src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java"
  },
  {
    "raw": "the identity authentication does not specify the resource pool to provide the service",
    "en_US": "the identity authentication does not specify the resource pool to provide the service",
    "zh_CN": "身份认证未指定提供服务的资源池",
    "arguments": [],
    "line": 72,
    "fileName": "src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java"
  },
  {
    "raw": "wrong secret resource pool model, expect %s, actual %s",
    "en_US": "wrong secret resource pool model, expect {0}, actual {1}",
    "zh_CN": "机密资源池模型错误，应为{0}，实际为{1}",
    "arguments": [
      "setting.resourcePoolType",
      "model"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java"
  },
  {
    "raw": "failed to find model for secretResourcePool [%s]",
    "en_US": "failed to find model for secretResourcePool [{0}]",
    "zh_CN": "找不到SecretResourcePool[{0}]的模型",
    "arguments": [
      "resourceUuid"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java"
  },
  {
    "raw": "failed to find certificate info",
    "en_US": "failed to find certificate info",
    "zh_CN": "找不到证书信息",
    "arguments": [],
    "line": 121,
    "fileName": "src/main/java/org/zstack/crypto/auth/CryptoAuthenticationHelper.java"
  },
  {
    "raw": "failed to parse plain text in encryption param to json object: %s, %s",
    "en_US": "failed to parse plain text in encryption param to json object: {0}, {1}",
    "zh_CN": "无法将加密参数中的纯文本解析为JSON对象：{0}，{1}",
    "arguments": [
      "plainText",
      "e.getMessage()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/crypto/auth/CryptoEncryptionParamParser.java"
  },
  {
    "raw": "operation not supported",
    "en_US": "operation not supported",
    "zh_CN": "不支持的操作",
    "arguments": [],
    "line": 73,
    "fileName": "src/main/java/org/zstack/crypto/auth/UKeyCryptoAuthenticationFacade.java"
  },
  {
    "raw": "user[uuid\u003d%s] not found",
    "en_US": "user[uuid\u003d{0}] not found",
    "zh_CN": "找不到用户[uuid\u003d{0}]",
    "arguments": [
      "userUuid"
    ],
    "line": 200,
    "fileName": "src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java"
  },
  {
    "raw": "certificate uuid is empty and UKey system tag does not exist",
    "en_US": "certificate uuid is empty and UKey system tag does not exist",
    "zh_CN": "证书uuid为空，且UKEY系统标记不存在",
    "arguments": [],
    "line": 204,
    "fileName": "src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java"
  },
  {
    "raw": "certificate[uuid\u003d%s] not found",
    "en_US": "certificate[uuid\u003d{0}] not found",
    "zh_CN": "未找到证书[uuid\u003d{0}]",
    "arguments": [
      "msg.getCertificateUuid()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/crypto/ccs/CCSCertificateManagerImpl.java"
  },
  {
    "raw": "check batch data integrity fail, unsupported resourceType: %s",
    "en_US": "check batch data integrity fail, unsupported resourceType: {0}",
    "zh_CN": "检查批处理数据完整性失败，不支持的资源类型：{0}",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java"
  },
  {
    "raw": "add integrity resource fail, unsupported resourceType: %s",
    "en_US": "add integrity resource fail, unsupported resourceType: {0}",
    "zh_CN": "添加完整性资源失败，不支持的资源类型：{0}",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java"
  },
  {
    "raw": "start data protection encryptType[%s] is error",
    "en_US": "start data protection encryptType[{0}] is error",
    "zh_CN": "启动数据保护加密类型[{0}]出错",
    "arguments": [
      "msg.getEncryptType()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java"
  },
  {
    "raw": "the snapshot[uuid:%s] is not encrypted",
    "en_US": "the snapshot[uuid:{0}] is not encrypted",
    "zh_CN": "快照[uuid：{0}]未加密",
    "arguments": [
      "inventory.getUuid()"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "verify volume snapshot[%s] consistency failed",
    "en_US": "verify volume snapshot[{0}] consistency failed",
    "zh_CN": "验证卷快照[{0}]一致性失败",
    "arguments": [
      "inventory.getUuid()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "encryption image cache[id:%s] error: %s",
    "en_US": "encryption image cache[id:{0}] error: {1}",
    "zh_CN": "加密镜像缓存[ID：{0}]错误：{1}",
    "arguments": [
      "inventory.getId()",
      "exception.getMessage()"
    ],
    "line": 311,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "the image cache[id:%s] is not encrypted",
    "en_US": "the image cache[id:{0}] is not encrypted",
    "zh_CN": "镜像缓存[ID：{0}]未加密",
    "arguments": [
      "inventory.getId()"
    ],
    "line": 375,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "verify image cache[%s] consistency failed",
    "en_US": "verify image cache[{0}] consistency failed",
    "zh_CN": "验证镜像缓存[{0}]一致性失败",
    "arguments": [
      "inventory.getId()"
    ],
    "line": 388,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "nodeType %s integrity file[path:%s] already exists",
    "en_US": "nodeType {0} integrity file[path:{1}] already exists",
    "zh_CN": "NodeType{0}完整性文件[路径：{1}]已存在",
    "arguments": [
      "msg.getNodeType()",
      "msg.getPath()"
    ],
    "line": 668,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "invalid nodeType[%s]",
    "en_US": "invalid nodeType[{0}]",
    "zh_CN": "节点类型[{0}]无效",
    "arguments": [
      "msg.getNodeType()"
    ],
    "line": 682,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "filed to add integrity file[%s.%s], it\u0027s a directory now.",
    "en_US": "filed to add integrity file[{0}.{1}], it\u0027s a directory now.",
    "zh_CN": "已归档以添加完整性文件[{0}.{1}]，它现在是一个目录。",
    "arguments": [
      "msg.getNodeType()",
      "msg.getPath()"
    ],
    "line": 694,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "integrity file[%s.%s] is not exists",
    "en_US": "integrity file[{0}.{1}] is not exists",
    "zh_CN": "完整性文件[{0}.{1}]不存在",
    "arguments": [
      "msg.getNodeType()",
      "msg.getPath()"
    ],
    "line": 699,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "host %s is not exists",
    "en_US": "host {0} is not exists",
    "zh_CN": "物理机{0}不存在",
    "arguments": [
      "msg.getNodeUuid()"
    ],
    "line": 716,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "Shell fail, because %s",
    "en_US": "Shell fail, because {0}",
    "zh_CN": "Shell失败，原因是{0}",
    "arguments": [
      "res.getStderr()"
    ],
    "line": 724,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "add integrity file[%s.%s] fail, because %s",
    "en_US": "add integrity file[{0}.{1}] fail, because {2}",
    "zh_CN": "添加完整性文件[{0}.{1}]失败，原因是{2}",
    "arguments": [
      "msg.getNodeType()",
      "msg.getPath()",
      "exception.getMessage()"
    ],
    "line": 747,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java"
  },
  {
    "raw": "unsupported operation for EncryptColumnIntegrityFactory",
    "en_US": "unsupported operation for EncryptColumnIntegrityFactory",
    "zh_CN": "不支持对EncryptColumnIntegrityFactory的操作",
    "arguments": [],
    "line": 141,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/integrity/EncryptColumnIntegrityFactory.java"
  },
  {
    "raw": "virtualID attribute encryption error, because:%s",
    "en_US": "virtualID attribute encryption error, because:{0}",
    "zh_CN": "VirtualID属性加密错误，原因：{0}",
    "arguments": [
      "encrypt.error"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java"
  },
  {
    "raw": "IAM2VirtualIDAttributeVO %s does not exists",
    "en_US": "IAM2VirtualIDAttributeVO {0} does not exists",
    "zh_CN": "IAM2VirtualIDAttributeVO{0}不存在",
    "arguments": [
      "resourceUuid"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java"
  },
  {
    "raw": "virtualID attribute check error, because:%s",
    "en_US": "virtualID attribute check error, because:{0}",
    "zh_CN": "VirtualID属性检查错误，原因：{0}",
    "arguments": [
      "encrypt.error"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java"
  },
  {
    "raw": "rolePolicy encryption error, because:%s",
    "en_US": "rolePolicy encryption error, because:{0}",
    "zh_CN": "RolePolicy加密错误，原因：{0}",
    "arguments": [
      "encrypt.error"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/integrity/RolePolicyIntegrityFactory.java"
  },
  {
    "raw": "the shared mount point primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters",
    "en_US": "the shared mount point primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters",
    "zh_CN": "共享装入点主存储[uuid：{0}，名称：{1}]在连接的群集中找不到任何可用物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/crypto/datacrypto/smp/SMPCryptoBase.java"
  },
  {
    "raw": "originText or certificateText can not be null",
    "en_US": "originText or certificateText can not be null",
    "zh_CN": "原始文本或证书文本不能为空",
    "arguments": [],
    "line": 26,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/AttachVerifyPair.java"
  },
  {
    "raw": "the security machine [%s] does not exist",
    "en_US": "the security machine [{0}] does not exist",
    "zh_CN": "安全计算机[{0}]不存在",
    "arguments": [
      "msg.getSecurityMachineUuid()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java"
  },
  {
    "raw": "managementIp[%s] is not in IPV4 format",
    "en_US": "managementIp[{0}] is not in IPV4 format",
    "zh_CN": "ManagementIP[{0}]不是IPv4格式",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java"
  },
  {
    "raw": "failed to connect to the security machine %s[%s], because %s",
    "en_US": "failed to connect to the security machine {0}[{1}], because {2}",
    "zh_CN": "无法连接到安全性计算机{0}[{1}]，因为{2}",
    "arguments": [
      "msg.getName()",
      "msg.getManagementIp()",
      "error"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java"
  },
  {
    "raw": "after the crypto function is enabled, at least one security machine should be reserved in the corresponding resource pool",
    "en_US": "after the crypto function is enabled, at least one security machine should be reserved in the corresponding resource pool",
    "zh_CN": "启用加密功能后，应在相应的资源池中至少保留一台安全机",
    "arguments": [
      "msg.getSecurityMachineUuid()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java"
  },
  {
    "raw": "invalid algType %s, supported types: %s.",
    "en_US": "invalid algType {0}, supported types: {1}.",
    "zh_CN": "AlgType{0}无效，支持的类型：{1}。",
    "arguments": [
      "msg.getAlgType()",
      "StringUtils.join(EncryptType.values(), \u0027,\u0027)"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java"
  },
  {
    "raw": "the resource pool[%s] specified by data protection does not exist",
    "en_US": "the resource pool[{0}] specified by data protection does not exist",
    "zh_CN": "数据保护指定的资源池[{0}]不存在",
    "arguments": [
      "poolForProtect"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java"
  },
  {
    "raw": "cannot be deleted. after the encryption function is enabled, the number of synced security machines in the resource pool that provides the service is at least 1",
    "en_US": "cannot be deleted. after the encryption function is enabled, the number of synced security machines in the resource pool that provides the service is at least 1",
    "zh_CN": "无法删除。启用加密功能后，提供该服务的资源池中同步的安全机器至少为1台",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java"
  },
  {
    "raw": "securityMachine is disabled, failed to detect heartbeat",
    "en_US": "securityMachine is disabled, failed to detect heartbeat",
    "zh_CN": "SecurityMachine已禁用，无法检测心跳",
    "arguments": [],
    "line": 444,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java"
  },
  {
    "raw": "an other connect security machine task is running, cancel the new task and wait return",
    "en_US": "an other connect security machine task is running, cancel the new task and wait return",
    "zh_CN": "其他连接安全性计算机任务正在运行，请取消新任务并等待返回",
    "arguments": [],
    "line": 584,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java"
  },
  {
    "raw": "encrypt data[%s] or algType[%s] is null",
    "en_US": "encrypt data[{0}] or algType[{1}] is null",
    "zh_CN": "加密数据[{0}]或AlgType[{1}]为空",
    "arguments": [
      "data",
      "algType"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "cannot find model for secretResourcePool [%s]",
    "en_US": "cannot find model for secretResourcePool [{0}]",
    "zh_CN": "找不到SecretResourcePool[{0}]的模型",
    "arguments": [
      "resourceUuid"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "the crypto function is enabled but the resource pool[%s] for auto login is not set.",
    "en_US": "the crypto function is enabled but the resource pool[{0}] for auto login is not set.",
    "zh_CN": "已启用加密功能，但未设置用于自动登录的资源池[{0}]。",
    "arguments": [
      "poolForAuth"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "the crypto function is enabled but the resource pool[%s] for data protect is not set.",
    "en_US": "the crypto function is enabled but the resource pool[{0}] for data protect is not set.",
    "zh_CN": "已启用加密功能，但未设置数据保护的资源池[{0}]。",
    "arguments": [
      "poolForProtect"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "the current state[%s] does not allow manual modification of the state",
    "en_US": "the current state[{0}] does not allow manual modification of the state",
    "zh_CN": "当前状态[{0}]不允许手动修改状态",
    "arguments": [
      "state.toString()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "cannot disable all security machines when the crypto function is enabled",
    "en_US": "cannot disable all security machines when the crypto function is enabled",
    "zh_CN": "启用加密功能时，无法禁用所有安全计算机",
    "arguments": [],
    "line": 149,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "check whether the resource pool uuid is set for authentication",
    "en_US": "check whether the resource pool uuid is set for authentication",
    "zh_CN": "检查是否为身份验证设置了资源池uuid",
    "arguments": [],
    "line": 159,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "unknown encryptType[%s]",
    "en_US": "unknown encryptType[{0}]",
    "zh_CN": "未知的加密类型[{0}]",
    "arguments": [
      "algType"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "decrypt data[%s] or algType[%s] is null",
    "en_US": "decrypt data[{0}] or algType[{1}] is null",
    "zh_CN": "解密数据[{0}]或AlgType[{1}]为空",
    "arguments": [
      "data",
      "algType"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "invalid decrypt algType: %s",
    "en_US": "invalid decrypt algType: {0}",
    "zh_CN": "无效的解密AlgType：{0}",
    "arguments": [
      "algType"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java"
  },
  {
    "raw": "there has been a security machine having managementIp[%s]",
    "en_US": "there has been a security machine having managementIp[{0}]",
    "zh_CN": "已存在具有ManagementIP[{0}]的安全计算机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 280,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java"
  },
  {
    "raw": "no client for security machine[type\u003d%s]",
    "en_US": "no client for security machine[type\u003d{0}]",
    "zh_CN": "安全计算机[类型\u003d{0}]没有客户端",
    "arguments": [
      "securityMachineType"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java"
  },
  {
    "raw": "no security machine client factory for security machine[type\u003d%s]",
    "en_US": "no security machine client factory for security machine[type\u003d{0}]",
    "zh_CN": "安全计算机[类型\u003d{0}]没有安全计算机客户端工厂",
    "arguments": [
      "securityMachineType"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java"
  },
  {
    "raw": "there is no security machine that can be activated",
    "en_US": "there is no security machine that can be activated",
    "zh_CN": "没有可以激活的安全机器。",
    "arguments": [],
    "line": 50,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java"
  },
  {
    "raw": "invalid token type %s, only supports %s.",
    "en_US": "invalid token type {0}, only supports {1}.",
    "zh_CN": "令牌类型{0}无效，仅支持{1}。",
    "arguments": [
      "msg.getType()",
      "StringUtils.join(SecurityMachineKeyType.values(), \u0027,\u0027)"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java"
  },
  {
    "raw": "the identity authentication function is enabled but the corresponding resource pool is not set, please re-enable the function and try again",
    "en_US": "the identity authentication function is enabled but the corresponding resource pool is not set, please re-enable the function and try again",
    "zh_CN": "身份认证功能已启用，但未设置相应的资源池，请重新启用后再试",
    "arguments": [
      "msg.getSecretResourcePoolUuid()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java"
  },
  {
    "raw": "cannot delete the resource pool %s when in use",
    "en_US": "cannot delete the resource pool {0} when in use",
    "zh_CN": "无法删除正在使用的资源池{0}",
    "arguments": [
      "msg.getSecretResourcePoolUuid()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java"
  },
  {
    "raw": "generate certificate failed",
    "en_US": "generate certificate failed",
    "zh_CN": "生成证书失败",
    "arguments": [],
    "line": 237,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java"
  },
  {
    "raw": "flkSec securityMachine unhealthy: %s",
    "en_US": "flkSec securityMachine unhealthy: {0}",
    "zh_CN": "FlkSec SecurityMachine不正常：{0}",
    "arguments": [
      "rsp.getData()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java"
  },
  {
    "raw": "keyLabel %s and encryptResult %s are inconsistent",
    "en_US": "keyLabel {0} and encryptResult {1} are inconsistent",
    "zh_CN": "KeyLabel{0}和EncryptResult{1}不一致",
    "arguments": [
      "keyLabel",
      "sm4EncryptResponse.result"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java"
  },
  {
    "raw": "the connection to the security machine %s failed during the process of generating the test key because %s",
    "en_US": "the connection to the security machine {0} failed during the process of generating the test key because {1}",
    "zh_CN": "在生成测试密钥的过程中，与安全计算机{0}的连接失败，原因是{1}",
    "arguments": [
      "vo.getUuid()",
      "response.error"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java"
  },
  {
    "raw": "failed to generate dataProtect token for the security machine %s because %s",
    "en_US": "failed to generate dataProtect token for the security machine {0} because {1}",
    "zh_CN": "无法为安全计算机{0}生成DataProtect令牌，因为{1}",
    "arguments": [
      "vo.getUuid()",
      "dataProtectTokenRes.error"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java"
  },
  {
    "raw": "failed to generate hmac token for the security machine %s because %s",
    "en_US": "failed to generate hmac token for the security machine {0} because {1}",
    "zh_CN": "无法为安全计算机{0}生成HMAC令牌，因为{1}",
    "arguments": [
      "vo.getUuid()",
      "hmacTokenTokenRes.error"
    ],
    "line": 196,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java"
  },
  {
    "raw": "failed to get encrypt result for the security machine %s because %s",
    "en_US": "failed to get encrypt result for the security machine {0} because {1}",
    "zh_CN": "无法获取安全性计算机{0}的加密结果，因为{1}",
    "arguments": [
      "vo.getUuid()",
      "encryptRes.error"
    ],
    "line": 208,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java"
  },
  {
    "raw": "the security machine [%s] failed to manually detect synchronization, please confirm whether the security machine has synchronized the key!",
    "en_US": "the security machine [{0}] failed to manually detect synchronization, please confirm whether the security machine has synchronized the key!",
    "zh_CN": "安全计算机[{0}]手动检测同步失败，请确认安全计算机是否已同步密钥！",
    "arguments": [
      "self.getManagementIp()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineBase.java"
  },
  {
    "raw": "security machine[uuid:%s] model is not %s",
    "en_US": "security machine[uuid:{0}] model is not {1}",
    "zh_CN": "安全计算机[uuid：{0}]型号不是{1}",
    "arguments": [
      "msg.getName()",
      "vo.getModel()"
    ],
    "line": 32,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineFactory.java"
  },
  {
    "raw": "currently does not support the creation of %s resource pools",
    "en_US": "currently does not support the creation of {0} resource pools",
    "zh_CN": "当前不支持创建{0}资源池",
    "arguments": [
      "msg.getModel()"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolApiInterceptor.java"
  },
  {
    "raw": "secretResourcePool[uuid:%s] model is not %s",
    "en_US": "secretResourcePool[uuid:{0}] model is not {1}",
    "zh_CN": "SecretResourcePool[uuid：{0}]模型不是{1}",
    "arguments": [
      "msg.getResourceUuid()",
      "vo.getModel()"
    ],
    "line": 33,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolFactory.java"
  },
  {
    "raw": "large file hmac encrypt failed, code: %s, detail: %s",
    "en_US": "large file hmac encrypt failed, code: {0}, detail: {1}",
    "zh_CN": "大文件HMAC加密失败，代码：{0}，详细信息：{1}",
    "arguments": [
      "agentBasic.INSMGetReturnCode()",
      "agentBasic.INSMGetErrMsg()"
    ],
    "line": 409,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "failed to find secret key",
    "en_US": "failed to find secret key",
    "zh_CN": "找不到密钥",
    "arguments": [],
    "line": 457,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "failed to parse secret key, error: %s",
    "en_US": "failed to parse secret key, error: {0}",
    "zh_CN": "无法分析密钥，错误：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 465,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "cipherText can not be null",
    "en_US": "cipherText can not be null",
    "zh_CN": "密文不能为空",
    "arguments": [],
    "line": 500,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "encryptSubjectDN can not be null",
    "en_US": "encryptSubjectDN can not be null",
    "zh_CN": "EncryptSubjectDN不能为空",
    "arguments": [],
    "line": 503,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "failed to parse MS Envelope",
    "en_US": "failed to parse MS Envelope",
    "zh_CN": "解析MS信封失败",
    "arguments": [],
    "line": 508,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "failed to export secret key",
    "en_US": "failed to export secret key",
    "zh_CN": "无法导出密钥",
    "arguments": [],
    "line": 533,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "import secret key fail",
    "en_US": "import secret key fail",
    "zh_CN": "导入密钥失败",
    "arguments": [],
    "line": 550,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java"
  },
  {
    "raw": "failed to generate activated token for the security machine %s because %s",
    "en_US": "failed to generate activated token for the security machine {0} because {1}",
    "zh_CN": "无法为安全计算机{0}生成激活的令牌，因为{1}",
    "arguments": [
      "vo.getUuid()",
      "activateTokenRes.error"
    ],
    "line": 196,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java"
  },
  {
    "raw": "failed to generate dataProtect token %s for the security machine %s because %s",
    "en_US": "failed to generate dataProtect token {0} for the security machine {1} because {2}",
    "zh_CN": "无法为安全计算机{1}生成DataProtect令牌{0}，因为{2}",
    "arguments": [
      "dataProtectTokenName",
      "vo.getUuid()",
      "dataProtectTokenRes.error"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java"
  },
  {
    "raw": "failed to generate hmac token %s for the security machine %s because %s",
    "en_US": "failed to generate hmac token {0} for the security machine {1} because {2}",
    "zh_CN": "无法为安全计算机{1}生成HMAC令牌{0}，因为{2}",
    "arguments": [
      "hmacTokenName",
      "vo.getUuid()",
      "hmacTokenTokenRes.error"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java"
  },
  {
    "raw": "host[uuid: %s] memory ecc triggered, detail: %s",
    "en_US": "host[uuid: {0}] memory ecc triggered, detail: {1}",
    "zh_CN": "物理机[uuid：{0}]内存ECC已触发，详细信息：{1}",
    "arguments": [
      "cmd.host",
      "cmd.detail"
    ],
    "line": 505,
    "fileName": "src/main/java/org/zstack/cube/CubeManagerImpl.java"
  },
  {
    "raw": "parameters [accountUuid] only can be used by admin user!",
    "en_US": "parameters [accountUuid] only can be used by admin user!",
    "zh_CN": "参数[accountUuid]必须被admin用户设置",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/daho/core/DahoApiInterceptor.java"
  },
  {
    "raw": "expire policy: %s is not valid",
    "en_US": "expire policy: {0} is not valid",
    "zh_CN": "无效的过期策略:{0}",
    "arguments": [
      "msg.getExpirePolicy()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/daho/core/DahoApiInterceptor.java"
  },
  {
    "raw": "vlanId[%s] has been existed!",
    "en_US": "vlanId[{0}] has been existed!",
    "zh_CN": "VlanId[{0}]已存在！",
    "arguments": [
      "msg.getVlan()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/daho/core/DahoApiInterceptor.java"
  },
  {
    "raw": "create daho vll task failed!",
    "en_US": "create daho vll task failed!",
    "zh_CN": "创建daho vll任务失败",
    "arguments": [],
    "line": 128,
    "fileName": "src/main/java/org/zstack/daho/core/DahoSdkImpl.java"
  },
  {
    "raw": "no aliyun account found for accountUuid: %s",
    "en_US": "no aliyun account found for accountUuid: {0}",
    "zh_CN": "找不到当前账户{0}对应的阿里云账户",
    "arguments": [
      "msg.getAccountUuid()"
    ],
    "line": 169,
    "fileName": "src/main/java/org/zstack/daho/core/DahoSdkImpl.java"
  },
  {
    "raw": "resources %s has already been bound to directory uuid[%s] , multiple paths are not supported",
    "en_US": "resources {0} has already been bound to directory uuid[{1}] , multiple paths are not supported",
    "zh_CN": "资源{0}已绑定到目录uuid[{1}]，不支持多个路径",
    "arguments": [
      "list",
      "msg.getDirectoryUuid()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/directory/DirectoryApiInterceptor.java"
  },
  {
    "raw": "resource types %s are not supported by directory, allowed types are %s",
    "en_US": "resource types {0} are not supported by directory, allowed types are {1}",
    "zh_CN": "目录不支持资源类型{0}，允许的类型为{1}",
    "arguments": [
      "list",
      "ALLOW_RESOURCE_TYPES"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/directory/DirectoryApiInterceptor.java"
  },
  {
    "raw": "name contains unsupported characters, name can only contain Chinese characters, English letters, numbers, spaces, and the following characters: ()（）【】@._-+ ",
    "en_US": "name contains unsupported characters, name can only contain Chinese characters, English letters, numbers, spaces, and the following characters: ()（）【】@._-+ ",
    "zh_CN": "名称包含不支持的字符，名称只能包含中文字符、英文字母、数字、空格和以下字符：（）（）[]@._-+",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/directory/DirectoryApiInterceptor.java"
  },
  {
    "raw": "circular dependency detected, directory %s and directory %s will cause circular dependency",
    "en_US": "circular dependency detected, directory {0} and directory {1} will cause circular dependency",
    "zh_CN": "检测到循环依赖，目录{0}和目录{1}将导致循环依赖",
    "arguments": [
      "msg.getDirectoryUuid()",
      "msg.getTargetParentUuid()"
    ],
    "line": 356,
    "fileName": "src/main/java/org/zstack/directory/DirectoryBase.java"
  },
  {
    "raw": "duplicate directory name, directory[uuid: %s] with name %s already exists",
    "en_US": "duplicate directory name, directory[uuid: {0}] with name {1} already exists",
    "zh_CN": "已存在名称为{1}的重复目录名、目录[uuid：{0}]",
    "arguments": [
      "list.get(0).getUuid()",
      "msg.getName()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/directory/DirectoryManagerImpl.java"
  },
  {
    "raw": "fail to create directory, directories are up to four levels",
    "en_US": "fail to create directory, directories are up to four levels",
    "zh_CN": "创建目录失败，目录最多有四层",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/directory/DirectoryManagerImpl.java"
  },
  {
    "raw": "the type of directory %s is not supported, the supported directory types are %s",
    "en_US": "the type of directory {0} is not supported, the supported directory types are {1}",
    "zh_CN": "不支持目录{0}的类型，支持的目录类型为{1}",
    "arguments": [
      "msg.getType()",
      "DIRECTORY_TYPES"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/directory/DirectoryManagerImpl.java"
  },
  {
    "raw": "all resources zoneUuid must be consistent with the directory zoneUuid[%s]",
    "en_US": "all resources zoneUuid must be consistent with the directory zoneUuid[{0}]",
    "zh_CN": "所有资源的zoneuuid必须与目录zoneuuid[{0}]一致",
    "arguments": [
      "vo.getZoneUuid()"
    ],
    "line": 27,
    "fileName": "src/main/java/org/zstack/directory/VmDirectoryChecker.java"
  },
  {
    "raw": "Advice not allowed while scheduling",
    "en_US": "Advice not allowed while scheduling",
    "zh_CN": "计划时不允许通知",
    "arguments": [],
    "line": 216,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "delete DRS is not allowed while the vm is being migrated",
    "en_US": "delete DRS is not allowed while the vm is being migrated",
    "zh_CN": "迁移云主机时不允许删除DRS",
    "arguments": [],
    "line": 277,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "Scheduling is not allowed while the vm is being migrated",
    "en_US": "Scheduling is not allowed while the vm is being migrated",
    "zh_CN": "迁移云主机时不允许计划",
    "arguments": [],
    "line": 370,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "Lack of host CPU, memory monitoring data",
    "en_US": "Lack of host CPU, memory monitoring data",
    "zh_CN": "缺少物理机CPU、内存监控数据",
    "arguments": [],
    "line": 481,
    "fileName": "src/main/java/org/zstack/drs/DRSBase.java"
  },
  {
    "raw": "The cluster[%s] has created DRS",
    "en_US": "The cluster[{0}] has created DRS",
    "zh_CN": "群集[{0}]已创建DRS",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "DRS is disabled",
    "en_US": "DRS is disabled",
    "zh_CN": "DRS已禁用",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "thresholds can not be empty",
    "en_US": "thresholds can not be empty",
    "zh_CN": "阈值不能为空",
    "arguments": [],
    "line": 64,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "illegal thresholdName[%s]",
    "en_US": "illegal thresholdName[{0}]",
    "zh_CN": "阈值名称[{0}]非法",
    "arguments": [
      "threshold.getThresholdName()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "illegal threshold operator[%s]",
    "en_US": "illegal threshold operator[{0}]",
    "zh_CN": "阈值运算符[{0}]非法",
    "arguments": [
      "threshold.getOperator()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "thresholdValue can not be empty",
    "en_US": "thresholdValue can not be empty",
    "zh_CN": "阈值不能为空",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "illegal thresholdValue, valid range: (0, 100]",
    "en_US": "illegal thresholdValue, valid range: (0, 100]",
    "zh_CN": "阈值非法，有效范围：（[0，100]",
    "arguments": [],
    "line": 86,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "GlobalConfig ENABLE_DRS is closed",
    "en_US": "GlobalConfig ENABLE_DRS is closed",
    "zh_CN": "GlobalConfig启用_DRS已关闭",
    "arguments": [],
    "line": 103,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The DRS[%s] state is %s",
    "en_US": "The DRS[{0}] state is {1}",
    "zh_CN": "DRS[{0}]状态为{1}",
    "arguments": [
      "msg.getUuid()",
      "vo.getState().toString()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The DRS[%s] automation level is not manual",
    "en_US": "The DRS[{0}] automation level is not manual",
    "zh_CN": "DRS[{0}]自动化级别不是手动的",
    "arguments": [
      "adviceVO.getDrsUuid()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "advice[%s] has expired",
    "en_US": "advice[{0}] has expired",
    "zh_CN": "建议[{0}]已过期",
    "arguments": [
      "msg.getAdviceUuid()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "Successfully executed, no repeated executions allowed",
    "en_US": "Successfully executed, no repeated executions allowed",
    "zh_CN": "执行成功，不允许重复执行",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The vm[%s] has been deleted",
    "en_US": "The vm[{0}] has been deleted",
    "zh_CN": "云主机[{0}]已删除",
    "arguments": [
      "adviceVO.getVmUuid()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The vm[%s] state is not running",
    "en_US": "The vm[{0}] state is not running",
    "zh_CN": "VM[{0}]状态未运行",
    "arguments": [
      "adviceVO.getVmUuid()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The vm[%s] is no longer on the source host[%s]",
    "en_US": "The vm[{0}] is no longer on the source host[{1}]",
    "zh_CN": "VM[{0}]不再位于源物理机[{1}]上",
    "arguments": [
      "adviceVO.getVmUuid()",
      "adviceVO.getVmSourceHostUuid()"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/drs/DRSInterceptor.java"
  },
  {
    "raw": "The cluster[%s] does not support DRS.",
    "en_US": "The cluster[{0}] does not support DRS.",
    "zh_CN": "群集[{0}]不支持DRS。",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "Can not create DRS, %s",
    "en_US": "Can not create DRS, {0}",
    "zh_CN": "无法创建DRS，{0}",
    "arguments": [
      "reasons"
    ],
    "line": 290,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "hostUuids is empty",
    "en_US": "hostUuids is empty",
    "zh_CN": "HOSTuuidS为空",
    "arguments": [],
    "line": 323,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "query hosts utilization data failed",
    "en_US": "query hosts utilization data failed",
    "zh_CN": "查询物理机利用率数据失败",
    "arguments": [],
    "line": 330,
    "fileName": "src/main/java/org/zstack/drs/DRSManagerImpl.java"
  },
  {
    "raw": "failed to parse API message: can not parse encryption param with type %s",
    "en_US": "failed to parse API message: can not parse encryption param with type {0}",
    "zh_CN": "未能分析API消息：无法分析类型为{0}的加密参数",
    "arguments": [
      "bundle.getEncryptionType()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java"
  },
  {
    "raw": "failed to parse API message: found %d encryption param system tags, expect 1",
    "en_US": "failed to parse API message: found {0} encryption param system tags, expect 1",
    "zh_CN": "未能分析API消息：找到{0}个加密参数系统标记，应为1个",
    "arguments": [
      "matchTags.size()"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java"
  },
  {
    "raw": "some volume[uuids:%s] recover failed. you can trigger it again by reconnect it.",
    "en_US": "some volume[uuids:{0}] recover failed. you can trigger it again by reconnect it.",
    "zh_CN": "某些卷[uuid：{0}]恢复失败。您可以通过重新连接来再次触发它。",
    "arguments": [
      "volumeUuids"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/externalbackup/zbox/HostZBoxBackupRecoverGC.java"
  },
  {
    "raw": "there is another external backup[uuid: %s] recovering",
    "en_US": "there is another external backup[uuid: {0}] recovering",
    "zh_CN": "另一个外部备份[uuid：{0}]正在恢复",
    "arguments": [
      "externalBackupUuid"
    ],
    "line": 34,
    "fileName": "src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java"
  },
  {
    "raw": "both hostUuids and backupStorageUuids are empty. you must specify one or both of them.",
    "en_US": "both hostUuids and backupStorageUuids are empty. you must specify one or both of them.",
    "zh_CN": "Hostuuid和BackupStorageuuid均为空。您必须指定其中一个或两个。",
    "arguments": [],
    "line": 38,
    "fileName": "src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java"
  },
  {
    "raw": "please insert zbox to management node.",
    "en_US": "please insert zbox to management node.",
    "zh_CN": "请将ZBOX插入管理节点。",
    "arguments": [],
    "line": 691,
    "fileName": "src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java"
  },
  {
    "raw": "cannot find recover.conf under zbox backup install dir.",
    "en_US": "cannot find recover.conf under zbox backup install dir.",
    "zh_CN": "在ZBOX备份安装目录下找不到recover.conf。",
    "arguments": [],
    "line": 219,
    "fileName": "src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java"
  },
  {
    "raw": "fail to backup database: %s",
    "en_US": "fail to backup database: {0}",
    "zh_CN": "无法备份数据库：{0}",
    "arguments": [
      "result.getExecutionLog()"
    ],
    "line": 741,
    "fileName": "src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java"
  },
  {
    "raw": "zbox should be inserted to a host first.",
    "en_US": "zbox should be inserted to a host first.",
    "zh_CN": "应首先将ZBox插入物理机。",
    "arguments": [],
    "line": 591,
    "fileName": "src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java"
  },
  {
    "raw": "crond is not running",
    "en_US": "crond is not running",
    "zh_CN": "crond任务未在运行",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/externalservice/cronjob/CronJobImpl.java"
  },
  {
    "raw": "Missing CPU/memory settings",
    "en_US": "Missing CPU/memory settings",
    "zh_CN": "缺少CPU/内存设置",
    "arguments": [],
    "line": 485,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Unexpected CPU/memory settings",
    "en_US": "Unexpected CPU/memory settings",
    "zh_CN": "意外的CPU/内存设置",
    "arguments": [],
    "line": 489,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "instance offering[uuid:%s] is Disabled, can\u0027t create vm from it",
    "en_US": "instance offering[uuid:{0}] is Disabled, can\u0027t create vm from it",
    "zh_CN": "计算规格[uuid:{0}]没有被启用，不能根据该规格创建云主机",
    "arguments": [
      "instanceOfferingUuid"
    ],
    "line": 498,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "instance offering[uuid:%s, type:%s] is not UserVm type, can\u0027t create vm from it",
    "en_US": "instance offering[uuid:{0}, type:{1}] is not UserVm type, can\u0027t create vm from it",
    "zh_CN": "计算规格[uuid:{0}, type:{1}]不是UserVm类型，不能通过它创建云主机",
    "arguments": [
      "instanceOfferingUuid",
      "ivo.getType()"
    ],
    "line": 502,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is Disabled, can\u0027t create vm from it",
    "en_US": "image[uuid:{0}] is Disabled, can\u0027t create vm from it",
    "zh_CN": "镜像[uuid:{0}]没被启用，不能根据该镜像创建云主机",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 539,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not ready yet, can\u0027t create vm from it",
    "en_US": "image[uuid:{0}] is not ready yet, can\u0027t create vm from it",
    "zh_CN": "镜像[uuid：{0}]尚未就绪，无法从中创建VM",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 544,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is system image, can\u0027t be used to create user vm",
    "en_US": "image[uuid:{0}] is system image, can\u0027t be used to create user vm",
    "zh_CN": "镜像[uuid:{0}] 是系统镜像，不能使用它创建用户云主机",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 559,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "disk offerings[uuids:%s] are Disabled, can not create vm from it",
    "en_US": "disk offerings[uuids:{0}] are Disabled, can not create vm from it",
    "zh_CN": "云盘规格[uuids:{0}]没有被启用，不能使用它创建云主机",
    "arguments": [
      "diskUuids"
    ],
    "line": 575,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "current operation is not supported on ft secondary vm[uuid:%s]",
    "en_US": "current operation is not supported on ft secondary vm[uuid:{0}]",
    "zh_CN": "FT辅助云主机[uuid：{0}]不支持当前操作",
    "arguments": [
      "vmInstanceUuid"
    ],
    "line": 450,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "pvm[uuid:%s] and svm[uuid:%s] volume number not matches, do not allowed to start",
    "en_US": "pvm[uuid:{0}] and svm[uuid:{1}] volume number not matches, do not allowed to start",
    "zh_CN": "PVM[uuid：{0}]和SVM[uuid：{1}]卷号不匹配，不允许启动",
    "arguments": [
      "group.getPrimaryVmInstanceUuid()",
      "group.getSecondaryVmInstanceUuid()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "volume with index: %d, of pvm[uuid:%s] and svm[uuid:%s] have different size, do not allowed to start",
    "en_US": "volume with index: {0}, of pvm[uuid:{1}] and svm[uuid:{2}] have different size, do not allowed to start",
    "zh_CN": "PVM[uuid：{1}]和SVM[uuid：{2}]中索引为{0}的卷大小不同，不允许启动",
    "arguments": [
      "i",
      "group.getPrimaryVmInstanceUuid()",
      "group.getSecondaryVmInstanceUuid()"
    ],
    "line": 135,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "volume with index: %d, of pvm[uuid:%s] and svm[uuid:%s]\u0027s cache volume have different size, do not allowed to start",
    "en_US": "volume with index: {0}, of pvm[uuid:{1}] and svm[uuid:{2}]\u0027s cache volume have different size, do not allowed to start",
    "zh_CN": "PVM[uuid：{1}]和SVM[uuid：{2}]的缓存卷的索引为{0}的卷大小不同，不允许启动",
    "arguments": [
      "i",
      "group.getPrimaryVmInstanceUuid()",
      "group.getSecondaryVmInstanceUuid()"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is still used by fault tolerance vm[uuid:%s]",
    "en_US": "image[uuid:{0}] is still used by fault tolerance vm[uuid:{1}]",
    "zh_CN": "容错云主机[uuid：{1}]仍在使用镜像[uuid：{0}]",
    "arguments": [
      "msg.getUuid()",
      "faultToleranceVmGroupUuid"
    ],
    "line": 169,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "could not delete l3 network[uuid:%s]. Fault tolerance vm[%s] in states[%s, %s] still using it. Stop related fault tolerance vms before delete l3 network",
    "en_US": "could not delete l3 network[uuid:{0}]. Fault tolerance vm[{1}] in states[{2}, {3}] still using it. Stop related fault tolerance vms before delete l3 network",
    "zh_CN": "无法删除三层网络[uuid：{0}]。状态为[{2}，{3}]的容错VM[{1}]仍在使用。在删除三层网络之前停止相关的容错云主机",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "String.join(\",\", vmInstanceUuids)",
      "VmInstanceState.Paused",
      "VmInstanceState.Running"
    ],
    "line": 212,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Can not fail-over vm[uuid:%s], please enable ft in GlobalConfig",
    "en_US": "Can not fail-over vm[uuid:{0}], please enable ft in GlobalConfig",
    "zh_CN": "无法对VM[uuid：{0}]进行故障转移，请在GlobalConfig中启用FT",
    "arguments": [
      "msg.getFaultToleranceVmUuid()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Can not fail-over vm[uuid:%s], please confirm it is a fault tolerance vm group",
    "en_US": "Can not fail-over vm[uuid:{0}], please confirm it is a fault tolerance vm group",
    "zh_CN": "无法对VM[uuid：{0}]进行故障转移，请确认它是容错VM组",
    "arguments": [
      "msg.getFaultToleranceVmUuid()"
    ],
    "line": 270,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Can not fail-over vm[uuid:%s], because fault tolerance vm group is not in status of [%s, %s]",
    "en_US": "Can not fail-over vm[uuid:{0}], because fault tolerance vm group is not in status of [{1}, {2}]",
    "zh_CN": "无法对VM[uuid：{0}]进行故障转移，因为容错VM组的状态不是[{1}，{2}]",
    "arguments": [
      "msg.getFaultToleranceVmUuid()",
      "FaultToleranceStatus.Protected",
      "FaultToleranceStatus.Unknown"
    ],
    "line": 276,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Can not maintain host, because ft vms[%s] are under recovering",
    "en_US": "Can not maintain host, because ft vms[{0}] are under recovering",
    "zh_CN": "无法维护物理机，因为正在恢复FT VM[{0}]",
    "arguments": [
      "Joiner.on(\",\").join(vmUuids)"
    ],
    "line": 301,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "current operation[api:%s] is not supported when ft vm[uuid:%s, state:%s] is not stopped",
    "en_US": "current operation[api:{0}] is not supported when ft vm[uuid:{1}, state:{2}] is not stopped",
    "zh_CN": "未停止FT VM[uuid：{1}，状态：{2}]时，不支持当前操作[API：{0}]",
    "arguments": [
      "msg.getClass()",
      "msg.getVmInstanceUuid()",
      "state"
    ],
    "line": 319,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Can not set vm level to %s, please enable ft in GlobalConfig",
    "en_US": "Can not set vm level to {0}, please enable ft in GlobalConfig",
    "zh_CN": "无法将VM级别设置为{0}，请在GlobalConfig中启用FT",
    "arguments": [
      "VmHaLevel.FaultTolerance.toString()"
    ],
    "line": 367,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Ft network is not set",
    "en_US": "Ft network is not set",
    "zh_CN": "未设置FT网络",
    "arguments": [],
    "line": 515,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "can not update ft vm[uuid:%s] cpu number, need to stop both of the vms",
    "en_US": "can not update ft vm[uuid:{0}] cpu number, need to stop both of the vms",
    "zh_CN": "无法更新FT VM[uuid：{0}]CPU编号，需要停止两个VM",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 423,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "can not update ft vm[uuid:%s] memory size, need to stop both of the vms",
    "en_US": "can not update ft vm[uuid:{0}] memory size, need to stop both of the vms",
    "zh_CN": "无法更新FT VM[uuid：{0}]内存大小，需要停止两个VM",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 427,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "can not update ft vm[uuid:%s] platform, need to stop both of the vms",
    "en_US": "can not update ft vm[uuid:{0}] platform, need to stop both of the vms",
    "zh_CN": "无法更新FT VM[uuid：{0}]平台，需要停止两个VM",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 431,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "current operation is not supported on ft group vm[uuid:%s]",
    "en_US": "current operation is not supported on ft group vm[uuid:{0}]",
    "zh_CN": "FT组VM[uuid：{0}]不支持当前操作",
    "arguments": [
      "vmInstanceUuid"
    ],
    "line": 442,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "current operation is not supported on ft primary vm[uuid:%s]",
    "en_US": "current operation is not supported on ft primary vm[uuid:{0}]",
    "zh_CN": "FT主VM[uuid：{0}]不支持当前操作",
    "arguments": [
      "vmInstanceUuid"
    ],
    "line": 446,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "current operation is not supported on secondary vm[uuid:%s]",
    "en_US": "current operation is not supported on secondary vm[uuid:{0}]",
    "zh_CN": "辅助云主机[uuid：{0}]不支持当前操作",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 466,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "can not migrate FT primary vm",
    "en_US": "can not migrate FT primary vm",
    "zh_CN": "无法迁移FT主云主机",
    "arguments": [],
    "line": 472,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "can not migrate FT secondary vm",
    "en_US": "can not migrate FT secondary vm",
    "zh_CN": "无法迁移FT辅助云主机",
    "arguments": [],
    "line": 476,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "Failed to create ft vm, please enable ft in GlobalConfig",
    "en_US": "Failed to create ft vm, please enable ft in GlobalConfig",
    "zh_CN": "无法创建FT VM，请在GlobalConfig中启用FT",
    "arguments": [],
    "line": 511,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of mediaType: %s, only RootVolumeTemplate can be used to create vm",
    "en_US": "image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate can be used to create vm",
    "zh_CN": "镜像[uuid：{0}]的媒体类型为：{1}，只能使用RootVolumeTemplate创建VM",
    "arguments": [
      "msg.getImageUuid()",
      "imgFormat"
    ],
    "line": 549,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of format: %s, only %s can be used to create vm",
    "en_US": "image[uuid:{0}] is of format: {1}, only {2} can be used to create vm",
    "zh_CN": "镜像[uuid：{0}]的格式为：{1}，只有{2}可用于创建VM",
    "arguments": [
      "msg.getImageUuid()",
      "imageFileFmt",
      "ImageConstant.QCOW2_FORMAT_STRING"
    ],
    "line": 554,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java"
  },
  {
    "raw": "failed to allocate port on host[uuid: %s]",
    "en_US": "failed to allocate port on host[uuid: {0}]",
    "zh_CN": "无法在物理机[uuid：{0}]上分配端口",
    "arguments": [
      "hostUuid"
    ],
    "line": 364,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java"
  },
  {
    "raw": "allocated port num less than requested on host[uuid: %s]",
    "en_US": "allocated port num less than requested on host[uuid: {0}]",
    "zh_CN": "物理机[uuid：{0}]上分配的端口号小于请求的端口号",
    "arguments": [
      "hostUuid"
    ],
    "line": 369,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java"
  },
  {
    "raw": "could not get hostUuid of primary vm[uuid:%s]",
    "en_US": "could not get hostUuid of primary vm[uuid:{0}]",
    "zh_CN": "无法获取主云主机[uuid：{0}]的Hostuuid",
    "arguments": [
      "smsg.getPrimaryVmInstanceUuid()"
    ],
    "line": 524,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java"
  },
  {
    "raw": "can not start secondary vm, because primary vm is still stopped",
    "en_US": "can not start secondary vm, because primary vm is still stopped",
    "zh_CN": "无法启动辅助云主机，因为主云主机仍处于停止状态",
    "arguments": [],
    "line": 892,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java"
  },
  {
    "raw": "Can not migrate ft secondary vm[uuid:%s]",
    "en_US": "Can not migrate ft secondary vm[uuid:{0}]",
    "zh_CN": "无法迁移FT辅助云主机[uuid：{0}]",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 1322,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java"
  },
  {
    "raw": "Can not migrate ft primary vm[uuid:%s]",
    "en_US": "Can not migrate ft primary vm[uuid:{0}]",
    "zh_CN": "无法迁移FT主云主机[uuid：{0}]",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 1327,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java"
  },
  {
    "raw": "Current ft vm is in unknown status, can not stop it, please try to fail-over it manually",
    "en_US": "Current ft vm is in unknown status, can not stop it, please try to fail-over it manually",
    "zh_CN": "当前FT云主机处于未知状态，无法停止，请尝试手动故障转移",
    "arguments": [],
    "line": 546,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java"
  },
  {
    "raw": "unable to start the vm[uuid:%s]. It doesn\u0027t have any nic, please attach a nic and try again",
    "en_US": "unable to start the vm[uuid:{0}]. It doesn\u0027t have any nic, please attach a nic and try again",
    "zh_CN": "无法启动云主机[uuid:{0}]。该云主机没有网卡，请添加网卡后再试",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 596,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java"
  },
  {
    "raw": "failed to allocate port of nic[uuid: %s] on host[uuid: %s]",
    "en_US": "failed to allocate port of nic[uuid: {0}] on host[uuid: {1}]",
    "zh_CN": "无法分配物理机[uuid：{1}]上的NIC[uuid：{0}]的端口",
    "arguments": [
      "nicUuid",
      "pvm.getHostUuid()"
    ],
    "line": 3110,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "allocated port num less than requested of nic[uuid: %s] on host[uuid: %s]",
    "en_US": "allocated port num less than requested of nic[uuid: {0}] on host[uuid: {1}]",
    "zh_CN": "分配的端口数小于物理机[uuid：{1}]上的NIC[uuid：{0}]请求的端口数",
    "arguments": [
      "nicUuid",
      "pvm.getHostUuid()"
    ],
    "line": 3115,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "can not create secondary vm, because primary vm is stopped",
    "en_US": "can not create secondary vm, because primary vm is stopped",
    "zh_CN": "无法创建辅助云主机，因为主云主机已停止",
    "arguments": [],
    "line": 727,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "an other fault tolerance gc task is running, cancel the new task and wait return",
    "en_US": "an other fault tolerance gc task is running, cancel the new task and wait return",
    "zh_CN": "其他容错GC任务正在运行，请取消新任务并等待返回",
    "arguments": [],
    "line": 641,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "can not start secondary vm, because primary vm is stopped",
    "en_US": "can not start secondary vm, because primary vm is stopped",
    "zh_CN": "无法启动辅助云主机，因为主云主机已停止",
    "arguments": [],
    "line": 2256,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "created svm found, report error for this start secondary vm request",
    "en_US": "created svm found, report error for this start secondary vm request",
    "zh_CN": "找到已创建的SVM，报告此启动辅助云主机请求的错误",
    "arguments": [],
    "line": 1212,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "could not failover vm[uuid:%s]. Related fault tolerance vm group not exists",
    "en_US": "could not failover vm[uuid:{0}]. Related fault tolerance vm group not exists",
    "zh_CN": "无法对云主机[uuid：{0}]进行故障切换。相关容错云主机组不存在",
    "arguments": [
      "vmInstanceUuid"
    ],
    "line": 1468,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "pvm[uuid:%s] not exists",
    "en_US": "pvm[uuid:{0}] not exists",
    "zh_CN": "PVM[uuid：{0}]不存在",
    "arguments": [
      "group.getPrimaryVmInstanceUuid()"
    ],
    "line": 1484,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "unexpected exception",
    "en_US": "unexpected exception",
    "zh_CN": "意外异常",
    "arguments": [],
    "line": 1596,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "could not failover. Secondary vm is unknown but no fault tolerance network address available",
    "en_US": "could not failover. Secondary vm is unknown but no fault tolerance network address available",
    "zh_CN": "无法进行故障转移。辅助云主机未知，但没有可用的容错网络地址",
    "arguments": [],
    "line": 1556,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "could not failover. Primary vm is unknown but no fault tolerance network address available",
    "en_US": "could not failover. Primary vm is unknown but no fault tolerance network address available",
    "zh_CN": "无法进行故障转移。主云主机未知，但没有可用的容错网络地址",
    "arguments": [],
    "line": 1495,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "cannot found available ip from current ft network. Check whether global config[category:ft name:fault.tolerance.network.cidr] is correctly set, and confirm that host[uuid:%s] own ip address in the CIDR",
    "en_US": "cannot found available ip from current ft network. Check whether global config[category:ft name:fault.tolerance.network.cidr] is correctly set, and confirm that host[uuid:{0}] own ip address in the CIDR",
    "zh_CN": "在当前FT网络中找不到可用的IP。e.检查是否正确设置了全局配置[Category：FT Name：Fault.TolerancNetwork.CIDR]，并确认物理机[uuid：{0}]在CIDR中拥有IP地址",
    "arguments": [
      "hostUuid"
    ],
    "line": 1669,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "not fault tolerance vm port found",
    "en_US": "not fault tolerance vm port found",
    "zh_CN": "未找到容错VM端口",
    "arguments": [],
    "line": 3009,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage. check below:\\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage. check below:\\n1. if the backup storage is attached to the zone where the VM[name: {1}, uuid:{2}] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现镜像[uuid:{0}]在任何处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \\n1. 镜像服务器是否已经过载到区域中的云主机[name: {1}, uuid:{2}]中；\\n2. 如果镜像服务器不是处于连接状态，请尝试重连",
    "arguments": [
      "imageUuid",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: %s, uuid:%s] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is in\\n2. if the backup storage is in connected status, if not, try reconnecting it",
    "zh_CN": "不能发现镜像[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \\n1. 镜像服务器是否已经过载到区域中的云主机[name: {2}, uuid:{3}]中；\\n2. 如果镜像服务器不是处于Connected状态，请尝试重连",
    "arguments": [
      "imageUuid",
      "spec.getVmInventory().getZoneUuid()",
      "spec.getVmInventory().getName()",
      "spec.getVmInventory().getUuid()"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "no backup storage attached to the zone[uuid:%s] contains the ISO[uuid:%s]",
    "en_US": "no backup storage attached to the zone[uuid:{0}] contains the ISO[uuid:{1}]",
    "zh_CN": "没有包含着ISO[uuid:{1}]的镜像服务器添加到区域[uuid:{0}]",
    "arguments": [
      "zoneUuid",
      "isoImageUuid"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java"
  },
  {
    "raw": "missing fault tolerance vm group",
    "en_US": "missing fault tolerance vm group",
    "zh_CN": "缺少容错VM组",
    "arguments": [],
    "line": 63,
    "fileName": "src/main/java/org/zstack/faulttolerance/ShadowVmCloneTagsFlow.java"
  },
  {
    "raw": "The network[%s] have been added into the flow meter[%s]",
    "en_US": "The network[{0}] have been added into the flow meter[{1}]",
    "zh_CN": "网络[{0}]已添加到流量计[{1}]中",
    "arguments": [
      "vo.getL3NetworkUuid()",
      "vo.getFlowMeterUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "The virtual router have been added into other flow meter",
    "en_US": "The virtual router have been added into other flow meter",
    "zh_CN": "已将虚拟路由器添加到其他流量计中",
    "arguments": [],
    "line": 71,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "invalid type parameter is %s and should be in %s",
    "en_US": "invalid type parameter is {0} and should be in {1}",
    "zh_CN": "无效的类型参数为{0}，应位于{1}中",
    "arguments": [
      "msg.getVersion()",
      "FlowMeterConstants.TYPE.NetFlow.toString()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "[%s] is not formatted as IP address",
    "en_US": "[{0}] is not formatted as IP address",
    "zh_CN": "[{0}]的格式不是IP地址",
    "arguments": [
      "msg.getServer()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "Collector duplicate with %s",
    "en_US": "Collector duplicate with {0}",
    "zh_CN": "收集器与{0}重复",
    "arguments": [
      "collector.getUuid()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "FlowMeter[%s] doesn\u0027t exist",
    "en_US": "FlowMeter[{0}] doesn\u0027t exist",
    "zh_CN": "流量计[{0}]不存在",
    "arguments": [
      "collectorVO.getFlowMeterUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "FlowMeter[%s] IPv6 doesn\u0027t support version[%s]",
    "en_US": "FlowMeter[{0}] IPv6 doesn\u0027t support version[{1}]",
    "zh_CN": "流量计[{0}]IPv6不支持版本[{1}]",
    "arguments": [
      "collectorVO.getFlowMeterUuid()",
      "vo.getVersion().toString()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "no specify parameter",
    "en_US": "no specify parameter",
    "zh_CN": "没有指定参数",
    "arguments": [],
    "line": 150,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "Flow collector[%s] doesn\u0027t exist",
    "en_US": "Flow collector[{0}] doesn\u0027t exist",
    "zh_CN": "流收集器[{0}]不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "Collector [%s %d] duplicate with %s",
    "en_US": "Collector [{0} {1}] duplicate with {2}",
    "zh_CN": "收集器[{0}{1}]与{2}重复",
    "arguments": [
      "server",
      "port",
      "collector.getUuid()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java"
  },
  {
    "raw": "unable to set vm hostname. the vm[uuid:%s] do not have default L3 network",
    "en_US": "unable to set vm hostname. the vm[uuid:{0}] do not have default L3 network",
    "zh_CN": "无法设置云主机物理机名。VM[uuid：{0}]没有默认的三层网络",
    "arguments": [
      "vmUuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "conflict hostname, there has been a VM[uuid:%s] having hostname[%s] on L3 network[uuid:%s]",
    "en_US": "conflict hostname, there has been a VM[uuid:{0}] having hostname[{1}] on L3 network[uuid:{2}]",
    "zh_CN": "物理机名冲突，在三层网络[uuid：{2}]上存在物理机名为[{1}]的云主机[uuid：{0}]",
    "arguments": [
      "sameTag.getResourceUuid()",
      "hostname",
      "defaultL3uuid"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "update vm[uuid:%s] network config failed, because vm not running.",
    "en_US": "update vm[uuid:{0}] network config failed, because vm not running.",
    "zh_CN": "更新VM[uuid：{0}]网络配置失败，因为VM未运行。",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "update vm[uuid:%s] network config failed, because the vm type %s is not supported.",
    "en_US": "update vm[uuid:{0}] network config failed, because the vm type {1} is not supported.",
    "zh_CN": "更新VM[uuid：{0}]网络配置失败，因为不支持VM类型{1}。",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "vm.getType()"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "update vm[uuid:%s] network config failed, because guesttools not running.",
    "en_US": "update vm[uuid:{0}] network config failed, because guesttools not running.",
    "zh_CN": "更新VM[uuid：{0}]网络配置失败，因为guestTools未运行。",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "update vm[uuid:%s] network config failed, because the guesttools version is too low for this feature.",
    "en_US": "update vm[uuid:{0}] network config failed, because the guesttools version is too low for this feature.",
    "zh_CN": "更新VM[uuid：{0}]网络配置失败，因为GuestTools版本太低，无法使用此功能。",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "sync nic[uuid:%s] network config failed, the current qga tools only support manual ipv6 configuration and do not support automatic sync",
    "en_US": "sync nic[uuid:{0}] network config failed, the current qga tools only support manual ipv6 configuration and do not support automatic sync",
    "zh_CN": "同步NIC[uuid：{0}]网络配置失败，当前QGA工具仅支持手动IPv6配置，不支持自动同步",
    "arguments": [
      "nic.getUuid()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it\u0027s hypervisor type is not supported",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it\u0027s hypervisor type is not supported",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为其虚拟化层目前不支持增强工具",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it\u0027s not running",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it\u0027s not running",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为它目前并未处于运行状态",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it\u0027s not user vm",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it\u0027s not user vm",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为它不是用户云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot attach guest-tools iso to vm[uuid:%s] because it has no cdrom",
    "en_US": "cannot attach guest-tools iso to vm[uuid:{0}] because it has no cdrom",
    "zh_CN": "无法为云主机[uuid:{0}挂载增强工具镜像，因为它没有配备光驱",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get guest-tools info from vm[uuid:%s] because it\u0027s not running",
    "en_US": "cannot get guest-tools info from vm[uuid:{0}] because it\u0027s not running",
    "zh_CN": "无法从云主机[uuid:{0}]内部获取增强工具信息，因为它目前并未处于运行状态",
    "arguments": [
      "vmUuid"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get guest-tools info from vm[uuid:%s] because it\u0027s not user vm",
    "en_US": "cannot get guest-tools info from vm[uuid:{0}] because it\u0027s not user vm",
    "zh_CN": "无法从云主机[uuid:{0}]内部获取增强工具信息，因为它不是用户云主机",
    "arguments": [
      "vmUuid"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "invalid debug parameter: %s",
    "en_US": "invalid debug parameter: {0}",
    "zh_CN": "无效的调试参数：{0}",
    "arguments": [
      "invalidSet"
    ],
    "line": 219,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "can not update guest tools state for vm [uuid:%s] because vm is deleted",
    "en_US": "can not update guest tools state for vm [uuid:{0}] because vm is deleted",
    "zh_CN": "无法更新VM[uuid：{0}]的来宾工具状态，因为VM已删除",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 227,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "can not update guest tools state for vm[uuid:%s] because it\u0027s not user vm",
    "en_US": "can not update guest tools state for vm[uuid:{0}] because it\u0027s not user vm",
    "zh_CN": "无法更新VM[uuid：{0}]的来宾工具状态，因为它不是用户VM",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 232,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java"
  },
  {
    "raw": "cannot get latest guest-tools for vm[uuid:%s] because it\u0027s hypervisor type is not supported",
    "en_US": "cannot get latest guest-tools for vm[uuid:{0}] because it\u0027s hypervisor type is not supported",
    "zh_CN": "无法为云主机[uuid:{0}获取最新可用的增强工具镜像，因为其虚拟化层目前不支持增强工具",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 704,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java"
  },
  {
    "raw": "cannot get latest guest-tools for vm[uuid:%s] because it\u0027s not running or volume recovering.",
    "en_US": "cannot get latest guest-tools for vm[uuid:{0}] because it\u0027s not running or volume recovering.",
    "zh_CN": "无法获取VM[uuid：{0}]的最新来宾工具，因为它未运行或卷正在恢复。",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 713,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java"
  },
  {
    "raw": "cannot get latest guest-tools for vm[uuid:%s] because it\u0027s not user vm",
    "en_US": "cannot get latest guest-tools for vm[uuid:{0}] because it\u0027s not user vm",
    "zh_CN": "无法为云主机[uuid:{0}]获取最新可用的增强工具镜像，因为它不是用户云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 722,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java"
  },
  {
    "raw": "no proper guest tools iso found in management node[uuid:%s] for host[uuid:%s]",
    "en_US": "no proper guest tools iso found in management node[uuid:{0}] for host[uuid:{1}]",
    "zh_CN": "无法在管理节点[uuid:{0}]上为物理机[uuid:{1}]寻找到合适的增强工具镜像",
    "arguments": [
      "Platform.getManagementServerId()",
      "msg.getHostUuid()"
    ],
    "line": 1067,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java"
  },
  {
    "raw": "failed to set vm[uuid: %s, name: %s] hostname, because qga state is not running and there is no dhcp service",
    "en_US": "failed to set vm[uuid: {0}, name: {1}] hostname, because qga state is not running and there is no dhcp service",
    "zh_CN": "无法设置VM[uuid：{0}，名称：{1}]物理机名，因为QGA状态未在运行，并且没有DHCP服务",
    "arguments": [
      "vm.getUuid()",
      "vm.getName()"
    ],
    "line": 2042,
    "fileName": "src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java"
  },
  {
    "raw": "failed to get guest tools info from vm[uuid:%s], because:%s",
    "en_US": "failed to get guest tools info from vm[uuid:{0}], because:{1}",
    "zh_CN": "无法从云主机[uuid:{0}]内部获取增强工具信息，因为:{1}",
    "arguments": [
      "vmUuid",
      "rsp.getError()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java"
  },
  {
    "raw": "failed to download guest tools iso because no kvm host[uuid:%s] found",
    "en_US": "failed to download guest tools iso because no kvm host[uuid:{0}] found",
    "zh_CN": "KVM物理机[uuid:{0}]不存在，无法为其下载增强工具镜像",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 244,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java"
  },
  {
    "raw": "failed to attach guest tools iso to vm[uuid:%s], because:%s",
    "en_US": "failed to attach guest tools iso to vm[uuid:{0}], because:{1}",
    "zh_CN": "无法为云主机[uuid:{0}]挂载增强工具镜像，因为:{1}",
    "arguments": [
      "vm.getUuid()",
      "rsp.getError()"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java"
  },
  {
    "raw": "failed to detach guest tools iso from vm[uuid:%s], because:%s",
    "en_US": "failed to detach guest tools iso from vm[uuid:{0}], because:{1}",
    "zh_CN": "无法从VM[uuid：{0}]分离来宾工具ISO，因为：{1}",
    "arguments": [
      "vm.getUuid()",
      "rsp.getError()"
    ],
    "line": 358,
    "fileName": "src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java"
  },
  {
    "raw": "can not be here",
    "en_US": "can not be here",
    "zh_CN": "不能在这里。",
    "arguments": [
      "errCode"
    ],
    "line": 200,
    "fileName": "src/main/java/org/zstack/guesttools/pvpanic/PVPanicCrashStrategyManagerImpl.java"
  },
  {
    "raw": "can not set FT on vm[uuid:%s] because it is not stopped",
    "en_US": "can not set FT on vm[uuid:{0}] because it is not stopped",
    "zh_CN": "无法在VM[uuid：{0}]上设置FT，因为它未停止",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/ha/HaInterceptor.java"
  },
  {
    "raw": "can not set FT on vm[uuid:%s] because some data volume is still attached",
    "en_US": "can not set FT on vm[uuid:{0}] because some data volume is still attached",
    "zh_CN": "无法在VM[uuid：{0}]上设置FT，因为某些数据云盘仍处于挂接状态",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/ha/HaInterceptor.java"
  },
  {
    "raw": "can not set FT on vm[uuid:%s] since pci device attached",
    "en_US": "can not set FT on vm[uuid:{0}] since pci device attached",
    "zh_CN": "由于连接了PCI设备，无法在VM[uuid：{0}]上设置FT",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/ha/HaInterceptor.java"
  },
  {
    "raw": "can not set FT on vm[uuid:%s] because there are usb devices attached by passthrough",
    "en_US": "can not set FT on vm[uuid:{0}] because there are usb devices attached by passthrough",
    "zh_CN": "无法在VM[uuid：{0}]上设置FT，因为存在通过passthrough连接的USB设备",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/ha/HaInterceptor.java"
  },
  {
    "raw": "can not set FT on vmm[uuid:%s] since mdev device attached",
    "en_US": "can not set FT on vmm[uuid:{0}] since mdev device attached",
    "zh_CN": "无法在VMM[uuid：{0}]上设置FT，因为已连接MDEV设备",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/ha/HaInterceptor.java"
  },
  {
    "raw": "hosts failed to port scan the failure host[uuid:%s, ip:%s], errors are %s",
    "en_US": "hosts failed to port scan the failure host[uuid:{0}, ip:{1}], errors are {2}",
    "zh_CN": "扫描物理机失败[uuid:{0}, ip:{1}]，错误原因是 {2}",
    "arguments": [
      "struct.getHostUuid()",
      "struct.getHostIp()",
      "errors"
    ],
    "line": 237,
    "fileName": "src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java"
  },
  {
    "raw": "(%d/%d) start HaHostChecker %s: predict time is [%d] seconds",
    "en_US": "({0}/{1}) start HaHostChecker {2}: predict time is [{3}] seconds",
    "zh_CN": "（{0}/{1}）启动HaHostChecker{2}：预测时间为[{3}]秒",
    "arguments": [
      "checkers.indexOf(checker) + 1",
      "checkers.size()",
      "checker.getClass().getSimpleName()",
      "s.getSuccessTimes() * s.getSuccessInterval()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "cannot find the host of the vm[name:%s, uuid:%s], hostUuid is null",
    "en_US": "cannot find the host of the vm[name:{0}, uuid:{1}], hostUuid is null",
    "zh_CN": "找不到vm[name:{0}, uuid:{1}]的物理机, 因为hostUuid为null",
    "arguments": [
      "self.getName()",
      "self.getUuid()"
    ],
    "line": 160,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "no HaHostChecker found, cannot do HA",
    "en_US": "no HaHostChecker found, cannot do HA",
    "zh_CN": "找不到HaHostChecker，无法执行HA",
    "arguments": [],
    "line": 167,
    "fileName": "src/main/java/org/zstack/ha/HaKvmWorker.java"
  },
  {
    "raw": "the management node fails to scan the host",
    "en_US": "the management node fails to scan the host",
    "zh_CN": "管理节点扫描物理机失败",
    "arguments": [],
    "line": 102,
    "fileName": "src/main/java/org/zstack/ha/HaManagementNodeChecker.java"
  },
  {
    "raw": "the VM[uuid:%s] volume stored location primary storage is in a state of maintenance",
    "en_US": "the VM[uuid:{0}] volume stored location primary storage is in a state of maintenance",
    "zh_CN": "云主机[{0}]云盘所在主存储处于维护状态",
    "arguments": [
      "vmUuid"
    ],
    "line": 1873,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "VM is started successfully",
    "en_US": "VM is started successfully",
    "zh_CN": "云主机已成功启动",
    "arguments": [],
    "line": 1615,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "Failed to start the NeverStop VM",
    "en_US": "Failed to start the NeverStop VM",
    "zh_CN": "无法启动NeverStop云主机",
    "arguments": [],
    "line": 1618,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "the value[%s] is lesser than 0 or greater than 1 ",
    "en_US": "the value[{0}] is lesser than 0 or greater than 1 ",
    "zh_CN": "值[{0}]小于0或大于1",
    "arguments": [
      "newValue"
    ],
    "line": 394,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "A GC job is submitted to HA the VM[retry delay: %s seconds]",
    "en_US": "A GC job is submitted to HA the VM[retry delay: {0} seconds]",
    "zh_CN": "提交GC任务来高可用VM[重试间隔: {0} 秒]",
    "arguments": [
      "HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)"
    ],
    "line": 699,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "HA is successfully completed",
    "en_US": "HA is successfully completed",
    "zh_CN": "HA已成功完成",
    "arguments": [],
    "line": 1301,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "Failed to HA the VM",
    "en_US": "Failed to HA the VM",
    "zh_CN": "高可用VM失败",
    "arguments": [],
    "line": 1309,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "vm stopped unexpectedly, double check state",
    "en_US": "vm stopped unexpectedly, double check state",
    "zh_CN": "VM意外停止，请再次检查状态",
    "arguments": [],
    "line": 1195,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "cannot determine VM[%s] status on host[%s], try to start it",
    "en_US": "cannot determine VM[{0}] status on host[{1}], try to start it",
    "zh_CN": "无法确定物理机[{1}]上的VM[{0}]状态，请尝试启动它",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 1204,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "vm state is stopped, try to start it",
    "en_US": "vm state is stopped, try to start it",
    "zh_CN": "云主机状态为“已停止”，请尝试启动它",
    "arguments": [],
    "line": 1601,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "VM[%s] is running on host[%s]",
    "en_US": "VM[{0}] is running on host[{1}]",
    "zh_CN": "VM[{0}]正在物理机[{1}]上运行",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 1227,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "VM[%s] is paused on host[%s]",
    "en_US": "VM[{0}] is paused on host[{1}]",
    "zh_CN": "物理机[{1}]上的云主机[{0}]已暂停",
    "arguments": [
      "vmUuid",
      "hostUuid"
    ],
    "line": 1240,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "the hypervisor[%s] does not support VM HA",
    "en_US": "the hypervisor[{0}] does not support VM HA",
    "zh_CN": "当前云主机监视器(hypervisor)[{0}]不支持VM HA",
    "arguments": [
      "vm.getHypervisorType()"
    ],
    "line": 1268,
    "fileName": "src/main/java/org/zstack/ha/HaManagerImpl.java"
  },
  {
    "raw": "[HA Worker]: the success ratio[%s] below the threshold[%s], the host[uuid:%s] is judged as dead, errors are %s. Start HA all the vms on this host before",
    "en_US": "[HA Worker]: the success ratio[{0}] below the threshold[{1}], the host[uuid:{2}] is judged as dead, errors are {3}. Start HA all the vms on this host before",
    "zh_CN": "[HA Worker]：成功率[{0}]低于阈值[{1}]，物理机[uuid：{2}]被判断为死，错误为{3}。之前在此物理机上启动所有云主机的HA",
    "arguments": [
      "ratio",
      "threshold",
      "hostUuid",
      "errors"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/ha/HostCheckResult.java"
  },
  {
    "raw": "[HA worker]: all host checkers are finished and the success ratio is %s that is greater than the threshold[%s]; no HA need for the vms on this host before. Please wait for the host reconnected",
    "en_US": "[HA worker]: all host checkers are finished and the success ratio is {0} that is greater than the threshold[{1}]; no HA need for the vms on this host before. Please wait for the host reconnected",
    "zh_CN": "[HA Worker]：所有物理机检查器都已完成，成功率为{0}，大于阈值[{1}]。以前，此物理机上的云主机不需要HA。请等待物理机重新连接",
    "arguments": [
      "ratio",
      "threshold"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/ha/HostCheckResult.java"
  },
  {
    "raw": "VM state is not running, try to start it",
    "en_US": "VM state is not running, try to start it",
    "zh_CN": "云主机状态为未运行，请尝试启动它",
    "arguments": [],
    "line": 102,
    "fileName": "src/main/java/org/zstack/ha/NeverStopVmGC.java"
  },
  {
    "raw": "enter the new value here, empty means no change.",
    "en_US": "enter the new value here, empty means no change.",
    "zh_CN": "在此输入新值，空表示不变。",
    "arguments": [],
    "line": 14,
    "fileName": "src/main/java/org/zstack/header/backup/NonBackupInfo.java"
  },
  {
    "raw": "keyType not supported type [%s]",
    "en_US": "keyType not supported type [{0}]",
    "zh_CN": "KeyType不支持类型[{0}]",
    "arguments": [
      "type"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java"
  },
  {
    "raw": "key: [%s] with type: [%s] already existed by accountUuid: [%s]",
    "en_US": "key: [{0}] with type: [{1}] already existed by accountUuid: [{2}]",
    "zh_CN": "AccountUuId[{2}]已存在类型为[{1}]的项[{0}]",
    "arguments": [
      "msg.getKey()",
      "msg.getType()",
      "accountUuid"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java"
  },
  {
    "raw": "key: [%s] already existed by accountUuid: [%s]",
    "en_US": "key: [{0}] already existed by accountUuid: [{1}]",
    "zh_CN": "key: [{0}]已经存在于accountUuid: [{1}]",
    "arguments": [
      "msg.getKey()",
      "accountUuid"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java"
  },
  {
    "raw": "regionId [%s] already created by ak [%s]",
    "en_US": "regionId [{0}] already created by ak [{1}]",
    "zh_CN": "区域ID[{0}]已经被AccessKey[{1}]创建",
    "arguments": [
      "msg.getRegionId()",
      "ak"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java"
  },
  {
    "raw": "dcType not supported type [%s]",
    "en_US": "dcType not supported type [{0}]",
    "zh_CN": "DCType不支持类型[{0}]",
    "arguments": [
      "type"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java"
  },
  {
    "raw": "DataCenter [%s] is still in sync progress, please wait.",
    "en_US": "DataCenter [{0}] is still in sync progress, please wait.",
    "zh_CN": "区域[{0}]仍在同步进程中，请稍后",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/hybrid/datacenter/DataCenterManagerImpl.java"
  },
  {
    "raw": "identity zone [%s] already existed, uuid is: %s",
    "en_US": "identity zone [{0}] already existed, uuid is: {1}",
    "zh_CN": "可用区[{0}]已经存在，uuid是{1}",
    "arguments": [
      "msg.getZoneId()",
      "izo.getUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "type [%s] is not matched datacenter type [%s]",
    "en_US": "type [{0}] is not matched datacenter type [{1}]",
    "zh_CN": "类型[{0}]与区域类型[{1}]不匹配",
    "arguments": [
      "type",
      "dvo.getDcType().toString()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "either dataCenterUuid or regionId should be set, please check the parameters.",
    "en_US": "either dataCenterUuid or regionId should be set, please check the parameters.",
    "zh_CN": "dataCenterUuid和regionId应该被设置，请检查参数",
    "arguments": [],
    "line": 82,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java"
  },
  {
    "raw": "IdentityZone [%s] is still in sync progress, please wait.",
    "en_US": "IdentityZone [{0}] is still in sync progress, please wait.",
    "zh_CN": "可用区[{0}]仍在同步进程中，请稍后",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/hybrid/identityzone/IdentityZoneManagerImpl.java"
  },
  {
    "raw": "EcsInstance must be running or stopped while deleting eip ",
    "en_US": "EcsInstance must be running or stopped while deleting eip ",
    "zh_CN": "删除弹性IP时云主机必须时允许中或者已停止",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridEipCascadeExtension.java"
  },
  {
    "raw": "router interface must be in the same datacenter, but ri[%s] is in dc[%s] and ri[%s] is in dc[%s]",
    "en_US": "router interface must be in the same datacenter, but ri[{0}] is in dc[{1}] and ri[{2}] is in dc[{3}]",
    "zh_CN": "路由接口必须在相同的区域，但是接口[{0}]在区域[{1}]而接口[{2}]在区域[{3}]",
    "arguments": [
      "vbri.getUuid()",
      "vbri.getDataCenterUuid()",
      "vrouteri.getUuid()",
      "vrouteri.getDataCenterUuid()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "router interface[%s] status is not idle, it is %s",
    "en_US": "router interface[{0}] status is not idle, it is {1}",
    "zh_CN": "路由接口[{0}]并非闲置状态，当前状态为{1}",
    "arguments": [
      "vrouteri.getUuid()",
      "vrouteri.getStatus()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "router interface[%s] already has a connection, it is %s",
    "en_US": "router interface[{0}] already has a connection, it is {1}",
    "zh_CN": "路由接口[{0}]已经有链接{1}",
    "arguments": [
      "vrouteri.getUuid()",
      "vrouteri.getOppositeInterfaceUuid()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "accessPointUuid cannot be null if the router interface on VBR type router",
    "en_US": "accessPointUuid cannot be null if the router interface on VBR type router",
    "zh_CN": "当路由接口的类型为VBR路由时，accessPointUuid不能为空",
    "arguments": [],
    "line": 109,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "cannot delete system entry",
    "en_US": "cannot delete system entry",
    "zh_CN": "不能删除系统路由条目",
    "arguments": [],
    "line": 183,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "only support intranet rule in vpc",
    "en_US": "only support intranet rule in vpc",
    "zh_CN": "在VPC中仅仅支持内网规则",
    "arguments": [],
    "line": 189,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid cidr",
    "en_US": "{0} is not a valid cidr",
    "zh_CN": "{0}是一个无效的CIDR",
    "arguments": [
      "msg.getCidr()"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "security group rule already existed",
    "en_US": "security group rule already existed",
    "zh_CN": "安全组已经存在了",
    "arguments": [],
    "line": 204,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "dstCidrBlock[%s] is not a valid cidr",
    "en_US": "dstCidrBlock[{0}] is not a valid cidr",
    "zh_CN": "dstCidrBlock[{0}]是一个无效的CIDR",
    "arguments": [
      "msg.getDstCidrBlock()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "next hop type [%s] not supported create route entry now!",
    "en_US": "next hop type [{0}] not supported create route entry now!",
    "zh_CN": "不支持下一个跃点类型[{0}]，请立即创建路由条目！",
    "arguments": [
      "msg.getNextHopType()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such vpn gateway: %s",
    "en_US": "no such vpn gateway: {0}",
    "zh_CN": "没有这样的VPN网关: {0}",
    "arguments": [
      "msg.getNextHopUuid()"
    ],
    "line": 235,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "nexthop routerInterface belongs to %s, but the entry belongs to %s",
    "en_US": "nexthop routerInterface belongs to {0}, but the entry belongs to {1}",
    "zh_CN": "下一跳路由接口类型是{0}，但是该路由类型是{1}",
    "arguments": [
      "rivo.getvRouterType().toString()",
      "msg.getvRouterType()"
    ],
    "line": 224,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such ecs instance: %s",
    "en_US": "no such ecs instance: {0}",
    "zh_CN": "没有这样的ESC云主机: {0}",
    "arguments": [
      "msg.getNextHopUuid()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "virtual border router only support routerinterface as next hop type",
    "en_US": "virtual border router only support routerinterface as next hop type",
    "zh_CN": "作为下一跳类型，虚拟边界路由只支持路由接口",
    "arguments": [],
    "line": 249,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "vswitch\u0027s cidr [%s] not in the vpc\u0027s [%s]",
    "en_US": "vswitch\u0027s cidr [{0}] not in the vpc\u0027s [{1}]",
    "zh_CN": "虚拟交换机的CIDR没有在VPC[{1}]中",
    "arguments": [
      "msg.getCidrBlock()",
      "vpcCidr"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "cidr is overlap by another vswitch: %s",
    "en_US": "cidr is overlap by another vswitch: {0}",
    "zh_CN": "CIDR和其他的虚拟交换机{0}有重叠",
    "arguments": [
      "old.getUuid()"
    ],
    "line": 276,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "invalid CidrBlock: %s, which must subnet in \u002710.0.0.0/8\u0027, \u0027172.16.0.0/12\u0027, \u0027192.168.0.0/16\u0027",
    "en_US": "invalid CidrBlock: {0}, which must subnet in \u002710.0.0.0/8\u0027, \u0027172.16.0.0/12\u0027, \u0027192.168.0.0/16\u0027",
    "zh_CN": "无效的CIDR块: {0}，CIDR必须在10.0.0.0/8、172.16.0.0/12和192.168.0.0/16子网内",
    "arguments": [
      "msg.getCidrBlock()"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such virtual router: %s",
    "en_US": "no such virtual router: {0}",
    "zh_CN": "没有这个的虚拟路由: {0}",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "no such virtual border router: %s",
    "en_US": "no such virtual border router: {0}",
    "zh_CN": "没有这个虚拟边界路由器: {0}",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "localGateway is not IPv4: %s",
    "en_US": "localGateway is not IPv4: {0}",
    "zh_CN": "本地网关地址不是IPV4: {0}",
    "arguments": [
      "msg.getLocalGatewayIp()"
    ],
    "line": 312,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "peerGateway is not IPv4: %s",
    "en_US": "peerGateway is not IPv4: {0}",
    "zh_CN": "对端网关地址不是IPV4: {0}",
    "arguments": [
      "msg.getPeerGatewayIp()"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "peerGateway is not subnet mask: %s",
    "en_US": "peerGateway is not subnet mask: {0}",
    "zh_CN": "对端网关地址不是在子网掩码{0}中",
    "arguments": [
      "msg.getPeeringSubnetMask()"
    ],
    "line": 318,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "vlanId is not number: %s",
    "en_US": "vlanId is not number: {0}",
    "zh_CN": "vlanId不是一个数字:{0}",
    "arguments": [
      "msg.getVlanId()"
    ],
    "line": 322,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t attach eip to ecs: [%s] , eip :[%s] already attached ecs:[%s] ",
    "en_US": "couldn\u0027t attach eip to ecs: [{0}] , eip :[{1}] already attached ecs:[{2}] ",
    "zh_CN": "不能绑定弹性IP到ECS云主机[{0}]，弹性IP[{1}]已经绑定到ECS云主机[{2}]",
    "arguments": [
      "msg.getEcsUuid()",
      "msg.getEipUuid()",
      "hevo.getAllocateResourceUuid()"
    ],
    "line": 332,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "ecs [%s] already has public ip now",
    "en_US": "ecs [{0}] already has public ip now",
    "zh_CN": "ECS云主机[{0}]已经拥有IP",
    "arguments": [
      "msg.getEcsUuid()"
    ],
    "line": 337,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t attach eip [%s] to ecs: [%s] , ecs is already attached",
    "en_US": "couldn\u0027t attach eip [{0}] to ecs: [{1}] , ecs is already attached",
    "zh_CN": "不能绑定弹性IP[{0}]到ECS云主机[{1}]，ECS云主机已经绑定了弹性IP",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "eip[%s] and ecs[%s] should be in the same dataCenter ",
    "en_US": "eip[{0}] and ecs[{1}] should be in the same dataCenter ",
    "zh_CN": "弹性IP[{0}]和ECS云主机[{1}]应该在同一个区域",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getEcsUuid()"
    ],
    "line": 350,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "couldn\u0027t detach eip :[%s], it is not attached on any instance ",
    "en_US": "couldn\u0027t detach eip :[{0}], it is not attached on any instance ",
    "zh_CN": "不能解绑弹性IP[{0}]，因为它没有绑定任何云主机",
    "arguments": [
      "msg.getEipUuid()"
    ],
    "line": 359,
    "fileName": "src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid ipv4 address",
    "en_US": "{0} is not a valid ipv4 address",
    "zh_CN": "{0}是一个无效的IPV4地址",
    "arguments": [
      "msg.getId()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "localCidr must be Cidr!",
    "en_US": "localCidr must be Cidr!",
    "zh_CN": "本地CIDR必须是CIDR",
    "arguments": [],
    "line": 51,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "remoteCidr must be Cidr!",
    "en_US": "remoteCidr must be Cidr!",
    "zh_CN": "远程CIDR必须是CIDR",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "localCidr and remoteCidr must be Cidr!",
    "en_US": "localCidr and remoteCidr must be Cidr!",
    "zh_CN": "本地CIDR和远程CIDR必须是CIDR",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java"
  },
  {
    "raw": "vpngateway [%s] existed, cannot delete remote",
    "en_US": "vpngateway [{0}] existed, cannot delete remote",
    "zh_CN": "VPN网关[{0}]已经存在，不能删除远程的",
    "arguments": [
      "gateways.get(0).getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/hybrid/network/vpn/VpcVpnGatewayCascadeExtension.java"
  },
  {
    "raw": "The user[%s] is not a platform user",
    "en_US": "The user[{0}] is not a platform user",
    "zh_CN": "用户[{0}]不是平台用户",
    "arguments": [
      "oldSession.getUserUuid()"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "There are %d problems with the file. ",
    "en_US": "There are {0} problems with the file. ",
    "zh_CN": "文件中包含{0}个错误",
    "arguments": [
      "results.size()"
    ],
    "line": 994,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "fail to load VirtualID info from file. because\\n%s",
    "en_US": "fail to load VirtualID info from file. because\\n{0}",
    "zh_CN": "解析文件内容出错，{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 1011,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "name cannot be empty. ",
    "en_US": "name cannot be empty. ",
    "zh_CN": "名称不能为空",
    "arguments": [],
    "line": 1022,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "userName[%s] is repeated. ",
    "en_US": "userName[{0}] is repeated. ",
    "zh_CN": "用户名[{0}]重复",
    "arguments": [
      "cmsg.getUsername()"
    ],
    "line": 1030,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "name exceeds max length of string. expected was \u003c\u003d 255, actual was %s. ",
    "en_US": "name exceeds max length of string. expected was \u003c\u003d 255, actual was {0}. ",
    "zh_CN": "名称字符数量不能超过255",
    "arguments": [
      "cmsg.username.length()"
    ],
    "line": 1028,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "username cannot be empty. ",
    "en_US": "username cannot be empty. ",
    "zh_CN": "用户名不能为空",
    "arguments": [],
    "line": 1026,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "Incorrect password length. expected was \u003e\u003d 6 and \u003c\u003d 255, actual was %s. ",
    "en_US": "Incorrect password length. expected was \u003e\u003d 6 and \u003c\u003d 255, actual was {0}. ",
    "zh_CN": "密码长度错误，应该大于等于6个字符，小于等于255字符",
    "arguments": [
      "cmsg.password.length()"
    ],
    "line": 1036,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "password cannot be empty. ",
    "en_US": "password cannot be empty. ",
    "zh_CN": "密码不能为空",
    "arguments": [],
    "line": 1034,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "email format does not match. ",
    "en_US": "email format does not match. ",
    "zh_CN": "邮箱格式错误",
    "arguments": [],
    "line": 1044,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "organization[%s] is not exist. ",
    "en_US": "organization[{0}] is not exist. ",
    "zh_CN": "部门[{0}]不存在",
    "arguments": [
      "noMatchNames"
    ],
    "line": 1100,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "organization[%s] in line is repeated. ",
    "en_US": "organization[{0}] in line is repeated. ",
    "zh_CN": "部门[{0}]出现重复",
    "arguments": [
      "repeatNames"
    ],
    "line": 1108,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "organization[%s] is repeated. ",
    "en_US": "organization[{0}] is repeated. ",
    "zh_CN": "部门[{0}]出现重复",
    "arguments": [
      "repeatNames"
    ],
    "line": 1116,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "project[%s] is not exist. ",
    "en_US": "project[{0}] is not exist. ",
    "zh_CN": "项目[{0}]不存在",
    "arguments": [
      "noMatchName"
    ],
    "line": 1146,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "fail to build VirtualID info from file. ",
    "en_US": "fail to build VirtualID info from file. ",
    "zh_CN": "不能解析文件内容",
    "arguments": [],
    "line": 1340,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "virtualID[uuid:%s] not in project[uuid:%s]",
    "en_US": "virtualID[uuid:{0}] not in project[uuid:{1}]",
    "zh_CN": "VirtualID[uuid：{0}]不在项目[uuid：{1}]中",
    "arguments": [
      "resourceUuid",
      "projectUuid"
    ],
    "line": 1469,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ManagerImpl.java"
  },
  {
    "raw": "Can not do operations, because current organization[uuid:%s] is staled, please enable it",
    "en_US": "Can not do operations, because current organization[uuid:{0}] is staled, please enable it",
    "zh_CN": "无法进行操作，因为当前组织[uuid：{0}]已过时，请启用该组织",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/iam2/IAM2OrganizationBase.java"
  },
  {
    "raw": "organization[uuid:%s] is parent of the organization[uuid:%s], cannot set it as a child organization",
    "en_US": "organization[uuid:{0}] is parent of the organization[uuid:{1}], cannot set it as a child organization",
    "zh_CN": "部门[uuid:{0}]是部门[uuid:{1}]的上级部门，无法被设置为子部门",
    "arguments": [
      "puuid",
      "self.getUuid()"
    ],
    "line": 688,
    "fileName": "src/main/java/org/zstack/iam2/IAM2OrganizationBase.java"
  },
  {
    "raw": "the project[uuid: %s, name:%s] is in state of %s which disallows the operation[%s]",
    "en_US": "the project[uuid: {0}, name:{1}] is in state of {2} which disallows the operation[{3}]",
    "zh_CN": "项目[[uuid: {0}, 名称:{1}]]是{2}状态，不允许执行[{3}]操作",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getState()",
      "msg.getClass()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectBase.java"
  },
  {
    "raw": "can not parse the cron expression",
    "en_US": "can not parse the cron expression",
    "zh_CN": "无法分析Cron表达式",
    "arguments": [],
    "line": 910,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectBase.java"
  },
  {
    "raw": "project[name:%s] not existing",
    "en_US": "project[name:{0}] not existing",
    "zh_CN": "项目[name:{0}]不存在",
    "arguments": [
      "loginContext.getUsername()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java"
  },
  {
    "raw": "no account found for project[uuid:%s, name:%s]",
    "en_US": "no account found for project[uuid:{0}, name:{1}]",
    "zh_CN": "未找到项目[uuid：{0}，名称：{1}]的帐户",
    "arguments": [
      "puuid",
      "loginContext.getUsername()"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java"
  },
  {
    "raw": "wrong virtual ID[uuid:%s], not existing or wrong password",
    "en_US": "wrong virtual ID[uuid:{0}], not existing or wrong password",
    "zh_CN": "错误的virtual ID[uuid:{0}], 密码不存在或者密码错误",
    "arguments": [
      "loginContext.getOperatorSession().getUserUuid()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java"
  },
  {
    "raw": "virtual ID[name:%s] is disabled",
    "en_US": "virtual ID[name:{0}] is disabled",
    "zh_CN": "virtual ID[名称:{0}]不可用",
    "arguments": [
      "vid.getName()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java"
  },
  {
    "raw": "virtual ID[name:%s] not belonging to the project[name:%s]",
    "en_US": "virtual ID[name:{0}] not belonging to the project[name:{1}]",
    "zh_CN": "virtual ID[名称:{0}]不属于项目[name:{1}]",
    "arguments": [
      "vid.getName()",
      "loginContext.getUsername()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java"
  },
  {
    "raw": "the quota[name:%s] of Account[uuid:%s] can not be %d, otherwise it will exceeds the quota of organization[uuid:%s]",
    "en_US": "the quota[name:{0}] of Account[uuid:{1}] can not be {2}, otherwise it will exceeds the quota of organization[uuid:{3}]",
    "zh_CN": "帐户[uuid：{1}]的配额[名称：{0}]不能为{2}，否则将超过组织[uuid：{3}]的配额",
    "arguments": [
      "quota.getName()",
      "quota.getIdentityUuid()",
      "updatedValue",
      "organizationUuid"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/iam2/IAM2QuotaUpdateChecker.java"
  },
  {
    "raw": "Can not do operations, because Current virtualID[uuid:%s] is staled, please enable it",
    "en_US": "Can not do operations, because Current virtualID[uuid:{0}] is staled, please enable it",
    "zh_CN": "无法执行操作，因为当前VirtualID[uuid：{0}]已过时，请启用它",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 256,
    "fileName": "src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java"
  },
  {
    "raw": "only admin and the virtual ID itself can do the update",
    "en_US": "only admin and the virtual ID itself can do the update",
    "zh_CN": "只有admin和virtual ID本身可以执行更新操作",
    "arguments": [],
    "line": 649,
    "fileName": "src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java"
  },
  {
    "raw": "old password is not equal to the original password, cannot update the password of virtual ID[uuid:%s]",
    "en_US": "old password is not equal to the original password, cannot update the password of virtual ID[uuid:{0}]",
    "zh_CN": "旧密码不等于原始密码，无法更新虚拟ID[uuid：{0}]的密码",
    "arguments": [
      "msg.getVirtualIDUuid()"
    ],
    "line": 653,
    "fileName": "src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java"
  },
  {
    "raw": "attribute name cannot be null, value[%s]",
    "en_US": "attribute name cannot be null, value[{0}]",
    "zh_CN": "属性不能为null，输入值[{0}]",
    "arguments": [
      "attr.getValue()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute name[%s] exceed the max length of 2048 chars",
    "en_US": "attribute name[{0}] exceed the max length of 2048 chars",
    "zh_CN": "属性名称[{0}]不能超过2048个字符",
    "arguments": [
      "attr.getName()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[name:%s] value[%s] exceed the max length of 2048 chars",
    "en_US": "attribute[name:{0}] value[{1}] exceed the max length of 2048 chars",
    "zh_CN": "属性[name:{0}] value[{1}]不能超过2048个字符",
    "arguments": [
      "attr.getName()",
      "attr.getValue()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "The Organization[uuid: %s] used [name: %s, usedValue: %s] exceeds Request:%s.",
    "en_US": "The Organization[uuid: {0}] used [name: {1}, usedValue: {2}] exceeds Request:{3}.",
    "zh_CN": "组织[uuid：{0}]使用的[名称：{1}，UsedValue：{2}]超出请求：{3}。",
    "arguments": [
      "msg.getOrganizationUuid()",
      "msg.getName()",
      "projectUsed",
      "msg.getValue()"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid value. Valid values are  allow/rejection  xxx to xxx",
    "en_US": "{0} is not a valid value. Valid values are  allow/rejection  xxx to xxx",
    "zh_CN": "{0}不是有效值。有效值为允许/拒绝XXX至XXX",
    "arguments": [
      "msg.getLoginExpired()"
    ],
    "line": 186,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "The default organization[%s] cannot be deleted",
    "en_US": "The default organization[{0}] cannot be deleted",
    "zh_CN": "无法删除默认组织[{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "duplicate template name[%s]",
    "en_US": "duplicate template name[{0}]",
    "zh_CN": "重复的模板名称[{0}]",
    "arguments": [
      "msg.getName()"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "illegal operation, cannot add Role[%s]",
    "en_US": "illegal operation, cannot add Role[{0}]",
    "zh_CN": "非法操作，无法添加角色[{0}]",
    "arguments": [
      "IAM2RolePolicyStatementHelper.PROJECT_ADMIN_ROLE_NAME"
    ],
    "line": 652,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "admin is a reserved name, please use another name",
    "en_US": "admin is a reserved name, please use another name",
    "zh_CN": "admin是保留名称，请使用其他名称",
    "arguments": [],
    "line": 265,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "invalid name[%s], there has been a project or account with the same name",
    "en_US": "invalid name[{0}], there has been a project or account with the same name",
    "zh_CN": "无效的名称[{0}],已经存在同名的项目或账户",
    "arguments": [
      "msg.getName()"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any group",
    "en_US": "attribute[uuid:{0}] is not for any group",
    "zh_CN": "属性[uuid：{0}]不适用于任何组",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 281,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any organization",
    "en_US": "attribute[uuid:{0}] is not for any organization",
    "zh_CN": "属性[uuid：{0}]不适用于任何组织",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any project",
    "en_US": "attribute[uuid:{0}] is not for any project",
    "zh_CN": "属性[uuid：{0}]不适用于任何项目",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 297,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[uuid:%s] is not for any virtual ID",
    "en_US": "attribute[uuid:{0}] is not for any virtual ID",
    "zh_CN": "属性[uuid：{0}]不适用于任何虚拟ID",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "retire policy must be deleted before pull the project out of Retired state",
    "en_US": "retire policy must be deleted before pull the project out of Retired state",
    "zh_CN": "在将项目从已停用状态拉出之前，必须删除停用策略",
    "arguments": [],
    "line": 325,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "login is prohibited because the project is in state of %s",
    "en_US": "login is prohibited because the project is in state of {0}",
    "zh_CN": "禁止登录，因为项目处于{0}状态",
    "arguments": [
      "state"
    ],
    "line": 337,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "no quota[name:%s] found",
    "en_US": "no quota[name:{0}] found",
    "zh_CN": "未找到配额[名称：{0}]",
    "arguments": [
      "name"
    ],
    "line": 347,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "organization[uuid:%s] is a Company that cannot have parent organization",
    "en_US": "organization[uuid:{0}] is a Company that cannot have parent organization",
    "zh_CN": "组织[uuid：{0}]是不能有上级组织的公司",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 371,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "parent organization[uuid:%s] cannot be a child organization[uuid:%s] of a childOrganization",
    "en_US": "parent organization[uuid:{0}] cannot be a child organization[uuid:{1}] of a childOrganization",
    "zh_CN": "父组织[uuid：{0}]不能是子组织[uuid：{1}]的子组织",
    "arguments": [
      "msg.getUuid()",
      "msg.getParentUuid()"
    ],
    "line": 381,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "duplicate virtualID name[%s]",
    "en_US": "duplicate virtualID name[{0}]",
    "zh_CN": "重复的用户名[{0}]",
    "arguments": [
      "msg.getName()"
    ],
    "line": 400,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "duplicate project name[%s]",
    "en_US": "duplicate project name[{0}]",
    "zh_CN": "重复的项目名[{0}]",
    "arguments": [
      "msg.getName()"
    ],
    "line": 418,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "invalid project name[%s], an account or project with the same name exists",
    "en_US": "invalid project name[{0}], an account or project with the same name exists",
    "zh_CN": "无效的项目名[{0}]，已有账户或项目使用了相同的名称",
    "arguments": [
      "msg.getName()"
    ],
    "line": 426,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "IAM2OrganizationVO[uuid:%s] is not exists",
    "en_US": "IAM2OrganizationVO[uuid:{0}] is not exists",
    "zh_CN": "Iam2OrganizationVO[uuid：{0}]不存在",
    "arguments": [
      "msg.getOrganizationUuid()"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "The project[uuid\u003d%s] has been attached to the organization[uuid\u003d%s]",
    "en_US": "The project[uuid\u003d{0}] has been attached to the organization[uuid\u003d{1}]",
    "zh_CN": "项目[uuid\u003d{0}]已附加到组织[uuid\u003d{1}]",
    "arguments": [
      "refVO.getProjectUuid()",
      "refVO.getOrganizationUuid()"
    ],
    "line": 515,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "The project[uuid\u003d%s] is not attached",
    "en_US": "The project[uuid\u003d{0}] is not attached",
    "zh_CN": "未附加项目[uuid\u003d{0}]",
    "arguments": [
      "msg.getProjectUuid()"
    ],
    "line": 557,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "organizations%s are company that cannot be children of other organization",
    "en_US": "organizations{0} are company that cannot be children of other organization",
    "zh_CN": "组织{0}类型是子公司，不能设置为其它组织的部门",
    "arguments": [
      "uuids"
    ],
    "line": 568,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "virtual id[uuid: %s] is not in project[uuid: %s]",
    "en_US": "virtual id[uuid: {0}] is not in project[uuid: {1}]",
    "zh_CN": "虚拟ID[uuid：{0}]不在项目[uuid：{1}]中",
    "arguments": [
      "msg.getVirtualIDUuid()",
      "msg.getProjectUuid()"
    ],
    "line": 582,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "can not operate stale virtual ids: %s",
    "en_US": "can not operate stale virtual ids: {0}",
    "zh_CN": "无法操作无效的用户: {0}",
    "arguments": [
      "staleVirtualIDs"
    ],
    "line": 679,
    "fileName": "src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java"
  },
  {
    "raw": "attribute[name:%s] is a system attribute that cannot be updated",
    "en_US": "attribute[name:{0}] is a system attribute that cannot be updated",
    "zh_CN": "属性[名称：{0}]是一个系统属性，无法被更新",
    "arguments": [],
    "line": 69,
    "fileName": "src/main/java/org/zstack/iam2/attribute/SystemAttributes.java"
  },
  {
    "raw": "virtual ID[uuid:%s] not existing",
    "en_US": "virtual ID[uuid:{0}] not existing",
    "zh_CN": "用户[uuid:{0}]不存在",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 38,
    "fileName": "src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java"
  },
  {
    "raw": "virtual ID[uuid:%s] not in organization[uuid:%s]",
    "en_US": "virtual ID[uuid:{0}] not in organization[uuid:{1}]",
    "zh_CN": "虚拟ID[uuid：{0}]不在组织中[uuid：{1}]",
    "arguments": [
      "inv.getValue()",
      "((IAM2OrganizationAttributeInventory) inv).getOrganizationUuid()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java"
  },
  {
    "raw": "organization[uuid:%s] already has a supervisor",
    "en_US": "organization[uuid:{0}] already has a supervisor",
    "zh_CN": "组织[uuid:{0}]已经设置了负责人",
    "arguments": [
      "oinv.getOrganizationUuid()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java"
  },
  {
    "raw": "the project[uuid:%s, name:%s] already has a login expired strategy",
    "en_US": "the project[uuid:{0}, name:{1}] already has a login expired strategy",
    "zh_CN": "项目[uuid：{0}，名称：{1}]已有登录过期策略",
    "arguments": [
      "pinv.getUuid()",
      "pinv.getName()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java"
  },
  {
    "raw": "IAM2ProjectVO[uuid:%s] is not %s, state change is not allowed",
    "en_US": "IAM2ProjectVO[uuid:{0}] is not {1}, state change is not allowed",
    "zh_CN": "Iam2ProjectVO[uuid：{0}]不是{1}，不允许更改状态",
    "arguments": [
      "projectUuid",
      "ProjectState.Enabled.toString()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java"
  },
  {
    "raw": "the project[uuid:%s, name:%s] already has a retire policy",
    "en_US": "the project[uuid:{0}, name:{1}] already has a retire policy",
    "zh_CN": "项目[uuid:{0}, name:{1}]已经设置了回收策略",
    "arguments": [
      "pinv.getUuid()",
      "pinv.getName()"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/Retire.java"
  },
  {
    "raw": "invalid value, no \u0027at\u0027, \u0027after\u0027 or \u0027exceed\u0027 found",
    "en_US": "invalid value, no \u0027at\u0027, \u0027after\u0027 or \u0027exceed\u0027 found",
    "zh_CN": "无效的值，找不到关键字no \u0027at\u0027, \u0027after\u0027 or \u0027exceed\u0027",
    "arguments": [],
    "line": 53,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid value, %s",
    "en_US": "invalid value, {0}",
    "zh_CN": "无效的值, {0}",
    "arguments": [
      "value"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid means[%s], allowed means are %s",
    "en_US": "invalid means[{0}], allowed means are {1}",
    "zh_CN": "无效的回收方法[{0}]，允许的方法是{1}",
    "arguments": [
      "ss[0]",
      "Arrays.asList(Means.values()).toString()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid spending value[%s], it should be in format of for example 10.001",
    "en_US": "invalid spending value[{0}], it should be in format of for example 10.001",
    "zh_CN": "无效的费用[{0}], 费用格式应该符合例如：10.001",
    "arguments": [
      "policyValue"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid spending value[%s], spending value should between 0 and %f",
    "en_US": "invalid spending value[{0}], spending value should between 0 and {1}",
    "zh_CN": "无效的费用[{0}], 费用范围应该在0到{1}之间",
    "arguments": [
      "policyValue",
      "Double.MAX_VALUE"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid time[%s], it should be in format of for example 10m, 1h, 2d",
    "en_US": "invalid time[{0}], it should be in format of for example 10m, 1h, 2d",
    "zh_CN": "无效的时间[{0}]，时间格式需要符合例如：10m, 1h, 2d",
    "arguments": [
      "policyValue"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid date[%s], it should be in format of yyyy-MM-dd HH:mm:ss",
    "en_US": "invalid date[{0}], it should be in format of yyyy-MM-dd HH:mm:ss",
    "zh_CN": "无效的日期，日期格式需要符合：yyyy-MM-dd HH:mm:ss",
    "arguments": [
      "policyValue"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "invalid date or time[%s], it cannot be before current time[%s]",
    "en_US": "invalid date or time[{0}], it cannot be before current time[{1}]",
    "zh_CN": "无效的日期或时间，回收时间不能在当前时间之前[{1}]",
    "arguments": [
      "policyValue",
      "dateFormat.format(new Timestamp(System.currentTimeMillis()))"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java"
  },
  {
    "raw": "virtual ID[uuid:%s] already has admin related attributes, can not add %s",
    "en_US": "virtual ID[uuid:{0}] already has admin related attributes, can not add {1}",
    "zh_CN": "用户[uuid:{0}]已经有管理员属性了，无法继续添加属性{1}",
    "arguments": [
      "vid",
      "attributeName"
    ],
    "line": 17,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/AbstractAdminAttribute.java"
  },
  {
    "raw": "organiztion ID[uuid:%s] already has opoeration attributes, can not add %s",
    "en_US": "organiztion ID[uuid:{0}] already has opoeration attributes, can not add {1}",
    "zh_CN": "组织ID[uuid：{0}]已具有Poeration属性，无法添加{1}",
    "arguments": [
      "inv.getValue()",
      "IAM2_ORGANIZATION_OPERATION.getName()"
    ],
    "line": 29,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/IAM2OrganizationOperator.java"
  },
  {
    "raw": "virtual id[uuid:%s] already has a project operator attribute",
    "en_US": "virtual id[uuid:{0}] already has a project operator attribute",
    "zh_CN": "虚拟ID[uuid：{0}]已具有项目运算符属性",
    "arguments": [
      "idinv.getVirtualIDUuid()"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/IAM2ProjectOperator.java"
  },
  {
    "raw": "cannot find zone[uuid:%s]",
    "en_US": "cannot find zone[uuid:{0}]",
    "zh_CN": "找不到区域[uuid:{0}]",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 36,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/PlatformAdminZoneRelation.java"
  },
  {
    "raw": "project[uuid:%s] already has a project admin",
    "en_US": "project[uuid:{0}] already has a project admin",
    "zh_CN": "项目[uuid:{0}]已经设置过项目管理员了",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java"
  },
  {
    "raw": "project[uuid:%s] not existing",
    "en_US": "project[uuid:{0}] not existing",
    "zh_CN": "项目[uuid:{0}]不存在",
    "arguments": [
      "inv.getValue()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java"
  },
  {
    "raw": "the operations[%s] is denied",
    "en_US": "the operations[{0}] is denied",
    "zh_CN": "操作[{0}]被拒绝",
    "arguments": [
      "deniedApis"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/iam2/rbac/IAM2AuthorizationBackend.java"
  },
  {
    "raw": "since the project starts the force securityGroup, systemtag is required for VM operation",
    "en_US": "since the project starts the force securityGroup, systemtag is required for VM operation",
    "zh_CN": "由于项目启动了Force SecurityGroup，因此VM操作需要SystemTag",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/iam2/rbac/IAM2OperationTargetAPIRequestChecker.java"
  },
  {
    "raw": "project of account[uuid:%s] not exists",
    "en_US": "project of account[uuid:{0}] not exists",
    "zh_CN": "账户为[uuid:{0}]的项目不存在",
    "arguments": [
      "session.getAccountUuid()"
    ],
    "line": 28,
    "fileName": "src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java"
  },
  {
    "raw": "project[uuid:%s] is retired, reject all operations",
    "en_US": "project[uuid:{0}] is retired, reject all operations",
    "zh_CN": "项目[uuid:{0}]已经过期，无法操作",
    "arguments": [
      "projectUuid"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java"
  },
  {
    "raw": "system tag requested. need specify default security group for vm nic by system tag L3_NETWORK_SECURITY_GROUP_uuidS_REF with format l3::{%s}::SecurityGroupUuids::{%s}, because force security group is enabled",
    "en_US": "system tag requested. need specify default security group for vm nic by system tag L3_NETWORK_SECURITY_GROUP_uuidS_REF with format l3::{{0}}::SecurityGroupUuids::{{1}}, because force security group is enabled",
    "zh_CN": "已请求系统标记。需要按系统标记L为VM NIC指定默认安全组3_网络_安全_组_uuid_引用，格式为L3:{0}：SecurityGroupUUIds：{1}，因为启用了强制安全组",
    "arguments": [],
    "line": 107,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "the l3Uuid[%s] in the label is inconsistent with the l3Uuid[%s] in the parameter",
    "en_US": "the l3Uuid[{0}] in the label is inconsistent with the l3Uuid[{1}] in the parameter",
    "zh_CN": "标签中的L3uuid[{0}]与参数中的L3uuid[{1}]不一致",
    "arguments": [
      "l3Uuid",
      "msg.getL3NetworkUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "since force security group is enabled, securityGroupUuid in the tag must be in the project[%s]",
    "en_US": "since force security group is enabled, securityGroupUuid in the tag must be in the project[{0}]",
    "zh_CN": "由于启用了强制安全组，因此标记中的SecurityGroupuuid必须在项目[{0}]中",
    "arguments": [
      "projectUuid"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "nics on the l3Network[uuid:%s] are attached to the securityGroup. before you can detach the l3Network from the securityGroup, you need to detach the nics from the securityGroup.",
    "en_US": "nics on the l3Network[uuid:{0}] are attached to the securityGroup. before you can detach the l3Network from the securityGroup, you need to detach the nics from the securityGroup.",
    "zh_CN": "三层网络[uuid：{0}]上的NIC已连接到SecurityGroup。在将L3Network与SecurityGroup分离之前，需要将NIC与SecurityGroup分离。",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "msg.getSecurityGroupUuid()"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "the default security group %s cannot be deleted by enabling the enforced security group function",
    "en_US": "the default security group {0} cannot be deleted by enabling the enforced security group function",
    "zh_CN": "无法通过启用强制安全组功能来删除默认安全组{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "this security group %s is bound to vm, please try again after unbinding",
    "en_US": "this security group {0} is bound to vm, please try again after unbinding",
    "zh_CN": "此安全组{0}已绑定到VM，请在解除绑定后重试",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "account[%s] cannot operation the default securityGroup[%s]",
    "en_US": "account[{0}] cannot operation the default securityGroup[{1}]",
    "zh_CN": "帐户[{0}]无法操作默认SecurityGroup[{1}]",
    "arguments": [
      "sessionInventory.getAccountUuid()",
      "securityGroupUuid"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "account[%s] not allowed to operate on default securityGroup",
    "en_US": "account[{0}] not allowed to operate on default securityGroup",
    "zh_CN": "不允许帐户[{0}]对默认的SecurityGroup进行操作",
    "arguments": [
      "msg.getSession().getAccountUuid()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "vm\u0027s nic[uuid:%s] only has one security group, can not delete the nic from security group[uuid:%s]",
    "en_US": "vm\u0027s nic[uuid:{0}] only has one security group, can not delete the nic from security group[uuid:{1}]",
    "zh_CN": "VM的NIC[uuid：{0}]只有一个安全组，无法从安全组[uuid：{1}]中删除NIC",
    "arguments": [
      "refVOS.stream().map(VmNicSecurityGroupRefVO::getVmNicUuid).collect(Collectors.joining(\",\"))",
      "msg.getSecurityGroupUuid()"
    ],
    "line": 241,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java"
  },
  {
    "raw": "can\u0027t find the quota for the security group for the corresponding project %s",
    "en_US": "can\u0027t find the quota for the security group for the corresponding project {0}",
    "zh_CN": "找不到对应项目{0}的安全组的配额",
    "arguments": [
      "projectUuid"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java"
  },
  {
    "raw": "security group quota cannot less than 1",
    "en_US": "security group quota cannot less than 1",
    "zh_CN": "安全组配额不能小于1",
    "arguments": [],
    "line": 64,
    "fileName": "src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java"
  },
  {
    "raw": "The iam2 script function is not enabled.",
    "en_US": "The iam2 script function is not enabled.",
    "zh_CN": "未启用IAM2脚本函数。",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java"
  },
  {
    "raw": "Script doesn\u0027t have any content.",
    "en_US": "Script doesn\u0027t have any content.",
    "zh_CN": "脚本没有任何内容。",
    "arguments": [],
    "line": 39,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java"
  },
  {
    "raw": "The amount of params exceeds the limit.",
    "en_US": "The amount of params exceeds the limit.",
    "zh_CN": "参数数量超过限制。",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java"
  },
  {
    "raw": "Specified script executor are not supported.",
    "en_US": "Specified script executor are not supported.",
    "zh_CN": "不支持指定的脚本执行程序。",
    "arguments": [],
    "line": 61,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java"
  },
  {
    "raw": "Decode script content failed.",
    "en_US": "Decode script content failed.",
    "zh_CN": "解码脚本内容失败。",
    "arguments": [],
    "line": 139,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java"
  },
  {
    "raw": "Script content is blank.",
    "en_US": "Script content is blank.",
    "zh_CN": "脚本内容为空。",
    "arguments": [],
    "line": 147,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java"
  },
  {
    "raw": "Run iam2 script failed.",
    "en_US": "Run iam2 script failed.",
    "zh_CN": "运行IAM2脚本失败。",
    "arguments": [],
    "line": 179,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java"
  },
  {
    "raw": "Cannot read the result of the script running.",
    "en_US": "Cannot read the result of the script running.",
    "zh_CN": "无法读取脚本运行的结果。",
    "arguments": [],
    "line": 244,
    "fileName": "src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java"
  },
  {
    "raw": "the user group[uuid:%s] does not belong to the account[uuid:%s]",
    "en_US": "the user group[uuid:{0}] does not belong to the account[uuid:{1}]",
    "zh_CN": "这个用户组[uuid:{0}]不属于当前账户[uuid:{1}]",
    "arguments": [
      "group.getUuid()",
      "msg.getAccountUuid()"
    ],
    "line": 327,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "the account[uuid: %s] doesn\u0027t have a resource[uuid: %s]",
    "en_US": "the account[uuid: {0}] doesn\u0027t have a resource[uuid: {1}]",
    "zh_CN": "账户[uuid: {0}]没有资源[uuid: {1}]",
    "arguments": [
      "self.getUuid()",
      "ruuid"
    ],
    "line": 528,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "the user[uuid:%s] does not belong to the account[uuid:%s]",
    "en_US": "the user[uuid:{0}] does not belong to the account[uuid:{1}]",
    "zh_CN": "当前用户[uuid:{0}]不属于当前账户[uuid:{1}]",
    "arguments": [
      "user.getUuid()",
      "msg.getAccountUuid()"
    ],
    "line": 590,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "old password is not equal to the original password, cannot update the password of user[uuid:%s]",
    "en_US": "old password is not equal to the original password, cannot update the password of user[uuid:{0}]",
    "zh_CN": "旧密码不等于原始密码，无法更新用户[uuid：{0}]的密码",
    "arguments": [
      "user.getUuid()"
    ],
    "line": 595,
    "fileName": "src/main/java/org/zstack/identity/AccountBase.java"
  },
  {
    "raw": "wrong password",
    "en_US": "wrong password",
    "zh_CN": "密码错误",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/identity/AccountInterceptor.java"
  },
  {
    "raw": "a statement must have effect field. Invalid statement[%s]",
    "en_US": "a statement must have effect field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有\u0027effect\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1660,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "a statement must have action field. Invalid statement[%s]",
    "en_US": "a statement must have action field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有\u0027action\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1663,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "a statement must have a non-empty action field. Invalid statement[%s]",
    "en_US": "a statement must have a non-empty action field. Invalid statement[{0}]",
    "zh_CN": "声明必须含有不为空的\u0027action\u0027字段。 无效的声明",
    "arguments": [
      "JSONObjectUtil.toJsonString(s)"
    ],
    "line": 1666,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot find the resource[uuid:%s]; wrong resourceUuid or the resource is admin resource",
    "en_US": "cannot find the resource[uuid:{0}]; wrong resourceUuid or the resource is admin resource",
    "zh_CN": "无法找到资源[uuid:{0}]: 错误的资源uuid或者资源是管理员资源",
    "arguments": [
      "resourceUuid"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the user specified by the userUuid[%s] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user\u0027spermissions",
    "en_US": "the user specified by the userUuid[{0}] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user\u0027spermissions",
    "zh_CN": "当前通过userUuid获得的user不属于当前账户，而且当前账户不是管理员账户",
    "arguments": [
      "msg.getUserUuid()"
    ],
    "line": 405,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot find the account[uuid:%s]",
    "en_US": "cannot find the account[uuid:{0}]",
    "zh_CN": "找不到账户[uuid:{0}]",
    "arguments": [
      "accountUuid"
    ],
    "line": 1055,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "accountName and accountUuid cannot both be null, you must specify at least one",
    "en_US": "accountName and accountUuid cannot both be null, you must specify at least one",
    "zh_CN": "accountName和accountUuid不能同时为空，您必须定义至少一个",
    "arguments": [],
    "line": 1495,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create a group. A group called %s is already under the account[uuid:%s]",
    "en_US": "unable to create a group. A group called {0} is already under the account[uuid:{1}]",
    "zh_CN": "不能创建用户组，用户组“{0}”已经在账户“{0}”下了",
    "arguments": [
      "msg.getName()",
      "msg.getAccountUuid()"
    ],
    "line": 1506,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create a user. A user called %s is already under the account[uuid:%s]",
    "en_US": "unable to create a user. A user called {0} is already under the account[uuid:{1}]",
    "zh_CN": "不能创建用户，用户“{0}”已经在账户“{0}”下了",
    "arguments": [
      "msg.getName()",
      "msg.getAccountUuid()"
    ],
    "line": 1516,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to create an account. An account already called %s",
    "en_US": "unable to create an account. An account already called {0}",
    "zh_CN": "不能创建账户，“{0}”已经被使用",
    "arguments": [
      "msg.getName()"
    ],
    "line": 1525,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "account cannot delete itself",
    "en_US": "account cannot delete itself",
    "zh_CN": "账户不能删除自己",
    "arguments": [],
    "line": 1532,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot delete builtin admin account.",
    "en_US": "cannot delete builtin admin account.",
    "zh_CN": "无法删除内置管理员帐户。",
    "arguments": [],
    "line": 1538,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "Only admin can delete account.",
    "en_US": "Only admin can delete account.",
    "zh_CN": "只有admin能删除账户",
    "arguments": [],
    "line": 1544,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the current session is an account session. You need to specify the field \u0027uuid\u0027 of the user you want to update",
    "en_US": "the current session is an account session. You need to specify the field \u0027uuid\u0027 of the user you want to update",
    "zh_CN": "当前会话是一个账户会话，你需要定义一个\u0027uuid\u0027字段来指定你要更新的用户",
    "arguments": [],
    "line": 1552,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "your are login as a user, you cannot another user[uuid:%s]",
    "en_US": "your are login as a user, you cannot another user[uuid:{0}]",
    "zh_CN": "你已经登录为一个用户，不能成为另一个用户[uuid:{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1567,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "all is set to false, accountUuids cannot be null or empty",
    "en_US": "all is set to false, accountUuids cannot be null or empty",
    "zh_CN": "all参数被设为false时，账户uuid不能为空",
    "arguments": [],
    "line": 1575,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "toPublic is set to false, accountUuids cannot be null or empty",
    "en_US": "toPublic is set to false, accountUuids cannot be null or empty",
    "zh_CN": "toPublic参数被设为false时，账户uuid不能为空",
    "arguments": [],
    "line": 1583,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "policy[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "policy[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "策略[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "policy.getName()",
      "policy.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1632,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "user[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "user[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "用户[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "user.getName()",
      "user.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1646,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "group[name: %s, uuid: %s] doesn\u0027t belong to the account[uuid: %s]",
    "en_US": "group[name: {0}, uuid: {1}] doesn\u0027t belong to the account[uuid: {2}]",
    "zh_CN": "用户组[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]",
    "arguments": [
      "group.getName()",
      "group.getUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 1650,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "unable to update name. An account already called %s",
    "en_US": "unable to update name. An account already called {0}",
    "zh_CN": "无法更新名称。已有一个名为{0}的帐户",
    "arguments": [
      "msg.getName()"
    ],
    "line": 1691,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "old password is not equal to the original password, cannot update the password of account[uuid: %s]",
    "en_US": "old password is not equal to the original password, cannot update the password of account[uuid: {0}]",
    "zh_CN": "旧密码不等于原始密码，无法更新帐户[uuid：{0}]的密码",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1702,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the name of admin account cannot be updated",
    "en_US": "the name of admin account cannot be updated",
    "zh_CN": "不能更改管理员账户名称",
    "arguments": [],
    "line": 1707,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "only admin account can update it\u0027s password",
    "en_US": "only admin account can update it\u0027s password",
    "zh_CN": "只有管理员帐户才能更新其密码",
    "arguments": [],
    "line": 1713,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "account[uuid: %s, name: %s] is a normal account, it cannot reset the password of another account[uuid: %s]",
    "en_US": "account[uuid: {0}, name: {1}] is a normal account, it cannot reset the password of another account[uuid: {2}]",
    "zh_CN": "[uuid: {0}, 名称: {1}]是一个普通账户，不能被其他普通账户重设密码",
    "arguments": [
      "account.getUuid()",
      "account.getName()",
      "msg.getUuid()"
    ],
    "line": 1720,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "cannot find Quota[name: %s] for the account[uuid: %s]",
    "en_US": "cannot find Quota[name: {0}] for the account[uuid: {1}]",
    "zh_CN": "无法为当前账户[uuid: {1}]找到Quota",
    "arguments": [
      "msg.getName()",
      "msg.getIdentityUuid()"
    ],
    "line": 1731,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "can not find quota update checker for quota[uuid:%s, type:%s]",
    "en_US": "can not find quota update checker for quota[uuid:{0}, type:{1}]",
    "zh_CN": "找不到配额[uuid：{0}，类型：{1}]的配额更新检查器",
    "arguments": [
      "quota.getIdentityUuid()",
      "quota.getIdentityType()"
    ],
    "line": 1738,
    "fileName": "src/main/java/org/zstack/identity/AccountManagerImpl.java"
  },
  {
    "raw": "the quota[name:%s] of account[uuid:%s] can not be %d",
    "en_US": "the quota[name:{0}] of account[uuid:{1}] can not be {2}",
    "zh_CN": "帐户[uuid：{1}]的配额[名称：{0}]不能为{2}",
    "arguments": [
      "quota.getName()",
      "quota.getIdentityUuid()",
      "updatedValue"
    ],
    "line": 32,
    "fileName": "src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java"
  },
  {
    "raw": "the account[uuid:%s] used [name:%s, usedValue:%s] exceeds request quota: %d",
    "en_US": "the account[uuid:{0}] used [name:{1}, usedValue:{2}] exceeds request quota: {3}",
    "zh_CN": "帐户[uuid：{0}]使用的[名称：{1}，UsedValue：{2}]超过了请求配额：{3}",
    "arguments": [
      "accountUuid",
      "quotaName",
      "used",
      "updatedValue"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java"
  },
  {
    "raw": "unsupported login type %s",
    "en_US": "unsupported login type {0}",
    "zh_CN": "不支持的登录类型{0}",
    "arguments": [
      "loginType"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/identity/login/LoginManagerImpl.java"
  },
  {
    "raw": "permission denied, the account[uuid:%s] is not the owner of the resource[uuid:%s, type:%s]",
    "en_US": "permission denied, the account[uuid:{0}] is not the owner of the resource[uuid:{1}, type:{2}]",
    "zh_CN": "操作错误，账户[uuid:{0}]不是资源[uuid:{1}, type:{2}]的所有者",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getAccountUuid()",
      "uuid",
      "resourceType.getSimpleName()"
    ],
    "line": 180,
    "fileName": "src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java"
  },
  {
    "raw": "permission denied, the account[uuid:%s] is not the owner of the tagged resource[uuid:%s, type:%s]",
    "en_US": "permission denied, the account[uuid:{0}] is not the owner of the tagged resource[uuid:{1}, type:{2}]",
    "zh_CN": "权限被拒绝，帐户[uuid：{0}]不是已标记资源[uuid：{1}，类型：{2}]的所有者",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getAccountUuid()",
      "uuid",
      "type"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java"
  },
  {
    "raw": "the account[uuid:%s] has no access to the resources[uuid:%s, type:%s]",
    "en_US": "the account[uuid:{0}] has no access to the resources[uuid:{1}, type:{2}]",
    "zh_CN": "账户[uuid:{0}]无法使用资源[uuid:{1}, type:{2}]",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getAccountUuid()",
      "resourceWithNoAccess",
      "resourceType.getSimpleName()"
    ],
    "line": 251,
    "fileName": "src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java"
  },
  {
    "raw": "operation[API:%s] is denied by default, please contact admin to correct it",
    "en_US": "operation[API:{0}] is denied by default, please contact admin to correct it",
    "zh_CN": "默认情况下拒绝操作[API：{0}]，请与管理员联系以更正",
    "arguments": [
      "rbacEntity.getApiMessage().getClass().getName()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java"
  },
  {
    "raw": "the operation is denied by the policy[name:%s uuid:%s]",
    "en_US": "the operation is denied by the policy[name:{0} uuid:{1}]",
    "zh_CN": "操作被策略[名称：{0}uuid：{1}]拒绝",
    "arguments": [
      "p.getName()",
      "p.getUuid()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java"
  },
  {
    "raw": "the operation is denied by the policy[name:%s, uuid:%s], field[%s] is not permitted to set",
    "en_US": "the operation is denied by the policy[name:{0}, uuid:{1}], field[{2}] is not permitted to set",
    "zh_CN": "策略[名称：{0}，uuid：{1}]拒绝该操作，不允许设置字段[{2}]",
    "arguments": [
      "p.getName()",
      "p.getUuid()",
      "fname"
    ],
    "line": 200,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java"
  },
  {
    "raw": "cannot update a system or predefined role",
    "en_US": "cannot update a system or predefined role",
    "zh_CN": "无法更新系统角色或预定义角色",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java"
  },
  {
    "raw": "cannot delete a system or predefined role",
    "en_US": "cannot delete a system or predefined role",
    "zh_CN": "无法删除系统角色或预定义角色",
    "arguments": [],
    "line": 108,
    "fileName": "src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java"
  },
  {
    "raw": "Failed because management node restarted.",
    "en_US": "Failed because management node restarted.",
    "zh_CN": "失败，因为管理节点已重新启动。",
    "arguments": [],
    "line": 187,
    "fileName": "src/main/java/org/zstack/image/AddImageLongJob.java"
  },
  {
    "raw": "the backup storage[uuid:%s] is not in status of Connected, current status is %s",
    "en_US": "the backup storage[uuid:{0}] is not in status of Connected, current status is {1}",
    "zh_CN": "镜像服务器[uuid:{0}]不是Connected状态，当前状态为{1}",
    "arguments": [
      "backupStorageUuid",
      "bsStatus"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java"
  },
  {
    "raw": "The aarch64 architecture does not support legacy.",
    "en_US": "The aarch64 architecture does not support legacy.",
    "zh_CN": "AARCH64体系结构不支持旧版。",
    "arguments": [],
    "line": 101,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "volume[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "云盘[uuid:{0}]未Ready，它现在为{1}",
    "arguments": [
      "vol.getUuid()",
      "vol.getStatus()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "volume[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "云盘[uuid:{0}]未Enabled，它现在为{1}",
    "arguments": [
      "vol.getUuid()",
      "vol.getState()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "volume snapshot[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "卷快照[uuid：{0}]未就绪，它是{1}",
    "arguments": [
      "vsvo.getUuid()",
      "vsvo.getStatus()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "volume snapshot[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "卷快照[uuid：{0}]未启用，它是{1}",
    "arguments": [
      "vsvo.getUuid()",
      "vsvo.getState()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "ISO cannot be used as system image",
    "en_US": "ISO cannot be used as system image",
    "zh_CN": "ISO不能被作为一个系统标签",
    "arguments": [],
    "line": 142,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "unknown format[%s]",
    "en_US": "unknown format[{0}]",
    "zh_CN": "未知格式[{0}]",
    "arguments": [
      "msg.getFormat()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "unsupported image type[%s]",
    "en_US": "unsupported image type[{0}]",
    "zh_CN": "不支持的镜像类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "no backup storage specified in uuids%s is available for adding this image; they are not in status %s or not in state %s, or the uuid is invalid backup storage uuid",
    "en_US": "no backup storage specified in uuids{0} is available for adding this image; they are not in status {1} or not in state {2}, or the uuid is invalid backup storage uuid",
    "zh_CN": "镜像服务器uuids{0}不满足添加镜像的条件；它们的状态不同时满足{1}和{2},亦或者是无效的uuid",
    "arguments": [
      "msg.getBackupStorageUuids()",
      "BackupStorageStatus.Connected",
      "BackupStorageState.Enabled"
    ],
    "line": 169,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "url must starts with \u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027， \u0027ftp://\u0027, \u0027sftp://\u0027 or \u0027/\u0027",
    "en_US": "url must starts with \u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027， \u0027ftp://\u0027, \u0027sftp://\u0027 or \u0027/\u0027",
    "zh_CN": "url必须以下列格式开头\u0027file:///\u0027, \u0027http://\u0027, \u0027https://\u0027， \u0027ftp://\u0027, \u0027sftp://\u0027 or \u0027/\u0027",
    "arguments": [],
    "line": 180,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "absolute path must be used",
    "en_US": "absolute path must be used",
    "zh_CN": "必须使用绝对路径",
    "arguments": [
      "path"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "image path [%s] is in black list %s",
    "en_US": "image path [{0}] is in black list {1}",
    "zh_CN": "镜像路径[{0}]在黑名单{1}中",
    "arguments": [
      "path",
      "blackList.value()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "all images on this server cannot be used",
    "en_US": "all images on this server cannot be used",
    "zh_CN": "无法使用此服务器上的所有镜像",
    "arguments": [],
    "line": 223,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "image path is not in white list: %s",
    "en_US": "image path is not in white list: {0}",
    "zh_CN": "镜像路径不在白名单中：{0}",
    "arguments": [
      "whiteList.value()"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/image/ImageApiInterceptor.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not on any backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is not on any backup storage",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]不在任一镜像服务器上",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "No connected backup storage found for image[uuid:%s, name:%s]",
    "en_US": "No connected backup storage found for image[uuid:{0}, name:{1}]",
    "zh_CN": "在所有 Connected 状态的镜像服务器上都找不到镜像[uuid:{0}, name:{1}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 224,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "detach iso[uuid\u003d%s] from vm failed, errors are %s",
    "en_US": "detach iso[uuid\u003d{0}] from vm failed, errors are {1}",
    "zh_CN": "从VM分离ISO[uuid\u003d{0}]失败，错误为{1}",
    "arguments": [
      "msg.getImageUuid()",
      "JSONObjectUtil.toJsonString(errors)"
    ],
    "line": 416,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}] is not on the backup storage[uuid:{2}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]不在镜像服务器[uuid:{2}]上",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "bsUuid"
    ],
    "line": 782,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s]\u0027s status[%s] is not Deleted on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}]\u0027s status[{2}] is not Deleted on the backup storage[uuid:{3}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]的状态[{2}]在镜像服务器[uuid:{3}]上不是Deleled",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "ref.getStatus()",
      "bsUuid"
    ],
    "line": 724,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not deleted on any backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] is not deleted on any backup storage",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]未在任一镜像服务器上被删除",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 766,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] is not deleted on the backup storage[uuid:%s]",
    "en_US": "the image[uuid:{0}, name:{1}] is not deleted on the backup storage[uuid:{2}]",
    "zh_CN": "镜像[uuid:{0}, 名称:{1}]未在镜像服务器[uuid:{2}]上被删除",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "bsUuid"
    ],
    "line": 787,
    "fileName": "src/main/java/org/zstack/image/ImageBase.java"
  },
  {
    "raw": "only one bootMode system tag is allowed, but %d got",
    "en_US": "only one bootMode system tag is allowed, but {0} got",
    "zh_CN": "只允许一个Bootmode系统标记，但{0}获得了",
    "arguments": [
      "bootModeCount"
    ],
    "line": 812,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "[%s] specified in system tag [%s] is not a valid boot mode",
    "en_US": "[{0}] specified in system tag [{1}] is not a valid boot mode",
    "zh_CN": "系统标记[{1}]中指定的[{0}]不是有效的启动模式",
    "arguments": [
      "bootMode",
      "systemTag"
    ],
    "line": 830,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "unable to allocate backup storage specified by uuids%s, list errors are: %s",
    "en_US": "unable to allocate backup storage specified by uuids{0}, list errors are: {1}",
    "zh_CN": "不能根据[uuids:{0}]分配镜像服务器，错误清单为: {1}",
    "arguments": [
      "msgData.getBackupStorageUuids()",
      "JSONObjectUtil.toJsonString(errs)"
    ],
    "line": 1455,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to create image from root volume[uuid:%s] on all backup storage, see cause for one of errors",
    "en_US": "failed to create image from root volume[uuid:{0}] on all backup storage, see cause for one of errors",
    "zh_CN": "在所有镜像服务器上从云盘[uuid:{0}]创建镜像失败，查看错误原因",
    "arguments": [
      "rootVolumeUuid"
    ],
    "line": 1581,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to allocate all backup storage[uuid:%s], a list of error: %s",
    "en_US": "failed to allocate all backup storage[uuid:{0}], a list of error: {1}",
    "zh_CN": "镜像服务器[uuid:{0}]分配失败，错误清单:{1}",
    "arguments": [
      "msgData.getBackupStorageUuids()",
      "JSONObjectUtil.toJsonString(errs)"
    ],
    "line": 1809,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "cannot find proper backup storage",
    "en_US": "cannot find proper backup storage",
    "zh_CN": "找不到适当的备份存储",
    "arguments": [],
    "line": 1779,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "failed to create data volume template from volume[uuid:%s] on all backup storage%s. See cause for one of errors",
    "en_US": "failed to create data volume template from volume[uuid:{0}] on all backup storage{1}. See cause for one of errors",
    "zh_CN": "在所有镜像服务器[uuid:{1}]上创建云盘[uuid:{0}]的云盘模版失败，查看错误原因",
    "arguments": [
      "volumeUuid",
      "msgData.getBackupStorageUuids()"
    ],
    "line": 1922,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "image[uuid:%s] is not on creating, please wait for it to cancel itself.",
    "en_US": "image[uuid:{0}] is not on creating, please wait for it to cancel itself.",
    "zh_CN": "镜像[uuid：{0}]未处于创建状态，请等待其自行取消。",
    "arguments": [
      "imageUuid"
    ],
    "line": 1999,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "volume[uuid:%s] has been deleted. no need to cancel",
    "en_US": "volume[uuid:{0}] has been deleted. no need to cancel",
    "zh_CN": "卷[uuid：{0}]已删除。不需要取消。",
    "arguments": [
      "volumeUuid"
    ],
    "line": 2005,
    "fileName": "src/main/java/org/zstack/image/ImageManagerImpl.java"
  },
  {
    "raw": "Failed to set security level, because security level is disabled.",
    "en_US": "Failed to set security level, because security level is disabled.",
    "zh_CN": "设置密级失败，因为密级功能已禁用",
    "arguments": [],
    "line": 48,
    "fileName": "src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java"
  },
  {
    "raw": "Unknown security level code[%s], supported values are %s",
    "en_US": "Unknown security level code[{0}], supported values are {1}",
    "zh_CN": "未知的密级[{0}]，支持的值有[{1}]",
    "arguments": [
      "msg.getSecurityLevel()",
      "Arrays.stream(SecurityLevel.values()).map(SecurityLevel::getCode).collect(Collectors.toList())"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java"
  },
  {
    "raw": "upload session expired",
    "en_US": "upload session expired",
    "zh_CN": "上传session失效了",
    "arguments": [],
    "line": 197,
    "fileName": "src/main/java/org/zstack/image/UploadImageTracker.java"
  },
  {
    "raw": "target backup storage[uuid:%s] became unavailable",
    "en_US": "target backup storage[uuid:{0}] became unavailable",
    "zh_CN": "目标备份存储[uuid：{0}]变得不可用",
    "arguments": [
      "targetBsUuid"
    ],
    "line": 366,
    "fileName": "src/main/java/org/zstack/imagereplicator/ImageReplicatorImpl.java"
  },
  {
    "raw": "One or more backup storage[uuids:%s] has been added to replication group[uuid:%s]",
    "en_US": "One or more backup storage[uuids:{0}] has been added to replication group[uuid:{1}]",
    "zh_CN": "已将一个或多个备份存储[uuid：{0}]添加到复制组[uuid：{1}]",
    "arguments": [
      "String.join(\",\", msg.getBackupStorageUuids())",
      "msg.getReplicationGroupUuid()"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java"
  },
  {
    "raw": "Backup storage[uuids:%s] is not of type ImageStore",
    "en_US": "Backup storage[uuids:{0}] is not of type ImageStore",
    "zh_CN": "备份存储[uuid：{0}]不属于ImageStore类型",
    "arguments": [
      "bsUuid"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java"
  },
  {
    "raw": "Backup storage[uuids:%s] is not attached to any Zone",
    "en_US": "Backup storage[uuids:{0}] is not attached to any Zone",
    "zh_CN": "备份存储[uuid：{0}]未连接到任何区域",
    "arguments": [
      "bsUuid"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java"
  },
  {
    "raw": "Network [uuid: %s] does\u0027t not have IPsec service",
    "en_US": "Network [uuid: {0}] does\u0027t not have IPsec service",
    "zh_CN": "网络[uuid: {0}]没有IPsec服务",
    "arguments": [
      "l3NetworkUuid"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the remote CIDR[%s] is same to existed cidrs",
    "en_US": "the remote CIDR[{0}] is same to existed cidrs",
    "zh_CN": "远程CIDR[{0}]与现有的CIDR相同",
    "arguments": [
      "rcidr"
    ],
    "line": 74,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the remote CIDR[%s] and remote CIDR[%s] are overlaped",
    "en_US": "the remote CIDR[{0}] and remote CIDR[{1}] are overlaped",
    "zh_CN": "远程的CIDR[{0}]和远端CIDR[{1}]存在覆盖",
    "arguments": [
      "rcidr",
      "tempCidr"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the CIDR[%s] of local router and remote CIDR[%s] are overlaped",
    "en_US": "the CIDR[{0}] of local router and remote CIDR[{1}] are overlaped",
    "zh_CN": "本地路由的CIDR[{0}]和远端CIDR存在覆盖",
    "arguments": [
      "lcidr",
      "tempCidr"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "all networks in same IPsecConnection should be same type",
    "en_US": "all networks in same IPsecConnection should be same type",
    "zh_CN": "在相同的IPsec连接中的所有连接应该是相同类型",
    "arguments": [],
    "line": 122,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "IPsecConnection can ONLY have 1 network for %s",
    "en_US": "IPsecConnection can ONLY have 1 network for {0}",
    "zh_CN": "IPsec连接只能有一个网络服务",
    "arguments": [
      "L3NetworkConstant.L3_BASIC_NETWORK_TYPE"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3Network [uuid: %s] has not been attached to vpc router",
    "en_US": "L3Network [uuid: {0}] has not been attached to vpc router",
    "zh_CN": "三层网络[uuid:{0}]还没有绑定VPC路由",
    "arguments": [
      "l3Uuid"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "there is no master vpc for ha group %s",
    "en_US": "there is no master vpc for ha group {0}",
    "zh_CN": "高可用性组{0}没有主VPC",
    "arguments": [
      "vrUuids.toArray()[0]"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "all networks in same IPsecConnection must be attached to same VPC router",
    "en_US": "all networks in same IPsecConnection must be attached to same VPC router",
    "zh_CN": "在相同的IPsec连接中的所有网络必须绑定在相同的VPC路由",
    "arguments": [],
    "line": 159,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "there is a vpc[%s] using old ipsec plugin, upgrade it to create ipsec",
    "en_US": "there is a vpc[{0}] using old ipsec plugin, upgrade it to create ipsec",
    "zh_CN": "存在使用旧IPSec插件的VPC[{0}]，请升级该插件以创建IPSec",
    "arguments": [
      "masterUuid"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "there already have ipsec connection[uuid:%s, name:%s] with the same vrouter and peerAddress",
    "en_US": "there already have ipsec connection[uuid:{0}, name:{1}] with the same vrouter and peerAddress",
    "zh_CN": "这里已经有相同云路由和对端地址的IPsec连接[uuid:{0}, name:{1}]",
    "arguments": [
      "tuples.get(0).get(0, String.class)",
      "tuples.get(0).get(1, String.class)"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the vip[uuid:%s] has been used for %s",
    "en_US": "the vip[uuid:{0}] has been used for {1}",
    "zh_CN": "虚拟IP[uuid:{0}]已经用作网络服务 {1}",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 209,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the peerAddress[%s] cannot be the same to the VIP address",
    "en_US": "the peerAddress[{0}] cannot be the same to the VIP address",
    "zh_CN": "对端地址[{0}]不能和虚拟IP地址相同",
    "arguments": [
      "msg.getPeerAddress()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the peerAddress[%s] is not an IPv4 address",
    "en_US": "the peerAddress[{0}] is not an IPv4 address",
    "zh_CN": "对端地址[{0}]不是一个IPv4地址",
    "arguments": [
      "msg.getPeerAddress()"
    ],
    "line": 218,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "the authKey cannot contain white space and special characters of \u0027\\\"`\\\\",
    "en_US": "the authKey cannot contain white space and special characters of \u0027\\\"`\\\\",
    "zh_CN": "验证码不能包含空格和以下字符:\u0027\\\"`\\\\",
    "arguments": [],
    "line": 230,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "Ipsec VIP [%s] cannot be the first or the last IP of the CIDR with the public address pool type",
    "en_US": "Ipsec VIP [{0}] cannot be the first or the last IP of the CIDR with the public address pool type",
    "zh_CN": "IPSec VIP[{0}]不能是具有公用地址池类型的CIDR的第一个或最后一个IP",
    "arguments": [
      "vipVO.getIp()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "must include l3 networks in APIAttachL3NetworksToIPsecConnectionMsg",
    "en_US": "must include l3 networks in APIAttachL3NetworksToIPsecConnectionMsg",
    "zh_CN": "参数中缺少三层网络的uuid",
    "arguments": [],
    "line": 281,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3 network [%s] is not vpc network, can not be attached or detached to ipsec",
    "en_US": "L3 network [{0}] is not vpc network, can not be attached or detached to ipsec",
    "zh_CN": "三层网络[{0}]不是VPC网络，不能绑定或解绑IPsec",
    "arguments": [
      "l3NetworkUuid"
    ],
    "line": 288,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3 network [%s] can not be attached to ipsec [uuid :%s]twice",
    "en_US": "L3 network [{0}] can not be attached to ipsec [uuid :{1}]twice",
    "zh_CN": "三层网络[{0}]不能绑定IPsec[uuid :{1}]两次",
    "arguments": [
      "l3NetworkUuid",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "L3 network [%s] is not be attached to ipsec [uuid :%s]",
    "en_US": "L3 network [{0}] is not be attached to ipsec [uuid :{1}]",
    "zh_CN": "三层网络[{0}]不能绑定IPsec[uuid :{1}]",
    "arguments": [
      "l3NetworkUuid",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "Cidr [%s] is already in the Cidrs of ipsec [uuid :%s]",
    "en_US": "Cidr [{0}] is already in the Cidrs of ipsec [uuid :{1}]",
    "zh_CN": "CIDR[{0}]已经在IPsec[uuid :{1}]的CIDR中",
    "arguments": [
      "cidr",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 302,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "Cidr [%s] is not in Cidrs of ipsec [uuid :%s]",
    "en_US": "Cidr [{0}] is not in Cidrs of ipsec [uuid :{1}]",
    "zh_CN": "CIDR[{0}]没有在IPsec[uuid :{1}]的CIDR中",
    "arguments": [
      "cidr",
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 316,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "can not change state because ipsec [uuid:%s] status is not ready",
    "en_US": "can not change state because ipsec [uuid:{0}] status is not ready",
    "zh_CN": "不能修改IPsec的状态，因为IPsec的状态没有准备",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 324,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "could not reconnect this ipsec [uuid:%s], please upgrade ipsec version",
    "en_US": "could not reconnect this ipsec [uuid:{0}], please upgrade ipsec version",
    "zh_CN": "无法重新连接此IPSec[uuid：{0}]，请升级IPSec版本",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 330,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java"
  },
  {
    "raw": "cannot find the IPsecconnection[uuid:%s], it may have been deleted",
    "en_US": "cannot find the IPsecconnection[uuid:{0}], it may have been deleted",
    "zh_CN": "未找到IPsec连接[uuid:{0}],它可能会被删除了",
    "arguments": [
      "msg.getIPsecConnectionUuid()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecManagerImpl.java"
  },
  {
    "raw": "Current port range[%s, %s] is conflicted with used port range [%s, %s] with vip[uuid: %s] protocol: UDP",
    "en_US": "Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: UDP",
    "zh_CN": "当前的端口范围以UDP使用的端口范围冲突了",
    "arguments": [
      "Long.toString(range2.getStart())",
      "Long.toString(range2.getEnd())",
      "Long.toString(cur.getStart())",
      "Long.toString(cur.getEnd())",
      "msg.getVipUuid()"
    ],
    "line": 466,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecManagerImpl.java"
  },
  {
    "raw": "cidr[%s] of attached L3Network [uuid:%s] is overlapped with ipsec [uuid:%s] remote cidr[%s]",
    "en_US": "cidr[{0}] of attached L3Network [uuid:{1}] is overlapped with ipsec [uuid:{2}] remote cidr[{3}]",
    "zh_CN": "已绑定在三层网络[uuid:{1}]的CIDR与IPSec[uuid:{2}]远程CIDR存在重叠",
    "arguments": [
      "cidr",
      "l3Inv.getUuid()",
      "uuid",
      "rCidr"
    ],
    "line": 504,
    "fileName": "src/main/java/org/zstack/ipsec/IPsecManagerImpl.java"
  },
  {
    "raw": "create ipsec to ha route failed, because %s",
    "en_US": "create ipsec to ha route failed, because {0}",
    "zh_CN": "创建IPSec到HA路由失败，因为{0}",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosCreateIPsecFlow.java"
  },
  {
    "raw": "delete ipsec from ha group failed because %s",
    "en_US": "delete ipsec from ha group failed because {0}",
    "zh_CN": "从HA组中删除IPSec失败，原因是{0}",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosDeleteIPsecFlow.java"
  },
  {
    "raw": "the remoteCidr[%s] is overlaped with VirtualRouter interface cidr[%s]",
    "en_US": "the remoteCidr[{0}] is overlaped with VirtualRouter interface cidr[{1}]",
    "zh_CN": "RemoteCidR[{0}]与VirtualRouter接口CIDR[{1}]重叠",
    "arguments": [
      "rcidr",
      "cidr"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "en_US": "vyos doesn\u0027t support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "zh_CN": "vyos不支持aes-192作为密钥交换加密算法，可用选择为aes-128, aes-256, 3des",
    "arguments": [],
    "line": 293,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "en_US": "vyos doesn\u0027t support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des",
    "zh_CN": "vyos不支持aes-192作为加密算法协议，可用选择为aes-128, aes-256, 3des",
    "arguments": [],
    "line": 299,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "vyos doesn\u0027t support %d as Ike DhGroup ",
    "en_US": "vyos doesn\u0027t support {0} as Ike DhGroup ",
    "zh_CN": "vyos不支持[{0}]作为Ike DhGroup",
    "arguments": [
      "msg.getIkeDhGroup()"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "sync to ha group failed, because:%s",
    "en_US": "sync to ha group failed, because:{0}",
    "zh_CN": "与高可用性组同步失败，原因：{0}",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 788,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "apply to ha group failed, because %s",
    "en_US": "apply to ha group failed, because {0}",
    "zh_CN": "应用到HA组失败，原因是{0}",
    "arguments": [
      "errorCode.getDescription()"
    ],
    "line": 675,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "update ipsec version failed, because:vpc[%s] not exist",
    "en_US": "update ipsec version failed, because:vpc[{0}] not exist",
    "zh_CN": "更新IPSec版本失败，因为：VPC[{0}]不存在",
    "arguments": [
      "vrUuid"
    ],
    "line": 768,
    "fileName": "src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java"
  },
  {
    "raw": "there has been a kvm host having management ip[%s]",
    "en_US": "there has been a kvm host having management ip[{0}]",
    "zh_CN": "已经存在一个拥有管理节点IP[{0}]的物理机",
    "arguments": [
      "msg.getManagementIp()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/kvm/KVMApiInterceptor.java"
  },
  {
    "raw": "unexpected VNC port number[%d] for VM [uuid:%s]",
    "en_US": "unexpected VNC port number[{0}] for VM [uuid:{1}]",
    "zh_CN": "VM[uuid：{1}]的意外VNC端口号[{0}]",
    "arguments": [
      "rsp.getPort()",
      "vm.getUuid()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/kvm/KVMConsoleHypervisorBackend.java"
  },
  {
    "raw": "host[uuid:%s] has been deleted",
    "en_US": "host[uuid:{0}] has been deleted",
    "zh_CN": "物理机[uuid:{0}]已经被删除了",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 465,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running or Stopped, current state[%s]",
    "en_US": "vm[uuid:{0}] is not Running or Stopped, current state[{1}]",
    "zh_CN": "云主机[uuid:{0}]未处在Running或Stopped状态, 现在状态为[{1}]",
    "arguments": [
      "msg.getVmUuid()",
      "vmState"
    ],
    "line": 2499,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "after block commit, new volume path still use %s",
    "en_US": "after block commit, new volume path still use {0}",
    "zh_CN": "块提交后，新卷路径仍使用{0}",
    "arguments": [
      "ret.getNewVolumeInstallPath()"
    ],
    "line": 745,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "create connection to host[%s] failed, because %s",
    "en_US": "create connection to host[{0}] failed, because {1}",
    "zh_CN": "创建到物理机[{0}]的连接失败，原因是{1}",
    "arguments": [
      "host.getUuid()",
      "webSsh.status"
    ],
    "line": 877,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "check host capacity failed, because:%s",
    "en_US": "check host capacity failed, because:{0}",
    "zh_CN": "检查物理机容量失败，原因：{0}",
    "arguments": [
      "reply.getError()"
    ],
    "line": 1326,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "The host[uuid:%s]\u0027s available memory capacity[%s] is lower than the reserved capacity[%s]",
    "en_US": "The host[uuid:{0}]\u0027s available memory capacity[{1}] is lower than the reserved capacity[{2}]",
    "zh_CN": "物理机[uuid:{0}]的可用内存[{1}]少于保留内存[{2}]",
    "arguments": [
      "msg.getHostUuid()",
      "rsp.getTotalMemory()",
      "reservedSize"
    ],
    "line": 1337,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to register colo heartbeat for vm[uuid:%s] on kvm host [uuid:%s, ip:%s], because %s",
    "en_US": "unable to register colo heartbeat for vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "无法为KVM物理机[uuid：{1}，IP：{2}]上的VM[uuid：{0}]注册COLO检测信号，因为{3}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1392,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to start colo sync vm[uuid:%s] on kvm host [uuid:%s, ip:%s], because %s",
    "en_US": "unable to start colo sync vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "无法在KVM物理机[uuid：{1}，IP：{2}]上启动Colo Sync VM[uuid：{0}]，原因是{3}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1448,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to config secondary vm[uuid:%s] on kvm host [uuid:%s, ip:%s], because %s",
    "en_US": "unable to config secondary vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "无法在KVM物理机[uuid：{1}，IP：{2}]上配置辅助云主机[uuid：{0}]，原因是{3}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1503,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to config primary vm[uuid:%s] on kvm host [uuid:%s, ip:%s], because %s",
    "en_US": "unable to config primary vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "无法在KVM物理机[uuid：{1}，IP：{2}]上配置主VM[uuid：{0}]，原因是{3}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1535,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to get first boot dev of vm[uuid:%s] on kvm host [uuid:%s, ip:%s], because %s",
    "en_US": "unable to get first boot dev of vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "无法获取KVM物理机[uuid：{1}，IP：{2}]上的VM[uuid：{0}]的第一个引导设备，因为{3}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 1576,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to get vm[uuid:%s] device address, because:%s",
    "en_US": "failed to get vm[uuid:{0}] device address, because:{1}",
    "zh_CN": "无法获取VM[uuid：{0}]设备地址，因为：{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "rsp.getError()"
    ],
    "line": 1625,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to get host[uuid:%s] virtualizer info, because:%s",
    "en_US": "failed to get host[uuid:{0}] virtualizer info, because:{1}",
    "zh_CN": "无法获取物理机[uuid：{0}]虚拟化程序信息，因为：{1}",
    "arguments": [
      "msg.getHostUuid()",
      "rsp.getError()"
    ],
    "line": 1680,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to increase vm cpu, error details: %s",
    "en_US": "failed to increase vm cpu, error details: {0}",
    "zh_CN": "无法增加VM CPU，错误详细信息：{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 1762,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort:%d ] to do DNS check, please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2} ] to do DNS check, please check if username/password is wrong; {3}",
    "zh_CN": "无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "result.getExitErrorMessage()"
    ],
    "line": 1860,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the host[uuid:%s, status:%s] is not Connected",
    "en_US": "the host[uuid:{0}, status:{1}] is not Connected",
    "zh_CN": "物理机[uuid:{0}, 状态:{1}]不是Connected状态",
    "arguments": [
      "self.getUuid()",
      "self.getStatus()"
    ],
    "line": 1942,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot do volume snapshot merge when vm[uuid:%s] is in state of %s. The operation is only allowed when vm is Running or Stopped",
    "en_US": "cannot do volume snapshot merge when vm[uuid:{0}] is in state of {1}. The operation is only allowed when vm is Running or Stopped",
    "zh_CN": "当云主机[uuid:{0}]处于{1}状态的时候不能做云盘快照合并。此操作只能在云主机处在Running和Stopped状态时进行",
    "arguments": [
      "volume.getUuid()",
      "state"
    ],
    "line": 2280,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "live volume snapshot merge needs libvirt version greater than %s, current libvirt version is %s. Please stop vm and redo the operation or detach the volume if it\u0027s data volume",
    "en_US": "live volume snapshot merge needs libvirt version greater than {0}, current libvirt version is {1}. Please stop vm and redo the operation or detach the volume if it\u0027s data volume",
    "zh_CN": "实时云盘快照合并需要libvirt版本高于{0}，现在libvirt版本为{1}。请停止云主机后重试或卸载云盘（仅当为云盘时）",
    "arguments": [
      "KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION",
      "libvirtVersion"
    ],
    "line": 2287,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to update nic[vm:%s] on kvm host[uuid:%s, ip:%s],because %s",
    "en_US": "failed to update nic[vm:{0}] on kvm host[uuid:{1}, ip:{2}],because {3}",
    "zh_CN": "无法更新KVM物理机[uuid：{1}，IP：{2}]上的NIC[VM：{0}]，因为{3}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 2911,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach nic[uuid:%s, vm:%s] on kvm host[uuid:%s, ip:%s],because %s",
    "en_US": "failed to attach nic[uuid:{0}, vm:{1}] on kvm host[uuid:{2}, ip:{3}],because {4}",
    "zh_CN": "在物理机[uuid:{2},IP:{3}]上加载网卡[uuid:{0},云主机:{1}]失败，因为:{4}",
    "arguments": [
      "msg.getNicInventory().getUuid()",
      "msg.getNicInventory().getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()"
    ],
    "line": 2963,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach nic[uuid:%s, vm:%s] on kvm host[uuid:%s, ip:%s],because %s, please try again or delete device[%s] by yourself",
    "en_US": "failed to attach nic[uuid:{0}, vm:{1}] on kvm host[uuid:{2}, ip:{3}],because {4}, please try again or delete device[{5}] by yourself",
    "zh_CN": "无法在KVM物理机[uuid：{2}，IP：{3}]上连接NIC[uuid：{0}，VM：{1}]，因为{4}，请重试或自行删除设备[{5}",
    "arguments": [
      "msg.getNicInventory().getUuid()",
      "msg.getNicInventory().getVmInstanceUuid()",
      "self.getUuid()",
      "self.getManagementIp()",
      "ret.getError()",
      "msg.getNicInventory().getInternalName()"
    ],
    "line": 2959,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to detach data volume[uuid:%s, installPath:%s] from vm[uuid:%s, name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to detach data volume[uuid:{0}, installPath:{1}] from vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}",
    "zh_CN": "无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]卸载云盘[uuid:{0}, installPath:{1}]，因为: {6}",
    "arguments": [
      "vol.getUuid()",
      "vol.getInstallPath()",
      "vm.getUuid()",
      "vm.getName()",
      "getSelf().getUuid()",
      "getSelf().getManagementIp()",
      "ret.getError()"
    ],
    "line": 3018,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach data volume[uuid:%s, installPath:%s] to vm[uuid:%s, name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to attach data volume[uuid:{0}, installPath:{1}] to vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}",
    "zh_CN": "无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]挂载云盘[uuid:{0}, installPath:{1}]，因为: {6}",
    "arguments": [
      "vol.getUuid()",
      "vol.getInstallPath()",
      "vm.getUuid()",
      "vm.getName()",
      "getSelf().getUuid()",
      "getSelf().getManagementIp()",
      "ret.getError()"
    ],
    "line": 3105,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to destroy vm[uuid:%s name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to destroy vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "无法在物理机[uuid:{2}, ip:{3}]上删除云主机[uuid:{0} name:{1}]，原因: {4}",
    "arguments": [
      "vminv.getUuid()",
      "vminv.getName()",
      "self.getUuid()",
      "self.getManagementIp()",
      "e.getMessage()"
    ],
    "line": 3149,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to stop vm[uuid:%s name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "failed to stop vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "在物理机[uuid:{2}, ip:{3}]上停止云主机[uuid:{0} 名称:{1}]失败，因为:{4}",
    "arguments": [
      "vminv.getUuid()",
      "vminv.getName()",
      "self.getUuid()",
      "self.getManagementIp()",
      "e.getMessage()"
    ],
    "line": 3281,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "Host[%s] update spice channel config faild, because %s",
    "en_US": "Host[{0}] update spice channel config faild, because {1}",
    "zh_CN": "物理机[{0}]更新SPICE通道配置失败，原因是{1}",
    "arguments": [
      "msg.getHostUuid()",
      "ret.getError()"
    ],
    "line": 3386,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "when the vm platform is Other, the number of dataVolumes and cdroms cannot exceed 3, currently %s",
    "en_US": "when the vm platform is Other, the number of dataVolumes and cdroms cannot exceed 3, currently {0}",
    "zh_CN": "当VM平台为OTHER时，DataVolumes和CDROM的数量不能超过3个，目前为{0}",
    "arguments": [
      "total"
    ],
    "line": 3505,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to check physical network interfaces[names : %s] on kvm host[uuid:%s, ip:%s]",
    "en_US": "failed to check physical network interfaces[names : {0}] on kvm host[uuid:{1}, ip:{2}]",
    "zh_CN": "无法检查KVM物理机[uuid：{1}，IP：{2}]上的物理网络接口[名称：{0}]",
    "arguments": [
      "msg.getPhysicalInterface()",
      "context.getInventory().getUuid()",
      "context.getInventory().getManagementIp()"
    ],
    "line": 3997,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "detected abnormal status[host uuid change, expected: %s but: %s or agent version change, expected: %s but: %s] of kvmagent,it\u0027s mainly caused by kvmagent restarts behind zstack management server. Report this to ping task, it will issue a reconnect soon",
    "en_US": "detected abnormal status[host uuid change, expected: {0} but: {1} or agent version change, expected: {2} but: {3}] of kvmagent,it\u0027s mainly caused by kvmagent restarts behind zstack management server. Report this to ping task, it will issue a reconnect soon",
    "zh_CN": "检测到KVMAgent的异常状态[物理机uuid更改，预期：{0}但是：{1}或代理版本更改，预期：{2}但是：{3}]，这主要是由KVMAgent在ZStack管理服务器后面重新启动引起的。将此报告给ping任务，它将很快发出重新连接",
    "arguments": [
      "self.getUuid()",
      "ret.getHostUuid()",
      "dbf.getDbVersion()",
      "ret.getVersion()"
    ],
    "line": 4128,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to kvm host[uuid:%s, ip:%s, url:%s], because %s",
    "en_US": "unable to connect to kvm host[uuid:{0}, ip:{1}, url:{2}], because {3}",
    "zh_CN": "连接物理机[uuid:{0}, ip:{1}，url:{2}]失败，因为:{3}",
    "arguments": [
      "self.getUuid()",
      "self.getManagementIp()",
      "connectPath",
      "rsp.getError()"
    ],
    "line": 4283,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host can not access any primary storage, %s",
    "en_US": "host can not access any primary storage, {0}",
    "zh_CN": "物理机无法访问任何主存储，{0}",
    "arguments": [
      "errorCodeList !\u003d null \u0026\u0026 StringUtils.isNotEmpty(errorCodeList.getReadableDetails()) ? errorCodeList.getReadableDetails() : \"please check network\""
    ],
    "line": 4342,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the host[%s] ssh port[%s] not open after %s seconds, connect timeout",
    "en_US": "the host[{0}] ssh port[{1}] not open after {2} seconds, connect timeout",
    "zh_CN": "物理机[{0}]SSH端口[{1}]在{2}秒后未打开，连接超时",
    "arguments": [
      "getSelf().getManagementIp()",
      "getSelf().getPort()",
      "TimeUnit.MILLISECONDS.toSeconds(sshTimeout)"
    ],
    "line": 4482,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to ping all DNS/IP in %s; please check /etc/resolv.conf to make sure your host is able to reach public internet",
    "en_US": "failed to ping all DNS/IP in {0}; please check /etc/resolv.conf to make sure your host is able to reach public internet",
    "zh_CN": "在{0}中的所有DNS/IP都ping失败了，请检查 /etc/resolv.conf 来确保你的物理机能连接到公网",
    "arguments": [
      "checkList"
    ],
    "line": 4542,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort: %d, ] to do DNS check, please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort: {2}, ] to do DNS check, please check if username/password is wrong; {3}",
    "zh_CN": "无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "ret.getExitErrorMessage()"
    ],
    "line": 4540,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the KVM host[ip:%s] cannot access the management node\u0027s callback url. It seems that the KVM host cannot reach the management IP[%s]. %s %s",
    "en_US": "the KVM host[ip:{0}] cannot access the management node\u0027s callback url. It seems that the KVM host cannot reach the management IP[{1}]. {2} {3}",
    "zh_CN": "物理机[ip:{0}] 不能连接到管理节点 。 看起来是这个物理机无法到达管理节点的IP [{1}]. {2} {3}",
    "arguments": [
      "self.getManagementIp()",
      "restf.getHostName()",
      "ret.getStderr()",
      "ret.getExitErrorMessage()"
    ],
    "line": 4585,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to connect to KVM[ip:%s, username:%s, sshPort:%d] to check the management node connectivity,please check if username/password is wrong; %s",
    "en_US": "unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2}] to check the management node connectivity,please check if username/password is wrong; {3}",
    "zh_CN": "不能连接到物理机[ip:{0}, username:{1}, sshPort:{2}] 去检查与管理节点是否连通  ,请检查您的用户名或者密码是否有误; {3}",
    "arguments": [
      "self.getManagementIp()",
      "getSelf().getUsername()",
      "getSelf().getPort()",
      "ret.getExitErrorMessage()"
    ],
    "line": 4582,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to Check whether the host is taken over,  because %s",
    "en_US": "unable to Check whether the host is taken over,  because {0}",
    "zh_CN": "无法检查物理机是否已被接管，因为{0}",
    "arguments": [
      "hostRet.getExitErrorMessage()"
    ],
    "line": 4611,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "Unable to get the timestamp of the flag,  because %s",
    "en_US": "Unable to get the timestamp of the flag,  because {0}",
    "zh_CN": "无法获取标志的时间戳，因为{0}",
    "arguments": [
      "timeRet.getExitErrorMessage()"
    ],
    "line": 4625,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the host[ip:%s] has been taken over, because the takeover flag[HostUuid:%s] already exists and utime[%d] has not exceeded host ping interval[%d]",
    "en_US": "the host[ip:{0}] has been taken over, because the takeover flag[HostUuid:{1}] already exists and utime[{2}] has not exceeded host ping interval[{3}]",
    "zh_CN": "物理机[IP：{0}]已被接管，因为接管标志[HOSTuuid：{1}]已存在，并且UTIME[{2}]未超过物理机ping间隔[{3}]",
    "arguments": [
      "self.getManagementIp()",
      "hostOutput",
      "diff",
      "HostGlobalConfig.PING_HOST_INTERVAL.value(int.class)"
    ],
    "line": 4634,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "the host[ip:%s] has been taken over, because flag[HostUuid:%s] exists in the database",
    "en_US": "the host[ip:{0}] has been taken over, because flag[HostUuid:{1}] exists in the database",
    "zh_CN": "物理机[IP：{0}]已被接管，因为数据库中存在标志[HOSTuuid：{1}]",
    "arguments": [
      "self.getManagementIp()",
      "lastHostInv.getUuid()"
    ],
    "line": 4643,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "unable to get host cpu architecture, please check if username/password is wrong; %s",
    "en_US": "unable to get host cpu architecture, please check if username/password is wrong; {0}",
    "zh_CN": "无法获取物理机CPU架构，请检查用户名/密码是否错误；{0}",
    "arguments": [
      "ret.getExitErrorMessage()"
    ],
    "line": 4666,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host cpu architecture[%s] is not matched the cluster[%s]",
    "en_US": "host cpu architecture[{0}] is not matched the cluster[{1}]",
    "zh_CN": "物理机CPU体系结构[{0}]与群集[{1}]不匹配",
    "arguments": [
      "hostArchitecture",
      "cluster.getArchitecture()"
    ],
    "line": 4693,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot find either \u0027vmx\u0027 or \u0027svm\u0027 in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting",
    "en_US": "cannot find either \u0027vmx\u0027 or \u0027svm\u0027 in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting",
    "zh_CN": "不能发现以下任意一个  \u0027vmx\u0027 or \u0027svm\u0027 在路径 /proc/cpuinfo 里, 请检查你是否在你的BIOS设置里开启了virtualization选项",
    "arguments": [],
    "line": 4997,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host [uuid:%s] cannot be added to cluster [uuid:%s] because qemu/libvirt version does not match",
    "en_US": "host [uuid:{0}] cannot be added to cluster [uuid:{1}] because qemu/libvirt version does not match",
    "zh_CN": "物理机[uuid:{0}]不能添加到集群[uuid:{1}]中，因为qemu/libvirt不匹配",
    "arguments": [
      "self.getUuid()",
      "self.getClusterUuid()"
    ],
    "line": 5064,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host [uuid:%s] cannot be added to cluster [uuid:%s] because cpu model name does not match",
    "en_US": "host [uuid:{0}] cannot be added to cluster [uuid:{1}] because cpu model name does not match",
    "zh_CN": "物理机[uuid:{0}]无法被添加到集群[uuid:{1}]因为cpu型号不一致",
    "arguments": [
      "self.getUuid()",
      "self.getClusterUuid()"
    ],
    "line": 5084,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host[%s] not shutdown in %d seconds",
    "en_US": "host[{0}] not shutdown in {1} seconds",
    "zh_CN": "物理机[{0}]未在{1}秒内关闭",
    "arguments": [
      "msg.getHostUuid()",
      "ctimeout"
    ],
    "line": 5217,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host is not in the connected status, cannot update os",
    "en_US": "host is not in the connected status, cannot update os",
    "zh_CN": "物理机当前并不是已连接状态，不能升级操作系统",
    "arguments": [],
    "line": 5374,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "host is in the premaintenance state, cannot update os",
    "en_US": "host is in the premaintenance state, cannot update os",
    "zh_CN": "物理机正处于预维护状态，不能升级操作系统",
    "arguments": [],
    "line": 5372,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to attach volume to host, because:%s",
    "en_US": "failed to attach volume to host, because:{0}",
    "zh_CN": "无法将卷附加到物理机，因为：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 5666,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "failed to detach volume from host, because:%s",
    "en_US": "failed to detach volume from host, because:{0}",
    "zh_CN": "无法从物理机分离卷，因为：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 5727,
    "fileName": "src/main/java/org/zstack/kvm/KVMHost.java"
  },
  {
    "raw": "cannot adapt version for the bellow rpm: libvirt / qemu / cpumodel",
    "en_US": "cannot adapt version for the bellow rpm: libvirt / qemu / cpumodel",
    "zh_CN": "源和目的之间的以下组件版本不兼容：libvirt、qemu、cpumodel",
    "arguments": [],
    "line": 201,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostAllocatorFilterExtensionPoint.java"
  },
  {
    "raw": "fail to load host info from file. because\\n%s",
    "en_US": "fail to load host info from file. because\\n{0}",
    "zh_CN": "无法从文件加载物理机信息。因为\\n{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "the operation system[%s] of host[name:%s, ip:%s] is invalid",
    "en_US": "the operation system[{0}] of host[name:{1}, ip:{2}] is invalid",
    "zh_CN": "物理机[名称：{1}，IP：{2}]的操作系统[{0}]无效",
    "arguments": [
      "os",
      "vo.getName()",
      "vo.getManagementIp()"
    ],
    "line": 290,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "cluster[uuid:%s] already has host with os version[%s], but new added host[name:%s ip:%s] has different host os version[%s]",
    "en_US": "cluster[uuid:{0}] already has host with os version[{1}], but new added host[name:{2} ip:{3}] has different host os version[{4}]",
    "zh_CN": "群集[uuid：{0}]已具有操作系统版本为[{1}]的物理机，但新添加的物理机[名称：{2}IP：{3}]具有不同的物理机操作系统版本[{4}]",
    "arguments": [
      "vo.getClusterUuid()",
      "otherOs",
      "vo.getName()",
      "vo.getManagementIp()",
      "os"
    ],
    "line": 316,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "vm[uuid:%s] crashes due to kernel error",
    "en_US": "vm[uuid:{0}] crashes due to kernel error",
    "zh_CN": "VM[uuid：{0}]因内核错误而崩溃",
    "arguments": [
      "cmd.vmUuid"
    ],
    "line": 461,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "there are still hosts not have the same cpu model, details: %s",
    "en_US": "there are still hosts not have the same cpu model, details: {0}",
    "zh_CN": "仍存在host有不同的cpu模型，详细信息：{0}",
    "arguments": [
      "str.toString()"
    ],
    "line": 500,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "pci bridge need a value greater than 0 and lower than 32",
    "en_US": "pci bridge need a value greater than 0 and lower than 32",
    "zh_CN": "PCI桥需要大于0且小于32的值",
    "arguments": [
      "KVMSystemTags.VM_PREDEFINED_PCI_BRIDGE_NUM_TOKEN"
    ],
    "line": 514,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "vm current state[%s], modify virtioSCSI requires the vm state[%s]",
    "en_US": "vm current state[{0}], modify virtioSCSI requires the vm state[{1}]",
    "zh_CN": "VM当前状态[{0}]，修改VirtiosCsi需要VM状态[{1}]",
    "arguments": [
      "vm.getState()",
      "VmInstanceState.Stopped"
    ],
    "line": 557,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "host[uuid:%s] does not have cpu model information, you can reconnect the host to fix it",
    "en_US": "host[uuid:{0}] does not have cpu model information, you can reconnect the host to fix it",
    "zh_CN": "物理机[uuid:{0}]无cpu模型信息，你可以尝试重连来解决这个问题",
    "arguments": [
      "hostUuid"
    ],
    "line": 759,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostFactory.java"
  },
  {
    "raw": "invalid format string %s",
    "en_US": "invalid format string {0}",
    "zh_CN": "格式字符串{0}无效",
    "arguments": [
      "format"
    ],
    "line": 35,
    "fileName": "src/main/java/org/zstack/kvm/KVMHostUtils.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}] on kvm host[uuid:{3}], because {4}",
    "zh_CN": "在物理机[uuid:{3}]上为二层网络[uuid:{1}, type:{2}]创建网桥[{0}]失败，原因: {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for l2NoVlanNetwork[uuid:%s, name:%s] on kvm host[uuid: %s], %s",
    "en_US": "failed to check bridge[{0}] for l2NoVlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid: {3}], {4}",
    "zh_CN": "在二层网络[uuid:{1}中检查网桥[{0}]失败，名字为[{2}]在物理机t[uuid: {3}]上, {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java"
  },
  {
    "raw": "failed to delete bridge[%s] for l2Network[uuid:%s, type:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to delete bridge[{0}] for l2Network[uuid:{1}, type:{2}] on kvm host[uuid:{3}], because {4}",
    "zh_CN": "无法在KVM物理机[uuid：{3}]上删除二层网络[uuid：{1}，类型：{2}]的网桥[{0}]，因为{4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s, vlan:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "创建二层网络[uuid:{1}中的网桥[{0}]失败 , 类型为: {2}, vlan:{3}] 在物理机[uuid:{4}]上, 原因:  {5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vlan.getVlan()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for l2VlanNetwork[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check bridge[{0}] for l2VlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "检查在物理机[uuid:{3}]上二层网络[uuid:{1}, name:{2}]中的网桥[{0}]失败, {4}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2vlan.getUuid()",
      "l2vlan.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java"
  },
  {
    "raw": "failed to delete bridge[%s] for l2Network[uuid:%s, type:%s, vlan:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to delete bridge[{0}] for l2Network[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "无法在KVM物理机[uuid：{4}]上删除二层网络[uuid：{1}，类型：{2}，VLAN：{3}]的网桥[{0}]，因为{5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vlan.getVlan()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java"
  },
  {
    "raw": "failed to apply rules of security group rules to kvm host[uuid:%s], because %s",
    "en_US": "failed to apply rules of security group rules to kvm host[uuid:{0}], because {1}",
    "zh_CN": "不能应用安全组规则在物理机t[uuid:{0}]上, 因为 {1}",
    "arguments": [
      "hto.getHostUuid()",
      "rsp.getError()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java"
  },
  {
    "raw": "failed to check default rules of security group on kvm host[uuid:%s], because %s",
    "en_US": "failed to check default rules of security group on kvm host[uuid:{0}], because {1}",
    "zh_CN": "在host[uuid:{0}]上检查默认安全组规则失败",
    "arguments": [
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java"
  },
  {
    "raw": "Failed to start vm, because can not disable vm.cpu.hypervisor.feature with vm.cpuMode none",
    "en_US": "Failed to start vm, because can not disable vm.cpu.hypervisor.feature with vm.cpuMode none",
    "zh_CN": "无法启动VM，因为无法使用VM.CPUMode None禁用VM.CPU.Hypervisor.Feature",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmHardwareVerifyExtensionPoint.java"
  },
  {
    "raw": "cannot get vmUuid from msg %s",
    "en_US": "cannot get vmUuid from msg {0}",
    "zh_CN": "无法从消息{0}获取VMuuid",
    "arguments": [
      "msg.getMessageName()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "unable to do vm sync on host[uuid:%s, ip:%s] because %s",
    "en_US": "unable to do vm sync on host[uuid:{0}, ip:{1}] because {2}",
    "zh_CN": "不能在物理机[uuid:{0}, ip:{1}]上执行云主机状态同步操作，因为{2}",
    "arguments": [
      "host.getUuid()",
      "host.getManagementIp()",
      "ret.getError()"
    ],
    "line": 258,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "The vm[%s] state is in shutdown for a long time, check whether the vm is normal",
    "en_US": "The vm[{0}] state is in shutdown for a long time, check whether the vm is normal",
    "zh_CN": "云主机[{0}]长时间处于关闭状态，请检查云主机是否正常",
    "arguments": [
      "vmUuid"
    ],
    "line": 287,
    "fileName": "src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java"
  },
  {
    "raw": "unsupported LDAP/AD server scope",
    "en_US": "unsupported LDAP/AD server scope",
    "zh_CN": "不支持的LDAP/AD服务器作用域",
    "arguments": [],
    "line": 67,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Wrong LdapServerType[%s], valid values: [%,%s]",
    "en_US": "Wrong LdapServerType[{0}], valid values: [%,{1}]",
    "zh_CN": "错误的LDAP服务类型[{0}]，有效的值: [%,{1}]",
    "arguments": [
      "type",
      "LdapConstant.OpenLdap.TYPE",
      "LdapConstant.WindowsAD.TYPE"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Cannot connect to LDAP/AD server, Invalid Credentials, please checkout User DN and password",
    "en_US": "Cannot connect to LDAP/AD server, Invalid Credentials, please checkout User DN and password",
    "zh_CN": "无法连接到LDAP/AD服务器，凭据无效，请签出用户DN和密码",
    "arguments": [],
    "line": 153,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Cannot connect to LDAP/AD server, communication false, please checkout IP, port and Base DN",
    "en_US": "Cannot connect to LDAP/AD server, communication false, please checkout IP, port and Base DN",
    "zh_CN": "无法连接到LDAP/AD服务器，通信错误，请检查IP、端口和基本DN",
    "arguments": [],
    "line": 156,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Cannot connect to LDAP/AD server, %s",
    "en_US": "Cannot connect to LDAP/AD server, {0}",
    "zh_CN": "不能连接LDAP服务，{0}",
    "arguments": [
      "e.toString()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/ldap/LdapApiInterceptor.java"
  },
  {
    "raw": "Account[uuid:%s] Not Found!!!",
    "en_US": "Account[uuid:{0}] Not Found!!!",
    "zh_CN": "未找到帐户[uuid：{0}]！",
    "arguments": [
      "vo.getAccountUuid()"
    ],
    "line": 560,
    "fileName": "src/main/java/org/zstack/ldap/LdapManagerImpl.java"
  },
  {
    "raw": "query ldap entry[filter: %s] fail, because %s",
    "en_US": "query ldap entry[filter: {0}] fail, because {1}",
    "zh_CN": "查询LDAP条目[筛选器：{0}]失败，原因是{1}",
    "arguments": [
      "filter",
      "errorMessage"
    ],
    "line": 581,
    "fileName": "src/main/java/org/zstack/ldap/LdapUtil.java"
  },
  {
    "raw": "query ldap entry fail, %s",
    "en_US": "query ldap entry fail, {0}",
    "zh_CN": "查询LDAP条目失败，{0}",
    "arguments": [
      "e.toString()"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/ldap/externalSearch/AggregateSearch.java"
  },
  {
    "raw": "Parse license error,\\n1. check your private key and application code is correct\\n2. check your license is not corrupted\\n3. use zstack-ctl clear_license to clear your licenses and try to reinstall\\n",
    "en_US": "Parse license error,\\n1. check your private key and application code is correct\\n2. check your license is not corrupted\\n3. use zstack-ctl clear_license to clear your licenses and try to reinstall\\n",
    "zh_CN": "解析许可证错误，\\N1。检查您的私钥和应用程序代码是否正确\\N2。检查您的许可证是否已损坏\\N3。使用zstack-CTL清除_许可证清除您的许可证并尝试重新安装\\n",
    "arguments": [],
    "line": 167,
    "fileName": "src/main/java/org/zstack/license/LicenseChecker.java"
  },
  {
    "raw": "the licenseRequestCode is illegal",
    "en_US": "the licenseRequestCode is illegal",
    "zh_CN": "许可证请求代码不合法",
    "arguments": [],
    "line": 229,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Decode fail because %s",
    "en_US": "Decode fail because {0}",
    "zh_CN": "解码失败，因为{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 242,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Unexpected decoded license file length: %d",
    "en_US": "Unexpected decoded license file length: {0}",
    "zh_CN": "意外的解码许可证文件长度：{0}",
    "arguments": [
      "bytes.length"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Licensed VM number overrun",
    "en_US": "Licensed VM number overrun",
    "zh_CN": "VM数量超过云主机授权上限",
    "arguments": [],
    "line": 791,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "unexpected host vendor for MINI",
    "en_US": "unexpected host vendor for MINI",
    "zh_CN": "Mini的意外物理机供应商",
    "arguments": [],
    "line": 857,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "not supported: delete license[%s] from USB-key",
    "en_US": "not supported: delete license[{0}] from USB-key",
    "zh_CN": "不支持：从USB-KEY删除许可证[{0}]",
    "arguments": [
      "info.getUuid()"
    ],
    "line": 1216,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "UKey not supported (arch: %s)",
    "en_US": "UKey not supported (arch: {0})",
    "zh_CN": "不支持UKey（Arch：{0}）",
    "arguments": [
      "System.getProperty(\"os.arch\")"
    ],
    "line": 1271,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "update local ukey license: %s",
    "en_US": "update local ukey license: {0}",
    "zh_CN": "更新本地UKEY许可证：{0}",
    "arguments": [
      "ex.getLocalizedMessage()"
    ],
    "line": 1351,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "No local ukey license updated",
    "en_US": "No local ukey license updated",
    "zh_CN": "没有本地UKEY许可证更新",
    "arguments": [],
    "line": 1347,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "No node available to update UKey",
    "en_US": "No node available to update UKey",
    "zh_CN": "没有节点可用于更新UKEY",
    "arguments": [],
    "line": 1377,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "Multiple MN exists but only supplied licenses for %s",
    "en_US": "Multiple MN exists but only supplied licenses for {0}",
    "zh_CN": "管理节点有多个，但是仅提供了节点{0}的许可证",
    "arguments": [
      "Platform.getManagementServerIp()"
    ],
    "line": 1519,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "MN[uuid:%s]: %s",
    "en_US": "MN[uuid:{0}]: {1}",
    "zh_CN": "Mn[uuid：{0}]：{1}",
    "arguments": [
      "mnUuid",
      "reply.getError().getDetails()"
    ],
    "line": 1493,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "MN HA environment, but only updated license for %s",
    "en_US": "MN HA environment, but only updated license for {0}",
    "zh_CN": "管理节点有多个，但是仅更新了节点{0}的许可证",
    "arguments": [
      "msg.getManagementUuids()"
    ],
    "line": 1521,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "can not find license[uuid:%s, type:%s] file on path %s",
    "en_US": "can not find license[uuid:{0}, type:{1}] file on path {2}",
    "zh_CN": "在路径{2}上找不到许可证[uuid：{0}，类型：{1}]文件",
    "arguments": [
      "newLicenseInfo.getUuid()",
      "newLicenseInfo.getLicenseType().toString()",
      "path"
    ],
    "line": 1724,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "License expired",
    "en_US": "License expired",
    "zh_CN": "许可证已过期",
    "arguments": [],
    "line": 2263,
    "fileName": "src/main/java/org/zstack/license/LicenseManagerImpl.java"
  },
  {
    "raw": "%s is not existed",
    "en_US": "{0} is not existed",
    "zh_CN": "{0}不存在",
    "arguments": [
      "sdsInfoPath"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/license/cube/CubeLicenseFactory.java"
  },
  {
    "raw": "context cannot be null in license",
    "en_US": "context cannot be null in license",
    "zh_CN": "许可证中的上下文不能为空",
    "arguments": [],
    "line": 61,
    "fileName": "src/main/java/org/zstack/license/cube/XmsCli.java"
  },
  {
    "raw": "No factory found for type:%s",
    "en_US": "No factory found for type:{0}",
    "zh_CN": "未找到类型为{0}的工厂",
    "arguments": [
      "struct.getType()"
    ],
    "line": 247,
    "fileName": "src/main/java/org/zstack/log/LogConfigurationManagerImpl.java"
  },
  {
    "raw": "Unknown log configuration type %s",
    "en_US": "Unknown log configuration type {0}",
    "zh_CN": "未知的日志配置类型{0}",
    "arguments": [
      "msg.getType()"
    ],
    "line": 462,
    "fileName": "src/main/java/org/zstack/log/LogConfigurationManagerImpl.java"
  },
  {
    "raw": "No factory found for log4j2 appender type:%s.",
    "en_US": "No factory found for log4j2 appender type:{0}.",
    "zh_CN": "找不到Log4j2附加器类型的工厂：{0}。",
    "arguments": [
      "lstruct.getAppenderType()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java"
  },
  {
    "raw": "Unknown log4j2 appender type %s",
    "en_US": "Unknown log4j2 appender type {0}",
    "zh_CN": "未知的Log4j2 Appender类型{0}",
    "arguments": [
      "lstruct.getAppenderType()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java"
  },
  {
    "raw": "facility can not be null",
    "en_US": "facility can not be null",
    "zh_CN": "设备不能为空",
    "arguments": [],
    "line": 33,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "invalid facility %s",
    "en_US": "invalid facility {0}",
    "zh_CN": "工具{0}无效",
    "arguments": [
      "configuration.facility"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "hostname can not be null",
    "en_US": "hostname can not be null",
    "zh_CN": "物理机名不能为空",
    "arguments": [],
    "line": 41,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "port can not be null",
    "en_US": "port can not be null",
    "zh_CN": "端口不能为空",
    "arguments": [],
    "line": 45,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "protocol can not be null",
    "en_US": "protocol can not be null",
    "zh_CN": "协议不能为空",
    "arguments": [],
    "line": 49,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "unsupported protocol %s",
    "en_US": "unsupported protocol {0}",
    "zh_CN": "不支持的协议{0}",
    "arguments": [
      "configuration.protocol"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "syslog server[address: %s:%s] is not available",
    "en_US": "syslog server[address: {0}:{1}] is not available",
    "zh_CN": "Syslog服务器[地址：{0}：{1}]不可用",
    "arguments": [
      "configuration.hostname",
      "configuration.port"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "syslog server[address: %s] is not available",
    "en_US": "syslog server[address: {0}] is not available",
    "zh_CN": "Syslog服务器[地址：{0}]不可用",
    "arguments": [
      "configuration.hostname"
    ],
    "line": 61,
    "fileName": "src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java"
  },
  {
    "raw": "There is no LDAP/AD server in the system, Please add a LDAP/AD server first.",
    "en_US": "There is no LDAP/AD server in the system, Please add a LDAP/AD server first.",
    "zh_CN": "在系统中没有LDAP服务，请先添加一个LDAP服务",
    "arguments": [],
    "line": 74,
    "fileName": "src/main/java/org/zstack/login/LdapLoginInterceptor.java"
  },
  {
    "raw": "Can not bind this ldap uid %s to virtual id [uuid:%s]",
    "en_US": "Can not bind this ldap uid {0} to virtual id [uuid:{1}]",
    "zh_CN": "无法将此LDAP UID{0}绑定到虚拟ID[uuid：{1}]",
    "arguments": [
      "msg.getLdapUid()",
      "msg.getVirtualIDUuid()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/login/LdapLoginInterceptor.java"
  },
  {
    "raw": "This uid is already used",
    "en_US": "This uid is already used",
    "zh_CN": "此UID已被使用",
    "arguments": [],
    "line": 82,
    "fileName": "src/main/java/org/zstack/login/LdapLoginInterceptor.java"
  },
  {
    "raw": "ZStack is loading ldap organizations from DB now, can not execute sync operation",
    "en_US": "ZStack is loading ldap organizations from DB now, can not execute sync operation",
    "zh_CN": "ZStack正在从数据库加载LDAP组织，无法执行同步操作",
    "arguments": [],
    "line": 228,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to sync ldap entry[], because %s",
    "en_US": "Failed to sync ldap entry[], because {0}",
    "zh_CN": "无法同步LDAP条目[]，因为{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 390,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to sync organizations, because %s",
    "en_US": "Failed to sync organizations, because {0}",
    "zh_CN": "无法同步组织，因为{0}",
    "arguments": [
      "reply.getError().getReadableDetails()"
    ],
    "line": 1021,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to transform ldap entry to organization ndoe",
    "en_US": "Failed to transform ldap entry to organization ndoe",
    "zh_CN": "无法将LDAP条目转换为组织ndoe",
    "arguments": [],
    "line": 969,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "failed to sync ldap organization",
    "en_US": "failed to sync ldap organization",
    "zh_CN": "无法同步LDAP组织",
    "arguments": [],
    "line": 958,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Can not sync LDAP/AD server whose scope is not %s",
    "en_US": "Can not sync LDAP/AD server whose scope is not {0}",
    "zh_CN": "无法同步范围不是{0}的LDAP/AD服务器",
    "arguments": [
      "scope.toString()"
    ],
    "line": 1441,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to validate uid[%s], maybe it has been deleted",
    "en_US": "Failed to validate uid[{0}], maybe it has been deleted",
    "zh_CN": "无法验证UID[{0}]，它可能已被删除",
    "arguments": [
      "uid"
    ],
    "line": 1575,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to create iam2 virtual id for uid[%s], because %s",
    "en_US": "Failed to create iam2 virtual id for uid[{0}], because {1}",
    "zh_CN": "无法为UID[{0}]创建IAM2虚拟ID，因为{1}",
    "arguments": [
      "uid",
      "reply.getError().getReadableDetails()"
    ],
    "line": 1616,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Failed to validate dn [%s], maybe it has been deleted",
    "en_US": "Failed to validate dn [{0}], maybe it has been deleted",
    "zh_CN": "无法验证DN[{0}]，它可能已被删除",
    "arguments": [
      "ldapUid"
    ],
    "line": 1751,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "invalid json format",
    "en_US": "invalid json format",
    "zh_CN": "无效的JSON格式",
    "arguments": [],
    "line": 2195,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "name is mandatory field %",
    "en_US": "name is mandatory field %",
    "zh_CN": "名称是必填字段%",
    "arguments": [],
    "line": 2206,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "attribute is mandatory field %",
    "en_US": "attribute is mandatory field %",
    "zh_CN": "属性是强制字段%",
    "arguments": [],
    "line": 2210,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "type is mandatory field %",
    "en_US": "type is mandatory field %",
    "zh_CN": "类型为必填字段%",
    "arguments": [],
    "line": 2214,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "optional is mandatory field %",
    "en_US": "optional is mandatory field %",
    "zh_CN": "可选为必填字段%",
    "arguments": [],
    "line": 2218,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "name should use values in %s",
    "en_US": "name should use values in {0}",
    "zh_CN": "名称应使用{0}中的值",
    "arguments": [
      "fieldNames"
    ],
    "line": 2222,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "Invalid attribute. Attribute[%s] is required, but found there are some record not matched",
    "en_US": "Invalid attribute. Attribute[{0}] is required, but found there are some record not matched",
    "zh_CN": "无效属性。属性[{0}]是必需的，但发现有一些记录不匹配",
    "arguments": [
      "rule.getAttribute()"
    ],
    "line": 2254,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "strategy is mandatory field %",
    "en_US": "strategy is mandatory field %",
    "zh_CN": "策略为必填字段%",
    "arguments": [],
    "line": 2199,
    "fileName": "src/main/java/org/zstack/login/LdapLoginManagerImpl.java"
  },
  {
    "raw": "missing loginPluginName",
    "en_US": "missing loginPluginName",
    "zh_CN": "缺少LoginPluginName",
    "arguments": [],
    "line": 54,
    "fileName": "src/main/java/org/zstack/login/plugin/LoginPluginBackend.java"
  },
  {
    "raw": "no login plugin named %s",
    "en_US": "no login plugin named {0}",
    "zh_CN": "没有名为{0}的登录插件",
    "arguments": [
      "loginContext.getLoginPluginName()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/login/plugin/LoginPluginBackend.java"
  },
  {
    "raw": "missing LoginUserInfo when use plugin login",
    "en_US": "missing LoginUserInfo when use plugin login",
    "zh_CN": "使用插件登录时缺少LoginUserInfo",
    "arguments": [
      "loginContext.getLoginPluginName()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/login/plugin/LoginPluginBackend.java"
  },
  {
    "raw": "Invalid rule expression, add access control rule fail because: %s",
    "en_US": "Invalid rule expression, add access control rule fail because: {0}",
    "zh_CN": "规则表达式无效，添加访问控制规则失败，原因是：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlApiInterceptor.java"
  },
  {
    "raw": "unrecognized key: %s",
    "en_US": "unrecognized key: {0}",
    "zh_CN": "无法识别的键：{0}",
    "arguments": [
      "key"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "missing key:value of %s",
    "en_US": "missing key:value of {0}",
    "zh_CN": "缺少键：{0}的值",
    "arguments": [
      "opt.get()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "No available user with name: %s, type: %s",
    "en_US": "No available user with name: {0}, type: {1}",
    "zh_CN": "没有名称为{0}、类型为{1}的可用用户",
    "arguments": [
      "msg.getResourceName()",
      "msg.getLoginType()"
    ],
    "line": 291,
    "fileName": "src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java"
  },
  {
    "raw": "%s is not an API",
    "en_US": "{0} is not an API",
    "zh_CN": "{0}不是一个API",
    "arguments": [
      "msg.getJobName()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "cannot cancel longjob that is succeeded",
    "en_US": "cannot cancel longjob that is succeeded",
    "zh_CN": "不能取消已经成功的longjob",
    "arguments": [],
    "line": 152,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "cannot cancel longjob that is failed",
    "en_US": "cannot cancel longjob that is failed",
    "zh_CN": "不能取消已经失败的longjob",
    "arguments": [],
    "line": 155,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "delete longjob only when it\u0027s succeeded, canceled, or failed",
    "en_US": "delete longjob only when it\u0027s succeeded, canceled, or failed",
    "zh_CN": "只能删除已经成功、取消、失败的longjob",
    "arguments": [],
    "line": 166,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "rerun longjob only when it\u0027s succeeded, canceled, or failed",
    "en_US": "rerun longjob only when it\u0027s succeeded, canceled, or failed",
    "zh_CN": "仅在成功、取消或失败时重新运行LongJob",
    "arguments": [],
    "line": 177,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "can only resume longjob that is Suspended",
    "en_US": "can only resume longjob that is Suspended",
    "zh_CN": "只能恢复挂起的LongJob",
    "arguments": [],
    "line": 206,
    "fileName": "src/main/java/org/zstack/longjob/LongJobApiInterceptor.java"
  },
  {
    "raw": "%s has no corresponding longjob",
    "en_US": "{0} has no corresponding longjob",
    "zh_CN": "{0}没有与之对应的longjob",
    "arguments": [
      "jobName"
    ],
    "line": 39,
    "fileName": "src/main/java/org/zstack/longjob/LongJobFactoryImpl.java"
  },
  {
    "raw": "unable to attach a L3 network. The cidr of l3[%s] to attach overlapped with l3[%s] already attached to vm",
    "en_US": "unable to attach a L3 network. The cidr of l3[{0}] to attach overlapped with l3[{1}] already attached to vm",
    "zh_CN": "不能绑定这个三层网络。这个云主机上已经绑定的三层网络[{1}]和这个三层网络[{0}]的CIDR存在重叠",
    "arguments": [
      "l3NetworkUuid",
      "vmNicVO.getL3NetworkUuid()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vm[name:%s, uuid:%s] already has some port forwarding rules%s attached",
    "en_US": "the vm[name:{0}, uuid:{1}] already has some port forwarding rules{2} attached",
    "zh_CN": "云主机[name:{0}, uuid:{1}] 已经设置了一些端口转发规则{2}",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "StringUtils.join(pfStr, \",\")"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vm[name:%s, uuid:%s] already has some EIPs%s attached",
    "en_US": "the vm[name:{0}, uuid:{1}] already has some EIPs{2} attached",
    "zh_CN": "云主机[name:{0}, uuid:{1}] 已经配置了弹性IP{2}",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "StringUtils.join(eipStr, \",\")"
    ],
    "line": 176,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "the vip[uuid:%s] already has bound to other service[%s]",
    "en_US": "the vip[uuid:{0}] already has bound to other service[{1}]",
    "zh_CN": "该虚拟IP[uuid:{0}]已经绑定了其他服务",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "Current port range[%s, %s] is conflicted with used port range [%s, %s] with vip[uuid: %s] protocol: %s ",
    "en_US": "Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: {5} ",
    "zh_CN": "当前使用的端口范围[{0}, {1}]和虚拟IP[uuid: {4}, 协议: {5}]已经使用的端口范围[{2}, {3}]冲突",
    "arguments": [
      "Long.toString(range.getStart())",
      "Long.toString(range.getEnd())",
      "Long.toString(cur.getStart())",
      "Long.toString(cur.getEnd())",
      "vipUuid",
      "protocol"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "Current port range[%s, %s] is conflicted with system service port range [%s, %s] with vip[uuid: %s] protocol: %s ",
    "en_US": "Current port range[{0}, {1}] is conflicted with system service port range [{2}, {3}] with vip[uuid: {4}] protocol: {5} ",
    "zh_CN": "当前使用的端口范围[{0}, {1}]和虚拟IP[uuid: {4}, 协议: {5}]已经使用的系统服务端口范围[{2}, {3}]冲突",
    "arguments": [
      "Long.toString(range.getStart())",
      "Long.toString(range.getEnd())",
      "Long.toString(cur.getStart())",
      "Long.toString(cur.getEnd())",
      "vipUuid",
      "protocol"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/mediator/ApiValidator.java"
  },
  {
    "raw": "L3 network[uuid:%s] not found. Please correct your system tag[%s] of static IP",
    "en_US": "L3 network[uuid:{0}] not found. Please correct your system tag[{1}] of static IP",
    "zh_CN": "找不到三层网络[uuid:0]。请确认静态IP的系统标签",
    "arguments": [
      "l3Uuid",
      "systemTag"
    ],
    "line": 851,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "for shareable volume, the only supported primary storage type is %s, current is %s",
    "en_US": "for shareable volume, the only supported primary storage type is {0}, current is {1}",
    "zh_CN": "共享云盘仅支持在主存储类型为{0}的主存储上使用，当前的类型为{1}",
    "arguments": [
      "supportSharedVolumePrimaryStorage",
      "psType"
    ],
    "line": 327,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s] is larger than %d",
    "en_US": "invalid volume bandwidth[{0}] is larger than {1}",
    "zh_CN": "云盘带宽[{0}]大于{1}是无效的",
    "arguments": [
      "bandwidth",
      "Long.MAX_VALUE"
    ],
    "line": 795,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid network bandwidth[%s], it must be greater than or equal to 8192",
    "en_US": "invalid network bandwidth[{0}], it must be greater than or equal to 8192",
    "zh_CN": "错误的网络带宽[{0}],这个数字必须大于等于8K",
    "arguments": [
      "bandwidth"
    ],
    "line": 745,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s] is not a number",
    "en_US": "invalid volume bandwidth[{0}] is not a number",
    "zh_CN": "错误的云盘带宽 ，[{0}] 这个不是数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 793,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume bandwidth[%s], it must be greater than 1024 (include 1024)",
    "en_US": "invalid volume bandwidth[{0}], it must be greater than 1024 (include 1024)",
    "zh_CN": "无效的云盘带宽，它必须大于等于1M",
    "arguments": [
      "bandwidth"
    ],
    "line": 790,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s] is not a number",
    "en_US": "invalid volume IOPS[{0}] is not a number",
    "zh_CN": "错误的云盘每秒读写速度[{0}]，它应该是个数字",
    "arguments": [
      "iops"
    ],
    "line": 832,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s] is larger than %d",
    "en_US": "invalid volume IOPS[{0}] is larger than {1}",
    "zh_CN": "云盘IOPS[{0}]大于{1}是无效的",
    "arguments": [
      "iops",
      "Long.MAX_VALUE"
    ],
    "line": 834,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume IOPS[%s], it must be greater than 1 (include 1)",
    "en_US": "invalid volume IOPS[{0}], it must be greater than 1 (include 1)",
    "zh_CN": "卷IOPS[{0}]无效，它必须大于1（包括1）",
    "arguments": [
      "iops"
    ],
    "line": 829,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": " usb device can only be called by admin account",
    "en_US": " usb device can only be called by admin account",
    "zh_CN": "USB设备只能由管理员帐户调用",
    "arguments": [],
    "line": 865,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "Unknown code[%s] of Security Level",
    "en_US": "Unknown code[{0}] of Security Level",
    "zh_CN": "安全级别的未知代码[{0}]",
    "arguments": [
      "level"
    ],
    "line": 901,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "[%s] is not a standard cidr",
    "en_US": "[{0}] is not a standard cidr",
    "zh_CN": "[{0}]不是标准CIDR",
    "arguments": [
      "cidr"
    ],
    "line": 918,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "the host[uuid:%s]\u0027s operating system %s %s is too old, the QEMU doesn\u0027t support QoS of network or disk IO. Please choose another instance offering with no QoS configuration",
    "en_US": "the host[uuid:{0}]\u0027s operating system {1} {2} is too old, the QEMU doesn\u0027t support QoS of network or disk IO. Please choose another instance offering with no QoS configuration",
    "zh_CN": "物理机[uuid:{0}] 的操作系统{1} {2} 过老,  QEMU 不支持云盘的QOS IO设置 。 请选择别的没有Qos的计算规格",
    "arguments": [
      "hostUuid",
      "os.distribution",
      "os.version"
    ],
    "line": 939,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it\u0027s not a double",
    "en_US": "invalid value[{0}], it\u0027s not a double",
    "zh_CN": "错误的值[{0}]，这个不是双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 1186,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it must be a double greater than 0",
    "en_US": "invalid value[{0}], it must be a double greater than 0",
    "zh_CN": "错误的值[{0}]，必须是一个大于0的双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 1154,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], it must be a double between (0, 1]",
    "en_US": "invalid value[{0}], it must be a double between (0, 1]",
    "zh_CN": "错误的值[{0}]，这个必须在0~1之间的双精度值",
    "arguments": [
      "newValue"
    ],
    "line": 1183,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid value[%s], ZStack doesn\u0027t have such host allocator type",
    "en_US": "invalid value[{0}], ZStack doesn\u0027t have such host allocator type",
    "zh_CN": "错误值[{0}]，Zstack没有这样的分配器类型",
    "arguments": [
      "newValue"
    ],
    "line": 1197,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "%s value is[%s], which is conflict with %s value [%s]",
    "en_US": "{0} value is[{1}], which is conflict with {2} value [{3}]",
    "zh_CN": "{0}值为[{1}]，与{2}值[{3}]冲突",
    "arguments": [
      "MevocoGlobalConfig.AIO_NATIVE.getCanonicalName()",
      "MevocoGlobalConfig.AIO_NATIVE.value()",
      "KVMGlobalConfig.LIBVIRT_CACHE_MODE.getCanonicalName()",
      "KVMGlobalConfig.LIBVIRT_CACHE_MODE.value()"
    ],
    "line": 1219,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "obj is not instanceof NicQos!",
    "en_US": "obj is not instanceof NicQos!",
    "zh_CN": "OBJ不是NICQoS的实例！",
    "arguments": [],
    "line": 1489,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "unexpected host management IPs: [%s]",
    "en_US": "unexpected host management IPs: [{0}]",
    "zh_CN": "意外的物理机管理IP：[{0}]",
    "arguments": [
      "String.join(\",\", ips)"
    ],
    "line": 2054,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not set local and configure at same time",
    "en_US": "can not set local and configure at same time",
    "zh_CN": "不能同时设置本地和配置",
    "arguments": [],
    "line": 2190,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not find node A config info",
    "en_US": "can not find node A config info",
    "zh_CN": "找不到节点A配置信息",
    "arguments": [],
    "line": 2242,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not find node A address info from bootstrap agent",
    "en_US": "can not find node A address info from bootstrap agent",
    "zh_CN": "无法从启动代理中找到节点A地址信息",
    "arguments": [],
    "line": 2252,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "can not get bootstrap job %s result after 900s",
    "en_US": "can not get bootstrap job {0} result after 900s",
    "zh_CN": "无法在900秒后获取引导程序作业{0}结果",
    "arguments": [
      "s.getJobUuid()"
    ],
    "line": 2314,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "curl bootstrap agent finished, return code: %s, stdout: %s, stderr: %s",
    "en_US": "curl bootstrap agent finished, return code: {0}, stdout: {1}, stderr: {2}",
    "zh_CN": "cURL引导代理已完成，返回代码：{0}，标准输出：{1}，标准错误：{2}",
    "arguments": [
      "ret.getRetCode()",
      "ret.getStdout()",
      "ret.getStderr()"
    ],
    "line": 2322,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "node A update factory mode failed, details: %s",
    "en_US": "node A update factory mode failed, details: {0}",
    "zh_CN": "节点A更新工厂模式失败，详细信息：{0}",
    "arguments": [
      "errorOfNodeA.getCauses().get(0)"
    ],
    "line": 2686,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "all management node update factory mode failed, details: %s",
    "en_US": "all management node update factory mode failed, details: {0}",
    "zh_CN": "所有管理节点更新工厂模式失败，详细信息：{0}",
    "arguments": [
      "errorCodeList.getCauses().get(0)"
    ],
    "line": 2684,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "management node status is not %s",
    "en_US": "management node status is not {0}",
    "zh_CN": "管理节点状态不是{0}",
    "arguments": [
      "ManagementNodeState.RUNNING"
    ],
    "line": 2790,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "some node on factory mode exists, detail of arping: %s",
    "en_US": "some node on factory mode exists, detail of arping: {0}",
    "zh_CN": "工厂模式上的某些节点存在，ARPING的详细信息：{0}",
    "arguments": [
      "r.getStdout()"
    ],
    "line": 2720,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "set address on node A failed",
    "en_US": "set address on node A failed",
    "zh_CN": "在节点A上设置地址失败",
    "arguments": [],
    "line": 2741,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "this node is not node A",
    "en_US": "this node is not node A",
    "zh_CN": "此节点不是节点A",
    "arguments": [],
    "line": 2738,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "networkInboundBandwidth format error %s",
    "en_US": "networkInboundBandwidth format error {0}",
    "zh_CN": "下行网络带宽格式错误{0}",
    "arguments": [
      "bandwidth"
    ],
    "line": 2875,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "networkOutboundBandwidth format error %s",
    "en_US": "networkOutboundBandwidth format error {0}",
    "zh_CN": "上行网络带宽超格式错误{0}",
    "arguments": [
      "bandwidth"
    ],
    "line": 2887,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "networkOutboundBandwidth execeds the max value 32G bps",
    "en_US": "networkOutboundBandwidth execeds the max value 32G bps",
    "zh_CN": "超过上行网络带宽超过最大值32G bps",
    "arguments": [],
    "line": 2884,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "Shareable Volume[uuid:%s] has already been attached to VM[uuid:%s]",
    "en_US": "Shareable Volume[uuid:{0}] has already been attached to VM[uuid:{1}]",
    "zh_CN": "共享云盘[uuid:{0}]已经挂载到云主机[uuid:{1}]上",
    "arguments": [
      "volume.getUuid()",
      "vm.getUuid()"
    ],
    "line": 3060,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "shareable disk only support virtio-scsi type for now",
    "en_US": "shareable disk only support virtio-scsi type for now",
    "zh_CN": "目前共享盘只支持virtio-scsi",
    "arguments": [],
    "line": 3078,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "shareable volume(s)[uuid: %s] attached, not support to group snapshot.",
    "en_US": "shareable volume(s)[uuid: {0}] attached, not support to group snapshot.",
    "zh_CN": "可共享云盘[uuid：{0}]已连接，但不支持组快照。",
    "arguments": [
      "sharedVolUuids"
    ],
    "line": 3213,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoManagerImpl.java"
  },
  {
    "raw": "invalid volume qos mode: %s",
    "en_US": "invalid volume qos mode: {0}",
    "zh_CN": "无效的卷QoS模式：{0}",
    "arguments": [
      "msg.getMode()"
    ],
    "line": 1811,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Failed set iothread[%d] pin[%s] on vm[%s]: %s.",
    "en_US": "Failed set iothread[{0}] pin[{1}] on vm[{2}]: {3}.",
    "zh_CN": "无法在VM[{2}]上设置IOThread[{0}]Pin[{1}]：{3}。",
    "arguments": [
      "msg.getIoThreadId()",
      "msg.getPin()",
      "vm.getUuid()",
      "rsp.getError()"
    ],
    "line": 284,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not found in used snapshot tree of volume[uuid: %s]. Maybe no snapshot chain need to validate.",
    "en_US": "can not found in used snapshot tree of volume[uuid: {0}]. Maybe no snapshot chain need to validate.",
    "zh_CN": "在卷[uuid：{0}]的已使用快照树中找不到。可能不需要验证快照链。",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 339,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not found latest snapshot from tree[uuid: %s] of volume[uuid: %s]. Maybe no snapshot chain need to validate.",
    "en_US": "can not found latest snapshot from tree[uuid: {0}] of volume[uuid: {1}]. Maybe no snapshot chain need to validate.",
    "zh_CN": "从树[uuid：{0}]（属于卷[uuid：{1}]）中找不到最新快照。可能不需要验证快照链。",
    "arguments": [
      "currentTreeUuid",
      "msg.getUuid()"
    ],
    "line": 352,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not found snapshots from tree[uuid: %s] of volume[uuid: %s]. Maybe no snapshot chain need to validate.",
    "en_US": "can not found snapshots from tree[uuid: {0}] of volume[uuid: {1}]. Maybe no snapshot chain need to validate.",
    "zh_CN": "从树[uuid：{0}]（属于卷[uuid：{1}]）中找不到快照。可能不需要验证快照链。",
    "arguments": [
      "currentTreeUuid",
      "msg.getUuid()"
    ],
    "line": 368,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "How can a Running VM[uuid:%s] has no hostUuid?",
    "en_US": "How can a Running VM[uuid:{0}] has no hostUuid?",
    "zh_CN": "正在运行的VM[uuid：{0}]怎么会没有HOSTuuid？",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 678,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Unexpectedly, VM[uuid:%s] is not running any more, please try again later",
    "en_US": "Unexpectedly, VM[uuid:{0}] is not running any more, please try again later",
    "zh_CN": "意外的是，VM[uuid：{0}]不再运行，请稍后再试",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 676,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "after subtracting reserved capacity[%s], primary storage[%s] don\u0027t have required size[%s bytes], may be the threshold of primary storage physical capacity setting is lower",
    "en_US": "after subtracting reserved capacity[{0}], primary storage[{1}] don\u0027t have required size[{2} bytes], may be the threshold of primary storage physical capacity setting is lower",
    "zh_CN": "减去保留容量[{0}]后，主存储[{1}]没有所需的大小[{2}字节]，可能是主存储物理容量设置的阈值较低",
    "arguments": [
      "PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value()",
      "errorInfoMap.keySet()",
      "errorInfoMap.values()"
    ],
    "line": 842,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not take snapshot for volumes[%s] while volume[uuid: %s] not attached",
    "en_US": "can not take snapshot for volumes[{0}] while volume[uuid: {1}] not attached",
    "zh_CN": "当云盘[uuid:{1}]未加载时，无法给云盘[{0}]创建快照",
    "arguments": [
      "msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList())",
      "job.getVolumeUuid()"
    ],
    "line": 1231,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not take snapshot for volumes[%s] while volume[uuid: %s] appears twice",
    "en_US": "can not take snapshot for volumes[{0}] while volume[uuid: {1}] appears twice",
    "zh_CN": "当云盘[uuid:{1}]出现多次时，无法给云盘[{0}]创建快照",
    "arguments": [
      "msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList())",
      "job.getVolumeUuid()"
    ],
    "line": 1237,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "can not take snapshot for volumes[%s] attached multiple vms[%s, %s]",
    "en_US": "can not take snapshot for volumes[{0}] attached multiple vms[{1}, {2}]",
    "zh_CN": "当云盘[uuid:{1}]加载到多个云主机上时，无法给云盘[{0}]创建快照",
    "arguments": [
      "msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList())",
      "job.getVolumeUuid()",
      "volumeVOS.get(0).getVmInstanceUuid()"
    ],
    "line": 1244,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "no volumes found",
    "en_US": "no volumes found",
    "zh_CN": "找不到云盘",
    "arguments": [],
    "line": 1251,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "this snapshot recording the volume state before resize to %fG is created automatically",
    "en_US": "this snapshot recording the volume state before resize to {0}G is created automatically",
    "zh_CN": "该快照记录云盘扩容到{0}G之前的状态，由系统自动创建",
    "arguments": [
      "SizeUnit.BYTE.toGigaByte((double) resize)"
    ],
    "line": 1516,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "DeleteVolumeQos [%s] ignore because of account privilege.",
    "en_US": "DeleteVolumeQos [{0}] ignore because of account privilege.",
    "zh_CN": "DeleteVolumeQoS[{0}]由于帐户权限而忽略。",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1823,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Cannot delete vm\u0027s volume qos on host %s, because the current vm is in state of %s, but support expect states are [%s, %s]",
    "en_US": "Cannot delete vm\u0027s volume qos on host {0}, because the current vm is in state of {1}, but support expect states are [{2}, {3}]",
    "zh_CN": "无法在物理机{0}上删除VM的卷QoS，因为当前VM的状态为{1}，但支持的预期状态为[{2}，{3}]",
    "arguments": [
      "ivo.getHostUuid()",
      "ivo.getState()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Stopped.toString()"
    ],
    "line": 1891,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "non admin account cannot set bandwidth more than %s",
    "en_US": "non admin account cannot set bandwidth more than {0}",
    "zh_CN": "非管理员帐户无法设置大于{0}的带宽",
    "arguments": [
      "VolumeQos.getVolumeQosByMode(self.getVolumeQos(), mode)"
    ],
    "line": 2039,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "unknown message version.",
    "en_US": "unknown message version.",
    "zh_CN": "未知消息版本。",
    "arguments": [],
    "line": 2051,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "unknown qos limit type.",
    "en_US": "unknown qos limit type.",
    "zh_CN": "未知的QoS限制类型。",
    "arguments": [],
    "line": 2068,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Non-admin account is only allowed to set the total %s limit.",
    "en_US": "Non-admin account is only allowed to set the total {0} limit.",
    "zh_CN": "仅允许非管理员帐户设置总{0}限制。",
    "arguments": [
      "limitType"
    ],
    "line": 2082,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Non-admin account cannot set the total %s limits as unlimited.",
    "en_US": "Non-admin account cannot set the total {0} limits as unlimited.",
    "zh_CN": "非管理员帐户无法将总{0}限制设置为无限制。",
    "arguments": [
      "limitType.getType()"
    ],
    "line": 2091,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Non-admin account cannot set the total %s limit greater than: %s",
    "en_US": "Non-admin account cannot set the total {0} limit greater than: {1}",
    "zh_CN": "非管理员帐户无法将总{0}限制设置为大于：{1}",
    "arguments": [
      "limitType.getType()",
      "totalLimit"
    ],
    "line": 2095,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Non-admin account is only allowed to set the read/write %s limits.",
    "en_US": "Non-admin account is only allowed to set the read/write {0} limits.",
    "zh_CN": "仅允许非管理员帐户设置读/写{0}限制。",
    "arguments": [
      "limitType.getType()"
    ],
    "line": 2102,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Non-admin account cannot set the read %s limits as unlimited.",
    "en_US": "Non-admin account cannot set the read {0} limits as unlimited.",
    "zh_CN": "非管理员帐户无法将读取{0}限制设置为无限制。",
    "arguments": [
      "limitType.getType()"
    ],
    "line": 2108,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Non-admin account cannot set the write %s limits as unlimited.",
    "en_US": "Non-admin account cannot set the write {0} limits as unlimited.",
    "zh_CN": "非管理员帐户无法将写入{0}限制设置为无限制。",
    "arguments": [
      "limitType.getType()"
    ],
    "line": 2119,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "Non-admin account cannot set the read/write %s limits greater than: %s/%s",
    "en_US": "Non-admin account cannot set the read/write {0} limits greater than: {1}/{2}",
    "zh_CN": "非管理员帐户无法将读/写{0}限制设置为大于：{1}/{2}",
    "arguments": [
      "limitType.getType()",
      "readLimit",
      "writeLimit"
    ],
    "line": 2128,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "volume [%s] isn\u0027t attached to any vm, cannot get qos by forceSync",
    "en_US": "volume [{0}] isn\u0027t attached to any vm, cannot get qos by forceSync",
    "zh_CN": "卷[{0}]未连接到任何VM，无法通过ForceSync获得QoS",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2215,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "volume [%s] isn\u0027t attached to any vm (or vm is not existed now), cannot sync volume qos",
    "en_US": "volume [{0}] isn\u0027t attached to any vm (or vm is not existed now), cannot sync volume qos",
    "zh_CN": "卷[{0}]未连接到任何VM（或VM现在不存在），无法同步卷QoS",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 2221,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "vm [%s]\u0027 state must be Running or Paused to sync volume qos",
    "en_US": "vm [{0}]\u0027 state must be Running or Paused to sync volume qos",
    "zh_CN": "VM[{0}]状态必须为“正在运行”或“已暂停”才能同步卷QoS",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 2226,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "vm [%s]\u0027s HostUuid is null, cannot sync volume qos",
    "en_US": "vm [{0}]\u0027s HostUuid is null, cannot sync volume qos",
    "zh_CN": "VM[{0}]的HostUuid为空，无法同步卷QoS",
    "arguments": [],
    "line": 2231,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "failed to detach shareable volume[uuid:%s] from VmInstance[uuid:%s]",
    "en_US": "failed to detach shareable volume[uuid:{0}] from VmInstance[uuid:{1}]",
    "zh_CN": "不能卸载云主机[uuid:{1}]上的共享盘[uuid:{0}]",
    "arguments": [
      "msg.getVolume().getUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 2377,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "failed to detach shareable volume from VmInstance:[\\n%s]",
    "en_US": "failed to detach shareable volume from VmInstance because:[\\n{0}]",
    "zh_CN": "不能卸载云主机上的共享盘，原因是{0}",
    "arguments": [
      "StringUtils.join(errors, \"\\n\\n\")"
    ],
    "line": 2389,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeBase.java"
  },
  {
    "raw": "unsupported operation for setting root volume[%s] multiQueues.",
    "en_US": "unsupported operation for setting root volume[{0}] multiQueues.",
    "zh_CN": "不支持设置根卷[{0}]多队列的操作。",
    "arguments": [
      "resourceUuid"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java"
  },
  {
    "raw": "unsupported operation for setting virtio-scsi volume[%s] multiQueues.",
    "en_US": "unsupported operation for setting virtio-scsi volume[{0}] multiQueues.",
    "zh_CN": "不支持设置virtio-SCSI卷[{0}]多队列的操作。",
    "arguments": [
      "resourceUuid"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java"
  },
  {
    "raw": "ZStack has been paused, reject all API which are not read only. If you really want to call it and known the consequence, add \u0027%s\u0027 into systemTags.",
    "en_US": "ZStack has been paused, reject all API which are not read only. If you really want to call it and known the consequence, add \u0027{0}\u0027 into systemTags.",
    "zh_CN": "ZStack已暂停，拒绝所有非只读API。如果您确实想调用它并且知道结果，请将“{0}”添加到SystemTags中。",
    "arguments": [
      "MevocoSystemTags.CONFIRM_CALL_API.getTagFormat()"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/mevoco/PauseWorldApiInterceptor.java"
  },
  {
    "raw": "the current version of license does not support modifying this global config [name:%s]",
    "en_US": "the current version of license does not support modifying this global config [name:{0}]",
    "zh_CN": "当前license版本不支持修改此全局设置[name:{0}]",
    "arguments": [
      "getName()"
    ],
    "line": 27,
    "fileName": "src/main/java/org/zstack/mevoco/PremiumGlobalConfig.java"
  },
  {
    "raw": "the current version of license does not support modifying this resource config [name:%s]",
    "en_US": "the current version of license does not support modifying this resource config [name:{0}]",
    "zh_CN": "当前版本的许可证不支持修改此资源配置[名称：{0}]",
    "arguments": [
      "globalConfig.getName()"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/mevoco/PremiumResourceConfig.java"
  },
  {
    "raw": "cannot find mode from null VolumeQos",
    "en_US": "cannot find mode from null VolumeQos",
    "zh_CN": "无法从NULL卷中找到模式QoS",
    "arguments": [],
    "line": 331,
    "fileName": "src/main/java/org/zstack/mevoco/VolumeQos.java"
  },
  {
    "raw": "cannot find monitor trigger[uuid:%s], it may have been deleted",
    "en_US": "cannot find monitor trigger[uuid:{0}], it may have been deleted",
    "zh_CN": "不能找到触发监控器[uuid:{0}]，它可能已经被删除了",
    "arguments": [
      "msg.getMonitorTriggerUuid()"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "cannot find monitor trigger action[uuid:%s], it may have been deleted",
    "en_US": "cannot find monitor trigger action[uuid:{0}], it may have been deleted",
    "zh_CN": "为找到这个监控触发行为[uuid:{0}]，它可能已经被删除了",
    "arguments": [
      "msg.getMonitorTriggerActionUuid()"
    ],
    "line": 199,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "the resource[type:%s] doesn\u0027t have any monitoring items",
    "en_US": "the resource[type:{0}] doesn\u0027t have any monitoring items",
    "zh_CN": "该资源[type:{0}]没有任何监控条目",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "the resource[uuid:%s] doesn\u0027t belong to the account[uuid:%s]",
    "en_US": "the resource[uuid:{0}] doesn\u0027t belong to the account[uuid:{1}]",
    "zh_CN": "该资源[uuid:{0}]不属于账户[uuid:{1}]",
    "arguments": [
      "msg.getTargetResourceUuid()",
      "msg.getSession().getAccountUuid()"
    ],
    "line": 335,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "cannot find type for the resource[uuid:%s]",
    "en_US": "cannot find type for the resource[uuid:{0}]",
    "zh_CN": "未找到资源[uuid:{0}]这种类型",
    "arguments": [
      "resourceUuid"
    ],
    "line": 386,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "no monitoring item found for the resourceType[%s] and item[%s]",
    "en_US": "no monitoring item found for the resourceType[{0}] and item[{1}]",
    "zh_CN": "未找到资源类型[{0}]和条目[{1}]这种监控条目",
    "arguments": [
      "resourceType",
      "triggerExpression.getItem()"
    ],
    "line": 391,
    "fileName": "src/main/java/org/zstack/monitoring/MonitorManagerImpl.java"
  },
  {
    "raw": "A resource[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]\u0027s monitoring trigger[uuid:{triggerUuid}] changes status to {triggerStatus}",
    "en_US": "A resource[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]\u0027s monitoring trigger[uuid:{triggerUuid}] changes status to {triggerStatus}",
    "zh_CN": "资源[name:{resourceName}, uuid:{resourceUuid}, type:{resourceType}]的监听触发器[uuid:{triggerUuid}]修改状态为{triggerStatus}",
    "arguments": [
      "args"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\n\u003d\u003d\u003d BELOW ARE DETAILS OF THE PREVIOUS ALERT \u003d\u003d\u003d",
    "en_US": "\\n\u003d\u003d\u003d BELOW ARE DETAILS OF THE PREVIOUS ALERT \u003d\u003d\u003d",
    "zh_CN": "\\n\u003d\u003d\u003d 以下是上一次警告内容 \u003d\u003d\u003d",
    "arguments": [],
    "line": 55,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\nalert details:",
    "en_US": "\\nalert details:",
    "zh_CN": "\\n警告内容: ",
    "arguments": [],
    "line": 58,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\ncondition: {itemName} {operator} {threshold}",
    "en_US": "\\ncondition: {itemName} {operator} {threshold}",
    "zh_CN": "\\n环境: {itemName} {operator} {threshold}",
    "arguments": [
      "args"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "\\ncurrent value: {value}",
    "en_US": "\\ncurrent value: {value}",
    "zh_CN": "\\n当前值: {value}",
    "arguments": [
      "args"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/monitoring/items/AlertText.java"
  },
  {
    "raw": "Host CPU utilization",
    "en_US": "Host CPU utilization",
    "zh_CN": "CPU使用率",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java"
  },
  {
    "raw": "VM CPU utilization",
    "en_US": "VM CPU utilization",
    "zh_CN": "云主机CPU使用率",
    "arguments": [],
    "line": 29,
    "fileName": "src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java"
  },
  {
    "raw": "fail to create new File[%s]",
    "en_US": "fail to create new File[{0}]",
    "zh_CN": "无法创建新文件[{0}]",
    "arguments": [
      "ruleFile"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java"
  },
  {
    "raw": "conflict alert rule[%s], there has been a rule[%s] with the same name",
    "en_US": "conflict alert rule[{0}], there has been a rule[{1}] with the same name",
    "zh_CN": "冲突提示规则[{0}]，这里已经存在和它一样名称的规则",
    "arguments": [
      "rb.name",
      "r"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java"
  },
  {
    "raw": "ALERT:\\n resource[name: %s, uuid: %s, type: %s]\\nevent: %s %s %s\\ncurrent value: %s\\nduration: %s seconds\\n",
    "en_US": "ALERT:\\n resource[name: {0}, uuid: {1}, type: {2}]\\nevent: {3} {4} {5}\\ncurrent value: {6}\\nduration: {7} seconds\\n",
    "zh_CN": "警告:\\n 资源[名称: {0}, uuid: {1}, 类型: {2}]\\n 事件: {3} {4} {5}\\n 周期: {7}\\n",
    "arguments": [
      "resourceName",
      "resourceUuid",
      "toI18nString(resourceType)",
      "itemName",
      "toI18nString(expression.getOperator())",
      "expression.getConstant()",
      "value",
      "tvo.getDuration()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusAlert.java"
  },
  {
    "raw": "the relativeTime[%s] is invalid, it must be in format of, for example, 10s, 1h",
    "en_US": "the relativeTime[{0}] is invalid, it must be in format of, for example, 10s, 1h",
    "zh_CN": "相关时间[{0}]不合法,格式必须例如10s，1h",
    "arguments": [
      "msg.getRelativeTime()"
    ],
    "line": 40,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java"
  },
  {
    "raw": "the relativeTime[%s] is invalid, it\u0027s too big",
    "en_US": "the relativeTime[{0}] is invalid, it\u0027s too big",
    "zh_CN": "相关时间[{0}]不合法，值\u0027s 过大",
    "arguments": [
      "msg.getRelativeTime()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java"
  },
  {
    "raw": "CPU number",
    "en_US": "CPU number",
    "zh_CN": "CPU数量",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilAlertWriter.java"
  },
  {
    "raw": "invalid cpu[%s], the host[uuid:%s] doesn\u0027t have a CPU numbered by %s",
    "en_US": "invalid cpu[{0}], the host[uuid:{1}] doesn\u0027t have a CPU numbered by {2}",
    "zh_CN": "无效CPU数目[{0}]，物理机[uuid:{1}]存在的CPU数目是{2}",
    "arguments": [
      "cpu",
      "trigger.getTargetResourceUuid()",
      "cpuNum"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilItem.java"
  },
  {
    "raw": "Host Disk Capacity",
    "en_US": "Host Disk Capacity",
    "zh_CN": "物理机磁盘容量",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Host Disk Capacity type",
    "en_US": "Host Disk Capacity type",
    "zh_CN": "物理机磁盘容量类型",
    "arguments": [],
    "line": 98,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Host devices",
    "en_US": "Host devices",
    "zh_CN": "物理机服务",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java"
  },
  {
    "raw": "Host",
    "en_US": "Host",
    "zh_CN": "物理机",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusHostNetworkIOAlertWriter.java"
  },
  {
    "raw": "query failure, errorType:%s, error: %s",
    "en_US": "query failure, errorType:{0}, error: {1}",
    "zh_CN": "查询失败，错误类型: {0}, 错误: {1}",
    "arguments": [
      "ret.get(\"errorType\")",
      "ret.get(\"error\")"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusMonitorProviderFactory.java"
  },
  {
    "raw": "CPU Utilization",
    "en_US": "CPU Utilization",
    "zh_CN": "CPU使用率",
    "arguments": [],
    "line": 81,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java"
  },
  {
    "raw": "CPU utilization type",
    "en_US": "CPU utilization type",
    "zh_CN": "CPU使用类型",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java"
  },
  {
    "raw": "Disk IO",
    "en_US": "Disk IO",
    "zh_CN": "磁盘IO",
    "arguments": [],
    "line": 86,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java"
  },
  {
    "raw": "Disk IO direction",
    "en_US": "Disk IO direction",
    "zh_CN": "磁盘IO方向",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java"
  },
  {
    "raw": "Disk IO type",
    "en_US": "Disk IO type",
    "zh_CN": "磁盘IO类型",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java"
  },
  {
    "raw": "invalid type[%s], only %s are allowed",
    "en_US": "invalid type[{0}], only {1} are allowed",
    "zh_CN": "无效类型[{0}]，只有{1}被允许",
    "arguments": [
      "type",
      "ALLOWED_TYPES"
    ],
    "line": 19,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOItem.java"
  },
  {
    "raw": "Memory Utilization",
    "en_US": "Memory Utilization",
    "zh_CN": "内存使用率",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilAlertWriter.java"
  },
  {
    "raw": "invalid right value[%s], it must be a float or double number",
    "en_US": "invalid right value[{0}], it must be a float or double number",
    "zh_CN": "无效的参数值[{0}]，它必须是一个float或者double类型的数值",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "invalid right value[%s], it must be float or double number greater than zero and lesser than one",
    "en_US": "invalid right value[{0}], it must be float or double number greater than zero and lesser than one",
    "zh_CN": "无效参数值[{0}]，它必须是一个float或者double类型的大于0小于1的数值",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "invalid arguments %s, no argument is allowed",
    "en_US": "invalid arguments {0}, no argument is allowed",
    "zh_CN": "无效参数列表{0}，没有被参数被允许",
    "arguments": [
      "expression.getArguments().keySet()"
    ],
    "line": 47,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java"
  },
  {
    "raw": "Network IO",
    "en_US": "Network IO",
    "zh_CN": "网络IO",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java"
  },
  {
    "raw": "Network IO direction",
    "en_US": "Network IO direction",
    "zh_CN": "网络IO方向",
    "arguments": [],
    "line": 89,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java"
  },
  {
    "raw": "Virtual Machine",
    "en_US": "Virtual Machine",
    "zh_CN": "云主机器",
    "arguments": [],
    "line": 77,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java"
  },
  {
    "raw": "invalid right value[%s], it must be a number(int, long, float, double)",
    "en_US": "invalid right value[{0}], it must be a number(int, long, float, double)",
    "zh_CN": "无效参数值[{0}]，他应该是一个数字(int, long, float, double)",
    "arguments": [
      "expression.getConstant()"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java"
  },
  {
    "raw": "invalid direction[%s], only %s are allowed",
    "en_US": "invalid direction[{0}], only {1} are allowed",
    "zh_CN": "无效direction[{0}]，只有{1}被允许",
    "arguments": [
      "dir",
      "ALLOWED_DIRECTION"
    ],
    "line": 18,
    "fileName": "src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java"
  },
  {
    "raw": "invalid expression: %s, %s",
    "en_US": "invalid expression: {0}, {1}",
    "zh_CN": "无效的语句: {0}, {1}",
    "arguments": [
      "expr",
      "e.getMessage()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "invalid expression: %s, no expression found",
    "en_US": "invalid expression: {0}, no expression found",
    "zh_CN": "无效的语句: {0}，未找到该语句",
    "arguments": [
      "expr"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "missing parameter \u0027%s\u0027 in the expression",
    "en_US": "missing parameter \u0027{0}\u0027 in the expression",
    "zh_CN": "在语句中缺失参数{0}",
    "arguments": [
      "key"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "wrong type of parameter \u0027%s\u0027 in the expression, it must be type of %s, but got %s",
    "en_US": "wrong type of parameter \u0027{0}\u0027 in the expression, it must be type of {1}, but got {2}",
    "zh_CN": "在语句中{0}参数类型错误，它必须是{1}这种类型，但是获得的是{2}",
    "arguments": [
      "key",
      "clz",
      "value.getClass()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java"
  },
  {
    "raw": "The number[value:%s] is not a valid part number.",
    "en_US": "The number[value:{0}] is not a valid part number.",
    "zh_CN": "编号[值：{0}]不是有效的物料编号。",
    "arguments": [
      "partNum"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java"
  },
  {
    "raw": "The quantity exceeded. The device[uuid: %s] required se devices number exceeds a quantiry[value: %s].",
    "en_US": "The quantity exceeded. The device[uuid: {0}] required se devices number exceeds a quantiry[value: {1}].",
    "zh_CN": "数量超出。设备[uuid：{0}]所需的SE设备数量超过数量[值：{1}]。",
    "arguments": [
      "mttyDeviceUuid",
      "accu"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java"
  },
  {
    "raw": "failed to generate se devices, because:%s",
    "en_US": "failed to generate se devices, because:{0}",
    "zh_CN": "无法生成SE设备，因为：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java"
  },
  {
    "raw": "failed to ungenerate se devices, because:%s",
    "en_US": "failed to ungenerate se devices, because:{0}",
    "zh_CN": "无法取消生成SE设备，因为：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java"
  },
  {
    "raw": "mtty device[uuid:%s] is not virtualized into mdevs",
    "en_US": "mtty device[uuid:{0}] is not virtualized into mdevs",
    "zh_CN": "MTTY设备[uuid：{0}]未虚拟化为MDEV",
    "arguments": [
      "msg.getMttyDeviceUuid()"
    ],
    "line": 41,
    "fileName": "src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java"
  },
  {
    "raw": "mdev devices generated from mtty device[uuid:%s] still attached to vm",
    "en_US": "mdev devices generated from mtty device[uuid:{0}] still attached to vm",
    "zh_CN": "从MTTY设备[uuid：{0}]生成的MDEV设备仍连接到云主机",
    "arguments": [
      "msg.getMttyDeviceUuid()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java"
  },
  {
    "raw": "the host[uuid:%s] that mtty device[uuid:%s] in is not Connected",
    "en_US": "the host[uuid:{0}] that mtty device[uuid:{1}] in is not Connected",
    "zh_CN": "未连接MTTY设备[uuid：{1}]所在的物理机[uuid：{0}]",
    "arguments": [
      "mtty.getHostUuid()",
      "mtty.getUuid()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java"
  },
  {
    "raw": "mtty device[uuid:%s] cannot be virtualized into mdevs",
    "en_US": "mtty device[uuid:{0}] cannot be virtualized into mdevs",
    "zh_CN": "MTTY设备[uuid：{0}]无法虚拟化为MDEV",
    "arguments": [
      "msg.getMttyDeviceUuid()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java"
  },
  {
    "raw": "Rendezvous Point [%s] is not a unicast address",
    "en_US": "Rendezvous Point [{0}] is not a unicast address",
    "zh_CN": "组播聚合点地址[{0}]不是单播地址",
    "arguments": [
      "rpAddress"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "group address [%s] is not a multicast address",
    "en_US": "group address [{0}] is not a multicast address",
    "zh_CN": "地址 [{0}] 不是组播地址",
    "arguments": [
      "multicastGroup"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "rp address pair [%s: %s] already existed for multicast router [uuid:%s]",
    "en_US": "rp address pair [{0}: {1}] already existed for multicast router [uuid:{2}]",
    "zh_CN": "组播聚合点地址对[{0}: {1}]已经存在于组播路由器[uuid:{2}]的配置中",
    "arguments": [
      "msg.getRpAddress()",
      "msg.getGroupAddress()",
      "msg.getUuid()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "rp address tuple [%s : %s] is not existed for multicast router [uuid:%s]",
    "en_US": "rp address tuple [{0} : {1}] is not existed for multicast router [uuid:{2}]",
    "zh_CN": "组播聚合点地址对[{0}: {1}]不存于组播路由器[uuid:{2}]的配置中",
    "arguments": [
      "msg.getRpAddress()",
      "msg.getGroupAddress()",
      "msg.getUuid()"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java"
  },
  {
    "raw": "multicastRouter[uuid:%s] has not been attached to vpc router",
    "en_US": "multicastRouter[uuid:{0}] has not been attached to vpc router",
    "zh_CN": "组播路由器[uuid:{0}]没有关联到VPC路由器",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "multicast already enabled on vpc router uuid[:%s]",
    "en_US": "multicast already enabled on vpc router uuid[:{0}]",
    "zh_CN": "VPC路由器[uuid:{0}]的组播路功能已经打开",
    "arguments": [
      "msg.getVpcRouterVmUuid()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "vpc router for multicast router [uuid:%s] has been deleted",
    "en_US": "vpc router for multicast router [uuid:{0}] has been deleted",
    "zh_CN": "组播路由器[uuid:{0}]关联的VPC路由器已经被删除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 317,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "multicast router [uuid:%s] is not attached to Vpc Router",
    "en_US": "multicast router [uuid:{0}] is not attached to Vpc Router",
    "zh_CN": "组播路由器[uuid:{0}]没有关联到VPC路由器",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 760,
    "fileName": "src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java"
  },
  {
    "raw": "multicast router [uuid:%s] has been delete during enable multilcast on backend",
    "en_US": "multicast router [uuid:{0}] has been delete during enable multilcast on backend",
    "zh_CN": "组播路由器[uuid:{0}]已经被删除",
    "arguments": [
      "vrUuid"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/multicast/router/backend/MulticastRouterVyosBackendImpl.java"
  },
  {
    "raw": "nas file system [%s] is not existed yet",
    "en_US": "nas file system [{0}] is not existed yet",
    "zh_CN": "NAS文件系统[{0}]尚不存在",
    "arguments": [
      "msg.getNasFileSystemUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java"
  },
  {
    "raw": "cannot find nas factory for type: %s",
    "en_US": "cannot find nas factory for type: {0}",
    "zh_CN": "找不到类型为{0}的NAS工厂",
    "arguments": [
      "type"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java"
  },
  {
    "raw": "duplicate NasFileSystemFactory[%s, %s] for type[%s]",
    "en_US": "duplicate NasFileSystemFactory[{0}, {1}] for type[{2}]",
    "zh_CN": "类型[{2}]的NASFileSystemFactory[{0}，{1}]重复",
    "arguments": [
      "f.getClass().getSimpleName()",
      "old.getClass().getSimpleName()",
      "f.getNasFileSystemType()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java"
  },
  {
    "raw": "l2Network[uuid:%s] has attached to cluster[uuid:%s], can\u0027t attach again",
    "en_US": "l2Network[uuid:{0}] has attached to cluster[uuid:{1}], can\u0027t attach again",
    "zh_CN": "不能再次挂载二层网络[uuid:{0}]，因为已经挂载到集群[uuid:{1}]上了",
    "arguments": [
      "msg.getL2NetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "could not attach l2 network, because there is another network [uuid:%] on physical interface [%s] with different vswitch type",
    "en_US": "could not attach l2 network, because there is another network [uuid:%] on physical interface [{0}] with different vswitch type",
    "zh_CN": "无法连接二层网络，因为物理接口[{0}]上存在另一个具有不同vSwitch类型的网络[uuid：%]",
    "arguments": [
      "otherL2s.get(0)",
      "l2.getPhysicalInterface()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "l2Network[uuid:%s] has not attached to cluster[uuid:%s]",
    "en_US": "l2Network[uuid:{0}] has not attached to cluster[uuid:{1}]",
    "zh_CN": "二层网络[uuid:{0}]没有挂载到集群上[uuid:{1}]",
    "arguments": [
      "msg.getL2NetworkUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "unsupported l2Network type[%s]",
    "en_US": "unsupported l2Network type[{0}]",
    "zh_CN": "不支持的网络类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "unsupported vSwitch type[%s]",
    "en_US": "unsupported vSwitch type[{0}]",
    "zh_CN": "不支持的vSwitch类型[{0}]",
    "arguments": [
      "msg.getvSwitchType()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java"
  },
  {
    "raw": "There has been a L2VlanNetwork[uuid:%s, name:%s] attached to cluster[uuid:%s] that has physical interface[%s], vlan[%s]. Failed to attach L2VlanNetwork[uuid:%s]",
    "en_US": "There has been a L2VlanNetwork[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}], vlan[{4}]. Failed to attach L2VlanNetwork[uuid:{5}]",
    "zh_CN": "二层网络挂载失败[uuid:{5}]: 二层网络[uuid:{0}, name:{1}]的物理接口[{3}], vlan[{4}]已经挂载到集群[uuid:{2}]上",
    "arguments": [
      "vl2.getUuid()",
      "vl2.getName()",
      "msg.getClusterUuid()",
      "vl2.getPhysicalInterface()",
      "vl2.getVlan()",
      "tl2.getUuid()"
    ],
    "line": 626,
    "fileName": "src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java"
  },
  {
    "raw": "There has been a l2Network[uuid:%s, name:%s] attached to cluster[uuid:%s] that has physical interface[%s]. Failed to attach l2Network[uuid:%s]",
    "en_US": "There has been a l2Network[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}]. Failed to attach l2Network[uuid:{4}]",
    "zh_CN": "二层网络挂载失败[uuid:{4}]: 二层网络[uuid:{0}, name:{1}]的物理接口[{3}]]已经挂载到集群[uuid:{2}]上",
    "arguments": [
      "l2.getUuid()",
      "l2.getName()",
      "msg.getClusterUuid()",
      "l2.getPhysicalInterface()",
      "tl2.getUuid()"
    ],
    "line": 608,
    "fileName": "src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java"
  },
  {
    "raw": "could not create L2PortGroupNetwork, because L2VirtualSwitchNetwork[uuid:%s] already has L2PortGroupNetworks with the same vlanId[%s]",
    "en_US": "could not create L2PortGroupNetwork, because L2VirtualSwitchNetwork[uuid:{0}] already has L2PortGroupNetworks with the same vlanId[{1}]",
    "zh_CN": "创建端口组失败，因为虚拟交换机[uuid:{0}]已经存在vlanId[{1}]的端口组",
    "arguments": [
      "msg.getvSwitchUuid()",
      "msg.getVlan()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java"
  },
  {
    "raw": "could not attach L2VirtualSwitchNetwork, because interface[%s] in cluster[uuid:%s] is already used for another L2VirtualSwitchNetwork",
    "en_US": "could not attach L2VirtualSwitchNetwork, because interface[{0}] in cluster[uuid:{1}] is already used for another L2VirtualSwitchNetwork",
    "zh_CN": "挂载虚拟交换机失败，因为集群[uuid:{1}]中的网卡[{0}]已被其他虚拟交换机使用",
    "arguments": [
      "vswitchVO.getPhysicalInterface()",
      "msg.getClusterUuid()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java"
  },
  {
    "raw": "could not attach L2VirtualSwitchNetwork, because there are no hosts in cluster[uuid:%s]",
    "en_US": "could not attach L2VirtualSwitchNetwork, because there are no hosts in cluster[uuid:{0}]",
    "zh_CN": "挂载虚拟交换机失败，因为集群[uuid:{0}]中不存在任何物理机",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java"
  },
  {
    "raw": "could not attach L2VirtualSwitchNetwork, because interface[%s] should be created on host[uuid:%s]",
    "en_US": "could not attach L2VirtualSwitchNetwork, because interface[{0}] should be created on host[uuid:{1}]",
    "zh_CN": "挂载虚拟交换机失败，因为网卡[{0}]应当在物理机[uuid:{1}]上创建",
    "arguments": [
      "vswitchVO.getPhysicalInterface()",
      "hostUuid"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java"
  },
  {
    "raw": "cannot configure vxlan network for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为云主机[uuid:{0}]在目标物理机[uuid:{1}]上配置VXLAN网络",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java"
  },
  {
    "raw": "find multiple vtep ips[%s] for one host[uuid:%s], need to delete host and add again",
    "en_US": "find multiple vtep ips[{0}] for one host[uuid:{1}], need to delete host and add again",
    "zh_CN": "在一个物理机[uuid:{1}]发现多个VTEP IP，需要删除物理机在进行添加",
    "arguments": [
      "vtepIps",
      "hostUuid"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to find vtep on host[uuid: %s], please re-attach vxlanpool[uuid: %s] to cluster.",
    "en_US": "failed to find vtep on host[uuid: {0}], please re-attach vxlanpool[uuid: {1}] to cluster.",
    "zh_CN": "无法在物理机[uuid：{0}]上找到VTEP，请将vxlanpool[uuid：{1}]重新挂接到集群。",
    "arguments": [
      "hostUuid",
      "l2vxlan.getPoolUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to create bridge[%s] for l2Network[uuid:%s, type:%s, vni:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vni:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "为二层网络[uuid:{1}, type:{2}, vni:{3}]在KVM物理机[uuid:{4}]上创建网桥[{0}]失败，错误细节: {5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vxlan.getVni()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to check cidr[%s] for l2VxlanNetwork[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check cidr[{0}] for l2VxlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "为KVM物理机[uuid:{3}]上的L2 VXLAN 网络[uuid:{1}, name:{2}]检查CIDR[{0}]失败，错误细节: {4}",
    "arguments": [
      "cmd.getCidr()",
      "l2vxlan.getUuid()",
      "l2vxlan.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to delete bridge[%s] for l2Network[uuid:%s, type:%s, vni:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to delete bridge[{0}] for l2Network[uuid:{1}, type:{2}, vni:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "无法删除KVM物理机[uuid：{4}]上的二层网络[uuid：{1}，类型：{2}，VNI：{3}]的网桥[{0}]，因为{5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "l2vxlan.getVni()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 474,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java"
  },
  {
    "raw": "failed to realize vxlan network pool[uuid:%s, type:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to realize vxlan network pool[uuid:{0}, type:{1}] on kvm host[uuid:{2}], because {3}",
    "zh_CN": "无法在KVM物理机[uuid：{2}]上实现VXLAN网络池[uuid：{0}，类型：{1}]，因为{3}",
    "arguments": [
      "l2Network.getUuid()",
      "l2Network.getType()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 261,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java"
  },
  {
    "raw": "failed to check cidr[%s] for l2VxlanNetworkPool[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check cidr[{0}] for l2VxlanNetworkPool[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "检查在kvm物理机[uuid:{3}]上的l2VxlanNetworkPool[uuid:{1}, name:{2}]的CIDR[{0}]失败，{4}",
    "arguments": [
      "cmd.getCidr()",
      "vxlanPool.getUuid()",
      "vxlanPool.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java"
  },
  {
    "raw": "need to input one system tag like : [%s]",
    "en_US": "need to input one system tag like : [{0}]",
    "zh_CN": "需要输入一个系统标签，格式为：[{0}]",
    "arguments": [
      "VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()"
    ],
    "line": 37,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java"
  },
  {
    "raw": "wrong system tag [%s], should be like : [%s]",
    "en_US": "wrong system tag [{0}], should be like : [{1}]",
    "zh_CN": "错误的系统标签[{0}]，格式应该为：[{1}]",
    "arguments": [
      "tag",
      "VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java"
  },
  {
    "raw": "wrong cidr format in system tag [%s]",
    "en_US": "wrong cidr format in system tag [{0}]",
    "zh_CN": "系统标签[{0}]中的cidr格式错误",
    "arguments": [
      "tag"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java"
  },
  {
    "raw": "overlap vni range with %s [%s]",
    "en_US": "overlap vni range with {0} [{1}]",
    "zh_CN": "与{0}[{1}]的vni范围重叠",
    "arguments": [
      "inv.getType()",
      "overlappedPool"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java"
  },
  {
    "raw": "vxlan network pool doesn\u0027t support create l3 network",
    "en_US": "vxlan network pool doesn\u0027t support create l3 network",
    "zh_CN": "vxlan network pool不支持创建三层网络",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java"
  },
  {
    "raw": "vxlan vtep address for host [uuid : %s] and pool [uuid : %s] pair already existed",
    "en_US": "vxlan vtep address for host [uuid : {0}] and pool [uuid : {1}] pair already existed",
    "zh_CN": "物理机[uuid : {0}]在vxlan资源池[uuid : {1}]中隧道端点地址已经配置",
    "arguments": [
      "msg.getHostUuid()",
      "msg.getPoolUuid()"
    ],
    "line": 56,
    "fileName": "src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanPoolApiInterceptor.java"
  },
  {
    "raw": "it is used",
    "en_US": "it is used",
    "zh_CN": "被占用",
    "arguments": [],
    "line": 27,
    "fileName": "src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java"
  },
  {
    "raw": "it is not in this range",
    "en_US": "it is not in this range",
    "zh_CN": "不在IP地址范围内",
    "arguments": [],
    "line": 25,
    "fileName": "src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java"
  },
  {
    "raw": "it is gateway",
    "en_US": "it is gateway",
    "zh_CN": "网关不能分配",
    "arguments": [],
    "line": 23,
    "fileName": "src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java"
  },
  {
    "raw": "could not set mtu because l2 network[uuid:%s] of l3 network [uuid:%s] mtu can not be bigger than the novlan network",
    "en_US": "could not set mtu because l2 network[uuid:{0}] of l3 network [uuid:{1}] mtu can not be bigger than the novlan network",
    "zh_CN": "无法设置MTU，因为三层网络[uuid：{1}]MTU的二层网络[uuid：{0}]不能大于NoVLAN网络",
    "arguments": [
      "l2VO.getUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "can not delete the last normal ip range because there is still has address pool",
    "en_US": "can not delete the last normal ip range because there is still has address pool",
    "zh_CN": "无法删除最后一个正常IP范围，因为仍有地址池",
    "arguments": [],
    "line": 175,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "you must update system and category both",
    "en_US": "you must update system and category both",
    "zh_CN": "必须同时更行system属性和category属性",
    "arguments": [],
    "line": 190,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "not valid combination of system and category,only %s are valid",
    "en_US": "not valid combination of system and category,only {0} are valid",
    "zh_CN": "无效的system属性和category属性的组合，只有{0}是有效的",
    "arguments": [
      "L3NetworkCategory.validCombination"
    ],
    "line": 474,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "invalid IP[%s]",
    "en_US": "invalid IP[{0}]",
    "zh_CN": "错误的IP值[{0}]",
    "arguments": [
      "msg.getIp()"
    ],
    "line": 237,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "no ip range in l3[%s]",
    "en_US": "no ip range in l3[{0}]",
    "zh_CN": "没有IP在三层网络范围中",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip[%s] is not in the cidr of ip range[uuid:%s, cidr:%s] which l3 network[%s] attached",
    "en_US": "ip[{0}] is not in the cidr of ip range[uuid:{1}, cidr:{2}] which l3 network[{3}] attached",
    "zh_CN": "IP[{0}]没有在三层网络[{3}]的CIDR的IP范围内[uuid:{1}, cidr:{2}]",
    "arguments": [
      "msg.getRouterInterfaceIp()",
      "ipr.getUuid()",
      "ipr.getNetworkCidr()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip[%s] in ip range[uuid:%s, startIp:%s, endIp:%s] which l3 network[%s] attached, this is not allowed",
    "en_US": "ip[{0}] in ip range[uuid:{1}, startIp:{2}, endIp:{3}] which l3 network[{4}] attached, this is not allowed",
    "zh_CN": "IP[{0}]在三层网络[{4}]绑定的IP范围内[uuid:{1}, startIp:{2}, endIp:{3}]，这是不被允许的",
    "arguments": [
      "msg.getRouterInterfaceIp()",
      "ipr.getUuid()",
      "ipr.getStartIp()",
      "ipr.getEndIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.",
    "en_US": "ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.",
    "zh_CN": "IP段和L3的uuid不能都为空，您必须选择一个填上",
    "arguments": [],
    "line": 243,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "could not get free ip with start[ip:%s],because start[ip:%s] is not a correct ipv6 address",
    "en_US": "could not get free ip with start[ip:{0}],because start[ip:{1}] is not a correct ipv6 address",
    "zh_CN": "无法使用start[IP：{0}]获取可用IP，因为start[IP：{1}]不是正确的IPv6地址",
    "arguments": [
      "msg.getStart()",
      "msg.getStart()"
    ],
    "line": 276,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "could not get free ip with start[ip:%s],because start[ip:%s] is not a correct ipv4 address",
    "en_US": "could not get free ip with start[ip:{0}],because start[ip:{1}] is not a correct ipv4 address",
    "zh_CN": "无法使用start[IP：{0}]获取可用IP，因为start[IP：{1}]不是正确的IPv4地址",
    "arguments": [
      "msg.getStart()",
      "msg.getStart()"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "could not get free ip with start[ip:%s],because l3Network[uuid:%s] is dual stack",
    "en_US": "could not get free ip with start[ip:{0}],because l3Network[uuid:{1}] is dual stack",
    "zh_CN": "无法使用start[IP：{0}]获取可用IP，因为L3Network[uuid：{1}]是双堆栈",
    "arguments": [
      "msg.getStart()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid network cidr",
    "en_US": "{0} is not a valid network cidr",
    "zh_CN": "{0}不是有效的无类别域间路由",
    "arguments": [
      "msg.getNetworkCidr()"
    ],
    "line": 408,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid ipv6 address",
    "en_US": "{0} is not a valid ipv6 address",
    "zh_CN": "{0}不是有效的IPv6地址",
    "arguments": [
      "msg.getGateway()"
    ],
    "line": 304,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "[startIp %s, endIp %s, prefixLen %d, gateway %s] is not a valid ipv6 range",
    "en_US": "[startIp {0}, endIp {1}, prefixLen {2}, gateway {3}] is not a valid ipv6 range",
    "zh_CN": "IPv6地址段{0}-{1}/{2}, 网关{3}不是有效的IPv6地址段",
    "arguments": [
      "msg.getStartIp()",
      "msg.getEndIp()",
      "msg.getPrefixLen()",
      "msg.getGateway()"
    ],
    "line": 308,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "adding normal ip range must specify gateway ip address",
    "en_US": "adding normal ip range must specify gateway ip address",
    "zh_CN": "添加正常IP范围必须指定网关IP地址",
    "arguments": [],
    "line": 633,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "can not add ip range, because ipv6 address pool is not supported",
    "en_US": "can not add ip range, because ipv6 address pool is not supported",
    "zh_CN": "无法添加IP范围，因为不支持IPv6地址池",
    "arguments": [],
    "line": 324,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip range prefix length is out of range [%d - %d] ",
    "en_US": "ip range prefix length is out of range [{0} - {1}] ",
    "zh_CN": "IPv6地址前缀长度不在有效范围内[{0}-{1}]",
    "arguments": [
      "IPv6Constants.IPV6_PREFIX_LEN_MIN",
      "IPv6Constants.IPV6_PREFIX_LEN_MAX"
    ],
    "line": 335,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "can not add ip range, because system network doesn\u0027t support ipv6 yet",
    "en_US": "can not add ip range, because system network doesn\u0027t support ipv6 yet",
    "zh_CN": "无法添加IP范围，因为系统网络尚不支持IPv6",
    "arguments": [],
    "line": 342,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "addressMode[%s] is different from L3Netowork address mode[%s]",
    "en_US": "addressMode[{0}] is different from L3Netowork address mode[{1}]",
    "zh_CN": "地址模式[{0}]和三层网络的地址模式[{1}]不同",
    "arguments": [
      "ipr.getAddressMode()",
      "rangeVOS.get(0).getAddressMode()"
    ],
    "line": 348,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipv6 prefix length must be %d for Stateless-DHCP or SLAAC",
    "en_US": "ipv6 prefix length must be {0} for Stateless-DHCP or SLAAC",
    "zh_CN": "Stateless-DHCP or SLAAC地址模式IPv6网络前缀长度必须是{0}",
    "arguments": [
      "IPv6Constants.IPV6_STATELESS_PREFIX_LEN"
    ],
    "line": 354,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "new ip range [startip :%s, endip :%s] is overlaped with old ip range[startip :%s, endip :%s]",
    "en_US": "new ip range [startip :{0}, endip :{1}] is overlaped with old ip range[startip :{2}, endip :{3}]",
    "zh_CN": "新的IP地址段[{0}-{1}]和旧的IP地址段[{2}-{3}]冲突",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()",
      "r.getStartIp()",
      "r.getEndIp()"
    ],
    "line": 364,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "new network CIDR [%s] is different from old network cidr [%s]",
    "en_US": "new network CIDR [{0}] is different from old network cidr [{1}]",
    "zh_CN": "同一三层网络上不能加载多个CIDR。",
    "arguments": [
      "r.getNetworkCidr()",
      "ipr.getNetworkCidr()"
    ],
    "line": 374,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "new add ip range gateway %s is different from old gateway %s",
    "en_US": "new add ip range gateway {0} is different from old gateway {1}",
    "zh_CN": "新ip段的网关地址{0}和已有ip段的网关地址{1}冲突",
    "arguments": [
      "ipr.getGateway()",
      "r.getGateway()"
    ],
    "line": 618,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "gateway[%s] can not be part of range[%s, %s]",
    "en_US": "gateway[{0}] can not be part of range[{1}, {2}]",
    "zh_CN": "网关[{0}]不能是IP段[{1}, {2}]的一部分",
    "arguments": [
      "ipr.getGateway()",
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 611,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not an allowed network cidr, because it doesn\u0027t have usable ip range",
    "en_US": "{0} is not an allowed network cidr, because it doesn\u0027t have usable ip range",
    "zh_CN": "{0}是不允许的无类别域间路由，因为它不支持可用的IP段",
    "arguments": [
      "msg.getNetworkCidr()"
    ],
    "line": 401,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not the first or last address of the cidr %s",
    "en_US": "{0} is not the first or last address of the cidr {1}",
    "zh_CN": "{0}不是CIDR{1}的第一个或最后一个地址",
    "arguments": [
      "msg.getGateway()",
      "msg.getNetworkCidr()"
    ],
    "line": 405,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "ipRangeUuids, L3NetworkUuids, zoneUuids 至少一个不是为空列表，或者全部不为空",
    "arguments": [],
    "line": 432,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "unsupported l3network type[%s]",
    "en_US": "unsupported l3network type[{0}]",
    "zh_CN": "不支持的三层网络类型[{0}]",
    "arguments": [
      "msg.getType()"
    ],
    "line": 453,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "%s is not a valid domain name",
    "en_US": "{0} is not a valid domain name",
    "zh_CN": "{0}不是有效的域名",
    "arguments": [
      "msg.getDnsDomain()"
    ],
    "line": 459,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "overlap with ip range[uuid:%s, start ip:%s, end ip: %s]",
    "en_US": "overlap with ip range[uuid:{0}, start ip:{1}, end ip: {2}]",
    "zh_CN": "重叠的IP段[uuid:{0}, 起始ip:{1}, 尾ip: {2}]",
    "arguments": [
      "r.getUuid()",
      "r.getStartIp()",
      "r.getEndIp()"
    ],
    "line": 580,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "l3 network [uuid %s: name %s] is not a public network, address pool range can not be added",
    "en_US": "l3 network [uuid {0}: name {1}] is not a public network, address pool range can not be added",
    "zh_CN": "三层网络[uuid{0}：名称{1}]不是公用网络，无法添加地址池范围",
    "arguments": [
      "l3Vo.getUuid()",
      "l3Vo.getName()"
    ],
    "line": 523,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains D class addresses which are for multicast",
    "en_US": "the IP range[{0} ~ {1}] contains D class addresses which are for multicast",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了D类的组播地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 527,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains E class addresses which are reserved",
    "en_US": "the IP range[{0} ~ {1}] contains E class addresses which are reserved",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了E类的保留地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 531,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the IP range[%s ~ %s] contains link local addresses which are reserved",
    "en_US": "the IP range[{0} ~ {1}] contains link local addresses which are reserved",
    "zh_CN": "这个IP段[{0} ~ {1}]包含了本地的保留地址",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 535,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the gateway[%s] is not in the subnet %s/%s",
    "en_US": "the gateway[{0}] is not in the subnet {1}/{2}",
    "zh_CN": "网关[{0}]不在子网{1}/{2}",
    "arguments": [
      "ipr.getGateway()",
      "ipr.getStartIp()",
      "ipr.getNetmask()"
    ],
    "line": 541,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "ip allocation can not contain network address or broadcast address",
    "en_US": "ip allocation can not contain network address or broadcast address",
    "zh_CN": "ip 地址分配不能包含网络地址或广播的地址",
    "arguments": [],
    "line": 545,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "start ip[%s] is not a IPv4 address",
    "en_US": "start ip[{0}] is not a IPv4 address",
    "zh_CN": "开始的ip[{0}] 不是IPV4的地址",
    "arguments": [
      "ipr.getStartIp()"
    ],
    "line": 551,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "end ip[%s] is not a IPv4 address",
    "en_US": "end ip[{0}] is not a IPv4 address",
    "zh_CN": "结束的ip[{0}] 不是IPV4的地址",
    "arguments": [
      "ipr.getEndIp()"
    ],
    "line": 555,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "gateway[%s] is not a IPv4 address",
    "en_US": "gateway[{0}] is not a IPv4 address",
    "zh_CN": "网关[{0}]不是IPV4的地址",
    "arguments": [
      "ipr.getGateway()"
    ],
    "line": 559,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "netmask[%s] is not a netmask, and the IP range netmask cannot be 0.0.0.0",
    "en_US": "netmask[{0}] is not a netmask, and the IP range netmask cannot be 0.0.0.0",
    "zh_CN": "子网掩码[{0}]不是子网掩码，并且IP段的子网掩码不能是0.0.0.0",
    "arguments": [
      "ipr.getNetmask()"
    ],
    "line": 563,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "start ip[%s] is behind end ip[%s]",
    "en_US": "start ip[{0}] is behind end ip[{1}]",
    "zh_CN": "起始ip[{0}]在尾ip[{1}]后",
    "arguments": [
      "ipr.getStartIp()",
      "ipr.getEndIp()"
    ],
    "line": 569,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:%s, CIDR:%s], the new IP range[CIDR:%s] is not in the CIDR with the existing one",
    "en_US": "multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:{0}, CIDR:{1}], the new IP range[CIDR:{2}] is not in the CIDR with the existing one",
    "zh_CN": "在相同的三层网络上多个CIDR是不允许的，已有的IP范围 [uuid: {0}，CIDR: {1}]。新的IP范围 [CIDR: {2}] 不在现有的一个CIDR",
    "arguments": [
      "r.getUuid()",
      "rcidr",
      "cidr"
    ],
    "line": 596,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "the endip[%s] is not in the subnet %s/%s",
    "en_US": "the endip[{0}] is not in the subnet {1}/{2}",
    "zh_CN": "IP段结束地址不在子网{1}/{2}范围内",
    "arguments": [
      "ipr.getEndIp()",
      "ipr.getStartIp()",
      "ipr.getNetmask()"
    ],
    "line": 606,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "there has been a DNS[%s] on L3 network[uuid:%s]",
    "en_US": "there has been a DNS[{0}] on L3 network[uuid:{1}]",
    "zh_CN": "在三层网络[uuid:{1}]上已经存在一个DNS[{0}]",
    "arguments": [
      "msg.getDns()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 659,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "prefix [%s] is not a IPv4 network cidr",
    "en_US": "prefix [{0}] is not a IPv4 network cidr",
    "zh_CN": "网络段{0}不是合法的网络段",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 692,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "nexthop[%s] is not a IPv4 address",
    "en_US": "nexthop[{0}] is not a IPv4 address",
    "zh_CN": "下一跳{0}不是有效的IP地址",
    "arguments": [
      "msg.getNexthop()"
    ],
    "line": 679,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "there has been a hostroute for prefix[%s] on L3 network[uuid:%s]",
    "en_US": "there has been a hostroute for prefix[{0}] on L3 network[uuid:{1}]",
    "zh_CN": "三层网络{1}已配置物理机路由{0}",
    "arguments": [
      "msg.getPrefix()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 686,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "there is no hostroute for prefix[%s] on L3 network[uuid:%s]",
    "en_US": "there is no hostroute for prefix[{0}] on L3 network[uuid:{1}]",
    "zh_CN": "三层网络{1}没有物理机路由{0}",
    "arguments": [
      "msg.getPrefix()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 699,
    "fileName": "src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java"
  },
  {
    "raw": "apply gratuitous arp error, because:%s",
    "en_US": "apply gratuitous arp error, because:{0}",
    "zh_CN": "应用无故ARP错误，原因：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 286,
    "fileName": "src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java"
  },
  {
    "raw": "release gratuitous arp error, because:%s",
    "en_US": "release gratuitous arp error, because:{0}",
    "zh_CN": "释放无端的ARP错误，原因：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 329,
    "fileName": "src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java"
  },
  {
    "raw": "could no set vm nic security group, because vm nic[uuid:%s] not found",
    "en_US": "could no set vm nic security group, because vm nic[uuid:{0}] not found",
    "zh_CN": "无法设置VM NIC安全组，因为找不到VM NIC[uuid：{0}]",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 248,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because the vm nic[uuid:%s] not attached to any security group",
    "en_US": "could no set vm nic security group, because the vm nic[uuid:{0}] not attached to any security group",
    "zh_CN": "无法设置VM NIC安全组，因为VM NIC[uuid：{0}]未连接到任何安全组",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 254,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because security group[uuid:%s] not found",
    "en_US": "could no set vm nic security group, because security group[uuid:{0}] not found",
    "zh_CN": "无法设置VM NIC安全组，因为找不到安全组[uuid：{0}]",
    "arguments": [
      "ao.getSecurityGroupUuid()"
    ],
    "line": 261,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because invalid priority, priority[%d] cannot be less than 1",
    "en_US": "could no set vm nic security group, because invalid priority, priority[{0}] cannot be less than 1",
    "zh_CN": "无法设置VM NIC安全组，因为优先级无效，优先级[{0}]不能小于1",
    "arguments": [
      "priority"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because duplicate priority, both security group %s and %s have priority[%d]",
    "en_US": "could no set vm nic security group, because duplicate priority, both security group {0} and {1} have priority[{2}]",
    "zh_CN": "无法设置VM NIC安全组，因为优先级重复，安全组{0}和{1}都具有优先级[{2}]",
    "arguments": [
      "aoMap.get(priority)",
      "ao.getSecurityGroupUuid()",
      "priority"
    ],
    "line": 270,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because duplicate security group[uuid:%s]",
    "en_US": "could no set vm nic security group, because duplicate security group[uuid:{0}]",
    "zh_CN": "无法设置VM NIC安全组，因为安全组[uuid：{0}]重复",
    "arguments": [
      "ao.getSecurityGroupUuid()"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because invalid priority, priority expects to start at 1, but [%d]",
    "en_US": "could no set vm nic security group, because invalid priority, priority expects to start at 1, but [{0}]",
    "zh_CN": "无法设置VM NIC安全组，因为优先级无效，优先级应从1开始，但[{0}]",
    "arguments": [
      "priorities[0]"
    ],
    "line": 285,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because invalid priority, priority[%d] and priority[%d] expected to be consecutive",
    "en_US": "could no set vm nic security group, because invalid priority, priority[{0}] and priority[{1}] expected to be consecutive",
    "zh_CN": "无法设置VM NIC安全组，因为优先级无效，优先级[{0}]和优先级[{1}]应是连续的",
    "arguments": [
      "priorities[i]",
      "priorities[i + 1]"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security Group, because securityGroup[uuid:%s] is already attached on this nic by account[uuid:%s], current user does not have permission to delete",
    "en_US": "could no set vm nic security Group, because securityGroup[uuid:{0}] is already attached on this nic by account[uuid:{1}], current user does not have permission to delete",
    "zh_CN": "无法设置VM NIC安全组，因为SecurityGroup[uuid：{0}]已由帐户[uuid：{1}]附加在此NIC上，当前用户没有删除权限",
    "arguments": [
      "ref.getSecurityGroupUuid()",
      "sgOwnerAccountUuid"
    ],
    "line": 301,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because ruleUuids is empty",
    "en_US": "could no change security group rule state, because ruleUuids is empty",
    "zh_CN": "无法更改安全组规则状态，因为RuleUIds为空",
    "arguments": [],
    "line": 310,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because security group[uuid:%s] not found",
    "en_US": "could no change security group rule state, because security group[uuid:{0}] not found",
    "zh_CN": "无法更改安全组规则状态，因为找不到安全组[uuid：{0}]",
    "arguments": [
      "msg.getSecurityGroupUuid()"
    ],
    "line": 314,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because security group rule[uuid:%s] not found",
    "en_US": "could no change security group rule state, because security group rule[uuid:{0}] not found",
    "zh_CN": "无法更改安全组规则状态，因为找不到安全组规则[uuid：{0}]",
    "arguments": [
      "r"
    ],
    "line": 322,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because no security group rule state need to change",
    "en_US": "could no change security group rule state, because no security group rule state need to change",
    "zh_CN": "无法更改安全组规则状态，因为无需更改安全组规则状态",
    "arguments": [],
    "line": 331,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because ingress policy and egress policy cannot be both null",
    "en_US": "could no change vm nic security policy, because ingress policy and egress policy cannot be both null",
    "zh_CN": "无法更改VM NIC安全策略，因为入口策略和出口策略不能同时为空",
    "arguments": [],
    "line": 339,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because invalid ingress policy[%s]",
    "en_US": "could no change vm nic security policy, because invalid ingress policy[{0}]",
    "zh_CN": "无法更改VM NIC安全策略，因为入口策略[{0}]无效",
    "arguments": [
      "msg.getIngressPolicy()"
    ],
    "line": 342,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because invalid egress policy[%s]",
    "en_US": "could no change vm nic security policy, because invalid egress policy[{0}]",
    "zh_CN": "无法更改VM NIC安全策略，因为出口策略[{0}]无效",
    "arguments": [
      "msg.getEgressPolicy()"
    ],
    "line": 346,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because vm nic[uuid:%s] not found",
    "en_US": "could no change vm nic security policy, because vm nic[uuid:{0}] not found",
    "zh_CN": "无法更改VM NIC安全策略，因为找不到VM NIC[uuid：{0}]",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 350,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because vm nic[uuid:%s] has no security policy",
    "en_US": "could no change vm nic security policy, because vm nic[uuid:{0}] has no security policy",
    "zh_CN": "无法更改VM NIC安全策略，因为VM NIC[uuid：{0}]没有安全策略",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 355,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because invalid type[%s]",
    "en_US": "could not update security group rule priority, because invalid type[{0}]",
    "zh_CN": "无法更新安全组规则优先级，因为类型[{0}]无效",
    "arguments": [
      "msg.getType()"
    ],
    "line": 369,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because security group[uuid:%s] is not exist",
    "en_US": "could not update security group rule priority, because security group[uuid:{0}] is not exist",
    "zh_CN": "无法更新安全组规则优先级，因为安全组[uuid：{0}]不存在",
    "arguments": [
      "msg.getSecurityGroupUuid()"
    ],
    "line": 374,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rules is empty",
    "en_US": "could not update security group rule priority, because rules is empty",
    "zh_CN": "无法更新安全组规则优先级，因为规则为空",
    "arguments": [],
    "line": 378,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because security group[uuid:%s] rules size not match",
    "en_US": "could not update security group rule priority, because security group[uuid:{0}] rules size not match",
    "zh_CN": "无法更新安全组规则优先级，因为安全组[uuid：{0}]规则大小不匹配",
    "arguments": [
      "msg.getSecurityGroupUuid()"
    ],
    "line": 388,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rule priority[%d] is invalid",
    "en_US": "could not update security group rule priority, because rule priority[{0}] is invalid",
    "zh_CN": "无法更新安全组规则优先级，因为规则优先级[{0}]无效",
    "arguments": [
      "ao.getPriority()"
    ],
    "line": 393,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because priority[%d] has duplicate",
    "en_US": "could not update security group rule priority, because priority[{0}] has duplicate",
    "zh_CN": "无法更新安全组规则优先级，因为优先级[{0}]重复",
    "arguments": [
      "ao.getPriority()"
    ],
    "line": 396,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rule[uuid:%s] not in security group[uuid:%s]",
    "en_US": "could not update security group rule priority, because rule[uuid:{0}] not in security group[uuid:{1}]",
    "zh_CN": "无法更新安全组规则优先级，因为规则[uuid：{0}]不在安全组[uuid：{1}]中",
    "arguments": [
      "ao.getRuleUuid()",
      "msg.getSecurityGroupUuid()"
    ],
    "line": 402,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because priority[%d] not in security group[uuid:%s]",
    "en_US": "could not update security group rule priority, because priority[{0}] not in security group[uuid:{1}]",
    "zh_CN": "无法更新安全组规则优先级，因为优先级[{0}]不在安全组[uuid：{1}]中",
    "arguments": [
      "ao.getPriority()",
      "msg.getSecurityGroupUuid()"
    ],
    "line": 405,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rule uuid duplicate",
    "en_US": "could not update security group rule priority, because rule uuid duplicate",
    "zh_CN": "无法更新安全组规则优先级，因为规则uuid重复",
    "arguments": [],
    "line": 410,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule uuid[%s] is not exist",
    "en_US": "could not change security group rule, because security group rule uuid[{0}] is not exist",
    "zh_CN": "无法更改安全组规则，因为安全组规则uuid[{0}]不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 417,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] is default rule, only the description and status can be set",
    "en_US": "could not change security group rule, because security group rule[{0}] is default rule, only the description and status can be set",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]是默认规则，只能设置描述和状态",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 423,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] priority cannot be set to default rule priority[%d]",
    "en_US": "could not change security group rule, because security group rule[{0}] priority cannot be set to default rule priority[{1}]",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]优先级无法设置为默认规则优先级[{1}]",
    "arguments": [
      "msg.getUuid()",
      "SecurityGroupConstant.DEFAULT_RULE_PRIORITY"
    ],
    "line": 429,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group %s rules number[%d] is out of max limit[%d]",
    "en_US": "could not change security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]",
    "zh_CN": "无法更改安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]",
    "arguments": [
      "vo.getType()",
      "count.intValue()",
      "SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)"
    ],
    "line": 438,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because the maximum priority of %s rule is [%d]",
    "en_US": "could not change security group rule, because the maximum priority of {0} rule is [{1}]",
    "zh_CN": "无法更改安全组规则，因为{0}规则的最高优先级为[{1}]",
    "arguments": [
      "vo.getType().toString()",
      "count.intValue()"
    ],
    "line": 441,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because invalid state[%s]",
    "en_US": "could not change security group rule, because invalid state[{0}]",
    "zh_CN": "无法更改安全组规则，因为状态[{0}]无效",
    "arguments": [
      "msg.getState()"
    ],
    "line": 450,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because invalid action[%s]",
    "en_US": "could not change security group rule, because invalid action[{0}]",
    "zh_CN": "无法更改安全组规则，因为操作[{0}]无效",
    "arguments": [
      "msg.getAction()"
    ],
    "line": 458,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because invalid protocol[%s]",
    "en_US": "could not change security group rule, because invalid protocol[{0}]",
    "zh_CN": "无法更改安全组规则，因为协议[{0}]无效",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 466,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] type is Egress, srcIpRange[%s] cannot be set",
    "en_US": "could not change security group rule, because security group rule[{0}] type is Egress, srcIpRange[{1}] cannot be set",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]类型为出口，无法设置SrcIPRange[{1}]",
    "arguments": [
      "msg.getUuid()",
      "msg.getSrcIpRange()"
    ],
    "line": 498,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] type is Ingress, dstIpRange[%s] cannot be set",
    "en_US": "could not change security group rule, because security group rule[{0}] type is Ingress, dstIpRange[{1}] cannot be set",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]类型为入口，无法设置DSTIPRange[{1}]",
    "arguments": [
      "msg.getUuid()",
      "msg.getDstIpRange()"
    ],
    "line": 495,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because srcIpRange[%s] is set, remoteSecurityGroupUuid[%s] must be empty",
    "en_US": "could not change security group rule, because srcIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty",
    "zh_CN": "无法更改安全组规则，因为已设置SrcIPRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空",
    "arguments": [
      "msg.getSrcIpRange()",
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 488,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because dstIpRange[%s] is set, remoteSecurityGroupUuid[%s] must be empty",
    "en_US": "could not change security group rule, because dstIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty",
    "zh_CN": "无法更改安全组规则，因为已设置DSTIPRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空",
    "arguments": [
      "msg.getDstIpRange()",
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 501,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because remote security group[uuid:%s] not found",
    "en_US": "could not change security group rule, because remote security group[uuid:{0}] not found",
    "zh_CN": "无法更改安全组规则，因为找不到远程安全组[uuid：{0}]",
    "arguments": [
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 508,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because remote security group[uuid:%s] is set, srcIpRange and dstIpRange must be empty",
    "en_US": "could not change security group rule, because remote security group[uuid:{0}] is set, srcIpRange and dstIpRange must be empty",
    "zh_CN": "无法更改安全组规则，因为已设置远程安全组[uuid：{0}]，SrcIPRange和DstIPRange必须为空",
    "arguments": [
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 511,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule protocol is [%s], dstPortRange must be set",
    "en_US": "could not change security group rule, because rule protocol is [{0}], dstPortRange must be set",
    "zh_CN": "无法更改安全组规则，因为规则协议为[{0}]，必须设置DSTPortRange",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 564,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule protocol is [%s], dstPortRange cannot be empty",
    "en_US": "could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be empty",
    "zh_CN": "无法更改安全组规则，因为规则协议为[{0}]，DstPortRange不能为空",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 556,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule protocol is [%s], dstPortRange cannot be set",
    "en_US": "could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be set",
    "zh_CN": "无法更改安全组规则，因为规则协议为[{0}]，无法设置目标映射",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 551,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule[%s] is duplicated to rule[uuid:%s] in datebase",
    "en_US": "could not change security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase",
    "zh_CN": "无法更改安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复",
    "arguments": [
      "JSONObjectUtil.toJsonString(sao)",
      "o.getUuid()"
    ],
    "line": 595,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "security group[uuid:%s] has not attached to l3Network[uuid:%s], can\u0027t detach",
    "en_US": "security group[uuid:{0}] has not attached to l3Network[uuid:{1}], can\u0027t detach",
    "zh_CN": "不能卸载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为还未挂载",
    "arguments": [
      "msg.getSecurityGroupUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 721,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "can\u0027t delete rules of different security group",
    "en_US": "can\u0027t delete rules of different security group",
    "zh_CN": "无法删除不同安全组的规则",
    "arguments": [],
    "line": 757,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "can\u0027t delete default rule[uuid:%s]",
    "en_US": "can\u0027t delete default rule[uuid:{0}]",
    "zh_CN": "无法删除默认规则[uuid：{0}]",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 760,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "security group[uuid:%s] has attached to l3Network[uuid:%s], can\u0027t attach again",
    "en_US": "security group[uuid:{0}] has attached to l3Network[uuid:{1}], can\u0027t attach again",
    "zh_CN": "不能再次挂载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为已经挂载了",
    "arguments": [
      "msg.getSecurityGroupUuid()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 780,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid:%s] doesn\u0027t have the network service type[%s] enabled",
    "en_US": "the L3 network[uuid:{0}] doesn\u0027t have the network service type[{1}] enabled",
    "zh_CN": "三层网络[uuid:{0}]没有开启[{1}]类型的网络服务",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE"
    ],
    "line": 788,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "VM nics[uuids:%s] are not on L3 networks that have been attached to the security group[uuid:%s]",
    "en_US": "VM nics[uuids:{0}] are not on L3 networks that have been attached to the security group[uuid:{1}]",
    "zh_CN": "云主机网卡[uuids:{0}]不在安全组[uuid:{1}]挂载的三层网络上",
    "arguments": [
      "wrongUuids",
      "securityGroupUuid"
    ],
    "line": 850,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because security group[uuid:%s] does not exist",
    "en_US": "could not add security group rule, because security group[uuid:{0}] does not exist",
    "zh_CN": "无法添加安全组规则，因为安全组[uuid：{0}]不存在",
    "arguments": [
      "uuid"
    ],
    "line": 886,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the rules cannot be empty or exceed the max number %d",
    "en_US": "could not add security group rule, because the rules cannot be empty or exceed the max number {0}",
    "zh_CN": "无法添加安全组规则，因为规则不能为空或超过最大数量{0}",
    "arguments": [
      "SecurityGroupConstant.ONE_API_RULES_MAX_NUM"
    ],
    "line": 875,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because duplicate uuid in remoteSecurityGroupUuids: %s",
    "en_US": "could not add security group rule, because duplicate uuid in remoteSecurityGroupUuids: {0}",
    "zh_CN": "无法添加安全组规则，因为RemoteSecurityGroupuuid中存在重复的uuid：{0}",
    "arguments": [
      "msg.getRemoteSecurityGroupUuids()"
    ],
    "line": 880,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the remote security group uuid is conflict",
    "en_US": "could not add security group rule, because the remote security group uuid is conflict",
    "zh_CN": "无法添加安全组规则，因为远程安全组uuid冲突",
    "arguments": [],
    "line": 891,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because rule priority must greater than %d or equals %d",
    "en_US": "could not add security group rule, because rule priority must greater than {0} or equals {1}",
    "zh_CN": "无法添加安全组规则，因为规则优先级必须大于{0}或等于{1}",
    "arguments": [
      "SecurityGroupConstant.DEFAULT_RULE_PRIORITY",
      "SecurityGroupConstant.LOWEST_RULE_PRIORITY"
    ],
    "line": 927,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule type[%s], valid types are %s",
    "en_US": "could not add security group rule, because invalid rule type[{0}], valid types are {1}",
    "zh_CN": "无法添加安全组规则，因为规则类型[{0}]无效，有效类型为{1}",
    "arguments": [
      "ao.getType()",
      "SecurityGroupRuleType.getAllType()"
    ],
    "line": 935,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule state[%s], valid states are %s",
    "en_US": "could not add security group rule, because invalid rule state[{0}], valid states are {1}",
    "zh_CN": "无法添加安全组规则，因为规则状态[{0}]无效，有效状态为{1}",
    "arguments": [
      "ao.getState()",
      "SecurityGroupRuleState.getAllState()"
    ],
    "line": 942,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule protocol[%s], valid protocols are %s",
    "en_US": "could not add security group rule, because invalid rule protocol[{0}], valid protocols are {1}",
    "zh_CN": "无法添加安全组规则，因为规则协议[{0}]无效，有效协议为{1}",
    "arguments": [
      "ao.getProtocol()",
      "SecurityGroupRuleProtocolType.getAllProtocol()"
    ],
    "line": 947,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule action[%s], valid actions are %s",
    "en_US": "could not add security group rule, because invalid rule action[{0}], valid actions are {1}",
    "zh_CN": "无法添加安全组规则，因为规则操作[{0}]无效，有效操作为{1}",
    "arguments": [
      "ao.getAction()",
      "SecurityGroupRuleAction.getAllAction()"
    ],
    "line": 954,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule ipVersion[%d], valid ipVersions are %d/%d",
    "en_US": "could not add security group rule, because invalid rule ipVersion[{0}], valid ipVersions are {1}/{2}",
    "zh_CN": "无法添加安全组规则，因为规则IPVersion[{0}]无效，有效的IPVersion为{1}/{2}",
    "arguments": [
      "ao.getIpVersion()",
      "IPv6Constants.IPv4",
      "IPv6Constants.IPv6"
    ],
    "line": 962,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the dstIpRange[%s] is not allowed to set for ingress rule",
    "en_US": "could not add security group rule, because the dstIpRange[{0}] is not allowed to set for ingress rule",
    "zh_CN": "无法添加安全组规则，因为不允许为入口规则设置DSTIPRange[{0}]",
    "arguments": [
      "ao.getDstIpRange()"
    ],
    "line": 990,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the allowedCidr[%s] and srcIpRange[%s] are in conflict",
    "en_US": "could not add security group rule, because the allowedCidr[{0}] and srcIpRange[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为allowedcidr[{0}]和srciprange[{1}]冲突",
    "arguments": [
      "ao.getAllowedCidr()",
      "ao.getSrcIpRange()"
    ],
    "line": 995,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the ip range[%s] and remoteSecurityGroupUuid[%s] are in conflict",
    "en_US": "could not add security group rule, because the ip range[{0}] and remoteSecurityGroupUuid[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为IP范围[{0}]和RemoteSecurityGroupuuid[{1}]冲突",
    "arguments": [
      "ao.getDstIpRange()",
      "ao.getRemoteSecurityGroupUuid()"
    ],
    "line": 984,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the srcIpRange[%s] is not allowed to set for egress rule",
    "en_US": "could not add security group rule, because the srcIpRange[{0}] is not allowed to set for egress rule",
    "zh_CN": "无法添加安全组规则，因为不允许为出口规则设置SrcIPRange[{0}]",
    "arguments": [
      "ao.getSrcIpRange()"
    ],
    "line": 972,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the allowedCidr[%s] and dstIpRange[%s] are in conflict",
    "en_US": "could not add security group rule, because the allowedCidr[{0}] and dstIpRange[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为AllowedCidr[{0}]和DSTIPRange[{1}]冲突",
    "arguments": [
      "ao.getAllowedCidr()",
      "ao.getDstIpRange()"
    ],
    "line": 977,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule endPort[%d], endPort must be greater than or equal to startPort[%d]",
    "en_US": "could not add security group rule, because invalid rule endPort[{0}], endPort must be greater than or equal to startPort[{1}]",
    "zh_CN": "无法添加安全组规则，因为规则endPort[{0}]无效，endPort必须大于或等于startPort[{1}]",
    "arguments": [
      "ao.getEndPort()",
      "ao.getStartPort()"
    ],
    "line": 1026,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because dstPortRange[%s] and starPort[%s] are in conflict",
    "en_US": "could not add security group rule, because dstPortRange[{0}] and starPort[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为DstPortRange[{0}]和StarPort[{1}]冲突",
    "arguments": [
      "ao.getDstPortRange()",
      "ao.getStartPort()"
    ],
    "line": 1029,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the protocol type TCP/UDP must set dstPortRange",
    "en_US": "could not add security group rule, because the protocol type TCP/UDP must set dstPortRange",
    "zh_CN": "无法添加安全组规则，因为协议类型TCP/UDP必须设置DSTPortRange",
    "arguments": [],
    "line": 1040,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the protocol type ALL or ICMP cant not set dstPortRange[%s]",
    "en_US": "could not add security group rule, because the protocol type ALL or ICMP cant not set dstPortRange[{0}]",
    "zh_CN": "无法添加安全组规则，因为协议类型ALL或ICMP无法设置DstPortRange[{0}]",
    "arguments": [
      "ao.getDstPortRange()"
    ],
    "line": 1018,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the protocol type ALL or ICMP cant not set startPort or endPort",
    "en_US": "could not add security group rule, because the protocol type ALL or ICMP cant not set startPort or endPort",
    "zh_CN": "无法添加安全组规则，因为协议类型ALL或ICMP无法设置StartPort或EndPort",
    "arguments": [],
    "line": 1021,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because rule[%s] and rule[%s] are dupilicated",
    "en_US": "could not add security group rule, because rule[{0}] and rule[{1}] are dupilicated",
    "zh_CN": "无法添加安全组规则，因为规则[{0}]和规则[{1}]重复",
    "arguments": [
      "JSONObjectUtil.toJsonString(newRules.get(i))",
      "JSONObjectUtil.toJsonString(newRules.get(j))"
    ],
    "line": 1050,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because rule[%s] is duplicated to rule[uuid:%s] in datebase",
    "en_US": "could not add security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase",
    "zh_CN": "无法添加安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复",
    "arguments": [
      "JSONObjectUtil.toJsonString(sao)",
      "vo.getUuid()"
    ],
    "line": 1074,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because security group %s rules has reached the maximum limit[%d]",
    "en_US": "could not add security group rule, because security group {0} rules has reached the maximum limit[{1}]",
    "zh_CN": "无法添加安全组规则，因为安全组{0}规则已达到最大限制[{1}]",
    "arguments": [
      "SecurityGroupRuleType.Egress",
      "SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)"
    ],
    "line": 1089,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because security group %s rules number[%d] is out of max limit[%d]",
    "en_US": "could not add security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]",
    "zh_CN": "无法添加安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]",
    "arguments": [
      "SecurityGroupRuleType.Egress",
      "(egressRuleCount + toCreateEgressRuleCount)",
      "SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)"
    ],
    "line": 1097,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because priority[%d] must be consecutive, the ingress rule maximum priority is [%d]",
    "en_US": "could not add security group rule, because priority[{0}] must be consecutive, the ingress rule maximum priority is [{1}]",
    "zh_CN": "无法添加安全组规则，因为优先级[{0}]必须连续，入口规则最大优先级为[{1}]",
    "arguments": [
      "msg.getPriority()",
      "ingressRuleCount"
    ],
    "line": 1101,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because priority[%d] must be consecutive, the egress rule maximum priority is [%d]",
    "en_US": "could not add security group rule, because priority[{0}] must be consecutive, the egress rule maximum priority is [{1}]",
    "zh_CN": "无法添加安全组规则，因为优先级[{0}]必须是连续的，出口规则最大优先级为[{1}]",
    "arguments": [
      "msg.getPriority()",
      "egressRuleCount"
    ],
    "line": 1104,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "vm nic[uuid:%s] has been attach to security group[uuid:%s]",
    "en_US": "vm nic[uuid:{0}] has been attach to security group[uuid:{1}]",
    "zh_CN": "VM NIC[uuid：{0}]已连接到安全组[uuid：{1}]",
    "arguments": [
      "ref.getVmNicUuid()",
      "msg.getSecurityGroupUuid()"
    ],
    "line": 1908,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java"
  },
  {
    "raw": "the netwotk service[type:%s] not enabled on the l3Network[uuid:%s] of nic[uuid:%s]",
    "en_US": "the netwotk service[type:{0}] not enabled on the l3Network[uuid:{1}] of nic[uuid:{2}]",
    "zh_CN": "网络服务[类型：{0}]未在NIC[uuid：{2}]的L3网络[uuid：{1}]上启用",
    "arguments": [
      "SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE",
      "nic.getL3NetworkUuid()",
      "nic.getUuid()"
    ],
    "line": 1917,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java"
  },
  {
    "raw": "the netwotk service[type:%s] not enabled on the l3Network[uuid:%s]",
    "en_US": "the netwotk service[type:{0}] not enabled on the l3Network[uuid:{1}]",
    "zh_CN": "未在L3网络[uuid：{1}]上启用网络服务[类型：{0}]",
    "arguments": [
      "SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE",
      "l3Uuid"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java"
  },
  {
    "raw": "failed to chenge rule[uuid:%s] priority, beacuse it\u0027s not found",
    "en_US": "failed to chenge rule[uuid:{0}] priority, beacuse it\u0027s not found",
    "zh_CN": "无法更改规则[uuid：{0}]的优先级，因为找不到该优先级",
    "arguments": [
      "ao.getRuleUuid()"
    ],
    "line": 1051,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java"
  },
  {
    "raw": "L3Network [uuid: %s] provide type null",
    "en_US": "L3Network [uuid: {0}] provide type null",
    "zh_CN": "三层网络{0}后端为空",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/network/service/HostRouteExtension.java"
  },
  {
    "raw": "L3Network [uuid: %s] does not have host route service",
    "en_US": "L3Network [uuid: {0}] does not have host route service",
    "zh_CN": "三层网络{0}没有物理机路由功能",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/network/service/HostRouteExtension.java"
  },
  {
    "raw": "networkServices cannot be empty",
    "en_US": "networkServices cannot be empty",
    "zh_CN": "网络服务(networkServices)不能为空",
    "arguments": [],
    "line": 107,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "network service for provider[uuid:%s] must be specified",
    "en_US": "network service for provider[uuid:{0}] must be specified",
    "zh_CN": "服务提供器[uuid:{0}]的网络服务必须被指定",
    "arguments": [
      "puuid"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "cannot find network service provider[uuid:%s] or it provides no services",
    "en_US": "cannot find network service provider[uuid:{0}] or it provides no services",
    "zh_CN": "无法找到网络服务提供器[uuid:{0}]或它没有提供任何服务",
    "arguments": [
      "puuid"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "network service provider[uuid:%s] doesn\u0027t provide services%s",
    "en_US": "network service provider[uuid:{0}] doesn\u0027t provide services{1}",
    "zh_CN": "网络服务提供器[uuid:{0}]无法提供服务{1}",
    "arguments": [
      "puuid",
      "notSupported"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "there has been a network service[%s] attached to L3 network[uuid:%s]",
    "en_US": "there has been a network service[{0}] attached to L3 network[uuid:{1}]",
    "zh_CN": "已经有一个网络服务[{0}]被挂载到三层网络[uuid:{1}]",
    "arguments": [
      "type",
      "msg.getL3NetworkUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java"
  },
  {
    "raw": "L3Network[uuid:%s] doesn\u0027t have network service[type:%s] enabled or no provider provides this network service",
    "en_US": "L3Network[uuid:{0}] doesn\u0027t have network service[type:{1}] enabled or no provider provides this network service",
    "zh_CN": "三层网络[uuid:{0}]上没有网络服务[type:{1}]被启用或没有服务提供器提供该网络服务",
    "arguments": [
      "l3NetworkUuid",
      "serviceType"
    ],
    "line": 332,
    "fileName": "src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java"
  },
  {
    "raw": "vmNic[uuid:%s] is not attached to vmInstance, cannot get attachable eips",
    "en_US": "vmNic[uuid:{0}] is not attached to vmInstance, cannot get attachable eips",
    "zh_CN": "vmnic[uuid：{0}]未连接到VMInstance，无法获取可连接的EIP",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "either eipUuid or vipUuid must be set",
    "en_US": "either eipUuid or vipUuid must be set",
    "zh_CN": "eipUuid或vipUuid必须有一个被指定",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] is not in state of Enabled, cannot get attachable vm nic",
    "en_US": "eip[uuid:{0}] is not in state of Enabled, cannot get attachable vm nic",
    "zh_CN": "eip[uuid:{0}]没有被启用，无法获取可挂载的云主机网卡",
    "arguments": [
      "msg.getEipUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "ip [uuid:%s] is attached to vm nic [%s]",
    "en_US": "ip [uuid:{0}] is attached to vm nic [{1}]",
    "zh_CN": "IP地址[uuid:{0}]已经绑定到网卡[{1}]",
    "arguments": [
      "guestIpUuid",
      "vmNicUuid"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] has attached to another vm nic[uuid:%s], can\u0027t attach again",
    "en_US": "eip[uuid:{0}] has attached to another vm nic[uuid:{1}], can\u0027t attach again",
    "zh_CN": "eip[uuid:{0}]已经被挂载到另外一台云主机网卡[uuid:{1}]，无法再次挂载",
    "arguments": [
      "msg.getEipUuid()",
      "vmNicUuid"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid: %s] can only be attached when state is %s, current state is %s",
    "en_US": "eip[uuid: {0}] can only be attached when state is {1}, current state is {2}",
    "zh_CN": "eip[uuid:{0}]只有在状态(state)为{1}的情况下可以被挂载，当前状态是{2}",
    "arguments": [
      "msg.getEipUuid()",
      "EipState.Enabled",
      "state"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of EIP[uuid:%s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of EIP[uuid:{1}] are the same network",
    "zh_CN": "云主机网卡[uuid:{0}]的客户三层网络，和EIP[uuid:{1}]的虚拟ip 三层网络是同一个网络",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getEipUuid()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "Ip address [uuid:%s] is not belonged to nic [uuid:%s]",
    "en_US": "Ip address [uuid:{0}] is not belonged to nic [uuid:{1}]",
    "zh_CN": "IP地址[uuid:{0}]没有绑定到网卡[uuid:{1}]",
    "arguments": [
      "msg.getEipUuid()",
      "msg.getVmNicUuid()"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip[uuid:%s] has not attached to any vm nic",
    "en_US": "eip[uuid:{0}] has not attached to any vm nic",
    "zh_CN": "eip[uuid:{0}]还没有被挂载到任意云主机网卡",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip ipVersion [%d] is different from guestIp ipVersion [%d].",
    "en_US": "vip ipVersion [{0}] is different from guestIp ipVersion [{1}].",
    "zh_CN": "虚拟IP的协议号[{0}]和网卡的IP协议号[{1}]不同",
    "arguments": [
      "vipIp.getIpVersion()",
      "guestIp.getIpVersion()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "Vip[%s] is in the guest ip range [%s, %s]",
    "en_US": "Vip[{0}] is in the guest ip range [{1}, {2}]",
    "zh_CN": "虚拟IP[{0}]和网卡的IP不能在相同地址段[{1}-{2}]",
    "arguments": [
      "vipIp.getIp()",
      "guestRange.getStartIp()",
      "guestRange.getEndIp()"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] that the EIP is about to attach is already on the public network[uuid:%s] from which the vip[uuid:%s, name:%s, ip:%s] comes",
    "en_US": "the vm[uuid:{0}] that the EIP is about to attach is already on the public network[uuid:{1}] from which the vip[uuid:{2}, name:{3}, ip:{4}] comes",
    "zh_CN": "EIP将要挂载到的云主机[uuid:{0}]已经处于公共网络[uuid:{1}]上，该网络上已有vip[uuid:{2}, name:{3}, ip:{4}]",
    "arguments": [
      "vmUuid",
      "vip.getL3NetworkUuid()",
      "vip.getUuid()",
      "vip.getName()",
      "vip.getIp()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip[uuid:%s] has been occupied other network service entity[%s]",
    "en_US": "vip[uuid:{0}] has been occupied other network service entity[{1}]",
    "zh_CN": "vip[uuid:{0}]已经被其他网络服务实体[{1}]占用",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 277,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip can not be created on system vip",
    "en_US": "eip can not be created on system vip",
    "zh_CN": "无法在系统VIP上创建EIP",
    "arguments": [],
    "line": 282,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vip[uuid:%s] is not in state[%s], current state is %s",
    "en_US": "vip[uuid:{0}] is not in state[{1}], current state is {2}",
    "zh_CN": "vip[uuid:{0}]不处于状态[{1}]中，当前状态[{2}]",
    "arguments": [
      "msg.getVipUuid()",
      "VipState.Enabled",
      "vip.getState()"
    ],
    "line": 286,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vm state[%s] is not allowed to operate eip, maybe you should wait the vm process complete",
    "en_US": "vm state[{0}] is not allowed to operate eip, maybe you should wait the vm process complete",
    "zh_CN": "云主机状态[{0}]不允许进行弹性IP操作，你可能需要等待云主机操作完成",
    "arguments": [
      "state.toString()"
    ],
    "line": 323,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "vmNic uuid[%s] is not allowed add eip, because vmNic exist portForwarding with allowedCidr rule",
    "en_US": "vmNic uuid[{0}] is not allowed add eip, because vmNic exist portForwarding with allowedCidr rule",
    "zh_CN": "不允许vmnic uuid[{0}]添加EIP，因为vmnic存在具有AllowedCIDR规则的端口转发",
    "arguments": [
      "vmNicUuid"
    ],
    "line": 337,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java"
  },
  {
    "raw": "eip [uuid:%s] is deleted",
    "en_US": "eip [uuid:{0}] is deleted",
    "zh_CN": "已删除EIP[uuid：{0}]",
    "arguments": [
      "struct.getEip().getUuid()"
    ],
    "line": 1463,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipManagerImpl.java"
  },
  {
    "raw": "cannot find Eip guest ip: %s in vmNic ips :%s",
    "en_US": "cannot find Eip guest ip: {0} in vmNic ips :{1}",
    "zh_CN": "在vmnic IP{1}中找不到EIP来宾IP{0}",
    "arguments": [
      "eip.getGuestIp()",
      "nicIps"
    ],
    "line": 1316,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipManagerImpl.java"
  },
  {
    "raw": "unable to attach the L3 network[uuid:%s, name:%s] to the vm[uuid:%s, name:%s], because the L3 network is providing EIP to one of the vm\u0027s nic",
    "en_US": "unable to attach the L3 network[uuid:{0}, name:{1}] to the vm[uuid:{2}, name:{3}], because the L3 network is providing EIP to one of the vm\u0027s nic",
    "zh_CN": "无法将三层网络[uuid:{0}, name:{1}]挂载到云主机[uuid:{2}, name:{3}]，因为三层网络正在为云主机上的一块网卡提供EIP",
    "arguments": [
      "l3.getUuid()",
      "l3.getName()",
      "vm.getUuid()",
      "vm.getName()"
    ],
    "line": 1622,
    "fileName": "src/main/java/org/zstack/network/service/eip/EipManagerImpl.java"
  },
  {
    "raw": "could not get dhcp4 server ip for l3 network [uuid:%s]",
    "en_US": "could not get dhcp4 server ip for l3 network [uuid:{0}]",
    "zh_CN": "无法获取三层网络[uuid：{0}]的DHCP4服务器IP",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/network/service/flat/DhcpApply.java"
  },
  {
    "raw": "could not get dhcp6 server ip for l3 network [uuid:%s]",
    "en_US": "could not get dhcp6 server ip for l3 network [uuid:{0}]",
    "zh_CN": "无法获取三层网络[uuid：{0}]的DHCP6服务器IP",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/network/service/flat/DhcpApply.java"
  },
  {
    "raw": "Session/account uuid is not valid.",
    "en_US": "Session/account uuid is not valid.",
    "zh_CN": "会话/帐户uuid无效。",
    "arguments": [],
    "line": 39,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java"
  },
  {
    "raw": "the account[uuid:%s] has no access to the resource[uuid:%s, type:L3NetworkVO]",
    "en_US": "the account[uuid:{0}] has no access to the resource[uuid:{1}, type:L3NetworkVO]",
    "zh_CN": "帐户[uuid：{0}]无权访问资源[uuid：{1}，类型：L3NetworkVO]",
    "arguments": [
      "accountUuid",
      "msg.getL3NetworkUuid()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java"
  },
  {
    "raw": "l3 network uuid cannot be null",
    "en_US": "l3 network uuid cannot be null",
    "zh_CN": "三层网络的uuid不能为空",
    "arguments": [],
    "line": 647,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "Cannot find DhcpIp for l3 network[uuid:%s]",
    "en_US": "Cannot find DhcpIp for l3 network[uuid:{0}]",
    "zh_CN": "无法为三层网络[uuid:{0}]找到DHCP IP",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 654,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "cannot configure DHCP for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure DHCP for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为目标物理机[uuid:{1}]上的云主机[uuid:{0}]配置DHCP",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 998,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "minimum ip range prefix length of flat network is %d",
    "en_US": "minimum ip range prefix length of flat network is {0}",
    "zh_CN": "三层网络的最小IP范围前缀长度为{0}",
    "arguments": [
      "IPv6Constants.IPV6_PREFIX_LEN_MIN_DNSMASQ"
    ],
    "line": 1751,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is not a IPv6 address",
    "en_US": "DHCP server ip [{0}] is not a IPv6 address",
    "zh_CN": "DHCP服务器地址[{0}]不是一个正确的IPv6地址",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1780,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is not in the cidr [%s]",
    "en_US": "DHCP server ip [{0}] is not in the cidr [{1}]",
    "zh_CN": "DHCP服务器地址[{0}]不在网络段[{1}]的范围内",
    "arguments": [
      "dhcpServerIp",
      "inv.getNetworkCidr()"
    ],
    "line": 1776,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is not a IPv4 address",
    "en_US": "DHCP server ip [{0}] is not a IPv4 address",
    "zh_CN": "DHCP服务器地址[{0}]不是一个正确的IPv4地址",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1772,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] is already existed in l3 network [%s]",
    "en_US": "DHCP server ip [{0}] is already existed in l3 network [{1}]",
    "zh_CN": "三层网络[{1}]已经配置了DHCP服务器地址[{0}]",
    "arguments": [
      "entry.getKey()",
      "inv.getL3NetworkUuid()"
    ],
    "line": 1791,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] can not be equaled to gateway ip",
    "en_US": "DHCP server ip [{0}] can not be equaled to gateway ip",
    "zh_CN": "DHCP服务器地址[{0}]不能等于网关地址",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1796,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "DHCP server ip [%s] can not be configured to system l3",
    "en_US": "DHCP server ip [{0}] can not be configured to system l3",
    "zh_CN": "系统网络不能配置DHCP服务器地址[{0}]",
    "arguments": [
      "dhcpServerIp"
    ],
    "line": 1802,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java"
  },
  {
    "raw": "could not attach eip because ipv6 eip can ONLY be attached to flat network",
    "en_US": "could not attach eip because ipv6 eip can ONLY be attached to flat network",
    "zh_CN": "无法附加EIP，因为IPv6 EIP只能附加到三层网络",
    "arguments": [],
    "line": 80,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java"
  },
  {
    "raw": "L2Network where vip\u0027s L3Network based hasn\u0027t attached the cluster where vmNic[uuid:%s] located",
    "en_US": "L2Network where vip\u0027s L3Network based hasn\u0027t attached the cluster where vmNic[uuid:{0}] located",
    "zh_CN": "基于虚拟IP三层网络的二层网络没有绑定到云主机网卡所在的集群",
    "arguments": [
      "vmNicUuid"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java"
  },
  {
    "raw": "can not bound more than 1 %s eip to a vm nic[uuid:%s] of flat ",
    "en_US": "can not bound more than 1 {0} eip to a vm nic[uuid:{1}] of flat ",
    "zh_CN": "无法将1个以上的{0}EIP绑定到平面的VM NIC[uuid：{1}]",
    "arguments": [
      "version",
      "vmNicUuid"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java"
  },
  {
    "raw": "unable to apply the EIP operation for the the vm[uuid:%s, state:%s], because cannot find the VM\u0027s hostUUid",
    "en_US": "unable to apply the EIP operation for the the vm[uuid:{0}, state:{1}], because cannot find the VM\u0027s hostUUid",
    "zh_CN": "无法为云主机[uuid:{0}, state:{1}]应用EIP操作，因为无法找到该云主机的物理机uuid(hostUuid)",
    "arguments": [
      "vmUuid",
      "vm.getState()"
    ],
    "line": 614,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatEipBackend.java"
  },
  {
    "raw": "host[uuid:%s] is not connected",
    "en_US": "host[uuid:{0}] is not connected",
    "zh_CN": "物理机[uuid:{0}]未连接",
    "arguments": [
      "struct.getHostUuid()"
    ],
    "line": 374,
    "fileName": "src/main/java/org/zstack/network/service/flat/FlatUserdataBackend.java"
  },
  {
    "raw": "Invalid rule expression, the detail: %s",
    "en_US": "Invalid rule expression, the detail: {0}",
    "zh_CN": "规则表达式无效，详细信息：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not get candidate vmnic, because both load balancer uuid and server group uuid are not specified",
    "en_US": "could not get candidate vmnic, because both load balancer uuid and server group uuid are not specified",
    "zh_CN": "无法获取候选vmnic，因为未指定负载平衡器uuid和服务器组uuid",
    "arguments": [],
    "line": 180,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not get candidate l3 network, because both load balancer uuid and server group uuid are not specified",
    "en_US": "could not get candidate l3 network, because both load balancer uuid and server group uuid are not specified",
    "zh_CN": "无法获取候选三层网络，因为未指定负载平衡器uuid和服务器组uuid",
    "arguments": [],
    "line": 198,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not detach vm nic to load balancer listener[uuid:%s], because default server group for listener has been deleted",
    "en_US": "could not detach vm nic to load balancer listener[uuid:{0}], because default server group for listener has been deleted",
    "zh_CN": "无法将VM NIC与负载平衡器侦听器[uuid：{0}]分离，因为已删除侦听器的默认服务器组",
    "arguments": [
      "msg.getListenerUuid()"
    ],
    "line": 222,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "Load balancer VIP [%s] cannot be the first or the last IP of the CIDR with the public address pool type",
    "en_US": "Load balancer VIP [{0}] cannot be the first or the last IP of the CIDR with the public address pool type",
    "zh_CN": "负载平衡器VIP[{0}]不能是具有公共地址池类型的CIDR的第一个或最后一个IP",
    "arguments": [
      "vipVO.getIp()"
    ],
    "line": 251,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "operation failure, not support the ip version %d",
    "en_US": "operation failure, not support the ip version {0}",
    "zh_CN": "操作失败，不支持IPv{0}",
    "arguments": [
      "ipVer"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "operation failure, duplicate/overlap ip entry in %s of accesscontrol list group:%s",
    "en_US": "operation failure, duplicate/overlap ip entry in {0} of accesscontrol list group:{1}",
    "zh_CN": "操作失败，在访问控制组：{1}中有重复/重叠ip{0}",
    "arguments": [
      "ips",
      "acl.getUuid()"
    ],
    "line": 288,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "operation failure, ip format only supports ip/iprange/cidr, but find %s",
    "en_US": "operation failure, ip format only supports ip/iprange/cidr, but find {0}",
    "zh_CN": "操作失败，只支持IP地址/IP段/IP网络格式的参数，不支持{0}",
    "arguments": [
      "ips"
    ],
    "line": 295,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "ip range[%s, %s] is overlap with start ip:%s, end ip: %s of access-control-list group:%s",
    "en_US": "ip range[{0}, {1}] is overlap with start ip:{2}, end ip: {3} of access-control-list group:{4}",
    "zh_CN": "ip段[{0}, {1}]和访问控制列表组：{4}中的ip段[{2},{3}]重叠",
    "arguments": [
      "startIp",
      "endIp",
      "NetworkUtils.longToIpv4String(r.lowerEndpoint())",
      "NetworkUtils.longToIpv4String(r.upperEndpoint())",
      "acl.getUuid()"
    ],
    "line": 299,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t attach the type access-control-list group[%s] whose ip version is different with LoadBalancer[%s]",
    "en_US": "Can\u0027t attach the type access-control-list group[{0}] whose ip version is different with LoadBalancer[{1}]",
    "zh_CN": "负载均衡器[{1}]不能添加IP版本不一致的访问控制列表组[{0}]",
    "arguments": [
      "aclUuids",
      "lbUuid"
    ],
    "line": 321,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "domian[%s], url[%s] duplicate/overlap redirect rule with access-control-list group:%s",
    "en_US": "domian[{0}], url[{1}] duplicate/overlap redirect rule with access-control-list group:{2}",
    "zh_CN": "域[{0}]，URL[{1}]与访问控制列表组{2}重复/重叠重定向规则",
    "arguments": [
      "aclEntry.getDomain()",
      "aclEntry.getUrl()",
      "acl.getUuid()"
    ],
    "line": 396,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "access-control-list groups[uuid:%s] use to %s, but there some access-control-list not has ip entry but redirect rule",
    "en_US": "access-control-list groups[uuid:{0}] use to {1}, but there some access-control-list not has ip entry but redirect rule",
    "zh_CN": "访问控制列表组[uuid：{0}]用于{1}，但某些访问控制列表没有IP条目，但有重定向规则",
    "arguments": [
      "msg.getAclType()",
      "msg.getAclUuids()"
    ],
    "line": 506,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the access-control-list groups[uuid:%s] are already on the load balancer listener[uuid:%s]",
    "en_US": "the access-control-list groups[uuid:{0}] are already on the load balancer listener[uuid:{1}]",
    "zh_CN": "负载均衡监听器[uuid:{1}]已经添加了访问控制列表组[uuid:{0}]",
    "arguments": [
      "existingAcls",
      "msg.getListenerUuid()"
    ],
    "line": 515,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the load balancer listener[uuid:%s] just only attach the %s type access-control-list group",
    "en_US": "the load balancer listener[uuid:{0}] just only attach the {1} type access-control-list group",
    "zh_CN": "负载均衡监听器[uuid:{0}]只能以{1}方式添加访问控制列表组",
    "arguments": [
      "msg.getListenerUuid()",
      "type.toString()"
    ],
    "line": 521,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the load balancer listener[uuid:%s] can\u0027t  attach more than %d access-control-list groups",
    "en_US": "the load balancer listener[uuid:{0}] can\u0027t  attach more than {1} access-control-list groups",
    "zh_CN": "负载均衡监听器[uuid:{0}]最多只能添加{1}个访问控制列表组",
    "arguments": [
      "msg.getListenerUuid()",
      "LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)"
    ],
    "line": 526,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "access-control-list groups[uuid:%s] use to redirect, but there some access-control-list not has redirect rule but ip entry",
    "en_US": "access-control-list groups[uuid:{0}] use to redirect, but there some access-control-list not has redirect rule but ip entry",
    "zh_CN": "Access-Control-List组[uuid：{0}]用于重定向，但某些Access-Control-List没有重定向规则，只有IP条目",
    "arguments": [
      "msg.getAclUuids()"
    ],
    "line": 414,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "redirect access-control-list groups[uuid:%s] cannot only attach to load balancer listener, must assign server group",
    "en_US": "redirect access-control-list groups[uuid:{0}] cannot only attach to load balancer listener, must assign server group",
    "zh_CN": "重定向访问控制列表组[uuid：{0}]不能仅连接到负载平衡器侦听器，必须分配服务器组",
    "arguments": [
      "msg.getAclUuids()"
    ],
    "line": 419,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "access-control-list groups[uuid:%s] attach to load balancer listener[uuid:%s] not https or http",
    "en_US": "access-control-list groups[uuid:{0}] attach to load balancer listener[uuid:{1}] not https or http",
    "zh_CN": "访问控制列表组[uuid：{0}]连接到负载平衡器侦听器[uuid：{1}]而不是HTTPS或HTTP",
    "arguments": [
      "msg.getAclUuids()",
      "msg.getListenerUuid()"
    ],
    "line": 424,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "server group[%s] not attach to load balancer listener[%s]",
    "en_US": "server group[{0}] not attach to load balancer listener[{1}]",
    "zh_CN": "服务器组[{0}]未连接到负载平衡器侦听器[{1}]",
    "arguments": [
      "msg.getServerGroupUuids()",
      "msg.getListenerUuid()"
    ],
    "line": 547,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "access-control-list groups[uuid:%s] has no redirect rule",
    "en_US": "access-control-list groups[uuid:{0}] has no redirect rule",
    "zh_CN": "访问控制列表组[uuid：{0}]没有重定向规则",
    "arguments": [
      "msg.getAclUuids()"
    ],
    "line": 443,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "access-control-list groups[uuid:%s] has attach to another load balancer listener[uuid:%s]",
    "en_US": "access-control-list groups[uuid:{0}] has attach to another load balancer listener[uuid:{1}]",
    "zh_CN": "访问控制列表组[uuid：{0}]已连接到另一个负载平衡器侦听器[uuid：{1}]",
    "arguments": [
      "msg.getAclUuids()",
      "msg.getListenerUuid()"
    ],
    "line": 456,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the load balancer listener[uuid:%s] can\u0027t  attach more than %d redirect rule access-control-list groups",
    "en_US": "the load balancer listener[uuid:{0}] can\u0027t  attach more than {1} redirect rule access-control-list groups",
    "zh_CN": "负载平衡器侦听器[uuid：{0}]无法附加{1}个以上的重定向规则访问控制列表组",
    "arguments": [
      "msg.getListenerUuid()",
      "LoadBalancerGlobalConfig.ACL_REDIRECT_MAX_COUNT.value(Long.class)"
    ],
    "line": 468,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "load balancer listener [uuid:%s] had redirect rule of access-control-list groups[uuid:%s]",
    "en_US": "load balancer listener [uuid:{0}] had redirect rule of access-control-list groups[uuid:{1}]",
    "zh_CN": "负载平衡器侦听器[uuid：{0}]具有访问控制列表组的重定向规则[uuid：{1}]",
    "arguments": [
      "msg.getListenerUuid()",
      "redireRuleExistAclUuid"
    ],
    "line": 494,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "acl[%s] not attach to load balancer listener[%s]",
    "en_US": "acl[{0}] not attach to load balancer listener[{1}]",
    "zh_CN": "ACL[{0}]未附加到负载平衡器侦听器[{1}]",
    "arguments": [
      "msg.getAclUuid()",
      "msg.getListenerUuid()"
    ],
    "line": 555,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "L3 networks[uuids:%s] of the vm nics has no network service[%s] enabled",
    "en_US": "L3 networks[uuids:{0}] of the vm nics has no network service[{1}] enabled",
    "zh_CN": "云主机网卡的三层网络没有可用的网络服务",
    "arguments": [
      "l3Uuids",
      "LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING"
    ],
    "line": 1294,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not attach vm nic to load balancer listener, because the vm nic[uuid:%s] are already on the default server group [uuid:%s]",
    "en_US": "could not attach vm nic to load balancer listener, because the vm nic[uuid:{0}] are already on the default server group [uuid:{1}]",
    "zh_CN": "无法将VM NIC附加到负载平衡器侦听器，因为VM NIC[uuid：{0}]已位于默认服务器组[uuid：{1}]上",
    "arguments": [
      "nicUuid",
      "groupVO.getUuid()"
    ],
    "line": 587,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the listener with protocol [%s] doesn\u0027t support this health check:[%s]",
    "en_US": "the listener with protocol [{0}] doesn\u0027t support this health check:[{1}]",
    "zh_CN": "[{0}]类型的监听器不支持此类型[{1}]的健康检查",
    "arguments": [
      "listenerVO.getProtocol()",
      "msg.getHealthCheckProtocol()"
    ],
    "line": 1176,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the http health check protocol must be specified its healthy checking parameter healthCheckURI",
    "en_US": "the http health check protocol must be specified its healthy checking parameter healthCheckURI",
    "zh_CN": "http类型的健康检查必须提供healthCheckURI参数",
    "arguments": [],
    "line": 1145,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the http health check protocol\u0027s expecting code [%s] is invalidate",
    "en_US": "the http health check protocol\u0027s expecting code [{0}] is invalidate",
    "zh_CN": "http健康检查协议的expeting-code参数非法",
    "arguments": [
      "msg.getHealthCheckHttpCode()"
    ],
    "line": 1152,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t attach more than %d access-control-list groups to a listener",
    "en_US": "Can\u0027t attach more than {0} access-control-list groups to a listener",
    "zh_CN": "一个监听器加载的访问控制组不能超过{0}",
    "arguments": [
      "LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)"
    ],
    "line": 697,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "l4[%s] loadBalancer listener[%s] doesn\u0027t support assigning session persistence state",
    "en_US": "l4[{0}] loadBalancer listener[{1}] doesn\u0027t support assigning session persistence state",
    "zh_CN": "L4[{0}]LoadBalancer侦听器[{1}]不支持分配会话持久性状态",
    "arguments": [
      "msg.getProtocol()",
      "msg.getName()"
    ],
    "line": 787,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] %s algorithm doesn\u0027t support assigning session persistence state except assigning disable explicitly",
    "en_US": "loadBalancer[{0}] listener[{1}] {2} algorithm doesn\u0027t support assigning session persistence state except assigning disable explicitly",
    "zh_CN": "LoadBalancer[{0}]Listener[{1}]{2}算法不支持分配会话持久性状态，但显式分配Disable时除外",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()",
      "algorithm"
    ],
    "line": 808,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] %s algorithm doesn\u0027t support assigning session persistence state except assigning iphash explicitly",
    "en_US": "loadBalancer[{0}] listener[{1}] {2} algorithm doesn\u0027t support assigning session persistence state except assigning iphash explicitly",
    "zh_CN": "LoadBalancer[{0}]Listener[{1}]{2}算法不支持分配会话持久性状态，但显式分配IPHASH除外",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()",
      "algorithm"
    ],
    "line": 823,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid session persistence type[%s], it only support %s",
    "en_US": "invalid session persistence type[{0}], it only support {1}",
    "zh_CN": "会话持久性类型[{0}]无效，它仅支持{1}",
    "arguments": [
      "enableSession",
      "Arrays.toString(LoadBalancerSessionPersistence.values())"
    ],
    "line": 849,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid session idle timeout[%s], it must be the number between[%s~%s] ",
    "en_US": "invalid session idle timeout[{0}], it must be the number between[{1}~{2}] ",
    "zh_CN": "会话空闲超时[{0}]无效，它必须是介于[{1}~{2}]之间的数字",
    "arguments": [
      "timeout",
      "LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN",
      "LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX"
    ],
    "line": 856,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid session cookie name[%s], it must be shorter than [%s] characters",
    "en_US": "invalid session cookie name[{0}], it must be shorter than [{1}] characters",
    "zh_CN": "会话Cookie名称[{0}]无效，必须少于[{1}]个字符",
    "arguments": [
      "cookieName",
      "COOKIE_NAME_MAX"
    ],
    "line": 863,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid session cookie name[%s], it must only contains letters, numbers and underscores",
    "en_US": "invalid session cookie name[{0}], it must only contains letters, numbers and underscores",
    "zh_CN": "会话Cookie名称[{0}]无效，它只能包含字母、数字和下划线",
    "arguments": [
      "cookieName"
    ],
    "line": 866,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning idle timeout and cookie name at the same time",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning idle timeout and cookie name at the same time",
    "zh_CN": "LoadBalancer[{0}]Listener[{1}]不支持同时分配空闲超时和Cookie名称",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 870,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning idle timeout and cookie name, it must specify session persistence",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning idle timeout and cookie name, it must specify session persistence",
    "zh_CN": "LoadBalancer[{0}]Listener[{1}]不支持分配空闲超时和Cookie名称，它必须指定会话持久性",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 876,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning idle timeout and cookie name when the session persistence is disabled",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning idle timeout and cookie name when the session persistence is disabled",
    "zh_CN": "禁用会话持久性时，LoadBalancer[{0}]Listener[{1}]不支持分配空闲超时和Cookie名称",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 880,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning session persistence rewrite without assigning cookie name",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning session persistence rewrite without assigning cookie name",
    "zh_CN": "LoadBalancer[{0}]侦听器[{1}]不支持在不分配Cookie名称的情况下分配会话持久性重写",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 894,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning session persistence idle timeout without assigning rewrite mode",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning session persistence idle timeout without assigning rewrite mode",
    "zh_CN": "LoadBalancer[{0}]侦听器[{1}]不支持在不分配重写模式的情况下分配会话持久性空闲超时",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 899,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning session persistence cookieName without assigning insert mode",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning session persistence cookieName without assigning insert mode",
    "zh_CN": "LoadBalancer[{0}]侦听器[{1}]不支持在不分配插入模式的情况下分配会话持久性CookieName",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 904,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning session persistence rewrite when the http mode is http-tunnel",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning session persistence rewrite when the http mode is http-tunnel",
    "zh_CN": "当HTTP模式为HTTP隧道时，LoadBalancer[{0}]Listener[{1}]不支持分配会话持久性重写",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 909,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning other session persistence when the source balancer algorithm is source",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning other session persistence when the source balancer algorithm is source",
    "zh_CN": "当源平衡器算法为源时，LoadBalancer[{0}]侦听器[{1}]不支持分配其他会话持久性",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 920,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadBalancer[%s] listener[%s] doesn\u0027t support assigning session persistence iphash",
    "en_US": "loadBalancer[{0}] listener[{1}] doesn\u0027t support assigning session persistence iphash",
    "zh_CN": "LoadBalancer[{0}]侦听器[{1}]不支持分配会话持久性IPHASH",
    "arguments": [
      "msg.getLoadBalancerUuid()",
      "msg.getName()"
    ],
    "line": 932,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid max connection[%s], %s is larger than upper threshold %d",
    "en_US": "invalid max connection[{0}], {1} is larger than upper threshold {2}",
    "zh_CN": "非法的最大连接数标签[{0}]，因为其值{1}大于上限值{2}",
    "arguments": [
      "tag",
      "s",
      "LoadBalancerConstants.MAX_CONNECTION_LIMIT"
    ],
    "line": 950,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "conflict loadBalancerPort[%s], a listener[uuid:%s] has used that port",
    "en_US": "conflict loadBalancerPort[{0}], a listener[uuid:{1}] has used that port",
    "zh_CN": "冲突的负载均衡器端口(loadBalancerPort)[{0}]，一个监听器[uuid:{1}]已经使用了该端口",
    "arguments": [
      "msg.getLoadBalancerPort()",
      "luuid"
    ],
    "line": 972,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the listener with protocol [%s] doesn\u0027t support select security policy",
    "en_US": "the listener with protocol [{0}] doesn\u0027t support select security policy",
    "zh_CN": "具有协议[{0}]的侦听器不支持选择安全策略",
    "arguments": [
      "listenerVO.getProtocol()",
      "msg.getHealthCheckProtocol()"
    ],
    "line": 1161,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadbalancer listener with type %s does not need certificate",
    "en_US": "loadbalancer listener with type {0} does not need certificate",
    "zh_CN": "[{0}]类型证书不需要证书",
    "arguments": [
      "vo.getProtocol()"
    ],
    "line": 1005,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadbalancer listener [uuid:%s] already had certificate[uuid:%s]",
    "en_US": "loadbalancer listener [uuid:{0}] already had certificate[uuid:{1}]",
    "zh_CN": "LoadBalancer侦听器[uuid：{0}]已具有证书[uuid：{1}]",
    "arguments": [
      "msg.getListenerUuid()",
      "msg.getCertificateUuid()"
    ],
    "line": 1009,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "certificate [uuid:%s] is not added to loadbalancer listener [uuid:%s]",
    "en_US": "certificate [uuid:{0}] is not added to loadbalancer listener [uuid:{1}]",
    "zh_CN": "证书[uuid:{0}]未添加到负载均衡监听器[uuid:{1}]",
    "arguments": [
      "msg.getCertificateUuid()",
      "msg.getListenerUuid()"
    ],
    "line": 1019,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "healthCheck target [%s] error, it must be \u0027default\u0027 or number between[1~65535] ",
    "en_US": "healthCheck target [{0}] error, it must be \u0027default\u0027 or number between[1~65535] ",
    "zh_CN": "健康检查端口[{0}]错误,值必须是\u0027default\u0027或者数字[1~65535]",
    "arguments": [
      "target"
    ],
    "line": 1034,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "l4[%s] loadBalancer listener[%s] doesn\u0027t support modifying session persistence state",
    "en_US": "l4[{0}] loadBalancer listener[{1}] doesn\u0027t support modifying session persistence state",
    "zh_CN": "L4[{0}]LoadBalancer侦听器[{1}]不支持修改会话持久性状态",
    "arguments": [
      "listener.getProtocol()",
      "listener.getName()"
    ],
    "line": 1050,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] can not modifying session persistence rewrite when the http mode is http-tunnel",
    "en_US": "listener[{0}] can not modifying session persistence rewrite when the http mode is http-tunnel",
    "zh_CN": "当HTTP模式为HTTP隧道时，侦听器[{0}]无法修改会话持久性重写",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1064,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] can not modifying httpMode http-tunnel when the session persistence is rewrite",
    "en_US": "listener[{0}] can not modifying httpMode http-tunnel when the session persistence is rewrite",
    "zh_CN": "重写会话持久性时，侦听器[{0}]无法修改httpmode HTTP-tunnel",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1072,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] changes session persistence to iphash, it must specify source balancer algorithm",
    "en_US": "listener[{0}] changes session persistence to iphash, it must specify source balancer algorithm",
    "zh_CN": "侦听器[{0}]将会话持久性更改为IPHASH，它必须指定源平衡器算法",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1079,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] modifies session persistence, it must specify balancer algorithm",
    "en_US": "listener[{0}] modifies session persistence, it must specify balancer algorithm",
    "zh_CN": "侦听器[{0}]修改会话持久性，它必须指定平衡器算法",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1084,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] %s algorithm doesn\u0027t support modifying session persistence except assigning iphash explicitly",
    "en_US": "listener[{0}] {1} algorithm doesn\u0027t support modifying session persistence except assigning iphash explicitly",
    "zh_CN": "侦听器[{0}]{1}算法不支持修改会话持久性，除非显式分配IPHASH",
    "arguments": [
      "msg.getUuid()",
      "msg.getBalancerAlgorithm()"
    ],
    "line": 1090,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] %s algorithm doesn\u0027t support modifying session persistence except assigning disable explicitly",
    "en_US": "listener[{0}] {1} algorithm doesn\u0027t support modifying session persistence except assigning disable explicitly",
    "zh_CN": "侦听器[{0}]{1}算法不支持修改会话持久性，除非显式指定禁用",
    "arguments": [
      "msg.getUuid()",
      "msg.getBalancerAlgorithm()"
    ],
    "line": 1098,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] doesn\u0027t support modifying idle timeout and cookie name, it must specify session persistence",
    "en_US": "listener[{0}] doesn\u0027t support modifying idle timeout and cookie name, it must specify session persistence",
    "zh_CN": "侦听器[{0}]不支持修改空闲超时和cookie名称，它必须指定会话持久性",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1106,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] doesn\u0027t support modifying idle timeout when the session persistence is not insert",
    "en_US": "listener[{0}] doesn\u0027t support modifying idle timeout when the session persistence is not insert",
    "zh_CN": "当会话持久性不是INSERT时，侦听器[{0}]不支持修改空闲超时",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1110,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] doesn\u0027t support modifying cookie name when the session persistence is not rewrite",
    "en_US": "listener[{0}] doesn\u0027t support modifying cookie name when the session persistence is not rewrite",
    "zh_CN": "侦听器[{0}]不支持在会话持久性未重写时修改cookie名称",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1114,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "listener[%s] doesn\u0027t support modifying session rewrite without modifying cookie name",
    "en_US": "listener[{0}] doesn\u0027t support modifying session rewrite without modifying cookie name",
    "zh_CN": "侦听器[{0}]不支持在不修改Cookie名称的情况下修改会话重写",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1118,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid session idle timeout[%s], it must be the number between[%s~%s]",
    "en_US": "invalid session idle timeout[{0}], it must be the number between[{1}~{2}]",
    "zh_CN": "会话空闲超时[{0}]无效，它必须是介于[{1}~{2}]之间的数字",
    "arguments": [
      "timeout",
      "LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN",
      "LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX"
    ],
    "line": 1132,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the http health check protocol must be specified its healthy checking parameters including healthCheckMethod and healthCheckURI",
    "en_US": "the http health check protocol must be specified its healthy checking parameters including healthCheckMethod and healthCheckURI",
    "zh_CN": "http类型的健康检查协议必须提供healthCheckMethod和healthCheckURI参数",
    "arguments": [],
    "line": 1181,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not allow to delete default serverGroup[uuid:%s]",
    "en_US": "could not allow to delete default serverGroup[uuid:{0}]",
    "zh_CN": "无法允许删除默认服务器组[uuid：{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1204,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadbalacerServerGroup [%s] is non-existent",
    "en_US": "loadbalacerServerGroup [{0}] is non-existent",
    "zh_CN": "LoadBalacerServerGroup[{0}]不存在",
    "arguments": [
      "msg.getServerGroupUuid()"
    ],
    "line": 1429,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add backend server vmnic[uuid:%s] to serverGroup[uuid:%s],because vmnic uuid is not exist",
    "en_US": "could not add backend server vmnic[uuid:{0}] to serverGroup[uuid:{1}],because vmnic uuid is not exist",
    "zh_CN": "无法将后端服务器vmnic[uuid：{0}]添加到ServerGroup[uuid：{1}]，因为vmnic uuid不存在",
    "arguments": [
      "vmNic.get(\"uuid\")",
      "msg.getServerGroupUuid()"
    ],
    "line": 1263,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add backend server vmnic to serverGroup[uuid:%s] ,because vmnic weight[%s] not a correct number",
    "en_US": "could not add backend server vmnic to serverGroup[uuid:{0}] ,because vmnic weight[{1}] not a correct number",
    "zh_CN": "无法将后端服务器vmnic添加到ServerGroup[uuid：{0}]，因为vmnic权重[{1}]不是正确的数字",
    "arguments": [
      "vmNic.get(\"weight\")"
    ],
    "line": 1274,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid balancer weight[vimNic:%s,weight:%s], weight is not in the range [%d, %d]",
    "en_US": "invalid balancer weight[vimNic:{0},weight:{1}], weight is not in the range [{2}, {3}]",
    "zh_CN": "无效的平衡器重量[vimnic：{0}，重量：{1}]，重量不在范围[{2}，{3}]内",
    "arguments": [
      "vmNic.get(\"uuid\")",
      "vmNicWeight",
      "LoadBalancerConstants.BALANCER_WEIGHT_MIN",
      "LoadBalancerConstants.BALANCER_WEIGHT_MAX"
    ],
    "line": 1552,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the vm nics[uuid:%s] are already on the load balancer servegroup [uuid:%s]",
    "en_US": "the vm nics[uuid:{0}] are already on the load balancer servegroup [uuid:{1}]",
    "zh_CN": "VM NIC[uuid：{0}]已位于负载平衡器ServerGroup[uuid：{1}]上",
    "arguments": [
      "existingNics",
      "msg.getServerGroupUuid()"
    ],
    "line": 1304,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add backend server vmnic to serverGroup [uuid:%s], because vmnic ip [ipAddress:%s] is repeated",
    "en_US": "could not add backend server vmnic to serverGroup [uuid:{0}], because vmnic ip [ipAddress:{1}] is repeated",
    "zh_CN": "无法将后端服务器vmnic添加到ServerGroup[uuid：{0}]，因为vmnic IP[IPAddress：{1}]重复",
    "arguments": [
      "msg.getServerGroupUuid()",
      "vmNicIps"
    ],
    "line": 1313,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add vm nic [uuid:%s] to server group [uuid:%s] because listener [uuid:%s] attached this server group already the nic to be added",
    "en_US": "could not add vm nic [uuid:{0}] to server group [uuid:{1}] because listener [uuid:{2}] attached this server group already the nic to be added",
    "zh_CN": "无法将VM NIC[uuid：{0}]添加到服务器组[uuid：{1}]，因为侦听程序[uuid：{2}]已将此服务器组连接到要添加的NIC",
    "arguments": [
      "vmNicUuids",
      "msg.getServerGroupUuid()",
      "listenerVO.getUuid()"
    ],
    "line": 1325,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add backend server ip to serverGroup [uuid:%s], because ip [ipAddress:%s] is invalid",
    "en_US": "could not add backend server ip to serverGroup [uuid:{0}], because ip [ipAddress:{1}] is invalid",
    "zh_CN": "无法将后端服务器IP添加到ServerGroup[uuid：{0}]，因为IP[IPAddress：{1}]无效",
    "arguments": [
      "msg.getServerGroupUuid()",
      "serverIps"
    ],
    "line": 1606,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add backend server ip to serverGroup [uuid:%s], because ip [ipAddress:%s] is repeated",
    "en_US": "could not add backend server ip to serverGroup [uuid:{0}], because ip [ipAddress:{1}] is repeated",
    "zh_CN": "无法将后端服务器IP添加到ServerGroup[uuid：{0}]，因为IP[IPAddress：{1}]重复",
    "arguments": [
      "msg.getServerGroupUuid()",
      "server.get(\"ipAddress\")"
    ],
    "line": 1341,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add backend server ip to serverGroup[uuid:%s] ,because vmnic weight[%s] not a correct number",
    "en_US": "could not add backend server ip to serverGroup[uuid:{0}] ,because vmnic weight[{1}] not a correct number",
    "zh_CN": "无法将后端服务器IP添加到ServerGroup[uuid：{0}]，因为vmnic权重[{1}]不是正确的数字",
    "arguments": [
      "server.get(\"weight\")"
    ],
    "line": 1599,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid  weight[serverIp:%s,weight:%s], weight is not in the range [%d, %d]",
    "en_US": "invalid  weight[serverIp:{0},weight:{1}], weight is not in the range [{2}, {3}]",
    "zh_CN": "权重[服务器IP：{0}，权重：{1}]无效，权重不在范围[{2}，{3}]内",
    "arguments": [
      "server.get(\"ipAddress\")",
      "serverIpWeight",
      "LoadBalancerConstants.BALANCER_WEIGHT_MIN",
      "LoadBalancerConstants.BALANCER_WEIGHT_MAX"
    ],
    "line": 1352,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "the server ips [uuid:%s] are already on the load balancer servegroup [uuid:%s]",
    "en_US": "the server ips [uuid:{0}] are already on the load balancer servegroup [uuid:{1}]",
    "zh_CN": "服务器IP[uuid：{0}]已在负载平衡器ServerGroup[uuid：{1}]上",
    "arguments": [
      "existingServerIps",
      "msg.getServerGroupUuid()"
    ],
    "line": 1367,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add server ip to share load balancer server group",
    "en_US": "could not add server ip to share load balancer server group",
    "zh_CN": "无法将服务器IP添加到共享负载平衡器服务器组",
    "arguments": [],
    "line": 1611,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "vmnic or ip is null",
    "en_US": "vmnic or ip is null",
    "zh_CN": "vmnic或IP为空",
    "arguments": [],
    "line": 1433,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "vmnics are all not in servergroup [%s]",
    "en_US": "vmnics are all not in servergroup [{0}]",
    "zh_CN": "VMNIC均不在ServerGroup[{0}]中",
    "arguments": [
      "msg.getServerGroupUuid()"
    ],
    "line": 1397,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "serverips are all not in servergroup [%s]",
    "en_US": "serverips are all not in servergroup [{0}]",
    "zh_CN": "ServerIP全部不在ServerGroup[{0}]中",
    "arguments": [
      "msg.getServerGroupUuid()"
    ],
    "line": 1414,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add server group[uuid:%s} to listener [uuid:%s] because it is already added ",
    "en_US": "could not add server group[uuid:{0}} to listener [uuid:{1}] because it is already added ",
    "zh_CN": "无法将服务器组[uuid：{0}}添加到侦听器[uuid：{1}]，因为它已添加",
    "arguments": [
      "msg.getServerGroupUuid()",
      "msg.getlistenerUuid()"
    ],
    "line": 1444,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add server group[uuid:%s} to listener [uuid:%s] because nic [uuid:%s] is already added",
    "en_US": "could not add server group[uuid:{0}} to listener [uuid:{1}] because nic [uuid:{2}] is already added",
    "zh_CN": "无法将服务器组[uuid：{0}}添加到侦听器[uuid：{1}]，因为已经添加了NIC[uuid：{2}]",
    "arguments": [
      "msg.getServerGroupUuid()",
      "msg.getlistenerUuid()",
      "nicUuid"
    ],
    "line": 1461,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not add server group[uuid:%s} to listener [uuid:%s] because server ip [%s] is already added",
    "en_US": "could not add server group[uuid:{0}} to listener [uuid:{1}] because server ip [{2}] is already added",
    "zh_CN": "无法将服务器组[uuid：{0}}添加到侦听器[uuid：{1}]，因为已添加服务器IP[{2}]",
    "arguments": [
      "msg.getServerGroupUuid()",
      "msg.getlistenerUuid()",
      "ipAddress"
    ],
    "line": 1476,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not remove server group[uuid:%s} from listener [uuid:%s] because it is not added",
    "en_US": "could not remove server group[uuid:{0}} from listener [uuid:{1}] because it is not added",
    "zh_CN": "由于未添加服务器组[uuid：{1}]，因此无法将其从侦听器[uuid：{1}]中删除",
    "arguments": [
      "msg.getServerGroupUuid()",
      "msg.getListenerUuid()"
    ],
    "line": 1496,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "loadbalacerUuid [%s] is non-existent",
    "en_US": "loadbalacerUuid [{0}] is non-existent",
    "zh_CN": "LoadBalaceRuuid[{0}]不存在",
    "arguments": [
      "loadBalancerUuid"
    ],
    "line": 1511,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not find loadBalancer with serverGroup [uuid:%s]",
    "en_US": "could not find loadBalancer with serverGroup [uuid:{0}]",
    "zh_CN": "找不到ServerGroup为[uuid：{0}]的LoadBalancer",
    "arguments": [
      "msg.getServerGroupUuid()"
    ],
    "line": 1526,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not update backend server vmnic of serverGroup[uuid:%s],because vmnic uuid is null",
    "en_US": "could not update backend server vmnic of serverGroup[uuid:{0}],because vmnic uuid is null",
    "zh_CN": "无法更新ServerGroup[uuid：{0}]的后端服务器vmnic，因为vmnic uuid为空",
    "arguments": [
      "msg.getServerGroupUuid()"
    ],
    "line": 1567,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not update backend server vmnic of serverGroup,because serverGroup[uuid:%s] don not have vmnic [uuid:%s] ",
    "en_US": "could not update backend server vmnic of serverGroup,because serverGroup[uuid:{0}] don not have vmnic [uuid:{1}] ",
    "zh_CN": "无法更新ServerGroup的后端服务器vmnic，因为ServerGroup[uuid：{0}]没有vmnic[uuid：{1}]",
    "arguments": [
      "msg.getServerGroupUuid()",
      "vmNic.containsKey(\"uuid\")"
    ],
    "line": 1542,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid balancer weight[vimNic:%s], weight is null",
    "en_US": "invalid balancer weight[vimNic:{0}], weight is null",
    "zh_CN": "平衡器权重[vimnic：{0}]无效，权重为空",
    "arguments": [
      "vmNic.get(\"uuid\")"
    ],
    "line": 1564,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not change backend server vmnic to serverGroup[uuid:%s] ,because vmnic weight[%s] not a correct number",
    "en_US": "could not change backend server vmnic to serverGroup[uuid:{0}] ,because vmnic weight[{1}] not a correct number",
    "zh_CN": "无法将后端服务器vmnic更改为ServerGroup[uuid：{0}]，因为vmnic权重[{1}]不是正确的数字",
    "arguments": [
      "vmNic.get(\"weight\")"
    ],
    "line": 1559,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not update backend server ip of serverGroup,because serverGroup[uuid:%s] don not have ip [ipAddress:%s] ",
    "en_US": "could not update backend server ip of serverGroup,because serverGroup[uuid:{0}] don not have ip [ipAddress:{1}] ",
    "zh_CN": "无法更新ServerGroup的后端服务器IP，因为ServerGroup[uuid：{0}]没有IP[IP地址：{1}]",
    "arguments": [
      "msg.getServerGroupUuid()",
      "ipAddress"
    ],
    "line": 1583,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid balancer weight[serverIp:%s], weight is null",
    "en_US": "invalid balancer weight[serverIp:{0}], weight is null",
    "zh_CN": "无效的平衡器权重[ServerIP：{0}]，权重为空",
    "arguments": [
      "server.get(\"ipAddress\")"
    ],
    "line": 1602,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "invalid balancer weight[serverIp:%s,weight:%s], weight is not in the range [%d, %d]",
    "en_US": "invalid balancer weight[serverIp:{0},weight:{1}], weight is not in the range [{2}, {3}]",
    "zh_CN": "无效的平衡器权重[服务器IP：{0}，权重：{1}]，权重不在范围[{2}，{3}]内",
    "arguments": [
      "server.get(\"ipAddress\")",
      "serverIpWeight",
      "LoadBalancerConstants.BALANCER_WEIGHT_MIN",
      "LoadBalancerConstants.BALANCER_WEIGHT_MAX"
    ],
    "line": 1592,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "could not change backendserver, beacause vmincs and serverips is null",
    "en_US": "could not change backendserver, beacause vmincs and serverips is null",
    "zh_CN": "无法更改后端服务器，因为VMINCS和ServerIPS为空",
    "arguments": [],
    "line": 1618,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java"
  },
  {
    "raw": "can not get service providerType for load balancer listener [uuid:%s]",
    "en_US": "can not get service providerType for load balancer listener [uuid:{0}]",
    "zh_CN": "无法获取负载平衡器侦听器[uuid：{0}]的Service ProviderType",
    "arguments": [
      "struct.listenerUuid"
    ],
    "line": 1355,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "service provider type mismatching. The load balancer[uuid:%s] is provided by the service provider[type:%s], but new service provider is [type: %s]",
    "en_US": "service provider type mismatching. The load balancer[uuid:{0}] is provided by the service provider[type:{1}], but new service provider is [type: {2}]",
    "zh_CN": "服务提供商类型不匹配。负载平衡器[uuid：{0}]由服务提供程序[类型：{1}]提供，但新服务提供程序为[类型：{2}]",
    "arguments": [
      "self.getUuid()",
      "self.getProviderType()",
      "providerType"
    ],
    "line": 1384,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "there is listener with same port [%s] and same load balancer [uuid:%s]",
    "en_US": "there is listener with same port [{0}] and same load balancer [uuid:{1}]",
    "zh_CN": "存在具有相同端口[{0}]和相同负载平衡器[uuid：{1}]的侦听器",
    "arguments": [
      "msg.getLoadBalancerPort()",
      "msg.getLoadBalancerUuid()"
    ],
    "line": 1486,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "invalid health checking parameters[%s], the format is method:URI:code, for example, GET:/index.html:http_2xx",
    "en_US": "invalid health checking parameters[{0}], the format is method:URI:code, for example, GET:/index.html:http_2xx",
    "zh_CN": "无效的健康检查参数[{0}]，正确格式：method:URI:code，例如 GET:/index.html:http_2xx",
    "arguments": [
      "param"
    ],
    "line": 2011,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java"
  },
  {
    "raw": "invalid health target[%s], the format is targetCheckProtocol:port, for example, tcp:default",
    "en_US": "invalid health target[{0}], the format is targetCheckProtocol:port, for example, tcp:default",
    "zh_CN": "无效的健康检查目标[{0}]，格式为[目标检查协议(targetCheckProtocol):端口(port)], 例如[tcp:default]",
    "arguments": [
      "systemTag"
    ],
    "line": 699,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "cannot find the load balancer[uuid:%s]",
    "en_US": "cannot find the load balancer[uuid:{0}]",
    "zh_CN": "无法找到负载均衡器[uuid:{0}]",
    "arguments": [
      "msg.getLoadBalancerUuid()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "cannot delete the system tag[%s]. The load balancer plugin relies on it, you can only update it",
    "en_US": "cannot delete the system tag[{0}]. The load balancer plugin relies on it, you can only update it",
    "zh_CN": "无法删除系统标签[{0}]。负载均衡器插件依赖于该标签，该标签只能被更新",
    "arguments": [
      "tag.getTag()"
    ],
    "line": 483,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "nic[uuid:%s] not found. Please correct your system tag[%s] of loadbalancer",
    "en_US": "nic[uuid:{0}] not found. Please correct your system tag[{1}] of loadbalancer",
    "zh_CN": "找不到网卡[uuid:{0}]。请检查负载均衡器的系统标签[{1}]",
    "arguments": [
      "nicUuid",
      "systemTag"
    ],
    "line": 502,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balancer weight[%s], %s is not a number",
    "en_US": "invalid balancer weight[{0}], {1} is not a number",
    "zh_CN": "无效的权重值[{0}], {1}不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 514,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balancer weight[%s], %s is not in the range [%d, %d]",
    "en_US": "invalid balancer weight[{0}], {1} is not in the range [{2}, {3}]",
    "zh_CN": "无效的权重值[{0}], {1}不在允许范围[{2}, {3}]中",
    "arguments": [
      "systemTag",
      "s",
      "LoadBalancerConstants.BALANCER_WEIGHT_MIN",
      "LoadBalancerConstants.BALANCER_WEIGHT_MAX"
    ],
    "line": 510,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balance algorithm[%s], valid algorithms are %s",
    "en_US": "invalid balance algorithm[{0}], valid algorithms are {1}",
    "zh_CN": "无效的均衡算法[{0}]，有效的为[{1}]",
    "arguments": [
      "algorithm",
      "LoadBalancerConstants.BALANCE_ALGORITHMS"
    ],
    "line": 526,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid unhealthy threshold[%s], %s is not a number",
    "en_US": "invalid unhealthy threshold[{0}], {1} is not a number",
    "zh_CN": "无效的不健康阈值[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 602,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid healthy threshold[%s], %s is not a number",
    "en_US": "invalid healthy threshold[{0}], {1} is not a number",
    "zh_CN": "无效的健康阈值[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 616,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid healthy timeout[%s], %s is not a number",
    "en_US": "invalid healthy timeout[{0}], {1} is not a number",
    "zh_CN": "无效的健康超时[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 630,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid connection idle timeout[%s], %s is not a number",
    "en_US": "invalid connection idle timeout[{0}], {1} is not a number",
    "zh_CN": "无效的连接空闲超时[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 644,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid health check interval[%s], %s is not a number",
    "en_US": "invalid health check interval[{0}], {1} is not a number",
    "zh_CN": "无效的健康检查间隔[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 658,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid max connection[%s], %s is not a number",
    "en_US": "invalid max connection[{0}], {1} is not a number",
    "zh_CN": "无效的最大连接[{0}]，[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 672,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid process number[%s], %s is not a number",
    "en_US": "invalid process number[{0}], {1} is not a number",
    "zh_CN": "进程编号[{0}]无效，{1}不是数字",
    "arguments": [
      "systemTag",
      "s"
    ],
    "line": 686,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid health target[%s], the target checking protocol[%s] is invalid, valid protocols are %s",
    "en_US": "invalid health target[{0}], the target checking protocol[{1}] is invalid, valid protocols are {2}",
    "zh_CN": "无效的健康检查目标[{0}]，目标检查协议无效[{1}]，有效的为[{2}]",
    "arguments": [
      "systemTag",
      "protocol",
      "LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS"
    ],
    "line": 704,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid invalid health target[%s], port[%s] is not a number",
    "en_US": "invalid invalid health target[{0}], port[{1}] is not a number",
    "zh_CN": "无效的健康检查目标[{0}]，端口[{1}]不是一个数字",
    "arguments": [
      "systemTag",
      "port"
    ],
    "line": 716,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid invalid health target[%s], port[%s] is not in the range of [1, 65535]",
    "en_US": "invalid invalid health target[{0}], port[{1}] is not in the range of [1, 65535]",
    "zh_CN": "无效的无效健康检查目标[{0}]，端口[{1}]不在范围[1, 65535]内",
    "arguments": [
      "systemTag",
      "port"
    ],
    "line": 713,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java"
  },
  {
    "raw": "invalid balancer weight for nic:%s, %d is not in the range [%d, %d]",
    "en_US": "invalid balancer weight for nic:{0}, {1} is not in the range [{2}, {3}]",
    "zh_CN": "无效的网卡:{0}权重值{1}，不在有效范围[{2}, {3}]内",
    "arguments": [
      "nicUuid",
      "weight",
      "LoadBalancerConstants.BALANCER_WEIGHT_MIN",
      "LoadBalancerConstants.BALANCER_WEIGHT_MAX"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/network/service/lb/LoadBalancerWeightOperator.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of vip[uuid: %s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of vip[uuid: {1}] are the same network",
    "zh_CN": "云主机网卡[uuid:{0}]的客户三层网络和虚拟IP[uuid:{1}]的虚拟IP 三层网络是同一个网络",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getVipUuid()"
    ],
    "line": 226,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "the vip[uuid:%s] has been occupied other network service entity[%s]",
    "en_US": "the vip[uuid:{0}] has been occupied other network service entity[{1}]",
    "zh_CN": "虚拟IP[uuid:{0}]已经被其他网络服务占用",
    "arguments": [
      "msg.getVipUuid()",
      "useForList.toString()"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "Port forwarding rule[uuid:%s] is not in state of Enabled, current state is %s",
    "en_US": "Port forwarding rule[uuid:{0}] is not in state of Enabled, current state is {1}",
    "zh_CN": "端口转发规则[uuid:{0}]未启用，当前状态[{1}]",
    "arguments": [
      "msg.getRuleUuid()",
      "state"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule rule[uuid:%s] has not been attached to any vm nic, can\u0027t detach",
    "en_US": "port forwarding rule rule[uuid:{0}] has not been attached to any vm nic, can\u0027t detach",
    "zh_CN": "端口转发规则[uuid:{0}]尚未被挂载到任何云主机网卡，无法卸载",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule[uuid:%s] has been attached to vm nic[uuid:%s], can\u0027t attach again",
    "en_US": "port forwarding rule[uuid:{0}] has been attached to vm nic[uuid:{1}], can\u0027t attach again",
    "zh_CN": "端口转发规则[uuid:{0}]已经被挂载到云主机网卡[uuid:{1}]，无法再次挂载",
    "arguments": [
      "msg.getRuleUuid()",
      "vmNicUuid"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule[uuid:%s] is not in state of Enabled,  current state is %s. A rule can only be attached when its state is Enabled",
    "en_US": "port forwarding rule[uuid:{0}] is not in state of Enabled,  current state is {1}. A rule can only be attached when its state is Enabled",
    "zh_CN": "端口转发规则[uuid:{0}]没有启用，当前状态为{1}。一个规则只能在启用时被挂载",
    "arguments": [
      "msg.getRuleUuid()",
      "state"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "guest l3Network of vm nic[uuid:%s] and vip l3Network of port forwarding rule[uuid:%s] are the same network",
    "en_US": "guest l3Network of vm nic[uuid:{0}] and vip l3Network of port forwarding rule[uuid:{1}] are the same network",
    "zh_CN": "云主机网卡[uuid:{0}]的客户三层网络和端口转发规则[uuid:{1}]的VIP 三层网络是同一个网络",
    "arguments": [
      "msg.getVmNicUuid()",
      "msg.getRuleUuid()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "could not create port forwarding rule, because vip port range[vipStartPort:%s, vipEndPort:%s] is incompatible with private port range[privateStartPort:%s, privateEndPort:%s]",
    "en_US": "could not create port forwarding rule, because vip port range[vipStartPort:{0}, vipEndPort:{1}] is incompatible with private port range[privateStartPort:{2}, privateEndPort:{3}]",
    "zh_CN": "无法创建端口转发规则，因为VIP端口范围[vipStartPort：{0}，vipEndPort：{1}]与专用端口范围[PrivateStartPort：[2}，PrivateEndPport：{3}]不兼容",
    "arguments": [
      "msg.getVipPortStart()",
      "msg.getVipPortEnd()",
      "msg.getPrivatePortStart()",
      "msg.getPrivatePortEnd()"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "for range port forwarding, the port range size must match; vip range[%s, %s]\u0027s size doesn\u0027t match range[%s, %s]\u0027s size",
    "en_US": "for range port forwarding, the port range size must match; vip range[{0}, {1}]\u0027s size doesn\u0027t match range[{2}, {3}]\u0027s size",
    "zh_CN": "对于范围端口转发，端口范围大小必须匹配；VIP范围[{0}, {1}]的大小不匹配范围[{2}, {3}]的大小",
    "arguments": [
      "msg.getVipPortStart()",
      "msg.getVipPortEnd()",
      "msg.getPrivatePortStart()",
      "msg.getPrivatePortEnd()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "invalid CIDR[%s], only ipv4 is supported",
    "en_US": "invalid CIDR[{0}], only ipv4 is supported",
    "zh_CN": "无效的CIDR[{0}]，仅支持ipv4",
    "arguments": [
      "msg.getAllowedCidr()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "invalid CIDR[%s]",
    "en_US": "invalid CIDR[{0}]",
    "zh_CN": "无效的CIDR[{0}]",
    "arguments": [
      "msg.getAllowedCidr()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "vip port range[vipStartPort:%s, vipEndPort:%s] overlaps with rule[uuid:%s, vipStartPort:%s, vipEndPort:%s]",
    "en_US": "vip port range[vipStartPort:{0}, vipEndPort:{1}] overlaps with rule[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]",
    "zh_CN": "虚拟IP（vip）端口范围[vipStartPort:{0}, vipEndPort:{1}]与规则[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]重叠",
    "arguments": [
      "vipStart",
      "vipEnd",
      "vo.getUuid()",
      "vo.getVipPortStart()",
      "vo.getVipPortEnd()"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "the VM[name:%s uuid:%s] already has port forwarding rules that have different VIPs than the one[uuid:%s]",
    "en_US": "the VM[name:{0} uuid:{1}] already has port forwarding rules that have different VIPs than the one[uuid:{2}]",
    "zh_CN": "云主机[name:{0} uuid:{1}]已经有端口转发规则，且与[uuid:{2}]有不同的VIPs",
    "arguments": [
      "vm.getName()",
      "vm.getUuid()",
      "vipUuid"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "vmNic uuid[%s] is not allowed add portForwarding with allowedCidr rule, because vmNic exist eip",
    "en_US": "vmNic uuid[{0}] is not allowed add portForwarding with allowedCidr rule, because vmNic exist eip",
    "zh_CN": "不允许vmnic uuid[{0}]使用AllowedCIDR规则添加PortForwarding，因为vmnic存在EIP",
    "arguments": [
      "vmNicUuid"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "could not attach port forwarding rule, because vmNic[uuid:%s] already has a rule that overlaps the target private port ranges[%s, %s], has the same protocol type[%s] and has AllowedCidr",
    "en_US": "could not attach port forwarding rule, because vmNic[uuid:{0}] already has a rule that overlaps the target private port ranges[{1}, {2}], has the same protocol type[{3}] and has AllowedCidr",
    "zh_CN": "无法挂载端口转发规则，因为云主机网卡[uuid:{0}]已经有与目标规则的云主机端口范围[{1}, {2}]重叠、协议类型[{3}]相同且设置有允许CIDR的规则",
    "arguments": [
      "vmNicUuid",
      "privatePortStart",
      "privatePortEnd",
      "protocolType"
    ],
    "line": 316,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "could not attach port forwarding rule with allowedCidr, because vmNic[uuid:%s] already has rules that overlap the target private port ranges[%s, %s] and have the same protocol type[%s]",
    "en_US": "could not attach port forwarding rule with allowedCidr, because vmNic[uuid:{0}] already has rules that overlap the target private port ranges[{1}, {2}] and have the same protocol type[{3}]",
    "zh_CN": "无法挂载设置有允许CIDR的端口转发规则，因为云主机网卡[uuid:{0}]已经有与目标规则的云主机端口范围[{1}, {2}]重叠且协议类型[{3}]相同的规则",
    "arguments": [
      "vmNicUuid",
      "privatePortStart",
      "privatePortEnd",
      "protocolType"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java"
  },
  {
    "raw": "port forwarding rule [uuid:%s] is deleted",
    "en_US": "port forwarding rule [uuid:{0}] is deleted",
    "zh_CN": "端口转发规则[uuid：{0}]已删除",
    "arguments": [
      "struct.getRule().getUuid()"
    ],
    "line": 1222,
    "fileName": "src/main/java/org/zstack/network/service/portforwarding/PortForwardingManagerImpl.java"
  },
  {
    "raw": "could not add backend server vmnic to serverGroup[uuid:%s],because vmnic uuid is null",
    "en_US": "could not add backend server vmnic to serverGroup[uuid:{0}],because vmnic uuid is null",
    "zh_CN": "无法将后端服务器vmnic添加到ServerGroup[uuid：{0}]，因为vmnic uuid为空",
    "arguments": [
      "msg.getServerGroupUuid()"
    ],
    "line": 375,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb instance because there is no load balancer slb group [uuid:%s]",
    "en_US": "could not create slb instance because there is no load balancer slb group [uuid:{0}]",
    "zh_CN": "无法创建SLB实例，因为没有负载平衡器SLB组[uuid：{0}]",
    "arguments": [
      "msg.getSlbGroupUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb instance because there is no slb offering configured for slb group [uuid:%s]",
    "en_US": "could not create slb instance because there is no slb offering configured for slb group [uuid:{0}]",
    "zh_CN": "无法创建SLB实例，因为没有为SLB组[uuid：{0}]配置SLB产品",
    "arguments": [
      "msg.getSlbGroupUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb instance because image uuid of slb offering [uuid:%s] is null",
    "en_US": "could not create slb instance because image uuid of slb offering [uuid:{0}] is null",
    "zh_CN": "无法创建SLB实例，因为SLB产品[uuid：{0}]的镜像uuid为空",
    "arguments": [
      "msg.getSlbGroupUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb instance because image [uuid:%s] is deleted",
    "en_US": "could not create slb instance because image [uuid:{0}] is deleted",
    "zh_CN": "无法创建SLB实例，因为镜像[uuid：{0}]已删除",
    "arguments": [
      "slbOfferingVO.getImageUuid()"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb group because invalid front l3 network type %s",
    "en_US": "could not create slb group because invalid front l3 network type {0}",
    "zh_CN": "无法创建SLB组，因为前端三层网络类型{0}无效",
    "arguments": [
      "frontL3.getCategory()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb group, because front network doesn\u0027t support ipv6 yet",
    "en_US": "could not create slb group, because front network doesn\u0027t support ipv6 yet",
    "zh_CN": "无法创建SLB组，因为前端网络尚不支持IPv6",
    "arguments": [],
    "line": 127,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb group, because backend network doesn\u0027t support ipv6 yet",
    "en_US": "could not create slb group, because backend network doesn\u0027t support ipv6 yet",
    "zh_CN": "无法创建SLB组，因为后端网络尚不支持IPv6",
    "arguments": [],
    "line": 142,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not change resource owner, because the resource[uuid:%s, type:VmInstance] has already attached security group",
    "en_US": "could not change resource owner, because the resource[uuid:{0}, type:VmInstance] has already attached security group",
    "zh_CN": "无法更改资源所有者，因为资源[uuid:{0}, 类型:VmInstance] 已加载安全组",
    "arguments": [
      "msg.getResourceUuid()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because vm nic[uuid:%s] not found",
    "en_US": "could no set vm nic security group, because vm nic[uuid:{0}] not found",
    "zh_CN": "无法设置VM NIC安全组，因为找不到VM NIC[uuid：{0}]",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because the vm nic[uuid:%s] not attached to any security group",
    "en_US": "could no set vm nic security group, because the vm nic[uuid:{0}] not attached to any security group",
    "zh_CN": "无法设置VM NIC安全组，因为VM NIC[uuid：{0}]未挂载到任何安全组",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 256,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because security group[uuid:%s] not found",
    "en_US": "could no set vm nic security group, because security group[uuid:{0}] not found",
    "zh_CN": "无法设置VM NIC安全组，因为找不到安全组[uuid：{0}]",
    "arguments": [
      "ao.getSecurityGroupUuid()"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because invalid priority, priority[%d] cannot be less than 1",
    "en_US": "could no set vm nic security group, because invalid priority, priority[{0}] cannot be less than 1",
    "zh_CN": "无法设置VM NIC安全组，因为优先级无效，优先级[{0}]不能小于1",
    "arguments": [
      "priority"
    ],
    "line": 271,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because duplicate priority, both security group %s and %s have priority[%d]",
    "en_US": "could no set vm nic security group, because duplicate priority, both security group {0} and {1} have priority[{2}]",
    "zh_CN": "无法设置VM NIC安全组，因为优先级重复，安全组{0}和{1}都具有相同的优先级[{2}]",
    "arguments": [
      "aoMap.get(priority)",
      "ao.getSecurityGroupUuid()",
      "priority"
    ],
    "line": 275,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because duplicate security group[uuid:%s]",
    "en_US": "could no set vm nic security group, because duplicate security group[uuid:{0}]",
    "zh_CN": "无法设置VM NIC安全组，因为安全组[uuid：{0}]重复",
    "arguments": [
      "ao.getSecurityGroupUuid()"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because security group[uuid:%s] is not owned by account[uuid:%s] or admin",
    "en_US": "could no set vm nic security group, because security group[uuid:{0}] is not owned by account[uuid:{1}] or admin",
    "zh_CN": "无法设置 VM NIC 安全组，因为安全组 [uuid:{0}] 不属于帐户[uuid:{1}] 或管理员",
    "arguments": [
      "ao.getSecurityGroupUuid()",
      "vmAccountUuid"
    ],
    "line": 288,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because invalid priority, priority expects to start at 1, but [%d]",
    "en_US": "could no set vm nic security group, because invalid priority, priority expects to start at 1, but [{0}]",
    "zh_CN": "无法设置VM NIC安全组，因为优先级无效，优先级应从1开始，而不是[{0}]",
    "arguments": [
      "priorities[0]"
    ],
    "line": 298,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because invalid priority, priority[%d] and priority[%d] expected to be consecutive",
    "en_US": "could no set vm nic security group, because invalid priority, priority[{0}] and priority[{1}] expected to be consecutive",
    "zh_CN": "无法设置VM NIC安全组，因为优先级无效，优先级[{0}]和优先级[{1}]应是连续的",
    "arguments": [
      "priorities[i]",
      "priorities[i + 1]"
    ],
    "line": 302,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no set vm nic security group, because admin security group priority[%d] must be higher than users",
    "en_US": "could no set vm nic security group, because admin security group priority[{0}] must be higher than users",
    "zh_CN": "无法设置VM NIC安全组，因为管理员安全组优先级[{0}]必须高于用户安全组",
    "arguments": [
      "priorities[i + 1]"
    ],
    "line": 348,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because ruleUuids is empty",
    "en_US": "could no change security group rule state, because ruleUuids is empty",
    "zh_CN": "无法更改安全组规则状态，因为RuleUIds为空",
    "arguments": [],
    "line": 357,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because security group[uuid:%s] not found",
    "en_US": "could no change security group rule state, because security group[uuid:{0}] not found",
    "zh_CN": "无法更改安全组规则状态，因为找不到安全组[uuid：{0}]",
    "arguments": [
      "msg.getSecurityGroupUuid()"
    ],
    "line": 361,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because security group rule[uuid:%s] not found",
    "en_US": "could no change security group rule state, because security group rule[uuid:{0}] not found",
    "zh_CN": "无法更改安全组规则状态，因为找不到安全组规则[uuid：{0}]",
    "arguments": [
      "r"
    ],
    "line": 369,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change security group rule state, because no security group rule state need to change",
    "en_US": "could no change security group rule state, because no security group rule state need to change",
    "zh_CN": "无法更改安全组规则状态，因为没有安全组规则需要修改状态",
    "arguments": [],
    "line": 378,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because ingress policy and egress policy cannot be both null",
    "en_US": "could no change vm nic security policy, because ingress policy and egress policy cannot be both null",
    "zh_CN": "无法更改VM NIC安全策略，因为入口策略和出口策略不能同时为空",
    "arguments": [],
    "line": 386,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because invalid ingress policy[%s]",
    "en_US": "could no change vm nic security policy, because invalid ingress policy[{0}]",
    "zh_CN": "无法更改VM NIC安全策略，因为入口策略[{0}]无效",
    "arguments": [
      "msg.getIngressPolicy()"
    ],
    "line": 389,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because invalid egress policy[%s]",
    "en_US": "could no change vm nic security policy, because invalid egress policy[{0}]",
    "zh_CN": "无法更改VM NIC安全策略，因为出口策略[{0}]无效",
    "arguments": [
      "msg.getEgressPolicy()"
    ],
    "line": 393,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because vm nic[uuid:%s] not found",
    "en_US": "could no change vm nic security policy, because vm nic[uuid:{0}] not found",
    "zh_CN": "无法更改VM NIC安全策略，因为找不到VM NIC[uuid：{0}]",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 397,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could no change vm nic security policy, because vm nic[uuid:%s] has no security policy",
    "en_US": "could no change vm nic security policy, because vm nic[uuid:{0}] has no security policy",
    "zh_CN": "无法更改VM NIC安全策略，因为VM NIC[uuid：{0}]没有安全策略",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 402,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because invalid type[%s]",
    "en_US": "could not update security group rule priority, because invalid type[{0}]",
    "zh_CN": "无法更新安全组规则优先级，因为类型[{0}]无效",
    "arguments": [
      "msg.getType()"
    ],
    "line": 416,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because security group[uuid:%s] is not exist",
    "en_US": "could not update security group rule priority, because security group[uuid:{0}] is not exist",
    "zh_CN": "无法更新安全组规则优先级，因为安全组[uuid：{0}]不存在",
    "arguments": [
      "msg.getSecurityGroupUuid()"
    ],
    "line": 421,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rules is empty",
    "en_US": "could not update security group rule priority, because rules is empty",
    "zh_CN": "无法更新安全组规则优先级，因为规则为空",
    "arguments": [],
    "line": 425,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because security group[uuid:%s] rules size not match",
    "en_US": "could not update security group rule priority, because security group[uuid:{0}] rules size not match",
    "zh_CN": "无法更新安全组规则优先级，因为安全组[uuid：{0}]规则大小不匹配",
    "arguments": [
      "msg.getSecurityGroupUuid()"
    ],
    "line": 435,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rule priority[%d] is invalid",
    "en_US": "could not update security group rule priority, because rule priority[{0}] is invalid",
    "zh_CN": "无法更新安全组规则优先级，因为规则优先级[{0}]无效",
    "arguments": [
      "ao.getPriority()"
    ],
    "line": 440,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because priority[%d] has duplicate",
    "en_US": "could not update security group rule priority, because priority[{0}] has duplicate",
    "zh_CN": "无法更新安全组规则优先级，因为优先级[{0}]重复",
    "arguments": [
      "ao.getPriority()"
    ],
    "line": 443,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rule[uuid:%s] not in security group[uuid:%s]",
    "en_US": "could not update security group rule priority, because rule[uuid:{0}] not in security group[uuid:{1}]",
    "zh_CN": "无法更新安全组规则优先级，因为规则[uuid：{0}]不在安全组[uuid：{1}]中",
    "arguments": [
      "ao.getRuleUuid()",
      "msg.getSecurityGroupUuid()"
    ],
    "line": 449,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because priority[%d] not in security group[uuid:%s]",
    "en_US": "could not update security group rule priority, because priority[{0}] not in security group[uuid:{1}]",
    "zh_CN": "无法更新安全组规则优先级，因为优先级[{0}]不在安全组[uuid：{1}]中",
    "arguments": [
      "ao.getPriority()",
      "msg.getSecurityGroupUuid()"
    ],
    "line": 452,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not update security group rule priority, because rule uuid duplicate",
    "en_US": "could not update security group rule priority, because rule uuid duplicate",
    "zh_CN": "无法更新安全组规则优先级，因为规则uuid重复",
    "arguments": [],
    "line": 457,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule uuid[%s] is not exist",
    "en_US": "could not change security group rule, because security group rule uuid[{0}] is not exist",
    "zh_CN": "无法更改安全组规则，因为安全组规则uuid[{0}]不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 464,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] is default rule, only the description and status can be set",
    "en_US": "could not change security group rule, because security group rule[{0}] is default rule, only the description and status can be set",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]是默认规则，只能设置描述和状态",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 470,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] priority cannot be set to default rule priority[%d]",
    "en_US": "could not change security group rule, because security group rule[{0}] priority cannot be set to default rule priority[{1}]",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]优先级无法设置为默认规则优先级[{1}]",
    "arguments": [
      "msg.getUuid()",
      "SecurityGroupConstant.DEFAULT_RULE_PRIORITY"
    ],
    "line": 476,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group %s rules number[%d] is out of max limit[%d]",
    "en_US": "could not change security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]",
    "zh_CN": "无法更改安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]",
    "arguments": [
      "vo.getType()",
      "count.intValue()",
      "SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)"
    ],
    "line": 485,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because the maximum priority of %s rule is [%d]",
    "en_US": "could not change security group rule, because the maximum priority of {0} rule is [{1}]",
    "zh_CN": "无法更改安全组规则，因为{0}规则的最高优先级为[{1}]",
    "arguments": [
      "vo.getType().toString()",
      "count.intValue()"
    ],
    "line": 488,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because invalid state[%s]",
    "en_US": "could not change security group rule, because invalid state[{0}]",
    "zh_CN": "无法更改安全组规则，因为状态[{0}]无效",
    "arguments": [
      "msg.getState()"
    ],
    "line": 497,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because invalid action[%s]",
    "en_US": "could not change security group rule, because invalid action[{0}]",
    "zh_CN": "无法更改安全组规则，因为协议[{0}]无效",
    "arguments": [
      "msg.getAction()"
    ],
    "line": 505,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because invalid protocol[%s]",
    "en_US": "could not change security group rule, because invalid protocol[{0}]",
    "zh_CN": "无法更改安全组规则，因为协议[{0}]无效",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 513,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] type is Egress, srcIpRange[%s] cannot be set",
    "en_US": "could not change security group rule, because security group rule[{0}] type is Egress, srcIpRange[{1}] cannot be set",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]类型为出口，无法设置SrcIPRange[{1}]",
    "arguments": [
      "msg.getUuid()",
      "msg.getSrcIpRange()"
    ],
    "line": 545,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because security group rule[%s] type is Ingress, dstIpRange[%s] cannot be set",
    "en_US": "could not change security group rule, because security group rule[{0}] type is Ingress, dstIpRange[{1}] cannot be set",
    "zh_CN": "无法更改安全组规则，因为安全组规则[{0}]类型为入口，无法设置dstIpRange[{1}]",
    "arguments": [
      "msg.getUuid()",
      "msg.getDstIpRange()"
    ],
    "line": 542,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because srcIpRange[%s] is set, remoteSecurityGroupUuid[%s] must be empty",
    "en_US": "could not change security group rule, because srcIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty",
    "zh_CN": "无法更改安全组规则，因为已设置SrcIPRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空",
    "arguments": [
      "msg.getSrcIpRange()",
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 535,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because dstIpRange[%s] is set, remoteSecurityGroupUuid[%s] must be empty",
    "en_US": "could not change security group rule, because dstIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty",
    "zh_CN": "无法更改安全组规则，因为已设置dstIpRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空",
    "arguments": [
      "msg.getDstIpRange()",
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 548,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because remote security group[uuid:%s] not found",
    "en_US": "could not change security group rule, because remote security group[uuid:{0}] not found",
    "zh_CN": "无法更改安全组规则，因为找不到远程安全组[uuid：{0}]",
    "arguments": [
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 555,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because remote security group[uuid:%s] is set, srcIpRange and dstIpRange must be empty",
    "en_US": "could not change security group rule, because remote security group[uuid:{0}] is set, srcIpRange and dstIpRange must be empty",
    "zh_CN": "无法更改安全组规则，因为已设置远端安全组[uuid：{0}]，SrcIPRange和DstIPRange必须为空",
    "arguments": [
      "msg.getRemoteSecurityGroupUuid()"
    ],
    "line": 558,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule protocol is [%s], dstPortRange must be set",
    "en_US": "could not change security group rule, because rule protocol is [{0}], dstPortRange must be set",
    "zh_CN": "无法更改安全组规则，因为规则协议为[{0}]，必须设置dstPortRange",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 611,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule protocol is [%s], dstPortRange cannot be empty",
    "en_US": "could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be empty",
    "zh_CN": "无法更改安全组规则，因为规则协议为[{0}]，dstPortRange不能为空",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 603,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule protocol is [%s], dstPortRange cannot be set",
    "en_US": "could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be set",
    "zh_CN": "无法更改安全组规则，因为规则协议为[{0}]，无法设置dstPortRange",
    "arguments": [
      "msg.getProtocol()"
    ],
    "line": 598,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not change security group rule, because rule[%s] is duplicated to rule[uuid:%s] in datebase",
    "en_US": "could not change security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase",
    "zh_CN": "无法更改安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复",
    "arguments": [
      "JSONObjectUtil.toJsonString(sao)",
      "o.getUuid()"
    ],
    "line": 642,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] cidr [%s] is overlapped with frond l3 network[uuid:%s] cidr [%s]",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] cidr [{1}] is overlapped with frond l3 network[uuid:{2}] cidr [{3}]",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]CIDR[{1}]与前端三层网络[uuid：{2}]CIDR[{3}]重叠",
    "arguments": [
      "uuid",
      "backendL3Cidr",
      "frontL3Uuid",
      "frontL3Cidr"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] can not be vpc network because other backend network is not vpc network",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] can not be vpc network because other backend network is not vpc network",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]不能是VPC网络，因为其他后端网络不是VPC网络",
    "arguments": [
      "uuid"
    ],
    "line": 768,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "can\u0027t delete rules of different security group",
    "en_US": "can\u0027t delete rules of different security group",
    "zh_CN": "无法删除不同安全组的规则",
    "arguments": [],
    "line": 804,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "can\u0027t delete default rule[uuid:%s]",
    "en_US": "can\u0027t delete default rule[uuid:{0}]",
    "zh_CN": "无法删除默认规则[uuid：{0}]",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 807,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] is not connected vpc router",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] is not connected vpc router",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]未连接到VPC路由器",
    "arguments": [
      "uuid"
    ],
    "line": 170,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] is connected vpc router [uuid:%s] which is not connect to front network[uuid:%s]",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] is connected vpc router [uuid:{1}] which is not connect to front network[uuid:{2}]",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]连接了VPC路由器[uuid：{1}]，而该路由器未连接到前端网络[uuid：{2}]",
    "arguments": [
      "backendL3Uuids.get(0)",
      "firstBackendVrUuids.get(0)",
      "frontL3Uuid"
    ],
    "line": 835,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "VM nics[uuids:%s] are not on L3 networks that have been attached to the security group[uuid:%s]",
    "en_US": "VM nics[uuids:{0}] are not on L3 networks that have been attached to the security group[uuid:{1}]",
    "zh_CN": "云物理机网卡[uuids:{0}]不在安全组[uuid:{1}]挂载的L3网络上",
    "arguments": [
      "wrongUuids",
      "securityGroupUuid"
    ],
    "line": 897,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because security group[uuid:%s] does not exist",
    "en_US": "could not add security group rule, because security group[uuid:{0}] does not exist",
    "zh_CN": "无法添加安全组规则，因为安全组[uuid：{0}]不存在",
    "arguments": [
      "uuid"
    ],
    "line": 933,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the rules cannot be empty or exceed the max number %d",
    "en_US": "could not add security group rule, because the rules cannot be empty or exceed the max number {0}",
    "zh_CN": "无法添加安全组规则，因为规则不能为空或超过最大数量{0}",
    "arguments": [
      "SecurityGroupConstant.ONE_API_RULES_MAX_NUM"
    ],
    "line": 922,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because duplicate uuid in remoteSecurityGroupUuids: %s",
    "en_US": "could not add security group rule, because duplicate uuid in remoteSecurityGroupUuids: {0}",
    "zh_CN": "无法添加安全组规则，因为RemoteSecurityGroupuuid中存在重复的uuid：{0}",
    "arguments": [
      "msg.getRemoteSecurityGroupUuids()"
    ],
    "line": 927,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the remote security group uuid is conflict",
    "en_US": "could not add security group rule, because the remote security group uuid is conflict",
    "zh_CN": "无法添加安全组规则，因为远端安全组uuid冲突",
    "arguments": [],
    "line": 938,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because rule priority must greater than %d or equals %d",
    "en_US": "could not add security group rule, because rule priority must greater than {0} or equals {1}",
    "zh_CN": "无法添加安全组规则，因为规则优先级必须大于{0}或等于{1}",
    "arguments": [
      "SecurityGroupConstant.DEFAULT_RULE_PRIORITY",
      "SecurityGroupConstant.LOWEST_RULE_PRIORITY"
    ],
    "line": 974,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule type[%s], valid types are %s",
    "en_US": "could not add security group rule, because invalid rule type[{0}], valid types are {1}",
    "zh_CN": "无法添加安全组规则，因为规则类型[{0}]无效，有效类型为{1}",
    "arguments": [
      "ao.getType()",
      "SecurityGroupRuleType.getAllType()"
    ],
    "line": 982,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule state[%s], valid states are %s",
    "en_US": "could not add security group rule, because invalid rule state[{0}], valid states are {1}",
    "zh_CN": "无法添加安全组规则，因为规则状态[{0}]无效，有效状态为{1}",
    "arguments": [
      "ao.getState()",
      "SecurityGroupRuleState.getAllState()"
    ],
    "line": 989,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule protocol[%s], valid protocols are %s",
    "en_US": "could not add security group rule, because invalid rule protocol[{0}], valid protocols are {1}",
    "zh_CN": "无法添加安全组规则，因为规则协议[{0}]无效，有效协议为{1}",
    "arguments": [
      "ao.getProtocol()",
      "SecurityGroupRuleProtocolType.getAllProtocol()"
    ],
    "line": 994,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule action[%s], valid actions are %s",
    "en_US": "could not add security group rule, because invalid rule action[{0}], valid actions are {1}",
    "zh_CN": "无法添加安全组规则，因为规则动作[{0}]无效，有效动作为{1}",
    "arguments": [
      "ao.getAction()",
      "SecurityGroupRuleAction.getAllAction()"
    ],
    "line": 1001,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule ipVersion[%d], valid ipVersions are %d/%d",
    "en_US": "could not add security group rule, because invalid rule ipVersion[{0}], valid ipVersions are {1}/{2}",
    "zh_CN": "无法添加安全组规则，因为规则IPVersion[{0}]无效，有效的IPVersion为{1}/{2}",
    "arguments": [
      "ao.getIpVersion()",
      "IPv6Constants.IPv4",
      "IPv6Constants.IPv6"
    ],
    "line": 1009,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the dstIpRange[%s] is not allowed to set for ingress rule",
    "en_US": "could not add security group rule, because the dstIpRange[{0}] is not allowed to set for ingress rule",
    "zh_CN": "无法添加安全组规则，因为不允许为入口规则设置dstIpRange[{0}]",
    "arguments": [
      "ao.getDstIpRange()"
    ],
    "line": 1037,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the allowedCidr[%s] and srcIpRange[%s] are in conflict",
    "en_US": "could not add security group rule, because the allowedCidr[{0}] and srcIpRange[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为allowedcidr[{0}]和srciprange[{1}]冲突",
    "arguments": [
      "ao.getAllowedCidr()",
      "ao.getSrcIpRange()"
    ],
    "line": 1042,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the ip range[%s] and remoteSecurityGroupUuid[%s] are in conflict",
    "en_US": "could not add security group rule, because the ip range[{0}] and remoteSecurityGroupUuid[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为IP范围[{0}]和RemoteSecurityGroupuuid[{1}]冲突",
    "arguments": [
      "ao.getDstIpRange()",
      "ao.getRemoteSecurityGroupUuid()"
    ],
    "line": 1031,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the srcIpRange[%s] is not allowed to set for egress rule",
    "en_US": "could not add security group rule, because the srcIpRange[{0}] is not allowed to set for egress rule",
    "zh_CN": "无法添加安全组规则，因为不允许为出口规则设置SrcIPRange[{0}]",
    "arguments": [
      "ao.getSrcIpRange()"
    ],
    "line": 1019,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the allowedCidr[%s] and dstIpRange[%s] are in conflict",
    "en_US": "could not add security group rule, because the allowedCidr[{0}] and dstIpRange[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为AllowedCidr[{0}]和dstIpRange[{1}]冲突",
    "arguments": [
      "ao.getAllowedCidr()",
      "ao.getDstIpRange()"
    ],
    "line": 1024,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because invalid rule endPort[%d], endPort must be greater than or equal to startPort[%d]",
    "en_US": "could not add security group rule, because invalid rule endPort[{0}], endPort must be greater than or equal to startPort[{1}]",
    "zh_CN": "无法添加安全组规则，因为规则endPort[{0}]无效，endPort必须大于或等于startPort[{1}]",
    "arguments": [
      "ao.getEndPort()",
      "ao.getStartPort()"
    ],
    "line": 1073,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because dstPortRange[%s] and starPort[%s] are in conflict",
    "en_US": "could not add security group rule, because dstPortRange[{0}] and starPort[{1}] are in conflict",
    "zh_CN": "无法添加安全组规则，因为DstPortRange[{0}]和StarPort[{1}]冲突",
    "arguments": [
      "ao.getDstPortRange()",
      "ao.getStartPort()"
    ],
    "line": 1076,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the protocol type TCP/UDP must set dstPortRange",
    "en_US": "could not add security group rule, because the protocol type TCP/UDP must set dstPortRange",
    "zh_CN": "无法添加安全组规则，因为协议类型TCP/UDP必须设置dstPortRange",
    "arguments": [],
    "line": 1087,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the protocol type ALL or ICMP cant not set dstPortRange[%s]",
    "en_US": "could not add security group rule, because the protocol type ALL or ICMP cant not set dstPortRange[{0}]",
    "zh_CN": "无法添加安全组规则，因为协议类型ALL或ICMP无法设置DstPortRange[{0}]",
    "arguments": [
      "ao.getDstPortRange()"
    ],
    "line": 1065,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because the protocol type ALL or ICMP cant not set startPort or endPort",
    "en_US": "could not add security group rule, because the protocol type ALL or ICMP cant not set startPort or endPort",
    "zh_CN": "无法添加安全组规则，因为协议类型ALL或ICMP无法设置StartPort或EndPort",
    "arguments": [],
    "line": 1068,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because rule[%s] and rule[%s] are dupilicated",
    "en_US": "could not add security group rule, because rule[{0}] and rule[{1}] are dupilicated",
    "zh_CN": "无法添加安全组规则，因为规则[{0}]和规则[{1}]重复",
    "arguments": [
      "JSONObjectUtil.toJsonString(newRules.get(i))",
      "JSONObjectUtil.toJsonString(newRules.get(j))"
    ],
    "line": 1097,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because rule[%s] is duplicated to rule[uuid:%s] in datebase",
    "en_US": "could not add security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase",
    "zh_CN": "无法添加安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复",
    "arguments": [
      "JSONObjectUtil.toJsonString(sao)",
      "vo.getUuid()"
    ],
    "line": 1121,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because security group %s rules has reached the maximum limit[%d]",
    "en_US": "could not add security group rule, because security group {0} rules has reached the maximum limit[{1}]",
    "zh_CN": "无法添加安全组规则，因为安全组{0}规则已达到最大限制[{1}]",
    "arguments": [
      "SecurityGroupRuleType.Egress",
      "SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)"
    ],
    "line": 1136,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because security group %s rules number[%d] is out of max limit[%d]",
    "en_US": "could not add security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]",
    "zh_CN": "无法添加安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]",
    "arguments": [
      "SecurityGroupRuleType.Egress",
      "(egressRuleCount + toCreateEgressRuleCount)",
      "SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)"
    ],
    "line": 1144,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because priority[%d] must be consecutive, the ingress rule maximum priority is [%d]",
    "en_US": "could not add security group rule, because priority[{0}] must be consecutive, the ingress rule maximum priority is [{1}]",
    "zh_CN": "无法添加安全组规则，因为优先级[{0}]必须连续，入口规则最大优先级为[{1}]",
    "arguments": [
      "msg.getPriority()",
      "ingressRuleCount"
    ],
    "line": 1148,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not add security group rule, because priority[%d] must be consecutive, the egress rule maximum priority is [%d]",
    "en_US": "could not add security group rule, because priority[{0}] must be consecutive, the egress rule maximum priority is [{1}]",
    "zh_CN": "无法添加安全组规则，因为优先级[{0}]必须是连续的，出口规则最大优先级为[{1}]",
    "arguments": [
      "msg.getPriority()",
      "egressRuleCount"
    ],
    "line": 1151,
    "fileName": "src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] must be vpc network because other backend network is vpc network",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] must be vpc network because other backend network is vpc network",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]必须是VPC网络，因为其他后端网络是VPC网络",
    "arguments": [
      "uuid"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] is connected vpc router [uuid:%s] while other backend network is connected to vpc router[uuid:%s]",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] is connected vpc router [uuid:{1}] while other backend network is connected to vpc router[uuid:{2}]",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]连接到VPC路由器[uuid：{1}]，而另一个后端网络连接到VPC路由器[uuid：{2}]",
    "arguments": [
      "uuid",
      "bVrUuids.get(0)",
      "firstBackendVrUuids.get(0)"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] must be private flat network because frond l3 network is private flat network",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] must be private flat network because frond l3 network is private flat network",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]必须是专用三层网络，因为前端三层网络是专用三层网络",
    "arguments": [
      "uuid"
    ],
    "line": 186,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. frontend network [uuid:%s] is not connected vpc router",
    "en_US": "could not execute the api operation. frontend network [uuid:{0}] is not connected vpc router",
    "zh_CN": "无法执行API操作。前端网络[uuid：{0}]未连接VPC路由器",
    "arguments": [
      "frontL3.getUuid()"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] must be vpc network because frond l3 network is vpc network",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] must be vpc network because frond l3 network is vpc network",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]必须是VPC网络，因为前端三层网络是VPC网络",
    "arguments": [
      "uuid"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not execute the api operation. backend network [uuid:%s] is connected vpc router [uuid:%s] while front network is connected to vpc router[uuid:%s]",
    "en_US": "could not execute the api operation. backend network [uuid:{0}] is connected vpc router [uuid:{1}] while front network is connected to vpc router[uuid:{2}]",
    "zh_CN": "无法执行API操作。后端网络[uuid：{0}]连接到VPC路由器[uuid：{1}]，前端网络连接到VPC路由器[uuid：{2}]",
    "arguments": [
      "uuid",
      "backendVrUuids.get(0)",
      "frontVrUuids.get(0)"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb group because invalid deploy type %s",
    "en_US": "could not create slb group because invalid deploy type {0}",
    "zh_CN": "无法创建SLB组，因为部署类型{0}无效",
    "arguments": [
      "msg.getDeployType()"
    ],
    "line": 254,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not create slb group because invalid backend type %s",
    "en_US": "could not create slb group because invalid backend type {0}",
    "zh_CN": "无法创建SLB组，因为后端类型{0}无效",
    "arguments": [
      "msg.getBackendType()"
    ],
    "line": 263,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "can not detach front end l3 network [uuid:%s] from SLB instance",
    "en_US": "can not detach front end l3 network [uuid:{0}] from SLB instance",
    "zh_CN": "无法从SLB实例分离前端三层网络[uuid：{0}]",
    "arguments": [
      "frontL3Uuid",
      "slbVO.getUuid()"
    ],
    "line": 298,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "can not detach management l3 network [uuid:%s] from SLB instance",
    "en_US": "can not detach management l3 network [uuid:{0}] from SLB instance",
    "zh_CN": "无法从SLB实例分离管理三层网络[uuid：{0}]",
    "arguments": [
      "slbVO.getManagementNetworkUuid()",
      "slbVO.getUuid()"
    ],
    "line": 303,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "can not detach nic [uuid:%s] from SLB instance, because it is the last backend l3 network nic",
    "en_US": "can not detach nic [uuid:{0}] from SLB instance, because it is the last backend l3 network nic",
    "zh_CN": "无法从SLB实例分离NIC[uuid：{0}]，因为它是最后一个后端三层网络NIC",
    "arguments": [
      "msg.getVmNicUuid()"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "can not create load balancer because vip [uuid:%s] has attached other network service [%s]",
    "en_US": "can not create load balancer because vip [uuid:{0}] has attached other network service [{1}]",
    "zh_CN": "无法创建负载平衡器，因为VIP[uuid：{0}]已附加其他网络服务[{1}]",
    "arguments": [
      "msg.getVipUuid()",
      "vipVO.getServicesTypes()"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "can not create load balancer because vip [uuid:%s] has attached to vpc router [%s]",
    "en_US": "can not create load balancer because vip [uuid:{0}] has attached to vpc router [{1}]",
    "zh_CN": "无法创建负载平衡器，因为VIP[uuid：{0}]已连接到VPC路由器[{1}]",
    "arguments": [
      "msg.getVipUuid()",
      "vrUuids"
    ],
    "line": 350,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "can not create load balancer because invalid slb group [uuid:%s]",
    "en_US": "can not create load balancer because invalid slb group [uuid:{0}]",
    "zh_CN": "无法创建负载平衡器，因为SLB组[uuid：{0}]无效",
    "arguments": [
      "slbGroupUuid"
    ],
    "line": 356,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not add vmnic to load balancer server  group because l3 network is not connected slb instance",
    "en_US": "could not add vmnic to load balancer server  group because l3 network is not connected slb instance",
    "zh_CN": "无法将vmnic添加到负载平衡器服务器组，因为三层网络未连接到SLB实例",
    "arguments": [],
    "line": 407,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not add vmnic to load balancer server  group because l3 network [uuid:%s] is connected any vpc router",
    "en_US": "could not add vmnic to load balancer server  group because l3 network [uuid:{0}] is connected any vpc router",
    "zh_CN": "无法将vmnic添加到负载平衡器服务器组，因为三层网络[uuid：{0}]已连接到任何VPC路由器",
    "arguments": [
      "uuid"
    ],
    "line": 389,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "could not add vmnic to load balancer server  group because l3 network[uuid:%s] is connected to different vpc router",
    "en_US": "could not add vmnic to load balancer server  group because l3 network[uuid:{0}] is connected to different vpc router",
    "zh_CN": "无法将vmnic添加到负载平衡器服务器组，因为三层网络[uuid：{0}]已连接到不同的VPC路由器",
    "arguments": [
      "uuid"
    ],
    "line": 396,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java"
  },
  {
    "raw": "can not find nic of slb instance [uuid:%s] which is attached to slb group front l3 network [uuid:%s]",
    "en_US": "can not find nic of slb instance [uuid:{0}] which is attached to slb group front l3 network [uuid:{1}]",
    "zh_CN": "找不到SLB实例[uuid：{0}]的网卡，该网卡挂接在SLB组前三层网络[uuid：{1}]上",
    "arguments": [
      "slbInstance.getUuid()",
      "frontL3Uuid"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbCreatePublicVipFlow.java"
  },
  {
    "raw": "can not find slb vm instance",
    "en_US": "can not find slb vm instance",
    "zh_CN": "找不到SLB云主机实例",
    "arguments": [],
    "line": 38,
    "fileName": "src/main/java/org/zstack/network/service/slb/SlbVyosBackend.java"
  },
  {
    "raw": "system vip can not be deleted by API message",
    "en_US": "system vip can not be deleted by API message",
    "zh_CN": "API消息无法删除系统VIP",
    "arguments": [],
    "line": 48,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "unsupported ip allocation strategy[%s]",
    "en_US": "unsupported ip allocation strategy[{0}]",
    "zh_CN": "不支持的ip分配策略[{0}]",
    "arguments": [
      "msg.getAllocatorStrategy()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "requiredIp[%s] is not in valid IPv4 mediaType",
    "en_US": "requiredIp[{0}] is not in valid IPv4 mediaType",
    "zh_CN": "请求的ip[{0}]不是有效的IPv4地址",
    "arguments": [
      "msg.getRequiredIp()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "there is already a vip[%s] on l3Network[uuid:%s]",
    "en_US": "there is already a vip[{0}] on l3Network[uuid:{1}]",
    "zh_CN": "已有一个vip[{0}]在三层网络[uuid:{1}]上",
    "arguments": [
      "msg.getRequiredIp()",
      "msg.getL3NetworkUuid()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "required ip address [%s] is already used",
    "en_US": "required ip address [{0}] is already used",
    "zh_CN": "所需的IP地址[{0}]已被使用",
    "arguments": [
      "msg.getRequiredIp()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "could not create vip, because can not determine the vip version",
    "en_US": "could not create vip, because can not determine the vip version",
    "zh_CN": "无法创建VIP，因为无法确定VIP版本",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java"
  },
  {
    "raw": "service provider of the vip[uuid:%s, name:%s, ip: %s] has been set to %s",
    "en_US": "service provider of the vip[uuid:{0}, name:{1}, ip: {2}] has been set to {3}",
    "zh_CN": "vip[uuid:{0}, name:{1}, ip: {2}]的服务提供器已经被设置成[{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getIp()",
      "self.getServiceProvider()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/network/service/vip/VipBase.java"
  },
  {
    "raw": "VipQos for ipv6 wil be added soon",
    "en_US": "VipQos for ipv6 wil be added soon",
    "zh_CN": "IPv6的VIPQoS将很快添加",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] already existed",
    "en_US": "VipQos for Vip [uuid: {0}] already existed",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos已经存在了",
    "arguments": [
      "msg.getVipUuid()"
    ],
    "line": 53,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] port %s already existed",
    "en_US": "VipQos for Vip [uuid: {0}] port {1} already existed",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos端口{1}已经存在",
    "arguments": [
      "msg.getVipUuid()",
      "Integer.toString(msg.getPort())"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "SetVipQos MUST set InboundBandwidth or OutboundBandwidth",
    "en_US": "SetVipQos MUST set InboundBandwidth or OutboundBandwidth",
    "zh_CN": "设置虚拟IP的Qos是必须设置上行网络带宽和下行网络带宽",
    "arguments": [],
    "line": 59,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "Cannot set Qos for this Vip. Not all peer l3networks provide VipQos service.",
    "en_US": "Cannot set Qos for this Vip. Not all peer l3networks provide VipQos service.",
    "zh_CN": "无法设置此VIP的QoS。并非所有对等三层网络都提供VIPQoS服务。",
    "arguments": [],
    "line": 67,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] does not exist",
    "en_US": "VipQos for Vip [uuid: {0}] does not exist",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "VipQos for Vip [uuid: %s] port %s does not exist",
    "en_US": "VipQos for Vip [uuid: {0}] port {1} does not exist",
    "zh_CN": "虚拟IP[uuid: {0}]的Qos端口{1}不存在",
    "arguments": [
      "msg.getUuid()",
      "Integer.toString(msg.getPort())"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java"
  },
  {
    "raw": "Can not find VipQos backend for Vip [uuid:%s]",
    "en_US": "Can not find VipQos backend for Vip [uuid:{0}]",
    "zh_CN": "未找到虚拟IP的Qos后端",
    "arguments": [
      "vipUuid"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/VipQosManagerImpl.java"
  },
  {
    "raw": "operation error, vip %s has not bind to vm",
    "en_US": "operation error, vip {0} has not bind to vm",
    "zh_CN": "操作失败，虚拟IP{0}没有绑定云主机",
    "arguments": [
      "hostUuid"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/network/service/vipQos/flat/FlatVipQosBackend.java"
  },
  {
    "raw": "the virtual router[name:%s, uuid:%s, current state:%s] is not running,and cannot perform required operation. Please retry your operation later once it is running",
    "en_US": "the virtual router[name:{0}, uuid:{1}, current state:{2}] is not running,and cannot perform required operation. Please retry your operation later once it is running",
    "zh_CN": "云路由[name:{0}, uuid:{1}, current state:{2}]没有运行，无法执行请求的操作。请在其启动后重试",
    "arguments": [
      "self.getName()",
      "self.getUuid()",
      "self.getState()"
    ],
    "line": 656,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "virtual router[uuid:%s] is in status of %s that cannot make http call to %s",
    "en_US": "virtual router[uuid:{0}] is in status of {1} that cannot make http call to {2}",
    "zh_CN": "云路由[uuid:{0}]处于状态{1}中，无法向{2}发送http调用",
    "arguments": [
      "self.getUuid()",
      "getSelf().getStatus()",
      "msg.getPath()"
    ],
    "line": 661,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "virtual router[uuid:%s] has no management nic that cannot make http call to %s",
    "en_US": "virtual router[uuid:{0}] has no management nic that cannot make http call to {1}",
    "zh_CN": "虚拟路由器[uuid：{0}]没有无法对{1}进行HTTP调用的管理NIC",
    "arguments": [
      "self.getUuid()",
      "msg.getPath()"
    ],
    "line": 666,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "unable to add nic[ip:%s, mac:%s] to virtual router vm[uuid:%s ip:%s], because %s",
    "en_US": "unable to add nic[ip:{0}, mac:{1}] to virtual router vm[uuid:{2} ip:{3}], because {4}",
    "zh_CN": "不能添加网卡[ip:{0}, mac:{1}]到虚拟路由设备[uuid:{2} ip:{3}]，因为{4}",
    "arguments": [
      "info.getIp()",
      "info.getMac()",
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()"
    ],
    "line": 995,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java"
  },
  {
    "raw": "l3 uuid[:%s] is same to default network of virtual router [uuid:%s]",
    "en_US": "l3 uuid[:{0}] is same to default network of virtual router [uuid:{1}]",
    "zh_CN": "L3 uuid[：{0}]与虚拟路由器[uuid：{1}]的默认网络相同",
    "arguments": [
      "msg.getDefaultRouteL3NetworkUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "l3 uuid[:%s] is not attached to virtual router [uuid:%s]",
    "en_US": "l3 uuid[:{0}] is not attached to virtual router [uuid:{1}]",
    "zh_CN": "L3 uuid[：{0}]未连接到虚拟路由器[uuid：{1}]",
    "arguments": [
      "msg.getDefaultRouteL3NetworkUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "could not set the default network, because l3 uuid[:%s] is not public network",
    "en_US": "could not set the default network, because l3 uuid[:{0}] is not public network",
    "zh_CN": "设置默认网络失败，因为三层网路[:{0}] 不是公有网络",
    "arguments": [
      "msg.getDefaultRouteL3NetworkUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "could not set the default network, because l3 uuid[:%s] is management network",
    "en_US": "could not set the default network, because l3 uuid[:{0}] is management network",
    "zh_CN": "设置默认网络失败，因为三层网路[:{0}] 是管理网络",
    "arguments": [
      "msg.getDefaultRouteL3NetworkUuid()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s]\u0027s mediaType is %s, the mediaType of a virtual router image must be %s",
    "en_US": "image[uuid:{0}]\u0027s mediaType is {1}, the mediaType of a virtual router image must be {2}",
    "zh_CN": "镜像[uuid:{0}]的mediaType为{1}，云路由的mediaType必须为{2}",
    "arguments": [
      "msg.getImageUuid()",
      "type",
      "ImageMediaType.RootVolumeTemplate"
    ],
    "line": 219,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is of format %s, cannot be used for virtual router",
    "en_US": "image[uuid:{0}] is of format {1}, cannot be used for virtual router",
    "zh_CN": "镜像[uuid:{0}]的格式为{1}，无法被用于云路由",
    "arguments": [
      "msg.getImageUuid()",
      "format"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "management network[uuid:%s] is not in the same zone[uuid:%s] this offering is going to create",
    "en_US": "management network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create",
    "zh_CN": "管理网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "can not create virtual router offering, because management network doesn\u0027t support ipv6 yet",
    "en_US": "can not create virtual router offering, because management network doesn\u0027t support ipv6 yet",
    "zh_CN": "无法创建虚拟路由器产品，因为管理网络尚不支持IPv6",
    "arguments": [],
    "line": 196,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "public network[uuid:%s] is not in the same zone[uuid:%s] this offering is going to create",
    "en_US": "public network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create",
    "zh_CN": "公共网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 208,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] has the SNAT service enabled, it cannot be used as a public network",
    "en_US": "the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a public network",
    "zh_CN": "三层网络[uuid: {0}]启用了SNAT服务，无法被用作公共网络",
    "arguments": [
      "msg.getPublicNetworkUuid()"
    ],
    "line": 236,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] has the SNAT service enabled, it cannot be used as a management network",
    "en_US": "the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a management network",
    "zh_CN": "三层网络[uuid: {0}]启用了SNAT服务，无法被用作管理网络",
    "arguments": [
      "msg.getManagementNetworkUuid()"
    ],
    "line": 234,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the L3 network[uuid: %s] is same network address with [uuid: %s], it cannot be used for virtual router",
    "en_US": "the L3 network[uuid: {0}] is same network address with [uuid: {1}], it cannot be used for virtual router",
    "zh_CN": "三层网络[uuid: {0}] 和 网络 [uuid: {1}] 具有相同的网络地址，无法被用于云路由",
    "arguments": [
      "msg.getManagementNetworkUuid()",
      "msg.getPublicNetworkUuid()"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the management network[uuid:%s] doesn\u0027t have any IP range",
    "en_US": "the management network[uuid:{0}] doesn\u0027t have any IP range",
    "zh_CN": "管理网络[uuid:{0}]不包含任何的IP范围",
    "arguments": [
      "managementNetworkUuid"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "the management network[uuid:%s, gateway:%s] is not reachable",
    "en_US": "the management network[uuid:{0}, gateway:{1}] is not reachable",
    "zh_CN": "管理网络[uuid:{0}, gateway:{1}]不可抵达",
    "arguments": [
      "managementNetworkUuid",
      "gateway"
    ],
    "line": 274,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java"
  },
  {
    "raw": "failed to create VirtualRouterBootstrapIso[%s] on kvm host[uuid:%s, ip:%s] for virtual router[uuid:%s], because %s",
    "en_US": "failed to create VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}, ip:{2}] for virtual router[uuid:{3}], because {4}",
    "zh_CN": "创建云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}, ip:{2}]上为云路由[uuid:{3}]执行的，原因为{4}",
    "arguments": [
      "iso.getIsoPath()",
      "vrSpec.getDestHost().getUuid()",
      "vrSpec.getDestHost().getManagementIp()",
      "iso.getVirtualRouterUuid()",
      "rsp.getError()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java"
  },
  {
    "raw": "failed to delete VirtualRouterBootstrapIso[%s] on kvm host[uuid:%s] for virtual router[uuid:%s], because %s",
    "en_US": "failed to delete VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}] for virtual router[uuid:{2}], because {3}",
    "zh_CN": "删除云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}]上为云路由[uuid:{2}]执行的，原因为{3}",
    "arguments": [
      "iso.getIsoPath()",
      "hostUuid",
      "iso.getVirtualRouterUuid()",
      "rsp.getError()"
    ],
    "line": 136,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java"
  },
  {
    "raw": "cannot create virtual Router vm while virtual router network overlaps with private network in ip ",
    "en_US": "cannot create virtual Router vm while virtual router network overlaps with private network in ip ",
    "zh_CN": "当云路由规格的网络和私有网络IP范围有重叠时，无法创建云路由设备",
    "arguments": [],
    "line": 289,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "No virtual router instance offering with uuid:%s is found",
    "en_US": "No virtual router instance offering with uuid:{0} is found",
    "zh_CN": "找不到uuid为{0}的虚拟路由器实例产品",
    "arguments": [
      "offeringUuid"
    ],
    "line": 716,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "the network of virtual router instance offering with uuid:%s can\u0027t be same with private l3 network uuid:%s",
    "en_US": "the network of virtual router instance offering with uuid:{0} can\u0027t be same with private l3 network uuid:{1}",
    "zh_CN": "uuid为{0}的虚拟路由器实例提供的网络不能与uuid为{1}的专用三层网络相同",
    "arguments": [
      "offeringUuid",
      "resourceUuid"
    ],
    "line": 720,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "cannot add ip range, because l3 network[uuid:%s] is management network of virtual router offering",
    "en_US": "cannot add ip range, because l3 network[uuid:{0}] is management network of virtual router offering",
    "zh_CN": "无法添加IP范围，因为三层网络[uuid：{0}]是虚拟路由器产品的管理网络",
    "arguments": [
      "l3NetworkUuid"
    ],
    "line": 1434,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "cannot add ip range, because l3 network[uuid:%s] is management network of virtual router",
    "en_US": "cannot add ip range, because l3 network[uuid:{0}] is management network of virtual router",
    "zh_CN": "无法添加IP范围，因为三层网络[uuid：{0}]是虚拟路由器的管理网络",
    "arguments": [
      "l3NetworkUuid"
    ],
    "line": 1439,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "couldn\u0027t add image, because systemTag [%s] includes invalid appliance image type [%s]",
    "en_US": "couldn\u0027t add image, because systemTag [{0}] includes invalid appliance image type [{1}]",
    "zh_CN": "无法添加镜像，因为系统标记[{0}]包含无效的装置镜像类型[{1}]",
    "arguments": [
      "tag",
      "type"
    ],
    "line": 1466,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "failed tot attach virtual router network services to l3Network[uuid:%s]. When eip is selected, snat must be selected too",
    "en_US": "failed tot attach virtual router network services to l3Network[uuid:{0}]. When eip is selected, snat must be selected too",
    "zh_CN": "挂载虚拟路由网络服务到三层网络[uuid:{0}]失败。选中EIP服务时，SNAT服务也必须被选中",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 1504,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "failed tot attach virtual router network services to l3Network[uuid:%s]. When port forwarding is selected, snat must be selected too",
    "en_US": "failed tot attach virtual router network services to l3Network[uuid:{0}]. When port forwarding is selected, snat must be selected too",
    "zh_CN": "挂载虚拟路由网络服务到三层网络[uuid:{0}]失败。选中端口转发服务时，SNAT服务也必须被选中",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 1508,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "update virtual router [uuid:%s] default network failed, because %s",
    "en_US": "update virtual router [uuid:{0}] default network failed, because {1}",
    "zh_CN": "更新虚拟路由器[uuid：{0}]默认网络失败，原因是{1}",
    "arguments": [
      "vrUuid",
      "ret.getError()"
    ],
    "line": 2445,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "invalid ApplianceVmType %s",
    "en_US": "invalid ApplianceVmType {0}",
    "zh_CN": "无效的设备VMType{0}",
    "arguments": [
      "ss[1]"
    ],
    "line": 2541,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java"
  },
  {
    "raw": "unable to add dhcp entries to virtual router vm[uuid:%s ip:%s], because %s, dhcp entry[%s]",
    "en_US": "unable to add dhcp entries to virtual router vm[uuid:{0} ip:{1}], because {2}, dhcp entry[{3}]",
    "zh_CN": "无法向云路由[uuid:{0} ip:{1}]添加DHCP条目，因为{2}，DHCP条目为[{3}]",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "rsp.getError()",
      "JSONObjectUtil.toJsonString(info)"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java"
  },
  {
    "raw": "no virtual router is configured for vyos dhcp",
    "en_US": "no virtual router is configured for vyos dhcp",
    "zh_CN": "没有为VyOS DHCP配置虚拟路由器",
    "arguments": [],
    "line": 375,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java"
  },
  {
    "raw": "unable to program dhcp entries served by virtual router[uuid:%s, ip:%s], %s",
    "en_US": "unable to program dhcp entries served by virtual router[uuid:{0}, ip:{1}], {2}",
    "zh_CN": "无法执行由云路由[uuid:{0}, ip:{1}]提供的DHCP条目{2}.",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "ret.getError()"
    ],
    "line": 208,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java"
  },
  {
    "raw": "virtual router[uuid:%s, ip:%s] failed to configure dns%s for L3Network[uuid:%s, name:%s], %s",
    "en_US": "virtual router[uuid:{0}, ip:{1}] failed to configure dns{2} for L3Network[uuid:{3}, name:{4}], {5}",
    "zh_CN": "云路由[uuid:{0}, ip:{1}]未能为三层网络[uuid:{3}, name:{4}]配置DNS{2}，错误细节: {5}",
    "arguments": [
      "vr.getUuid()",
      "vr.getManagementNic().getIp()",
      "struct",
      "l3.getUuid()",
      "l3.getName()",
      "ret.getError()"
    ],
    "line": 210,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterDnsBackend.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to configure dns%s, %s ",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to configure dns{2}, {3} ",
    "zh_CN": "云路由[name: {0}, uuid: {1}]未能配置DNS{2}，错误细节: {3}",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "JSONObjectUtil.toJsonString(dns)",
      "ret.getError()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java"
  },
  {
    "raw": "failed to create eip[uuid:%s, name:%s, ip:%s] for vm nic[uuid:%s] on virtual router[uuid:%s], %s",
    "en_US": "failed to create eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}",
    "zh_CN": "无法为云主机网卡[uuid:{3}]在云路由[uuid:{4}]上创建EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节: {5}",
    "arguments": [
      "struct.getEip().getUuid()",
      "struct.getEip().getName()",
      "struct.getVip().getIp()",
      "struct.getNic().getUuid()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to EIP[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to EIP[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]上为三层网络[uuid:{1}]找到了云路由规格[uuid:{0}]；但是，其公共网络[uuid:{3}]和EIP[uuid:{4}]的公共网络不是同一个三层网络。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该三层网络指定一个特定的云路有规格",
    "arguments": [
      "offering.getUuid()",
      "l3inv.getUuid()",
      "l3inv.getZoneUuid()",
      "struct.getVip().getL3NetworkUuid()",
      "struct.getEip().getUuid()"
    ],
    "line": 226,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "failed to remove eip[uuid:%s, name:%s, ip:%s] for vm nic[uuid:%s] on virtual router[uuid:%s], %s",
    "en_US": "failed to remove eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}",
    "zh_CN": "未能在云路由[uuid:{4}]上为云主机网卡[uuid:{3}]移除EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节: {5}",
    "arguments": [
      "struct.getEip().getUuid()",
      "struct.getEip().getName()",
      "struct.getVip().getIp()",
      "struct.getNic().getUuid()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 318,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java"
  },
  {
    "raw": "failed to sync eip on virtual router[uuid:%s], %s",
    "en_US": "failed to sync eip on virtual router[uuid:{0}], {1}",
    "zh_CN": "未能在云路由[uuid:{0}]上同步EIP，错误细节: {1}",
    "arguments": [
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterSyncEipOnStartFlow.java"
  },
  {
    "raw": "ha group extension point nil",
    "en_US": "ha group extension point nil",
    "zh_CN": "HA组扩展点Nil",
    "arguments": [],
    "line": 63,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/ha/VirtualRouterHaBackendImpl.java"
  },
  {
    "raw": "new add vm nics[uuids:%s] and attached vmnics are not on the same vrouter, they are on vrouters[uuids:%s]",
    "en_US": "new add vm nics[uuids:{0}] and attached vmnics are not on the same vrouter, they are on vrouters[uuids:{1}]",
    "zh_CN": "新添加的虚拟网卡[uuids:{0}]和绑定云主机的网卡没有在一个云路由上，它们分别在云路由[uuids:{1}]上",
    "arguments": [
      "msg.getVmNicUuids()",
      "vrUuids"
    ],
    "line": 170,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "new add vm nics[uuids:%s] and peer l3s[uuids:%s] of loadbalancer[uuid: %s]\u0027s vip are not on the same vrouter, they are on vrouters[uuids:%s]",
    "en_US": "new add vm nics[uuids:{0}] and peer l3s[uuids:{1}] of loadbalancer[uuid: {2}]\u0027s vip are not on the same vrouter, they are on vrouters[uuids:{3}]",
    "zh_CN": "新添加的云主机网卡[uuids:{0}]和负载均衡器[uuid: {2}]的弹性IP的三层网络[uuids:{1}]没有在相同的云路由上，它们分别在云路由[uuids:{3}]上",
    "arguments": [
      "msg.getVmNicUuids()",
      "peerL3NetworkUuids",
      "msg.getLoadBalancerUuid()",
      "vrUuids"
    ],
    "line": 200,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "vmnic must be specified for share loadbalancer",
    "en_US": "vmnic must be specified for share loadbalancer",
    "zh_CN": "必须为Share LoadBalancer指定vmnic",
    "arguments": [],
    "line": 1320,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "cannot find virtual router for load balancer [uuid:%s]",
    "en_US": "cannot find virtual router for load balancer [uuid:{0}]",
    "zh_CN": "未能为负载均衡器[uuid:{0}]找到云路由",
    "arguments": [
      "struct.getLb().getUuid()"
    ],
    "line": 1778,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java"
  },
  {
    "raw": "guest l3Network[uuid:%s, name:%s] needs SNAT service provided by virtual router, but public l3Network[uuid:%s] of virtual router offering[uuid: %s, name:%s] is the same to this guest l3Network",
    "en_US": "guest l3Network[uuid:{0}, name:{1}] needs SNAT service provided by virtual router, but public l3Network[uuid:{2}] of virtual router offering[uuid: {3}, name:{4}] is the same to this guest l3Network",
    "zh_CN": "用户三层网络[uuid:{0}, name:{1}]需要云路由提供的SNAT服务，但是云路由规格[uuid: {3}, name:{4}]的公共三层网络[uuid:{2}]与该客户三层网络相同",
    "arguments": [
      "guestL3.getUuid()",
      "guestL3.getName()",
      "offering.getPublicNetworkUuid()",
      "offering.getUuid()",
      "offering.getName()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java"
  },
  {
    "raw": "virtual router[name: %s, uuid: %s] failed to sync snat%s, %s",
    "en_US": "virtual router[name: {0}, uuid: {1}] failed to sync snat{2}, {3}",
    "zh_CN": "云路由[name: {0}, uuid: {1}]未能同步SNAT{2}，错误细节: {3}",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "JSONObjectUtil.toJsonString(snatInfo)",
      "ret.getError()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSyncSNATOnStartFlow.java"
  },
  {
    "raw": "failed to create port forwarding rule[vip ip: %s, private ip: %s, vip start port: %s, vip end port: %s, private start port: %s, private end port: %s], because %s",
    "en_US": "failed to create port forwarding rule[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}], because {6}",
    "zh_CN": "无法创建端口转发规则[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}]，错误细节: {6}",
    "arguments": [
      "to.getVipIp()",
      "to.getPrivateIp()",
      "to.getVipPortStart()",
      "to.getVipPortEnd()",
      "to.getPrivatePortStart()",
      "to.getPrivatePortEnd()",
      "ret.getError()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java"
  },
  {
    "raw": "failed to revoke port forwarding rules %s, because %s",
    "en_US": "failed to revoke port forwarding rules {0}, because {1}",
    "zh_CN": "未能解除端口转发规则{0}，原因: {1}",
    "arguments": [
      "JSONObjectUtil.toJsonString(to)",
      "ret.getError()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to PortForwarding rule[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to PortForwarding rule[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]内为三层网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和端口转发规则[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该三层网络指定一个特定的云路有规格",
    "arguments": [
      "offering.getUuid()",
      "struct.getGuestL3Network().getUuid()",
      "struct.getGuestL3Network().getZoneUuid()",
      "struct.getVip().getL3NetworkUuid()",
      "struct.getRule().getUuid()"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "virtual router doesn\u0027t support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule rule has a mismatching range: vip port[%s, %s], private port[%s, %s]",
    "en_US": "virtual router doesn\u0027t support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule rule has a mismatching range: vip port[{0}, {1}], private port[{2}, {3}]",
    "zh_CN": "云路由不支持范围性的端口转发重定向，vipPortStart和privatePortStart必须一致，vipPortEnd和privatePortEnd必须一致，但这条规则有个不匹配的范围: vip端口范围[{0}, {1}]，私有端口范围[{2}, {3}]",
    "arguments": [
      "rule.getVipPortStart()",
      "rule.getVipPortEnd()",
      "rule.getPrivatePortStart()",
      "rule.getPrivatePortEnd()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "failed to add portforwardings on virtual router[uuid:%s], %s",
    "en_US": "failed to add portforwardings on virtual router[uuid:{0}], {1}",
    "zh_CN": "在云路由[uuid:{0}]添加端口转发失败，{1}",
    "arguments": [
      "vrVO.getUuid()",
      "ret.getError()"
    ],
    "line": 408,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "failed to revoke port forwardings on virtual router[uuid:%s], %s",
    "en_US": "failed to revoke port forwardings on virtual router[uuid:{0}], {1}",
    "zh_CN": "取消在云路由[uuid:{0}]上端口转发服务失败，{1}",
    "arguments": [
      "vrVO.getUuid()",
      "ret.getError()"
    ],
    "line": 484,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java"
  },
  {
    "raw": "failed to sync port forwarding rules served by virtual router[name: %s, uuid: %s], because %s",
    "en_US": "failed to sync port forwarding rules served by virtual router[name: {0}, uuid: {1}], because {2}",
    "zh_CN": "未能同步由云路由[name: {0}, uuid: {1}]提供的端口转发规则，因为: {2}",
    "arguments": [
      "vr.getName()",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 212,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java"
  },
  {
    "raw": "failed to remove vip%s, because %s",
    "en_US": "failed to remove vip{0}, because {1}",
    "zh_CN": "未能移除VIP{0}，因为{1}",
    "arguments": [
      "tos",
      "ret.getError()"
    ],
    "line": 179,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java"
  },
  {
    "raw": "failed to create vip%s on virtual router[uuid:%s], because %s",
    "en_US": "failed to create vip{0} on virtual router[uuid:{1}], because {2}",
    "zh_CN": "未能在云路由[uuid:{1}]上创建VIP{0}，因为{2}",
    "arguments": [
      "tos",
      "vr.getUuid()",
      "ret.getError()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java"
  },
  {
    "raw": "failed to sync vips[ips: %s] on virtual router[uuid:%s] for attaching nic[uuid: %s, ip: %s], because %s",
    "en_US": "failed to sync vips[ips: {0}] on virtual router[uuid:{1}] for attaching nic[uuid: {2}, ip: {3}], because {4}",
    "zh_CN": "为了绑定网卡[uuid: {2}, ip: {3}]在云路由[uuid:{1}]上同步虚拟IP[ips: {0}]失败，因为{4}",
    "arguments": [
      "vips.stream().map(VipTO::getIp).collect(Collectors.toList())",
      "nic.getVmInstanceUuid()",
      "nic.getUuid()",
      "nic.getIp()",
      "ret.getError()"
    ],
    "line": 245,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java"
  },
  {
    "raw": "virtual router[uuid:%s, state:%s] is not running",
    "en_US": "virtual router[uuid:{0}, state:{1}] is not running",
    "zh_CN": "云路由[uuid:{0}, state:{1}]没有运行",
    "arguments": [
      "vrUuid",
      "vrState"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "found a virtual router offering[uuid:%s] for L3Network[uuid:%s] in zone[uuid:%s]; however, the network\u0027s public network[uuid:%s] is not the same to VIP[uuid:%s]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "en_US": "found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network\u0027s public network[uuid:{3}] is not the same to VIP[uuid:{4}]\u0027s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network",
    "zh_CN": "在区域（zone）[uuid:{2}]内为三层网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和VIP[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该三层网络指定一个特定的云路有规格",
    "arguments": [
      "offering.getUuid()",
      "s.getL3Network().getUuid()",
      "s.getL3Network().getZoneUuid()",
      "self.getL3NetworkUuid()",
      "self.getUuid()"
    ],
    "line": 281,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java"
  },
  {
    "raw": "failed to change nic[ip:%s, mac:%s] firewall default action of virtual router vm[uuid:%s], because %s",
    "en_US": "failed to change nic[ip:{0}, mac:{1}] firewall default action of virtual router vm[uuid:{2}], because {3}",
    "zh_CN": "修改云路由[uuid:{2}]的网卡[ip:{0}, mac:{1}]的默认防火墙规则失败，因为{3}",
    "arguments": [
      "nic.getIp()",
      "nic.getMac()",
      "nic.getVmInstanceUuid()",
      "rsp.getError()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosChangePrivateL3FirewallDefaultActionExtensionPoint.java"
  },
  {
    "raw": "unable to ssh in to the virtual router[%s] after configure ssh",
    "en_US": "unable to ssh in to the virtual router[{0}] after configure ssh",
    "zh_CN": "配置SSH后，无法通过SSH连接到虚拟路由器[{0}]",
    "arguments": [
      "mgmtNicIp"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConfigSshFlow.java"
  },
  {
    "raw": "vyos init command failed, because:%s",
    "en_US": "vyos init command failed, because:{0}",
    "zh_CN": "vyos init命令失败，原因是：{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 214,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConnectFlow.java"
  },
  {
    "raw": "unable to start dhcp server on virtual router vm[uuid:%s], because %s",
    "en_US": "unable to start dhcp server on virtual router vm[uuid:{0}], because {1}",
    "zh_CN": "无法在虚拟路由器VM[uuid：{0}]上启动DHCP服务器，因为{1}",
    "arguments": [
      "nic.getVmInstanceUuid()",
      "rsp.getError()"
    ],
    "line": 246,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java"
  },
  {
    "raw": "unable to stop dhcp server on virtual router vm[uuid:%s], because %s",
    "en_US": "unable to stop dhcp server on virtual router vm[uuid:{0}], because {1}",
    "zh_CN": "无法停止虚拟路由器VM[uuid：{0}]上的DHCP服务器，因为{1}",
    "arguments": [
      "nic.getVmInstanceUuid()",
      "rsp.getError()"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java"
  },
  {
    "raw": "File reference not fount for disk %s",
    "en_US": "File reference not fount for disk {0}",
    "zh_CN": "找不到磁盘{0}的文件引用",
    "arguments": [
      "id"
    ],
    "line": 104,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Illegal disk capacity: %s",
    "en_US": "Illegal disk capacity: {0}",
    "zh_CN": "非法磁盘容量：{0}",
    "arguments": [
      "capacity"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Illegal disk populated size: %s",
    "en_US": "Illegal disk populated size: {0}",
    "zh_CN": "非法的磁盘填充大小：{0}",
    "arguments": [
      "pSize"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Volume controller not found.",
    "en_US": "Volume controller not found.",
    "zh_CN": "未找到卷控制器。",
    "arguments": [],
    "line": 288,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "CD Driver controller not found.",
    "en_US": "CD Driver controller not found.",
    "zh_CN": "找不到光驱控制器。",
    "arguments": [],
    "line": 320,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Ethernet Adapter: %s do not connect to a network.",
    "en_US": "Ethernet Adapter: {0} do not connect to a network.",
    "zh_CN": "以太网适配器：{0}不要连接到网络。",
    "arguments": [
      "name"
    ],
    "line": 368,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Memory \u0027InstanceID\u0027 not found",
    "en_US": "Memory \u0027InstanceID\u0027 not found",
    "zh_CN": "未找到内存“ instanceId ”",
    "arguments": [],
    "line": 380,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Memory \u0027VirtualQuantity\u0027 not found",
    "en_US": "Memory \u0027VirtualQuantity\u0027 not found",
    "zh_CN": "未找到内存“ virtualQuantity ”",
    "arguments": [],
    "line": 387,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Illegal Memory \u0027VirtualQuantity\u0027 value: %s",
    "en_US": "Illegal Memory \u0027VirtualQuantity\u0027 value: {0}",
    "zh_CN": "非法内存“ virtualQuantity ”值：{0}",
    "arguments": [
      "quantity"
    ],
    "line": 392,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "CPU \u0027InstanceID\u0027 not found",
    "en_US": "CPU \u0027InstanceID\u0027 not found",
    "zh_CN": "未找到CPU “ instanceId ”",
    "arguments": [],
    "line": 401,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "CPU \u0027VirtualQuantity\u0027 not found",
    "en_US": "CPU \u0027VirtualQuantity\u0027 not found",
    "zh_CN": "未找到CPU \u0027 virtualQuantity \u0027",
    "arguments": [],
    "line": 407,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Illegal CPU \u0027VirtualQuantity\u0027 value: %s",
    "en_US": "Illegal CPU \u0027VirtualQuantity\u0027 value: {0}",
    "zh_CN": "非法的CPU “ VirtualQuantity ”值：{0}",
    "arguments": [
      "quantity"
    ],
    "line": 412,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "Illegal CPU \u0027CoresPerSocket\u0027 value: %s",
    "en_US": "Illegal CPU \u0027CoresPerSocket\u0027 value: {0}",
    "zh_CN": "非法的CPU “ CoreSperSocket ”值：{0}",
    "arguments": [
      "cps"
    ],
    "line": 422,
    "fileName": "src/main/java/org/zstack/ovf/OvfHelper.java"
  },
  {
    "raw": "long job[uuid:%s] execute fail",
    "en_US": "long job[uuid:{0}] execute fail",
    "zh_CN": "长作业[uuid：{0}]执行失败",
    "arguments": [
      "failLongJobUuids"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/ovf/OvfImageUploadTracker.java"
  },
  {
    "raw": "Vm[uuid: %s] is already exported as the ova package[uuid: %s], please delete the package and try again.",
    "en_US": "Vm[uuid: {0}] is already exported as the ova package[uuid: {1}], please delete the package and try again.",
    "zh_CN": "VM[uuid：{0}]已作为OVA程序包[uuid：{1}]导出，请删除该程序包，然后重试。",
    "arguments": [
      "msg.getVmUuid()",
      "ovaUuid"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/ovf/OvfInterceptor.java"
  },
  {
    "raw": "Export vm requires an ImageStore backup storage, but given backupStorageUuid: %s is not an ImageStore backup storage.",
    "en_US": "Export vm requires an ImageStore backup storage, but given backupStorageUuid: {0} is not an ImageStore backup storage.",
    "zh_CN": "导出VM需要ImageStore备份存储，但给定的BackupStorageUuid{0}不是ImageStore备份存储。",
    "arguments": [
      "msg.getBackupStorageUuid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/ovf/OvfInterceptor.java"
  },
  {
    "raw": "Not found the vm to be exported with the uuid: %s",
    "en_US": "Not found the vm to be exported with the uuid: {0}",
    "zh_CN": "未找到uuid为{0}的要导出的VM",
    "arguments": [
      "msg.getVmUuid()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/ovf/OvfInterceptor.java"
  },
  {
    "raw": "Only vm in state: %s can be exported.",
    "en_US": "Only vm in state: {0} can be exported.",
    "zh_CN": "只能导出状态为{0}的云主机。",
    "arguments": [
      "VmInstanceState.Stopped.toString()"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/ovf/OvfInterceptor.java"
  },
  {
    "raw": "failed to parse jsonCreateVmParam in APICreateVmInstanceFromOvfMsg",
    "en_US": "failed to parse jsonCreateVmParam in APICreateVmInstanceFromOvfMsg",
    "zh_CN": "无法分析APICreateVmInstanceFromOvFMsg中的JsonCreateVmParam",
    "arguments": [],
    "line": 114,
    "fileName": "src/main/java/org/zstack/ovf/OvfInterceptor.java"
  },
  {
    "raw": "backup storage[uuid: %s] does not have enough available capacity for exporting vm[uuid: %s], required capacity is: %d",
    "en_US": "backup storage[uuid: {0}] does not have enough available capacity for exporting vm[uuid: {1}], required capacity is: {2}",
    "zh_CN": "备份存储[uuid：{0}]没有足够的可用容量来导出云主机[uuid：{1}]，所需容量为：{2}",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "msg.getVmUuid()",
      "totalSize"
    ],
    "line": 229,
    "fileName": "src/main/java/org/zstack/ovf/OvfManagerImpl.java"
  },
  {
    "raw": "ova package[uuid: %s] not found.",
    "en_US": "ova package[uuid: {0}] not found.",
    "zh_CN": "未找到OVA程序包[uuid：{0}]。",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 629,
    "fileName": "src/main/java/org/zstack/ovf/OvfManagerImpl.java"
  },
  {
    "raw": "Failed to read ovf file.",
    "en_US": "Failed to read ovf file.",
    "zh_CN": "无法读取OVF文件。",
    "arguments": [],
    "line": 757,
    "fileName": "src/main/java/org/zstack/ovf/OvfManagerImpl.java"
  },
  {
    "raw": "failed to create VM from OVF because the root disk of the VM cannot be found",
    "en_US": "failed to create VM from OVF because the root disk of the VM cannot be found",
    "zh_CN": "无法从OVF创建VM，因为找不到VM的根磁盘",
    "arguments": [],
    "line": 1028,
    "fileName": "src/main/java/org/zstack/ovf/OvfManagerImpl.java"
  },
  {
    "raw": "pci device[uuid:%s] doesn\u0027t exist",
    "en_US": "pci device[uuid:{0}] doesn\u0027t exist",
    "zh_CN": "PCI设备[uuid:{0}]不存在",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 417,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "could not enable sriov for device because iommu is disabled on host[uuid:%s]",
    "en_US": "could not enable sriov for device because iommu is disabled on host[uuid:{0}]",
    "zh_CN": "无法为设备启用SRIOV，因为已在物理机[uuid：{0}]上禁用IOMMU",
    "arguments": [
      "pci.getHostUuid()"
    ],
    "line": 422,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci devices in host[uuid:%s] already sriov virtualized",
    "en_US": "pci devices in host[uuid:{0}] already sriov virtualized",
    "zh_CN": "物理机[uuid:{0}]上的PCI设备已经SRIOV虚拟化，无法再次切分",
    "arguments": [
      "pci.getHostUuid()"
    ],
    "line": 468,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot sr-iov virtualize pci devices in host[uuid:%s] that are attached to vm",
    "en_US": "cannot sr-iov virtualize pci devices in host[uuid:{0}] that are attached to vm",
    "zh_CN": "物理机[uuid:{0}]上的PCI设备已经挂载到云主机，无法SRIOV虚拟化",
    "arguments": [
      "pci.getHostUuid()"
    ],
    "line": 473,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "only %d virtual pci devices can be generated by %ss in host[uuid:%s]",
    "en_US": "only {0} virtual pci devices can be generated by {1}s in host[uuid:{2}]",
    "zh_CN": "物理机[uuid:{2}]上的{1}类型PCI设备最多被切分出{0}个虚拟PCI设备",
    "arguments": [
      "minIns",
      "pci.getType()",
      "pci.getHostUuid()"
    ],
    "line": 487,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "the host[uuid:%s] that pci device[uuid:%s] in is not Connected",
    "en_US": "the host[uuid:{0}] that pci device[uuid:{1}] in is not Connected",
    "zh_CN": "PCI设备[uuid:{1}]所在物理机[uuid:{0}]已失联",
    "arguments": [
      "pci.getHostUuid()",
      "pci.getUuid()"
    ],
    "line": 609,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot sr-iov virtualize pci devices on interface[uuid:%s] that are been bonded",
    "en_US": "cannot sr-iov virtualize pci devices on interface[uuid:{0}] that are been bonded",
    "zh_CN": "SR-IOV无法虚拟化已绑定的接口[uuid：{0}]上的PCI设备",
    "arguments": [
      "interfaceVO.getUuid()"
    ],
    "line": 505,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] doesn\u0027t exist or is not sriov virtualized",
    "en_US": "pci device[uuid:{0}] doesn\u0027t exist or is not sriov virtualized",
    "zh_CN": "PCI设备[uuid:{0}]不存在，或者未处于SRIOV虚拟化状态",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 513,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "virtual pci devices generated from pci devices in host[uuid:%s] still attached to vm",
    "en_US": "virtual pci devices generated from pci devices in host[uuid:{0}] still attached to vm",
    "zh_CN": "物理机[uuid:{0}]上存在仍处于已挂载状态的虚拟PCI设备，无法执行虚拟化还原操作",
    "arguments": [
      "pci.getHostUuid()"
    ],
    "line": 528,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] cannot be virtualized into mdevs, make sure it\u0027s enabled and un-attached",
    "en_US": "pci device[uuid:{0}] cannot be virtualized into mdevs, make sure it\u0027s enabled and un-attached",
    "zh_CN": "PCI设备[uuid:{0}]无法被切分为MDEV设备，请确保它处于启用状态，并且没有挂载到云主机",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 550,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] cannot be virtualized by mdev spec[uuid:%s]",
    "en_US": "pci device[uuid:{0}] cannot be virtualized by mdev spec[uuid:{1}]",
    "zh_CN": "PCI设备[uuid:{0}]无法使用MDEV设备规格[uuid:{1}]进行虚拟化切分",
    "arguments": [
      "msg.getPciDeviceUuid()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 561,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "pci device[uuid:%s] is not virtualized into mdevs",
    "en_US": "pci device[uuid:{0}] is not virtualized into mdevs",
    "zh_CN": "PCI设备[uuid:{0}]未处于VFIO_MDEV虚拟化状态",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 583,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "mdev devices generated from pci device[uuid:%s] still attached to vm",
    "en_US": "mdev devices generated from pci device[uuid:{0}] still attached to vm",
    "zh_CN": "PCI设备[uuid:{0}]切分出的MDEV设备仍处于已挂载状态，无法执行虚拟化还原操作",
    "arguments": [
      "msg.getPciDeviceUuid()"
    ],
    "line": 600,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "please umount all GPU devices of the vm[%s] and try again",
    "en_US": "please umount all GPU devices of the vm[{0}] and try again",
    "zh_CN": "请卸载云主机[{0}]的所有GPU设备，然后重试",
    "arguments": [
      "VmInstanceUuid"
    ],
    "line": 624,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "please umount all vGPU devices of the vm[%s] and try again",
    "en_US": "please umount all vGPU devices of the vm[{0}] and try again",
    "zh_CN": "请卸载云主机[{0}]的所有vGPU设备，然后重试",
    "arguments": [
      "VmInstanceUuid"
    ],
    "line": 628,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "please umount other pci devices of the vm[%s] and try again",
    "en_US": "please umount other pci devices of the vm[{0}] and try again",
    "zh_CN": "请卸载VM[{0}]的其他PCI设备，然后重试",
    "arguments": [
      "VmInstanceUuid"
    ],
    "line": 635,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java"
  },
  {
    "raw": "specified pci devices not on same host: pci device[uuid: %s] on host[uuid: %s] while pci device[uuid: %s] on host[uuid: %s]",
    "en_US": "specified pci devices not on same host: pci device[uuid: {0}] on host[uuid: {1}] while pci device[uuid: {2}] on host[uuid: {3}]",
    "zh_CN": "云主机试图挂载来自不同物理机的PCI设备：设备[uuid: {0}]来自物理机[uuid: {1}]，而设备[uuid: {2}]来自物理机[uuid: {3}]",
    "arguments": [
      "vo.getUuid()",
      "vo.getHostUuid()",
      "attachedPciUuid",
      "dstHostUuid"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java"
  },
  {
    "raw": "no candidate host with enough pci devices",
    "en_US": "no candidate host with enough pci devices",
    "zh_CN": "没有具有足够PCI设备的候选物理机",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java"
  },
  {
    "raw": "failed to start vm[uuid:%s] because not all pci specs[uuids:%s] exist",
    "en_US": "failed to start vm[uuid:{0}] because not all pci specs[uuids:{1}] exist",
    "zh_CN": "云主机[uuid:{0}]启动失败，因为所设置的PCI设备规格[uuids:{1}]中有部分不存在",
    "arguments": [
      "vmUuid",
      "specMap.keySet()"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java"
  },
  {
    "raw": "illegal type[%s] for pci device, only %s are legal",
    "en_US": "illegal type[{0}] for pci device, only {1} are legal",
    "zh_CN": "PCI设备的类型[{0}]非法，只有{1}是合法的",
    "arguments": [
      "vo.getType()",
      "PciDeviceType.leagalPciDeviceCandidateTypes"
    ],
    "line": 1319,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "failed to find enough pci device of spec[uuid:%s] in dest host[uuid:%s] for vm[uuid:%s]",
    "en_US": "failed to find enough pci device of spec[uuid:{0}] in dest host[uuid:{1}] for vm[uuid:{2}]",
    "zh_CN": "无法在物理机[uuid:{1}]上为云主机[uuid:{2}]找到足够多满足规格[uuid:{0}]的PCI设备",
    "arguments": [
      "specUuid",
      "hostUuid",
      "vmUuid"
    ],
    "line": 719,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "something wrong with iommu group of pci device[uuid:%s]",
    "en_US": "something wrong with iommu group of pci device[uuid:{0}]",
    "zh_CN": "PCI设备[uuid：{0}]的IOMMU组出现问题",
    "arguments": [
      "pciUuid"
    ],
    "line": 782,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "pci devices [%s] are not all available",
    "en_US": "pci devices [{0}] are not all available",
    "zh_CN": "PCI设备[{0}]并非全部可用",
    "arguments": [
      "pciUuids"
    ],
    "line": 795,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "can not attach this pci device[uuid:%s] to vm[uuid:%s] due to host allocation",
    "en_US": "can not attach this pci device[uuid:{0}] to vm[uuid:{1}] due to host allocation",
    "zh_CN": "由于物理机分配问题导致不能将PCI设备[uuid:{0}]绑定云主机[uuid:{1}]",
    "arguments": [
      "msg.getPciDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 928,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "can not migrate vm[uuid:%s] since pci device attached",
    "en_US": "can not migrate vm[uuid:{0}] since pci device attached",
    "zh_CN": "当PCI设备绑定后不能迁移云主机[uuid:{0}]",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 1221,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are pci devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are pci devices attached",
    "zh_CN": "不能迁移云盘[uuid:{0}]，因为它所在的云主机挂载了PCI设备",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 1270,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "pci device[uuid:%s] doesn\u0027t exists",
    "en_US": "pci device[uuid:{0}] doesn\u0027t exists",
    "zh_CN": "PCI设备[uuid：{0}]不存在",
    "arguments": [
      "pciDeviceUuid"
    ],
    "line": 1316,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "pci device spec[uuid:%s] doesn\u0027t exists",
    "en_US": "pci device spec[uuid:{0}] doesn\u0027t exists",
    "zh_CN": "PCI设备规范[uuid：{0}]不存在",
    "arguments": [
      "pciSpecUuid"
    ],
    "line": 1330,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "pci device[uuid:%s] doesn\u0027t exist or is disabled for vm[uuid:%s]",
    "en_US": "pci device[uuid:{0}] doesn\u0027t exist or is disabled for vm[uuid:{1}]",
    "zh_CN": "PCI设备[uuid：{0}]不存在或已为云主机[uuid：{1}]禁用",
    "arguments": [
      "pciUuid",
      "vmUuid"
    ],
    "line": 1511,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceManager.java"
  },
  {
    "raw": "pci device[uuid:%s] can not attach to vm[uuid:%s] due to wrong status",
    "en_US": "pci device[uuid:{0}] can not attach to vm[uuid:{1}] due to wrong status",
    "zh_CN": "由于状态错误，PCI设备[uuid：{0}]无法连接到云主机[uuid：{1}]",
    "arguments": [
      "wrongStatusPciUuids",
      "vmUuid"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/pciDevice/PciDeviceReserveFlow.java"
  },
  {
    "raw": "The host [%s] has failed to enter the maintenance, The vm [%s] cannot migrate automatically because it contains the PCI device",
    "en_US": "The host [{0}] has failed to enter the maintenance, The vm [{1}] cannot migrate automatically because it contains the PCI device",
    "zh_CN": "物理机[{0}]进入维护状态失败，这个云主机[{1}]不能自动迁移，因为云主机包含了PCI设备",
    "arguments": [
      "inventory.getUuid()",
      "hasPciVmUuids.toString()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/pciDevice/PciHostChangeStateExtension.java"
  },
  {
    "raw": "illegal type[%s] for pci device spec, only %s are legal",
    "en_US": "illegal type[{0}] for pci device spec, only {1} are legal",
    "zh_CN": "PCI设备规范的类型[{0}]非法，只有{1}合法",
    "arguments": [
      "vo.getType()",
      "PciDeviceType.leagalPciDeviceCandidateTypes"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to set pci device spec",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to set pci device spec",
    "zh_CN": "云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以设置PCI设备规格",
    "arguments": [
      "vmUuid",
      "state"
    ],
    "line": 258,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] already has pci device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] already has pci device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经设置过了PCI设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getPciSpecUuid()"
    ],
    "line": 169,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] doesn\u0027t have pci device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] doesn\u0027t have pci device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]未设置PCI设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getPciSpecUuid()"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to remove pci device spec[uuid:%s]",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to remove pci device spec[uuid:{2}]",
    "zh_CN": "云主机[uuid:{0}], state:{1}需要处于关机状态下才可以取消PCI设备规格[uuid:{2}]",
    "arguments": [
      "vm.getUuid()",
      "vm.getState()",
      "msg.getPciSpecUuid()"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] already has mdev device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] already has mdev device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经设置过了MDEV设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 285,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to set mdev device spec",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to set mdev device spec",
    "zh_CN": "云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以设置MDEV设备规格",
    "arguments": [
      "vm.getUuid()",
      "vm.getState()"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] doesn\u0027t have mdev device spec[uuid:%s]",
    "en_US": "vm[uuid:{0}] doesn\u0027t have mdev device spec[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]未设置过MDEV设备规格[uuid:{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 306,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s, state:%s] needs to be stopped to remove mdev device spec[uuid:%s]",
    "en_US": "vm instance[uuid:{0}, state:{1}] needs to be stopped to remove mdev device spec[uuid:{2}]",
    "zh_CN": "云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以取消MDEV设备规格[uuid:{2}]",
    "arguments": [
      "vm.getUuid()",
      "vm.getState()",
      "msg.getMdevSpecUuid()"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java"
  },
  {
    "raw": "pci device spec[uuid:%s] is not available for vm[uuid:%s]",
    "en_US": "pci device spec[uuid:{0}] is not available for vm[uuid:{1}]",
    "zh_CN": "云主机[uuid:{1}]无法设置PCI设备规格[uuid:{0}]",
    "arguments": [
      "msg.getPciSpecUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 374,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "no pci device spec available for vm[uuid:%s]",
    "en_US": "no pci device spec available for vm[uuid:{0}]",
    "zh_CN": "云主机[uuid:{0}]无可用的PCI设备规格",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 372,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "failed to get pci device spec available for vm[uuid:%s]: %s",
    "en_US": "failed to get pci device spec available for vm[uuid:{0}]: {1}",
    "zh_CN": "无法获取可用于VM[uuid：{0}]的PCI设备规范：{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "rly.getError()"
    ],
    "line": 367,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "mdev device spec[uuid:%s] is not available for vm[uuid:%s]",
    "en_US": "mdev device spec[uuid:{0}] is not available for vm[uuid:{1}]",
    "zh_CN": "云主机[uuid:{1}]无法设置MDEV设备规格[uuid:{0}]",
    "arguments": [
      "msg.getMdevSpecUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 557,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "no mdev device spec available for vm[uuid:%s]",
    "en_US": "no mdev device spec available for vm[uuid:{0}]",
    "zh_CN": "云主机[uuid:{0}]无可用的MDEV设备规格",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 550,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "pci device spec[uuid:%s] doesn\u0027t exist",
    "en_US": "pci device spec[uuid:{0}] doesn\u0027t exist",
    "zh_CN": "PCI设备规格[uuid:{0}]不存在",
    "arguments": [
      "specUuid",
      "systemTag"
    ],
    "line": 751,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "mdev device spec[uuid:%s] doesn\u0027t exist",
    "en_US": "mdev device spec[uuid:{0}] doesn\u0027t exist",
    "zh_CN": "MDEV设备规格[uuid:{0}]不存在",
    "arguments": [
      "specUuid",
      "systemTag"
    ],
    "line": 764,
    "fileName": "src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java"
  },
  {
    "raw": "cluster uuids or host uuid or vm uuid can not be set at same time",
    "en_US": "cluster uuids or host uuid or vm uuid can not be set at same time",
    "zh_CN": "获取候选规格列表时不要同时指定集群uuids、物理机uuid或云主机uuid",
    "arguments": [],
    "line": 191,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "clusters not exist or disabled",
    "en_US": "clusters not exist or disabled",
    "zh_CN": "集群不存在或已禁用",
    "arguments": [],
    "line": 198,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "illegal mdev device type [%s], only %s are legal",
    "en_US": "illegal mdev device type [{0}], only {1} are legal",
    "zh_CN": "非法的MDEV设备类型[{0}]，只有{1}才是合法的",
    "arguments": [
      "type",
      "legalTypes"
    ],
    "line": 232,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot change the state of mdev device that\u0027s in attached status",
    "en_US": "cannot change the state of mdev device that\u0027s in attached status",
    "zh_CN": "MDEV设备处于已挂载状态，无法修改其状态",
    "arguments": [],
    "line": 69,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot attach mdev device[uuid:%s] to vm, make sure it\u0027s enabled and un-attached",
    "en_US": "cannot attach mdev device[uuid:{0}] to vm, make sure it\u0027s enabled and un-attached",
    "zh_CN": "无法为云主机挂载MDEV设备[uuid:{0}]，因为该设备处于禁用状态或已被挂载",
    "arguments": [
      "msg.getMdevDeviceUuid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot attach mdev device to vm instance that\u0027s not stopped",
    "en_US": "cannot attach mdev device to vm instance that\u0027s not stopped",
    "zh_CN": "云主机需要处于关机状态下才可以挂载MDEV设备",
    "arguments": [],
    "line": 220,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] has pci devices attached that are in different host with mdev device[uuid:%s]",
    "en_US": "vm[uuid:{0}] has pci devices attached that are in different host with mdev device[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经挂载了PCI设备，并且它们和MDEV设备[uuid:{1}]不在同一台物理机上",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevDeviceUuid()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "vm[uuid:%s] has mdev devices attached that are in different host with mdev device[uuid:%s]",
    "en_US": "vm[uuid:{0}] has mdev devices attached that are in different host with mdev device[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]已经挂载了MDEV设备，并且它们和MDEV设备[uuid:{1}]不在同一台物理机上",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevDeviceUuid()"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "the host[uuid:%s] that holds mdev device[uuid:%s] is not [%s] and [%s]",
    "en_US": "the host[uuid:{0}] that holds mdev device[uuid:{1}] is not [{2}] and [{3}]",
    "zh_CN": "拥有MDEV设备[uuid：{1}]的物理机[uuid：{0}]不是[{2}]和[{3}]",
    "arguments": [
      "mdev.getHostUuid()",
      "mdev.getUuid()",
      "HostState.Enabled",
      "HostStatus.Connected"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] that holds se mdev device can not attach more se mdev[%s]",
    "en_US": "the vm[uuid:{0}] that holds se mdev device can not attach more se mdev[{1}]",
    "zh_CN": "拥有SE MDEV设备的VM[uuid：{0}]无法附加更多SE MDEV[{1}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "mdev.getUuid()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "IOMMU of the host[uuid:%s] that hosts pci device[uuid:%s] is not [%s] and [%s]",
    "en_US": "IOMMU of the host[uuid:{0}] that hosts pci device[uuid:{1}] is not [{2}] and [{3}]",
    "zh_CN": "托管PCI设备[uuid：{1}]的物理机[uuid：{0}]的IOMMU不是[{2}]和[{3}]",
    "arguments": [
      "mdev.getHostUuid()",
      "mdev.getUuid()",
      "HostState.Enabled",
      "HostStatus.Connected"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "mdev device [uuid:%s] is not attached to vm[uuid:%s]",
    "en_US": "mdev device [uuid:{0}] is not attached to vm[uuid:{1}]",
    "zh_CN": "MDEV设备[uuid:{0}]没有挂载到云主机[uuid:{1}]",
    "arguments": [
      "msg.getMdevDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot detach mdev device from vm instance when it\u0027s not stopped",
    "en_US": "cannot detach mdev device from vm instance when it\u0027s not stopped",
    "zh_CN": "云主机需要处于关机状态下才可以卸载MDEV设备",
    "arguments": [],
    "line": 181,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot delete mdev device when it\u0027s attached",
    "en_US": "cannot delete mdev device when it\u0027s attached",
    "zh_CN": "无法删除已连接的MDEV设备",
    "arguments": [],
    "line": 245,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java"
  },
  {
    "raw": "failed to get candidate hosts to start vm[uuid:%s], %s",
    "en_US": "failed to get candidate hosts to start vm[uuid:{0}], {1}",
    "zh_CN": "无法为云主机[uuid:{0}]寻找到可启动的物理机：{1}",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "reply.getError()"
    ],
    "line": 379,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java"
  },
  {
    "raw": "mdev device [%s] is not available",
    "en_US": "mdev device [{0}] is not available",
    "zh_CN": "MDEV设备[{0}]不可用",
    "arguments": [
      "mdevUuid"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java"
  },
  {
    "raw": "failed to hot plug mdev device to running vm, because:%s",
    "en_US": "failed to hot plug mdev device to running vm, because:{0}",
    "zh_CN": "无法将MDEV设备热插拔到正在运行的云主机，因为：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java"
  },
  {
    "raw": "vm[uuid:%s] cannot start in host that hold mdev device[uuid:%s]",
    "en_US": "vm[uuid:{0}] cannot start in host that hold mdev device[uuid:{1}]",
    "zh_CN": "云主机[uuid:{0}]无法在MDEV设备[uuid:{1}]所在的物理机上启动",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getMdevDeviceUuid()"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java"
  },
  {
    "raw": "failed to hot unplug mdev device to running vm, because:%s",
    "en_US": "failed to hot unplug mdev device to running vm, because:{0}",
    "zh_CN": "无法将MDEV设备热拔出到正在运行的云主机，原因是：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 353,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java"
  },
  {
    "raw": "pci device[uuid:%s] is known as %s, but cannot find it\u0027s mdev spec, so abort.",
    "en_US": "pci device[uuid:{0}] is known as {1}, but cannot find it\u0027s mdev spec, so abort.",
    "zh_CN": "PCI设备[uuid:{0}]是{1}，但无法找到可用的MDEV设备规格",
    "arguments": [
      "pciDevice.getUuid()",
      "PciDeviceVirtStatus.VFIO_MDEV_VIRTUALIZED"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFactory.java"
  },
  {
    "raw": "failed to start vm[uuid:%s] because not all mdev specs[uuids:%s] exist",
    "en_US": "failed to start vm[uuid:{0}] because not all mdev specs[uuids:{1}] exist",
    "zh_CN": "云主机[uuid:{0}]启动失败，由于所设置的MDEV设备规格[uuids:{1}]中有部分不存在",
    "arguments": [
      "vmUuid",
      "specMap.keySet()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java"
  },
  {
    "raw": "specified mdev devices not on same host: mdev device[uuid: %s] on host[uuid: %s] while mdev device[uuid: %s] on host[uuid: %s]",
    "en_US": "specified mdev devices not on same host: mdev device[uuid: {0}] on host[uuid: {1}] while mdev device[uuid: {2}] on host[uuid: {3}]",
    "zh_CN": "云主机试图挂载来自不同物理机的MDEV设备：设备[uuid: {0}]来自物理机[uuid: {1}]，而设备[uuid: {2}]来自物理机[uuid: {3}]",
    "arguments": [
      "mdev.getUuid()",
      "mdev.getHostUuid()",
      "attachedMdevUuid",
      "dstHostUuid"
    ],
    "line": 145,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java"
  },
  {
    "raw": "no candidate host with enough mdev devices",
    "en_US": "no candidate host with enough mdev devices",
    "zh_CN": "没有物理机满足mdev device设备的条件",
    "arguments": [],
    "line": 184,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java"
  },
  {
    "raw": "The host [%s] has failed to enter the maintenance, because vm[%s] has mdev devices attached and cannot migrate automatically",
    "en_US": "The host [{0}] has failed to enter the maintenance, because vm[{1}] has mdev devices attached and cannot migrate automatically",
    "zh_CN": "物理机[{0}]无法进入维护模式，因为云主机[{1}]挂载了MDEV设备导致无法迁移",
    "arguments": [
      "inventory.getUuid()",
      "hasMdevVmUuids.toString()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceHostChangeStateExtension.java"
  },
  {
    "raw": "failed to find enough mdev device of spec[uuid:%s] in dest host[uuid:%s] for vm[uuid:%s]",
    "en_US": "failed to find enough mdev device of spec[uuid:{0}] in dest host[uuid:{1}] for vm[uuid:{2}]",
    "zh_CN": "无法在物理机[uuid:{1}]上为云主机[uuid:{2}]找到足够多满足规格[uuid:{0}]的MDEV设备",
    "arguments": [
      "specUuid",
      "hostUuid",
      "vmUuid"
    ],
    "line": 308,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "cannot find mdev device[uuid:%s], it may have been deleted",
    "en_US": "cannot find mdev device[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到MDEV设备[uuid:{0}]",
    "arguments": [
      "msg.getMdevDeviceUuid()"
    ],
    "line": 352,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "mdev device[uuid:%s] doesn\u0027t exist or is disabled for vm[uuid:%s]",
    "en_US": "mdev device[uuid:{0}] doesn\u0027t exist or is disabled for vm[uuid:{1}]",
    "zh_CN": "MDEV设备[uuid：{0}]不存在或已为VM[uuid：{1}]禁用",
    "arguments": [
      "vo.getUuid()",
      "vmUuid"
    ],
    "line": 555,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "can not migrate vm[uuid:%s] since mdev device attached",
    "en_US": "can not migrate vm[uuid:{0}] since mdev device attached",
    "zh_CN": "无法迁移云主机[uuid:{0}]，因为它挂载了MDEV设备",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 644,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are mdev devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are mdev devices attached",
    "zh_CN": "无法迁移跟云盘[uuid:{0}]，因为它所在云主机挂载了MDEV设备",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 673,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "cannot migrate vm[uuid:%s] because there are mdev devices attached",
    "en_US": "cannot migrate vm[uuid:{0}] because there are mdev devices attached",
    "zh_CN": "无法迁移云主机[uuid:{0}]，因为它挂载了MDEV设备",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 688,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java"
  },
  {
    "raw": "mdev device[uuid:%s] can not attach to vm[uuid:%s] due to wrong status",
    "en_US": "mdev device[uuid:{0}] can not attach to vm[uuid:{1}] due to wrong status",
    "zh_CN": "由于状态错误，MDEV设备[uuid：{0}]无法连接到VM[uuid：{1}]",
    "arguments": [
      "wrongStatusMdevUuids",
      "vmUuid"
    ],
    "line": 129,
    "fileName": "src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceReserveFlow.java"
  },
  {
    "raw": "No host with fewer than %s vms found",
    "en_US": "No host with fewer than {0} vms found",
    "zh_CN": "找不到VM少于{0}的物理机",
    "arguments": [
      "String.format(\"maxInstancePerHost \u003d %d\", maxInstancePerHost)"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostAllocatorFlow.java"
  },
  {
    "raw": "%s must be a number",
    "en_US": "{0} must be a number",
    "zh_CN": "{0}必须是一个数字",
    "arguments": [
      "HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java"
  },
  {
    "raw": "Select %s strategy, you must set %s",
    "en_US": "Select {0} strategy, you must set {1}",
    "zh_CN": "选择策略{0}，你必须设置{1}",
    "arguments": [
      "HostAllocatorConstant.MAX_INSTANCE_PER_HOST_HOST_ALLOCATOR_STRATEGY_TYPE",
      "HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java"
  },
  {
    "raw": "Incorrect %s settings, valid value is %s",
    "en_US": "Incorrect {0} settings, valid value is {1}",
    "zh_CN": "不正确的设置{0}，有效的值是{1}",
    "arguments": [
      "HostAllocatorSystemTags.MINIMUM_MEMORY_USAGE_HOST_ALLOCATOR_STRATEGY_MODE_TOKEN",
      "modes"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/pluginpremium/compute/allocator/MinimumMemoryUsageHostAllocatorStrategyFactory.java"
  },
  {
    "raw": "default route network can not be changed when system policy route is enabled",
    "en_US": "default route network can not be changed when system policy route is enabled",
    "zh_CN": "启用系统策略路由时，无法更改默认路由网络",
    "arguments": [],
    "line": 93,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "can not find related virtual router",
    "en_US": "can not find related virtual router",
    "zh_CN": "找不到相关的虚拟路由器",
    "arguments": [],
    "line": 382,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "l3[%s] already attached a policy route ruleSet",
    "en_US": "l3[{0}] already attached a policy route ruleSet",
    "zh_CN": "L3[{0}]已附加策略路由规则集",
    "arguments": [
      "msg.getL3Uuid()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "VRouter[%s] already has a ruleSet named %s",
    "en_US": "VRouter[{0}] already has a ruleSet named {1}",
    "zh_CN": "VRouter[{0}]已具有名为{1}的规则集",
    "arguments": [
      "msg.getvRouterUuid()",
      "msg.getName()"
    ],
    "line": 192,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "can not update system policy route set",
    "en_US": "can not update system policy route set",
    "zh_CN": "无法更新系统策略路由集",
    "arguments": [],
    "line": 283,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "DestinationCidr must be in cidr format but found [%s]",
    "en_US": "DestinationCidr must be in cidr format but found [{0}]",
    "zh_CN": "DestinationCIDR必须为CIDR格式，但找到[{0}]",
    "arguments": [
      "msg.getDestinationCidr()"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "NextHopIp must be in ipv4 format but found [%s]",
    "en_US": "NextHopIp must be in ipv4 format but found [{0}]",
    "zh_CN": "NextHopIP必须为IPv4格式，但找到[{0}]",
    "arguments": [
      "msg.getNextHopIp()"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "can not find related vRouter",
    "en_US": "can not find related vRouter",
    "zh_CN": "找不到相关的VRouter",
    "arguments": [],
    "line": 278,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "can not update system policy route table",
    "en_US": "can not update system policy route table",
    "zh_CN": "无法更新系统策略路由表",
    "arguments": [],
    "line": 288,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "operation failure, ip format only supports ipv4/iprange/cidr, but find %s",
    "en_US": "operation failure, ip format only supports ipv4/iprange/cidr, but find {0}",
    "zh_CN": "操作失败，IP格式仅支持IPv4/IPRange/CIDR，但找到{0}",
    "arguments": [
      "ip"
    ],
    "line": 237,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "illegal protocol type %s",
    "en_US": "illegal protocol type {0}",
    "zh_CN": "非法的协议类型{0}",
    "arguments": [
      "protocol"
    ],
    "line": 245,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "RuleSet[%s] already has a rule with rule number %s.",
    "en_US": "RuleSet[{0}] already has a rule with rule number {1}.",
    "zh_CN": "规则集[{0}]已具有规则编号为{1}的规则。",
    "arguments": [
      "msg.getRuleSetUuid()",
      "msg.getRuleNumber()"
    ],
    "line": 254,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "VRouter[%s] already has a policy route table [%s]",
    "en_US": "VRouter[{0}] already has a policy route table [{1}]",
    "zh_CN": "VRouter[{0}]已具有策略路由表[{1}]",
    "arguments": [
      "msg.getvRouterUuid()",
      "msg.getNumber()"
    ],
    "line": 310,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "can not delete system policy route table",
    "en_US": "can not delete system policy route table",
    "zh_CN": "无法删除系统策略路由表",
    "arguments": [],
    "line": 387,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "can not delete system policy route set",
    "en_US": "can not delete system policy route set",
    "zh_CN": "无法删除系统策略路由集",
    "arguments": [],
    "line": 371,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "ruleSet[%s] is still attached to nic",
    "en_US": "ruleSet[{0}] is still attached to nic",
    "zh_CN": "规则集[{0}]仍连接到NIC",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 360,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java"
  },
  {
    "raw": "virtual router[uuid:%s] can not find",
    "en_US": "virtual router[uuid:{0}] can not find",
    "zh_CN": "云路由[uuid:{0}]未找到",
    "arguments": [
      "vrouterVmUuid"
    ],
    "line": 958,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java"
  },
  {
    "raw": "can not find service factory for virtual router type[%s]",
    "en_US": "can not find service factory for virtual router type[{0}]",
    "zh_CN": "未找到云路由类型为[{0}]的服务工厂",
    "arguments": [
      "vo.getApplianceVmType()"
    ],
    "line": 963,
    "fileName": "src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java"
  },
  {
    "raw": "Invalid parameter [%s], make sure it\u0027s PortMirror Network",
    "en_US": "Invalid parameter [{0}], make sure it\u0027s PortMirror Network",
    "zh_CN": "参数[{0}]无效，请确保它是PortMirror网络",
    "arguments": [
      "msg.getMirrorNetworkUuid()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The network[%s] has been attached with a PortMirror service",
    "en_US": "The network[{0}] has been attached with a PortMirror service",
    "zh_CN": "网络[{0}]已附加PortMirror服务",
    "arguments": [
      "msg.getMirrorNetworkUuid()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service[%s] has not been created",
    "en_US": "The PortMirror service[{0}] has not been created",
    "zh_CN": "尚未创建PortMirror服务[{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The nic[%s, %s] has been mirrored by service[%s]",
    "en_US": "The nic[{0}, {1}] has been mirrored by service[{2}]",
    "zh_CN": "NIC[{0}，{1}]已由服务[{2}]镜像",
    "arguments": [
      "msg.getSrcEndPoint()",
      "msg.getDstEndPoint()",
      "mirror.getUuid()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The nic[%s] can\u0027t been mirrored for service[%s] using",
    "en_US": "The nic[{0}] can\u0027t been mirrored for service[{1}] using",
    "zh_CN": "无法使用为服务[{1}]镜像NIC[{0}]",
    "arguments": [
      "msg.getSrcEndPoint()",
      "mirror.getUuid()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service doesn\u0027t support to mirror the nic[%s]",
    "en_US": "The PortMirror service doesn\u0027t support to mirror the nic[{0}]",
    "zh_CN": "PortMirror服务不支持镜像网卡[{0}]",
    "arguments": [
      "msg.getSrcEndPoint()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service doesn\u0027t support the nic[%s] because of its hypervisor type",
    "en_US": "The PortMirror service doesn\u0027t support the nic[{0}] because of its hypervisor type",
    "zh_CN": "由于其云主机监控程序类型，PortMirror服务不支持NIC[{0}]",
    "arguments": [
      "msg.getDstEndPoint()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror to the nic[%s] that is not a non-default interface of a vm",
    "en_US": "The PortMirror service can\u0027t mirror to the nic[{0}] that is not a non-default interface of a vm",
    "zh_CN": "PortMirror服务无法镜像到不是VM的非默认接口的NIC[{0}]",
    "arguments": [
      "msg.getDstEndPoint()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror the nic[%s] that is not an interface of any vm",
    "en_US": "The PortMirror service can\u0027t mirror the nic[{0}] that is not an interface of any vm",
    "zh_CN": "PortMirror服务无法镜像不是任何VM接口的NIC[{0}]",
    "arguments": [
      "msg.getSrcEndPoint()"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror the nic[%s]  to nic[%s] because the mirror network[%s] can\u0027t setup the mirror tunnel",
    "en_US": "The PortMirror service can\u0027t mirror the nic[{0}]  to nic[{1}] because the mirror network[{2}] can\u0027t setup the mirror tunnel",
    "zh_CN": "PortMirror服务无法将NIC[{0}]镜像到NIC[{1}]，因为镜像网络[{2}]无法设置镜像隧道",
    "arguments": [
      "msg.getSrcEndPoint()",
      "msg.getDstEndPoint()",
      "vo.getMirrorNetworkUuid()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t mirror the nic[%s] to itself",
    "en_US": "The PortMirror service can\u0027t mirror the nic[{0}] to itself",
    "zh_CN": "PortMirror服务无法将NIC[{0}]镜像到其自身",
    "arguments": [
      "msg.getSrcEndPoint()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "The PortMirror service can\u0027t work at the nic with configured Qos",
    "en_US": "The PortMirror service can\u0027t work at the nic with configured Qos",
    "zh_CN": "PortMirror服务无法在配置了QoS的NIC上工作",
    "arguments": [],
    "line": 153,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java"
  },
  {
    "raw": "failed to delete portMirror session[%s] from hypervisor, detail: %s",
    "en_US": "failed to delete portMirror session[{0}] from hypervisor, detail: {1}",
    "zh_CN": "无法从云主机监控程序中删除PortMirror会话[{0}]，详细信息：{1}",
    "arguments": [
      "sessionVO.getUuid()",
      "errorCode.getDetails()"
    ],
    "line": 761,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java"
  },
  {
    "raw": "failed to release portMirror session[%s] from hypervisor, detail: %s",
    "en_US": "failed to release portMirror session[{0}] from hypervisor, detail: {1}",
    "zh_CN": "无法从云主机监控程序释放PortMirror会话[{0}]，详细信息：{1}",
    "arguments": [
      "sessionVO.getUuid()",
      "errorCode.getDetails()"
    ],
    "line": 794,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java"
  },
  {
    "raw": "cannot find internal id of the session[uuid:%s], are there too many sessions in a host???",
    "en_US": "cannot find internal id of the session[uuid:{0}], are there too many sessions in a host???",
    "zh_CN": "找不到会话[uuid：{0}]的内部ID，物理机中是否有太多会话？？",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 912,
    "fileName": "src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java"
  },
  {
    "raw": "resourceUuid[%s] is not a valid uuid. A valid uuid is a uuid(v4 recommended) with \u0027-\u0027 stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of uuid, the regular expression uses to validate a uuid is \u0027[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}\u0027",
    "en_US": "resourceUuid[{0}] is not a valid uuid. A valid uuid is a uuid(v4 recommended) with \u0027-\u0027 stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of uuid, the regular expression uses to validate a uuid is \u0027[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}\u0027",
    "zh_CN": "Resourceuuid[{0}]不是有效的uuid。有效的uuid是去除了“-”的uuid（建议使用v4）。a.请参阅http：//en.wikipediorg/wiki/Universally_unique_identifier for format of uuid，用于验证uuid的正则表达式是“[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9A-f）{3}[89ab][O-9A-F]{3}[O-9A-F]{12}”",
    "arguments": [
      "cmsg.getResourceUuid()"
    ],
    "line": 276,
    "fileName": "src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java"
  },
  {
    "raw": "non support method: %s",
    "en_US": "non support method: {0}",
    "zh_CN": "不支持方法：{0}",
    "arguments": [
      "method"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java"
  },
  {
    "raw": "http request error! status_code: %s, error: %s",
    "en_US": "http request error! status_code: {0}, error: {1}",
    "zh_CN": "HTTP请求错误！状态_代码：{0}，错误：{1}",
    "arguments": [
      "statusCode",
      "response.getStatusLine().getReasonPhrase()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java"
  },
  {
    "raw": "sqlite3 execute failed, because: %s",
    "en_US": "sqlite3 execute failed, because: {0}",
    "zh_CN": "SQLite3执行失败，因为：{0}",
    "arguments": [
      "r.getStderr()"
    ],
    "line": 24,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDB.java"
  },
  {
    "raw": "cannot find folder: %s in dashboard",
    "en_US": "cannot find folder: {0} in dashboard",
    "zh_CN": "在仪表板中找不到文件夹：{0}",
    "arguments": [
      "GrafanaDB.folderTitle"
    ],
    "line": 34,
    "fileName": "src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDashboard.java"
  },
  {
    "raw": "cannot copy %s to %s, caused: %s",
    "en_US": "cannot copy {0} to {1}, caused: {2}",
    "zh_CN": "无法将{0}复制到{1}，原因：{2}",
    "arguments": [
      "src.getAbsolutePath()",
      "dst.getAbsolutePath()",
      "rst.getStderr()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/premium/externalservice/loki/LokiFactory.java"
  },
  {
    "raw": "ssh failed",
    "en_US": "ssh failed",
    "zh_CN": "SSH失败",
    "arguments": [],
    "line": 103,
    "fileName": "src/main/java/org/zstack/premium/externalservice/loki/PromtailFactory.java"
  },
  {
    "raw": "unknown value type %s, key \u003d %s",
    "en_US": "unknown value type {0}, key \u003d {1}",
    "zh_CN": "未知的值类型{0}，键\u003d{1}",
    "arguments": [
      "v.getClass().getSimpleName()",
      "k"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java"
  },
  {
    "raw": "failed to HTTP call all prometheus instances",
    "en_US": "failed to HTTP call all prometheus instances",
    "zh_CN": "无法对所有Prometheus实例进行HTTP调用",
    "arguments": [],
    "line": 153,
    "fileName": "src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java"
  },
  {
    "raw": "the operation is not permitted by white list of virtual-id[uuid:%s]",
    "en_US": "the operation is not permitted by white list of virtual-id[uuid:{0}]",
    "zh_CN": "无法操作，操作不存在用户[uuid:{0}]白名单中",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getUserUuid()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java"
  },
  {
    "raw": "the operation is denied by black list of virtual-id[uuid:%s]",
    "en_US": "the operation is denied by black list of virtual-id[uuid:{0}]",
    "zh_CN": "无法操作，操作被用户[uuid:{0}]黑名单拒绝",
    "arguments": [
      "rbacEntity.getApiMessage().getSession().getUserUuid()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java"
  },
  {
    "raw": "action: %s, is not supported for role identity: %s",
    "en_US": "action: {0}, is not supported for role identity: {1}",
    "zh_CN": "角色标识{1}不支持操作{0}",
    "arguments": [
      "unmatchedApis",
      "identity.toString()"
    ],
    "line": 199,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "%s is a reserved name, please use another name",
    "en_US": "{0} is a reserved name, please use another name",
    "zh_CN": "{0}是保留名称，请使用其他名称",
    "arguments": [
      "msg.getName()"
    ],
    "line": 372,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "the name of initial user can not be updated",
    "en_US": "the name of initial user can not be updated",
    "zh_CN": "无法更新初始用户的名称",
    "arguments": [],
    "line": 370,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot remove builtin system admin role from builtin system admin.",
    "en_US": "cannot remove builtin system admin role from builtin system admin.",
    "zh_CN": "无法从内置系统管理员中删除内置系统管理员角色。",
    "arguments": [],
    "line": 407,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot remove builtin security admin role from builtin security admin.",
    "en_US": "cannot remove builtin security admin role from builtin security admin.",
    "zh_CN": "无法从内置安全管理员中删除内置安全管理员角色。",
    "arguments": [],
    "line": 405,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot remove builtin audit admin role from builtin audit admin.",
    "en_US": "cannot remove builtin audit admin role from builtin audit admin.",
    "zh_CN": "无法从内置审核管理员中删除内置审核管理员角色。",
    "arguments": [],
    "line": 403,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot delete builtin system admin.",
    "en_US": "cannot delete builtin system admin.",
    "zh_CN": "无法删除内置系统管理员。",
    "arguments": [],
    "line": 417,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot delete builtin security admin.",
    "en_US": "cannot delete builtin security admin.",
    "zh_CN": "无法删除内置安全管理员。",
    "arguments": [],
    "line": 415,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "cannot delete builtin audit admin.",
    "en_US": "cannot delete builtin audit admin.",
    "zh_CN": "无法删除内置审核管理员。",
    "arguments": [],
    "line": 413,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "Confirm the roles you want to add have same identity",
    "en_US": "Confirm the roles you want to add have same identity",
    "zh_CN": "确认要添加的角色具有相同的身份",
    "arguments": [],
    "line": 430,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "Cannot add role: %s with identity: %s to virtualID[uuid:%s]",
    "en_US": "Cannot add role: {0} with identity: {1} to virtualID[uuid:{2}]",
    "zh_CN": "无法将标识为{1}的角色{0}添加到VirtualID[uuid：{2}]",
    "arguments": [
      "msg.getRoleUuids()",
      "identitySet",
      "msg.getVirtualIDUuid()"
    ],
    "line": 444,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "can not add privilege admin[uuids:%s] to project[uuid:%s]",
    "en_US": "can not add privilege admin[uuids:{0}] to project[uuid:{1}]",
    "zh_CN": "无法将特殊管理员用户[uuids:{0}]加入到项目中去",
    "arguments": [
      "String.join(\",\", privilegeAdminUuids)",
      "msg.getProjectUuid()"
    ],
    "line": 456,
    "fileName": "src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java"
  },
  {
    "raw": "condition name[%s] is invalid, no such field on inventory class[%s]",
    "en_US": "condition name[{0}] is invalid, no such field on inventory class[{1}]",
    "zh_CN": "条件名[{0}]非法，在清单类里面没有这个阈",
    "arguments": [
      "attr",
      "inventoryClass.getName()"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "condition name[%s] is invalid, field[%s] of inventory[%s] is annotated as @Unqueryable field",
    "en_US": "condition name[{0}] is invalid, field[{1}] of inventory[{2}] is annotated as @Unqueryable field",
    "zh_CN": "条件名[{0}]非法，清单[{2}]的值[{1}]不是被标记为@Unqueryable的值",
    "arguments": [
      "attr",
      "attr",
      "inventoryClass.getName()"
    ],
    "line": 437,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "entity meta class[%s] has no field[%s]",
    "en_US": "entity meta class[{0}] has no field[{1}]",
    "zh_CN": "实体元类[{0}]中没有值[{1}]",
    "arguments": [
      "info.jpaMetaClass.getName()",
      "attr"
    ],
    "line": 448,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "field[%s] is not a primitive of the inventory %s; you cannot specify it in the parameter \u0027fields\u0027;valid fields are %s",
    "en_US": "field[{0}] is not a primitive of the inventory {1}; you cannot specify it in the parameter \u0027fields\u0027;valid fields are {2}",
    "zh_CN": "值[{0}]不是清单{1}的原语；你不能在参数\u0027域\u0027中指定该参数；非法的域{2}",
    "arguments": [
      "f",
      "info.inventoryClass.getSimpleName()",
      "info.premitiveFieldNames"
    ],
    "line": 1000,
    "fileName": "src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java"
  },
  {
    "raw": "filterName must be formatted as [filterType:condition(s)]",
    "en_US": "filterName must be formatted as [filterType:condition(s)]",
    "zh_CN": "FilterName的格式必须为[filterType：条件]",
    "arguments": [],
    "line": 519,
    "fileName": "src/main/java/org/zstack/query/QueryFacadeImpl.java"
  },
  {
    "raw": "\u0027value\u0027 of query condition %s cannot be null",
    "en_US": "\u0027value\u0027 of query condition {0} cannot be null",
    "zh_CN": "查询条件中{0}的\u0027值\u0027不能为空",
    "arguments": [
      "JSONObjectUtil.toJsonString(cond)"
    ],
    "line": 659,
    "fileName": "src/main/java/org/zstack/query/QueryFacadeImpl.java"
  },
  {
    "raw": "resources has inconsistent resourceTypes. Details: %s",
    "en_US": "resources has inconsistent resourceTypes. Details: {0}",
    "zh_CN": "资源具有不一致的资源类型。详细信息：{0}",
    "arguments": [
      "typeByResourceUuids.toString()"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfig.java"
  },
  {
    "raw": "cannot find resource[uuid: %s]",
    "en_US": "cannot find resource[uuid: {0}]",
    "zh_CN": "找不到资源[uuid：{0}]",
    "arguments": [
      "resourceUuid"
    ],
    "line": 433,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfig.java"
  },
  {
    "raw": "ResourceConfig [category:%s, name:%s] cannot bind to resourceType: %s",
    "en_US": "ResourceConfig [category:{0}, name:{1}] cannot bind to resourceType: {2}",
    "zh_CN": "ResourceConfig[类别：{0}，名称：{1}]无法绑定到资源类型：{2}",
    "arguments": [
      "globalConfig.getCategory()",
      "globalConfig.getName()",
      "resourceType"
    ],
    "line": 437,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfig.java"
  },
  {
    "raw": "no global config[category:%s, name:%s] found",
    "en_US": "no global config[category:{0}, name:{1}] found",
    "zh_CN": "找不到全局配置[类别：{0}，名称：{1}]",
    "arguments": [
      "msg.getCategory()",
      "identity"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java"
  },
  {
    "raw": "global config[category:%s, name:%s] cannot bind resource",
    "en_US": "global config[category:{0}, name:{1}] cannot bind resource",
    "zh_CN": "全局配置[类别：{0}，名称：{1}]无法绑定资源",
    "arguments": [
      "msg.getCategory()",
      "identity"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java"
  },
  {
    "raw": "account has no access to the resource[uuid: %s]",
    "en_US": "account has no access to the resource[uuid: {0}]",
    "zh_CN": "账号没有访问资源[uuid:{0}]的权限",
    "arguments": [
      "msg.getResourceUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java"
  },
  {
    "raw": "[%s] field is excepted an int or long, but was [%s].",
    "en_US": "[{0}] field is excepted an int or long, but was [{1}].",
    "zh_CN": "[{0}] 属性期望是一个整数，但是得到的是 [{1}]",
    "arguments": [
      "f.getName()",
      "source"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/rest/TypeVerifier.java"
  },
  {
    "raw": "Invalid value for boolean field [%s], [%s] is not a valid boolean string[true, false].",
    "en_US": "Invalid value for boolean field [{0}], [{1}] is not a valid boolean string[true, false].",
    "zh_CN": "boolean属性字段[{0}]无效，[{1}]不是一个有效的boolean字符串[true, false]",
    "arguments": [
      "f.getName()",
      "source"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/rest/TypeVerifier.java"
  },
  {
    "raw": "All the networks should be in the virtual router[%s]",
    "en_US": "All the networks should be in the virtual router[{0}]",
    "zh_CN": "所有网络都应位于虚拟路由器[{0}]中",
    "arguments": [
      "msg.getvRouterUuid()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "[%s] is not formatted as IPv4 address",
    "en_US": "[{0}] is not formatted as IPv4 address",
    "zh_CN": "[{0}]的格式不是IPv4地址",
    "arguments": [
      "msg.getAreaId()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "KeyID \u0026 password must be not null when authentication type is %s",
    "en_US": "KeyID \u0026 password must be not null when authentication type is {0}",
    "zh_CN": "当身份验证类型为{0}时，密钥ID和密码不能为Null",
    "arguments": [
      "msg.getAreaAuth()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "password must be not null when authentication type is %s",
    "en_US": "password must be not null when authentication type is {0}",
    "zh_CN": "当身份验证类型为{0}时，密码不能为null",
    "arguments": [
      "msg.getAreaAuth()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "the length of password is at most than 8Bytes when authentication type is %s",
    "en_US": "the length of password is at most than 8Bytes when authentication type is {0}",
    "zh_CN": "当身份验证类型为{0}时，密码长度不超过8个字节",
    "arguments": [
      "msg.getAreaAuth()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "AreaId[%s] type must be %s",
    "en_US": "AreaId[{0}] type must be {1}",
    "zh_CN": "AreaID[{0}]类型必须为{1}",
    "arguments": [
      "vo.getAreaId()",
      "RouterAreaType.Standard.toString()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "AreaId[%s] has been created",
    "en_US": "AreaId[{0}] has been created",
    "zh_CN": "已创建Area ID[{0}]",
    "arguments": [
      "msg.getAreaId()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "The network[%s] have been added into the haGroup[%s]",
    "en_US": "The network[{0}] have been added into the haGroup[{1}]",
    "zh_CN": "网络[{0}]已添加到HAG组[{1}]",
    "arguments": [
      "vo.getL3NetworkUuid()",
      "haUuid"
    ],
    "line": 158,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "The network[%s] have been added into the virtual routerArea[%s]",
    "en_US": "The network[{0}] have been added into the virtual routerArea[{1}]",
    "zh_CN": "网络[{0}]已添加到虚拟路由器区域[{1}]",
    "arguments": [
      "vo.getL3NetworkUuid()",
      "vo.getRouterAreaUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "Router ID[%s] is not formatted as IPv4 address",
    "en_US": "Router ID[{0}] is not formatted as IPv4 address",
    "zh_CN": "路由器ID[{0}]的格式不是IPv4地址",
    "arguments": [
      "msg.getRouterId()"
    ],
    "line": 181,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "Router ID[%s] is not unique in this system",
    "en_US": "Router ID[{0}] is not unique in this system",
    "zh_CN": "路由器ID[{0}]在此系统中不唯一",
    "arguments": [
      "msg.getRouterId()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java"
  },
  {
    "raw": "the last job is not completed. skip this job",
    "en_US": "the last job is not completed. skip this job",
    "zh_CN": "上一个作业未完成。跳过这份工作",
    "arguments": [],
    "line": 235,
    "fileName": "src/main/java/org/zstack/scheduler/AbstractSchedulerJob.java"
  },
  {
    "raw": "cron must be set when use cron scheduler",
    "en_US": "cron must be set when use cron scheduler",
    "zh_CN": "当使用定时器任务时，必须设置cron",
    "arguments": [],
    "line": 189,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "cron task must follow format like this : \\\"0 0/3 17-23 * * ?\\\" ",
    "en_US": "cron task must follow format like this : \\\"0 0/3 17-23 * * ?\\\" ",
    "zh_CN": "定时器任务必须符合以下格式: \\\"0 0/3 17-23 * * ?\\\" ",
    "arguments": [],
    "line": 195,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "cron scheduler only need to specify cron task",
    "en_US": "cron scheduler only need to specify cron task",
    "zh_CN": "定时调度器（Cron Scheduler）仅需要指定定时任务（Cron Task）",
    "arguments": [],
    "line": 198,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime out of range",
    "en_US": "startTime out of range",
    "zh_CN": "开始时间超出范围",
    "arguments": [],
    "line": 207,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime must be positive integer or 0",
    "en_US": "startTime must be positive integer or 0",
    "zh_CN": "开始时间必须是正整数或者0",
    "arguments": [],
    "line": 203,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "stopTime has been passed",
    "en_US": "stopTime has been passed",
    "zh_CN": "截止时间已经过去了",
    "arguments": [],
    "line": 184,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "stopTime out of mysql timestamp range",
    "en_US": "stopTime out of mysql timestamp range",
    "zh_CN": "定时任务停止时间超出mysql的timestamp的范围",
    "arguments": [],
    "line": 182,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "duration time out of range",
    "en_US": "duration time out of range",
    "zh_CN": "任务需要的时间超出范围",
    "arguments": [],
    "line": 180,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "interval must be set when use simple scheduler when repeat more than once",
    "en_US": "interval must be set when use simple scheduler when repeat more than once",
    "zh_CN": "当简单定时任务执行超过一次时，必须设置间隔时间",
    "arguments": [],
    "line": 99,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "Can not add job[uuid:%s] twice to the same trigger[uuid:%s]",
    "en_US": "Can not add job[uuid:{0}] twice to the same trigger[uuid:{1}]",
    "zh_CN": "不能两次添加任务[uuid:{0}]到相同的触发器[uuid:{1}]",
    "arguments": [
      "msg.getSchedulerJobUuid()",
      "msg.getSchedulerTriggerUuid()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "Can not add job[uuid:%s] to a out of time trigger[uuid:%s]",
    "en_US": "Can not add job[uuid:{0}] to a out of time trigger[uuid:{1}]",
    "zh_CN": "不能添加任务[uuid:{0}]到一个已经过时的触发器[uuid:{1}]",
    "arguments": [
      "msg.getSchedulerJobUuid()",
      "msg.getSchedulerTriggerUuid()"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "There are [%d] triggers added to job[uuid:%s], cannot add any more.",
    "en_US": "There are [{0}] triggers added to job[uuid:{1}], cannot add any more.",
    "zh_CN": "有[{0}]个触发器已添加到作业[uuid：{1}]，无法再添加更多触发器。",
    "arguments": [
      "count",
      "msg.getSchedulerJobUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "There are [%d] triggers added to job group[uuid:%s], cannot add any more.",
    "en_US": "There are [{0}] triggers added to job group[uuid:{1}], cannot add any more.",
    "zh_CN": "有[{0}]个触发器已添加到作业组[uuid：{1}]，无法添加更多触发器。",
    "arguments": [
      "count",
      "msg.getSchedulerJobGroupUuid()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "invalid cron expression",
    "en_US": "invalid cron expression",
    "zh_CN": "无效的cron表达式",
    "arguments": [],
    "line": 192,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "startTime must be set for simple scheduler",
    "en_US": "startTime must be set for simple scheduler",
    "zh_CN": "simple类型的定时任务必须设置开始时间[startTime]",
    "arguments": [],
    "line": 172,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "schedulerInterval must be set for simple scheduler",
    "en_US": "schedulerInterval must be set for simple scheduler",
    "zh_CN": "simple类型的定时任务必须设置执行间隔[schedulerInterval]",
    "arguments": [],
    "line": 176,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "No SchedulerJobFactory of type[%s] found",
    "en_US": "No SchedulerJobFactory of type[{0}] found",
    "zh_CN": "未找到类型为[{0}]的SchedulerJobFactory",
    "arguments": [
      "msg.getType()"
    ],
    "line": 226,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "%d jobs have different job type with job group",
    "en_US": "{0} jobs have different job type with job group",
    "zh_CN": "{0}个作业的作业类型与作业组不同",
    "arguments": [
      "n"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "job group has contained %d job, only %d seats left",
    "en_US": "job group has contained {0} job, only {1} seats left",
    "zh_CN": "作业组已包含{0}个作业，只剩下{1}个席位",
    "arguments": [
      "count",
      "limit - count"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java"
  },
  {
    "raw": "invalid time unit: %s",
    "en_US": "invalid time unit: {0}",
    "zh_CN": "无效时间单位：{0}",
    "arguments": [
      "timeUnitInStr"
    ],
    "line": 794,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java"
  },
  {
    "raw": "trigger job[uuid: %s] failed, because %s",
    "en_US": "trigger job[uuid: {0}] failed, because {1}",
    "zh_CN": "触发器作业[uuid：{0}]失败，原因是{1}",
    "arguments": [
      "jobUuid",
      "e.getMessage()"
    ],
    "line": 921,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java"
  },
  {
    "raw": "field[%s] cannot be empty",
    "en_US": "field[{0}] cannot be empty",
    "zh_CN": "字段[{0}]不能为空",
    "arguments": [
      "field.getName()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/scheduler/SchedulerJobParamCascadeUpdater.java"
  },
  {
    "raw": "the volume[%s] is not available. check if the volume exists.",
    "en_US": "the volume[{0}] is not available. check if the volume exists.",
    "zh_CN": "卷[{0}]不可用。检查卷是否存在。",
    "arguments": [
      "msg.getTargetResourceUuid()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java"
  },
  {
    "raw": "the volume[%s] is not root volume",
    "en_US": "the volume[{0}] is not root volume",
    "zh_CN": "卷[{0}]不是根卷",
    "arguments": [
      "msg.getTargetResourceUuid()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java"
  },
  {
    "raw": "the vm of the root volume[%s] is not available. check if the vm exists.",
    "en_US": "the vm of the root volume[{0}] is not available. check if the vm exists.",
    "zh_CN": "根卷[{0}]的VM不可用。检查云主机是否存在。",
    "arguments": [
      "msg.getTargetResourceUuid()"
    ],
    "line": 63,
    "fileName": "src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java"
  },
  {
    "raw": "The primary storage of volumes don not support create volume snapshot group job.",
    "en_US": "The primary storage of volumes don not support create volume snapshot group job.",
    "zh_CN": "卷的主存储不支持创建卷快照组作业。",
    "arguments": [],
    "line": 70,
    "fileName": "src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java"
  },
  {
    "raw": "snapshotGroupMaxNumber : %s format error because %s",
    "en_US": "snapshotGroupMaxNumber : {0} format error because {1}",
    "zh_CN": "SnapshotGroupMaxNumber：{0}格式错误，原因是{1}",
    "arguments": [
      "msg.getParameters().get(SchedulerJobParameters.snapshotGroupMax)",
      "e.getMessage()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java"
  },
  {
    "raw": "the volume[%s] does not support snapshots retention",
    "en_US": "the volume[{0}] does not support snapshots retention",
    "zh_CN": "卷[{0}]不支持快照保留",
    "arguments": [
      "msg.getTargetResourceUuid()"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java"
  },
  {
    "raw": "snapshotMaxNumber : %s format error because %s",
    "en_US": "snapshotMaxNumber : {0} format error because {1}",
    "zh_CN": "snapshotMaxNumber : {0} 转换类型失败，因为{1}",
    "arguments": [
      "msg.getParameters().get(SchedulerJobParameters.snapshotMax)",
      "e.getMessage()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java"
  },
  {
    "raw": "the vm of the root volume[%s] state in Destroyed. job state change is not allowed",
    "en_US": "the vm of the root volume[{0}] state in Destroyed. job state change is not allowed",
    "zh_CN": "根卷[{0}]的VM处于已销毁状态。不允许更改作业状态",
    "arguments": [
      "getTargetResourceUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java"
  },
  {
    "raw": "The primary storage of volumes don not support create volume snapshot group job",
    "en_US": "The primary storage of volumes don not support create volume snapshot group job",
    "zh_CN": "卷的主存储不支持创建卷快照组作业",
    "arguments": [],
    "line": 189,
    "fileName": "src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java"
  },
  {
    "raw": "vm[uuid:%s] is destroyed, state change is not allowed",
    "en_US": "vm[uuid:{0}] is destroyed, state change is not allowed",
    "zh_CN": "VM[uuid：{0}]已销毁，不允许更改状态",
    "arguments": [
      "getTargetResourceUuid()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java"
  },
  {
    "raw": "Sdn controller type: %s in not in the supported list: %s ",
    "en_US": "Sdn controller type: {0} in not in the supported list: {1} ",
    "zh_CN": "SDN控制器类型：{0}不在支持的列表中：{1}",
    "arguments": [
      "msg.getVendorType()",
      "SdnControllerType.getAllTypeNames()"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/sdnController/SdnControllerApiInterceptor.java"
  },
  {
    "raw": "unable create vni range, because l2 uuid[%s] is not vxlan network pool",
    "en_US": "unable create vni range, because l2 uuid[{0}] is not vxlan network pool",
    "zh_CN": "无法创建VNI范围，因为L2 uuid[{0}]不是VXLAN网络池",
    "arguments": [
      "msg.getL2NetworkUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java"
  },
  {
    "raw": "the vni range:[%s.%s} is illegal, because h3c\u0027s controller uses vni as vlan id",
    "en_US": "the vni range:[{0}.{1}} is illegal, because h3c\u0027s controller uses vni as vlan id",
    "zh_CN": "VNI范围[{0}.{1}}非法，因为H3C的控制器使用VNI作为VLAN ID",
    "arguments": [
      "msg.getStartVni()",
      "msg.getEndVni()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java"
  },
  {
    "raw": "the vni range:[%s.%s} is illegal, must covered by a sdn\u0027s vniRange",
    "en_US": "the vni range:[{0}.{1}} is illegal, must covered by a sdn\u0027s vniRange",
    "zh_CN": "VNI范围[{0}.{1}}非法，必须由SDN的VNI范围覆盖",
    "arguments": [
      "userVniRange.startVni",
      "userVniRange.endVni"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java"
  },
  {
    "raw": "H3C VCFC controller must include systemTags vdsUuid::{%s}",
    "en_US": "H3C VCFC controller must include systemTags vdsUuid::{{0}}",
    "zh_CN": "H3C VCFC控制器必须包含系统标签VDSuuid：:{{0}}",
    "arguments": [],
    "line": 178,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java"
  },
  {
    "raw": "get sdn controller [ip:%s] vni range failed because %s",
    "en_US": "get sdn controller [ip:{0}] vni range failed because {1}",
    "zh_CN": "获取SDN控制器[IP：{0}]VNI范围失败，原因是{1}",
    "arguments": [
      "self.getIp()",
      "e.getLocalizedMessage()"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "get vni range on sdn controller [ip:%s] failed",
    "en_US": "get vni range on sdn controller [ip:{0}] failed",
    "zh_CN": "在SDN控制器[IP：{0}]上获取VNI范围失败",
    "arguments": [
      "self.getIp()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "there is no vni range on sdn controller [ip:%s]",
    "en_US": "there is no vni range on sdn controller [ip:{0}]",
    "zh_CN": "SDN控制器[IP：{0}]上没有VNI范围",
    "arguments": [
      "self.getIp()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "there is no default tenant on sdn controller [ip:%s]",
    "en_US": "there is no default tenant on sdn controller [ip:{0}]",
    "zh_CN": "SDN控制器[IP：{0}]上没有默认租户",
    "arguments": [
      "self.getIp()"
    ],
    "line": 154,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "create vxlan network on sdn controller [ip:%s] failed because %s",
    "en_US": "create vxlan network on sdn controller [ip:{0}] failed because {1}",
    "zh_CN": "在SDN控制器[IP：{0}]上创建VXLAN网络失败，原因是{1}",
    "arguments": [
      "self.getIp()",
      "e.getMessage()"
    ],
    "line": 299,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "create vxlan network on sdn controller [ip:%s] failed",
    "en_US": "create vxlan network on sdn controller [ip:{0}] failed",
    "zh_CN": "在SDN控制器[IP：{0}]上创建VXLAN网络失败",
    "arguments": [
      "self.getIp()"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "delete vxlan network on sdn controller [ip:%s] failed because %s",
    "en_US": "delete vxlan network on sdn controller [ip:{0}] failed because {1}",
    "zh_CN": "删除SDN控制器[IP：{0}]上的VXLAN网络失败，原因是{1}",
    "arguments": [
      "self.getIp()",
      "e.getMessage()"
    ],
    "line": 383,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "delete vxlan network on sdn controller [ip:%s] failed",
    "en_US": "delete vxlan network on sdn controller [ip:{0}] failed",
    "zh_CN": "删除SDN控制器[IP：{0}]上的VXLAN网络失败",
    "arguments": [
      "self.getIp()"
    ],
    "line": 377,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "get token of sdn controller [ip:%s] failed because %s",
    "en_US": "get token of sdn controller [ip:{0}] failed because {1}",
    "zh_CN": "获取SDN控制器[IP：{0}]的令牌失败，原因是{1}",
    "arguments": [
      "self.getIp()",
      "e.getMessage()"
    ],
    "line": 468,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "get leader of sdn controller [ip:%s] failed",
    "en_US": "get leader of sdn controller [ip:{0}] failed",
    "zh_CN": "获取SDN控制器[IP：{0}]的领导者失败",
    "arguments": [
      "self.getIp()"
    ],
    "line": 439,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "get token of sdn controller [ip:%s] failed",
    "en_US": "get token of sdn controller [ip:{0}] failed",
    "zh_CN": "获取SDN控制器[IP：{0}]的令牌失败",
    "arguments": [
      "self.getIp()"
    ],
    "line": 460,
    "fileName": "src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java"
  },
  {
    "raw": "there is no sdn controller for vxlan pool [uuid:%s]",
    "en_US": "there is no sdn controller for vxlan pool [uuid:{0}]",
    "zh_CN": "VXLAN池[uuid：{0}]没有SDN控制器",
    "arguments": [
      "vo.getPoolUuid()"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetwork.java"
  },
  {
    "raw": "cannot configure hardware vxlan network for vm[uuid:%s] on the destination host[uuid:%s]",
    "en_US": "cannot configure hardware vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]",
    "zh_CN": "无法为目标物理机[uuid：{1}]上的VM[uuid：{0}]配置硬件VXLAN网络",
    "arguments": [
      "inv.getUuid()",
      "destHostUuid"
    ],
    "line": 410,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkFactory.java"
  },
  {
    "raw": "cannot create vlan-device on %s because it\u0027s too long",
    "en_US": "cannot create vlan-device on {0} because it\u0027s too long",
    "zh_CN": "无法在{0}上创建VLAN设备，因为它太长",
    "arguments": [
      "msg.getPhysicalInterface()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "hardware vxlan network pool doesn\u0027t support create l3 network",
    "en_US": "hardware vxlan network pool doesn\u0027t support create l3 network",
    "zh_CN": "硬件VXLAN网络池不支持创建三层网络",
    "arguments": [],
    "line": 112,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "hardware vxlan network pool must configure the physical interface",
    "en_US": "hardware vxlan network pool must configure the physical interface",
    "zh_CN": "硬件VXLAN网络池必须配置物理接口",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "ONLY hardware vxlan network can be created in hardware vxlan pool",
    "en_US": "ONLY hardware vxlan network can be created in hardware vxlan pool",
    "zh_CN": "在硬件VXLAN池中只能创建硬件VXLAN网络",
    "arguments": [],
    "line": 126,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "hardware vxlan network can ONLY be created in hardware vxlan pool",
    "en_US": "hardware vxlan network can ONLY be created in hardware vxlan pool",
    "zh_CN": "硬件VXLAN网络只能在硬件VXLAN池中创建",
    "arguments": [],
    "line": 131,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java"
  },
  {
    "raw": "failed to create bridge[%s] for hardwareVxlan[uuid:%s, type:%s, vlan:%s] on kvm host[uuid:%s], because %s",
    "en_US": "failed to create bridge[{0}] for hardwareVxlan[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}",
    "zh_CN": "无法在KVM物理机[uuid：{4}]上为HardwareVXLAN[uuid：{1}，类型：{2}，VLAN：{3}]创建网桥[{0}]，因为{5}",
    "arguments": [
      "cmd.getBridgeName()",
      "l2Network.getUuid()",
      "l2Network.getType()",
      "finalVlanId",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java"
  },
  {
    "raw": "failed to check bridge[%s] for hardwareVxlan[uuid:%s, name:%s] on kvm host[uuid:%s], %s",
    "en_US": "failed to check bridge[{0}] for hardwareVxlan[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}",
    "zh_CN": "无法在KVM物理机[uuid：{3}]上检查硬件VXLAN[uuid：{1}，名称：{2}]的网桥[{0}]，{4}",
    "arguments": [
      "cmd.getBridgeName()",
      "vxlan.getUuid()",
      "vxlan.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 144,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java"
  },
  {
    "raw": "failed to check physical interface for HardwareVxlanPool[uuid:%s, name:%s] on kvm host[uuid: %s], %s",
    "en_US": "failed to check physical interface for HardwareVxlanPool[uuid:{0}, name:{1}] on kvm host[uuid: {2}], {3}",
    "zh_CN": "无法检查KVM物理机[uuid：{2}]上的硬件vxlanpool[uuid：{0}，名称：{1}]的物理接口，{3}",
    "arguments": [
      "l2Network.getUuid()",
      "l2Network.getName()",
      "hostUuid",
      "rsp.getError()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanPoolNetworkBackend.java"
  },
  {
    "raw": "set to disconnected",
    "en_US": "set to disconnected",
    "zh_CN": "设置为断开连接",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/simulator/SimulatorHost.java"
  },
  {
    "raw": "invalid phone number[%s], sms number is like +86-18654321234",
    "en_US": "invalid phone number[{0}], sms number is like +86-18654321234",
    "zh_CN": "电话号码[{0}]无效，短信号码类似于+86-18654321234",
    "arguments": [
      "number"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "can not add same email address to endpoint[uuid:%s]",
    "en_US": "can not add same email address to endpoint[uuid:{0}]",
    "zh_CN": "无法将同一电子邮件地址添加到终结点[uuid：{0}]",
    "arguments": [
      "msg.getApplicationEndpointUuid()"
    ],
    "line": 64,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "invalid email address[%s]",
    "en_US": "invalid email address[{0}]",
    "zh_CN": "无效的email地址[{0}]",
    "arguments": [
      "errorEmails"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "cannot update email address to %s, which is already exists in endpoint[uuid:%s]",
    "en_US": "cannot update email address to {0}, which is already exists in endpoint[uuid:{1}]",
    "zh_CN": "无法将电子邮件地址更新为{0}，该地址已存在于终结点[uuid：{1}]中",
    "arguments": [
      "msg.getEmailAddress()",
      "msg.getApplicationEndpointUuid()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "phone number [%s] already exists",
    "en_US": "phone number [{0}] already exists",
    "zh_CN": "电话号码[{0}]已存在",
    "arguments": [
      "msg.getPhoneNumber()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "phone number[%s] already exists",
    "en_US": "phone number[{0}] already exists",
    "zh_CN": "手机号码[{0}]已存在",
    "arguments": [
      "msg.getPhoneNumber()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "invalid url[%s]",
    "en_US": "invalid url[{0}]",
    "zh_CN": "无效的url[{0}]",
    "arguments": [
      "url"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "[%s] is not a legal ip",
    "en_US": "[{0}] is not a legal ip",
    "zh_CN": "[{0}]不是合法的IP",
    "arguments": [
      "host"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "invalid phone number[%s], the DingDing phone number is like +86-12388889999",
    "en_US": "invalid phone number[{0}], the DingDing phone number is like +86-12388889999",
    "zh_CN": "无效的手机号码[{0}], 钉钉手机号码格式应当为 +86-12388889999",
    "arguments": [
      "n"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "username and password must either absent at all or present with each other",
    "en_US": "username and password must either absent at all or present with each other",
    "zh_CN": "用户名和密码要么同时为空要么同时不为空",
    "arguments": [],
    "line": 144,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "can not create sns email endpoint without any email address",
    "en_US": "can not create sns email endpoint without any email address",
    "zh_CN": "无法在没有任何电子邮件地址的情况下创建SNS电子邮件端点",
    "arguments": [],
    "line": 152,
    "fileName": "src/main/java/org/zstack/sns/SNSApiInterceptor.java"
  },
  {
    "raw": "the operation is not permitted for the system application platform",
    "en_US": "the operation is not permitted for the system application platform",
    "zh_CN": "禁止对该应用平台进行当前操作",
    "arguments": [],
    "line": 118,
    "fileName": "src/main/java/org/zstack/sns/SNSApplicationPlatformBase.java"
  },
  {
    "raw": "cannot find the SNSTopic[uuid:%s], it may have been deleted",
    "en_US": "cannot find the SNSTopic[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到SNS主题[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getTopicUuid()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/sns/SNSManagerImpl.java"
  },
  {
    "raw": "cannot find SNSApplicationPlatform[uuid:%s], it may have been deleted",
    "en_US": "cannot find SNSApplicationPlatform[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到SNS应用平台[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getApplicationPlatformUuid()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/sns/SNSManagerImpl.java"
  },
  {
    "raw": "cannot find SNSApplicationEndpoint[uuid:%s], it may have been deleted",
    "en_US": "cannot find SNSApplicationEndpoint[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到SNS应用接收终端[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getApplicationEndpointUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/sns/SNSManagerImpl.java"
  },
  {
    "raw": "the topic is not subscribed by any endpoints",
    "en_US": "the topic is not subscribed by any endpoints",
    "zh_CN": "当前主题并未被任何应用终端订阅",
    "arguments": [],
    "line": 128,
    "fileName": "src/main/java/org/zstack/sns/SNSTopicBase.java"
  },
  {
    "raw": "application platform is disabled",
    "en_US": "application platform is disabled",
    "zh_CN": "应用平台被不可用",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/sns/SNSTopicBase.java"
  },
  {
    "raw": "application endpoint is disabled",
    "en_US": "application endpoint is disabled",
    "zh_CN": "应用接收端被禁用",
    "arguments": [],
    "line": 224,
    "fileName": "src/main/java/org/zstack/sns/SNSTopicBase.java"
  },
  {
    "raw": "Aliyun account[uuid:%s] not exists",
    "en_US": "Aliyun account[uuid:{0}] not exists",
    "zh_CN": "阿里云账号[uuid：{0}]不存在",
    "arguments": [
      "msg.getAccessKeyUuid()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsApiInterceptor.java"
  },
  {
    "raw": "Aliyun sms event text template not found.",
    "en_US": "Aliyun sms event text template not found.",
    "zh_CN": "未找到阿里云短信事件文本模板。",
    "arguments": [
      "SysErrors.RESOURCE_NOT_FOUND"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsEndpoint.java"
  },
  {
    "raw": "failed to send messages to DingTalk. status: %s, body: %s",
    "en_US": "failed to send messages to DingTalk. status: {0}, body: {1}",
    "zh_CN": "向DingTalk发送消息失败。状态：{0}，正文：{1}",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/sns/platform/dingtalk/SNSDingTalkEndpoint.java"
  },
  {
    "raw": "cannot connect SMTP server[server: %s, port: %s] in 15 seconds",
    "en_US": "cannot connect SMTP server[server: {0}, port: {1}] in 15 seconds",
    "zh_CN": "在15秒内无法连接到SMTP服务器[server: {0}, port: {1}]",
    "arguments": [
      "getSelf().getSmtpServer()",
      "getSelf().getSmtpPort()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "SMTP server validation error: %s",
    "en_US": "SMTP server validation error: {0}",
    "zh_CN": "SMTP服务器验证错误: {0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "the endpoint is disabled",
    "en_US": "the endpoint is disabled",
    "zh_CN": "通知终端不可用",
    "arguments": [],
    "line": 130,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "no subject",
    "en_US": "no subject",
    "zh_CN": "没有主题",
    "arguments": [],
    "line": 158,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java"
  },
  {
    "raw": "The problem may be caused by an incorrect user name or password or email permission denied",
    "en_US": "The problem may be caused by an incorrect user name or password or email permission denied",
    "zh_CN": "导致操作失败的原因可能是不正确的用户名、密码或邮件访问权限不足",
    "arguments": [],
    "line": 66,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java"
  },
  {
    "raw": "Couldn\u0027t connect to host, port: %s, %d. The problem may be caused by an incorrect smtpServer or smtpPort",
    "en_US": "Couldn\u0027t connect to host, port: {0}, {1}. The problem may be caused by an incorrect smtpServer or smtpPort",
    "zh_CN": "连接{0}:{1}超时，导致原因可能是不正确的邮件服务器和邮件服务器端口",
    "arguments": [
      "smtpServer",
      "smtpPort"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java"
  },
  {
    "raw": "HTTP POST failure. status: %s, body: %s",
    "en_US": "HTTP POST failure. status: {0}, body: {1}",
    "zh_CN": "HTTP POST失败，状态码: {0}, body: {1}",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/sns/platform/http/SNSHttpEndpoint.java"
  },
  {
    "raw": "failed to send messages to Microsoft Teams. status: %s, body: %s",
    "en_US": "failed to send messages to Microsoft Teams. status: {0}, body: {1}",
    "zh_CN": "未能将消息发送到Microsoft Teams。状态：{0}，正文：{1}",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 69,
    "fileName": "src/main/java/org/zstack/sns/platform/microsoftteams/SNSMicrosoftTeamsEndpoint.java"
  },
  {
    "raw": "only HTTP endpoint can subscribe API topic, the endpoint[type:%s] is not a HTTP endpoint",
    "en_US": "only HTTP endpoint can subscribe API topic, the endpoint[type:{0}] is not a HTTP endpoint",
    "zh_CN": "仅HTTP通知终端可以订阅API通知主题，当前通知终端[type:{0}]不是一个HTTP通知终端",
    "arguments": [
      "endpoint.getType()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java"
  },
  {
    "raw": "API topic cannot be deleted",
    "en_US": "API topic cannot be deleted",
    "zh_CN": "API通知主题无法被删除",
    "arguments": [],
    "line": 191,
    "fileName": "src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java"
  },
  {
    "raw": "system alarm topic cannot be deleted",
    "en_US": "system alarm topic cannot be deleted",
    "zh_CN": "系统警报通知主题不能被删除",
    "arguments": [],
    "line": 78,
    "fileName": "src/main/java/org/zstack/sns/system/SNSSystemAlarmTopicManagerImpl.java"
  },
  {
    "raw": "url is error, clientUuid is miss",
    "en_US": "url is error, clientUuid is miss",
    "zh_CN": "URL错误，缺少Clientuuid",
    "arguments": [],
    "line": 53,
    "fileName": "src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java"
  },
  {
    "raw": " missing cas client, please create cas client before sso",
    "en_US": " missing cas client, please create cas client before sso",
    "zh_CN": "缺少CAS客户端，请在SSO之前创建CAS客户端",
    "arguments": [],
    "line": 58,
    "fileName": "src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java"
  },
  {
    "raw": "duplicate casLogin[%s, %s] for type[%s]",
    "en_US": "duplicate casLogin[{0}, {1}] for type[{2}]",
    "zh_CN": "类型[{2}]的CASLogin[{0}，{1}]重复",
    "arguments": [
      "login.getClass().getName()",
      "old.getClass().getName()",
      "login.getLoginType()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java"
  },
  {
    "raw": "Cannot find CasLogin for type(%s)",
    "en_US": "Cannot find CasLogin for type({0})",
    "zh_CN": "找不到类型（{0}）的CASlogin",
    "arguments": [
      "type"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java"
  },
  {
    "raw": "iam2 has a user with the same name[%s]",
    "en_US": "iam2 has a user with the same name[{0}]",
    "zh_CN": "IAM2具有同名[{0}]的用户",
    "arguments": [
      "userName"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/sso/cas/service/CasLoginIAM2.java"
  },
  {
    "raw": " local user has a user with the same name[%s]",
    "en_US": " local user has a user with the same name[{0}]",
    "zh_CN": "本地用户具有同名[{0}]的用户",
    "arguments": [
      "userName"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM1.java"
  },
  {
    "raw": "fail to get params[%s]",
    "en_US": "fail to get params[{0}]",
    "zh_CN": "无法获取参数[{0}]",
    "arguments": [
      "ssoUseAsLoginName"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java"
  },
  {
    "raw": "get user name is null",
    "en_US": "get user name is null",
    "zh_CN": "获取用户名为空",
    "arguments": [],
    "line": 61,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java"
  },
  {
    "raw": " iam2 has a user with the same name[%s]",
    "en_US": " iam2 has a user with the same name[{0}]",
    "zh_CN": "IAM2具有同名[{0}]的用户",
    "arguments": [
      "userName"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java"
  },
  {
    "raw": "HTTP ERROR, status code: %s, body: %s",
    "en_US": "HTTP ERROR, status code: {0}, body: {1}",
    "zh_CN": "HTTP错误，状态代码：{0}，正文：{1}",
    "arguments": [
      "rsp.getStatusCode()",
      "rsp.getBody()"
    ],
    "line": 375,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "failed to %s to %s, status code: %s, response body: %s",
    "en_US": "failed to {0} to {1}, status code: {2}, response body: {3}",
    "zh_CN": "访问{1}时执行{0}方法失败，状态码: {2}，响应体: {3}",
    "arguments": [
      "HttpMethod.POST",
      "url",
      "e.getStatusCode()",
      "e.getResponseBodyAsString()"
    ],
    "line": 382,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "failed to %s to %s, IO Error: %s",
    "en_US": "failed to {0} to {1}, IO Error: {2}",
    "zh_CN": "访问{1}时执行{0}方法失败，IO错误: {2}",
    "arguments": [
      "HttpMethod.POST",
      "url",
      "e.getMessage()"
    ],
    "line": 386,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "response has error : %s",
    "en_US": "response has error : {0}",
    "zh_CN": "响应出现错误：{0}",
    "arguments": [
      "e"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "duplicate OAuth2Login[%s, %s] for type[%s]",
    "en_US": "duplicate OAuth2Login[{0}, {1}] for type[{2}]",
    "zh_CN": "类型[{2}]的重复OAuth2Login[{0}，{1}]",
    "arguments": [
      "login.getClass().getName()",
      "old.getClass().getName()",
      "login.getLoginType()"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "Cannot find OAuth2Login for type(%s)",
    "en_US": "Cannot find OAuth2Login for type({0})",
    "zh_CN": "找不到类型（{0}）的OAuth2Login",
    "arguments": [
      "type"
    ],
    "line": 113,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "there was an error, reason:  token response is null",
    "en_US": "there was an error, reason:  token response is null",
    "zh_CN": "出现错误，原因：令牌响应为空",
    "arguments": [],
    "line": 190,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "there was an error, reason:  %s is null",
    "en_US": "there was an error, reason:  {0} is null",
    "zh_CN": "出现错误，原因：{0}为空",
    "arguments": [
      "AuthGolabalProperty.OAUTH2_GET_TOKEN_USERINFO"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "get code response has error : %s",
    "en_US": "get code response has error : {0}",
    "zh_CN": "获取代码响应出现错误：{0}",
    "arguments": [
      "e"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java"
  },
  {
    "raw": "%s should not be null",
    "en_US": "{0} should not be null",
    "zh_CN": "{0} 不能为空",
    "arguments": [
      "name"
    ],
    "line": 65,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "zoneUuids, backupStorageUuids 至少有一个不为空，或者all被设置为真 ",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "backup storage[uuid:%s] has not been attached to zone[uuid:%s]",
    "en_US": "backup storage[uuid:{0}] has not been attached to zone[uuid:{1}]",
    "zh_CN": "镜像服务器[uuid:{0}]没有被加载到zone[uuid:{1}]",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "backup storage[uuid:%s] has been attached to zone[uuid:%s]",
    "en_US": "backup storage[uuid:{0}] has been attached to zone[uuid:{1}]",
    "zh_CN": "镜像服务器[uuid:{0}]已经被加载到zone[uuid:{1}]",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "msg.getZoneUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java"
  },
  {
    "raw": "failed to get header of image url %s: %s",
    "en_US": "failed to get header of image url {0}: {1}",
    "zh_CN": "获取链接 {0} 的Header信息失败，原因：{1}",
    "arguments": [
      "url",
      "e.toString()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "failed to get header of image url %s",
    "en_US": "failed to get header of image url {0}",
    "zh_CN": "获取链接 {0} 的Header信息失败",
    "arguments": [
      "url"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "the backup storage[uuid:%s, name:%s] has not enough capacity to download the image[%s].Required size:%s, available size:%s",
    "en_US": "the backup storage[uuid:{0}, name:{1}] has not enough capacity to download the image[{2}].Required size:{3}, available size:{4}",
    "zh_CN": "镜像服务器[uuid:{0}, name:{1}]没有足够的容量可供下载镜像[{2}]。需要的大小: {3}，可用的大小: {4}",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "url",
      "size",
      "self.getAvailableCapacity()"
    ],
    "line": 175,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "the image size get from url %s is %d bytes, it\u0027s too small for an image, please check the url again.",
    "en_US": "the image size get from url {0} is {1} bytes, it\u0027s too small for an image, please check the url again.",
    "zh_CN": "从链接 {0} 获取到的镜像大小为{1}字节，对一个正常的镜像来说太小了，请检查该链接是否合法",
    "arguments": [
      "url",
      "size"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "backup storage cannot proceed message[%s] because its status is %s",
    "en_US": "backup storage cannot proceed message[{0}] because its status is {1}",
    "zh_CN": "镜像服务器无法处理消息[{0}]因为它的状态为{1}",
    "arguments": [
      "msg.getClass().getName()",
      "self.getStatus()"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "backup storage cannot proceed message[%s] because its state is %s",
    "en_US": "backup storage cannot proceed message[{0}] because its state is {1}",
    "zh_CN": "镜像服务器无法处理消息[{0}]因为它的状态为{1}",
    "arguments": [
      "msg.getClass().getName()",
      "self.getState()"
    ],
    "line": 196,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageBase.java"
  },
  {
    "raw": "cannot reserve %s on the backup storage[uuid:%s], it only has %s available",
    "en_US": "cannot reserve {0} on the backup storage[uuid:{1}], it only has {2} available",
    "zh_CN": "无法在镜像服务器{1}保留{0}，它仅有{2}可用容量",
    "arguments": [
      "size",
      "backupStorageUuid",
      "capacityVO.getAvailableCapacity()"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java"
  },
  {
    "raw": "capacity reservation on all backup storage failed",
    "en_US": "capacity reservation on all backup storage failed",
    "zh_CN": "在所有镜像服务器上保留容量失败",
    "arguments": [],
    "line": 276,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java"
  },
  {
    "raw": "only one backup storage data network system tag is allowed, but %s got",
    "en_US": "only one backup storage data network system tag is allowed, but {0} got",
    "zh_CN": "只允许一个备份存储数据网络系统标记，但{0}已获得",
    "arguments": [
      "backupStorageDataNetworkTags.size()"
    ],
    "line": 320,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java"
  },
  {
    "raw": "required primary storage[uuid:%s, type:%s] could not support any backup storage.",
    "en_US": "required primary storage[uuid:{0}, type:{1}] could not support any backup storage.",
    "zh_CN": "所需的主存储[uuid：{0}，类型：{1}]无法支持任何备份存储。",
    "arguments": [
      "spec.getRequiredPrimaryStorageUuid()",
      "psTypeName"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStoragePrimaryStorageAllocatorFlow.java"
  },
  {
    "raw": "after subtracting reserved capacity, no backup storage has required capacity[%s bytes]",
    "en_US": "after subtracting reserved capacity, no backup storage has required capacity[{0} bytes]",
    "zh_CN": "减去保留容量后，没有备份存储具有所需容量[{0}字节]",
    "arguments": [
      "spec.getSize()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java"
  },
  {
    "raw": "missing \u0027retentionType\u0027 in job parameters",
    "en_US": "missing \u0027retentionType\u0027 in job parameters",
    "zh_CN": "parameters中缺少retentionType参数",
    "arguments": [],
    "line": 328,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "missing \u0027retentionValue\u0027 in job parameters",
    "en_US": "missing \u0027retentionValue\u0027 in job parameters",
    "zh_CN": "parameter中缺少retentionValue参数",
    "arguments": [],
    "line": 332,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "missing \u0027backupStorageUuids\u0027 in job parameters",
    "en_US": "missing \u0027backupStorageUuids\u0027 in job parameters",
    "zh_CN": "parameter中缺少backupStorageUuids参数",
    "arguments": [],
    "line": 336,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "job parameter \u0027backupStorageUuids\u0027 is empty",
    "en_US": "job parameter \u0027backupStorageUuids\u0027 is empty",
    "zh_CN": "parameter中backupStorageUuids为空",
    "arguments": [],
    "line": 340,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "unexpected backup storage uuid: %s",
    "en_US": "unexpected backup storage uuid: {0}",
    "zh_CN": "错误的镜像服务器uuid: {0}",
    "arguments": [
      "bsUuid"
    ],
    "line": 345,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "missing \u0027remoteRetentionValue\u0027 in job parameters",
    "en_US": "missing \u0027remoteRetentionValue\u0027 in job parameters",
    "zh_CN": "作业参数中缺少“ RemoteRetentionValue ”",
    "arguments": [],
    "line": 354,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "missing \u0027remoteRetentionType\u0027 in job parameters",
    "en_US": "missing \u0027remoteRetentionType\u0027 in job parameters",
    "zh_CN": "作业参数中缺少“ RemoteRetentionType ”",
    "arguments": [],
    "line": 352,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "No available backup storage found, skip this job",
    "en_US": "No available backup storage found, skip this job",
    "zh_CN": "找不到可用的备份存储，请跳过此作业",
    "arguments": [],
    "line": 84,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java"
  },
  {
    "raw": "volume[uuid:%s] is deleted, state change is not allowed",
    "en_US": "volume[uuid:{0}] is deleted, state change is not allowed",
    "zh_CN": "卷[uuid：{0}]已删除，不允许更改状态",
    "arguments": [
      "getTargetResourceUuid()"
    ],
    "line": 578,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java"
  },
  {
    "raw": "bandWidth must be a positive number",
    "en_US": "bandWidth must be a positive number",
    "zh_CN": "带宽必须为正数",
    "arguments": [],
    "line": 137,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java"
  },
  {
    "raw": "missing job parameters",
    "en_US": "missing job parameters",
    "zh_CN": "缺少parameters参数",
    "arguments": [],
    "line": 217,
    "fileName": "src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java"
  },
  {
    "raw": "database backup[uuid%s] has not been exported from backupStorage[uuid:%s]",
    "en_US": "database backup[uuid{0}] has not been exported from backupStorage[uuid:{1}]",
    "zh_CN": "数据库备份[uuid{0}]尚未从备份存储[uuid：{1}]中导出",
    "arguments": [
      "msg.getDatabaseBackupUuid()",
      "msg.getBackupStorageUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "database backup[uuid%s] has been exported from backupStorage[uuid:%s]",
    "en_US": "database backup[uuid{0}] has been exported from backupStorage[uuid:{1}]",
    "zh_CN": "数据库备份[uuid{0}]已从备份存储[uuid：{1}]中导出",
    "arguments": [
      "msg.getDatabaseBackupUuid()",
      "msg.getBackupStorageUuid()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "do not allow cover database from backup",
    "en_US": "do not allow cover database from backup",
    "zh_CN": "不允许从备份中覆盖数据库",
    "arguments": [],
    "line": 120,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "installPath and bsUrl are both need",
    "en_US": "installPath and bsUrl are both need",
    "zh_CN": "InstallPath和BSURL都是必需",
    "arguments": [],
    "line": 124,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "databaseBackup[uuid:%s] is not Enabled and Ready",
    "en_US": "databaseBackup[uuid:{0}] is not Enabled and Ready",
    "zh_CN": "DatabaseBackup[uuid：{0}]未启用且未就绪",
    "arguments": [],
    "line": 133,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "illegal url[%s], correct example is ssh://username:password@hostname[:sshPort]/path",
    "en_US": "illegal url[{0}], correct example is ssh://username:password@hostname[:sshPort]/path",
    "zh_CN": "非法URL[{0}]，正确示例为SSH：//username：password@hostname[：sshport]/path",
    "arguments": [
      "url"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java"
  },
  {
    "raw": "database backup[uuid:%s] is not Enabled and Ready",
    "en_US": "database backup[uuid:{0}] is not Enabled and Ready",
    "zh_CN": "数据库备份[uuid：{0}]未启用且未就绪",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java"
  },
  {
    "raw": "database backup[uuid:%s] not found in backup storage[uuid:%s]",
    "en_US": "database backup[uuid:{0}] not found in backup storage[uuid:{1}]",
    "zh_CN": "未在备份存储[uuid：{1}]中找到数据库备份[uuid：{0}]",
    "arguments": [
      "msg.getDatabaseBackupUuid()",
      "msg.getSrcBackupStorageUuid()"
    ],
    "line": 328,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java"
  },
  {
    "raw": "database backup [uuid:%s] is not existed yet",
    "en_US": "database backup [uuid:{0}] is not existed yet",
    "zh_CN": "数据库备份[uuid：{0}]尚不存在",
    "arguments": [
      "msg.getDatabaseBackupUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "backup storage[uuid:%s] is not enabled and connected",
    "en_US": "backup storage[uuid:{0}] is not enabled and connected",
    "zh_CN": "备份存储[uuid：{0}]未启用和连接",
    "arguments": [],
    "line": 107,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "not pass the restore security check:\\n%s",
    "en_US": "not pass the restore security check:\\n{0}",
    "zh_CN": "未通过还原安全检查：\\n{0}",
    "arguments": [
      "result.getStderr()"
    ],
    "line": 603,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "cannot get free port to listen",
    "en_US": "cannot get free port to listen",
    "zh_CN": "无法获取空闲端口以进行侦听",
    "arguments": [],
    "line": 615,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "database backup version[%s] is not match currently version[%s]",
    "en_US": "database backup version[{0}] is not match currently version[{1}]",
    "zh_CN": "数据库备份版本[{0}]与当前版本[{1}]不匹配",
    "arguments": [
      "version",
      "dbf.getDbVersion()"
    ],
    "line": 643,
    "fileName": "src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java"
  },
  {
    "raw": "cannot ssh peer node via sshkey, please check connection",
    "en_US": "cannot ssh peer node via sshkey, please check connection",
    "zh_CN": "无法通过SSHKEY进行SSH对等节点，请检查连接",
    "arguments": [],
    "line": 26,
    "fileName": "src/main/java/org/zstack/storage/backup/MultiDatabaseRecoverChecker.java"
  },
  {
    "raw": "please stop other node first!",
    "en_US": "please stop other node first!",
    "zh_CN": "请先停止其他节点！",
    "arguments": [],
    "line": 19,
    "fileName": "src/main/java/org/zstack/storage/backup/SingleDatabaseRecoverChecker.java"
  },
  {
    "raw": "could not create vm, because at least one of field (l3NetworkUuids,zoneUuid,clusterUuid,hostUuid) should be set",
    "en_US": "could not create vm, because at least one of field (l3NetworkUuids,zoneUuid,clusterUuid,hostUuid) should be set",
    "zh_CN": "无法创建VM，因为至少应设置字段（l3NetworkUuids、zoneUuid、clusterUuid、hostUuid）中的一个",
    "arguments": [],
    "line": 355,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "current backup storage state[%s] doesn\u0027t allow to proceed message[%s], allowed states are %s",
    "en_US": "current backup storage state[{0}] doesn\u0027t allow to proceed message[{1}], allowed states are {2}",
    "zh_CN": "当前镜像服务器状态[{0}]不能处理消息[{1}]，仅当镜像服务器处于{2}时才能处理该消息",
    "arguments": [
      "currentState",
      "msgName",
      "checker.getStatesForOperation(msgName)"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Unexpected backup storage[type:%s,uuid:%s]",
    "en_US": "Unexpected backup storage[type:{0},uuid:{1}]",
    "zh_CN": "错误的镜像服务器[type:{0}, uuid:{1}]",
    "arguments": [
      "bsType",
      "bsUuid"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Can not create volume backup for shareable volume[uuid:%s]",
    "en_US": "Can not create volume backup for shareable volume[uuid:{0}]",
    "zh_CN": "无法给共享云盘[uuid:{0}]创建云盘备份",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 252,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create volume backup for volume[uuid:%s], because it is not attached to any vm",
    "en_US": "Failed to create volume backup for volume[uuid:{0}], because it is not attached to any vm",
    "zh_CN": "无法给云盘[uuid:{0}]创建云盘备份，因为它未加载到云主机上",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 256,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create volume backup for volume[uuid:%s], because its attached volume is not in state[%s, %s]",
    "en_US": "Failed to create volume backup for volume[uuid:{0}], because its attached volume is not in state[{1}, {2}]",
    "zh_CN": "无法给云盘[uuid:{0}]创建云盘备份，因为加载到的云主机并不处于以下状态[{1}, {2}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 265,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create volume backup for volume[uuid:%s], because the vm is not in state[%s, %s]",
    "en_US": "Failed to create volume backup for volume[uuid:{0}], because the vm is not in state[{1}, {2}]",
    "zh_CN": "无法给云盘[uuid:{0}]创建云盘备份，因为加载到的云主机并不处于以下状态[{1}, {2}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "The resource[uuid: %s] has already created a cdp task, cannot create the backup job at the same time.",
    "en_US": "The resource[uuid: {0}] has already created a cdp task, cannot create the backup job at the same time.",
    "zh_CN": "资源[uuid：{0}]已创建CDP任务，无法同时创建备份作业。",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is not root volume",
    "en_US": "Volume[uuid:{0}] is not root volume",
    "zh_CN": "卷[uuid：{0}]不是根卷",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 280,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Failed to create backups for VM[uuid:%s], because it is not in state[%s, %s]",
    "en_US": "Failed to create backups for VM[uuid:{0}], because it is not in state[{1}, {2}]",
    "zh_CN": "无法为VM[uuid：{0}]创建备份，因为它未处于状态[{1}，{2}]",
    "arguments": [
      "t.get(0)",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 287,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "No volume backup found for group uuid: %s",
    "en_US": "No volume backup found for group uuid: {0}",
    "zh_CN": "未找到组uuid为{0}的卷备份",
    "arguments": [
      "groupUuid"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "root volume backup of group[uuid:%s] not found",
    "en_US": "root volume backup of group[uuid:{0}] not found",
    "zh_CN": "未找到组[uuid：{0}]的根卷备份",
    "arguments": [
      "groupUuid"
    ],
    "line": 311,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Current vm[uuid: %s] of the volume[uuid: %s] is no longer the vm[uuid: %s] that was used for backup",
    "en_US": "Current vm[uuid: {0}] of the volume[uuid: {1}] is no longer the vm[uuid: {2}] that was used for backup",
    "zh_CN": "卷[uuid：{1}]的当前云主机[uuid：{0}]不再是用于备份的云主机[UuId：{2}]",
    "arguments": [
      "expectVmUuid",
      "rootVolumeInfo.get(0)",
      "rootVolumeInfo.get(1)"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "cannot specify primary storage which attached different cluster.",
    "en_US": "cannot specify primary storage which attached different cluster.",
    "zh_CN": "无法指定连接到其他群集的主存储。",
    "arguments": [],
    "line": 348,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "volume backup[uuid:%s] is in state %s, cannot revert volume to it",
    "en_US": "volume backup[uuid:{0}] is in state {1}, cannot revert volume to it",
    "zh_CN": "云盘备份[uuid:{0}]处于{1}状态，无法用于恢复云盘",
    "arguments": [
      "backupUuid",
      "state"
    ],
    "line": 378,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "original volume for backup[uuid:%s] has been deleted, cannot revert volume to it",
    "en_US": "original volume for backup[uuid:{0}] has been deleted, cannot revert volume to it",
    "zh_CN": "云盘备份[uuid:{0}]已经被删除，无法用于恢复云盘",
    "arguments": [
      "backupUuid"
    ],
    "line": 388,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "original volume[uuid:%s] for backup[uuid:%s] is no longer attached to vm[uuid:%s]",
    "en_US": "original volume[uuid:{0}] for backup[uuid:{1}] is no longer attached to vm[uuid:{2}]",
    "zh_CN": "原始卷[uuid：{0}]（用于备份[uuid：{1}]）不再连接到云主机[uuid：{2}]",
    "arguments": [
      "volUuid",
      "backupUuid",
      "expectVmUuid"
    ],
    "line": 392,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "VM not found with volume backup[uuid:%s]",
    "en_US": "VM not found with volume backup[uuid:{0}]",
    "zh_CN": "找不到和云盘备份[uuid:{0}]对应的云主机",
    "arguments": [
      "backupUuid"
    ],
    "line": 402,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "VM is not in stopped state: %s",
    "en_US": "VM is not in stopped state: {0}",
    "zh_CN": "当前云主机状态并不是停止状态：{0}",
    "arguments": [
      "vmState"
    ],
    "line": 406,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "No available backup storage found",
    "en_US": "No available backup storage found",
    "zh_CN": "没有可用的镜像服务器",
    "arguments": [],
    "line": 423,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "The vm is creating a backup job, cannot enable the cdp task at the same time.",
    "en_US": "The vm is creating a backup job, cannot enable the cdp task at the same time.",
    "zh_CN": "云主机正在创建备份作业，无法同时启用CDP任务。",
    "arguments": [],
    "line": 518,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java"
  },
  {
    "raw": "Operation not supported on shared volume",
    "en_US": "Operation not supported on shared volume",
    "zh_CN": "共享云盘不支持该操作",
    "arguments": [],
    "line": 191,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java"
  },
  {
    "raw": "No VM found for volume[uuid:%s]",
    "en_US": "No VM found for volume[uuid:{0}]",
    "zh_CN": "找不到和云盘[uuid:{0}]对应的云主机",
    "arguments": [
      "volumeVO.getUuid()"
    ],
    "line": 196,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java"
  },
  {
    "raw": "No VM found with root volume uuid: %s",
    "en_US": "No VM found with root volume uuid: {0}",
    "zh_CN": "找不到根卷uuid为{0}的云主机",
    "arguments": [
      "msg.getRootVolumeUuid()"
    ],
    "line": 380,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java"
  },
  {
    "raw": "[%s] is not a standard cidr, do you mean [%s]?",
    "en_US": "[{0}] is not a standard cidr, do you mean [{1}]?",
    "zh_CN": "[{0}]不是一个标准的cidr, 是否指定的是[{1}]",
    "arguments": [
      "cidr",
      "fmtCidr"
    ],
    "line": 1974,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "One of the backup storage[uuids: %s, %s] is in the state of %s, can not do sync operation",
    "en_US": "One of the backup storage[uuids: {0}, {1}] is in the state of {2}, can not do sync operation",
    "zh_CN": "镜像服务器[uuid: {0}]处于状态{1}, 无法执行同步操作",
    "arguments": [
      "msg.getDstBackupStorageUuid()",
      "msg.getSrcBackupStorageUuid()",
      "BackupStorageState.Disabled.toString()"
    ],
    "line": 1320,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "sync task failed.",
    "en_US": "sync task failed.",
    "zh_CN": "同步失败",
    "arguments": [],
    "line": 992,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "unexpected task status: %s",
    "en_US": "unexpected task status: {0}",
    "zh_CN": "错误的任务状态{0}",
    "arguments": [
      "reply.getStatus()"
    ],
    "line": 999,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "failed to create image from backup %s",
    "en_US": "failed to create image from backup {0}",
    "zh_CN": "无法从备份{0}创建镜像",
    "arguments": [
      "vos.stream().filter( vo -\u003e !succeedUuids.contains(vo.getUuid())).map(VolumeBackupVO::getUuid).collect(Collectors.toList())"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "sync volume backup metadata file in image store[uuid:%s] meet I/O error: %s",
    "en_US": "sync volume backup metadata file in image store[uuid:{0}] meet I/O error: {1}",
    "zh_CN": "同步卷备份元数据文件（位于镜像存储[uuid：{0}]中）遇到I/O错误：{1}",
    "arguments": [
      "msg.getImageStoreUuid()",
      "e.getMessage()"
    ],
    "line": 498,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Current vm[uuid: %s] of the backup volume is no longer the vm[uuid: %s] that was used for backup",
    "en_US": "Current vm[uuid: {0}] of the backup volume is no longer the vm[uuid: {1}] that was used for backup",
    "zh_CN": "备份卷的当前云主机[uuid：{0}]不再是用于备份的云主机[uuid：{1}]",
    "arguments": [
      "volumeVmUuid",
      "backupUuid",
      "backupVmUuid"
    ],
    "line": 535,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "No VolumeBackupFactory of type[%s] found",
    "en_US": "No VolumeBackupFactory of type[{0}] found",
    "zh_CN": "未找到类型为[{0}]的VolumeBackupFactory",
    "arguments": [
      "hypervisorType"
    ],
    "line": 544,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "One of the backup storage[uuid: %s] is in the state of %s, can not do sync operation",
    "en_US": "One of the backup storage[uuid: {0}] is in the state of {1}, can not do sync operation",
    "zh_CN": "镜像服务器[uuid: {0}]处于状态{1}, 无法执行同步操作",
    "arguments": [
      "msg.getBackupStorageUuid()",
      "BackupStorageState.Disabled.toString()"
    ],
    "line": 561,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Volume backup[uuid:%s] not found on backup storage[uuid:%s]",
    "en_US": "Volume backup[uuid:{0}] not found on backup storage[uuid:{1}]",
    "zh_CN": "在镜像服务器[uuid:{1}]上找不到云盘备份[uuid:{0}]",
    "arguments": [
      "struct.getBackupUuid()",
      "struct.getBackupStorageUuid()"
    ],
    "line": 738,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "volume backup[uuid:%s] not found in backup storage[uuid:%s]",
    "en_US": "volume backup[uuid:{0}] not found in backup storage[uuid:{1}]",
    "zh_CN": "在镜像服务器[uuid:{1}]上找不到云盘备份[uuid:{0}]",
    "arguments": [
      "backupUuid",
      "srcBackupStorageUuid"
    ],
    "line": 1187,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "No volume backups found with group uuid: %s",
    "en_US": "No volume backups found with group uuid: {0}",
    "zh_CN": "未找到组uuid为{0}的卷备份",
    "arguments": [
      "groupUuid"
    ],
    "line": 1399,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Root volume missing within group uuid: %s",
    "en_US": "Root volume missing within group uuid: {0}",
    "zh_CN": "组uuid中缺少根卷：{0}",
    "arguments": [
      "groupUuid"
    ],
    "line": 1406,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Multiple root volumes found within group uuid: %s",
    "en_US": "Multiple root volumes found within group uuid: {0}",
    "zh_CN": "在组uuid中找到多个根卷：{0}",
    "arguments": [
      "groupUuid"
    ],
    "line": 1412,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "No permission to volume backups within group uuid: %s",
    "en_US": "No permission to volume backups within group uuid: {0}",
    "zh_CN": "对组uuid{0}中的卷备份没有权限",
    "arguments": [
      "groupUuid"
    ],
    "line": 1424,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "Volume backup[uuid:%s] not found on any backup storage",
    "en_US": "Volume backup[uuid:{0}] not found on any backup storage",
    "zh_CN": "未在任何备份存储上找到卷备份[uuid：{0}]",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 1564,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "degree [%s] should be a positive number",
    "en_US": "degree [{0}] should be a positive number",
    "zh_CN": "度[{0}]应为正数",
    "arguments": [
      "degree"
    ],
    "line": 2001,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "invalid type[%s], should be [nfs, sshfs, nbd]",
    "en_US": "invalid type[{0}], should be [nfs, sshfs, nbd]",
    "zh_CN": "类型[{0}]无效，应为[NFS，sshfs，NBD]",
    "arguments": [
      "type"
    ],
    "line": 2035,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "invalid url[%s], should be hostname:/path",
    "en_US": "invalid url[{0}], should be hostname:/path",
    "zh_CN": "URL[{0}]无效，应为hostname：/path",
    "arguments": [
      "url"
    ],
    "line": 2045,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java"
  },
  {
    "raw": "generate volume backup metadata file on image store[uuid:%s] failure, because IO error: %s",
    "en_US": "generate volume backup metadata file on image store[uuid:{0}] failure, because IO error: {1}",
    "zh_CN": "在镜像存储[uuid：{0}]上生成卷备份元数据文件失败，因为IO错误：{1}",
    "arguments": [
      "inv.getUuid()",
      "e.getMessage()"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java"
  },
  {
    "raw": "volume backup metadata operation failure, because %s",
    "en_US": "volume backup metadata operation failure, because {0}",
    "zh_CN": "卷备份元数据操作失败，原因是{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 505,
    "fileName": "src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java"
  },
  {
    "raw": "failed to download image[url: %s] on backup storage[uuid: %s], because: %s",
    "en_US": "failed to download image[url: {0}] on backup storage[uuid: {1}], because: {2}",
    "zh_CN": "无法下载镜像[URL：{0}]（在备份存储[uuid：{1}]上），原因是：{2}",
    "arguments": [
      "cmd.imgurl",
      "cmd.uuid",
      "ret.getError()"
    ],
    "line": 586,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "unable to connect to SimpleHttpBackupStorage[url:%s], because %s",
    "en_US": "unable to connect to SimpleHttpBackupStorage[url:{0}], because {1}",
    "zh_CN": "无法连接到SimpleHttpBackupStorage[url:{0}]，因为{1}",
    "arguments": [
      "url",
      "rsp.getError()"
    ],
    "line": 277,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "Missing cert file for downloading image: %s",
    "en_US": "Missing cert file for downloading image: {0}",
    "zh_CN": "下载镜像时证书文件丢失",
    "arguments": [
      "iinv.getName()"
    ],
    "line": 507,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "No response",
    "en_US": "No response",
    "zh_CN": "无响应",
    "arguments": [],
    "line": 831,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "reclaim imagestore error, because:%s",
    "en_US": "reclaim imagestore error, because:{0}",
    "zh_CN": "收回imagestore错误，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 907,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "failed to set max capacity on image store[uuid:%s], because: %s",
    "en_US": "failed to set max capacity on image store[uuid:{0}], because: {1}",
    "zh_CN": "无法设置镜像存储[uuid：{0}]的最大容量，因为：{1}",
    "arguments": [
      "self.getUuid()",
      "ret.getError()"
    ],
    "line": 994,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "image[%s] not found on backup storage[%s]",
    "en_US": "image[{0}] not found on backup storage[{1}]",
    "zh_CN": "在备份存储[{1}]上找不到镜像[{0}]",
    "arguments": [
      "msg.getImageUuid()",
      "self.getUuid()"
    ],
    "line": 1223,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "failed to delete image package, because: %s",
    "en_US": "failed to delete image package, because: {0}",
    "zh_CN": "无法删除镜像包，因为：{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 1134,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "some images [%s] are not exported on the backup storage[uuid: %s]",
    "en_US": "some images [{0}] are not exported on the backup storage[uuid: {1}]",
    "zh_CN": "某些镜像[{0}]未在备份存储[uuid：{1}]上导出",
    "arguments": [
      "StringUtils.join(notOnBsImageUuids, \u0027,\u0027)",
      "msg.getBackupStorageUuid()"
    ],
    "line": 1158,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "failed to package exported images, because %s",
    "en_US": "failed to package exported images, because {0}",
    "zh_CN": "无法打包导出的镜像，因为{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 1192,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "the backup storage[uuid:%s] has not enough capacity[%s] to export",
    "en_US": "the backup storage[uuid:{0}] has not enough capacity[{1}] to export",
    "zh_CN": "备份存储[uuid：{0}]没有足够的容量[{1}]用于导出",
    "arguments": [
      "self.getUuid()",
      "actualSize"
    ],
    "line": 1234,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "image store [%s] cannot add image, because it is used for backup remote",
    "en_US": "image store [{0}] cannot add image, because it is used for backup remote",
    "zh_CN": "ImageStore[{0}]不能添加镜像，因为它已经被远程镜像使用",
    "arguments": [],
    "line": 1393,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "commercial license is required to use ImageStore",
    "en_US": "commercial license is required to use ImageStore",
    "zh_CN": "使用ImageStore需要商业许可证",
    "arguments": [],
    "line": 1591,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "the uuid of imagestoreBackupStorage agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of imagestoreBackupStorage agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "镜像镜像服务器的代理的uuid发生了改变[期望: {0}，实际: {1}]，很有可能代理被手动重启了，需要重连同步状态",
    "arguments": [
      "self.getUuid()",
      "resp.getUuid()"
    ],
    "line": 1712,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java"
  },
  {
    "raw": "hostname[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "hostname[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "物理机名[{0}]不是一个IPv4的地址，而是一个非法的物理机名",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "target backup storage[uuid:%s] already contains the image [uuid:%s]",
    "en_US": "target backup storage[uuid:{0}] already contains the image [uuid:{1}]",
    "zh_CN": "目标备份存储[uuid：{0}]已包含镜像[uuid：{1}]",
    "arguments": [
      "bsUuid",
      "imageUuid"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "source backup storage[%s] doesn\u0027t contain image[%s]",
    "en_US": "source backup storage[{0}] doesn\u0027t contain image[{1}]",
    "zh_CN": "源镜像服务器[{0}]不包含该镜像[{1}]",
    "arguments": [
      "msg.getSrcBackupStorageUuid()",
      "msg.getUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "src backupstorage[%s] doesn\u0027t contain image[%s]",
    "en_US": "src backupstorage[{0}] doesn\u0027t contain image[{1}]",
    "zh_CN": "SRC BackupStorage[{0}]不包含镜像[{1}]",
    "arguments": [
      "msg.getSrcBackupStorageUuid()",
      "msg.getUuid()"
    ],
    "line": 94,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "duplicate backup storage. There has been an image store backup storage[hostname:%s]",
    "en_US": "duplicate backup storage. There has been an image store backup storage[hostname:{0}]",
    "zh_CN": "重复的镜像服务器。已经存在一个镜像服务器[物理机名: {0}]",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "file path needed",
    "en_US": "file path needed",
    "zh_CN": "需要文件路径",
    "arguments": [],
    "line": 147,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "absolute file path required: %s",
    "en_US": "absolute file path required: {0}",
    "zh_CN": "需要文件的绝对路径；{0}",
    "arguments": [
      "dir"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "the url contains an invalid folder[/dev or /proc or /sys]",
    "en_US": "the url contains an invalid folder[/dev or /proc or /sys]",
    "zh_CN": "URL包含了一个无效的目录[/dev or /proc or /sys]",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "file path contains invalid character: %s",
    "en_US": "file path contains invalid character: {0}",
    "zh_CN": "文件路径包含非法字符: {0}",
    "arguments": [
      "dir"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java"
  },
  {
    "raw": "cannot find a connected host in cluster to which PS [uuid: %s] attached",
    "en_US": "cannot find a connected host in cluster to which PS [uuid: {0}] attached",
    "zh_CN": "在PS[uuid：{0}]连接到的集群中找不到已连接的物理机",
    "arguments": [
      "ps.getUuid()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageExtension.java"
  },
  {
    "raw": "invalid url[%s], the url must be an absolute path starting with \u0027/\u0027",
    "en_US": "invalid url[{0}], the url must be an absolute path starting with \u0027/\u0027",
    "zh_CN": "无效的url[{0}]，url必须是以\u0027/\u0027开头的绝对路径",
    "arguments": [
      "amsg.getUrl()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "existing SimpleHttpBackupStorage with hostname[%s] found",
    "en_US": "existing SimpleHttpBackupStorage with hostname[{0}] found",
    "zh_CN": "存在物理机名为[{0}]的简单http镜像服务器",
    "arguments": [
      "hostname"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java"
  },
  {
    "raw": "sync status failed.",
    "en_US": "sync status failed.",
    "zh_CN": "同步失败",
    "arguments": [],
    "line": 228,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java"
  },
  {
    "raw": "failed to get task reply!",
    "en_US": "failed to get task reply!",
    "zh_CN": "获取任务回复失败！",
    "arguments": [],
    "line": 343,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java"
  },
  {
    "raw": "delete image metadata file failed: %s",
    "en_US": "delete image metadata file failed: {0}",
    "zh_CN": "删除镜像元数据文件失败: {0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 841,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "AddImage is forbidden in Disaster BS: [%s]",
    "en_US": "AddImage is forbidden in Disaster BS: [{0}]",
    "zh_CN": "在Disaster镜像服务器中添加镜像是被禁止的",
    "arguments": [
      "bsUuid"
    ],
    "line": 397,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Check image metadata file: %s failed",
    "en_US": "Check image metadata file: {0} failed",
    "zh_CN": "检查镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 770,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Create image metadata file : %s failed",
    "en_US": "Create image metadata file : {0} failed",
    "zh_CN": "创建镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 594,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "Create image metadata file sync : %s failed",
    "en_US": "Create image metadata file sync : {0} failed",
    "zh_CN": "同步创建镜像元数据文件{0}失败了",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 569,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "parse create time error: %s",
    "en_US": "parse create time error: {0}",
    "zh_CN": "解析创建时间出错: {0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/backup/imagestore/ImageStoreImageStruct.java"
  },
  {
    "raw": "SftpBackupStorage doesn\u0027t support scheme[%s] in url[%s]",
    "en_US": "SftpBackupStorage doesn\u0027t support scheme[{0}] in url[{1}]",
    "zh_CN": "Sftp镜像服务器不支持在url[{1}]里包含scheme[{0}]",
    "arguments": [
      "scheme",
      "url"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "fail to cancel download image, because %s",
    "en_US": "fail to cancel download image, because {0}",
    "zh_CN": "无法取消下载镜像，因为{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 242,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "the uuid of sftpBackupStorage agent changed[expected:%s, actual:%s], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "en_US": "the uuid of sftpBackupStorage agent changed[expected:{0}, actual:{1}], it\u0027s most likely the agent was manually restarted. Issue a reconnect to sync the status",
    "zh_CN": "Sftp镜像镜像服务器的代理的uuid发生了改变[期望: {0}，实际: {1}]，很有可能代理被手动重启了，需要重连同步状态",
    "arguments": [
      "self.getUuid()",
      "ret.getUuid()"
    ],
    "line": 316,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java"
  },
  {
    "raw": "Please stop the vm before create volume template to sftp backup storage %s",
    "en_US": "Please stop the vm before create volume template to sftp backup storage {0}",
    "zh_CN": "请在创建SFTP备份存储{0}的卷模板之前停止云主机",
    "arguments": [
      "bsUuid"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "duplicate backup storage. There has been a sftp backup storage[hostname:%s] existing",
    "en_US": "duplicate backup storage. There has been a sftp backup storage[hostname:{0}] existing",
    "zh_CN": "重复的镜像服务器。已经存在一个镜像服务器[物理机名: {0}]",
    "arguments": [
      "msg.getHostname()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "check image metadata file: %s failed",
    "en_US": "check image metadata file: {0} failed",
    "zh_CN": "检查镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 554,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "create image metadata file : %s failed",
    "en_US": "create image metadata file : {0} failed",
    "zh_CN": "创建镜像元数据文件: {0}失败",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 399,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "image metadata file: %s is not exist",
    "en_US": "image metadata file: {0} is not exist",
    "zh_CN": "镜像元数据文件: {0}不存在",
    "arguments": [
      "rsp.getBackupStorageMetaFileName()"
    ],
    "line": 559,
    "fileName": "src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java"
  },
  {
    "raw": "host not found for VM: %s",
    "en_US": "host not found for VM: {0}",
    "zh_CN": "找不到VM的物理机：{0}",
    "arguments": [
      "vmUuid"
    ],
    "line": 321,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java"
  },
  {
    "raw": "query-mirror: host not found for VM[uuid:%s]",
    "en_US": "query-mirror: host not found for VM[uuid:{0}]",
    "zh_CN": "查询镜像：找不到VM[uuid：{0}]的物理机",
    "arguments": [
      "vmUuid"
    ],
    "line": 241,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java"
  },
  {
    "raw": "libvirt on the host[uuid: %s] not support to create cdp task, please check the version of libvirt.",
    "en_US": "libvirt on the host[uuid: {0}] not support to create cdp task, please check the version of libvirt.",
    "zh_CN": "物理机[uuid：{0}]上的libvirt不支持创建CDP任务，请检查libvirt的版本。",
    "arguments": [
      "hostUuid"
    ],
    "line": 328,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java"
  },
  {
    "raw": "qemu on the host[uuid: %s] not support to create cdp task, please check the version of qemu.",
    "en_US": "qemu on the host[uuid: {0}] not support to create cdp task, please check the version of qemu.",
    "zh_CN": "物理机[uuid：{0}]上的QEMU不支持创建CDP任务，请检查QEMU的版本。",
    "arguments": [
      "hostUuid"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java"
  },
  {
    "raw": "The QEMU version running on the VM[uuid:%s] does not support mirrorBitmap.",
    "en_US": "The QEMU version running on the VM[uuid:{0}] does not support mirrorBitmap.",
    "zh_CN": "在VM[uuid：{0}]上运行的QEMU版本不支持MirrorBitMap。",
    "arguments": [
      "vmUuid"
    ],
    "line": 366,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java"
  },
  {
    "raw": "cannot ask primary storage[uuid:%s] for volume snapshot capability, see detail [%s]",
    "en_US": "cannot ask primary storage[uuid:{0}] for volume snapshot capability, see detail [{1}]",
    "zh_CN": "无法向主存储[uuid：{0}]请求卷快照功能，请参阅详细信息[{1}]",
    "arguments": [
      "vol.getUuid()",
      "reply.getError()"
    ],
    "line": 458,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "unexpected task type: %s",
    "en_US": "unexpected task type: {0}",
    "zh_CN": "意外的任务类型：{0}",
    "arguments": [
      "msg.getTaskType()"
    ],
    "line": 320,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "CDP task is still enabled",
    "en_US": "CDP task is still enabled",
    "zh_CN": "CDP任务仍处于启用状态",
    "arguments": [],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "invalid time string: %s, should be in ISO offset format, for example: %s",
    "en_US": "invalid time string: {0}, should be in ISO offset format, for example: {1}",
    "zh_CN": "无效的时间字符串：{0}，应为ISO偏移格式，例如：{1}",
    "arguments": [
      "s",
      "OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS)"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "VM is not stopped, current state: %s",
    "en_US": "VM is not stopped, current state: {0}",
    "zh_CN": "云主机未停止，当前状态：{0}",
    "arguments": [
      "state"
    ],
    "line": 189,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "Shared volume[%s] from VM[uuid] is still used by other VMs.",
    "en_US": "Shared volume[{0}] from VM[uuid] is still used by other VMs.",
    "zh_CN": "云主机[uuid]中的共享云盘[{0}]仍由其他云主机使用。",
    "arguments": [
      "volumeUuid",
      "msg.getVmInstanceUuid()"
    ],
    "line": 233,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "Task not found[uuid: %s]",
    "en_US": "Task not found[uuid: {0}]",
    "zh_CN": "未找到任务[uuid：{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "Unexpected task type[uuid: %s, type: %s]",
    "en_US": "Unexpected task type[uuid: {0}, type: {1}]",
    "zh_CN": "意外的任务类型[uuid：{0}，类型：{1}]",
    "arguments": [
      "msg.getUuid()",
      "taskVO.getTaskType()"
    ],
    "line": 248,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "VM[uuid: %s] already deleted",
    "en_US": "VM[uuid: {0}] already deleted",
    "zh_CN": "云主机[uuid：{0}]已删除",
    "arguments": [
      "refVO.getResourceUuid()"
    ],
    "line": 261,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "Unexpected VM state: %s",
    "en_US": "Unexpected VM state: {0}",
    "zh_CN": "意外的VM状态：{0}",
    "arguments": [
      "state"
    ],
    "line": 275,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "Backup storage not found[uuid: %s]",
    "en_US": "Backup storage not found[uuid: {0}]",
    "zh_CN": "未找到备份存储[uuid：{0}]",
    "arguments": [
      "taskVO.getBackupStorageUuid()"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "Backup storage[uuid: %s] is disabled",
    "en_US": "Backup storage[uuid: {0}] is disabled",
    "zh_CN": "备份存储[uuid：{0}]已禁用",
    "arguments": [
      "taskVO.getBackupStorageUuid()"
    ],
    "line": 288,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "Backup storage[uuid: %s] is not connected",
    "en_US": "Backup storage[uuid: {0}] is not connected",
    "zh_CN": "备份存储[uuid：{0}]未连接",
    "arguments": [
      "taskVO.getBackupStorageUuid()"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "The vm[uuid: %s] has already created a backup job, cannot enable the cdp task at the same time.",
    "en_US": "The vm[uuid: {0}] has already created a backup job, cannot enable the cdp task at the same time.",
    "zh_CN": "VM[uuid：{0}]已创建备份作业，无法同时启用CDP任务。",
    "arguments": [
      "refVO.getResourceUuid()"
    ],
    "line": 309,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "\u0027%s\u0027(%d) should be larger than \u0027%s\u0027(%d)",
    "en_US": "\u0027{0}\u0027({1}) should be larger than \u0027{2}\u0027({3})",
    "zh_CN": "“{0}”（{1}）应大于“{2}”（{3}）",
    "arguments": [
      "s2",
      "v2",
      "s1",
      "v1"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "mandatory args missing: %s",
    "en_US": "mandatory args missing: {0}",
    "zh_CN": "缺少必需的参数：{0}",
    "arguments": [
      "\"hourlyRpSinceDay\""
    ],
    "line": 340,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "expected one VM uuid, but given %d",
    "en_US": "expected one VM uuid, but given {0}",
    "zh_CN": "应为一个VM uuid，但给定了{0}",
    "arguments": [
      "vmUuids.size()"
    ],
    "line": 376,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "resource [uuid: %s] is not VM",
    "en_US": "resource [uuid: {0}] is not VM",
    "zh_CN": "资源[uuid：{0}]不是VM",
    "arguments": [
      "vmUuids.get(0)"
    ],
    "line": 380,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "The vm[uuid: %s] has already created a cdp task, cannot create the backup job at the same time.",
    "en_US": "The vm[uuid: {0}] has already created a cdp task, cannot create the backup job at the same time.",
    "zh_CN": "VM[uuid：{0}]已创建CDP任务，无法同时创建备份作业。",
    "arguments": [
      "msg.getTargetResourceUuid()"
    ],
    "line": 402,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java"
  },
  {
    "raw": "No recovery point found with grpId %d",
    "en_US": "No recovery point found with grpId {0}",
    "zh_CN": "找不到具有grpid{0}的恢复点",
    "arguments": [
      "groupId"
    ],
    "line": 243,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java"
  },
  {
    "raw": "hostname not found for backup storage[uuid: %s]",
    "en_US": "hostname not found for backup storage[uuid: {0}]",
    "zh_CN": "未找到备份存储的物理机名[uuid：{0}]",
    "arguments": [
      "backupStorageUuid"
    ],
    "line": 717,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java"
  },
  {
    "raw": "CDP task[uuid: %s] not found",
    "en_US": "CDP task[uuid: {0}] not found",
    "zh_CN": "未找到CDP任务[uuid：{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 1921,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "Invalid max capacity[%d], current usage is %d",
    "en_US": "Invalid max capacity[{0}], current usage is {1}",
    "zh_CN": "最大容量[{0}]无效，当前使用量为{1}",
    "arguments": [
      "msg.getMaxCapacity()",
      "oldUsedCapacity"
    ],
    "line": 179,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "VM [uuid: %s] have been protected by task: %s",
    "en_US": "VM [uuid: {0}] have been protected by task: {1}",
    "zh_CN": "云主机[uuid：{0}]已受任务{1}保护",
    "arguments": [
      "vmUuid",
      "tasks.get(0)"
    ],
    "line": 269,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "revert job cancelled",
    "en_US": "revert job cancelled",
    "zh_CN": "已取消还原作业",
    "arguments": [],
    "line": 715,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "create-vm job cancelled",
    "en_US": "create-vm job cancelled",
    "zh_CN": "创建云主机作业已取消",
    "arguments": [],
    "line": 781,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "CDP task[uuid: %s] has no VM attached",
    "en_US": "CDP task[uuid: {0}] has no VM attached",
    "zh_CN": "CDP任务[uuid：{0}]未连接VM",
    "arguments": [
      "taskVO.getUuid()"
    ],
    "line": 1181,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "task[uuid:%s] have been deleted",
    "en_US": "task[uuid:{0}] have been deleted",
    "zh_CN": "任务[uuid：{0}]已被删除",
    "arguments": [
      "taskVO.getUuid()"
    ],
    "line": 1215,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "CDP task[uuid:%s] exceeded storage usage: maximum %d, used %d.",
    "en_US": "CDP task[uuid:{0}] exceeded storage usage: maximum {1}, used {2}.",
    "zh_CN": "CDP任务[uuid：{0}]超出了存储使用率：最大值{1}，已使用{2}。",
    "arguments": [
      "taskUuid",
      "maxCapacity",
      "usedCapacity"
    ],
    "line": 1279,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "No CDP task found for VM: %s",
    "en_US": "No CDP task found for VM: {0}",
    "zh_CN": "未找到VM{0}的CDP任务",
    "arguments": [
      "vmUuid"
    ],
    "line": 1728,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "No CDP backup storage found for VM: %s",
    "en_US": "No CDP backup storage found for VM: {0}",
    "zh_CN": "未找到云主机{0}的CDP备份存储",
    "arguments": [
      "vmUuid"
    ],
    "line": 1736,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "No CdpBackupFactory of type[%s] found",
    "en_US": "No CdpBackupFactory of type[{0}] found",
    "zh_CN": "未找到类型为[{0}]的CDPBackupFactory",
    "arguments": [
      "hypervisorType"
    ],
    "line": 1784,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "No hypervisor type for VM %s",
    "en_US": "No hypervisor type for VM {0}",
    "zh_CN": "云主机{0}没有云主机管理程序类型",
    "arguments": [
      "hostUuid"
    ],
    "line": 1815,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "The operation has volume[uuid: %s] that will take chain type snapshot. Therefore, you could not do this operation when a CDP task is running on the VM instance.",
    "en_US": "The operation has volume[uuid: {0}] that will take chain type snapshot. Therefore, you could not do this operation when a CDP task is running on the VM instance.",
    "zh_CN": "该操作具有将创建链类型快照的卷[uuid：{0}]。因此，当CDP任务在VM实例上运行时，您无法执行此操作。",
    "arguments": [
      "msg.getVolume().getUuid()"
    ],
    "line": 2221,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java"
  },
  {
    "raw": "Could not attach volume.The VM instance is running a CDP task. After the volume is attached, the capacity required for full backup will exceed the CDP task planned size. Please plan the size properly and try again.",
    "en_US": "Could not attach volume.The VM instance is running a CDP task. After the volume is attached, the capacity required for full backup will exceed the CDP task planned size. Please plan the size properly and try again.",
    "zh_CN": "无法连接卷。VM实例正在运行CDP任务。连接卷后，完整备份所需的容量将超过CDP任务计划的大小。请正确规划大小，然后重试。",
    "arguments": [],
    "line": 163,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java"
  },
  {
    "raw": "The VM[%s] for volume[%s] is running CDP, cannot resize now.",
    "en_US": "The VM[{0}] for volume[{1}] is running CDP, cannot resize now.",
    "zh_CN": "卷[{1}]的VM[{0}]正在运行CDP，现在无法调整大小。",
    "arguments": [
      "volume.getVmInstanceUuid()",
      "volume.getUuid()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java"
  },
  {
    "raw": "No VM found for CDP task[uuid: %s]",
    "en_US": "No VM found for CDP task[uuid: {0}]",
    "zh_CN": "未找到CDP任务[uuid：{0}]的VM",
    "arguments": [
      "apiMessage.getCdpTaskUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java"
  },
  {
    "raw": "BackupStorage[uuid: %s] already been deleted",
    "en_US": "BackupStorage[uuid: {0}] already been deleted",
    "zh_CN": "BackupStorage[uuid：{0}]已删除",
    "arguments": [
      "bsUuid"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java"
  },
  {
    "raw": "no volume records found from VM backup",
    "en_US": "no volume records found from VM backup",
    "zh_CN": "未从云主机备份中找到卷记录",
    "arguments": [],
    "line": 179,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java"
  },
  {
    "raw": "VM CDP task[uuid: %s] not found",
    "en_US": "VM CDP task[uuid: {0}] not found",
    "zh_CN": "找不到VM CDP任务[uuid：{0}]",
    "arguments": [
      "taskUuid"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java"
  },
  {
    "raw": "VM not found for CDP task[uuid: %s]",
    "en_US": "VM not found for CDP task[uuid: {0}]",
    "zh_CN": "未找到CDP任务[uuid：{0}]的VM",
    "arguments": [
      "taskUuid"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java"
  },
  {
    "raw": "multiple root volumes found from CDP backup %s:%d",
    "en_US": "multiple root volumes found from CDP backup {0}:{1}",
    "zh_CN": "从CDP备份{0}中找到多个根卷：{1}",
    "arguments": [
      "taskUuid",
      "msg.getGroupId()"
    ],
    "line": 236,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java"
  },
  {
    "raw": "cannot find root volume from CDP backup %s:%d",
    "en_US": "cannot find root volume from CDP backup {0}:{1}",
    "zh_CN": "无法从CDP备份{0}中找到根卷：{1}",
    "arguments": [
      "taskUuid",
      "msg.getGroupId()"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java"
  },
  {
    "raw": "root volume not found from CDP backup %s:%d",
    "en_US": "root volume not found from CDP backup {0}:{1}",
    "zh_CN": "未从CDP备份{0}中找到根卷：{1}",
    "arguments": [
      "taskUuid",
      "msg.getGroupId()"
    ],
    "line": 257,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java"
  },
  {
    "raw": "recoverVm: host[uuid: %s] not found for VM[uuid: %s]",
    "en_US": "recoverVm: host[uuid: {0}] not found for VM[uuid: {1}]",
    "zh_CN": "未找到VM[uuid：{1}]的RecoverVM：物理机[uuid：{0}]",
    "arguments": [
      "hostUuid",
      "this.msg.getVmInstanceUuid()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java"
  },
  {
    "raw": "multiple root volumes found: %s",
    "en_US": "multiple root volumes found: {0}",
    "zh_CN": "找到多个根卷：{0}",
    "arguments": [
      "uuids"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java"
  },
  {
    "raw": "volume[uuid: %s] has unexpected path: %s",
    "en_US": "volume[uuid: {0}] has unexpected path: {1}",
    "zh_CN": "卷[uuid：{0}]具有意外路径：{1}",
    "arguments": [
      "volumeUuid",
      "installPath"
    ],
    "line": 792,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java"
  },
  {
    "raw": "unexpected volume[uuid: %s] size: %d",
    "en_US": "unexpected volume[uuid: {0}] size: {1}",
    "zh_CN": "意外卷[uuid：{0}]大小：{1}",
    "arguments": [
      "volumeUuid",
      "oldVolumeSize"
    ],
    "line": 718,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java"
  },
  {
    "raw": "resize volume[uuid: %s] failed: %s",
    "en_US": "resize volume[uuid: {0}] failed: {1}",
    "zh_CN": "调整卷[uuid：{0}]大小失败：{1}",
    "arguments": [
      "volumeUuid",
      "reply.getError().getDetails()"
    ],
    "line": 746,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java"
  },
  {
    "raw": "volume %s contains in backup but detached from VM[uuid: %s]: you need to either attach it back or delete it",
    "en_US": "volume {0} contains in backup but detached from VM[uuid: {1}]: you need to either attach it back or delete it",
    "zh_CN": "卷{0}包含在备份中，但已从VM分离[uuid：{1}]：您需要将其重新连接或将其删除",
    "arguments": [
      "uuid",
      "msg.getVmInstanceUuid()"
    ],
    "line": 377,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java"
  },
  {
    "raw": "no root volume found from VM backup",
    "en_US": "no root volume found from VM backup",
    "zh_CN": "未从云主机备份中找到根卷",
    "arguments": [],
    "line": 305,
    "fileName": "src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java"
  },
  {
    "raw": "kvmagent restarted",
    "en_US": "kvmagent restarted",
    "zh_CN": "KVMAGENT重新启动",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java"
  },
  {
    "raw": "kvmagent no response %d times",
    "en_US": "kvmagent no response {0} times",
    "zh_CN": "KVMAgent无响应{0}次",
    "arguments": [
      "maxFailure"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java"
  },
  {
    "raw": "waiting host[uuid:%s] and backupStorage[uuid:%s] to be Connected...",
    "en_US": "waiting host[uuid:{0}] and backupStorage[uuid:{1}] to be Connected...",
    "zh_CN": "正在等待要连接的物理机[uuid：{0}]和备份存储[uuid：{1}]..",
    "arguments": [
      "apiMessage.getHostUuid()",
      "apiMessage.getBackupStorageUuid()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java"
  },
  {
    "raw": "recoverVm: host uuid is not provided and original host is not found for VM[uuid: %s]",
    "en_US": "recoverVm: host uuid is not provided and original host is not found for VM[uuid: {0}]",
    "zh_CN": "RecoverVM：未提供物理机uuid，并且未找到VM[uuid：{0}]的原始物理机",
    "arguments": [
      "apiMessage.getVmInstanceUuid()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java"
  },
  {
    "raw": "No CDP task found for VM[uuid: %s]",
    "en_US": "No CDP task found for VM[uuid: {0}]",
    "zh_CN": "找不到VM[uuid：{0}]的CDP任务",
    "arguments": [
      "vmUuid"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java"
  },
  {
    "raw": "CDP task for VM[uuid: %s] is not found on BS[uuid: %s]",
    "en_US": "CDP task for VM[uuid: {0}] is not found on BS[uuid: {1}]",
    "zh_CN": "在BS[uuid：{1}]上找不到VM[uuid：{0}]的CDP任务",
    "arguments": [
      "vmUuid",
      "backupStorageUuid"
    ],
    "line": 174,
    "fileName": "src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java"
  },
  {
    "raw": "operation failure, because the poolName[poolName:%s] can not include unprintable ascii characters.",
    "en_US": "operation failure, because the poolName[poolName:{0}] can not include unprintable ascii characters.",
    "zh_CN": "操作失败，因为pool名称[poolName:{0}]不能包含中文和特殊字符",
    "arguments": [
      "msg.getPoolName()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Ceph pool[uuid:%s] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.",
    "en_US": "Ceph pool[uuid:{0}] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.",
    "zh_CN": "池名称为此的扩展池[uuid:{0}]已经被添加进 ZStack 了，已做它用，不能复用该扩展池",
    "arguments": [
      "duplicatePoolUuid"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "creation failure, duplicate poolName[%s]. There has been a pool[uuid:%s] with the same name existing.",
    "en_US": "creation failure, duplicate poolName[{0}]. There has been a pool[uuid:{1}] with the same name existing.",
    "zh_CN": "创建失败，重复的池名称[{0}]。已经有一个相同名称的扩展池[uuid:{1}]存在",
    "arguments": [
      "msg.getPoolName()",
      "duplicatePoolUuid"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:%s]",
    "en_US": "cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:{0}]",
    "zh_CN": "无法添加分布式存储，一定有某些分布式存储使用了mon[物理机名: {0}]",
    "arguments": [
      "existing"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Cannot add same host[%s] in mons",
    "en_US": "Cannot add same host[{0}] in mons",
    "zh_CN": "在mon中无法添加相同的物理机[{0}]",
    "arguments": [
      "uri.getHostname()"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Adding the same Mon node is not allowed",
    "en_US": "Adding the same Mon node is not allowed",
    "zh_CN": "添加相同的Mon节点不被允许",
    "arguments": [],
    "line": 163,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "invalid monUrl[%s]. A valid url is in format of %s",
    "en_US": "invalid monUrl[{0}]. A valid url is in format of {1}",
    "zh_CN": "无效的monURL[{0}]。有效URL的格式为{1}",
    "arguments": [
      "monUrl",
      "MON_URL_FORMAT"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "dataVolumePoolName can be null but cannot be an empty string",
    "en_US": "dataVolumePoolName can be null but cannot be an empty string",
    "zh_CN": "DataVolumePoolName可以为空，但不能为空字符串",
    "arguments": [],
    "line": 209,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "rootVolumePoolName can be null but cannot be an empty string",
    "en_US": "rootVolumePoolName can be null but cannot be an empty string",
    "zh_CN": "RootVolumePoolName可以为空，但不能为空字符串",
    "arguments": [],
    "line": 214,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "imageCachePoolName can be null but cannot be an empty string",
    "en_US": "imageCachePoolName can be null but cannot be an empty string",
    "zh_CN": "ImageCachePoolName可以为空，但不能为空字符串",
    "arguments": [],
    "line": 219,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:%s]",
    "en_US": "cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:{0}]",
    "zh_CN": "无法添加Ceph镜像服务器监控节点，已经有某个Ceph镜像服务器监控节点使用mon[物理机名: {0}]",
    "arguments": [
      "existing"
    ],
    "line": 242,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "poolName is required when importImages is true",
    "en_US": "poolName is required when importImages is true",
    "zh_CN": "当importImages为真的时候必须填写池名",
    "arguments": [],
    "line": 250,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "poolName can be null but cannot be an empty string",
    "en_US": "poolName can be null but cannot be an empty string",
    "zh_CN": "PoolName可以为空，但不能为空字符串",
    "arguments": [],
    "line": 248,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "Third-party ceph cannot mixed with other primary storage.",
    "en_US": "Third-party ceph cannot mixed with other primary storage.",
    "zh_CN": "第三方Ceph不能与其他主存储混合。",
    "arguments": [],
    "line": 269,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java"
  },
  {
    "raw": "The problem may be caused by an incorrect user name or password or SSH port or unstable network environment",
    "en_US": "The problem may be caused by an incorrect user name or password or SSH port or unstable network environment",
    "zh_CN": "该问题可能是由不正确的用户名、密码、SSH端口或者不稳定的网络环境引起的",
    "arguments": [],
    "line": 66,
    "fileName": "src/main/java/org/zstack/storage/ceph/CephMonBase.java"
  },
  {
    "raw": "all monitors cannot execute http call[%s]",
    "en_US": "all monitors cannot execute http call[{0}]",
    "zh_CN": "所有的监控节点都无法执行http call[{0}]",
    "arguments": [
      "path"
    ],
    "line": 768,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "CephMon[hostname:%s] not found on backup storage[uuid:%s]",
    "en_US": "CephMon[hostname:{0}] not found on backup storage[uuid:{1}]",
    "zh_CN": "在备份存储[uuid：{1}]上找不到cephmon[物理机名：{0}]",
    "arguments": [
      "msg.getHostname()",
      "msg.getBackupStorageUuid()"
    ],
    "line": 866,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "there is another CEPH backup storage[name:%s, uuid:%s] with the same FSID[%s], you cannot add the same CEPH setup as two different backup storage",
    "en_US": "there is another CEPH backup storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different backup storage",
    "zh_CN": "有另外一个Ceph镜像服务器监控节点[name:{0}, uuid:{1}]有相同的FSID[{2}]，你不能添加同样的CEPH为两个不同的镜像服务器",
    "arguments": [
      "otherCeph.getName()",
      "otherCeph.getUuid()",
      "fsId"
    ],
    "line": 1386,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "image[uuid: %s] is not on backup storage[uuid:%s, name:%s]",
    "en_US": "image[uuid: {0}] is not on backup storage[uuid:{1}, name:{2}]",
    "zh_CN": "镜像[uuid：{0}]不在备份存储[uuid：{1}，名称：{2}]上",
    "arguments": [
      "msg.getImageUuid()",
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1756,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java"
  },
  {
    "raw": "cannot update status of the ceph backup storage mon[uuid:%s], it has been deleted.This error can be ignored",
    "en_US": "cannot update status of the ceph backup storage mon[uuid:{0}], it has been deleted.This error can be ignored",
    "zh_CN": "无法更新Ceph镜像服务器监控节点监控节点[uuid:{0}]，他已经被删除。这个错误可以被忽略",
    "arguments": [
      "uuid"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java"
  },
  {
    "raw": "Ceph bs[uuid\u003d%s] pool name not found",
    "en_US": "Ceph bs[uuid\u003d{0}] pool name not found",
    "zh_CN": "找不到Ceph BS[uuid\u003d{0}]池名称",
    "arguments": [
      "getSelf().getBackupStorageUuid()"
    ],
    "line": 463,
    "fileName": "src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java"
  },
  {
    "raw": "the mon[ip:%s] returns a fsid[%s] different from the current fsid[%s] of the cep cluster,are you adding a mon not belonging to current cluster mistakenly?",
    "en_US": "the mon[ip:{0}] returns a fsid[{1}] different from the current fsid[{2}] of the cep cluster,are you adding a mon not belonging to current cluster mistakenly?",
    "zh_CN": "MON[IP：{0}]返回的FSID[{1}]与CEP群集的当前FSID[{2}]不同，您是否错误地添加了不属于当前群集的MON？",
    "arguments": [
      "base.getSelf().getHostname()",
      "fsid",
      "getSelf().getFsid()"
    ],
    "line": 4126,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the backup storage[uuid:%s, name:%s, fsid:%s] is not in the same ceph cluster with the primary storage[uuid:%s, name:%s, fsid:%s]",
    "en_US": "the backup storage[uuid:{0}, name:{1}, fsid:{2}] is not in the same ceph cluster with the primary storage[uuid:{3}, name:{4}, fsid:{5}]",
    "zh_CN": "镜像服务器[uuid:{0}, name:{1}, fsid:{2}]和主存储[uuid:{3}, name:{4}, fsid:{5}]不在同一个ceph集群中",
    "arguments": [
      "backupStorage.getUuid()",
      "backupStorage.getName()",
      "bsFsid",
      "self.getUuid()",
      "self.getName()",
      "getSelf().getFsid()"
    ],
    "line": 1520,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "fsid is not same between ps[%s] and bs[%s], create template is forbidden.",
    "en_US": "fsid is not same between ps[{0}] and bs[{1}], create template is forbidden.",
    "zh_CN": "在主存储和镜像服务器中fsid不是一样的，禁止创建模版。",
    "arguments": [
      "psUuid",
      "bsUuid"
    ],
    "line": 2588,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "ceph primary storage[uuid:%s] may have been deleted.",
    "en_US": "ceph primary storage[uuid:{0}] may have been deleted.",
    "zh_CN": "分布式存储[uuid:{0}]可能已经被删除",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 3410,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "unable to connect to the ceph primary storage[uuid:%s], failed to connect all ceph monitors.",
    "en_US": "unable to connect to the ceph primary storage[uuid:{0}], failed to connect all ceph monitors.",
    "zh_CN": "无法连接到分布式存储[uuid:{0}]，所有监控节点均连接失败",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 3394,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\\n",
    "en_US": "the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\\n",
    "zh_CN": "监控节点返回的fsid不匹配，似乎监控节点属于不同的ceph集群",
    "arguments": [],
    "line": 3507,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "there is another CEPH primary storage[name:%s, uuid:%s] with the same FSID[%s], you cannot add the same CEPH setup as two different primary storage",
    "en_US": "there is another CEPH primary storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different primary storage",
    "zh_CN": "有另外一个分布式存储[name:{0}, uuid:{1}] 有相同的 FSID[{2}]，你不能添加相同的CEPH设置到两个不同的主存储",
    "arguments": [
      "otherCeph.getName()",
      "otherCeph.getUuid()",
      "fsId"
    ],
    "line": 3525,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "the ceph primary storage[uuid:%s, name:%s] is down, as one mon[uuid:%s] reports an operation failure[%s]",
    "en_US": "the ceph primary storage[uuid:{0}, name:{1}] is down, as one mon[uuid:{2}] reports an operation failure[{3}]",
    "zh_CN": "分布式存储[uuid:{0}, name:{1}]关闭，因为一个mon[uuid:{2}]报告了一个操作失败[{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "mon.getSelf().getUuid()",
      "res.error"
    ],
    "line": 3783,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "operation error, because: failed to get response",
    "en_US": "operation error, because: failed to get response",
    "zh_CN": "操作错误，原因：无法获取响应",
    "arguments": [],
    "line": 4697,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "backing up snapshots to backup storage is a depreciated feature, which will be removed in future version",
    "en_US": "backing up snapshots to backup storage is a depreciated feature, which will be removed in future version",
    "zh_CN": "将快照备份到备份存储是一项过时的功能，在未来版本中将被删除",
    "arguments": [],
    "line": 4744,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot reinit rootvolume [%s] because image [%s] has been deleted and imagecache cannot be found",
    "en_US": "cannot reinit rootvolume [{0}] because image [{1}] has been deleted and imagecache cannot be found",
    "zh_CN": "无法重新初始化RootVolume[{0}]，因为镜像[{1}]已被删除并且找不到ImageCache",
    "arguments": [
      "volume.getUuid()",
      "volume.getRootImageUuid()"
    ],
    "line": 4915,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "Because image status is not %s",
    "en_US": "Because image status is not {0}",
    "zh_CN": "因为镜像状态不是{0}",
    "arguments": [
      "ImageStatus.Ready.toString()"
    ],
    "line": 4950,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "Because the image is currently inaccessible, possibly due to a previous volume storage migration",
    "en_US": "Because the image is currently inaccessible, possibly due to a previous volume storage migration",
    "zh_CN": "因为镜像当前不可访问，可能是由于之前的卷存储迁移",
    "arguments": [],
    "line": 4947,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find backupstorage to download image [%s] to primarystorage [%s]. %s",
    "en_US": "cannot find backupstorage to download image [{0}] to primarystorage [{1}]. {2}",
    "zh_CN": "找不到用于将镜像[{0}]下载到主存储[{1}]的备份存储。{2}",
    "arguments": [
      "volume.getRootImageUuid()",
      "getSelf().getUuid()",
      "cause"
    ],
    "line": 4953,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "allocated url not found",
    "en_US": "allocated url not found",
    "zh_CN": "未找到分配的URL",
    "arguments": [],
    "line": 5653,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "invalid allocated url:%s",
    "en_US": "invalid allocated url:{0}",
    "zh_CN": "分配的URL无效：{0}",
    "arguments": [
      "allocatedUrl"
    ],
    "line": 5658,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find any Connected ceph mon for the primary storage[uuid:%s]",
    "en_US": "cannot find any Connected ceph mon for the primary storage[uuid:{0}]",
    "zh_CN": "无法为分布式存储[uuid:{0}]找到一台处于Connected状态的的监控节点",
    "arguments": [
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 396,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "ceph pool conflict, the ceph pool specified by the instance offering is %s, and the ceph pool specified in the creation parameter is %s",
    "en_US": "ceph pool conflict, the ceph pool specified by the instance offering is {0}, and the ceph pool specified in the creation parameter is {1}",
    "zh_CN": "Ceph池冲突，由实例提供的Ceph池指定为{0}，而在创建参数中指定的Ceph池为{1}",
    "arguments": [
      "targetCephPoolName",
      "cephPoolName"
    ],
    "line": 838,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "ceph pool conflict, the ceph pool specified by the disk offering is %s, and the ceph pool specified in the creation parameter is %s",
    "en_US": "ceph pool conflict, the ceph pool specified by the disk offering is {0}, and the ceph pool specified in the creation parameter is {1}",
    "zh_CN": "Ceph池冲突，磁盘产品指定的Ceph池为{0}，而创建参数中指定的Ceph池为{1}",
    "arguments": [
      "targetCephPoolName",
      "cephPoolName"
    ],
    "line": 964,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "get rootVolume[%s] rbd image watchers fail, %s",
    "en_US": "get rootVolume[{0}] rbd image watchers fail, {1}",
    "zh_CN": "查询云盘[{0}] rbd image watchers失败，{1}",
    "arguments": [
      "rootVolume.getInstallPath()",
      "reply.getError().getDetails()"
    ],
    "line": 1217,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "rootVolume[%s] is already in use(ceph rbd image[%s] already has watchers), in order to prevent brain splitting, Starting VM is prohibited.",
    "en_US": "rootVolume[{0}] is already in use(ceph rbd image[{1}] already has watchers), in order to prevent brain splitting, Starting VM is prohibited.",
    "zh_CN": "云盘[{0}]正在使用中(ceph rbd 镜像[{1}]存在watchers)，为了防止云主机脑裂，禁止启动云主机",
    "arguments": [
      "msg.getVolumeUuid()",
      "installPath"
    ],
    "line": 1233,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find cephPrimaryStorage pool[poolName\u003d%s]",
    "en_US": "cannot find cephPrimaryStorage pool[poolName\u003d{0}]",
    "zh_CN": "找不到CephPrimaryStorage池[PoolName\u003d{0}]",
    "arguments": [
      "poolName"
    ],
    "line": 1341,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "cephPrimaryStorage pool[poolName\u003d%s] available virtual capacity not enough for size %s",
    "en_US": "cephPrimaryStorage pool[poolName\u003d{0}] available virtual capacity not enough for size {1}",
    "zh_CN": "CephPrimary存储池[PoolName\u003d{0}]可用虚拟容量不足，无法满足大小{1}",
    "arguments": [
      "poolName",
      "volumeSize"
    ],
    "line": 1351,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot allocate pool for primaryStorage[%s], purpose: %s",
    "en_US": "cannot allocate pool for primaryStorage[{0}], purpose: {1}",
    "zh_CN": "无法为主存储[{0}]分配池，目的：{1}",
    "arguments": [
      "psUuid",
      "purpose"
    ],
    "line": 1399,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot update status of the ceph primary storage mon[uuid:%s], it has been deleted.This error can be ignored",
    "en_US": "cannot update status of the ceph primary storage mon[uuid:{0}], it has been deleted.This error can be ignored",
    "zh_CN": "不能更新一台已经被删除的Ceph主存储监控节点[uuid:{0}]，这个错误可被忽略",
    "arguments": [
      "uuid"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java"
  },
  {
    "raw": "Ceph ps[uuid\u003d%s] root pool name not found",
    "en_US": "Ceph ps[uuid\u003d{0}] root pool name not found",
    "zh_CN": "找不到Ceph PS[uuid\u003d{0}]根池名称",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 471,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java"
  },
  {
    "raw": "invalid uri, correct example is ceph://$POOLNAME/$VOLUMEuuid or volume://$VOLUMEuuid",
    "en_US": "invalid uri, correct example is ceph://$POOLNAME/$VOLUMEuuid or volume://$VOLUMEuuid",
    "zh_CN": "URI无效，正确示例为ceph：//$poolName/$volumeUuid或volume：//$volumeUuid",
    "arguments": [],
    "line": 32,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephRequiredUrlParser.java"
  },
  {
    "raw": "Can not attach third-party ceph with token into kvm cluster.",
    "en_US": "Can not attach third-party ceph with token into kvm cluster.",
    "zh_CN": "无法使用令牌将第三方Ceph连接到KVM集群。",
    "arguments": [],
    "line": 19,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/CephStorageAttachKvmClusterMetric.java"
  },
  {
    "raw": "required ceph pool[uuid:%s] cannot satisfy conditions [availableSize \u003e %s bytes], current available size %s",
    "en_US": "required ceph pool[uuid:{0}] cannot satisfy conditions [availableSize \u003e {1} bytes], current available size {2}",
    "zh_CN": "所需的Ceph池[uuid：{0}]无法满足条件[AvailableSize\u003e{1}字节]，当前可用大小{2}",
    "arguments": [
      "poolUuid",
      "size",
      "originAvailableCapacity"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java"
  },
  {
    "raw": "cannot find ceph pool [%s] related osdgroup",
    "en_US": "cannot find ceph pool [{0}] related osdgroup",
    "zh_CN": "找不到Ceph池[{0}]相关的OSDGroup",
    "arguments": [
      "poolUuid"
    ],
    "line": 196,
    "fileName": "src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java"
  },
  {
    "raw": "no candidate host with the scsi lun with enough cpu / memory or Enabled/Connected status",
    "en_US": "no candidate host with the scsi lun with enough cpu / memory or Enabled/Connected status",
    "zh_CN": "需要的lun所在的物理机都不满足cpu / memory 以及物理机状态的条件",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java"
  },
  {
    "raw": "scsi lun[uuid: %s] and [uuid: %s] does not has a common host",
    "en_US": "scsi lun[uuid: {0}] and [uuid: {1}] does not has a common host",
    "zh_CN": "SCSI Lun[uuid：{0}]和[uuid：{1}]没有共同的物理机",
    "arguments": [
      "firstScsiLunVO.getUuid()",
      "scsiLunVO.getUuid()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java"
  },
  {
    "raw": "scsi lun[uuid: %s] is in disabled state",
    "en_US": "scsi lun[uuid: {0}] is in disabled state",
    "zh_CN": "SCSI Lun[uuid：{0}]处于禁用状态",
    "arguments": [
      "scsiLunVO.getUuid()"
    ],
    "line": 59,
    "fileName": "src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java"
  },
  {
    "raw": "scsi lun[wwid: %s] has been attached to vm instance %s",
    "en_US": "scsi lun[wwid: {0}] has been attached to vm instance {1}",
    "zh_CN": "SCSI Lun[WWID：{0}]已连接到VM实例{1}",
    "arguments": [
      "scsiLunVO.getWwid()",
      "refVO.getVmInstanceUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server[ip: %s, port: %s] already exists",
    "en_US": "iSCSI server[ip: {0}, port: {1}] already exists",
    "zh_CN": "iSCSI服务器[IP：{0}，端口：{1}]已存在",
    "arguments": [
      "msg.getIp()",
      "msg.getPort()"
    ],
    "line": 86,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server ip: %s is not valid",
    "en_US": "iSCSI server ip: {0} is not valid",
    "zh_CN": "iSCSI服务器IP：{0}无效",
    "arguments": [
      "msg.getIp()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server[uuid: %s] already attached to cluster[uuid: %s]",
    "en_US": "iSCSI server[uuid: {0}] already attached to cluster[uuid: {1}]",
    "zh_CN": "iSCSI服务器[uuid：{0}]已连接到群集[uuid：{1}]",
    "arguments": [
      "msg.getUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server[uuid: %s] not attached to cluster[uuid: %s]",
    "en_US": "iSCSI server[uuid: {0}] not attached to cluster[uuid: {1}]",
    "zh_CN": "iSCSI服务器[uuid：{0}]未连接到群集[uuid：{1}]",
    "arguments": [
      "msg.getUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "iSCSI server[uuid: %s] still attached to cluster[uuid: %s]",
    "en_US": "iSCSI server[uuid: {0}] still attached to cluster[uuid: {1}]",
    "zh_CN": "iSCSI服务器[uuid：{0}]仍连接到群集[uuid：{1}]",
    "arguments": [
      "msg.getUuid()",
      "clusterUuid"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "please umount all block devices of the vm[%s] and try again",
    "en_US": "please umount all block devices of the vm[{0}] and try again",
    "zh_CN": "请卸载云主机[{0}]的所有块设备，然后重试",
    "arguments": [
      "VmInstanceUuid"
    ],
    "line": 171,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java"
  },
  {
    "raw": "scsi lun[wwid:%s] has been attached into the vm[%s]",
    "en_US": "scsi lun[wwid:{0}] has been attached into the vm[{1}]",
    "zh_CN": "SCSI Lun[WWID：{0}]已连接到云主机[{1}]",
    "arguments": [
      "lunVO.getWwid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 1501,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "vm instance[%s] state [%s] not in allowed state[%s] for operation",
    "en_US": "vm instance[{0}] state [{1}] not in allowed state[{2}] for operation",
    "zh_CN": "VM实例[{0}]状态[{1}]不处于操作的允许状态[{2}]",
    "arguments": [
      "msg.getUuid()",
      "vmInstanceVO.getState()",
      "allowedVmOperationStates"
    ],
    "line": 1508,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "vm instance[uuid: %s] host[uuid: %s] not attached scsi lun[uuid: %s]",
    "en_US": "vm instance[uuid: {0}] host[uuid: {1}] not attached scsi lun[uuid: {2}]",
    "zh_CN": "云主机实例[uuid：{0}]物理机[uuid：{1}]未连接scsi lun[uuid：{2}]",
    "arguments": [
      "msg.getUuid()",
      "vmInstanceVO.getHostUuid()",
      "msg.getUuid()"
    ],
    "line": 1517,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "vm instance[%s] state[%s] not in allowed state[%s] for operation",
    "en_US": "vm instance[{0}] state[{1}] not in allowed state[{2}] for operation",
    "zh_CN": "VM实例[{0}]状态[{1}]不处于操作的允许状态[{2}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "vmInstanceVO.getState()",
      "allowedVmOperationStates"
    ],
    "line": 1576,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "vm instance[%s] host[uuid: %s] not attached scsi lun[uuid: %s]",
    "en_US": "vm instance[{0}] host[uuid: {1}] not attached scsi lun[uuid: {2}]",
    "zh_CN": "云主机实例[{0}]物理机[uuid：{1}]未连接SCSI Lun[uuid：{2}]",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "hostVO.getUuid()",
      "msg.getUuid()"
    ],
    "line": 1585,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "SCSI LUN[%s] is attached to VM [%s]",
    "en_US": "SCSI LUN[{0}] is attached to VM [{1}]",
    "zh_CN": "SCSI Lun[{0}]已连接到云主机[{1}]",
    "arguments": [
      "msg.getUuid()",
      "vmUuids"
    ],
    "line": 1738,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "SCSI LUN[%s] record not found on host [%s]",
    "en_US": "SCSI LUN[{0}] record not found on host [{1}]",
    "zh_CN": "在物理机[{1}]上未找到SCSI Lun[{0}]记录",
    "arguments": [
      "msg.getUuid()",
      "msg.getHostUuid()"
    ],
    "line": 1748,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "unexpected hypervisor type[%s] for host [%s]",
    "en_US": "unexpected hypervisor type[{0}] for host [{1}]",
    "zh_CN": "物理机[{1}]的意外云主机监控程序类型[{0}]",
    "arguments": [
      "hvType",
      "msg.getHostUuid()"
    ],
    "line": 1760,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "different disk types are found in different hosts for lun[serial:%s], unable to attach it to cluster",
    "en_US": "different disk types are found in different hosts for lun[serial:{0}], unable to attach it to cluster",
    "zh_CN": "在不同的物理机中为Lun[serial：{0}]找到不同的磁盘类型，无法将其连接到群集",
    "arguments": [
      "serial"
    ],
    "line": 2024,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "different iscsi configuration were found on host[uuid:%s, targets:%s]and host[uuid:%s, targets:%s]",
    "en_US": "different iscsi configuration were found on host[uuid:{0}, targets:{1}]and host[uuid:{2}, targets:{3}]",
    "zh_CN": "在物理机[uuid：{0}，目标：{1}]和物理机[uuid：{2}，目标：{3}]上找到不同的iSCSI配置",
    "arguments": [
      "scannedServer.getKey()",
      "JSONObjectUtil.toJsonString(scannedTargets)",
      "hostVO.getUuid()",
      "JSONObjectUtil.toJsonString(returnValue.getIscsiTargets())"
    ],
    "line": 1975,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "specified scsi lun[wwid: %s] not exists or disabled",
    "en_US": "specified scsi lun[wwid: {0}] not exists or disabled",
    "zh_CN": "指定的SCSI Lun[WWID：{0}]不存在或已禁用",
    "arguments": [
      "refVO.getScsiLunUuid()"
    ],
    "line": 2661,
    "fileName": "src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java"
  },
  {
    "raw": "the vm where the data volume [%s] is located has a memory snapshot, can\u0027t delete",
    "en_US": "the vm where the data volume [{0}] is located has a memory snapshot, can\u0027t delete",
    "zh_CN": "数据云盘[{0}]所在的云主机具有内存快照，无法删除",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java"
  },
  {
    "raw": "unable to attach volume %s to vmInstance %s with memory snapshot group",
    "en_US": "unable to attach volume {0} to vmInstance {1} with memory snapshot group",
    "zh_CN": "无法使用内存快照组将卷{0}附加到VMInstance{1}",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 71,
    "fileName": "src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java"
  },
  {
    "raw": "the vm where the data volume [%s] is located has a memory snapshot, can\u0027t detach",
    "en_US": "the vm where the data volume [{0}] is located has a memory snapshot, can\u0027t detach",
    "zh_CN": "数据云盘[{0}]所在的VM具有内存快照，无法分离",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java"
  },
  {
    "raw": "defaultL3NetworkUuid not exist",
    "en_US": "defaultL3NetworkUuid not exist",
    "zh_CN": "defaultL3NetworkUuid不存在",
    "arguments": [],
    "line": 60,
    "fileName": "src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java"
  },
  {
    "raw": "nic with l3 network[uuid: %s] is referenced by VolumeSnapshotGroup[uuid: %s], delete this VolumeSnapshotGroup before deleting this l3 network.",
    "en_US": "nic with l3 network[uuid: {0}] is referenced by VolumeSnapshotGroup[uuid: {1}], delete this VolumeSnapshotGroup before deleting this l3 network.",
    "zh_CN": "具有三层网络[uuid：{0}]的NIC由卷SnapshotGroup[uuid：{1}]引用，请在删除此三层网络之前删除此卷SnapshotGroup。",
    "arguments": [
      "l3Uuid",
      "String.join(\"\u0027,\u0027\", memorySnapshotGroupUuidList)"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java"
  },
  {
    "raw": "the volume %s does not exist",
    "en_US": "the volume {0} does not exist",
    "zh_CN": "卷{0}不存在",
    "arguments": [
      "archiveVolume.getResourceUuid()"
    ],
    "line": 155,
    "fileName": "src/main/java/org/zstack/storage/memorySnapshot/VolumeMemorySnapshotGroupExtension.java"
  },
  {
    "raw": "vm block migrate failed: %s",
    "en_US": "vm block migrate failed: {0}",
    "zh_CN": "VM块迁移失败：{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 161,
    "fileName": "src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java"
  },
  {
    "raw": "target primary storage does not support migration for current host",
    "en_US": "target primary storage does not support migration for current host",
    "zh_CN": "目标主存储不支持当前物理机的迁移",
    "arguments": [],
    "line": 188,
    "fileName": "src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java"
  },
  {
    "raw": "No host available for block live migration",
    "en_US": "No host available for block live migration",
    "zh_CN": "没有可用于数据块实时迁移的物理机",
    "arguments": [],
    "line": 116,
    "fileName": "src/main/java/org/zstack/storage/migration/KvmMigrateVmWithStorageWorkFlow.java"
  },
  {
    "raw": "do not support storage migration with iso in ceph backup storage attached",
    "en_US": "do not support storage migration with iso in ceph backup storage attached",
    "zh_CN": "不支持Ceph备份存储中附加ISO的存储迁移",
    "arguments": [],
    "line": 121,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration of vm[uuid:%s, name: %s] while shared volume attached",
    "en_US": "do not support storage migration of vm[uuid:{0}, name: {1}] while shared volume attached",
    "zh_CN": "连接共享云盘时，不支持VM[uuid：{0}，名称：{1}]的存储迁移",
    "arguments": [
      "srcVm.getUuid()",
      "srcVm.getName()"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration from [%s] to [%s] with data volume",
    "en_US": "do not support storage migration from [{0}] to [{1}] with data volume",
    "zh_CN": "不支持从[{0}]到[{1}]的带数据盘的存储迁移",
    "arguments": [
      "srcPsType",
      "dstPsType"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration from [%s] to [%s] with snapshot",
    "en_US": "do not support storage migration from [{0}] to [{1}] with snapshot",
    "zh_CN": "不支持从[{0}]到[{1}]的存在云盘快照的存储迁移",
    "arguments": [
      "srcPsType",
      "dstPsType"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration from [%s] to [%s]",
    "en_US": "do not support storage migration from [{0}] to [{1}]",
    "zh_CN": "不支持从[{0}]到[{1}]的存储迁移",
    "arguments": [
      "primaryStorageVO.getType()",
      "dstPrimaryStorageVO.getType()"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] is running but host uuid is missing",
    "en_US": "VM[uuid:{0}] is running but host uuid is missing",
    "zh_CN": "云主机[uuid：{0}]正在运行，但缺少物理机uuid",
    "arguments": [
      "vmInstanceVO.getUuid()"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source BS and Destination BS cannot be the same.",
    "en_US": "Source BS and Destination BS cannot be the same.",
    "zh_CN": "源镜像服务器和目标镜像服务器不能相同",
    "arguments": [],
    "line": 202,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source BS and Destination BS must not be Disabled.",
    "en_US": "Source BS and Destination BS must not be Disabled.",
    "zh_CN": "源镜像服务器和目标镜像服务器必须不是不可用。",
    "arguments": [],
    "line": 210,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Image[uuid:%s] is not in status Ready, cannot migrate it.",
    "en_US": "Image[uuid:{0}] is not in status Ready, cannot migrate it.",
    "zh_CN": "镜像[uuid:{0}]的状态不是已准备，不能迁移它",
    "arguments": [
      "msg.getImageUuid()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Image[uuid:%s] is not in source backup storage[uuid:%s]",
    "en_US": "Image[uuid:{0}] is not in source backup storage[uuid:{1}]",
    "zh_CN": "镜像[uuid:{0}]没有在源镜像服务器[uuid:{1}]",
    "arguments": [
      "msg.getImageUuid()",
      "msg.getSrcBackupStorageUuid()"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate image from %s to %s.",
    "en_US": "Cannot migrate image from {0} to {1}.",
    "zh_CN": "不能从{0}迁移镜像到{1}",
    "arguments": [
      "srcBS.getType()",
      "dstBS.getType()"
    ],
    "line": 237,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is already in PS[uuid:%s], cannot migrate.",
    "en_US": "Volume[uuid:{0}] is already in PS[uuid:{1}], cannot migrate.",
    "zh_CN": "云盘[uuid:{0}]已经在主存储[uuid:{1}]里，不能迁移。",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getDstPrimaryStorageUuid()"
    ],
    "line": 256,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Source PS and Destination PS must not be Disabled or Maintenance state.",
    "en_US": "Source PS and Destination PS must not be Disabled or Maintenance state.",
    "zh_CN": "源主存储和目标主存储必须不是不可用或者维护状态。",
    "arguments": [],
    "line": 264,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Volume[uuid:%s] is not in status Ready, cannot migrate it.",
    "en_US": "Volume[uuid:{0}] is not in status Ready, cannot migrate it.",
    "zh_CN": "云盘[uuid:{0}]状态不是已准备，不能进行迁移",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 271,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "cannot migrate data volume[uuid:%s] bewteen sharedblock primary storages when vm[vmuuid:%s] instance is not stopped.",
    "en_US": "cannot migrate data volume[uuid:{0}] bewteen sharedblock primary storages when vm[vmuuid:{1}] instance is not stopped.",
    "zh_CN": "VM[vmuuid：{1}]实例未停止时，无法在SharedBlock主存储之间迁移数据云盘[uuid：{0}]。",
    "arguments": [
      "msg.getVolumeUuid()",
      "srcVolume.getVmInstanceUuid()"
    ],
    "line": 333,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is still attached on vm[uuid:%s], please detach it before migration.",
    "en_US": "the volume[uuid:{0}] is still attached on vm[uuid:{1}], please detach it before migration.",
    "zh_CN": "云盘[uuid:{0}]一直连接在云主机[uuid:{1}]，在迁移之前请先断开连接",
    "arguments": [
      "msg.getVolumeUuid()",
      "srcVolume.getVmInstanceUuid()"
    ],
    "line": 328,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "do not support storage migration while shared volume[uuid: %s, name: %s] attached",
    "en_US": "do not support storage migration while shared volume[uuid: {0}, name: {1}] attached",
    "zh_CN": "加载了共享云盘[uuid:{0}, name:{1}]不支持存储迁移",
    "arguments": [
      "srcVolume.getUuid()",
      "srcVolume.getName()"
    ],
    "line": 341,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate root volume when vm instance is not stopped.",
    "en_US": "Cannot migrate root volume when vm instance is not stopped.",
    "zh_CN": "当云主机不是已停止，不能迁移云盘。",
    "arguments": [],
    "line": 284,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate root volume when there are data volumes attached to the vm instance.",
    "en_US": "Cannot migrate root volume when there are data volumes attached to the vm instance.",
    "zh_CN": "当云盘连接在云主机上时，不能迁移云盘",
    "arguments": [],
    "line": 301,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.",
    "en_US": "The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.",
    "zh_CN": "目标主存储不能连接任何和源集群一样的二层网络的集群",
    "arguments": [],
    "line": 320,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "Cannot migrate volume from %s to %s.",
    "en_US": "Cannot migrate volume from {0} to {1}.",
    "zh_CN": "不能从{0}迁移云盘到{1}",
    "arguments": [
      "srcPS.getType()",
      "dstPS.getType()"
    ],
    "line": 351,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "can not migrate volume[%s], because volume state is Disabled",
    "en_US": "can not migrate volume[{0}], because volume state is Disabled",
    "zh_CN": "无法迁移卷[{0}]，因为卷状态已禁用",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 372,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java"
  },
  {
    "raw": "not support vm state[%s] to do storage migration",
    "en_US": "not support vm state[{0}] to do storage migration",
    "zh_CN": "云主机状态为[{0}],无法进行存储迁移",
    "arguments": [
      "vmInstanceVO.getState()"
    ],
    "line": 510,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "there are not enough capacity for vm[uuid: %s] storage migration, required capacity(include image cache): %s, current available physical capacity: %s",
    "en_US": "there are not enough capacity for vm[uuid: {0}] storage migration, required capacity(include image cache): {1}, current available physical capacity: {2}",
    "zh_CN": "对云主机[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量（容量计算包含镜像cache），但现在只有{2}的空余容量",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "size",
      "dstPrimaryStorageVO.getCapacity().getAvailablePhysicalCapacity()"
    ],
    "line": 448,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "VM[uuid: %s] not found",
    "en_US": "VM[uuid: {0}] not found",
    "zh_CN": "找不到VM[uuid：{0}]",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 1125,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "unsupported storage migration type: from %s to %s",
    "en_US": "unsupported storage migration type: from {0} to {1}",
    "zh_CN": "不支持的存储迁移类型：从{0}到{1}",
    "arguments": [
      "srcPs.getType()",
      "dstPs.getType()"
    ],
    "line": 846,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "not support to cancel %s",
    "en_US": "not support to cancel {0}",
    "zh_CN": "不支持取消{0}",
    "arguments": [
      "msg.getType()"
    ],
    "line": 1094,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "not support vm state[%s] to do cancellation of storage migration",
    "en_US": "not support vm state[{0}] to do cancellation of storage migration",
    "zh_CN": "不支持云主机状态[{0}]取消存储迁移",
    "arguments": [
      "vmInstanceVO.getState()"
    ],
    "line": 1194,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "failed to get host candidates for vm migration",
    "en_US": "failed to get host candidates for vm migration",
    "zh_CN": "无法获取云主机迁移的候选物理机",
    "arguments": [],
    "line": 1514,
    "fileName": "src/main/java/org/zstack/storage/migration/StorageMigrationBase.java"
  },
  {
    "raw": "all ceph mons are Disconnected in ceph backup storage[uuid:%s]",
    "en_US": "all ceph mons are Disconnected in ceph backup storage[uuid:{0}]",
    "zh_CN": "所有在Ceph镜像服务器监控节点[uuid:{0}]的监控节点都处于失联状态",
    "arguments": [
      "dstBsVO.getUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java"
  },
  {
    "raw": "Failed to migrate Image %s from BS %s to BS %s. cause: %s",
    "en_US": "Failed to migrate Image {0} from BS {1} to BS {2}. cause: {3}",
    "zh_CN": "无法将镜像{0}从BS{1}迁移到BS{2}。原因：{3}",
    "arguments": [
      "imageUuid",
      "srcBsUuid",
      "dstBsUuid",
      "errCode.getDetails()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java"
  },
  {
    "raw": "found trashId(%s) in BackupStorage [%s] for the migrate installPath[%s]. Please clean it first by \u0027APICleanUpTrashOnBackupStorageMsg\u0027 if you insist to migrate the image[%s]",
    "en_US": "found trashId({0}) in BackupStorage [{1}] for the migrate installPath[{2}]. Please clean it first by \u0027APICleanUpTrashOnBackupStorageMsg\u0027 if you insist to migrate the image[{3}]",
    "zh_CN": "在备份存储[{1}]的回收数据({0})中己存在要迁移的目标路径[{2}]，如果要继续迁移镜像[{3}]，请先调用\u0027APICleanUpTrashOnBackupStorageMsg\u0027来手动清理该回收数据",
    "arguments": [
      "reply1.getTrashId()",
      "dstBsUuid",
      "dstImageInstallPath",
      "reply1.getResourceUuid()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java"
  },
  {
    "raw": "vm[uuid:%s] storage migration long job[uuid:%s] failed because management node was restarted",
    "en_US": "vm[uuid:{0}] storage migration long job[uuid:{1}] failed because management node was restarted",
    "zh_CN": "云主机[uuid：{0}]存储迁移长作业[uuid：{1}]失败，因为管理节点已重新启动",
    "arguments": [
      "amsg.getVmInstanceUuid()",
      "job.getUuid()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/PrimaryStorageMigrateVmJob.java"
  },
  {
    "raw": "The type [%s] of volume is invalid.",
    "en_US": "The type [{0}] of volume is invalid.",
    "zh_CN": "卷的类型[{0}]无效。",
    "arguments": [
      "volume.getType()"
    ],
    "line": 584,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java"
  },
  {
    "raw": "all ceph mons are Disconnected in ceph primary storage[uuid:%s]",
    "en_US": "all ceph mons are Disconnected in ceph primary storage[uuid:{0}]",
    "zh_CN": "所有Ceph MON都在分布式存储[uuid：{0}]中断开连接",
    "arguments": [
      "dstPsVO.getUuid()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java"
  },
  {
    "raw": "cannot find any connected host to perform the storage migration operation",
    "en_US": "cannot find any connected host to perform the storage migration operation",
    "zh_CN": "为了执行存储迁移操作，未找到连接的物理机",
    "arguments": [],
    "line": 89,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java"
  },
  {
    "raw": "both image %s and its cache is missing",
    "en_US": "both image {0} and its cache is missing",
    "zh_CN": "缺少镜像{0}及其缓存",
    "arguments": [
      "imageUuid"
    ],
    "line": 194,
    "fileName": "src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java"
  },
  {
    "raw": "\u0027resourceUuid\u0027 and \u0027resourceType\u0027 must be set both or neither!",
    "en_US": "\u0027resourceUuid\u0027 and \u0027resourceType\u0027 must be set both or neither!",
    "zh_CN": "“ resourceUuid ”和“ resourceType ”必须同时设置或都不设置！",
    "arguments": [],
    "line": 203,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true",
    "en_US": "zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true",
    "zh_CN": "zoneUuids、clusterUuids、primaryStorageUuids中必须至少有一个不为空列表，除非将字段 all 设为 true",
    "arguments": [],
    "line": 92,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] has not been attached to cluster[uuid:%s] yet",
    "en_US": "primary storage[uuid:{0}] has not been attached to cluster[uuid:{1}] yet",
    "zh_CN": "主存储[uuid:{0}]还未加载到集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] has been attached to cluster[uuid:%s]",
    "en_US": "primary storage[uuid:{0}] has been attached to cluster[uuid:{1}]",
    "zh_CN": "主存储[uuid:{0}]已被加载到集群[uuid:{1}]上",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] and cluster[uuid:%s] are not in the same zone",
    "en_US": "primary storage[uuid:{0}] and cluster[uuid:{1}] are not in the same zone",
    "zh_CN": "主存储[uuid:{0}]和集群[uuid:{1}]不在同一个区域内",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getClusterUuid()"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "url[%s] has been occupied, it cannot be duplicate in same cluster",
    "en_US": "url[{0}] has been occupied, it cannot be duplicate in same cluster",
    "zh_CN": "url[{0}]已经被占用，在相同的集群里它不能再次使用",
    "arguments": [
      "url"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage(s) [uuid: %s] where volume(s) locate is not Enabled or Connected",
    "en_US": "primary storage(s) [uuid: {0}] where volume(s) locate is not Enabled or Connected",
    "zh_CN": "卷所在的主存储[uuid：{0}]未启用或未连接",
    "arguments": [
      "psUuids"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java"
  },
  {
    "raw": "after removing primary storage%s to avoid, there is no candidate primary storage anymore. please check primary storage status and state in the cluster.",
    "en_US": "after removing primary storage{0} to avoid, there is no candidate primary storage anymore. please check primary storage status and state in the cluster.",
    "zh_CN": "把主存储{0}移到排除列表后，就没有可用的主存储了，请确认集群中主存储的状态",
    "arguments": [
      "spec.getAvoidPrimaryStorageUuids()"
    ],
    "line": 50,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java"
  },
  {
    "raw": "cannot attach ISO to a primary storage[uuid:%s] which is disabled",
    "en_US": "cannot attach ISO to a primary storage[uuid:{0}] which is disabled",
    "zh_CN": "无法将ISO附加到已禁用的主存储[uuid：{0}]",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "backup storage[uuid:%s] is not attached to zone[uuid:%s] the primary storage[uuid:%s] belongs to",
    "en_US": "backup storage[uuid:{0}] is not attached to zone[uuid:{1}] the primary storage[uuid:{2}] belongs to",
    "zh_CN": "镜像服务器[uuid:{0}]没有加载到主存储[uuid:{2}]所在的区域[uuid:{1}]",
    "arguments": [
      "bsUuid",
      "self.getZoneUuid()",
      "self.getUuid()"
    ],
    "line": 769,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "volume[uuid:%s] has been attached a %s VM. VM should be Stopped.",
    "en_US": "volume[uuid:{0}] has been attached a {1} VM. VM should be Stopped.",
    "zh_CN": "卷[uuid：{0}]已连接到{1}云主机。应停止云主机。",
    "arguments": [
      "volUuid",
      "vmState"
    ],
    "line": 789,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "primary storage[uuid:%s] cannot be deleted for still being attached to cluster[uuid:%s].",
    "en_US": "primary storage[uuid:{0}] cannot be deleted for still being attached to cluster[uuid:{1}].",
    "zh_CN": "不能删除主存储[uuid:{0}]，因为它还被加载在集群[uuid:{1}]上",
    "arguments": [
      "self.getUuid()",
      "clusterUuidsString"
    ],
    "line": 1602,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "cannot attach volume[uuid:%s] whose primary storage is Maintenance",
    "en_US": "cannot attach volume[uuid:{0}] whose primary storage is Maintenance",
    "zh_CN": "无法挂载云盘[uuid:{0}]，其主存储处于维护模式",
    "arguments": [
      "volumeUuid"
    ],
    "line": 1749,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java"
  },
  {
    "raw": "cannot reserve %s bytes on the primary storage[uuid:%s], it\u0027s short of available capacity",
    "en_US": "cannot reserve {0} bytes on the primary storage[uuid:{1}], it\u0027s short of available capacity",
    "zh_CN": "无法在主存储[uuid:{1}]上保留{0}字节，可用容量不足",
    "arguments": [
      "size",
      "capacityVO.getUuid()"
    ],
    "line": 283,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is not in status of Connected, current status is %s",
    "en_US": "the primary storage[uuid:{0}] is not in status of Connected, current status is {1}",
    "zh_CN": "主存储[uuid:{0}]的状态不是已连接，当前的状态是{1}",
    "arguments": [
      "ps.getUuid()",
      "ps.getStatus().toString()"
    ],
    "line": 45,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageDeleteBitGC.java"
  },
  {
    "raw": "no way to get image size of %s, report exception.",
    "en_US": "no way to get image size of {0}, report exception.",
    "zh_CN": "无法获取{0}的镜像大小，报告异常。",
    "arguments": [
      "spec.getImageUuid()"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageMainAllocatorFlow.java"
  },
  {
    "raw": "%s is invalid. %s is not a valid zstack uuid",
    "en_US": "{0} is invalid. {1} is not a valid zstack uuid",
    "zh_CN": "{0}是无效的，{1}不是一个有效的ZStack uuid",
    "arguments": [
      "systemTag",
      "uuid"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "no primary storage[uuid:%s] found",
    "en_US": "no primary storage[uuid:{0}] found",
    "zh_CN": "找不到主存储[uuid:{0}]",
    "arguments": [
      "resourceUuid"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "primaryStorage[uuid\u003d%s] does not exist",
    "en_US": "primaryStorage[uuid\u003d{0}] does not exist",
    "zh_CN": "PrimaryStorage[uuid\u003d{0}]不存在",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "please specify the purpose before allocating space",
    "en_US": "please specify the purpose before allocating space",
    "zh_CN": "请在分配空间之前指定用途",
    "arguments": [],
    "line": 492,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "cannot find any qualified primary storage, errors are %s",
    "en_US": "cannot find any qualified primary storage, errors are {0}",
    "zh_CN": "找不到可用的主存储，错误为:{0}",
    "arguments": [
      "errs"
    ],
    "line": 614,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "cidr[%s] Input Format Error",
    "en_US": "cidr[{0}] Input Format Error",
    "zh_CN": "CIDR[{0}]输入格式错误",
    "arguments": [
      "cidr"
    ],
    "line": 833,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "only one primaryStorage cidr system tag is allowed, but %d got",
    "en_US": "only one primaryStorage cidr system tag is allowed, but {0} got",
    "zh_CN": "只允许一个PrimaryStorage CIDR系统标记，但{0}获得了",
    "arguments": [
      "cidrCount"
    ],
    "line": 829,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "clusterUuid conflict, the cluster specified by the instance offering is %s, and the cluster specified in the creation parameter is %s",
    "en_US": "clusterUuid conflict, the cluster specified by the instance offering is {0}, and the cluster specified in the creation parameter is {1}",
    "zh_CN": "Clusteruuid冲突，实例产品指定的集群为{0}，创建参数中指定的集群为{1}",
    "arguments": [
      "clusterUuid",
      "msg.getClusterUuid()"
    ],
    "line": 1186,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "primaryStorageUuid conflict, the primary storage specified by the instance offering is %s, and the primary storage specified in the creation parameter is %s",
    "en_US": "primaryStorageUuid conflict, the primary storage specified by the instance offering is {0}, and the primary storage specified in the creation parameter is {1}",
    "zh_CN": "PrimaryStorageuuid冲突，实例产品指定的主存储为{0}，而创建参数中指定的主存储为{1}",
    "arguments": [
      "psUuid",
      "msg.getPrimaryStorageUuidForRootVolume()"
    ],
    "line": 1201,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java"
  },
  {
    "raw": "cannot find primary storage[uuid:%s], the uuid is specified in instance offering or disk offering",
    "en_US": "cannot find primary storage[uuid:{0}], the uuid is specified in instance offering or disk offering",
    "zh_CN": "找不到由计算规格或云盘规格指定的主存储[uuid:{0}]",
    "arguments": [
      "uuid"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java"
  },
  {
    "raw": "cannot find primary storage having user tag[%s]. The user tag is specified in instance offering or disk offering",
    "en_US": "cannot find primary storage having user tag[{0}]. The user tag is specified in instance offering or disk offering",
    "zh_CN": "找不到带有指定用户标签的主存储[uuid:{0}]，该标签由计算规格或者云盘规格指定",
    "arguments": [
      "tag"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java"
  },
  {
    "raw": "PrimaryStorageTagAllocatorExtensionPoint[%s] returns zero primary storage candidate",
    "en_US": "PrimaryStorageTagAllocatorExtensionPoint[{0}] returns zero primary storage candidate",
    "zh_CN": "主存储标签分配插件[{0}]找不到可用的主存储",
    "arguments": [
      "extp.getClass().getName()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java"
  },
  {
    "raw": "not support",
    "en_US": "not support",
    "zh_CN": "不是支持",
    "arguments": [],
    "line": 1825,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "cannot find any BackupStorageKvmFactory for the type[%s]",
    "en_US": "cannot find any BackupStorageKvmFactory for the type[{0}]",
    "zh_CN": "找不到类型[{0}]的任何BackupStorageKVMFactory",
    "arguments": [
      "bsType"
    ],
    "line": 471,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "the block primary storage[uuid:%s, name:%s] can not find any available host in attached clusters for instantiating the volume",
    "en_US": "the block primary storage[uuid:{0}, name:{1}] can not find any available host in attached clusters for instantiating the volume",
    "zh_CN": "块主存储[uuid：{0}，名称：{1}]在连接的群集中找不到任何可用于实例化卷的物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 670,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "fail to find a host to map for volume %s",
    "en_US": "fail to find a host to map for volume {0}",
    "zh_CN": "找不到要为卷{0}映射的物理机",
    "arguments": [
      "msg.getVolumeInventory().getUuid()"
    ],
    "line": 1242,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "host uuid is mandatory",
    "en_US": "host uuid is mandatory",
    "zh_CN": "物理机uuid是必需的",
    "arguments": [],
    "line": 1491,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "Fail to get host initiator ref, please reconnect this host:%s",
    "en_US": "Fail to get host initiator ref, please reconnect this host:{0}",
    "zh_CN": "无法获取物理机启动器引用，请重新连接此物理机：{0}",
    "arguments": [
      "msg.getDestHostUuid()"
    ],
    "line": 1612,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "fail to find cluster for commit volume on ps:%s",
    "en_US": "fail to find cluster for commit volume on ps:{0}",
    "zh_CN": "在PS：{0}上找不到提交卷的群集",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 2608,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "fail to find host for commit volume:%s",
    "en_US": "fail to find host for commit volume:{0}",
    "zh_CN": "找不到提交卷的物理机：{0}",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 2617,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java"
  },
  {
    "raw": "not support take volumes snapshots on multiple ps when including ceph",
    "en_US": "not support take volumes snapshots on multiple ps when including ceph",
    "zh_CN": "包含Ceph时，不支持在多个PS上拍摄卷快照",
    "arguments": [],
    "line": 1132,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java"
  },
  {
    "raw": "KVM host[uuid: %s] fails to be added into local primary storage[uuid: %s], %s",
    "en_US": "KVM host[uuid: {0}] fails to be added into local primary storage[uuid: {1}], {2}",
    "zh_CN": "本地存储[uuid:{1}]添加物理机[uuid:{0}]失败，{2}",
    "arguments": [
      "context.getInventory().getUuid()",
      "priUuid",
      "reply.getError()"
    ],
    "line": 370,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java"
  },
  {
    "raw": "fail to find block scsi lun for volume: %s",
    "en_US": "fail to find block scsi lun for volume: {0}",
    "zh_CN": "找不到卷{0}的块SCSI Lun",
    "arguments": [
      "volume.getUuid()"
    ],
    "line": 669,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java"
  },
  {
    "raw": "fail to exchange block scsi lun info:%s",
    "en_US": "fail to exchange block scsi lun info:{0}",
    "zh_CN": "无法交换块SCSI Lun信息：{0}",
    "arguments": [
      "e.getCause().toString()"
    ],
    "line": 967,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java"
  },
  {
    "raw": "currently block storage only support full mode backup",
    "en_US": "currently block storage only support full mode backup",
    "zh_CN": "当前，数据块存储仅支持完整模式备份",
    "arguments": [],
    "line": 1560,
    "fileName": "src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java"
  },
  {
    "raw": "failed to download[%s] from BackupStorage[hostname:%s] to block primary storage[uuid:%s, path:%s], %s",
    "en_US": "failed to download[{0}] from BackupStorage[hostname:{1}] to block primary storage[uuid:{2}, path:{3}], {4}",
    "zh_CN": "无法将[{0}]从备份存储[物理机名：{1}]下载到块主存储[uuid：{2}，路径：{3}]，{4}",
    "arguments": [
      "bsPath",
      "greply.getHostname()",
      "pinv.getUuid()",
      "psPath",
      "rsp.getError()"
    ],
    "line": 143,
    "fileName": "src/main/java/org/zstack/storage/primary/block/ImageStoreBackupStorageBlockKvmDownloader.java"
  },
  {
    "raw": "fail to sync access zones because %s",
    "en_US": "fail to sync access zones because {0}",
    "zh_CN": "无法同步访问分区，因为{0}",
    "arguments": [
      "accessZoneRsp.getDetail_err_msg()"
    ],
    "line": 875,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to get access zone\u0027s subnet because %s",
    "en_US": "fail to get access zone\u0027s subnet because {0}",
    "zh_CN": "无法获取访问区域的子网，因为{0}",
    "arguments": [
      "queryAccessZoneSubnetRsp.getDetail_err_msg()"
    ],
    "line": 881,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query all hosts, because of %s",
    "en_US": "fail to query all hosts, because of {0}",
    "zh_CN": "由于{0}，无法查询所有物理机",
    "arguments": [
      "queryHostRsp.getDetail_err_msg()"
    ],
    "line": 893,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query hosts %s, because of %s",
    "en_US": "fail to query hosts {0}, because of {1}",
    "zh_CN": "由于{1}，无法查询物理机{0}",
    "arguments": [
      "ids.toString()",
      "queryHostRsp.getDetail_err_msg()"
    ],
    "line": 908,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to add host %s into hostGroup %s, because of %s",
    "en_US": "fail to add host {0} into hostGroup {1}, because of {2}",
    "zh_CN": "由于{2}，无法将物理机{0}添加到物理机组{1}",
    "arguments": [
      "String.valueOf(hostId)",
      "String.valueOf(hostGroupId)",
      "addHostRsp.getDetail_err_msg()"
    ],
    "line": 927,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "host id is mandatory but get:%s",
    "en_US": "host id is mandatory but get:{0}",
    "zh_CN": "物理机ID是必需的，但获取：{0}",
    "arguments": [
      "String.valueOf(initiatorId)"
    ],
    "line": 962,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to delete host %s, because of %s",
    "en_US": "fail to delete host {0}, because of {1}",
    "zh_CN": "由于{1}，无法删除物理机{0}",
    "arguments": [
      "String.valueOf(hostId)",
      "rsp.getDetail_err_msg()"
    ],
    "line": 943,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to delete host group %s, because of %s",
    "en_US": "fail to delete host group {0}, because of {1}",
    "zh_CN": "由于{1}，无法删除物理机组{0}",
    "arguments": [
      "String.valueOf(hostGroupId)",
      "rsp.getDetail_err_msg()"
    ],
    "line": 955,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to delete initiator %s, because of %s",
    "en_US": "fail to delete initiator {0}, because of {1}",
    "zh_CN": "由于{1}，无法删除发起程序{0}",
    "arguments": [
      "String.valueOf(initiatorId)",
      "rsp.getDetail_err_msg()"
    ],
    "line": 967,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query host group, because of %s",
    "en_US": "fail to query host group, because of {0}",
    "zh_CN": "由于{0}，无法查询物理机组",
    "arguments": [
      "queryHostGroupRsp.getDetail_err_msg()"
    ],
    "line": 975,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to add host group: %s, error message:%s ",
    "en_US": "fail to add host group: {0}, error message:{1} ",
    "zh_CN": "无法添加物理机组：{0}，错误消息：{1}",
    "arguments": [
      "name",
      "addHostGroupRsp.getDetail_err_msg()"
    ],
    "line": 993,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query lun : %s, error message:%s ",
    "en_US": "fail to query lun : {0}, error message:{1} ",
    "zh_CN": "无法查询Lun：{0}，错误消息：{1}",
    "arguments": [
      "ids.toString()",
      "queryLunRsp.getDetail_err_msg()"
    ],
    "line": 1011,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query lun by path: %s, error message:%s ",
    "en_US": "fail to query lun by path: {0}, error message:{1} ",
    "zh_CN": "无法按路径查询Lun：{0}，错误消息：{1}",
    "arguments": [
      "queryPath",
      "queryLunRsp.getDetail_err_msg()"
    ],
    "line": 1050,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to update lun name: %s, error message:%s ",
    "en_US": "fail to update lun name: {0}, error message:{1} ",
    "zh_CN": "无法更新Lun名称：{0}，错误消息：{1}",
    "arguments": [
      "name",
      "serverCommonRsp.getDetail_err_msg()"
    ],
    "line": 1067,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to create lun name: %s, error message:%s ",
    "en_US": "fail to create lun name: {0}, error message:{1} ",
    "zh_CN": "无法创建Lun名称：{0}，错误消息：{1}",
    "arguments": [
      "blockScsiLunVO.getName()",
      "serverRsp.getDetail_err_msg()"
    ],
    "line": 1178,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to get created lun[name: %s], error message:%s ",
    "en_US": "fail to get created lun[name: {0}], error message:{1} ",
    "zh_CN": "无法获取已创建的Lun[名称：{0}]，错误消息：{1}",
    "arguments": [
      "blockScsiLunVO.getName()",
      "serverRsp.getDetail_err_msg()"
    ],
    "line": 1115,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to create lun name: %s, can not find root cause",
    "en_US": "fail to create lun name: {0}, can not find root cause",
    "zh_CN": "无法创建Lun名称：{0}，找不到根本原因",
    "arguments": [
      "blockScsiLunVO.getName()"
    ],
    "line": 1129,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query lun %s, because of %s",
    "en_US": "fail to query lun {0}, because of {1}",
    "zh_CN": "由于{1}，无法查询Lun{0}",
    "arguments": [
      "String.valueOf(lunId)",
      "queryLunRsp.getDetail_err_msg()"
    ],
    "line": 1188,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query lun map for lun %s and host group %s, because of %s",
    "en_US": "fail to query lun map for lun {0} and host group {1}, because of {2}",
    "zh_CN": "由于{2}，无法查询Lun{0}和物理机组{1}的Lun映射",
    "arguments": [
      "String.valueOf(lunId)",
      "String.valueOf(hostGroupId)",
      "queryLunMapRsp.getDetail_err_msg()"
    ],
    "line": 1204,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query lun map for host group %s, because of %s",
    "en_US": "fail to query lun map for host group {0}, because of {1}",
    "zh_CN": "由于{1}，无法查询物理机组{0}的Lun映射",
    "arguments": [
      "String.valueOf(hostGroupId)",
      "queryLunMapRsp.getDetail_err_msg()"
    ],
    "line": 1225,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to get cluster info, because of %s",
    "en_US": "fail to get cluster info, because of {0}",
    "zh_CN": "由于{0}，无法获取群集信息",
    "arguments": [
      "clusterOverviewRsp.getDetail_err_msg()"
    ],
    "line": 1236,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to map lun %s to host group %s, because of %s",
    "en_US": "fail to map lun {0} to host group {1}, because of {2}",
    "zh_CN": "由于{2}，无法将Lun{0}映射到物理机组{1}",
    "arguments": [
      "String.valueOf(lunId)",
      "String.valueOf(hostGroupId)",
      "serverRsp.getDetail_err_msg()"
    ],
    "line": 1259,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "lun map id is mandatory but get:%s",
    "en_US": "lun map id is mandatory but get:{0}",
    "zh_CN": "Lun映射ID是必需的，但获取：{0}",
    "arguments": [
      "String.valueOf(lunMapId)"
    ],
    "line": 1267,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to delete lun map %s, because of %s",
    "en_US": "fail to delete lun map {0}, because of {1}",
    "zh_CN": "由于{1}，无法删除Lun映射{0}",
    "arguments": [
      "String.valueOf(lunMapId)",
      "serverRsp.getDetail_err_msg()"
    ],
    "line": 1273,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "lun id is mandatory but get:%s",
    "en_US": "lun id is mandatory but get:{0}",
    "zh_CN": "Lun ID是必需的，但获取：{0}",
    "arguments": [
      "String.valueOf(lunId)"
    ],
    "line": 1279,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to delete lun %s, because of %s",
    "en_US": "fail to delete lun {0}, because of {1}",
    "zh_CN": "由于{1}，无法删除Lun{0}",
    "arguments": [
      "String.valueOf(lunId)",
      "serverRsp.getDetail_err_msg()"
    ],
    "line": 1285,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to get storage pool %s, because of %s",
    "en_US": "fail to get storage pool {0}, because of {1}",
    "zh_CN": "由于{1}，无法获取存储池{0}",
    "arguments": [
      "String.valueOf(id)",
      "storagePoolRsp.getDetail_err_msg()"
    ],
    "line": 1295,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to create snapshot for lun %s, because of %s",
    "en_US": "fail to create snapshot for lun {0}, because of {1}",
    "zh_CN": "由于{1}，无法为Lun{0}创建快照",
    "arguments": [
      "JSONObjectUtil.toJsonString(blockScsiLunVO)",
      "rsp.getDetail_err_msg()"
    ],
    "line": 1308,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to query snapshots %s, because of %s",
    "en_US": "fail to query snapshots {0}, because of {1}",
    "zh_CN": "由于{1}，无法查询快照{0}",
    "arguments": [
      "ids.toString()",
      "rsp.getDetail_err_msg()"
    ],
    "line": 1330,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "snapshot id is mandatory but get:%s",
    "en_US": "snapshot id is mandatory but get:{0}",
    "zh_CN": "快照ID是必需的，但获取：{0}",
    "arguments": [
      "String.valueOf(snapshotId)"
    ],
    "line": 1337,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to delete snapshot %s, because of %s",
    "en_US": "fail to delete snapshot {0}, because of {1}",
    "zh_CN": "由于{1}，无法删除快照{0}",
    "arguments": [
      "String.valueOf(snapshotId)",
      "rsp.getDetail_err_msg()"
    ],
    "line": 1344,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to revert snapshot:%s, because of: %s",
    "en_US": "fail to revert snapshot:{0}, because of: {1}",
    "zh_CN": "无法恢复快照：{0}，因为：{1}",
    "arguments": [
      "String.valueOf(snapshotId)",
      "serverRsp.getDetail_err_msg()"
    ],
    "line": 1355,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to check lun %s session state , because of: %s",
    "en_US": "fail to check lun {0} session state , because of: {1}",
    "zh_CN": "无法检查Lun{0}会话状态，原因是：{1}",
    "arguments": [
      "String.valueOf(lunId)",
      "getLunSessionRsp.getDetail_err_msg()"
    ],
    "line": 1364,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to get lun %s maps, because of: %s",
    "en_US": "fail to get lun {0} maps, because of: {1}",
    "zh_CN": "无法获取Lun{0}映射，因为：{1}",
    "arguments": [
      "String.valueOf(lunId)",
      "queryLunMapRsp.getDetail_err_msg()"
    ],
    "line": 1380,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "fail to get lun %s remain created lun number, because of: %s",
    "en_US": "fail to get lun {0} remain created lun number, because of: {1}",
    "zh_CN": "无法获取Lun{0}保持创建状态的Lun编号，原因是：{1}",
    "arguments": [
      "String.valueOf(lunId)",
      "lunQuantityInfoRsp.getDetail_err_msg()"
    ],
    "line": 1402,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java"
  },
  {
    "raw": "lun map id is mandatory can not be null, neither 0",
    "en_US": "lun map id is mandatory can not be null, neither 0",
    "zh_CN": "Lun映射ID是必需的，不能为空，也不能为0",
    "arguments": [],
    "line": 161,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java"
  },
  {
    "raw": "lun id is illegal",
    "en_US": "lun id is illegal",
    "zh_CN": "Lun ID非法",
    "arguments": [],
    "line": 194,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java"
  },
  {
    "raw": "XStor cluster is unhealthy, cluster info[cluster_ data_ state: %s, cluster_ healthy_ state: %s, cluster_ running_ state: %s]",
    "en_US": "XStor cluster is unhealthy, cluster info[cluster_ data_ state: {0}, cluster_ healthy_ state: {1}, cluster_ running_ state: {2}]",
    "zh_CN": "xstor群集运行不正常，群集信息[群集_数据_状态：{0}，群集_运行正常_状态：{1}，群集_运行_状态：{2}]",
    "arguments": [
      "clusterOverview.getCluster_data_state()",
      "clusterOverview.getCluster_healthy_state()",
      "clusterOverview.getCluster_running_state()"
    ],
    "line": 527,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java"
  },
  {
    "raw": "illegal lun id",
    "en_US": "illegal lun id",
    "zh_CN": "非法Lun ID",
    "arguments": [],
    "line": 555,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java"
  },
  {
    "raw": "fail to get image cache lun info",
    "en_US": "fail to get image cache lun info",
    "zh_CN": "无法获取镜像缓存Lun信息",
    "arguments": [],
    "line": 647,
    "fileName": "src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java"
  },
  {
    "raw": "host %s\u0027s heartbeat is not updated",
    "en_US": "host {0}\u0027s heartbeat is not updated",
    "zh_CN": "物理机{0}的检测信号未更新",
    "arguments": [
      "targetHostUuid"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/storage/primary/ceph/CephHostHeartbeatChecker.java"
  },
  {
    "raw": "host[uuid:%s]\u0027s heartbeat is not updated",
    "en_US": "host[uuid:{0}]\u0027s heartbeat is not updated",
    "zh_CN": "物理机[uuid：{0}]的检测信号未更新",
    "arguments": [
      "cmd.targetHostUuid"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/storage/primary/filesystem/AbstractFileSystemHostHeartbeatChecker.java"
  },
  {
    "raw": "all ceph mons of primary storage[uuid:%s] are not in Connected state",
    "en_US": "all ceph mons of primary storage[uuid:{0}] are not in Connected state",
    "zh_CN": "分布式存储[uuid:{0}]所有的监控节点都不是已连接状态",
    "arguments": [
      "vo.getUuid()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "CephPrimaryStorage[%s] not existed!",
    "en_US": "CephPrimaryStorage[{0}] not existed!",
    "zh_CN": "Ceph镜像服务器监控节点[{0}]不存在",
    "arguments": [
      "param.getPrimaryStorageUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "current license[%s] is not valid license while download from imagestore backupstorage",
    "en_US": "current license[{0}] is not valid license while download from imagestore backupstorage",
    "zh_CN": "当从ImageStore镜像服务器进行下载操作，当前证书[{0}]是无效的证书",
    "arguments": [
      "licMgr.getLicenseType().toString()"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "System can\u0027t find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),",
    "en_US": "System can\u0027t find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),",
    "zh_CN": "系统找不到镜像仓库镜像服务器。请不要设置镜像服务器IP为localhost(127.*.*.*)",
    "arguments": [],
    "line": 229,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "%s failed to download bits from the imagestore backup storage[hostname:%s, path: %s] to the local primary storage[uuid:%s, path: %s], %s",
    "en_US": "{0} failed to download bits from the imagestore backup storage[hostname:{1}, path: {2}] to the local primary storage[uuid:{3}, path: {4}], {5}",
    "zh_CN": "{0}从镜像仓库镜像服务器[hostname:{1}, path: {2}]到本地主存储[uuid:{3}, path: {4}]下载失败，{5}",
    "arguments": [
      "operationSuggestion",
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 232,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "failed to upload bits from the local storage[uuid:%s, path:%s] to image store [hostname:%s], %s",
    "en_US": "failed to upload bits from the local storage[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}",
    "zh_CN": "无法从本地存储[uuid:{0}, path:{1}]上传数据到镜像仓库[物理机名:{2}]，因为{3}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "rsp.getError()"
    ],
    "line": 293,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java"
  },
  {
    "raw": "failed to download bits from the imagestore backup storage[hostname:%s, path: %s] to the nfs primary storage[uuid:%s, path: %s], %s",
    "en_US": "failed to download bits from the imagestore backup storage[hostname:{0}, path: {1}] to the nfs primary storage[uuid:{2}, path: {3}], {4}",
    "zh_CN": "无法从ImageStore镜像服务器[hostname:{0}, path: {1}]下载数据到NFS主存储[uuid:{2}, path: {3}]，错误细节: {4}",
    "arguments": [
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 238,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "failed to upload bits from the NFS[uuid:%s, path:%s] to image store [hostname:%s], %s",
    "en_US": "failed to upload bits from the NFS[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}",
    "zh_CN": "无法从NFS主存储[uuid:{0}, path:{1}]上传数据到镜像仓库[物理机名:{2}]，因为{3}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "rsp.getError()"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java"
  },
  {
    "raw": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:%s] are disconnected",
    "en_US": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:{0}] are disconnected",
    "zh_CN": "找不到任何Connected的物理机去执行操作，看起来加载到shared mount point存储的集群上所有物理机都处于Disconnected状态",
    "arguments": [
      "this.primaryStorageUuid"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/storage/primary/imagestore/smp/KvmAgentCommandDispatcher.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because no MonIP available",
    "en_US": "failed to get primaryStorage[{0}] license info, because no MonIP available",
    "zh_CN": "无法获取PrimaryStorage[{0}]许可证信息，因为没有可用的monIP",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 52,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because no data returned",
    "en_US": "failed to get primaryStorage[{0}] license info, because no data returned",
    "zh_CN": "无法获取PrimaryStorage[{0}]许可证信息，因为未返回任何数据",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because the returned data does not have an active license",
    "en_US": "failed to get primaryStorage[{0}] license info, because the returned data does not have an active license",
    "zh_CN": "无法获取PrimaryStorage[{0}]许可证信息，因为返回的数据没有活动许可证",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 87,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "failed to get primaryStorage[%s] license info, because expired_time is null",
    "en_US": "failed to get primaryStorage[{0}] license info, because expired_time is null",
    "zh_CN": "无法获取PrimaryStorage[{0}]许可证信息，因为过期_时间为空",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "failed to parse the date format[%s] of the primaryStorage[%s] license info",
    "en_US": "failed to parse the date format[{0}] of the primaryStorage[{1}] license info",
    "zh_CN": "无法分析PrimaryStorage[{1}]许可证信息的日期格式[{0}]",
    "arguments": [
      "license.getExpired_time()",
      "primaryStorageUuid"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java"
  },
  {
    "raw": "no hosts can provide %s bytes for all volumes of the vm[uuid:%s]",
    "en_US": "no hosts can provide {0} bytes for all volumes of the vm[uuid:{1}]",
    "zh_CN": "没有物理机可以为VM[uuid：{1}]的所有卷提供{0}字节",
    "arguments": [
      "volumeSize",
      "spec.getVmInstance().getUuid()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/storage/primary/local/AllocatePrimaryStorageForVmMigrationFlow.java"
  },
  {
    "raw": "localstorage allocator failed",
    "en_US": "localstorage allocator failed",
    "zh_CN": "localstorage类型的主存储过滤失败",
    "arguments": [],
    "line": 336,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java"
  },
  {
    "raw": "invalid uri, correct example is file://$URL;hostUuid://$HOSTuuid or volume://$VOLUMEuuid ",
    "en_US": "invalid uri, correct example is file://$URL;hostUuid://$HOSTuuid or volume://$VOLUMEuuid ",
    "zh_CN": "URI无效，正确示例为file：//$URL；HOSTuuid：//$HOSTuuid或VOLUME：//$VOLUMEuuid",
    "arguments": [],
    "line": 356,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java"
  },
  {
    "raw": "To create volume on the local primary storage, you must specify the host that the volume is going to be created using the system tag [%s]",
    "en_US": "To create volume on the local primary storage, you must specify the host that the volume is going to be created using the system tag [{0}]",
    "zh_CN": "要在本地主存储上创建卷，必须使用系统标记[{0}]指定要创建卷的物理机",
    "arguments": [
      "LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()"
    ],
    "line": 369,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java"
  },
  {
    "raw": "the volume[uuid:%s] is not on any local primary storage",
    "en_US": "the volume[uuid:{0}] is not on any local primary storage",
    "zh_CN": "云盘[uuid:{0}]不在任一本地主存储上",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is already on the host[uuid:%s]",
    "en_US": "the volume[uuid:{0}] is already on the host[uuid:{1}]",
    "zh_CN": "云盘[uuid:{0}]已经在物理机[uuid:{1}]上",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getDestHostUuid()"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is not found",
    "en_US": "the primary storage[uuid:{0}] is not found",
    "zh_CN": "主存储[uuid:{0}]未找到",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 99,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the primary storage[uuid:%s] is disabled or maintenance cold migrate is not allowed",
    "en_US": "the primary storage[uuid:{0}] is disabled or maintenance cold migrate is not allowed",
    "zh_CN": "主存储[uuid:{0}]为Disabled或维护状态时不允许冷迁移",
    "arguments": [
      "ref.getPrimaryStorageUuid()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the dest host[uuid:%s] doesn\u0027t belong to the local primary storage[uuid:%s] where the volume[uuid:%s] locates",
    "en_US": "the dest host[uuid:{0}] doesn\u0027t belong to the local primary storage[uuid:{1}] where the volume[uuid:{2}] locates",
    "zh_CN": "目标物理机[uuid:{0}]不在云盘[uuid:{2}]位于的本地主存储[uuid:{1}]上",
    "arguments": [
      "msg.getDestHostUuid()",
      "ref.getPrimaryStorageUuid()",
      "msg.getVolumeUuid()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the dest host[uuid:%s] doesn\u0027t have enough physical capacity due to the threshold of primary storage[uuid:%s] is %f but available physical capacity is %d",
    "en_US": "the dest host[uuid:{0}] doesn\u0027t have enough physical capacity due to the threshold of primary storage[uuid:{1}] is {2} but available physical capacity is {3}",
    "zh_CN": "目标物理机[uuid:{0}]没有足够的物理容量，因为设置的主存储[uuid:{1}]可用阈值为{2}，但实际可用物理容量是{3}",
    "arguments": [
      "msg.getDestHostUuid()",
      "msg.getPrimaryStorageUuid()",
      "physicalThreshold",
      "refVO.getAvailablePhysicalCapacity()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is not in status of Ready, cannot migrate it",
    "en_US": "the volume[uuid:{0}] is not in status of Ready, cannot migrate it",
    "zh_CN": "云盘[uuid:{0}]的状态不是Ready，不能迁移",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm is in state of %s, please stop it before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm is in state of {2}, please stop it before migration",
    "zh_CN": "云盘[uuid:{0}]是云主机[uuid:{1}]的云盘。当前云主机的状态为{2}，请停止后再迁移",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()",
      "vmstate"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm still has %s data volumes attached, please detach them before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has {2} data volumes attached, please detach them before migration",
    "zh_CN": "云盘[uuid:{0}]是云主机[uuid:{1}]的云盘。当前云主机仍有已挂载的云盘，请卸载后再迁移",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()",
      "count"
    ],
    "line": 146,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is the root volume of the vm[uuid:%s]. Currently the vm still has ISO attached, please detach it before migration",
    "en_US": "the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has ISO attached, please detach it before migration",
    "zh_CN": "卷[uuid：{0}]是云主机[uuid：{1}]的根卷。当前云主机仍连接有ISO，请在迁移前将其分离",
    "arguments": [
      "vol.getUuid()",
      "vol.getVmInstanceUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "The two clusters[uuid:%s,uuid:%s] cannot access each other in l2 network  when migrate the vm[uuid:%s] to another cluster",
    "en_US": "The two clusters[uuid:{0},uuid:{1}] cannot access each other in l2 network  when migrate the vm[uuid:{2}] to another cluster",
    "zh_CN": "两个集群[uuid:{0},uuid:{1}]无法在二层网络中互相访问对方，当迁移云主机[uuid:{2}]从其中一个集群到另一个集群时",
    "arguments": [
      "originClusterUuid",
      "clusterUuid",
      "vol.getVmInstanceUuid()"
    ],
    "line": 176,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the data volume[uuid:%s, name: %s] is still attached to the VM[uuid:%s]. Please detach it before migration",
    "en_US": "the data volume[uuid:{0}, name: {1}] is still attached to the VM[uuid:{2}]. Please detach it before migration",
    "zh_CN": "云盘[uuid:{0}, 名称: {1}]仍然挂载在云主机[uuid:{2}]上，请在迁移前卸载",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()",
      "vol.getVmInstanceUuid()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "the url[%s] is not an absolute path starting with \u0027/\u0027",
    "en_US": "the url[{0}] is not an absolute path starting with \u0027/\u0027",
    "zh_CN": "url[{0}]不是一个以\u0027/\u0027开头的绝对路径",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java"
  },
  {
    "raw": "The primary storage[uuid:%s] is disabled cold migrate is not allowed",
    "en_US": "The primary storage[uuid:{0}] is disabled cold migrate is not allowed",
    "zh_CN": "主存储[uuid:{0}]Disabled时不允许冷迁移",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "volume[uuid:%s] is not on the local storage anymore,it may have been deleted",
    "en_US": "volume[uuid:{0}] is not on the local storage anymore,it may have been deleted",
    "zh_CN": "云盘[uuid:{0}]已经不在本地存储上，可能已经被删除",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 540,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "failed to download image[uuid:%s] to all hosts in the local storage[uuid:%s]. %s",
    "en_US": "failed to download image[uuid:{0}] to all hosts in the local storage[uuid:{1}]. {2}",
    "zh_CN": "在所有属于本地存储[uuid:{1}]的物理机上，均无法下载镜像[uuid:{0}]。{2}",
    "arguments": [
      "msg.getImage().getUuid()",
      "self.getUuid()",
      "JSONObjectUtil.toJsonString(ret.errorCodes)"
    ],
    "line": 1168,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "unable to create the data volume[uuid: %s] on a local primary storage[uuid:%s], because the hostUuid is not specified.",
    "en_US": "unable to create the data volume[uuid: {0}] on a local primary storage[uuid:{1}], because the hostUuid is not specified.",
    "zh_CN": "不能在本地主存储[uuid:{1}]上创建云盘[uuid:{0}]，因为物理机uuid没有指定",
    "arguments": [
      "msg.getVolumeUuid()",
      "self.getUuid()"
    ],
    "line": 2326,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "No Host state is Enabled, Please check the availability of the host",
    "en_US": "No Host state is Enabled, Please check the availability of the host",
    "zh_CN": "未启用物理机状态，请检查物理机的可用性",
    "arguments": [],
    "line": 2887,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "host[uuid:%s] cannot access local storage[uuid:%s], maybe it is detached",
    "en_US": "host[uuid:{0}] cannot access local storage[uuid:{1}], maybe it is detached",
    "zh_CN": "物理机[uuid：{0}]无法访问本地存储[uuid：{1}]，它可能已分离",
    "arguments": [
      "hostUuid",
      "self.getUuid()"
    ],
    "line": 3018,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "resource[uuid:%s, type: %s] is not on the local primary storage[uuid:%s]",
    "en_US": "resource[uuid:{0}, type: {1}] is not on the local primary storage[uuid:{2}]",
    "zh_CN": "资源[uuid：{0}，类型：{1}]不在本地主存储[uuid：{2}]上",
    "arguments": [
      "resUuid",
      "resourceType",
      "self.getUuid()"
    ],
    "line": 3042,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "resource[uuid:%s, type: %s] on the local primary storage[uuid:%s] maps to multiple hypervisor%s",
    "en_US": "resource[uuid:{0}, type: {1}] on the local primary storage[uuid:{2}] maps to multiple hypervisor{3}",
    "zh_CN": "本地主存储[uuid：{2}]上的资源[uuid：{0}，类型：{1}]映射到多个云主机管理程序{3}",
    "arguments": [
      "resUuid",
      "resourceType",
      "self.getUuid()",
      "ret"
    ],
    "line": 3047,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java"
  },
  {
    "raw": "There is no LocalStorage primary storage[state\u003d%s,status\u003d%s] on the cluster[%s], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters",
    "en_US": "There is no LocalStorage primary storage[state\u003d{0},status\u003d{1}] on the cluster[{2}], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters",
    "zh_CN": "在集群[{2}]里没有LocalStorage主存储[state\u003d{0},status\u003d{1}]，当集群挂载了多个主存储的时候，系统默认的是local主存储。检查主存储的状态并确定是否连接了集群",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "clusterUuid"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java"
  },
  {
    "raw": "the type of primary storage[uuid:%s] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage",
    "en_US": "the type of primary storage[uuid:{0}] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage",
    "zh_CN": "被选择的主存储[uuid:{0}]的类型不是本地存储，检查该资源能否在其他存储上被创建当集群已经挂载了本地存储",
    "arguments": [
      "psUuid"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster mounts multiple primary storage[%s(%s), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified %s",
    "en_US": "The cluster mounts multiple primary storage[{0}({1}), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified {2}",
    "zh_CN": "集群绑定了多个主存储[{0}({1}), 其他的非LocalStorage主存储]，主存储云盘未进行指定{2}",
    "arguments": [
      "requiredPrimaryStorageUuidForDataVolume.getUuid()",
      "requiredPrimaryStorageUuidForDataVolume.getType()",
      "LocalStorageConstants.LOCAL_STORAGE_TYPE"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster[uuid\u003d%s] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located",
    "en_US": "The cluster[uuid\u003d{0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located",
    "zh_CN": "集群[uuid\u003d{0}]绑定了多个主存储[LocalStorage, 其他非LocalStorage主存储]，需要检验下云盘所在的主存储",
    "arguments": [
      "spec.getDestHost().getClusterUuid()"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java"
  },
  {
    "raw": "The cluster[uuid\u003d%s] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located",
    "en_US": "The cluster[uuid\u003d{0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located",
    "zh_CN": "集群[uuid\u003d{0}]绑定了多个主存储[LocalStorage, 其他非LocalStorage主存储]，需要检验下云盘所在的主存储。",
    "arguments": [
      "spec.getDestHost().getClusterUuid()"
    ],
    "line": 132,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java"
  },
  {
    "raw": "creation rely on image cache[uuid:%s, locate host uuids: [%s]], cannot create other places.",
    "en_US": "creation rely on image cache[uuid:{0}, locate host uuids: [{1}]], cannot create other places.",
    "zh_CN": "创建依赖于镜像缓存[uuid：{0}，定位物理机uuid：[{1}]]，无法创建其他位置。",
    "arguments": [
      "imageUuid",
      "cachedHostUuids"
    ],
    "line": 404,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "local storage doesn\u0027t support live migration for hypervisor[%s]",
    "en_US": "local storage doesn\u0027t support live migration for hypervisor[{0}]",
    "zh_CN": "本地存储不支持对虚拟化类型[{0}]进行热迁移",
    "arguments": [
      "spec.getVmInventory().getHypervisorType()"
    ],
    "line": 462,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "cannot attach the data volume[uuid:%s] to the vm[uuid:%s]. Both vm\u0027s root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:%s] is on the host[uuid:%s] but the data volume[uuid: %s] is on the host[uuid: %s]",
    "en_US": "cannot attach the data volume[uuid:{0}] to the vm[uuid:{1}]. Both vm\u0027s root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:{2}] is on the host[uuid:{3}] but the data volume[uuid: {4}] is on the host[uuid: {5}]",
    "zh_CN": "不能加载云盘[uuid:{0}]到云主机[uuid:{1}]。云盘和云盘都在本地主存储上，但他们属于不同的物理机。云盘[uuid:{2}]在物理机[uuid:{3}]上，但云盘[uuid:{4}]在物理机[uuid:{5}]上",
    "arguments": [
      "volume.getUuid()",
      "vm.getUuid()",
      "vm.getRootVolumeUuid()",
      "rootHost",
      "volume.getUuid()",
      "dataHost"
    ],
    "line": 678,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "the data volume[name:%s, uuid:%s] is on the local storage[uuid:%s]; however,the host on which the data volume is has been deleted. Unable to recover this volume",
    "en_US": "the data volume[name:{0}, uuid:{1}] is on the local storage[uuid:{2}]; however,the host on which the data volume is has been deleted. Unable to recover this volume",
    "zh_CN": "云盘[name:{0}, uuid:{1}]在本地存储[uuid:{2}]上；然而物理机内的云盘已经被删除了",
    "arguments": [
      "vol.getName()",
      "vol.getUuid()",
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 896,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to recover the vm[uuid:%s, name:%s]. The vm\u0027s root volume is on the local storage[uuid:%s]; however, the host on which the root volume is has been deleted",
    "en_US": "unable to recover the vm[uuid:{0}, name:{1}]. The vm\u0027s root volume is on the local storage[uuid:{2}]; however, the host on which the root volume is has been deleted",
    "zh_CN": "不能恢复云主机[uuid:{0}, name:{1}]。云主机的云盘在本地存储[uuid:{2}]上；然而物理机内的云盘已经被删除了",
    "arguments": [
      "vm.getUuid()",
      "vm.getName()",
      "psuuid"
    ],
    "line": 938,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with data volumes on local storage. Need detach all data volumes first.",
    "en_US": "unable to live migrate vm[uuid:{0}] with data volumes on local storage. Need detach all data volumes first.",
    "zh_CN": "无法在本地存储上热迁移挂载了云盘的云主机[uuid:{0}]。需要先手动卸载所有云盘",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 972,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with local storage. Only linux guest is supported. Current platform is [%s]",
    "en_US": "unable to live migrate vm[uuid:{0}] with local storage. Only linux guest is supported. Current platform is [{1}]",
    "zh_CN": "无法在本地存储上热迁移云主机[uuid:{0}]。只有Linux类型的云主机支持该操作。当前类型为: [{1}]",
    "arguments": [
      "vm.getUuid()",
      "vm.getPlatform()"
    ],
    "line": 977,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "unable to live migrate vm[uuid:%s] with ISO on local storage. Need detach all ISO first.",
    "en_US": "unable to live migrate vm[uuid:{0}] with ISO on local storage. Need detach all ISO first.",
    "zh_CN": "无法在本地存储上实时迁移带有ISO的VM[uuid：{0}]。需要先分离所有ISO。",
    "arguments": [
      "vm.getUuid()"
    ],
    "line": 982,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [%s]",
    "en_US": "To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [{0}]",
    "zh_CN": "要在本地主存储上创建云盘，必须用系统标签[{0}]指定创建云盘的物理机",
    "arguments": [
      "LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()"
    ],
    "line": 1058,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "the host[uuid:%s] doesn\u0027t belong to the local primary storage[uuid:%s]",
    "en_US": "the host[uuid:{0}] doesn\u0027t belong to the local primary storage[uuid:{1}]",
    "zh_CN": "物理机[uuid:{0}] 不属于本地主存储[uuid:{1}]",
    "arguments": [
      "hostUuid",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 1068,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java"
  },
  {
    "raw": "root image has been deleted, cannot reimage now",
    "en_US": "root image has been deleted, cannot reimage now",
    "zh_CN": "系统镜像已经被删除，无法重制云主机",
    "arguments": [],
    "line": 2083,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java"
  },
  {
    "raw": "cannot find flag file [%s] on host [%s], it might not mount correct path",
    "en_US": "cannot find flag file [{0}] on host [{1}], it might not mount correct path",
    "zh_CN": "在物理机[{1}]上找不到标记文件[{0}]，可能是装载路径不正确",
    "arguments": [
      "makeInitializedFilePath()",
      "hostUuid"
    ],
    "line": 3676,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java"
  },
  {
    "raw": "cannot find flag file [%s] on host [%s], because: %s",
    "en_US": "cannot find flag file [{0}] on host [{1}], because: {2}",
    "zh_CN": "找不到标记文件[{0}]（在物理机[{1}]上），因为：{2}",
    "arguments": [
      "makeInitializedFilePath()",
      "hostUuid",
      "errorCode.getCause().getDetails()"
    ],
    "line": 3684,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java"
  },
  {
    "raw": "cannot create flag file [%s] on host [%s], because: %s",
    "en_US": "cannot create flag file [{0}] on host [{1}], because: {2}",
    "zh_CN": "无法在物理机[{1}]上创建标志文件[{0}]，因为：{2}",
    "arguments": [
      "makeInitializedFilePath()",
      "hostUuid",
      "errorCode.getCause().getDetails()"
    ],
    "line": 3705,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java"
  },
  {
    "raw": "unable to create an empty volume[uuid:%s, name:%s] on the kvm host[uuid:%s]",
    "en_US": "unable to create an empty volume[uuid:{0}, name:{1}] on the kvm host[uuid:{2}]",
    "zh_CN": "不能在物理机[uuid:{2}]上创建空云盘[uuid:{0}, name:{1}]",
    "arguments": [
      "p.volume.getUuid()",
      "p.volume.getName()",
      "dstHostUuid"
    ],
    "line": 1192,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmMigrateVmFlow.java"
  },
  {
    "raw": "failed to download bits from the SFTP backup storage[hostname:%s, path: %s] to the local primary storage[uuid:%s, path: %s], %s",
    "en_US": "failed to download bits from the SFTP backup storage[hostname:{0}, path: {1}] to the local primary storage[uuid:{2}, path: {3}], {4}",
    "zh_CN": "从SFTP镜像服务器[hostname:{0}, path: {1}] 下载到本地存储[uuid:{2}, path: {3}]失败，{4}",
    "arguments": [
      "greply.getHostname()",
      "backupStorageInstallPath",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 204,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java"
  },
  {
    "raw": "failed to upload bits from the local storage[uuid:%s, path:%s] to the SFTP backup storage[hostname:%s, path:%s], %s",
    "en_US": "failed to upload bits from the local storage[uuid:{0}, path:{1}] to the SFTP backup storage[hostname:{2}, path:{3}], {4}",
    "zh_CN": "从本地存储[uuid:{0}, path: {1}]上传到SFTP镜像服务器[hostname:{2}, path:{3}]失败, {4}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "r.getHostname()",
      "backupStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java"
  },
  {
    "raw": "no local primary storage can satisfy conditions[state: %s, status: %s] or contain hosts satisfying conditions[state: %s, status: %s, size \u003e %s bytes]",
    "en_US": "no local primary storage can satisfy conditions[state: {0}, status: {1}] or contain hosts satisfying conditions[state: {2}, status: {3}, size \u003e {4} bytes]",
    "zh_CN": "本地主存储不能满足条件[状态：{0}，状态：{1}]或包含满足条件[状态：{2}，状态：{3}，大小\u003e{4}字节]的物理机",
    "arguments": [
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "no local primary storage in zone[uuid:%s] can satisfy conditions[state: %s, status: %s] or contain hosts satisfying conditions[state: %s, status: %s, size \u003e %s bytes]",
    "en_US": "no local primary storage in zone[uuid:{0}] can satisfy conditions[state: {1}, status: {2}] or contain hosts satisfying conditions[state: {3}, status: {4}, size \u003e {5} bytes]",
    "zh_CN": "区域[uuid：{0}]中的本地主存储不能满足条件[状态：{1}，状态：{2}]，也不包含满足条件[状态：{3}，状态：[4}，大小\u003e{5}字节]的物理机",
    "arguments": [
      "spec.getRequiredZoneUuid()",
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "the required host[uuid:%s] cannot satisfy conditions[state: %s, status: %s, size \u003e %s bytes], or doesn\u0027t belong to a local primary storage satisfying conditions[state: %s, status: %s], or its cluster doesn\u0027t attach to any local primary storage",
    "en_US": "the required host[uuid:{0}] cannot satisfy conditions[state: {1}, status: {2}, size \u003e {3} bytes], or doesn\u0027t belong to a local primary storage satisfying conditions[state: {4}, status: {5}], or its cluster doesn\u0027t attach to any local primary storage",
    "zh_CN": "所需的物理机[uuid：{0}]无法满足条件[状态：{1}，状态：{2}，大小\u003e{3}字节]，或者不属于满足条件[状态：{4}，状态：{5}]的本地主存储，或者其群集未连接到任何本地主存储",
    "arguments": [
      "spec.getRequiredHostUuid()",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()",
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "required local primary storage[uuid:%s] cannot satisfy conditions[state: %s, status: %s], or hosts providing the primary storage don\u0027t satisfy conditions[state: %s, status: %s, size \u003e %s bytes]",
    "en_US": "required local primary storage[uuid:{0}] cannot satisfy conditions[state: {1}, status: {2}], or hosts providing the primary storage don\u0027t satisfy conditions[state: {3}, status: {4}, size \u003e {5} bytes]",
    "zh_CN": "所需的本地主存储[uuid：{0}]无法满足条件[状态：{1}，状态：{2}]，或者提供主存储的物理机不满足条件[状态：{3}，状态：[4}，大小\u003e{5}字节]",
    "arguments": [
      "spec.getRequiredPrimaryStorageUuid()",
      "PrimaryStorageState.Enabled",
      "PrimaryStorageStatus.Connected",
      "HostState.Enabled",
      "HostStatus.Connected",
      "spec.getSize()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "{the physical capacity usage of the host[uuid:%s] has exceeded the threshold[%s]}",
    "en_US": "{the physical capacity usage of the host[uuid:{0}] has exceeded the threshold[{1}]}",
    "zh_CN": "{物理机[uuid：{0}]的物理容量使用率已超过阈值[{1}]}",
    "arguments": [
      "ref.getHostUuid()",
      "physicalCapacityMgr.getRatio(ref.getPrimaryStorageUuid())"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "failed allocate localstorage",
    "en_US": "failed allocate localstorage",
    "zh_CN": "分配localStorage失败",
    "arguments": [],
    "line": 207,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java"
  },
  {
    "raw": "Resource[uuid:%s] can only be operated on host[uuid:%s], but the host has been deleted",
    "en_US": "Resource[uuid:{0}] can only be operated on host[uuid:{1}], but the host has been deleted",
    "zh_CN": "资源[uuid:{0}]只能在物理机[uuid:{0}]上对其操作，但是该物理机已经被删除了",
    "arguments": [
      "resUuid",
      "uuid"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java"
  },
  {
    "raw": "cannot find any host which has resource[uuid:%s]",
    "en_US": "cannot find any host which has resource[uuid:{0}]",
    "zh_CN": "找不到任何拥有资源[uuid:{0}]的物理机",
    "arguments": [
      "resUuid"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java"
  },
  {
    "raw": "host[uuid: %s] of local primary storage[uuid: %s] doesn\u0027t have enough capacity[current: %s bytes, needed: %s]",
    "en_US": "host[uuid: {0}] of local primary storage[uuid: {1}] doesn\u0027t have enough capacity[current: {2} bytes, needed: {3}]",
    "zh_CN": "主存储[uuid:{1}]上的物理机[uuid:{0}]没有足够的容量[现在: {2} bytes, 需要: {3}]",
    "arguments": [
      "hostUuid",
      "self.getUuid()",
      "ref.getAvailableCapacity()",
      "size"
    ],
    "line": 135,
    "fileName": "src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java"
  },
  {
    "raw": "Invalid resourceUuid %s",
    "en_US": "Invalid resourceUuid {0}",
    "zh_CN": "资源uuid{0}无效",
    "arguments": [
      "msg.getResourceUuid()"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java"
  },
  {
    "raw": "primary storage uuid cannot be null.",
    "en_US": "primary storage uuid cannot be null.",
    "zh_CN": "主存储uuid不能为空。",
    "arguments": [],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] has been attached some VM(s)[uuid:%s] which are not Stopped and not running on the specific host.",
    "en_US": "volume[uuid:{0}] has been attached some VM(s)[uuid:{1}] which are not Stopped and not running on the specific host.",
    "zh_CN": "卷[uuid：{0}]已连接到某些未停止且未在特定物理机上运行的云主机[uuid：{1}]。",
    "arguments": [
      "volume.getUuid()",
      "runningVmUuids.toString()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java"
  },
  {
    "raw": "VM[uuid:%s] are not Stopped and not running on the specific host.",
    "en_US": "VM[uuid:{0}] are not Stopped and not running on the specific host.",
    "zh_CN": "云主机[uuid：{0}]未停止，也未在特定物理机上运行。",
    "arguments": [
      "msg.getResourceUuid()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java"
  },
  {
    "raw": "Fail to %s, because host(s)[uuid:%s] are not enable and not in connected status.",
    "en_US": "Fail to {0}, because host(s)[uuid:{1}] are not enable and not in connected status.",
    "zh_CN": "{0}失败，因为物理机[uuid：{1}]未启用且未处于连接状态。",
    "arguments": [
      "task",
      "hostUuids"
    ],
    "line": 191,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java"
  },
  {
    "raw": "cannot reserve enough space for primary storage[uuid: %s] on host[uuid: %s], not enough physical capacity",
    "en_US": "cannot reserve enough space for primary storage[uuid: {0}] on host[uuid: {1}], not enough physical capacity",
    "zh_CN": "无法为物理机[uuid：{1}]上的主存储[uuid：{0}]保留足够的空间，物理容量不足",
    "arguments": [
      "self.getUuid()",
      "hostUuid"
    ],
    "line": 1549,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "not supported",
    "en_US": "not supported",
    "zh_CN": "不支持",
    "arguments": [],
    "line": 1449,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "ResourceType [%s] of APIRecoverResourceSplitBrainMsg is invalid.",
    "en_US": "ResourceType [{0}] of APIRecoverResourceSplitBrainMsg is invalid.",
    "zh_CN": "ApiRecoverResourceSplitBrainMsg的ResourceType[{0}]无效。",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 216,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "the mini storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the mini storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "小型存储[uuid：{0}，名称：{1}]在连接的群集中找不到任何可用于实例化卷的物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 360,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "can not determine which host",
    "en_US": "can not determine which host",
    "zh_CN": "无法确定是哪个物理机",
    "arguments": [],
    "line": 673,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "no connected host found, mini storage failed",
    "en_US": "no connected host found, mini storage failed",
    "zh_CN": "未找到连接的物理机，小型存储失败",
    "arguments": [],
    "line": 1364,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "host[uuid: %s] of mini primary storage[uuid: %s] doesn\u0027t have enough capacity[current: %s bytes, needed: %s]",
    "en_US": "host[uuid: {0}] of mini primary storage[uuid: {1}] doesn\u0027t have enough capacity[current: {2} bytes, needed: {3}]",
    "zh_CN": "物理机[uuid：{0}]（属于小型主存储[uuid：{1}]）的容量不足[当前：{2}字节，需要：{3}]",
    "arguments": [
      "hostUuid",
      "self.getUuid()",
      "ref.getAvailableCapacity()",
      "size"
    ],
    "line": 1563,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java"
  },
  {
    "raw": "the host[uuid:%s] is not connected",
    "en_US": "the host[uuid:{0}] is not connected",
    "zh_CN": "物理机[uuid:{0}]不是Connected状态",
    "arguments": [
      "hostUuid"
    ],
    "line": 75,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageDeactivateVolumeGC.java"
  },
  {
    "raw": "no LocalStorageBackupStorageMediator supporting hypervisor[%s] and backup storage type[%s] ",
    "en_US": "no LocalStorageBackupStorageMediator supporting hypervisor[{0}] and backup storage type[{1}] ",
    "zh_CN": "没有LocalStorageBackupStorageMediator支持hypervisor[{0}]和镜像服务器类型[{1}]",
    "arguments": [
      "hvType",
      "bsType"
    ],
    "line": 173,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageFactory.java"
  },
  {
    "raw": "no backup storage can get image[uuid:%s] of volume[uuid:%s]",
    "en_US": "no backup storage can get image[uuid:{0}] of volume[uuid:{1}]",
    "zh_CN": "没有备份存储可以获取镜像[uuid：{0}]（属于卷[uuid：{1}]）",
    "arguments": [
      "volume.getRootImageUuid()",
      "volume.getUuid()"
    ],
    "line": 332,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java"
  },
  {
    "raw": "image[uuid: %s] has no image ref with backup storage[uuid: %s]",
    "en_US": "image[uuid: {0}] has no image ref with backup storage[uuid: {1}]",
    "zh_CN": "镜像[uuid：{0}]没有备份存储[uuid：{1}]的镜像引用",
    "arguments": [
      "image.getUuid()",
      "cache.backupStorage.getUuid()"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java"
  },
  {
    "raw": "can not find any available host to resize volume[uuid: %s] on mini storage[uuid: %s]",
    "en_US": "can not find any available host to resize volume[uuid: {0}] on mini storage[uuid: {1}]",
    "zh_CN": "找不到任何可用于调整小型存储[uuid：{1}]上卷[uuid：{0}]大小的物理机",
    "arguments": [
      "volume.getUuid()",
      "volume.getPrimaryStorageUuid()"
    ],
    "line": 832,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java"
  },
  {
    "raw": "volume[uuid:%s] replication is syncing data, please wait until it is finished.",
    "en_US": "volume[uuid:{0}] replication is syncing data, please wait until it is finished.",
    "zh_CN": "卷[uuid：{0}]复制正在同步数据，请等待其完成。",
    "arguments": [
      "volumeUuid"
    ],
    "line": 925,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java"
  },
  {
    "raw": "replication network status of volume[uuid:%s] run into StandAlone, but host are all Connected, please recover it first.",
    "en_US": "replication network status of volume[uuid:{0}] run into StandAlone, but host are all Connected, please recover it first.",
    "zh_CN": "卷[uuid：{0}]的复制网络状态变为独立运行，但物理机均已连接，请先将其恢复。",
    "arguments": [
      "volumeUuid"
    ],
    "line": 938,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java"
  },
  {
    "raw": "Invalid path string %s",
    "en_US": "Invalid path string {0}",
    "zh_CN": "路径字符串{0}无效",
    "arguments": [
      "dir"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java"
  },
  {
    "raw": "Still cache volume exists on ps[uuid:%s] can not update cache volume url",
    "en_US": "Still cache volume exists on ps[uuid:{0}] can not update cache volume url",
    "zh_CN": "PS[uuid：{0}]上仍然存在缓存卷，无法更新缓存卷URL",
    "arguments": [
      "resourceUuid"
    ],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java"
  },
  {
    "raw": "can not find replication of volume %s on host %s",
    "en_US": "can not find replication of volume {0} on host {1}",
    "zh_CN": "在物理机{1}上找不到卷{0}的复制",
    "arguments": [
      "resourceUuid",
      "hostUuid"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePathManagerImpl.java"
  },
  {
    "raw": "required cluster %s not attached to primary storage %s for volume %s create",
    "en_US": "required cluster {0} not attached to primary storage {1} for volume {2} create",
    "zh_CN": "创建卷{2}所需的群集{0}未连接到主存储{1}",
    "arguments": [
      "clusterUuid",
      "msg.getPrimaryStorageUuid()",
      "volume.getUuid()"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "can not find avaliable host on required cluster %s for volume %s create",
    "en_US": "can not find avaliable host on required cluster {0} for volume {1} create",
    "zh_CN": "在创建卷{1}所需的群集{0}上找不到可用物理机",
    "arguments": [
      "clusterUuid",
      "volume.getUuid()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "cannot find an available host to execute command for primary storage[uuid: %s]",
    "en_US": "cannot find an available host to execute command for primary storage[uuid: {0}]",
    "zh_CN": "找不到可用于执行主存储[uuid：{0}]命令的物理机",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 445,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "can not allocate storage sync port on host %s: %s",
    "en_US": "can not allocate storage sync port on host {0}: {1}",
    "zh_CN": "无法在物理机{0}上分配存储同步端口：{1}",
    "arguments": [
      "hostUuid"
    ],
    "line": 476,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "expect operate on hosts[%s] but only host %s are connected and enabled",
    "en_US": "expect operate on hosts[{0}] but only host {1} are connected and enabled",
    "zh_CN": "预期在物理机[{0}]上运行，但只有物理机{1}已连接并启用",
    "arguments": [
      "hostUuids",
      "finalHostUuids"
    ],
    "line": 622,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java"
  },
  {
    "raw": "mini storage[uuid:%s] has to be empty before restoring bits from zbox. please clean it up.",
    "en_US": "mini storage[uuid:{0}] has to be empty before restoring bits from zbox. please clean it up.",
    "zh_CN": "从ZBox还原位之前，小型存储[uuid：{0}]必须为空。请把它清理干净。",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/storage/primary/ministorage/MiniToZBoxBackupStorageMediator.java"
  },
  {
    "raw": "there has been a nfs primary storage having url as %s in zone[uuid:%s]",
    "en_US": "there has been a nfs primary storage having url as {0} in zone[uuid:{1}]",
    "zh_CN": "区域[uuid:{1}]内已经存在 url 为 {0} 的 NFS 主存储",
    "arguments": [
      "url",
      "zoneUuid"
    ],
    "line": 46,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "found multiple CIDR",
    "en_US": "found multiple CIDR",
    "zh_CN": "返现多个CIDR",
    "arguments": [],
    "line": 65,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "invalid CIDR: %s",
    "en_US": "invalid CIDR: {0}",
    "zh_CN": "无效CIDR: {0}",
    "arguments": [
      "cidr"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "IP address[%s] is not in CIDR[%s]",
    "en_US": "IP address[{0}] is not in CIDR[{1}]",
    "zh_CN": "IP地址[{0}]没有在CIDR[{1}]内",
    "arguments": [
      "ipAddr",
      "cidr"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "there are %s running VMs on the NFS primary storage, please stop them and try again:\\n%s\\n",
    "en_US": "there are {0} running VMs on the NFS primary storage, please stop them and try again:\\n{1}\\n",
    "zh_CN": "在NFS主存储上有{0}个运行中的VM，请先手动关闭再尝试: \\n{1}\\n",
    "arguments": [
      "vms.size()",
      "StringUtils.join(vms, \"\\n\")"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running, Paused or Stopped, current state is %s",
    "en_US": "vm[uuid:{0}] is not Running, Paused or Stopped, current state is {1}",
    "zh_CN": "云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是{1}",
    "arguments": [
      "vol.getVmInstanceUuid()",
      "state"
    ],
    "line": 694,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "cannot find usable backend",
    "en_US": "cannot find usable backend",
    "zh_CN": "无法找到可用的NFS主存储后端",
    "arguments": [],
    "line": 303,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no usable backend found",
    "en_US": "no usable backend found",
    "zh_CN": "无法找到可用的NFS主存储后端",
    "arguments": [],
    "line": 362,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no host in Connected status to which nfs primary storage[uuid:%s, name:%s] attached found to revert volume[uuid:%s] to snapshot[uuid:%s, name:%s]",
    "en_US": "no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to snapshot[uuid:{3}, name:{4}]",
    "zh_CN": "没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到快照[uuid:{3}, name:{4}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getSnapshot().getUuid()",
      "msg.getSnapshot().getName()"
    ],
    "line": 520,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "no host in Connected status to which nfs primary storage[uuid:%s, name:%s] attached found to revert volume[uuid:%s] to image[uuid:%s]",
    "en_US": "no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to image[uuid:{3}]",
    "zh_CN": "没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到镜像[uuid:{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getVolume().getRootImageUuid()"
    ],
    "line": 551,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "primary storage[uuid:%s] doesn\u0027t attach to any cluster",
    "en_US": "primary storage[uuid:{0}] doesn\u0027t attach to any cluster",
    "zh_CN": "主存储[uuid:{0}]没有挂载到任何集群",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 737,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] cannot find any usable host to create the data volume[uuid:%s, name:%s]",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] cannot find any usable host to create the data volume[uuid:{2}, name:{3}]",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}]无法找到任何可用的物理机以创建云盘[uuid:{2}, name:{3}]",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "msg.getVolume().getUuid()",
      "msg.getVolume().getName()"
    ],
    "line": 968,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] cannot find hosts in attached clusters to perform the operation",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] cannot find hosts in attached clusters to perform the operation",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}]不能找到物理机挂载到集群，执行此操作",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1889,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the NFS primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "NFS主存储[uuid:{0}, name:{1}] 没有挂载到任何一个集群，或者挂载到集群的物理机均无法连接",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1726,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java"
  },
  {
    "raw": "the NFS primary storage[uuid:%s] is not attached to any clusters, and cannot expunge the root volume[uuid:%s] of the VM[uuid:%s]",
    "en_US": "the NFS primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]",
    "zh_CN": "NFS主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除VM[uuid:{2}]的云盘[uuid:{1}]",
    "arguments": [
      "psUuid",
      "vmUuid",
      "volumeUuid"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a Connected host to execute command for nfs primary storage[uuid:%s]",
    "en_US": "cannot find a Connected host to execute command for nfs primary storage[uuid:{0}]",
    "zh_CN": "对nfs主存储[uuid:{0}]来说不能发现一个可连接的物理机执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 281,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a connected host in cluster which ps [uuid: %s] attached",
    "en_US": "cannot find a connected host in cluster which ps [uuid: {0}] attached",
    "zh_CN": "在PS[uuid：{0}]连接的集群中找不到已连接的物理机",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:%s]",
    "en_US": "cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:{0}]",
    "zh_CN": "找不到一个和NFS主存储[uuid:{0}]处于已连接状态的物理机为其执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 300,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot get root image of volume[uuid:%s], may be it create from iso",
    "en_US": "cannot get root image of volume[uuid:{0}], may be it create from iso",
    "zh_CN": "无法获取卷[uuid：{0}]的根镜像，它可能是从ISO创建的",
    "arguments": [
      "msg.getVolume().getUuid()"
    ],
    "line": 804,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to attach a primary storage[uuid:%s, name:%s] to cluster[uuid:%s]. Kvm host in the cluster has qemu-img with version[%s]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[%s]. qemu-img version greater than %s is incompatible with versions less than %s, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "en_US": "unable to attach a primary storage[uuid:{0}, name:{1}] to cluster[uuid:{2}]. Kvm host in the cluster has qemu-img with version[{3}]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch",
    "zh_CN": "不能挂载主存储[uuid:{0}, name:{1}]到集群[uuid:{2}].集群中的物理机存在[{3}]版本qemu-img；但是主存储已经挂载到另一个物理机拥有[{4}]版本qemu-img的集群。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群",
    "arguments": [
      "inv.getUuid()",
      "inv.getName()",
      "clusterUuid",
      "versionInCluster",
      "otherVersion",
      "QCOW3_QEMU_IMG_VERSION",
      "QCOW3_QEMU_IMG_VERSION"
    ],
    "line": 248,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to create folder[installUrl:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "unable to create folder[installUrl:{0}] on kvm host[uuid:{1}, ip:{2}], because {3}",
    "zh_CN": "无法在KVM物理机[uuid：{1}，IP：{2}]上创建文件夹[InstallUrl：{0}]，原因是{3}",
    "arguments": [
      "cmd.getInstallUrl()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 323,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "no host in is Connected or primary storage[uuid:%s] attach no cluster",
    "en_US": "no host in is Connected or primary storage[uuid:{0}] attach no cluster",
    "zh_CN": "没有物理机处于Connected状态，或主存储[uuid:{0}]没有挂载到任何集群",
    "arguments": [
      "inv.getUuid()"
    ],
    "line": 401,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to ping nfs primary storage[uuid:%s] from host[uuid:%s],because %s. disconnect this host-ps connection",
    "en_US": "failed to ping nfs primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection",
    "zh_CN": "从物理机[uuid:{1}]Ping NFS主存储[uuid:{0}]失败，原因: {2}。断开该 物理机-主存储 连接",
    "arguments": [
      "psInv.getUuid()",
      "huuid",
      "reply.isSuccess() ? rsp.getError() : reply.getError()"
    ],
    "line": 440,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "The chosen host[uuid:%s] to perform storage migration is lost",
    "en_US": "The chosen host[uuid:{0}] to perform storage migration is lost",
    "zh_CN": "准备存储迁移的物理机[uuid:{0}]失联了",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 879,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to check existence of %s on nfs primary storage[uuid:%s], %s",
    "en_US": "failed to check existence of {0} on nfs primary storage[uuid:{1}], {2}",
    "zh_CN": "检查nfs主存储中是否存在{0}失败",
    "arguments": [
      "installPath",
      "inv.getUuid()",
      "rsp.getError()"
    ],
    "line": 1017,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "unable to create empty volume[uuid:%s,  name:%s] on kvm host[uuid:%s, ip:%s], because %s",
    "en_US": "unable to create empty volume[uuid:{0},  name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}",
    "zh_CN": "不能在物理机[uuid:{2}, ip:{3}]上创建空云盘[uuid:{0},  name:{1}]，因为{4}",
    "arguments": [
      "volume.getUuid()",
      "volume.getName()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 1131,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to delete bits[%s] on nfs primary storage[uuid:%s], %s, will clean up installPath, pinv.getUuid(), rsp.getError()",
    "en_US": "failed to delete bits[{0}] on nfs primary storage[uuid:{1}], {2}, will clean up installPath, pinv.getUuid(), rsp.getError()",
    "zh_CN": "无法删除NFS主存储[uuid：{1}]上的位[{0}]，{2}，将清除InstallPath、PINV.Getuuid（）、RSP.GetError（）",
    "arguments": [
      "installPath",
      "pinv.getUuid()",
      "rsp.getError()"
    ],
    "line": 1240,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to revert volume[uuid:%s] to snapshot[uuid:%s] on kvm host[uuid:%s, ip:%s], %s",
    "en_US": "failed to revert volume[uuid:{0}] to snapshot[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}",
    "zh_CN": "回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到快照[uuid:{1}]的状态失败，{4}",
    "arguments": [
      "vol.getUuid()",
      "sinv.getUuid()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 1302,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to revert volume[uuid:%s] to image[uuid:%s] on kvm host[uuid:%s, ip:%s], %s",
    "en_US": "failed to revert volume[uuid:{0}] to image[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}",
    "zh_CN": "回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到镜像[uuid:{1}]，{4}",
    "arguments": [
      "vol.getUuid()",
      "vol.getRootImageUuid()",
      "host.getUuid()",
      "host.getManagementIp()",
      "rsp.getError()"
    ],
    "line": 1339,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "fails to create root volume[uuid:%s] from cached image[path:%s] because %s",
    "en_US": "fails to create root volume[uuid:{0}] from cached image[path:{1}] because {2}",
    "zh_CN": "从镜像[path:{1}]创建云盘失败，因为{2}",
    "arguments": [
      "volume.getUuid()",
      "imageCache.getImageUuid()",
      "rsp.getError()"
    ],
    "line": 1383,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "no hosts in the cluster[uuid:%s] are connected",
    "en_US": "no hosts in the cluster[uuid:{0}] are connected",
    "zh_CN": "集群[uuid：{0}]中没有连接任何物理机",
    "arguments": [
      "clusterUuid"
    ],
    "line": 1541,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java"
  },
  {
    "raw": "failed to download[%s] from SftpBackupStorage[hostname:%s] to nfs primary storage[uuid:%s, path:%s], %s",
    "en_US": "failed to download[{0}] from SftpBackupStorage[hostname:{1}] to nfs primary storage[uuid:{2}, path:{3}], {4}",
    "zh_CN": "从Sftp镜像服务器[hostname:{1}] 下载[{0}]到nfs主存储[uuid:{2}, path:{3}]失败，{4}",
    "arguments": [
      "backupStorageInstallPath",
      "greply.getHostname()",
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java"
  },
  {
    "raw": "failed to upload bits from nfs primary storage[uuid:%s, path:%s] to SFTP backup storage[hostname:%s, path: %s], %s",
    "en_US": "failed to upload bits from nfs primary storage[uuid:{0}, path:{1}] to SFTP backup storage[hostname:{2}, path: {3}], {4}",
    "zh_CN": "从nfs主存储[uuid:{0}, path:{1}]上传数据到STFP镜像服务器[hostname:{2}, path: {3}]失败，{4}",
    "arguments": [
      "pinv.getUuid()",
      "primaryStorageInstallPath",
      "hostname",
      "backupStorageInstallPath",
      "rsp.getError()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java"
  },
  {
    "raw": "shareblock says host %s is offline on %s",
    "en_US": "shareblock says host {0} is offline on {1}",
    "zh_CN": "ShareBlock显示物理机{0}在{1}上处于脱机状态",
    "arguments": [
      "cmd.hostUuid",
      "sentinelHostUuid"
    ],
    "line": 135,
    "fileName": "src/main/java/org/zstack/storage/primary/shareblock/ShareBlockHostHeartbeatChecker.java"
  },
  {
    "raw": "sanlock says host %s is offline on %s",
    "en_US": "sanlock says host {0} is offline on {1}",
    "zh_CN": "SANlock指出物理机{0}在{1}上处于脱机状态",
    "arguments": [
      "cmd.hostIds",
      "sentinelHostUuid"
    ],
    "line": 141,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/HaSanlockHostChecker.java"
  },
  {
    "raw": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared block group storage[uuid:%s] are disconnected",
    "en_US": "cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared block group storage[uuid:{0}] are disconnected",
    "zh_CN": "找不到任何可以执行操作的已连接状态的物理机，所有的共享存储[uuid:{0}]挂载的集群下的物理机都处于已失联状态",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java"
  },
  {
    "raw": "can not find volume need to operate shared block group primary storage",
    "en_US": "can not find volume need to operate shared block group primary storage",
    "zh_CN": "找不到能进行共享块存储操作的云盘",
    "arguments": [],
    "line": 80,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java"
  },
  {
    "raw": "KVM host which volume[uuid%s] attached disconnected with the shared block group storage[uuid:%s]",
    "en_US": "KVM host which volume[uuid{0}] attached disconnected with the shared block group storage[uuid:{1}]",
    "zh_CN": "云盘[uuid:{0}]所处的挂载了共享块存储[uuid:{1}]物理机均处于已失联状态",
    "arguments": [
      "volumeInventory.getUuid()",
      "primaryStorageUuid"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java"
  },
  {
    "raw": "can not find qualified kvm host for shared block group primary storage[uuid: %s]",
    "en_US": "can not find qualified kvm host for shared block group primary storage[uuid: {0}]",
    "zh_CN": "无法找到满足条件的物理机来对共享块存储[uuid: {0}]进行操作",
    "arguments": [
      "psUuid"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java"
  },
  {
    "raw": "primary storage[uuid: %s] has attached the scsi lun[wwid: %s]",
    "en_US": "primary storage[uuid: {0}] has attached the scsi lun[wwid: {1}]",
    "zh_CN": "主存储[uuid：{0}]已连接SCSI Lun[WWID：{1}]",
    "arguments": [
      "sharedBlockVO.getSharedBlockGroupUuid()",
      "scsiLunVO.getWwid()"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid: %s] does not has additional qmp socket, it may because of the vm start without the global config[vm.additionalQmp] enabled, please make sure it enabled and reboot vm in zstack",
    "en_US": "the vm[uuid: {0}] does not has additional qmp socket, it may because of the vm start without the global config[vm.additionalQmp] enabled, please make sure it enabled and reboot vm in zstack",
    "zh_CN": "VM[uuid：{0}]没有其他QMP套接字，这可能是因为VM在未启用全局配置[VM.AdditionalQMP]的情况下启动，请确保其已启用并在ZStack中重新启动VM",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 105,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "must specify at least one disk when add shared block group primary storage",
    "en_US": "must specify at least one disk when add shared block group primary storage",
    "zh_CN": "添加共享块存储时必须指定至少一个云盘",
    "arguments": [],
    "line": 130,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "shared block[uuid:%s, diskUuid:%s, description:%s] already added to shared block group[uuid:%s]in new shared block group",
    "en_US": "shared block[uuid:{0}, diskUuid:{1}, description:{2}] already added to shared block group[uuid:{3}]in new shared block group",
    "zh_CN": "共享块[uuid:{0}, diskUuid:{1}, 描述:{2}]，已经添加到共享块组[uuid:{3}]",
    "arguments": [
      "vo.getUuid()",
      "vo.getDiskUuid()",
      "vo.getDescription()",
      "vo.getSharedBlockGroupUuid()"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "shared volume[uuid: %s] on shared block group primary storage can not resize",
    "en_US": "shared volume[uuid: {0}] on shared block group primary storage can not resize",
    "zh_CN": "SharedBlock主存储上的共享云盘[uuid: {0}]暂时不支持扩容",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "shared volume[uuid: %s] on shared block group primary storage has attached to not stopped vm instances[uuids: %s]",
    "en_US": "shared volume[uuid: {0}] on shared block group primary storage has attached to not stopped vm instances[uuids: {1}]",
    "zh_CN": "SharedBlock存储上的共享云盘[uuid: {0}]加载到了不是停止状态的云主机[uuid: {1}]，请先从云主机卸载或将云主机停止",
    "arguments": [
      "volumeUuid",
      "notStoppedVmUuids"
    ],
    "line": 234,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java"
  },
  {
    "raw": "cannot find proper hypervisorType for primary storage[uuid:%s] to handle image format or volume format[%s]",
    "en_US": "cannot find proper hypervisorType for primary storage[uuid:{0}] to handle image format or volume format[{1}]",
    "zh_CN": "对主存储[uuid:{0}]来说不能发现合适的管理程序类型来处理镜像格式或云盘格式[{1}]",
    "arguments": [
      "psUuid",
      "imageFormat"
    ],
    "line": 1665,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "the shared mount point primary storage[uuid:%s, name:%s] cannot find any available host in attached clusters for instantiating the volume",
    "en_US": "the shared mount point primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume",
    "zh_CN": "共享挂载点主存储[uuid:{0}, name:{1}]在挂载的集群中找不到任何可用的物理机来实例化云盘",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 344,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "can not found any cluster attached on shared block group primary storage[uuid: %S]",
    "en_US": "can not found any cluster attached on shared block group primary storage[uuid: %S]",
    "zh_CN": "找不到任何挂载了共享块主存储[uuid: %S]",
    "arguments": [
      "getSelfInventory().getUuid()"
    ],
    "line": 697,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "the shared block group primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the shared block group primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "SharedBlock主存储[uuid:{0}, name:{1}] 没有挂载到任何一个集群，或者挂载到集群的物理机均无法连接",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1100,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "the SharedBlock primary storage[uuid:%s, name:%s] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "en_US": "the SharedBlock primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected",
    "zh_CN": "SharedBlock主存储[uuid：{0}，名称：{1}]尚未连接到任何集群，或者已连接的集群中没有物理机",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 1179,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "empty migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "en_US": "empty migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "zh_CN": "MigrateEvoluesBetweenSharedBlockGroupPrimaryStorageMsg中的MigrateEvolumeStructs为空！",
    "arguments": [],
    "line": 1369,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "no volume in migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "en_US": "no volume in migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!",
    "zh_CN": "MigrateEvolumesBetweenSharedBlockGroupPrimaryStorageMsg中的MigrateEvolmeStructs中没有卷！",
    "arguments": [],
    "line": 1375,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java"
  },
  {
    "raw": "the value[%s] is not power of 2",
    "en_US": "the value[{0}] is not power of 2",
    "zh_CN": "输入值[{0}]不是2的幂次",
    "arguments": [
      "newValue"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find an available host to execute command for shared block group primary storage[uuid:%s]",
    "en_US": "cannot find an available host to execute command for shared block group primary storage[uuid:{0}]",
    "zh_CN": "找不到加载了共享块存储的[uuid:{0}]可用的物理机",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 444,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has connected shared block to execute command for shared block group primary storage[uuid:%s]",
    "en_US": "cannot find a host which has connected shared block to execute command for shared block group primary storage[uuid:{0}]",
    "zh_CN": "找不到处于连接状态的加载了共享块存储[uuid:{0}]物理机执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 468,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "the host[uuid: %s] running on is not available to resize volume[uuid: %s] on shared block group primary storage[uuid: %s]",
    "en_US": "the host[uuid: {0}] running on is not available to resize volume[uuid: {1}] on shared block group primary storage[uuid: {2}]",
    "zh_CN": "共享块存储[uuid: {2}]上的云盘[uuid : {1}]运行在物理机[uuid : {0}]上，但状态无法执行扩容操作",
    "arguments": [
      "vmvo.getHostUuid()",
      "volumeInventory.getUuid()",
      "volumeInventory.getPrimaryStorageUuid()"
    ],
    "line": 515,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "primary storage[uuid:%s] not found",
    "en_US": "primary storage[uuid:{0}] not found",
    "zh_CN": "找不到主存储[uuid：{0}]",
    "arguments": [
      "psUuid"
    ],
    "line": 524,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "volume[uuid:%s] not found",
    "en_US": "volume[uuid:{0}] not found",
    "zh_CN": "未找到卷[uuid：{0}]",
    "arguments": [
      "volUuid"
    ],
    "line": 541,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java"
  },
  {
    "raw": "can not get cluster uuid of volume %s",
    "en_US": "can not get cluster uuid of volume {0}",
    "zh_CN": "无法获取卷{0}的群集uuid",
    "arguments": [
      "volumeUuid"
    ],
    "line": 81,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockImageStoreBackend.java"
  },
  {
    "raw": "the image[uuid:%s, name: %s] is not available to download on any backup storage:\\n1. check if image is in status of Deleted\\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:%s]",
    "en_US": "the image[uuid:{0}, name: {1}] is not available to download on any backup storage:\\n1. check if image is in status of Deleted\\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:{2}]",
    "zh_CN": "不能从镜像服务器中下载镜像[uuid:%s, name: %s]\\n1.检查镜像是否处于被删除状态\\n2.检查镜像处于就绪状态的镜像服务器是否挂载到区域[uuid:{2}]",
    "arguments": [
      "img.getUuid()",
      "img.getName()",
      "self.getZoneUuid()"
    ],
    "line": 1413,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "the volume[uuid;%s] is attached to a VM[uuid:%s] which is in state of %s, cannot do the snapshot merge",
    "en_US": "the volume[uuid;{0}] is attached to a VM[uuid:{1}] which is in state of {2}, cannot do the snapshot merge",
    "zh_CN": "云盘[uuid;{0}] 挂载到处于{2}状态的云主机，不能合并快照",
    "arguments": [
      "volume.getUuid()",
      "volume.getVmInstanceUuid()",
      "state"
    ],
    "line": 1251,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "no connected host found in the cluster[uuid:%s]",
    "en_US": "no connected host found in the cluster[uuid:{0}]",
    "zh_CN": "cluster[uuid:{0}]不存在已连接的物理机",
    "arguments": [
      "clusterUuid"
    ],
    "line": 1907,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "vm[uuid:%s] is not Running, Paused or Stopped, current state[%s]",
    "en_US": "vm[uuid:{0}] is not Running, Paused or Stopped, current state[{1}]",
    "zh_CN": "云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是[{1}]",
    "arguments": [
      "vol.getVmInstanceUuid()",
      "state"
    ],
    "line": 5893,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "cannot find backup storage[uuid:%s]",
    "en_US": "cannot find backup storage[uuid:{0}]",
    "zh_CN": "找不到镜像服务器[uuid:{0}]",
    "arguments": [
      "backupStorageUuid"
    ],
    "line": 2798,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find volume[uuid: %s]",
    "en_US": "can not find volume[uuid: {0}]",
    "zh_CN": "找不到云盘[uuid: {0}]",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 2260,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "shared volume not support thin provisioning",
    "en_US": "shared volume not support thin provisioning",
    "zh_CN": "共享云盘不支持精简配置",
    "arguments": [],
    "line": 773,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "not support online merge snapshot for shareable volume[uuid: %s] on sharedblock",
    "en_US": "not support online merge snapshot for shareable volume[uuid: {0}] on sharedblock",
    "zh_CN": "不支持对共享块存储上的共享云盘[uuid: {1}]做在线合并快照，请关机或卸载后操作",
    "arguments": [
      "volume.getUuid()"
    ],
    "line": 1340,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "the image[uuid: %s, name:%s] is not found on any backup storage",
    "en_US": "the image[uuid: {0}, name:{1}] is not found on any backup storage",
    "zh_CN": "在任何备份存储上都找不到镜像[uuid：{0}，名称：{1}]",
    "arguments": [
      "img.getUuid()",
      "img.getName()"
    ],
    "line": 1429,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "hosts[uuid:%s] have the disk uuid of shared block, but actually different storage.",
    "en_US": "hosts[uuid:{0}] have the disk uuid of shared block, but actually different storage.",
    "zh_CN": "物理机[uuid:{0}]已经加载了相同uuid的共享块，但实际上是不同的存储",
    "arguments": [
      "ret.firstAccessHosts.stream().map( h -\u003e h.hostUuid).collect(Collectors.toList())"
    ],
    "line": 2043,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "not support convert thin volume to thick volume yet",
    "en_US": "not support convert thin volume to thick volume yet",
    "zh_CN": "尚不支持将精简卷转换为密集卷",
    "arguments": [],
    "line": 2400,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "expected status is %s and current status",
    "en_US": "expected status is {0} and current status",
    "zh_CN": "预期状态为{0}，当前状态为",
    "arguments": [],
    "line": 2453,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "VM[uuid:%s] has multiple ISOs from different primary storage: %s",
    "en_US": "VM[uuid:{0}] has multiple ISOs from different primary storage: {1}",
    "zh_CN": "VM[uuid:{0}]挂载了来自不同主存储:{1}的ISO",
    "arguments": [
      "spec.getVmInventory().getUuid()",
      "String.join(\",\", psUuids)"
    ],
    "line": 3409,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "QCow2 shared volume[uuid:%s] is not supported",
    "en_US": "QCow2 shared volume[uuid:{0}] is not supported",
    "zh_CN": "不支持QCOW2共享云盘[uuid：{0}]",
    "arguments": [
      "volume.getUuid()"
    ],
    "line": 3584,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find any available host to take snapshot for volume[uuid: %s] on shared block group primary storage[uuid: %s]",
    "en_US": "can not find any available host to take snapshot for volume[uuid: {0}] on shared block group primary storage[uuid: {1}]",
    "zh_CN": "无法找到合适的物理机来对共享块存储[uuid : {1}]上的云盘[uuid: {0}]执行快照操作",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 4650,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find hosts both connect to primary storage[uuid: %s] and primary storage[uuid: %s]",
    "en_US": "can not find hosts both connect to primary storage[uuid: {0}] and primary storage[uuid: {1}]",
    "zh_CN": "无法找到同时连接主存储[uuid: {0}]和主存储[uuid: {1}]的物理机",
    "arguments": [
      "msg.getPrimaryStorageUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 4708,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "only support full",
    "en_US": "only support full",
    "zh_CN": "共享块存储目前只支持全量快照",
    "arguments": [],
    "line": 4663,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find any available host to migrate volume[uuid: %s] between shared block group primary storage[uuid: %s] and [uuid: %s]",
    "en_US": "can not find any available host to migrate volume[uuid: {0}] between shared block group primary storage[uuid: {1}] and [uuid: {2}]",
    "zh_CN": "无法找到合适的物理机来将云盘[uuid: {0}]在共享块存储[uuid : {1}]和共享块存储[uuid: {2}]之间迁移",
    "arguments": [
      "msg.getMigrateVolumeStructs().get(0).volumeUuid",
      "msg.getPrimaryStorageUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 4691,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "can not find any available host to migrate for volume[uuid: %s] on shared block group primary storage[uuid: %s] and [uuid: %s]",
    "en_US": "can not find any available host to migrate for volume[uuid: {0}] on shared block group primary storage[uuid: {1}] and [uuid: {2}]",
    "zh_CN": "无法找到合适的物理机来将云盘[uuid: {0}]在共享块存储[uuid : {1}]和共享块存储[uuid: {2}]之间迁移",
    "arguments": [
      "msg.getMigrateVolumeStructs().get(0).volumeUuid",
      "msg.getTargetPrimaryStorageUuid()",
      "msg.getTargetPrimaryStorageUuid()"
    ],
    "line": 4700,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "cannot find any connected host to perform the operation, it seems all KVM hosts attached with the shared block group storage[uuid:%s] are disconnected",
    "en_US": "cannot find any connected host to perform the operation, it seems all KVM hosts attached with the shared block group storage[uuid:{0}] are disconnected",
    "zh_CN": "无法找到任何已连接的物理机来执行操作，所有连接共享块存储[uuid: {1}]的物理机均处于失联状态",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 4753,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "cannot shrink snapshot %s, because volume %s not ready",
    "en_US": "cannot shrink snapshot {0}, because volume {1} not ready",
    "zh_CN": "无法收缩快照{0}，因为卷{1}未就绪",
    "arguments": [
      "snapshotVO.getUuid()",
      "volumeVO.getUuid()"
    ],
    "line": 4971,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "cannot shrink snapshot %s, beacuse vm %s not in Running/Stopped state",
    "en_US": "cannot shrink snapshot {0}, beacuse vm {1} not in Running/Stopped state",
    "zh_CN": "无法收缩快照{0}，因为VM{1}未处于正在运行/已停止状态",
    "arguments": [
      "snapshotVO.getUuid()",
      "instanceVO.getUuid()"
    ],
    "line": 5147,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "get null install path in snapshot for vm %s",
    "en_US": "get null install path in snapshot for vm {0}",
    "zh_CN": "在云主机{0}的快照中获取Null安装路径",
    "arguments": [
      "vmVolumesStruct.vmInstanceVO.getUuid()"
    ],
    "line": 5394,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "dest path %s not belong to volume %s any snapshot",
    "en_US": "dest path {0} not belong to volume {1} any snapshot",
    "zh_CN": "目标路径{0}不属于任何快照的卷{1}",
    "arguments": [
      "msg.getDstPath()",
      "msg.getVolume().getUuid()"
    ],
    "line": 5707,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java"
  },
  {
    "raw": "migrate volume without snapshot on shared block is not support to cancel.",
    "en_US": "migrate volume without snapshot on shared block is not support to cancel.",
    "zh_CN": "不支持取消在共享数据块上迁移不带快照的卷。",
    "arguments": [],
    "line": 33,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkCancelMigrateVolumeFlow.java"
  },
  {
    "raw": "found trashId(%s) in PrimaryStorage [%s] for the migrate installPath[%s]. Please clean it first by \u0027APICleanUpTrashOnPrimaryStorageMsg\u0027 if you insist to migrate the volume[%s]",
    "en_US": "found trashId({0}) in PrimaryStorage [{1}] for the migrate installPath[{2}]. Please clean it first by \u0027APICleanUpTrashOnPrimaryStorageMsg\u0027 if you insist to migrate the volume[{3}]",
    "zh_CN": "在主存储[{1}]的回收数据({0})中己存在要迁移的目标路径[{2}]，如果要继续迁移云盘[{3}]，请先调用\u0027APICleanUpTrashOnPrimaryStorageMsg\u0027来手动清理该回收数据",
    "arguments": [
      "reply1.getTrashId()",
      "dstPsUuid",
      "dstVolumeFolderPath",
      "reply1.getResourceUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "there are not enough capacity for volume[uuid: %s] storage migration, required capacity: %s, current available physical capacity: %s",
    "en_US": "there are not enough capacity for volume[uuid: {0}] storage migration, required capacity: {1}, current available physical capacity: {2}",
    "zh_CN": "对云盘[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量，但现在只有{2}的空余容量",
    "arguments": [
      "volumeUuid",
      "volumeVO.getActualSize()",
      "dstPsInv.getAvailablePhysicalCapacity()"
    ],
    "line": 271,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "cannot find the image[uuid:%s] in any connected backup storage attached to the zone[uuid:%s]. check below:\\n1. whether the backup storage is attached to the zone[uuid:%s]\\n2. whether the backup storage is in connected status; try to reconnect it if not",
    "en_US": "cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\\n1. whether the backup storage is attached to the zone[uuid:{2}]\\n2. whether the backup storage is in connected status; try to reconnect it if not",
    "zh_CN": "在所有的已连接区域[uuid:{1}]的镜像服务器未找到镜像[uuid:{0}]。建议进行如下检查: \\n1.镜像服务器是否连接到区域[uuid:{2}]\\n2.镜像服务器是否是已连接状态，如果不是尝试重新连接",
    "arguments": [
      "imageUuid",
      "zoneUuid",
      "zoneUuid"
    ],
    "line": 202,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "there are not enough capacity for image[uuid: %s] download while volume[uuid: %s] storage migration, required capacity: %s, current available physical capacity: %s",
    "en_US": "there are not enough capacity for image[uuid: {0}] download while volume[uuid: {1}] storage migration, required capacity: {2}, current available physical capacity: {3}",
    "zh_CN": "对云盘[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量来下载镜像cache，但现在只有{2}的空余容量",
    "arguments": [
      "image.getUuid()",
      "volumeUuid",
      "image.getActualSize()",
      "dstPsInv.getAvailablePhysicalCapacity()"
    ],
    "line": 225,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java"
  },
  {
    "raw": "data on source ps[uuid: %s] has been discarded, not support rollback",
    "en_US": "data on source ps[uuid: {0}] has been discarded, not support rollback",
    "zh_CN": "源主存储[uuid:{0}]上的数据已经被清理，无法回滚",
    "arguments": [
      "srcPsUuid"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkRollbackMigrateVolumeFlow.java"
  },
  {
    "raw": "why volume[uuid:%s, installPath:%s] not in directory %s",
    "en_US": "why volume[uuid:{0}, installPath:{1}] not in directory {2}",
    "zh_CN": "为什么卷[uuid：{0}，InstallPath：{1}]不在目录{2}中",
    "arguments": [
      "cmd.volumeUuid",
      "msg.getVolume().getInstallPath()",
      "cmd.srcDir"
    ],
    "line": 2415,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "hosts[uuid:%s] have the same mount path, but actually mount different storage.",
    "en_US": "hosts[uuid:{0}] have the same mount path, but actually mount different storage.",
    "zh_CN": "物理机[uuid:{0}]有相同挂载路径，但是实际上挂载在不同的存储上",
    "arguments": [
      "ret.firstAccessHostUuids"
    ],
    "line": 2184,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "host[uuid:%s] might mount storage which is different from SMP[uuid:%s], please check it",
    "en_US": "host[uuid:{0}] might mount storage which is different from SMP[uuid:{1}], please check it",
    "zh_CN": "物理机[uuid：{0}]可能装载与SMP[uuid：{1}]不同的存储，请检查",
    "arguments": [
      "msg.getHostUuid()",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 2372,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/KvmBackend.java"
  },
  {
    "raw": "volume[uuid:%s] has reference volume[%s], can not change volume type before flatten them and their descendants",
    "en_US": "volume[uuid:{0}] has reference volume[{1}], can not change volume type before flatten them and their descendants",
    "zh_CN": "卷[uuid：{0}]具有引用卷[{1}]，在展平它们及其后代之前无法更改卷类型",
    "arguments": [
      "volumeUuid",
      "infos.toString()"
    ],
    "line": 1139,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java"
  },
  {
    "raw": "not supported operation",
    "en_US": "not supported operation",
    "zh_CN": "不支持的操作",
    "arguments": [],
    "line": 597,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java"
  },
  {
    "raw": "the SMP primary storage[uuid:%s] is not attached to any clusters, and cannot expunge the root volume[uuid:%s] of the VM[uuid:%s]",
    "en_US": "the SMP primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]",
    "zh_CN": "SMP主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除云主机[uuid:{2}]的云盘[uuid:{1}]",
    "arguments": [
      "psUuid",
      "vmUuid",
      "volumeUuid"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a Connected host to execute command for smp primary storage[uuid:%s]",
    "en_US": "cannot find a Connected host to execute command for smp primary storage[uuid:{0}]",
    "zh_CN": "找不到一个已连接状态的物理机为SMP主存储[uuid:{0}]执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 303,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": "cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:%s]",
    "en_US": "cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:{0}]",
    "zh_CN": "找不到一个和SMP主存储[uuid:{0}]处于已连接状态的物理机为其执行命令",
    "arguments": [
      "pri.getUuid()"
    ],
    "line": 323,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java"
  },
  {
    "raw": " the url contains an invalid folder[/dev or /proc or /sys]",
    "en_US": " the url contains an invalid folder[/dev or /proc or /sys]",
    "zh_CN": "URL包含了一个无效的目录[/dev or /proc or /sys]",
    "arguments": [],
    "line": 25,
    "fileName": "src/main/java/org/zstack/storage/primary/smp/SharedMountPointApiInterceptor.java"
  },
  {
    "raw": "failed to cancel deletion job. Volume[uuid:%s] not exists.",
    "en_US": "failed to cancel deletion job. Volume[uuid:{0}] not exists.",
    "zh_CN": "无法取消删除作业。卷[uuid：{0}]不存在。",
    "arguments": [],
    "line": 96,
    "fileName": "src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java"
  },
  {
    "raw": "failed to cancel deletion job. Volume[uuid:%s] not attached to any vm, offline snapshot deletion do not support cancel.",
    "en_US": "failed to cancel deletion job. Volume[uuid:{0}] not attached to any vm, offline snapshot deletion do not support cancel.",
    "zh_CN": "无法取消删除作业。卷[uuid：{0}]未连接到任何VM，脱机快照删除不支持取消。",
    "arguments": [],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java"
  },
  {
    "raw": "failed to cancel deletion job. Volume[uuid:%s] attached vm not exists, offline snapshot deletion do not support cancel.",
    "en_US": "failed to cancel deletion job. Volume[uuid:{0}] attached vm not exists, offline snapshot deletion do not support cancel.",
    "zh_CN": "无法取消删除作业。卷[uuid：{0}]连接的VM不存在，脱机快照删除不支持取消。",
    "arguments": [],
    "line": 106,
    "fileName": "src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java"
  },
  {
    "raw": "failed to cancel deletion job. Volume[uuid:%s] attached vm not in state %s offline snapshot deletion do not support cancel.",
    "en_US": "failed to cancel deletion job. Volume[uuid:{0}] attached vm not in state {1} offline snapshot deletion do not support cancel.",
    "zh_CN": "无法取消删除作业。卷[uuid：{0}]连接的VM未处于状态{1}脱机快照删除不支持取消。",
    "arguments": [
      "VmInstanceState.Running"
    ],
    "line": 111,
    "fileName": "src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java"
  },
  {
    "raw": "volume snapshot[uuids:%s] is in state Disabled, cannot revert volume to it",
    "en_US": "volume snapshot[uuids:{0}] is in state Disabled, cannot revert volume to it",
    "zh_CN": "卷快照[uuid：{0}]处于禁用状态，无法将卷恢复为该状态",
    "arguments": [
      "disabledSnapshotUuids"
    ],
    "line": 100,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "Can not take memory snapshot, expected vm states are [%s, %s]",
    "en_US": "Can not take memory snapshot, expected vm states are [{0}, {1}]",
    "zh_CN": "无法获取内存快照，预期的VM状态为[{0}，{1}]",
    "arguments": [
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 121,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "volume snapshot[uuid:%s] is in state %s, cannot revert volume to it",
    "en_US": "volume snapshot[uuid:{0}] is in state {1}, cannot revert volume to it",
    "zh_CN": "云盘快照[uuid:{0}]出于状态{1}，不能恢复云盘到该快照状态",
    "arguments": [
      "msg.getUuid()",
      "state"
    ],
    "line": 188,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "original volume for snapshot[uuid:%s] has been deleted, cannot revert volume to it",
    "en_US": "original volume for snapshot[uuid:{0}] has been deleted, cannot revert volume to it",
    "zh_CN": "快照[uuid:{0}]的原版云盘已经被删除，不能恢复云盘到该快照",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 193,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "not support delete snapshots on different volumes[uuid: %s, %s]",
    "en_US": "not support delete snapshots on different volumes[uuid: {0}, {1}]",
    "zh_CN": "不支持删除不同卷上的快照[uuid：{0}，{1}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "snapshotVO.getVolumeUuid()"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "can not find volume uuid for snapshosts[uuid: %s]",
    "en_US": "can not find volume uuid for snapshosts[uuid: {0}]",
    "zh_CN": "找不到快照物理机[uuid：{0}]的卷uuid",
    "arguments": [
      "msg.getUuids()"
    ],
    "line": 215,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java"
  },
  {
    "raw": "after subtracting reserved capacity[%s], there is no primary storage having required size[%s bytes], may be the threshold of primary storage physical capacity setting is lower",
    "en_US": "after subtracting reserved capacity[{0}], there is no primary storage having required size[{1} bytes], may be the threshold of primary storage physical capacity setting is lower",
    "zh_CN": "减去保留容量[{0}]后，没有具有所需大小[{1}字节]的主存储，可能是主存储物理容量设置的阈值较低",
    "arguments": [
      "PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value()",
      "volumeSize"
    ],
    "line": 834,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "Unsupported maximum snapshot number (%d) for volume [uuid:%s]",
    "en_US": "Unsupported maximum snapshot number ({0}) for volume [uuid:{1}]",
    "zh_CN": "不支持卷[uuid：{1}]的最大快照数（{0}）",
    "arguments": [
      "maxIncrementalSnapshotNum",
      "vo.getVolumeUuid()"
    ],
    "line": 617,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "primary storage[uuid:%s] doesn\u0027t support volume snapshot; cannot create snapshot for volume[uuid:%s]",
    "en_US": "primary storage[uuid:{0}] doesn\u0027t support volume snapshot; cannot create snapshot for volume[uuid:{1}]",
    "zh_CN": "主存储[uuid:{0}]不能支持云盘快照，不能为云盘[uuid:{1}]创建快照",
    "arguments": [
      "primaryStorageUuid",
      "vol.getUuid()"
    ],
    "line": 1044,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot find type for primaryStorage [%s]",
    "en_US": "cannot find type for primaryStorage [{0}]",
    "zh_CN": "找不到PrimaryStorage[{0}]的类型",
    "arguments": [
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 1010,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot find snapshot: %s",
    "en_US": "cannot find snapshot: {0}",
    "zh_CN": "找不到快照：{0}",
    "arguments": [
      "uuid"
    ],
    "line": 1107,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "this resource type %s does not support querying memory snapshot references",
    "en_US": "this resource type {0} does not support querying memory snapshot references",
    "zh_CN": "此资源类型{0}不支持查询内存快照引用",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 1176,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java"
  },
  {
    "raw": "cannot find volume snapshot[uuid:%s, name:%s], it may have been deleted by previous operation",
    "en_US": "cannot find volume snapshot[uuid:{0}, name:{1}], it may have been deleted by previous operation",
    "zh_CN": "不能创建云盘快照[uuid:{0}, name:{1}]，该快照可能已经被以前的操作删除",
    "arguments": [
      "currentRoot.getUuid()",
      "currentRoot.getName()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "snapshot or its desendant has reference volume[uuids:%s]",
    "en_US": "snapshot or its desendant has reference volume[uuids:{0}]",
    "zh_CN": "快照或其目标具有引用卷[uuid：{0}]",
    "arguments": [
      "refVolUuids"
    ],
    "line": 418,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "failed to change status of volume snapshot[uuid:%s, name:%s] by status event[%s]",
    "en_US": "failed to change status of volume snapshot[uuid:{0}, name:{1}] by status event[{2}]",
    "zh_CN": "通过状态事件[{2}]改变云盘快照[uuid:{0}, name:{1}]失败",
    "arguments": [
      "failSnapshot.getUuid()",
      "failSnapshot.getName()",
      "evt"
    ],
    "line": 1004,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "unable to reset volume[uuid:%s] to snapshot[uuid:%s], the vm[uuid:%s] volume attached to is not in Stopped state, current state is %s",
    "en_US": "unable to reset volume[uuid:{0}] to snapshot[uuid:{1}], the vm[uuid:{2}] volume attached to is not in Stopped state, current state is {3}",
    "zh_CN": "不能重置云盘[uuid:{0}]到快照[uuid:{1}]状态，云盘的云主机[uuid:{2}]未处于停止状态，当前状态是{3}",
    "arguments": [
      "volumeInventory.getUuid()",
      "currentRoot.getUuid()",
      "vmUuid",
      "state"
    ],
    "line": 1847,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "current snapshot:%s is not latest snapshot, cannot mark as volume",
    "en_US": "current snapshot:{0} is not latest snapshot, cannot mark as volume",
    "zh_CN": "当前快照：{0}不是最新的快照，无法标记为卷",
    "arguments": [
      "currentRoot.getUuid()"
    ],
    "line": 2228,
    "fileName": "src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java"
  },
  {
    "raw": "no bundle found for type:%s",
    "en_US": "no bundle found for type:{0}",
    "zh_CN": "未找到类型为{0}的包",
    "arguments": [
      "ext.getArchiveBundleCanonicalName()"
    ],
    "line": 282,
    "fileName": "src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupBase.java"
  },
  {
    "raw": "snapshot(s) %s in the group has been deleted, can only revert one by one.",
    "en_US": "snapshot(s) {0} in the group has been deleted, can only revert one by one.",
    "zh_CN": "快照组里的快照{0}已经被删除了，仅能单盘恢复。",
    "arguments": [
      "String.join(\", \", deletedSnapshotInfos)"
    ],
    "line": 89,
    "fileName": "src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java"
  },
  {
    "raw": "volume(s) %s is no longer attached, can only revert one by one. If you need to group revert, please re-attach it.",
    "en_US": "volume(s) {0} is no longer attached, can only revert one by one. If you need to group revert, please re-attach it.",
    "zh_CN": "云盘{0}已被卸载，仅能单盘恢复；如果需要整组恢复，请重新加载再执行操作",
    "arguments": [
      "String.join(\", \", detachedVolInfos)"
    ],
    "line": 93,
    "fileName": "src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java"
  },
  {
    "raw": "new volume(s) %s attached after snapshot point, can only revert one by one. If you need to group revert, please detach it.",
    "en_US": "new volume(s) {0} attached after snapshot point, can only revert one by one. If you need to group revert, please detach it.",
    "zh_CN": "在快照点之后加载了新的云盘{0}，仅能单盘恢复；如果需要整组恢复，请先卸载再执行操作",
    "arguments": [
      "volInfos"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java"
  },
  {
    "raw": "Can\u0027t attach volume to VM, no qualified cluster",
    "en_US": "Can\u0027t attach volume to VM, no qualified cluster",
    "zh_CN": "不能加载云盘到云主机上，没有可用集群",
    "arguments": [],
    "line": 292,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "primaryStorageUuid conflict, the primary storage specified by the disk offering is %s, and the primary storage specified in the creation parameter is %s",
    "en_US": "primaryStorageUuid conflict, the primary storage specified by the disk offering is {0}, and the primary storage specified in the creation parameter is {1}",
    "zh_CN": "PrimaryStorageuuid冲突，磁盘产品指定的主存储为{0}，而创建参数中指定的主存储为{1}",
    "arguments": [
      "psUuid",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 407,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not in status Ready, current is %s, can\u0027t create snapshot",
    "en_US": "volume[uuid:{0}] is not in status Ready, current is {1}, can\u0027t create snapshot",
    "zh_CN": "云盘[uuid:{0}]未出于就绪状态，当前是{1}，不能创建快照",
    "arguments": [
      "vol.getUuid()",
      "vol.getStatus()"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s, type:%s], can\u0027t create snapshot",
    "en_US": "volume[uuid:{0}, type:{1}], can\u0027t create snapshot",
    "zh_CN": "卷[uuid：{0}，类型：{1}]，无法创建快照",
    "arguments": [
      "msg.getVolumeUuid()",
      "type"
    ],
    "line": 126,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not in state Enabled, current is %s, can\u0027t create snapshot",
    "en_US": "volume[uuid:{0}] is not in state Enabled, current is {1}, can\u0027t create snapshot",
    "zh_CN": "卷[uuid：{0}]未处于启用状态，当前为{1}，无法创建快照",
    "arguments": [
      "msg.getVolumeUuid()",
      "state"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "Can not take memory snapshot, vm current state[%s], but expect state are [%s, %s]",
    "en_US": "Can not take memory snapshot, vm current state[{0}], but expect state are [{1}, {2}]",
    "zh_CN": "无法获取内存快照，VM当前状态为[{0}]，但预期状态为[{1}，{2}]",
    "arguments": [
      "vmvo.getState().toString()",
      "VmInstanceState.Running.toString()",
      "VmInstanceState.Paused.toString()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is not in status of deleted. This is operation is to recover a deleted data volume",
    "en_US": "the volume[uuid:{0}] is not in status of deleted. This is operation is to recover a deleted data volume",
    "zh_CN": "云盘[uuid:{0}]未处于删除状态。此操作将覆盖一个被删除的云盘",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 183,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s] is in status of deleted, cannot do the operation",
    "en_US": "the volume[uuid:{0}] is in status of deleted, cannot do the operation",
    "zh_CN": "云盘[uuid:{0}]已经被删除，不能执行此操作",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 319,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not %s, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not {1}, it\u0027s {2}",
    "zh_CN": "镜像[uuid:{0}]不是{1}，而是{2}",
    "arguments": [
      "msg.getImageUuid()",
      "ImageMediaType.DataVolumeTemplate",
      "type"
    ],
    "line": 201,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Enabled, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not Enabled, it\u0027s {1}",
    "zh_CN": "镜像不能启用，此镜像是{1}",
    "arguments": [
      "img.getUuid()",
      "img.getState()"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "image[uuid:%s] is not Ready, it\u0027s %s",
    "en_US": "image[uuid:{0}] is not Ready, it\u0027s {1}",
    "zh_CN": "镜像未准备就绪，此镜像是{1}",
    "arguments": [
      "img.getUuid()",
      "img.getStatus()"
    ],
    "line": 209,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is Root volume, can not be attach to vm",
    "en_US": "volume[uuid:{0}] is Root volume, can not be attach to vm",
    "zh_CN": "云盘[uuid:{0}]是一个云盘，不能被手动挂载到其他云主机",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 221,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is in state[%s], data volume can only be attached when state is %s",
    "en_US": "volume[uuid:{0}] is in state[{1}], data volume can only be attached when state is {2}",
    "zh_CN": "云盘[uuid:{0}]处于[{1}]状态，云盘只能在处于{2}状态的时候挂载",
    "arguments": [
      "msg.getVolumeUuid()",
      "state",
      "VolumeState.Enabled"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is in status[%s], data volume can only be attached when status is %s or %S",
    "en_US": "volume[uuid:{0}] is in status[{1}], data volume can only be attached when status is {2} or %S",
    "zh_CN": "云盘[uuid:{0}]处于[{1}]，云盘只能在处于{2}或%S状态的时候挂载",
    "arguments": [
      "msg.getVolumeUuid()",
      "status",
      "VolumeStatus.Ready",
      "VolumeStatus.NotInstantiated"
    ],
    "line": 233,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] is not attached to any vm, can\u0027t detach",
    "en_US": "data volume[uuid:{0}] is not attached to any vm, can\u0027t detach",
    "zh_CN": "云盘没有被挂载到任何云主机上，不能卸载",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 240,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "to detach shareable data volume[uuid:%s], vm uuid is needed.",
    "en_US": "to detach shareable data volume[uuid:{0}], vm uuid is needed.",
    "zh_CN": "卸载共享云盘[uuid:{0}]需要云主机的uuid",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 244,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s, type:%s] can\u0027t detach it",
    "en_US": "the volume[uuid:{0}, name:{1}, type:{2}] can\u0027t detach it",
    "zh_CN": "卷[uuid：{0}，名称：{1}，类型：{2}]无法将其分离",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()",
      "vol.getType()"
    ],
    "line": 249,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the vm[uuid:%s] doesn\u0027t support to online attach volume[%s] on the basis of that the image platform type of the vm is other ",
    "en_US": "the vm[uuid:{0}] doesn\u0027t support to online attach volume[{1}] on the basis of that the image platform type of the vm is other ",
    "zh_CN": "云主机[uuid:{0}]不支持在线挂载云盘[{1}]。因为这台云主机的基础镜像平台类型为“其他”",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "msg.getVolumeUuid()"
    ],
    "line": 305,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s] is Root Volume, can\u0027t attach it",
    "en_US": "the volume[uuid:{0}, name:{1}] is Root Volume, can\u0027t attach it",
    "zh_CN": "不能挂载云盘[uuid:{0}, name:{1}]",
    "arguments": [
      "vol.getUuid()",
      "vol.getName()"
    ],
    "line": 310,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] is Disabled, can\u0027t attach",
    "en_US": "data volume[uuid:{0}] is Disabled, can\u0027t attach",
    "zh_CN": "云盘已被禁用，不能挂载",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 315,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] has been attached to some vm, can\u0027t attach again",
    "en_US": "data volume[uuid:{0}] has been attached to some vm, can\u0027t attach again",
    "zh_CN": "云盘[uuid:{0}]已经被加载上云主机了，不能再次加载",
    "arguments": [
      "vol.getUuid()"
    ],
    "line": 323,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume can only be attached when status is [%s, %s], current is %s",
    "en_US": "data volume can only be attached when status is [{0}, {1}], current is {2}",
    "zh_CN": "云盘仅能当处于[{0}, {1}]状态挂载，当前状态是{2}",
    "arguments": [
      "VolumeStatus.Ready",
      "VolumeStatus.NotInstantiated",
      "vol.getStatus()"
    ],
    "line": 328,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "data volume[uuid:%s] has format[%s] that can only be attached to hypervisor[%s], but vm[uuid:%s] has hypervisor type[%s]. Can\u0027t attach",
    "en_US": "data volume[uuid:{0}] has format[{1}] that can only be attached to hypervisor[{2}], but vm[uuid:{3}] has hypervisor type[{4}]. Can\u0027t attach",
    "zh_CN": "只有[{1}]格式的云盘[uuid:{0}]才能被挂载到管理程序[{2}]，但是云主机是[{4}]类型的管理程序，云盘不能挂载到该云主机",
    "arguments": [
      "vol.getUuid()",
      "vol.getFormat()",
      "hvTypes",
      "msg.getVmInstanceUuid()",
      "hvType"
    ],
    "line": 336,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "hypervisor[%s] only allows max %s data volumes to be attached to a single vm; there have been %s data volumes attached to vm[uuid:%s]",
    "en_US": "hypervisor[{0}] only allows max {1} data volumes to be attached to a single vm; there have been {2} data volumes attached to vm[uuid:{3}]",
    "zh_CN": "[{0}]管理程序仅允许最大不超过{1}云盘挂载到单个云主机。{2} data volumes已经挂载到云主机[uuid:{3}]",
    "arguments": [
      "hvType",
      "maxDataVolumeNum",
      "count",
      "msg.getVmInstanceUuid()"
    ],
    "line": 349,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "Can not attach volume to vm runs on host[uuid: %s] which is disconnected with volume\u0027s storage[uuid: %s]",
    "en_US": "Can not attach volume to vm runs on host[uuid: {0}] which is disconnected with volume\u0027s storage[uuid: {1}]",
    "zh_CN": "无法将卷附加到物理机[uuid：{0}]上运行的VM，该物理机已与卷的存储[uuid：{1}]断开连接",
    "arguments": [
      "hostUuid",
      "vol.getPrimaryStorageUuid()"
    ],
    "line": 367,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "it\u0027s not allowed to backup root volume, uuid:%s",
    "en_US": "it\u0027s not allowed to backup root volume, uuid:{0}",
    "zh_CN": "备份云盘不被允许，uuid:{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 378,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "unexpected disk size settings",
    "en_US": "unexpected disk size settings",
    "zh_CN": "意外的磁盘大小设置",
    "arguments": [],
    "line": 387,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s, type:%s] can\u0027t be deleted",
    "en_US": "volume[uuid:{0}, type:{1}] can\u0027t be deleted",
    "zh_CN": "无法删除卷[uuid：{0}，类型：{1}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "type"
    ],
    "line": 427,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is already in status of deleted",
    "en_US": "volume[uuid:{0}] is already in status of deleted",
    "zh_CN": "云盘[uuid:{0}]早已处于被删除状态",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 432,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not delete volume[%s], because volume attach to host[%s]",
    "en_US": "can not delete volume[{0}], because volume attach to host[{1}]",
    "zh_CN": "无法删除卷[{0}]，因为卷连接到物理机[{1}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "hostUuid"
    ],
    "line": 438,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "it\u0027s not allowed to change state of root volume, uuid:%s",
    "en_US": "it\u0027s not allowed to change state of root volume, uuid:{0}",
    "zh_CN": "不能改变云盘状态，uuid:{0}",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 453,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not change volume[%s] state, because volume attach to host[%s]",
    "en_US": "can not change volume[{0}] state, because volume attach to host[{1}]",
    "zh_CN": "无法更改卷[{0}]状态，因为卷连接到物理机[{1}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "hostUuid"
    ],
    "line": 461,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not attach volume[%s] to host[%s], because host[status:%s] is not connected",
    "en_US": "can not attach volume[{0}] to host[{1}], because host[status:{2}] is not connected",
    "zh_CN": "无法将云盘[{0}]挂载到物理机[{1}]，因为物理机[status:{2}]未连接",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getHostUuid()",
      "hostStatus"
    ],
    "line": 469,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "mount path must be absolute path",
    "en_US": "mount path must be absolute path",
    "zh_CN": "装载路径必须是绝对路径",
    "arguments": [],
    "line": 474,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not attach volume[%s] to host[%s], because volume is attaching to host[%s]",
    "en_US": "can not attach volume[{0}] to host[{1}], because volume is attaching to host[{2}]",
    "zh_CN": "无法将云盘[{0}]挂载到物理机[{1}]，因为云盘正在挂载到物理机[{2}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getHostUuid()",
      "hostUuid"
    ],
    "line": 491,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not attach volume[%s] to host[%s], because the volume[%s] occupies the mount path[%s] on host[%s]",
    "en_US": "can not attach volume[{0}] to host[{1}], because the volume[{2}] occupies the mount path[{3}] on host[{4}]",
    "zh_CN": "无法将云盘[{0}]挂载到物理机[{1}]，因为云盘[{2}]在物理机[{4}]上占用了挂载路径[{3}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getHostUuid()",
      "msg.getVolumeUuid()",
      "mountPath",
      "hostUuid"
    ],
    "line": 495,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not attach volume[%s] to host[%s], because the another volume occupies the mount path[%s]",
    "en_US": "can not attach volume[{0}] to host[{1}], because the another volume occupies the mount path[{2}]",
    "zh_CN": "无法将云盘[{0}]挂载到物理机[{1}]，因为另一个云盘占用了挂载路径[{2}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getHostUuid()",
      "msg.getMountPath()"
    ],
    "line": 505,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not detach volume[%s] from host. it may have been detached",
    "en_US": "can not detach volume[{0}] from host. it may have been detached",
    "zh_CN": "无法从物理机分离卷[{0}]。它可能已经分离了。",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 512,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "cannot flatten a shareable volume[uuid:%s]",
    "en_US": "cannot flatten a shareable volume[uuid:{0}]",
    "zh_CN": "无法平整可共享的卷[uuid：{0}]",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 520,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "can not found in used snapshot tree of volume[uuid: %s]",
    "en_US": "can not found in used snapshot tree of volume[uuid: {0}]",
    "zh_CN": "在卷[uuid：{0}]的已使用快照树中找不到",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 531,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "cannot undo not latest snapshot",
    "en_US": "cannot undo not latest snapshot",
    "zh_CN": "无法撤消不是最新的快照",
    "arguments": [],
    "line": 541,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java"
  },
  {
    "raw": "cannot find image cache[imageUuid: %s] for reinit volume",
    "en_US": "cannot find image cache[imageUuid: {0}] for reinit volume",
    "zh_CN": "找不到重新初始化卷的镜像缓存[imageUuid：{0}]",
    "arguments": [
      "self.getRootImageUuid()"
    ],
    "line": 200,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeBase.java"
  },
  {
    "raw": "the volume[uuid:%s, name:%s] is not deleted yet, can\u0027t expunge it",
    "en_US": "the volume[uuid:{0}, name:{1}] is not deleted yet, can\u0027t expunge it",
    "zh_CN": "云盘[uuid:{0}, name:{1}]仍未被删除，不能清除该云盘",
    "arguments": [
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 843,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeBase.java"
  },
  {
    "raw": "volume[uuid%s] should be attached.",
    "en_US": "volume[uuid{0}] should be attached.",
    "zh_CN": "应附加卷[uuid{0}]。",
    "arguments": [],
    "line": 1780,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeBase.java"
  },
  {
    "raw": "only support detached volume, use SetVmBootVolumeMsg instead.",
    "en_US": "only support detached volume, use SetVmBootVolumeMsg instead.",
    "zh_CN": "仅支持分离卷，请改用SetVMBootVolumeMsg。",
    "arguments": [],
    "line": 1866,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeBase.java"
  },
  {
    "raw": "get primaryStorage %s type failed",
    "en_US": "get primaryStorage {0} type failed",
    "zh_CN": "获取PrimaryStorage{0}类型失败",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 166,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "primaryStorage type [%s] not support shared volume yet",
    "en_US": "primaryStorage type [{0}] not support shared volume yet",
    "zh_CN": "主存储类型[{0}]尚不支持共享云盘",
    "arguments": [
      "psType"
    ],
    "line": 170,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "the image[uuid:%s, name:%s] has been deleted on all backup storage",
    "en_US": "the image[uuid:{0}, name:{1}] has been deleted on all backup storage",
    "zh_CN": "镜像[uuid:{0}, name:{1}]已经从所有的镜像服务器中删除",
    "arguments": [
      "template.getUuid()",
      "template.getName()"
    ],
    "line": 296,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "cannot find a backup storage on which the image[uuid:%s] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:%s] is",
    "en_US": "cannot find a backup storage on which the image[uuid:{0}] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:{1}] is",
    "zh_CN": "无法找到一个镜像[uuid:{0}]所在的镜像服务器符合全部的下列条件: 状态启动[state:Enabled]，已连接[status:Connected]，被挂载到主存储[uuid:{1}]所在的区域中",
    "arguments": [
      "template.getUuid()",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "target volume is expunged during volume creation",
    "en_US": "target volume is expunged during volume creation",
    "zh_CN": "目标卷在卷创建过程中被删除",
    "arguments": [],
    "line": 868,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "there should not be more than one %s implementation.",
    "en_US": "there should not be more than one {0} implementation.",
    "zh_CN": "不允许超过一种实现",
    "arguments": [
      "VolumeFactory.class.getSimpleName()"
    ],
    "line": 1106,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java"
  },
  {
    "raw": "volume[uuid:%s] is not root volume",
    "en_US": "volume[uuid:{0}] is not root volume",
    "zh_CN": "云盘[uuid:{0}]不是云盘",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "iothread need qemu version \u003e\u003d %s, but %s on host[%s].",
    "en_US": "iothread need qemu version \u003e\u003d {0}, but {1} on host[{2}].",
    "zh_CN": "IOThread需要QEMU版本\u003e\u003d{0}，但物理机[{2}]上需要{1}。",
    "arguments": [
      "IOTHREAD_QEMU_VERSION",
      "qemuVersion",
      "finalHostUuid"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "iothread need libvirt version \u003e\u003d %s, but %s on host[%s].",
    "en_US": "iothread need libvirt version \u003e\u003d {0}, but {1} on host[{2}].",
    "zh_CN": "IOThread需要libvirt版本\u003e\u003d{0}，但物理机[{2}]上需要{1}。",
    "arguments": [
      "IOTHREAD_LIBVIRT_VERSION",
      "libvirtVersion",
      "finalHostUuid"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "root volume[%s] cannot set iothreadpin.",
    "en_US": "root volume[{0}] cannot set iothreadpin.",
    "zh_CN": "根卷[{0}]无法设置ioThreadPin。",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 108,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "current iothread id[%s] is not the same as attached vol[%s] iothread[%s].",
    "en_US": "current iothread id[{0}] is not the same as attached vol[{1}] iothread[{2}].",
    "zh_CN": "当前ioThread ID[{0}]与附加的卷[{1}]ioThread[{2}]不同。",
    "arguments": [
      "msg.getIoThreadId()",
      "msg.getVolumeUuid()",
      "pinInfo[0]"
    ],
    "line": 115,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "snapshot validation is unsupported for volume[uuid: %s]. Volume should be attached to vm",
    "en_US": "snapshot validation is unsupported for volume[uuid: {0}]. Volume should be attached to vm",
    "zh_CN": "卷[uuid：{0}]不支持快照验证。卷应连接到云主机",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "snapshot validation is unsupported for volume[uuid: %s]. Attached vm is not in state of [%s, %s]",
    "en_US": "snapshot validation is unsupported for volume[uuid: {0}]. Attached vm is not in state of [{1}, {2}]",
    "zh_CN": "卷[uuid：{0}]不支持快照验证。连接的云主机未处于[{1}，{2}]状态",
    "arguments": [
      "msg.getUuid()",
      "VmInstanceState.Running",
      "VmInstanceState.Paused"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] can not found",
    "en_US": "volume[uuid:{0}] can not found",
    "zh_CN": "未找到卷[uuid：{0}]",
    "arguments": [
      "volumeUuid"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "not support take snapshots volume[uuid:%s, uuid:%s] on different vms[uuid:%s, uuid:%s]",
    "en_US": "not support take snapshots volume[uuid:{0}, uuid:{1}] on different vms[uuid:{2}, uuid:{3}]",
    "zh_CN": "不支持在不同的云主机[uuid：{2}，uuid：{3}]上拍摄卷[UUId：{0}，UUId：{1}]的快照",
    "arguments": [
      "volumeUuid",
      "volumeVOS.get(0).getUuid()",
      "volumeVO.getVmInstanceUuid()",
      "volumeVOS.get(0).getVmInstanceUuid()"
    ],
    "line": 156,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not ready",
    "en_US": "volume[uuid:{0}] is not ready",
    "zh_CN": "卷[uuid：{0}]未就绪",
    "arguments": [
      "volumeUuid"
    ],
    "line": 163,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "state of vm[uuid: %s] is %s, not allowed to take snapshots",
    "en_US": "state of vm[uuid: {0}] is {1}, not allowed to take snapshots",
    "zh_CN": "VM[uuid：{0}]的状态为{1}，不允许拍摄快照",
    "arguments": [
      "vmInstanceVO.getUuid()",
      "vmInstanceVO.getState()"
    ],
    "line": 178,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "volume[uuid:%s] is not data volume",
    "en_US": "volume[uuid:{0}] is not data volume",
    "zh_CN": "云盘[uuid:{0}]不是云盘",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 188,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "can not resize volume[%s], because volume state is Disabled",
    "en_US": "can not resize volume[{0}], because volume state is Disabled",
    "zh_CN": "无法调整卷[{0}]的大小，因为卷状态已禁用",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "At least one of vmInstanceUuid or uuid should be set",
    "en_US": "At least one of vmInstanceUuid or uuid should be set",
    "zh_CN": "至少应设置VMInstanceuuid或uuid中的一个",
    "arguments": [],
    "line": 212,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "no volume[uuid:%s, vmInstanceUuid:%s] can be found",
    "en_US": "no volume[uuid:{0}, vmInstanceUuid:{1}] can be found",
    "zh_CN": "找不到卷[uuid：{0}，VMInstanceuuid：{1}]",
    "arguments": [
      "msg.getUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 227,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "SharedVolume cannot be set bandwidth.",
    "en_US": "SharedVolume cannot be set bandwidth.",
    "zh_CN": "共享云盘不允许设置带宽",
    "arguments": [],
    "line": 245,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Cannot set legacy params and new params at the same time.",
    "en_US": "Cannot set legacy params and new params at the same time.",
    "zh_CN": "不能同时设置旧参数和新参数。",
    "arguments": [],
    "line": 254,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Cannot set the read/write and the total IOPS limits at the same time.",
    "en_US": "Cannot set the read/write and the total IOPS limits at the same time.",
    "zh_CN": "无法同时设置读/写和总IOPS限制。",
    "arguments": [],
    "line": 259,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Cannot set the read/write and the total bandwidth limits at the same time.",
    "en_US": "Cannot set the read/write and the total bandwidth limits at the same time.",
    "zh_CN": "无法同时设置读/写和总带宽限制。",
    "arguments": [],
    "line": 264,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "The volume bandwidth cannot be null, must give a volume bandwidth value.",
    "en_US": "The volume bandwidth cannot be null, must give a volume bandwidth value.",
    "zh_CN": "卷带宽不能为空，必须提供卷带宽值。",
    "arguments": [],
    "line": 273,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Cannot shrink [%s] volume[uuid:%s]\u0027s size",
    "en_US": "Cannot shrink [{0}] volume[uuid:{1}]\u0027s size",
    "zh_CN": "不能缩小云盘[uuid:{1}]的大小",
    "arguments": [
      "vo.getType()",
      "vo.getUuid()"
    ],
    "line": 284,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Minimum increase size should be larger than 4MB",
    "en_US": "Minimum increase size should be larger than 4MB",
    "zh_CN": "最小扩容量需要大于4MB",
    "arguments": [],
    "line": 291,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Expansion operation not allowed at all host disable",
    "en_US": "Expansion operation not allowed at all host disable",
    "zh_CN": "扩展操作不被允许在所有不可用的物理机上进行",
    "arguments": [],
    "line": 315,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "Expansion operation not allowed at host disable",
    "en_US": "Expansion operation not allowed at host disable",
    "zh_CN": "扩展操作不被允许在不可用的物理机上进行",
    "arguments": [],
    "line": 302,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "shared volume[uuid: %s] has attached to not stopped vm instances[uuids: %s]",
    "en_US": "shared volume[uuid: {0}] has attached to not stopped vm instances[uuids: {1}]",
    "zh_CN": "共享云盘[uuid：{0}]已连接到未停止的云主机实例[uuid：{1}]",
    "arguments": [
      "vo.getUuid()",
      "notStoppedVmUuids"
    ],
    "line": 341,
    "fileName": "src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java"
  },
  {
    "raw": "no resource type[%s] found in tag system",
    "en_US": "no resource type[{0}] found in tag system",
    "zh_CN": "标签系统中不存在[{0}]资源类型",
    "arguments": [
      "msg.getResourceType()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "tag[uuid:%s] is an inherent system tag, can not be removed",
    "en_US": "tag[uuid:{0}] is an inherent system tag, can not be removed",
    "zh_CN": "固有系统标签[uuid:{0}]禁止移除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "The argument :\u0027resourceType\u0027 doesn\u0027t match uuid",
    "en_US": "The argument :\u0027resourceType\u0027 doesn\u0027t match uuid",
    "zh_CN": "参数: 资源类型（resourceType）与uuid不匹配",
    "arguments": [],
    "line": 128,
    "fileName": "src/main/java/org/zstack/tag/TagApiInterceptor.java"
  },
  {
    "raw": "Duplicated Tag[tag:%s, type:%s, resourceType:%s, resourceUuid:%s]",
    "en_US": "Duplicated Tag[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]",
    "zh_CN": "标签[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]重复",
    "arguments": [
      "tag",
      "type",
      "resourceType",
      "resourceUuid"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "no system tag matches[%s] for resourceType[%s]",
    "en_US": "no system tag matches[{0}] for resourceType[{1}]",
    "zh_CN": "没有系统标签[{0}]与资源类型[{1}]匹配",
    "arguments": [
      "tag",
      "resourceType"
    ],
    "line": 755,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "validate system tag [%s] for resourceType[%s] failed",
    "en_US": "validate system tag [{0}] for resourceType[{1}] failed",
    "zh_CN": "验证ResourceType[{1}]的系统标记[{0}]失败",
    "arguments": [
      "tag",
      "resourceType"
    ],
    "line": 761,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "no system tag matches %s",
    "en_US": "no system tag matches {0}",
    "zh_CN": "没有找到匹配{0}的系统标签",
    "arguments": [
      "tag"
    ],
    "line": 944,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "tag[%s] is only for admin",
    "en_US": "tag[{0}] is only for admin",
    "zh_CN": "标记[{0}]仅适用于管理员",
    "arguments": [
      "tag"
    ],
    "line": 979,
    "fileName": "src/main/java/org/zstack/tag/TagManagerImpl.java"
  },
  {
    "raw": "resource[uuids:%s] is not owned by account[uuid:%s]",
    "en_US": "resource[uuids:{0}] is not owned by account[uuid:{1}]",
    "zh_CN": "资源[uuid：{0}]不归帐户[uuid：{1}]所有",
    "arguments": [
      "invalidUuids",
      "expectAccountUuid"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "cannot update simple tag pattern format",
    "en_US": "cannot update simple tag pattern format",
    "zh_CN": "无法更新简单标记模式格式",
    "arguments": [],
    "line": 85,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "you can only update token name",
    "en_US": "you can only update token name",
    "zh_CN": "您只能更新令牌名称",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "simple tag pattern has no tokens",
    "en_US": "simple tag pattern has no tokens",
    "zh_CN": "简单标记模式没有标记",
    "arguments": [],
    "line": 95,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "illegal tag uuids %s, tag type must be simple,",
    "en_US": "illegal tag uuids {0}, tag type must be simple,",
    "zh_CN": "标记uuid{0}非法，标记类型必须简单。",
    "arguments": [
      "sub"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "Invalid color specification[%s], must like #FF00FF",
    "en_US": "Invalid color specification[{0}], must like #FF00FF",
    "zh_CN": "颜色规范[{0}]无效，必须类似于#FF00FF",
    "arguments": [
      "color"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "Get format[%s], format must like that name::{tokenName1}::{tokenName2} ... ::{tokenNameN} or {tokenName1}::{tokenName2} ... ::{tokenNameN} Name cannot contain \u0027{}:\u0027",
    "en_US": "Get format[{0}], format must like that name::{tokenName1}::{tokenName2} ... ::{tokenNameN} or {tokenName1}::{tokenName2} ... ::{tokenNameN} Name cannot contain \u0027{}:\u0027",
    "zh_CN": "获取格式[{0}]，格式必须类似于名称：{TokenName1}：{TokenName2}.：{TOKENNAMEn}或{TOKENNAME1}：？TokenNAME2}.：？TokENNAMEn}名称不能包含“{}：”",
    "arguments": [
      "format"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "all tokens %s must be specify",
    "en_US": "all tokens {0} must be specify",
    "zh_CN": "必须指定所有令牌{0}",
    "arguments": [
      "formatTokens"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java"
  },
  {
    "raw": "resource[uuid:%s] has been attached %d tags, cannot attach any more",
    "en_US": "resource[uuid:{0}] has been attached {1} tags, cannot attach any more",
    "zh_CN": "资源[uuid：{0}]已附加{1}个标记，无法再附加",
    "arguments": [
      "resourceUuid",
      "attachedCount"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/tag2/TagPatternBase.java"
  },
  {
    "raw": "unable to find any TemplateConfigs: [templateUuid: %s]",
    "en_US": "unable to find any TemplateConfigs: [templateUuid: {0}]",
    "zh_CN": "找不到任何TemplateConfigs：[templateUuid：{0}]",
    "arguments": [
      "msg.getTemplateUuid()"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java"
  },
  {
    "raw": "Unable to find any TemplateConfigs: [templateUuid: %s]",
    "en_US": "Unable to find any TemplateConfigs: [templateUuid: {0}]",
    "zh_CN": "找不到任何TemplateConfigs：[templateUuid：{0}]",
    "arguments": [
      "msg.getTemplateUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java"
  },
  {
    "raw": "Unable to find TemplateConfig[category: %s, name: %s, templateUuid: %s]",
    "en_US": "Unable to find TemplateConfig[category: {0}, name: {1}, templateUuid: {2}]",
    "zh_CN": "找不到TemplateConfig[类别：{0}，名称：{1}，Templateuuid：{2}]",
    "arguments": [
      "msg.getCategory()",
      "msg.getName()",
      "msg.getTemplateUuid()"
    ],
    "line": 128,
    "fileName": "src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java"
  },
  {
    "raw": "illegal argument %s",
    "en_US": "illegal argument {0}",
    "zh_CN": "非法参数{0}",
    "arguments": [
      "algType"
    ],
    "line": 123,
    "fileName": "src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java"
  },
  {
    "raw": "failed to decrypt data",
    "en_US": "failed to decrypt data",
    "zh_CN": "无法解密数据",
    "arguments": [],
    "line": 136,
    "fileName": "src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java"
  },
  {
    "raw": "failed to parse MS envelope: %s, %s",
    "en_US": "failed to parse MS envelope: {0}, {1}",
    "zh_CN": "无法分析MS信封：{0}，{1}",
    "arguments": [
      "e.getMessage()",
      "cipherText"
    ],
    "line": 399,
    "fileName": "src/main/java/org/zstack/testlib/premium/crypto/SecurityMachineSimulator.java"
  },
  {
    "raw": "ticket[uuid:%s, name:%s] can only be updated after being cancelled, current status is %s",
    "en_US": "ticket[uuid:{0}, name:{1}] can only be updated after being cancelled, current status is {2}",
    "zh_CN": "工单[uuid:{0}, name:{1}]当前状态为{2}，不支持更新操作",
    "arguments": [
      "self.getUuid()",
      "self.getName()",
      "self.getStatus()"
    ],
    "line": 235,
    "fileName": "src/main/java/org/zstack/ticket/TicketBase.java"
  },
  {
    "raw": "operation denied. the operator needs to be done by account/virtual ID[uuid:%s]",
    "en_US": "operation denied. the operator needs to be done by account/virtual ID[uuid:{0}]",
    "zh_CN": "操作无效，需要account/virtual ID[uuid:{0}]才能完成操作",
    "arguments": [
      "operator.operatorUuid"
    ],
    "line": 299,
    "fileName": "src/main/java/org/zstack/ticket/TicketBase.java"
  },
  {
    "raw": "Ticket flow collection[uuid:%s] is invalid, contact admin to correct it",
    "en_US": "Ticket flow collection[uuid:{0}] is invalid, contact admin to correct it",
    "zh_CN": "当前工单流程[uuid:{0}]失效，请联系admin修复",
    "arguments": [
      "msg.getFlowCollectionUuid()"
    ],
    "line": 97,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "Ticket flow collection[uuid:%s] is disable, can not be used",
    "en_US": "Ticket flow collection[uuid:{0}] is disable, can not be used",
    "zh_CN": "工单流程[uuid:{0}]处于禁用状态，无法被使用",
    "arguments": [
      "msg.getFlowCollectionUuid()"
    ],
    "line": 102,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "no accountSystemType[%s] defined in system",
    "en_US": "no accountSystemType[{0}] defined in system",
    "zh_CN": "未定义的accountSystemType[{0}]类型",
    "arguments": [
      "msg.getAccountSystemType()"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "not matched ticket type found",
    "en_US": "not matched ticket type found",
    "zh_CN": "未找到匹配的票证类型",
    "arguments": [],
    "line": 74,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "Ticket flow collection[uuid:%s] not matches ticket type[uuid:%s]",
    "en_US": "Ticket flow collection[uuid:{0}] not matches ticket type[uuid:{1}]",
    "zh_CN": "票证流集合[uuid：{0}]与票证类型[uuid：{1}]不匹配",
    "arguments": [
      "msg.getFlowCollectionUuid()",
      "ticketTypeUuid"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "no matched ticket flow collection or no default ticket flow collection found, you must specify the flowCollectionUuid or create a default ticket flow collection in system",
    "en_US": "no matched ticket flow collection or no default ticket flow collection found, you must specify the flowCollectionUuid or create a default ticket flow collection in system",
    "zh_CN": "找不到匹配的票证流集合或找不到默认的票证流集合，必须指定FlowCollectionuuid或在系统中创建默认的票证流集合",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "invalid request. no API[%s] found",
    "en_US": "invalid request. no API[{0}] found",
    "zh_CN": "无效的请求。找不到API[{0}]",
    "arguments": [
      "req.apiName"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "invalid request, cannot create API[%s] from apiBody, %s",
    "en_US": "invalid request, cannot create API[{0}] from apiBody, {1}",
    "zh_CN": "无效的请求，无法通过apiBody创建API[{0}]，{1}",
    "arguments": [
      "clz",
      "e.getMessage()"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java"
  },
  {
    "raw": "operation denied. the ticket is in status of %s, cannot do the operation[%s]",
    "en_US": "operation denied. the ticket is in status of {0}, cannot do the operation[{1}]",
    "zh_CN": "操作无效。当前工单状态为{0}，无法进行操作[{0}]",
    "arguments": [
      "this",
      "event"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/ticket/entity/TicketStatus.java"
  },
  {
    "raw": "No api class[name:%s] is found",
    "en_US": "No api class[name:{0}] is found",
    "zh_CN": "找不到API类[名称：{0}]",
    "arguments": [
      "request.apiName"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java"
  },
  {
    "raw": "failed to get value from event: %s",
    "en_US": "failed to get value from event: {0}",
    "zh_CN": "无法从事件中获取值：{0}",
    "arguments": [
      "exception.getMessage()"
    ],
    "line": 70,
    "fileName": "src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java"
  },
  {
    "raw": "operation denied because the ticket submitter[uuid:%s] has been deleted, the ticket[uuid:%s, name:%s] can only be deleted now",
    "en_US": "operation denied because the ticket submitter[uuid:{0}] has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now",
    "zh_CN": "操作无效。因为工单的提交者[uuid:{0}]已经被删除，工单[uuid:{1}, name:{2}]仅支持删除操作",
    "arguments": [
      "ctx.getVirtualIDUuid()",
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 44,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "operation denied because the project[uuid:%s] of the ticket has been deleted, the ticket[uuid:%s, name:%s] can only be deleted now",
    "en_US": "operation denied because the project[uuid:{0}] of the ticket has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now",
    "zh_CN": "操作无效。因为工单所属的项目[uuid:{0}]已经被删除，工单[uuid:{1}, name:{2}]仅支持删除操作",
    "arguments": [
      "ctx.getProjectUuid()",
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 49,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "operation denied because flow collection[uuid:%s] it not belong the project[uuid:%s]",
    "en_US": "operation denied because flow collection[uuid:{0}] it not belong the project[uuid:{1}]",
    "zh_CN": "操作无效，因为流程[uuid:{0}]不属于项目[uuid:{1}]",
    "arguments": [],
    "line": 61,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "the virtual ID[uuid:%s] is not the owner of the ticket[uuid:%s, name:%s]",
    "en_US": "the virtual ID[uuid:{0}] is not the owner of the ticket[uuid:{1}, name:{2}]",
    "zh_CN": "virtual ID[uuid:{0}]不是工单[uuid:{1}, name:{2}]的所有者",
    "arguments": [
      "msg.getSession().getUserUuid()",
      "self.getUuid()",
      "self.getName()"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java"
  },
  {
    "raw": "approver is removed from project or deleted, flow collection changed to invalid, reject this ticket",
    "en_US": "approver is removed from project or deleted, flow collection changed to invalid, reject this ticket",
    "zh_CN": "审批人已经离开项目或者被删除，流程失效，因此驳回当前工单",
    "arguments": [],
    "line": 194,
    "fileName": "src/main/java/org/zstack/ticket/iam2/IAM2TicketManager.java"
  },
  {
    "raw": "at least one flow is needed for create flow collection",
    "en_US": "at least one flow is needed for create flow collection",
    "zh_CN": "创建流程时需要至少一个步骤",
    "arguments": [],
    "line": 117,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "wrong approver title %s, valid value is %s",
    "en_US": "wrong approver title {0}, valid value is {1}",
    "zh_CN": "错误的审批人职位{0}, 有效输入为{1}",
    "arguments": [
      "flow.approverTitle",
      "approveTitles"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "can not find IAM2VirtualIDVO[uuid:%s]",
    "en_US": "can not find IAM2VirtualIDVO[uuid:{0}]",
    "zh_CN": "找不到对应的IAM2VirtualIDVO[uuid:{0}]",
    "arguments": [
      "flow.approverUuid"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "name is needed when create a flow",
    "en_US": "name is needed when create a flow",
    "zh_CN": "创建步骤时需要填写名称",
    "arguments": [],
    "line": 62,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "one ticket type can only have one matches flow collection",
    "en_US": "one ticket type can only have one matches flow collection",
    "zh_CN": "一个票证类型只能有一个匹配流集合",
    "arguments": [],
    "line": 79,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "admin or iam2 operation is required as approver of the last flow",
    "en_US": "admin or iam2 operation is required as approver of the last flow",
    "zh_CN": "需要管理员或IAM2操作作为最后一个流的批准人",
    "arguments": [],
    "line": 102,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "name cannot be null",
    "en_US": "name cannot be null",
    "zh_CN": "名称不能为空",
    "arguments": [],
    "line": 128,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "approverUuid cannot be null",
    "en_US": "approverUuid cannot be null",
    "zh_CN": "Approveruuid不能为空",
    "arguments": [],
    "line": 132,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "virtual id[uuid:%s] not belong to project[uuid:%s]",
    "en_US": "virtual id[uuid:{0}] not belong to project[uuid:{1}]",
    "zh_CN": "virtual id[uuid:{0}]不属于项目[uuid:{1}]",
    "arguments": [
      "flow.approverUuid",
      "projectUuid"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java"
  },
  {
    "raw": "Unsupported AccountType：%s",
    "en_US": "Unsupported AccountType：{0}",
    "zh_CN": "不支持的帐户类型：{0}",
    "arguments": [
      "loginType"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationIAM2Backend.java"
  },
  {
    "raw": "two factor authenticator is not enabled",
    "en_US": "two factor authenticator is not enabled",
    "zh_CN": "双因子认证未启用",
    "arguments": [],
    "line": 124,
    "fileName": "src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java"
  },
  {
    "raw": "two factor authentication failed because there is no system tags in msg",
    "en_US": "two factor authentication failed because there is no system tags in msg",
    "zh_CN": "双因素身份验证失败，因为MSG中没有系统标记",
    "arguments": [],
    "line": 484,
    "fileName": "src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java"
  },
  {
    "raw": "two factor authentication failed because there is no token in msg system tag",
    "en_US": "two factor authentication failed because there is no token in msg system tag",
    "zh_CN": "双因素身份验证失败，因为MSG系统标记中没有令牌",
    "arguments": [],
    "line": 490,
    "fileName": "src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java"
  },
  {
    "raw": "two factor authentication failed because there is no secret for %s:%s",
    "en_US": "two factor authentication failed because there is no secret for {0}:{1}",
    "zh_CN": "双因素身份验证失败，因为{0}没有密码：{1}",
    "arguments": [
      "loginContext.getLoginBackendType()",
      "info.getUserUuid()"
    ],
    "line": 497,
    "fileName": "src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java"
  },
  {
    "raw": "failed to verify two factor authentication code",
    "en_US": "failed to verify two factor authentication code",
    "zh_CN": "验证双因素身份验证代码失败",
    "arguments": [],
    "line": 507,
    "fileName": "src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java"
  },
  {
    "raw": "Operation [%s] is forbidden during grayscale upgrade",
    "en_US": "Operation [{0}] is forbidden during grayscale upgrade",
    "zh_CN": "灰度升级期间禁止操作[{0}]",
    "arguments": [
      "msg.getClass().getName()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/upgrade/UpgradeManagerImpl.java"
  },
  {
    "raw": "host[%s] has started more than 64 usb redirect port",
    "en_US": "host[{0}] has started more than 64 usb redirect port",
    "zh_CN": "物理机[{0}]已启动64个以上的USB重定向端口",
    "arguments": [
      "usbInv.getHostUuid()"
    ],
    "line": 267,
    "fileName": "src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java"
  },
  {
    "raw": "unable to start usb server on host[%s], because host is not connected",
    "en_US": "unable to start usb server on host[{0}], because host is not connected",
    "zh_CN": "无法启动物理机[{0}]上的USB服务器，因为物理机未连接",
    "arguments": [
      "host.getUuid()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java"
  },
  {
    "raw": "failed to start usbredirect server from host[uuid:%s]",
    "en_US": "failed to start usbredirect server from host[uuid:{0}]",
    "zh_CN": "无法从物理机[uuid：{0}]启动USBDirect服务器",
    "arguments": [
      "usbInv.getHostUuid()"
    ],
    "line": 294,
    "fileName": "src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java"
  },
  {
    "raw": "no candidate host with the usb device have enough cpu / memory or Enabled/Connected status",
    "en_US": "no candidate host with the usb device have enough cpu / memory or Enabled/Connected status",
    "zh_CN": "usb设备所在的物理机都不满足cpu / memory或状态的条件",
    "arguments": [],
    "line": 83,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceAllocatorFactory.java"
  },
  {
    "raw": "%s can only be called by admin account",
    "en_US": "{0} can only be called by admin account",
    "zh_CN": "{0}只能被admin账户调用",
    "arguments": [
      "msg.getClass().getSimpleName()"
    ],
    "line": 60,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "You can attach at most %s USB 1.0 devices to one vm instance.",
    "en_US": "You can attach at most {0} USB 1.0 devices to one vm instance.",
    "zh_CN": "最多可以绑定{0}个USB 1.0设备到一个云主机上",
    "arguments": [
      "UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "You can attach at most %s USB 2.0 devices to one vm instance.",
    "en_US": "You can attach at most {0} USB 2.0 devices to one vm instance.",
    "zh_CN": "最多可以绑定{0}个USB 2.0设备到一个云主机上",
    "arguments": [
      "UsbDeviceConstants.MAX_USB_2_DEVICE_PER_VM"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "You can attach at most %s USB 3.0 devices to one vm instance.",
    "en_US": "You can attach at most {0} USB 3.0 devices to one vm instance.",
    "zh_CN": "最多可以绑定{0}个USB 3.0设备到一个云主机上",
    "arguments": [
      "UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] has already been attached to another vm[uuid:%s]",
    "en_US": "the usb device[uuid:{0}] has already been attached to another vm[uuid:{1}]",
    "zh_CN": "USB设备[uuid:{0}]已经被绑定在其他的云主机[uuid:{1}]",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "usb.getVmInstanceUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] is not in attachable state of %s",
    "en_US": "the usb device[uuid:{0}] is not in attachable state of {1}",
    "zh_CN": "USB设备[uuid:{0}]不处于可绑定的状态[{1}]",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "UsbDeviceState.Enabled"
    ],
    "line": 134,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the vm instance[uuid:%s] is not in attachable state of %s for usb device",
    "en_US": "the vm instance[uuid:{0}] is not in attachable state of {1} for usb device",
    "zh_CN": "云主机[uuid:{0}]不能绑定{1}状态的USB设备",
    "arguments": [
      "msg.getVmInstanceUuid()",
      "allowedVmInstanceAttachableState"
    ],
    "line": 142,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the host that the usb device[uuid:%s] pluged in is not in valid state[%s] or status[%s]",
    "en_US": "the host that the usb device[uuid:{0}] pluged in is not in valid state[{1}] or status[{2}]",
    "zh_CN": "插上USB设备的物理机没有处于一种有效的状态[{1}、{2}]",
    "arguments": [
      "usb.getHostUuid()",
      "msg.getUsbDeviceUuid()",
      "HostState.Enabled",
      "HostStatus.Connected"
    ],
    "line": 152,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] has different hostUuid than devices that already attached to the vm instance[uuid:%s]",
    "en_US": "the usb device[uuid:{0}] has different hostUuid than devices that already attached to the vm instance[uuid:{1}]",
    "zh_CN": "与已经绑定云主机实例相比，USB设备[uuid:{0}]有不同的物理机uuid",
    "arguments": [
      "usb.getUuid()",
      "vm.getUuid()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the usb device[uuid:%s] is not attached to any vm instance.",
    "en_US": "the usb device[uuid:{0}] is not attached to any vm instance.",
    "zh_CN": "USB设备[uuid:{0}]不能绑定任何云主机实例",
    "arguments": [
      "usb.getUuid()"
    ],
    "line": 177,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "the vm instance that the usb device[uuid:%s] is attached to is not in detachable state of %s",
    "en_US": "the vm instance that the usb device[uuid:{0}] is attached to is not in detachable state of {1}",
    "zh_CN": "绑定了USB设备[uuid:{0}]的云主机实例处于一种不能解绑的状态{1}",
    "arguments": [
      "usb.getUuid()",
      "allowedVmInstanceDetachableState"
    ],
    "line": 185,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s] not in attachable state of %s for usb device",
    "en_US": "vm instance[uuid:{0}] not in attachable state of {1} for usb device",
    "zh_CN": "云主机实例[uuid:{0}]对于USB设备没有处于一种可绑定的状态{1}",
    "arguments": [
      "vm.getUuid()",
      "allowedVmInstanceAttachableState"
    ],
    "line": 195,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot disable usb device[uuid:%s] when it\u0027s attached to a vm instance",
    "en_US": "cannot disable usb device[uuid:{0}] when it\u0027s attached to a vm instance",
    "zh_CN": "当USB设备绑定到云主机上时不能禁用该USB设备",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 206,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "please umount all usb devices of the vm[%s] and try again",
    "en_US": "please umount all usb devices of the vm[{0}] and try again",
    "zh_CN": "请卸载云主机[{0}]的所有USB设备，然后重试",
    "arguments": [
      "VmInstanceUuid"
    ],
    "line": 218,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java"
  },
  {
    "raw": "cannot migrate vm[uuid:%s] because there are pci devices attached",
    "en_US": "cannot migrate vm[uuid:{0}] because there are pci devices attached",
    "zh_CN": "云主机[uuid:{0}]加载了pci设备无法迁移",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 795,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "the usb device[uuid:%s] has already been attached to vm[uuid:%s]",
    "en_US": "the usb device[uuid:{0}] has already been attached to vm[uuid:{1}]",
    "zh_CN": "USB设备[uuid：{0}]已连接到云主机[uuid：{1}]",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "usb.getVmInstanceUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "PassThrough only support use on vm running host",
    "en_US": "PassThrough only support use on vm running host",
    "zh_CN": "直通仅支持在运行物理机的云主机上使用",
    "arguments": [],
    "line": 181,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot attach the usb device[uuid:%s] to vm[uuid:%s], possibly reasons include: the device is not enabled or had been attached to a vm, or the device and the vm are not on same host.",
    "en_US": "cannot attach the usb device[uuid:{0}] to vm[uuid:{1}], possibly reasons include: the device is not enabled or had been attached to a vm, or the device and the vm are not on same host.",
    "zh_CN": "无法将USB设备[uuid：{0}]连接到VM[uuid：{1}]，原因可能包括：设备未启用或已连接到VM，或者设备和VM不在同一物理机上。",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "msg.getVmInstanceUuid()"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "usb is already bound to vm[uuid:%s] and cannot be bound to other vm",
    "en_US": "usb is already bound to vm[uuid:{0}] and cannot be bound to other vm",
    "zh_CN": "USB已绑定到VM[uuid：{0}]，无法绑定到其他VM",
    "arguments": [
      "deviceVO.getVmInstanceUuid()"
    ],
    "line": 558,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "vm[%s] cannot start because usb redirect host is not connected",
    "en_US": "vm[{0}] cannot start because usb redirect host is not connected",
    "zh_CN": "云主机[{0}]无法启动，因为未连接USB重定向物理机",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 731,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot migrate vm[uuid:%s] because there are usb devices attached by passthrough",
    "en_US": "cannot migrate vm[uuid:{0}] because there are usb devices attached by passthrough",
    "zh_CN": "不能迁移云主机[uuid:{0}]，因为云主机通过直连的方式绑定了USB设备",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 744,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "cannot migrate root volume[uuid:%s] because there are usb devices attached",
    "en_US": "cannot migrate root volume[uuid:{0}] because there are usb devices attached",
    "zh_CN": "不能迁移云盘[uuid:{0}]，因为USB设备已经被绑定",
    "arguments": [
      "msg.getVolumeUuid()"
    ],
    "line": 777,
    "fileName": "src/main/java/org/zstack/usbDevice/UsbDeviceManager.java"
  },
  {
    "raw": "not the time to clean",
    "en_US": "not the time to clean",
    "zh_CN": "不是打扫的时候。",
    "arguments": [],
    "line": 43,
    "fileName": "src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java"
  },
  {
    "raw": "conversionHost[uuid:%s, hostUuid:%s] is not Connected",
    "en_US": "conversionHost[uuid:{0}, hostUuid:{1}] is not Connected",
    "zh_CN": "ConversionHost[uuid：{0}，Hostuuid：{1}]未连接",
    "arguments": [
      "conversionHost.getUuid()",
      "conversionHost.getHostUuid()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java"
  },
  {
    "raw": "waiting host[uuid:%s] and primaryStorage[uuid:%s] Connected...",
    "en_US": "waiting host[uuid:{0}] and primaryStorage[uuid:{1}] Connected...",
    "zh_CN": "正在等待的物理机[uuid：{0}]和主存储[uuid：{1}]已连接..",
    "arguments": [
      "hostUuid",
      "psUuid"
    ],
    "line": 91,
    "fileName": "src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java"
  },
  {
    "raw": "host[uuid:%s] is not Connected",
    "en_US": "host[uuid:{0}] is not Connected",
    "zh_CN": "物理机[uuid：{0}]未连接",
    "arguments": [
      "hostUuid"
    ],
    "line": 149,
    "fileName": "src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java"
  },
  {
    "raw": "primaryStorage[uuid%s] is not Connected",
    "en_US": "primaryStorage[uuid{0}] is not Connected",
    "zh_CN": "主存储[uuid{0}]未连接",
    "arguments": [
      "primaryStorageUuid"
    ],
    "line": 153,
    "fileName": "src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java"
  },
  {
    "raw": "Not allowed same mac [%s]",
    "en_US": "Not allowed same mac [{0}]",
    "zh_CN": "不允许存在相同的MAC地址[{0}]",
    "arguments": [
      "duplicateMac.get()"
    ],
    "line": 186,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "Can\u0027t add same uuid in the l3Network,uuid: %s",
    "en_US": "Can\u0027t add same uuid in the l3Network,uuid: {0}",
    "zh_CN": "不能添加相同的uuid{0}在三层网络中",
    "arguments": [
      "duplicateElements.get(0)"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "l3Network[uuid:%s] is Disabled, can not create vm on it",
    "en_US": "l3Network[uuid:{0}] is Disabled, can not create vm on it",
    "zh_CN": "三层网络[uuid:{0}]没有被启用，不能从这个三层网络创建云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "l3Network[uuid:%s] is system network, can not create user vm on it",
    "en_US": "l3Network[uuid:{0}] is system network, can not create user vm on it",
    "zh_CN": "三层网络[uuid:{0}]是系统网络，不能在这上面创建云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 220,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "zone[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "zone[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "区域[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getZoneUuid()"
    ],
    "line": 252,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "cluster[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "cluster[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "集群[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getClusterUuid()"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s] is specified but it\u0027s Disabled, can not create vm from it",
    "en_US": "host[uuid:{0}] is specified but it\u0027s Disabled, can not create vm from it",
    "zh_CN": "物理机[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "host[uuid:%s] is specified but it\u0027s connection status is %s, can not create vm from it",
    "en_US": "host[uuid:{0}] is specified but it\u0027s connection status is {1}, can not create vm from it",
    "zh_CN": "物理机[uuid:{0}]虽然被指定了但是它的连接状态是{1}，不能从这上面创建云主机",
    "arguments": [
      "msg.getHostUuid()",
      "connectionState"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "defaultL3NetworkUuid[uuid:%s] is not in l3NetworkUuids%s",
    "en_US": "defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids{1}",
    "zh_CN": "默认三层网络的uuid是[uuid:{0}]，不在三层网络uuid们中{1}",
    "arguments": [
      "msg.getDefaultL3NetworkUuid()",
      "msg.getL3NetworkUuids()"
    ],
    "line": 234,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null",
    "en_US": "there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null",
    "zh_CN": "在三层网络uuid们中有很多三层网络被指定了，但是默认三层网络的uuid是空的",
    "arguments": [],
    "line": 230,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "the status of host[uuid:%s] must be Connected",
    "en_US": "the status of host[uuid:{0}] must be Connected",
    "zh_CN": "物理机[uuid：{0}]的状态必须为已连接",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 84,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "v2v conversion host storage path must be absolute path",
    "en_US": "v2v conversion host storage path must be absolute path",
    "zh_CN": "V2V转换物理机存储路径必须为绝对路径",
    "arguments": [],
    "line": 97,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "invalid v2v url: %s",
    "en_US": "invalid v2v url: {0}",
    "zh_CN": "无效的V2V URL：{0}",
    "arguments": [
      "msg.getUrl()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "vm instance[uuid:%s] does not exist or is not a vmware vm",
    "en_US": "vm instance[uuid:{0}] does not exist or is not a vmware vm",
    "zh_CN": "云主机实例[uuid：{0}]不存在或不是VMware云主机",
    "arguments": [
      "srcVmUuid"
    ],
    "line": 131,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "conversionHostUuid should not be null",
    "en_US": "conversionHostUuid should not be null",
    "zh_CN": "ConversionHostuuid不应为空",
    "arguments": [],
    "line": 138,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "underlying host of conversion host[uuid:%s] should be Connected",
    "en_US": "underlying host of conversion host[uuid:{0}] should be Connected",
    "zh_CN": "迁移服务器[uuid:{0}]所关联的物理机应处于己连接状态",
    "arguments": [
      "msg.getConversionHostUuid()"
    ],
    "line": 148,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "conversion host[uuid:%s] cannot connect to primary storage[uuid:%s]",
    "en_US": "conversion host[uuid:{0}] cannot connect to primary storage[uuid:{1}]",
    "zh_CN": "转换物理机[uuid：{0}]无法连接到主存储[uuid：{1}]",
    "arguments": [
      "msg.getConversionHostUuid()",
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 164,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "Duplicate mac address %s",
    "en_US": "Duplicate mac address {0}",
    "zh_CN": "重复的MAC地址{0}",
    "arguments": [
      "duplicateMacs"
    ],
    "line": 197,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] is not supported for v2v",
    "en_US": "primary storage[uuid:{0}] is not supported for v2v",
    "zh_CN": "V2V不支持主存储[uuid：{0}]",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 289,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "primary storage[uuid:%s] is neither Enabled nor Connected",
    "en_US": "primary storage[uuid:{0}] is neither Enabled nor Connected",
    "zh_CN": "主存储[uuid：{0}]既未启用也未连接",
    "arguments": [
      "msg.getPrimaryStorageUuid()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "there are some v2v jobs in progress. can not attach volume[%s] to host[%s]",
    "en_US": "there are some v2v jobs in progress. can not attach volume[{0}] to host[{1}]",
    "zh_CN": "有一些V2V作业正在进行中。无法将卷[{0}]附加到物理机[{1}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getHostUuid()"
    ],
    "line": 302,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "there are some v2v jobs in progress. can not detach volume[%s] from host[%s]",
    "en_US": "there are some v2v jobs in progress. can not detach volume[{0}] from host[{1}]",
    "zh_CN": "有一些V2V作业正在进行中。无法从物理机[{1}]分离卷[{0}]",
    "arguments": [
      "msg.getVolumeUuid()",
      "msg.getHostUuid()"
    ],
    "line": 313,
    "fileName": "src/main/java/org/zstack/v2v/V2VApiInterceptor.java"
  },
  {
    "raw": "cannot reserve %s bytes on the conversion host[uuid:%s], it\u0027s short of available capacity",
    "en_US": "cannot reserve {0} bytes on the conversion host[uuid:{1}], it\u0027s short of available capacity",
    "zh_CN": "无法在转换物理机[uuid：{1}]上保留{0}字节，可用容量不足",
    "arguments": [
      "reserveSize",
      "conversionHostVO.getUuid()"
    ],
    "line": 98,
    "fileName": "src/main/java/org/zstack/v2v/V2VConversionHostCapacityUpdater.java"
  },
  {
    "raw": "Unable to find L3Network[uuid:%s] to start the current vm, it may have been deleted, Operation suggestion: delete this vm, recreate a new vm",
    "en_US": "Unable to find L3Network[uuid:{0}] to start the current vm, it may have been deleted, Operation suggestion: delete this vm, recreate a new vm",
    "zh_CN": "找不到启动当前云主机的L3Network[uuid：{0}]，该云主机可能已被删除，操作建议：删除该云主机，重新创建新的云主机",
    "arguments": [
      "l3Uuid"
    ],
    "line": 597,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "invalid network bandwidth[%s], it is not a number",
    "en_US": "invalid network bandwidth[{0}], it is not a number",
    "zh_CN": "错误的网络带宽[{0}]，这不是数字",
    "arguments": [
      "bandwidth"
    ],
    "line": 1207,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "networkInboundBandwidth execeds the max value 32G bps",
    "en_US": "networkInboundBandwidth execeds the max value 32G bps",
    "zh_CN": "超过下行网络带宽超过最大值32G bps",
    "arguments": [],
    "line": 1204,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "can not find factory for src vm[url:%s, v2vType:%s]",
    "en_US": "can not find factory for src vm[url:{0}, v2vType:{1}]",
    "zh_CN": "找不到SRC VM[URL：{0}，v2vType：{1}]的工厂",
    "arguments": [
      "msg.getUrl()",
      "msg.getType()"
    ],
    "line": 661,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "there has been a v2v conversion host with hostUuid %s",
    "en_US": "there has been a v2v conversion host with hostUuid {0}",
    "zh_CN": "已存在Hostuuid为{0}的V2V转换物理机",
    "arguments": [
      "msg.getHostUuid()"
    ],
    "line": 921,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "invalid v2v qos systemtag",
    "en_US": "invalid v2v qos systemtag",
    "zh_CN": "V2V QoS系统标记无效",
    "arguments": [],
    "line": 1196,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "invalid network bandwidth[%s], it must be greater than or equal to 1048576",
    "en_US": "invalid network bandwidth[{0}], it must be greater than or equal to 1048576",
    "zh_CN": "网络带宽[{0}]无效，它必须大于或等于1048576",
    "arguments": [
      "bandwidth"
    ],
    "line": 1202,
    "fileName": "src/main/java/org/zstack/v2v/V2VManagerImpl.java"
  },
  {
    "raw": "can not find type for src vm[url:%s]",
    "en_US": "can not find type for src vm[url:{0}]",
    "zh_CN": "找不到SRC VM[URL：{0}]的类型",
    "arguments": [
      "srcVmUrl"
    ],
    "line": 118,
    "fileName": "src/main/java/org/zstack/v2v/V2VMsgTranslator.java"
  },
  {
    "raw": "missing VM uuid in \u0027srcVmUrl\u0027",
    "en_US": "missing VM uuid in \u0027srcVmUrl\u0027",
    "zh_CN": "“ srcvmurl ”中缺少VM uuid",
    "arguments": [],
    "line": 890,
    "fileName": "src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java"
  },
  {
    "raw": "No root volume found for VM: %s",
    "en_US": "No root volume found for VM: {0}",
    "zh_CN": "找不到VM的根卷：{0}",
    "arguments": [
      "srcVmUuid"
    ],
    "line": 956,
    "fileName": "src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java"
  },
  {
    "raw": "there is no available ip found in cidr %s on host %s, try reconnect host to refresh ips",
    "en_US": "there is no available ip found in cidr {0} on host {1}, try reconnect host to refresh ips",
    "zh_CN": "在物理机{1}上的CIDR{0}中找不到可用的IP，请尝试重新连接物理机以刷新IP",
    "arguments": [
      "cidr",
      "hostUuid"
    ],
    "line": 1575,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "v2v job[uuid:%s] is running",
    "en_US": "v2v job[uuid:{0}] is running",
    "zh_CN": "V2V迁移任务[uuid:{0}]正在运行",
    "arguments": [
      "job.getUuid()"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "failed to get virt-v2v uri for %s",
    "en_US": "failed to get virt-v2v uri for {0}",
    "zh_CN": "无法获取{0}的virt-v2v URI",
    "arguments": [
      "srcVmUrl"
    ],
    "line": 808,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "Failed to parse url %s",
    "en_US": "Failed to parse url {0}",
    "zh_CN": "无法分析URL{0}",
    "arguments": [
      "urlBuilder.toString()"
    ],
    "line": 1007,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "Target vm name can not contain those characters %s",
    "en_US": "Target vm name can not contain those characters {0}",
    "zh_CN": "目标VM名称不能包含这些字符{0}",
    "arguments": [
      "NOT_SUPPORTED_SPECIAL_CHARACTER"
    ],
    "line": 1288,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java"
  },
  {
    "raw": "There is already a long job[uuid:%s] convert vm from %s",
    "en_US": "There is already a long job[uuid:{0}] convert vm from {1}",
    "zh_CN": "已有长作业[uuid：{0}]从{1}转换VM",
    "arguments": [
      "jobUuid",
      "msg.getUrl()"
    ],
    "line": 120,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java"
  },
  {
    "raw": "Failed to update conversion host dependency",
    "en_US": "Failed to update conversion host dependency",
    "zh_CN": "无法更新转换物理机依赖关系",
    "arguments": [],
    "line": 145,
    "fileName": "src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java"
  },
  {
    "raw": "host is not connected",
    "en_US": "host is not connected",
    "zh_CN": "物理机未连接",
    "arguments": [],
    "line": 155,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "Syncing with VCenter[uuid:%s], please try again later.",
    "en_US": "Syncing with VCenter[uuid:{0}], please try again later.",
    "zh_CN": "正在与vCenter[uuid：{0}]同步，请稍后重试。",
    "arguments": [
      "self.getvCenterUuid()"
    ],
    "line": 244,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "vmUuid [%s] not found in ESX host [%s]",
    "en_US": "vmUuid [{0}] not found in ESX host [{1}]",
    "zh_CN": "在ESX物理机[{1}]中找不到VMuuid[{0}]",
    "arguments": [
      "vmUuid",
      "self.getUuid()"
    ],
    "line": 359,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "VM not found: %s",
    "en_US": "VM not found: {0}",
    "zh_CN": "找不到VM：{0}",
    "arguments": [
      "vmUuid"
    ],
    "line": 709,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to suspend VM [%s]: %s",
    "en_US": "failed to suspend VM [{0}]: {1}",
    "zh_CN": "无法挂起云主机[{0}]：{1}",
    "arguments": [
      "vmUuid",
      "VMwareHelper.exStr(ex)"
    ],
    "line": 635,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to suspend VM, task status: %s",
    "en_US": "failed to suspend VM, task status: {0}",
    "zh_CN": "无法挂起云主机，任务状态：{0}",
    "arguments": [
      "t.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 631,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to resume VM [%s]: %s",
    "en_US": "failed to resume VM [{0}]: {1}",
    "zh_CN": "无法恢复VM[{0}]：{1}",
    "arguments": [
      "vmUuid",
      "VMwareHelper.exStr(ex)"
    ],
    "line": 670,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to resume VM, task status: %s",
    "en_US": "failed to resume VM, task status: {0}",
    "zh_CN": "无法恢复VM，任务状态：{0}",
    "arguments": [
      "t.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 666,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to shutdown guest: %s, %s",
    "en_US": "failed to shutdown guest: {0}, {1}",
    "zh_CN": "无法关闭来宾：{0}，{1}",
    "arguments": [
      "vmUuid",
      "VMwareHelper.exStr(ex)"
    ],
    "line": 740,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "instance uuid [%s] not found",
    "en_US": "instance uuid [{0}] not found",
    "zh_CN": "未找到实例uuid[{0}]",
    "arguments": [
      "vmInv.getInstanceOfferingUuid()"
    ],
    "line": 1370,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "Image [%s] not found",
    "en_US": "Image [{0}] not found",
    "zh_CN": "未找到镜像[{0}]",
    "arguments": [
      "vmInv.getImageUuid()"
    ],
    "line": 1380,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "VM [%s] not found in vCenter",
    "en_US": "VM [{0}] not found in vCenter",
    "zh_CN": "在vCenter中找不到云主机[{0}]",
    "arguments": [
      "vmUuid"
    ],
    "line": 1479,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "failed to power on VM, task status: %s",
    "en_US": "failed to power on VM, task status: {0}",
    "zh_CN": "无法启动云主机，任务状态：{0}",
    "arguments": [
      "t.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 1654,
    "fileName": "src/main/java/org/zstack/vmware/ESXHost.java"
  },
  {
    "raw": "Nic driver %s not support yet",
    "en_US": "Nic driver {0} not support yet",
    "zh_CN": "NIC驱动程序{0}尚不支持",
    "arguments": [
      "msg.getDriverType()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "console password is not supported by vm[uuid:%s] on vCenter[version:%s]",
    "en_US": "console password is not supported by vm[uuid:{0}] on vCenter[version:{1}]",
    "zh_CN": "vCenter[版本：{1}]上的VM[uuid：{0}]不支持控制台密码",
    "arguments": [
      "msg.getUuid()",
      "vCenterVersion"
    ],
    "line": 67,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "vCenter login name expected.",
    "en_US": "vCenter login name expected.",
    "zh_CN": "vCenter登录名称为空",
    "arguments": [],
    "line": 73,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "domainName[%s] is neither an IPv4 address nor a valid hostname",
    "en_US": "domainName[{0}] is neither an IPv4 address nor a valid hostname",
    "zh_CN": "域名[{0}]不是一个IPv4地址或有效的物理机名",
    "arguments": [
      "msg.getDomainName()"
    ],
    "line": 77,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "vCenter [domainName:%s] has been added",
    "en_US": "vCenter [domainName:{0}] has been added",
    "zh_CN": "vCenter[domainName:{0}]已经被添加",
    "arguments": [
      "msg.getDomainName()"
    ],
    "line": 83,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "Cluster[uuid:%s] and L2[uuid:%s] belongs to different DCs",
    "en_US": "Cluster[uuid:{0}] and L2[uuid:{1}] belongs to different DCs",
    "zh_CN": "集群[uuid:{0}]和二层网络[uuid:{1}]属于不同的DC",
    "arguments": [
      "clusterUuid",
      "l2uuid"
    ],
    "line": 139,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "No hosts found within cluster: %s",
    "en_US": "No hosts found within cluster: {0}",
    "zh_CN": "在集群{0}中未发现物理机",
    "arguments": [
      "clusterUuid"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "vSwitch/dvSwitch not found: %s, or vSwitch: %s on different ESX host doesn\u0027t has same portgroup",
    "en_US": "vSwitch/dvSwitch not found: {0}, or vSwitch: {1} on different ESX host doesn\u0027t has same portgroup",
    "zh_CN": "vSwitch/dvSwitch未找到: {0}, 或者vSwitch: {1}在不同的ESX Host上的portgroup配置不同",
    "arguments": [
      "phyinf",
      "phyinf"
    ],
    "line": 184,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "L2[uuid:%s] doesn\u0027t belong to vCenter[uuid:%s] cluster[uuid:%s]",
    "en_US": "L2[uuid:{0}] doesn\u0027t belong to vCenter[uuid:{1}] cluster[uuid:{2}]",
    "zh_CN": "二层网络[uuid:{0}]不属于vCenter[uuid:{1}]集群[uuid:{2}]",
    "arguments": [
      "l2uuid",
      "vcvo.getUuid()",
      "clusterUuid"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/vmware/VCenterApiInterceptor.java"
  },
  {
    "raw": "No data-store attached to %s",
    "en_US": "No data-store attached to {0}",
    "zh_CN": "没有附加到{0}的主存储",
    "arguments": [
      "bsUuid"
    ],
    "line": 68,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "Data-store not found for %s",
    "en_US": "Data-store not found for {0}",
    "zh_CN": "找不到{0}的主存储",
    "arguments": [
      "bsUuid"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "unexpected protocol: %s",
    "en_US": "unexpected protocol: {0}",
    "zh_CN": "不支持的协议类型：{0}",
    "arguments": [
      "url.getProtocol()"
    ],
    "line": 103,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "%s already exists",
    "en_US": "{0} already exists",
    "zh_CN": "{0}已存在",
    "arguments": [
      "iinv.getName()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "vcenter backup storage do not support to cancel download image",
    "en_US": "vcenter backup storage do not support to cancel download image",
    "zh_CN": "vCenter备份存储不支持取消下载镜像",
    "arguments": [],
    "line": 153,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "image not found in BS",
    "en_US": "image not found in BS",
    "zh_CN": "在镜像服务器上未找到目标镜像",
    "arguments": [],
    "line": 203,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "not supported yet",
    "en_US": "not supported yet",
    "zh_CN": "尚不支持",
    "arguments": [],
    "line": 215,
    "fileName": "src/main/java/org/zstack/vmware/VCenterBackupStorage.java"
  },
  {
    "raw": "no candidate host for vcenter vm",
    "en_US": "no candidate host for vcenter vm",
    "zh_CN": "找不到VCenter的物理机去启动vm",
    "arguments": [],
    "line": 368,
    "fileName": "src/main/java/org/zstack/vmware/VCenterHostAllocatorFilterExtensionPoint.java"
  },
  {
    "raw": "Duplicated mac address[%s] on VM[uuid: %s, name: %s] and VM[uuid: %s, name: %s], and current mac address conflicting strategy is: %s.",
    "en_US": "Duplicated mac address[{0}] on VM[uuid: {1}, name: {2}] and VM[uuid: {3}, name: {4}], and current mac address conflicting strategy is: {5}.",
    "zh_CN": "云主机[uuid：{1}，名称：{2}]和云主机 [uuid：{3}，名称：{4}]中存在重复的mac地址[{0}]，当前的 MAC 地址冲突策略是：{5}。",
    "arguments": [
      "nNic.getMac()",
      "nVm.getUuid()",
      "nVm.getName()",
      "eVm.getUuid()",
      "eVm.getName()",
      "VCENTER_MAC_CONFLICT_STRATEGY_STRICT"
    ],
    "line": 1040,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "can\u0027t sync before datastores are separated",
    "en_US": "can\u0027t sync before datastores are separated",
    "zh_CN": "在分离主存储之前无法同步",
    "arguments": [],
    "line": 2040,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "There are tasks running on the VCenter[uuid:%s], please try again later.",
    "en_US": "There are tasks running on the VCenter[uuid:{0}], please try again later.",
    "zh_CN": "vCenter[uuid：{0}]上正在运行任务，请稍后重试。",
    "arguments": [
      "vcvo.getUuid()"
    ],
    "line": 3044,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "VCenter[uuid:%s] not found: ",
    "en_US": "VCenter[uuid:{0}] not found: ",
    "zh_CN": "VCenter[uuid:{0}]不存在",
    "arguments": [
      "msg.getVCenterUuid()"
    ],
    "line": 3134,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Login failed, please check your login parameters.",
    "en_US": "Login failed, please check your login parameters.",
    "zh_CN": "登录失败，请检查用户名密码是否正确",
    "arguments": [],
    "line": 3252,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "connect %s failed: %s",
    "en_US": "connect {0} failed: {1}",
    "zh_CN": "连接{0}失败:{1}",
    "arguments": [
      "msg.getDomainName()",
      "ex.getMessage()"
    ],
    "line": 3256,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Login to vCenter [%s] failed with user [%s],please check your network connection and credential.",
    "en_US": "Login to vCenter [{0}] failed with user [{1}],please check your network connection and credential.",
    "zh_CN": "用户[{1}]登录vCenter[{0}]失败，请检查您的网络连接和凭据",
    "arguments": [
      "msg.getDomainName()",
      "msg.getUsername()"
    ],
    "line": 3262,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Parse response failed from vCenter [%s],please check the port number[%d].",
    "en_US": "Parse response failed from vCenter [{0}],please check the port number[{1}].",
    "zh_CN": "解析vCenter[{0}]响应失败，请检查端口号[{1}]",
    "arguments": [
      "msg.getDomainName()",
      "msg.getPort() \u003d\u003d null ? 443 : msg.getPort()"
    ],
    "line": 3269,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "SSL handshake failed with vCenter [%s],because insecure TLS 1.0 is used. Manually enabled TLS 1.0 in jdk configuration if needed.",
    "en_US": "SSL handshake failed with vCenter [{0}],because insecure TLS 1.0 is used. Manually enabled TLS 1.0 in jdk configuration if needed.",
    "zh_CN": "与vCenter[{0}]的SSL握手失败，因为使用了不安全的TLS 1.0。如果需要，在JDK配置中手动启用TLS 1.0。",
    "arguments": [
      "msg.getDomainName()"
    ],
    "line": 3277,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "SSL handshake failed with vCenter [%s],please check the port number[%d].",
    "en_US": "SSL handshake failed with vCenter [{0}],please check the port number[{1}].",
    "zh_CN": "与vCenter[{0}]的SSL握手失败，请检查端口号[{1}]。",
    "arguments": [
      "msg.getDomainName()",
      "msg.getPort() \u003d\u003d null ? 443 : msg.getPort()"
    ],
    "line": 3283,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "No clustered compute resource found",
    "en_US": "No clustered compute resource found",
    "zh_CN": "未找到集群资源",
    "arguments": [],
    "line": 3359,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "No dvSwitch or qualified vSwitch found",
    "en_US": "No dvSwitch or qualified vSwitch found",
    "zh_CN": "未找到可使用的dvSwitch/vSwitch",
    "arguments": [],
    "line": 3363,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Datastore %s not found for vCenter %s",
    "en_US": "Datastore {0} not found for vCenter {1}",
    "zh_CN": "vCenter{1}中未找到Datastore{0}",
    "arguments": [
      "dsMorVal",
      "vcUuid"
    ],
    "line": 3546,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Missing host uuid in message",
    "en_US": "Missing host uuid in message",
    "zh_CN": "消息中缺失物理机uuid",
    "arguments": [],
    "line": 3936,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Missing destination host uuid.",
    "en_US": "Missing destination host uuid.",
    "zh_CN": "缺少目标物理机的uuid",
    "arguments": [],
    "line": 4035,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Destination host is not ESX host.",
    "en_US": "Destination host is not ESX host.",
    "zh_CN": "目标物理机不是Esx类型物理机",
    "arguments": [],
    "line": 4040,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Checking compatibility with vm %s failed on host %s",
    "en_US": "Checking compatibility with vm {0} failed on host {1}",
    "zh_CN": "检查物理机{1}与云主机{0}的兼容性失败",
    "arguments": [
      "vm.getConfig().getName()",
      "hvo.getManagementIp()"
    ],
    "line": 4079,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "HOST CPU/software NOT compatible",
    "en_US": "HOST CPU/software NOT compatible",
    "zh_CN": "物理机的CPU/software不兼容",
    "arguments": [],
    "line": 4075,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "Can\u0027t detach nic because the nic not supported to hot plugin in vcenter",
    "en_US": "Can\u0027t detach nic because the nic not supported to hot plugin in vcenter",
    "zh_CN": "无法卸载网络，因为该网卡不支持热拔插",
    "arguments": [],
    "line": 4137,
    "fileName": "src/main/java/org/zstack/vmware/VCenterManagerImpl.java"
  },
  {
    "raw": "No virtual disk manager",
    "en_US": "No virtual disk manager",
    "zh_CN": "无虚拟磁盘管理器",
    "arguments": [],
    "line": 228,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "No file manager",
    "en_US": "No file manager",
    "zh_CN": "没有文件管理器",
    "arguments": [],
    "line": 235,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "No file Datacenter",
    "en_US": "No file Datacenter",
    "zh_CN": "无文件数据中心",
    "arguments": [],
    "line": 244,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "failed to get VM[%s] root disk usage",
    "en_US": "failed to get VM[{0}] root disk usage",
    "zh_CN": "获取VM[{0}]根盘使用率失败",
    "arguments": [
      "vm.getName()"
    ],
    "line": 350,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "failed to get VM from installPath: %s",
    "en_US": "failed to get VM from installPath: {0}",
    "zh_CN": "在路径{0}下未找到云主机",
    "arguments": [
      "installPath"
    ],
    "line": 346,
    "fileName": "src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java"
  },
  {
    "raw": "VCenter not found",
    "en_US": "VCenter not found",
    "zh_CN": "找不到vCenter",
    "arguments": [],
    "line": 258,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "VCenter[%s] is not in operation status, current status: %s",
    "en_US": "VCenter[{0}] is not in operation status, current status: {1}",
    "zh_CN": "vCenter[{0}]未处于操作状态，当前状态：{1}",
    "arguments": [
      "vcvo.getUuid()",
      "vcvo.getStatus()"
    ],
    "line": 262,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "failed to connect to vCenter: %s: %s",
    "en_US": "failed to connect to vCenter: {0}: {1}",
    "zh_CN": "无法连接到vCenter：{0}：{1}",
    "arguments": [
      "vCenterUrl",
      "ex.getMessage()"
    ],
    "line": 328,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "vdisk not found: %s",
    "en_US": "vdisk not found: {0}",
    "zh_CN": "未找到虚拟磁盘：{0}",
    "arguments": [
      "installPath"
    ],
    "line": 460,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "list storage failed for %s",
    "en_US": "list storage failed for {0}",
    "zh_CN": "{0}的列表存储失败",
    "arguments": [
      "getVcDomainName(si)"
    ],
    "line": 536,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No datastore found for VM: %s",
    "en_US": "No datastore found for VM: {0}",
    "zh_CN": "找不到云主机{0}的主存储区",
    "arguments": [
      "vm.getName()"
    ],
    "line": 556,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "failed to set ESX VM uuid [%s:%s], because[%s]",
    "en_US": "failed to set ESX VM uuid [{0}:{1}], because[{2}]",
    "zh_CN": "无法设置ESX VM uuid[{0}：{1}]，因为[{2}]",
    "arguments": [
      "info.getName()",
      "info.getInstanceUuid()",
      "ex.getMessage()"
    ],
    "line": 610,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "template [%s] not found",
    "en_US": "template [{0}] not found",
    "zh_CN": "未找到模板[{0}]",
    "arguments": [
      "zsImageUuid"
    ],
    "line": 709,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "failed to search resource pool for host %s",
    "en_US": "failed to search resource pool for host {0}",
    "zh_CN": "搜索物理机{0}资源池失败",
    "arguments": [
      "host.getName()"
    ],
    "line": 786,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No resource pool found for host %s",
    "en_US": "No resource pool found for host {0}",
    "zh_CN": "在物理机{0}上未找到资源池",
    "arguments": [
      "host.getName()"
    ],
    "line": 782,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No unit number available for data disk %s",
    "en_US": "No unit number available for data disk {0}",
    "zh_CN": "没有可用于数据磁盘{0}的单元号",
    "arguments": [
      "installPath"
    ],
    "line": 2415,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "guest tools not installed or running for VM: %s",
    "en_US": "guest tools not installed or running for VM: {0}",
    "zh_CN": "云主机{0}上未安装或运行guest tools",
    "arguments": [
      "vm.getName()"
    ],
    "line": 1546,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "upload file failed for VM: %s",
    "en_US": "upload file failed for VM: {0}",
    "zh_CN": "云主机{0}上传文件失败",
    "arguments": [
      "vm.getName()"
    ],
    "line": 1581,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "list dvSwitch failed for %s",
    "en_US": "list dvSwitch failed for {0}",
    "zh_CN": "为{0}列出dvSwitch失败",
    "arguments": [
      "vcvo.getName()"
    ],
    "line": 1670,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "get vCenter cluster[%s] name failed",
    "en_US": "get vCenter cluster[{0}] name failed",
    "zh_CN": "获取vCenter群集[{0}]名称失败",
    "arguments": [
      "clusterUuid"
    ],
    "line": 1936,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "dvSwitch name [%s] not unique",
    "en_US": "dvSwitch name [{0}] not unique",
    "zh_CN": "dvSwitch名称[{0}]不唯一",
    "arguments": [
      "dvSwitch"
    ],
    "line": 2045,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create portgroup failed for host %s",
    "en_US": "create portgroup failed for host {0}",
    "zh_CN": "物理机{0}创建端口组失败",
    "arguments": [
      "hvo.getName()"
    ],
    "line": 2103,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create portgroup failed for host %s: because %s",
    "en_US": "create portgroup failed for host {0}: because {1}",
    "zh_CN": "物理机{0}创建端口组失败，因为{1}",
    "arguments": [
      "hvo.getName()",
      "((OperationFailureException) ex).getErrorCode().getDetails()"
    ],
    "line": 2100,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "Host[%s:%s] not found on vCenter",
    "en_US": "Host[{0}:{1}] not found on vCenter",
    "zh_CN": "vCenter上未找到物理机[{0}:{1}]",
    "arguments": [
      "hvo.getName()",
      "hvo.getUuid()"
    ],
    "line": 2067,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "portgroup[%s] already exists on host[%s] but with different vlanId(%d)",
    "en_US": "portgroup[{0}] already exists on host[{1}] but with different vlanId({2})",
    "zh_CN": "端口组[{0}]已存在于物理机[{1}]上，但具有不同的VlanID（{2}）",
    "arguments": [
      "pgLabel",
      "hvo.getName()",
      "vlanId"
    ],
    "line": 2079,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "portgroup[%s] already exists on host[%s],please create again with other name or delete portgroup manually and attach to cluster again",
    "en_US": "portgroup[{0}] already exists on host[{1}],please create again with other name or delete portgroup manually and attach to cluster again",
    "zh_CN": "端口组[{0}]已经存在于物理机[{1}]，请重新使用另外的名字创建或者手动删除端口组然后重新加载到集群",
    "arguments": [
      "pgLabel",
      "hvo.getName()"
    ],
    "line": 2083,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create dvPortGroup failed for %s",
    "en_US": "create dvPortGroup failed for {0}",
    "zh_CN": "为{0}创建DVPortGroup失败",
    "arguments": [
      "vcvo.getName()"
    ],
    "line": 2142,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "dvSwitch [%s] not found on vCenter [%s]",
    "en_US": "dvSwitch [{0}] not found on vCenter [{1}]",
    "zh_CN": "在vCenter[{1}]上找不到dvSwitch[{0}]",
    "arguments": [
      "dvSwitchName",
      "vcvo.getName()"
    ],
    "line": 2137,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "no dataCenter found for datastore",
    "en_US": "no dataCenter found for datastore",
    "zh_CN": "找不到主存储的区域",
    "arguments": [
      "ds.getName()"
    ],
    "line": 2335,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "virtual disk manager unavailable",
    "en_US": "virtual disk manager unavailable",
    "zh_CN": "虚拟磁盘管理器不可用",
    "arguments": [],
    "line": 2340,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "delete vdisk[%s] failed: %s",
    "en_US": "delete vdisk[{0}] failed: {1}",
    "zh_CN": "删除虚拟磁盘[{0}]失败：{1}",
    "arguments": [
      "installPath",
      "mf.getLocalizedMessage()"
    ],
    "line": 2351,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "create dvPortGroup failed for dvSwitch [%s], %s",
    "en_US": "create dvPortGroup failed for dvSwitch [{0}], {1}",
    "zh_CN": "为dvSwitch[{0}]创建dvPortGroup失败，{1}",
    "arguments": [
      "dvSwitch.getName()",
      "task.getTaskInfo().getError().getLocalizedMessage()"
    ],
    "line": 2481,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "failed to set ZStack uuid to VCenter ManagedEntity [name:%s, mor:%s] because %s",
    "en_US": "failed to set ZStack uuid to VCenter ManagedEntity [name:{0}, mor:{1}] because {2}",
    "zh_CN": "在VCenter ManagedEntity [name：{0}，mor：{1}]上设置ZStack uuid失败，因为{2}",
    "arguments": [
      "me.getName()",
      "mor.val",
      "ex.getMessage()"
    ],
    "line": 2593,
    "fileName": "src/main/java/org/zstack/vmware/VMwareHelper.java"
  },
  {
    "raw": "No VNC ports available",
    "en_US": "No VNC ports available",
    "zh_CN": "未找到可用的VNC端口",
    "arguments": [],
    "line": 165,
    "fileName": "src/main/java/org/zstack/vmware/VncPortAllocatorImpl.java"
  },
  {
    "raw": "dns[%s] is not a IP address",
    "en_US": "dns[{0}] is not a IP address",
    "zh_CN": "dns地址[{0}]不是有效的IP地址",
    "arguments": [
      "msg.getDns()"
    ],
    "line": 450,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "no ip ranges attached with l3 network[uuid:%s]",
    "en_US": "no ip ranges attached with l3 network[uuid:{0}]",
    "zh_CN": "在三层网络[uuid:{0}]上没有IP范围被绑定",
    "arguments": [
      "l3NetworkVO.getUuid()"
    ],
    "line": 338,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "management network can not be detached",
    "en_US": "management network can not be detached",
    "zh_CN": "管理网络无法分离",
    "arguments": [],
    "line": 178,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "default route network can not be detached",
    "en_US": "default route network can not be detached",
    "zh_CN": "无法分离默认路由网络",
    "arguments": [],
    "line": 182,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "original public network can not be detached",
    "en_US": "original public network can not be detached",
    "zh_CN": "原有公网不能脱离",
    "arguments": [],
    "line": 186,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "could not detach l3 network to vpc router[uuid:%s] because its state is not running or stopped",
    "en_US": "could not detach l3 network to vpc router[uuid:{0}] because its state is not running or stopped",
    "zh_CN": "无法将三层网络与VPC路由器[uuid：{0}]分离，因为其状态未运行或已停止",
    "arguments": [
      "vpc.getUuid()"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "could not detach l3 network to vpc router[uuid:%s] becaus the states of the master and slave are inconsistent",
    "en_US": "could not detach l3 network to vpc router[uuid:{0}] becaus the states of the master and slave are inconsistent",
    "zh_CN": "无法将三层网络与VPC路由器[uuid：{0}]分离，因为主设备和从设备的状态不一致",
    "arguments": [
      "vpc.getUuid()"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "l3 network[uuid:%s] can not detach from vpc vrouter[uuid:%s] since network services attached vips[%s] still used in l3",
    "en_US": "l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] since network services attached vips[{2}] still used in l3",
    "zh_CN": "三层网络[uuid：{0}]无法与VPC虚拟路由器[uuid：{1}]分离，因为网络服务附加的VIP[{2}]仍在L3中使用",
    "arguments": [
      "l3NetworkVO.getUuid()",
      "vmInstanceVO.getUuid()",
      "vipPeerVOs.stream().map(VipPeerL3NetworkRefVO::getVipUuid).collect(Collectors.toList())"
    ],
    "line": 231,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "vpc l3 network[uuid:%s] can not detach from vpc vrouter[uuid:%s] since vm nics[%s] still used in l3",
    "en_US": "vpc l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] since vm nics[{2}] still used in l3",
    "zh_CN": "vpc三层网络[uuid:{0}]无法从vpc路由器[uuid:{1}]卸载, 三层网络还在使用以下云主机网卡[{2}]",
    "arguments": [
      "l3NetworkVO.getUuid()",
      "vmInstanceVO.getUuid()",
      "vmNicVOS.stream().map(ResourceVO::getUuid).collect(Collectors.toList())"
    ],
    "line": 247,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "virtual router offering[uuid: %s] is not enabled",
    "en_US": "virtual router offering[uuid: {0}] is not enabled",
    "zh_CN": "云路由规格[uuid: {0}]是不可用的",
    "arguments": [
      "msg.getVirtualRouterOfferingUuid()"
    ],
    "line": 257,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "only vpc l3 network can attach to vpc vrouter",
    "en_US": "only vpc l3 network can attach to vpc vrouter",
    "zh_CN": "只有VPC三层网络可以绑定到VPC云路由",
    "arguments": [],
    "line": 284,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "Vpc network [uuid:%s] already attached to vpc router [uuid:%s]",
    "en_US": "Vpc network [uuid:{0}] already attached to vpc router [uuid:{1}]",
    "zh_CN": "VPC网络[uuid：{0}]已连接到VPC路由器[uuid：{1}]",
    "arguments": [
      "msg.getL3NetworkUuid()",
      "vmNics.get(0).getVmInstanceUuid()"
    ],
    "line": 292,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "could not attached l3 network to vpc router[uuid:%s] because both its state and it peer state is not running or stopped",
    "en_US": "could not attached l3 network to vpc router[uuid:{0}] because both its state and it peer state is not running or stopped",
    "zh_CN": "无法将三层网络连接到VPC路由器[uuid：{0}]，因为其状态和对等状态均未运行或已停止",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 329,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "could not attached l3 network to vpc router[uuid:%s] because its state is not running or stopped",
    "en_US": "could not attached l3 network to vpc router[uuid:{0}] because its state is not running or stopped",
    "zh_CN": "无法将三层网络连接到VPC路由器[uuid：{0}]，因为其状态未运行或已停止",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 312,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "public network[uuid: %s] vip[uuid: %s, ip: %s] peer with l3network[uuid: %s] not on vpc vr[uuid: %s]",
    "en_US": "public network[uuid: {0}] vip[uuid: {1}, ip: {2}] peer with l3network[uuid: {3}] not on vpc vr[uuid: {4}]",
    "zh_CN": "在VPC云路由[uuid: {4}]上，三层网络[uuid: {3}]没有和公有网络[uuid: {0}]虚拟IP[uuid: {1}, ip: {2}]同阶",
    "arguments": [
      "vip.getL3NetworkUuid()",
      "vip.getUuid()",
      "vip.getIp()",
      "msg.getL3NetworkUuid()",
      "vmInstanceVO.getUuid()"
    ],
    "line": 362,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "the gateway[ip:%s] of l3[uuid:%s] has been occupied",
    "en_US": "the gateway[ip:{0}] of l3[uuid:{1}] has been occupied",
    "zh_CN": "三层网络[uuid:{1}]的网关[uuid:{0}]已经被占用",
    "arguments": [
      "gateways",
      "msg.getL3NetworkUuid()"
    ],
    "line": 383,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "the static ip[%s] specified in message not equals to gateway ips[%s] of l3 network[uuid:%s]",
    "en_US": "the static ip[{0}] specified in message not equals to gateway ips[{1}] of l3 network[uuid:{2}]",
    "zh_CN": "消息中指定的静态IP[{0}]不等于三层网络[uuid：{2}]的网关IP[{1}]",
    "arguments": [
      "msg.getStaticIp()",
      "gateways",
      "l3NetworkVO.getUuid()"
    ],
    "line": 428,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "l3 network [uuid:%s] must be attached first, because there is vip on that l3 network",
    "en_US": "l3 network [uuid:{0}] must be attached first, because there is vip on that l3 network",
    "zh_CN": "必须首先连接三层网络[uuid：{0}]，因为该三层网络上存在VIP",
    "arguments": [
      "vipL3Uuid"
    ],
    "line": 440,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "dns address [%s] is not added to vpc router [uuid:%s]",
    "en_US": "dns address [{0}] is not added to vpc router [uuid:{1}]",
    "zh_CN": "dns地址[{0}]未添加到vpc路由[uuid:{1}]",
    "arguments": [
      "msg.getDns()",
      "msg.getUuid()"
    ],
    "line": 457,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "could not add ipv6 range to l3 network[uuid:%s], because it\u0027s overlap with cidr [%s] of vRouter [uuid:%s]",
    "en_US": "could not add ipv6 range to l3 network[uuid:{0}], because it\u0027s overlap with cidr [{1}] of vRouter [uuid:{2}]",
    "zh_CN": "无法将IPv6范围添加到三层网络[uuid：{0}]，因为它与VRouter[uuid：{2}]的CIDR[{1}]重叠",
    "arguments": [
      "ipr.getL3NetworkUuid()",
      "ipRangeVO.getNetworkCidr()",
      "uuid"
    ],
    "line": 488,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "could not add ip range to l3 network[uuid:%s], because it\u0027s overlap with cidr [%s] of vRouter [uuid:%s]",
    "en_US": "could not add ip range to l3 network[uuid:{0}], because it\u0027s overlap with cidr [{1}] of vRouter [uuid:{2}]",
    "zh_CN": "无法将IP范围添加到三层网络[uuid：{0}]，因为它与VRouter[uuid：{2}]的CIDR[{1}]重叠",
    "arguments": [
      "ipr.getL3NetworkUuid()",
      "ipRangeVO.getNetworkCidr()",
      "uuid"
    ],
    "line": 483,
    "fileName": "src/main/java/org/zstack/vpc/VpcApiInterceptor.java"
  },
  {
    "raw": "operation error, because:%s",
    "en_US": "operation error, because:{0}",
    "zh_CN": "操作错误，因为{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 859,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not get connections of distributed routing to virtual router %s",
    "en_US": "can not get connections of distributed routing to virtual router {0}",
    "zh_CN": "不能获取分布式路由到云路由的连接",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 558,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not set state of distributed routing to virtual router %s",
    "en_US": "can not set state of distributed routing to virtual router {0}",
    "zh_CN": "不能设置分布式路由到云路由的状态",
    "arguments": [
      "vrinv.getUuid()"
    ],
    "line": 596,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "not support to get the service %s state to virtual router %s",
    "en_US": "not support to get the service {0} state to virtual router {1}",
    "zh_CN": "路由器 {1} 不支持网络功能{0}",
    "arguments": [
      "msg.getNetworkService()",
      "msg.getUuid()"
    ],
    "line": 720,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not get state of distributed routing to virtual router %s",
    "en_US": "can not get state of distributed routing to virtual router {0}",
    "zh_CN": "获取路由器 {0} 分布式路由的状态失败",
    "arguments": [
      "vrinv.getUuid()"
    ],
    "line": 855,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "not support to update the service %s state to virtual router %s",
    "en_US": "not support to update the service {0} state to virtual router {1}",
    "zh_CN": "路由器 {1} 不支持更新网络功能{0}",
    "arguments": [
      "msg.getNetworkService()",
      "msg.getUuid()"
    ],
    "line": 934,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)",
    "en_US": "vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)",
    "zh_CN": "在做设置云路由的任何操作（如启动/停止云主机、创建负载均衡等），VPC三层网络必须首先绑定三层路由",
    "arguments": [],
    "line": 1336,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "dns address [%s] has bean added to vpc router [uuid:%s]",
    "en_US": "dns address [{0}] has bean added to vpc router [uuid:{1}]",
    "zh_CN": "在路由器[uuid:{1}]上已经存在一个DNS[{0}]",
    "arguments": [
      "msg.getDns()",
      "msg.getVpcRouterUuid()"
    ],
    "line": 1594,
    "fileName": "src/main/java/org/zstack/vpc/VpcManagerImpl.java"
  },
  {
    "raw": "can not detach nic from vpc vr[uuid:%s]",
    "en_US": "can not detach nic from vpc vr[uuid:{0}]",
    "zh_CN": "不能从VPC云路由[uuid:{0}]解绑网卡",
    "arguments": [
      "vpcUuid"
    ],
    "line": 166,
    "fileName": "src/main/java/org/zstack/vpc/VpcVRouterFactory.java"
  },
  {
    "raw": "there is no ip range for l3 network[uuid:%s]",
    "en_US": "there is no ip range for l3 network[uuid:{0}]",
    "zh_CN": "三层网络[uuid：{0}]没有IP范围",
    "arguments": [
      "l3.getUuid()"
    ],
    "line": 473,
    "fileName": "src/main/java/org/zstack/vpc/VpcVRouterFactory.java"
  },
  {
    "raw": "the gateway[ip:%s] of l3[uuid:%s] has been occupied on vpc vr[uuid: %s]",
    "en_US": "the gateway[ip:{0}] of l3[uuid:{1}] has been occupied on vpc vr[uuid: {2}]",
    "zh_CN": "在VPC的云路由[uuid: {2}]上，三层网络[uuid:{1}]的网关[uuid:{0}]已经被占用",
    "arguments": [
      "ip.getGateway()",
      "l3.getUuid()",
      "vm.getUuid()"
    ],
    "line": 501,
    "fileName": "src/main/java/org/zstack/vpc/VpcVRouterFactory.java"
  },
  {
    "raw": "unable to ssh in to the vpc router[%s], the ssh port seems not open",
    "en_US": "unable to ssh in to the vpc router[{0}], the ssh port seems not open",
    "zh_CN": "无法通过SSH连接到VPC路由器[{0}]，SSH端口似乎未打开",
    "arguments": [
      "mgmtNicIp"
    ],
    "line": 133,
    "fileName": "src/main/java/org/zstack/vpc/VpcVyosDeployZsnAgentFlow.java"
  },
  {
    "raw": "there is no master router of router [uuid:%s]",
    "en_US": "there is no master router of router [uuid:{0}]",
    "zh_CN": "路由器[uuid:{0}]的高可用组没有主路由器",
    "arguments": [
      "msg.getVmInstanceUuid()"
    ],
    "line": 217,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "Could not update this network service, due to vpc [uuid:%s] is not support update network service version",
    "en_US": "Could not update this network service, due to vpc [uuid:{0}] is not support update network service version",
    "zh_CN": "无法更新此网络服务，因为VPC[uuid：{0}]不支持更新网络服务版本",
    "arguments": [
      "msg.getVirtualRouterUuid()"
    ],
    "line": 130,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "Could not update this network service, due to vpc [uuid:%s] used old kernel version:[%s]",
    "en_US": "Could not update this network service, due to vpc [uuid:{0}] used old kernel version:[{1}]",
    "zh_CN": "无法更新此网络服务，因为VPC[uuid：{0}]使用了旧内核版本：[{1}]",
    "arguments": [
      "msg.getVirtualRouterUuid()",
      "vo.getKernelVersion()"
    ],
    "line": 137,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "Could not apply snat with non-default public network, due to multi snat feature is disabled",
    "en_US": "Could not apply snat with non-default public network, due to multi snat feature is disabled",
    "zh_CN": "无法使用非默认公用网络应用SNAT，因为多SNAT功能已禁用",
    "arguments": [],
    "line": 144,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "Could not apply snat with this L3Network, due to l3 network [uuid:%s] is not public network",
    "en_US": "Could not apply snat with this L3Network, due to l3 network [uuid:{0}] is not public network",
    "zh_CN": "无法对此三层网络应用SNAT，因为三层网络[uuid：{0}]不是公共网络",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 147,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "Could not apply snat with this L3Network, due to l3 network [uuid:%s] is not attached to vpc router",
    "en_US": "Could not apply snat with this L3Network, due to l3 network [uuid:{0}] is not attached to vpc router",
    "zh_CN": "无法对此三层网络应用SNAT，因为三层网络[uuid：{0}]未连接到VPC路由器",
    "arguments": [
      "msg.getL3NetworkUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "invalid monitor ip address [%s]",
    "en_US": "invalid monitor ip address [{0}]",
    "zh_CN": "仲裁地址[{0}]错误",
    "arguments": [
      "ip"
    ],
    "line": 168,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpcHaRouter [uuid:%s] is deleted",
    "en_US": "vpcHaRouter [uuid:{0}] is deleted",
    "zh_CN": "高可用组[uuid:{0}]被删除了",
    "arguments": [
      "vpcVo.getUuid()"
    ],
    "line": 205,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "there are more than 2 vpc routers attached to haGroup [uuid:%s]",
    "en_US": "there are more than 2 vpc routers attached to haGroup [uuid:{0}]",
    "zh_CN": "高可用组[uuid:{0}]的路由器数量已经超过2",
    "arguments": [
      "haUuid"
    ],
    "line": 235,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "ha group management l3 and public l3 networks[uuid:%s] are different from offering l3 networks [uuid:%s]",
    "en_US": "ha group management l3 and public l3 networks[uuid:{0}] are different from offering l3 networks [uuid:{1}]",
    "zh_CN": "高可用组的管理网，公网组合[uuid:{0}]和云路由规格的三层网络[uuid:{1}]不同",
    "arguments": [
      "l3Uuids",
      "offeringL3Uuids"
    ],
    "line": 266,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc router l3 networks [uuid:%s] are different from ha group l3 networks [uuid:%s], !!! please delete this router and recreate it",
    "en_US": "vpc router l3 networks [uuid:{0}] are different from ha group l3 networks [uuid:{1}], !!! please delete this router and recreate it",
    "zh_CN": "vpc路由器的三层网路[uuid:{0}]和高可用组的三层网络[uuid:{1}]不同",
    "arguments": [
      "vpcL3Uuids",
      "vpcHaGroupL3Uuids"
    ],
    "line": 322,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc router has been attached to ha group [uuid:%s]",
    "en_US": "vpc router has been attached to ha group [uuid:{0}]",
    "zh_CN": "vpc路由器不在高可用组[uuid:{0}]中",
    "arguments": [
      "oldHaUuid"
    ],
    "line": 330,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc ha group [uuid:%s] is not existed",
    "en_US": "vpc ha group [uuid:{0}] is not existed",
    "zh_CN": "高可用组[uuid:{0}]不存在",
    "arguments": [
      "haUuid"
    ],
    "line": 334,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "there are more than 1 vpc routers attached to haGroup [uuid:%s]",
    "en_US": "there are more than 1 vpc routers attached to haGroup [uuid:{0}]",
    "zh_CN": "高可用组[uuid:{0}]的路由器数量已经超过1",
    "arguments": [
      "haUuid"
    ],
    "line": 339,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "vpc router [uuid:%s] can not be upgraded to ha router because it public network is same to management network",
    "en_US": "vpc router [uuid:{0}] can not be upgraded to ha router because it public network is same to management network",
    "zh_CN": "vpc路由器[uuid:{0}]不能升级高可用路由器因为它的管理网和公网相同",
    "arguments": [
      "haUuid"
    ],
    "line": 344,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java"
  },
  {
    "raw": "create affinityGroup for ha group [uuid:%s] failed",
    "en_US": "create affinityGroup for ha group [uuid:{0}] failed",
    "zh_CN": "高可用组[uuid:{0}]创建亲和组失败",
    "arguments": [
      "ha.getName()"
    ],
    "line": 611,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java"
  },
  {
    "raw": "virtualrouter %s [uuid: %s ] of VPC HA group %s [uuid: %s] haStatus changed from %s to %s",
    "en_US": "virtualrouter {0} [uuid: {1} ] of VPC HA group {2} [uuid: {3}] haStatus changed from {4} to {5}",
    "zh_CN": "VPC高可用性组{2}[uuid：{3}]的VirtualRouter{0}[uuid：{1}]的高可用性状态已从{4}更改为{5}",
    "arguments": [
      "vrName",
      "vrUuid",
      "vpcHaGroupName",
      "vpcHaGroupUuid",
      "old",
      "status"
    ],
    "line": 785,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java"
  },
  {
    "raw": "ha group uuid nil",
    "en_US": "ha group uuid nil",
    "zh_CN": "高可用性组uuid无",
    "arguments": [],
    "line": 694,
    "fileName": "src/main/java/org/zstack/vpc/ha/VpcHaGroupVpcVrImpl.java"
  },
  {
    "raw": "VR[uuid: %s] not running",
    "en_US": "VR[uuid: {0}] not running",
    "zh_CN": "VR[uuid：{0}]未运行",
    "arguments": [
      "struct.getVmInstanceUuid()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java"
  },
  {
    "raw": "VR[uuid: %s] not connected",
    "en_US": "VR[uuid: {0}] not connected",
    "zh_CN": "VR[uuid：{0}]未连接",
    "arguments": [
      "struct.getVmInstanceUuid()"
    ],
    "line": 90,
    "fileName": "src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java"
  },
  {
    "raw": "failed to enable ha on virtual router[uuid:%s], %s",
    "en_US": "failed to enable ha on virtual router[uuid:{0}], {1}",
    "zh_CN": "路由器[uuid:{0}]打开高可用功能失败，{1}",
    "arguments": [
      "vrUuid",
      "ret.getError()"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/vpc/ha/vyos/vyosVpcHaRouterBackendManagerImpl.java"
  },
  {
    "raw": "only tcp or udp protocol can use port",
    "en_US": "only tcp or udp protocol can use port",
    "zh_CN": "只有TCP或UDP协议可以使用端口",
    "arguments": [],
    "line": 373,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not delete ruleSet[%s] because it still attached to nic",
    "en_US": "can not delete ruleSet[{0}] because it still attached to nic",
    "zh_CN": "无法删除规则集[{0}]，因为它仍连接到NIC",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 150,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not detach system default ruleSet",
    "en_US": "can not detach system default ruleSet",
    "zh_CN": "无法分离系统默认规则集",
    "arguments": [],
    "line": 129,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "only system ruleSet can change action type",
    "en_US": "only system ruleSet can change action type",
    "zh_CN": "只有系统规则集才能更改操作类型",
    "arguments": [],
    "line": 142,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not delete system default ruleSet",
    "en_US": "can not delete system default ruleSet",
    "zh_CN": "无法删除系统默认规则集",
    "arguments": [],
    "line": 154,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not delete system default rule",
    "en_US": "can not delete system default rule",
    "zh_CN": "无法删除系统默认规则",
    "arguments": [],
    "line": 160,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "the router [uuid:%s] does not has a master router",
    "en_US": "the router [uuid:{0}] does not has a master router",
    "zh_CN": "路由器[uuid：{0}]没有主路由器",
    "arguments": [
      "vRouteUuid"
    ],
    "line": 170,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "the VPC Router[uuid:%s] already has a firewall.",
    "en_US": "the VPC Router[uuid:{0}] already has a firewall.",
    "zh_CN": "VPC路由器[uuid：{0}]已有防火墙。",
    "arguments": [
      "msg.getVpcUuid()"
    ],
    "line": 188,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "only tcp protocol can use tcp flag",
    "en_US": "only tcp protocol can use tcp flag",
    "zh_CN": "只有TCP协议才能使用TCP标志",
    "arguments": [],
    "line": 378,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "only icmp protocol can use icmp type",
    "en_US": "only icmp protocol can use icmp type",
    "zh_CN": "只有ICMP协议才能使用ICMP类型",
    "arguments": [],
    "line": 382,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "already has a rule template with name %s",
    "en_US": "already has a rule template with name {0}",
    "zh_CN": "已有名为{0}的规则模板",
    "arguments": [
      "msg.getName()",
      "msg.getRuleNumber()"
    ],
    "line": 239,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "the ruleSet[%s] already has a rule with rule number %s.",
    "en_US": "the ruleSet[{0}] already has a rule with rule number {1}.",
    "zh_CN": "规则集[{0}]已具有规则编号为{1}的规则。",
    "arguments": [
      "msg.getRuleSetUuid()",
      "msg.getRuleNumber()"
    ],
    "line": 338,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not update default rule[%s]",
    "en_US": "can not update default rule[{0}]",
    "zh_CN": "无法更新默认规则[{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 343,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "the rule [%s] number is invalid",
    "en_US": "the rule [{0}] number is invalid",
    "zh_CN": "规则[{0}]编号无效",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 407,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "can not attach the default ruleSet to other nic",
    "en_US": "can not attach the default ruleSet to other nic",
    "zh_CN": "无法将默认规则集附加到其他NIC",
    "arguments": [],
    "line": 416,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "ruleSet[%s] already has a l3[%s]",
    "en_US": "ruleSet[{0}] already has a l3[{1}]",
    "zh_CN": "规则集[{0}]已具有L3[{1}]",
    "arguments": [
      "msg.getRuleSetUuid()",
      "msg.getL3Uuid()"
    ],
    "line": 431,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "already has a rule with the number[%s]",
    "en_US": "already has a rule with the number[{0}]",
    "zh_CN": "已具有编号为[{0}]的规则",
    "arguments": [
      "duplicateRuleNumbers"
    ],
    "line": 450,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "the ruleSet[%s] already has a rule with the rule number %s.",
    "en_US": "the ruleSet[{0}] already has a rule with the rule number {1}.",
    "zh_CN": "规则集[{0}]已具有规则编号为{1}的规则。",
    "arguments": [
      "msg.getRuleSetUuid()",
      "msg.getRuleNumber()"
    ],
    "line": 748,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule[%d] only tcp or udp protocol can use port",
    "en_US": "could not add firewall rule[{0}] only tcp or udp protocol can use port",
    "zh_CN": "无法添加防火墙规则[{0}]只有TCP或UDP协议可以使用端口",
    "arguments": [
      "msg.getRuleNumber()"
    ],
    "line": 779,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule[%d] only tcp protocol can use tcp flag",
    "en_US": "could not add firewall rule[{0}] only tcp protocol can use tcp flag",
    "zh_CN": "无法添加防火墙规则[{0}]只有TCP协议可以使用TCP标志",
    "arguments": [
      "msg.getRuleNumber()"
    ],
    "line": 785,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule[%d] because only icmp protocol can use icmp type",
    "en_US": "could not add firewall rule[{0}] because only icmp protocol can use icmp type",
    "zh_CN": "无法添加防火墙规则[{0}]，因为只有ICMP协议可以使用ICMP类型",
    "arguments": [
      "msg.getRuleNumber()"
    ],
    "line": 790,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule[%d] because only tcp or udp protocol can use port",
    "en_US": "could not add firewall rule[{0}] because only tcp or udp protocol can use port",
    "zh_CN": "无法添加防火墙规则[{0}]，因为只有TCP或UDP协议可以使用端口",
    "arguments": [
      "msg.getRuleNumber()"
    ],
    "line": 801,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule[%d] because only tcp protocol can use tcp flag",
    "en_US": "could not add firewall rule[{0}] because only tcp protocol can use tcp flag",
    "zh_CN": "无法添加防火墙规则[{0}]，因为只有TCP协议可以使用TCP标志",
    "arguments": [
      "msg.getRuleNumber()"
    ],
    "line": 824,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule[%d] because %s",
    "en_US": "could not add firewall rule[{0}] because {1}",
    "zh_CN": "无法添加防火墙规则[{0}]，因为{1}",
    "arguments": [
      "msg.getRuleNumber()",
      "error"
    ],
    "line": 832,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule, because ruleNo %d is invalid",
    "en_US": "could not add firewall rule, because ruleNo {0} is invalid",
    "zh_CN": "无法添加防火墙规则，因为RuleNo{0}无效",
    "arguments": [
      "vo.getRuleNumber()"
    ],
    "line": 846,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule, because there is no action for ruleNo:%d",
    "en_US": "could not add firewall rule, because there is no action for ruleNo:{0}",
    "zh_CN": "无法添加防火墙规则，因为没有针对RuleNo的操作：{0}",
    "arguments": [
      "vo.getRuleNumber()"
    ],
    "line": 853,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule, because source IP length: %s is not valid for ruleNo:%d",
    "en_US": "could not add firewall rule, because source IP length: {0} is not valid for ruleNo:{1}",
    "zh_CN": "无法添加防火墙规则，因为源IP长度{0}对RuleNo{1}无效",
    "arguments": [
      "vo.getSourceIp()",
      "vo.getRuleNumber()"
    ],
    "line": 867,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule, because destination IP length: %s is not valid for ruleNo:%d",
    "en_US": "could not add firewall rule, because destination IP length: {0} is not valid for ruleNo:{1}",
    "zh_CN": "无法添加防火墙规则，因为目标IP长度{0}对RuleNo{1}无效",
    "arguments": [
      "vo.getDestIp()",
      "vo.getRuleNumber()"
    ],
    "line": 874,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule, because there is no state for ruleNo:%d",
    "en_US": "could not add firewall rule, because there is no state for ruleNo:{0}",
    "zh_CN": "无法添加防火墙规则，因为RuleNo没有状态：{0}",
    "arguments": [
      "vo.getRuleNumber()"
    ],
    "line": 885,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "could not add firewall rule, because description length %s is not valid for ruleNo:%d",
    "en_US": "could not add firewall rule, because description length {0} is not valid for ruleNo:{1}",
    "zh_CN": "无法添加防火墙规则，因为描述长度{0}对RuleNo无效：{1}",
    "arguments": [
      "vo.getDestIp()",
      "vo.getRuleNumber()"
    ],
    "line": 892,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "the configuration file has format error",
    "en_US": "the configuration file has format error",
    "zh_CN": "配置文件有格式错误",
    "arguments": [],
    "line": 942,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "the firewall rules in the configuration file have syntax errors: %s",
    "en_US": "the firewall rules in the configuration file have syntax errors: {0}",
    "zh_CN": "配置文件中的防火墙规则有语法错误：{0}",
    "arguments": [
      "errorInfo"
    ],
    "line": 948,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java"
  },
  {
    "raw": "sync firewall config failed,because %s",
    "en_US": "sync firewall config failed,because {0}",
    "zh_CN": "同步防火墙配置失败，因为{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 272,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "update firewall ruleSet action failed, because %s",
    "en_US": "update firewall ruleSet action failed, because {0}",
    "zh_CN": "更新防火墙规则集操作失败，因为{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 459,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "Can not find l3[%] related mac on vRouter[%s]",
    "en_US": "Can not find l3[%] related mac on vRouter[{0}]",
    "zh_CN": "在VRouter[{0}]上找不到与L3[%]相关的MAC",
    "arguments": [
      "l3Uuid",
      "vRouterUuid"
    ],
    "line": 492,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "create firewall rule[%s] failed, because %s",
    "en_US": "create firewall rule[{0}] failed, because {1}",
    "zh_CN": "创建防火墙规则[{0}]失败，原因是{1}",
    "arguments": [
      "cmd.getRef().getRuleSetInfo().getRules().get(0).getRuleNumber()",
      "rsp.getError()"
    ],
    "line": 557,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "delete firewall on vRouter[%s],because %s",
    "en_US": "delete firewall on vRouter[{0}],because {1}",
    "zh_CN": "删除VRouter[{0}]上的防火墙，因为{1}",
    "arguments": [
      "vRouterUuid",
      "re.getError().getCause()"
    ],
    "line": 645,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "delete firewall rule failed on vRouter[%s], because %s",
    "en_US": "delete firewall rule failed on vRouter[{0}], because {1}",
    "zh_CN": "在VRouter[{0}]上删除防火墙规则失败，因为{1}",
    "arguments": [
      "vRouterUuid",
      "rsp.getError()"
    ],
    "line": 851,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "create firewall ruleSet[%s] failed, because %s",
    "en_US": "create firewall ruleSet[{0}] failed, because {1}",
    "zh_CN": "创建防火墙规则集[{0}]失败，原因是{1}",
    "arguments": [
      "cmd.getRuleSet().getName()",
      "re.getError().getCause()"
    ],
    "line": 784,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "change firewall rule state on vRouter[%s] failed, because %s",
    "en_US": "change firewall rule state on vRouter[{0}] failed, because {1}",
    "zh_CN": "更改VRouter[{0}]上的防火墙规则状态失败，原因是{1}",
    "arguments": [
      "vRouterUuid",
      "rsp.getError()"
    ],
    "line": 936,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "attach firewall ruleSet[%s] failed, because %s",
    "en_US": "attach firewall ruleSet[{0}] failed, because {1}",
    "zh_CN": "附加防火墙规则集[{0}]失败，原因是{1}",
    "arguments": [
      "struct.getRuleSetUuid()",
      "re.getError()"
    ],
    "line": 1032,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "detach ruleSet failed, maybe it has been deleted",
    "en_US": "detach ruleSet failed, maybe it has been deleted",
    "zh_CN": "分离规则集失败，它可能已被删除",
    "arguments": [],
    "line": 1063,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "detach firewall ruleSet[%s] failed,because %s",
    "en_US": "detach firewall ruleSet[{0}] failed,because {1}",
    "zh_CN": "分离防火墙规则集[{0}]失败，原因是{1}",
    "arguments": [
      "struct.getRuleSetUuid()",
      "re.getError().getCause()"
    ],
    "line": 1129,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java"
  },
  {
    "raw": "cannot find vpcFirewall[uuid:%s] related vRouter",
    "en_US": "cannot find vpcFirewall[uuid:{0}] related vRouter",
    "zh_CN": "找不到与vpcFirewall[uuid：{0}]相关的虚拟路由器",
    "arguments": [
      "msg.getVpcFirewallUuid()"
    ],
    "line": 114,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java"
  },
  {
    "raw": "cannot find vpcFirewall[uuid:%s], it may have been deleted",
    "en_US": "cannot find vpcFirewall[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到vpcFirewall[uuid：{0}]，它可能已被删除",
    "arguments": [
      "msg.getVpcFirewallUuid()"
    ],
    "line": 109,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java"
  },
  {
    "raw": "cannot find vpcFirewallRuleSet[uuid:%s], it may have been deleted",
    "en_US": "cannot find vpcFirewallRuleSet[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到VpcFirewallRuleSet[uuid：{0}]，它可能已被删除",
    "arguments": [
      "msg.getRuleSetUuid()"
    ],
    "line": 125,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java"
  },
  {
    "raw": "cannot find vpcFirewallIpSetTemplate[uuid:%s], it may have been deleted",
    "en_US": "cannot find vpcFirewallIpSetTemplate[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到VpcFireWallipSetTemplate[uuid：{0}]，它可能已被删除",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 301,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java"
  },
  {
    "raw": "attach firewall ruleSet[%s] to l3[%s] failed,because %s",
    "en_US": "attach firewall ruleSet[{0}] to l3[{1}] failed,because {2}",
    "zh_CN": "将防火墙规则集[{0}]附加到L3[{1}]失败，原因是{2}",
    "arguments": [
      "msg.getRuleSetUuid()",
      "msg.getL3Uuid()",
      "errorCode.getCause()"
    ],
    "line": 396,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java"
  },
  {
    "raw": "detach firewall ruleSet from l3[%s] failed,because %s",
    "en_US": "detach firewall ruleSet from l3[{0}] failed,because {1}",
    "zh_CN": "从L3[{0}]分离防火墙规则集失败，原因是{1}",
    "arguments": [
      "msg.getL3Uuid()",
      "errorCode.getCause()"
    ],
    "line": 424,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java"
  },
  {
    "raw": "find duplicate rule numbers %s on firewall[%s],l3[%s],forward[%s]",
    "en_US": "find duplicate rule numbers {0} on firewall[{1}],l3[{2}],forward[{3}]",
    "zh_CN": "在防火墙[{1}]、L3[{2}]、转发[{3}]上查找重复的规则编号{0}",
    "arguments": [
      "duplicateRuleNumber.get()",
      "ref.getVpcFirewallUuid()",
      "ref.getL3NetworkUuid()",
      "ref.getPacketsForwardType()"
    ],
    "line": 475,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java"
  },
  {
    "raw": "no changes in ruleset %s",
    "en_US": "no changes in ruleset {0}",
    "zh_CN": "规则集{0}中没有更改",
    "arguments": [
      "self.getUuid()"
    ],
    "line": 483,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java"
  },
  {
    "raw": "firewall %s related vpc not in running state",
    "en_US": "firewall {0} related vpc not in running state",
    "zh_CN": "防火墙{0}相关的VPC未处于运行状态",
    "arguments": [
      "firewall.get()"
    ],
    "line": 515,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java"
  },
  {
    "raw": "default ruleset %s can only attached to one interface forward, but find %s related interface",
    "en_US": "default ruleset {0} can only attached to one interface forward, but find {1} related interface",
    "zh_CN": "默认规则集{0}只能转发到一个接口，但找到{1}个相关接口",
    "arguments": [
      "self.getUuid()",
      "refVOs.size()"
    ],
    "line": 753,
    "fileName": "src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java"
  },
  {
    "raw": "destination[%s] can not has blackHole route and static route at same time",
    "en_US": "destination[{0}] can not has blackHole route and static route at same time",
    "zh_CN": "目标[{0}]不能同时具有黑洞路由和静态路由",
    "arguments": [],
    "line": 115,
    "fileName": "src/main/java/org/zstack/vrouterRoute/VRouterRouteApiInterceptor.java"
  },
  {
    "raw": "cannot find the route table [uuid:%s]",
    "en_US": "cannot find the route table [uuid:{0}]",
    "zh_CN": "找不到路由表[uuid:{0}]",
    "arguments": [
      "msg.getUuid()"
    ],
    "line": 469,
    "fileName": "src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java"
  },
  {
    "raw": "xdragon host not support create vm using an iso image.",
    "en_US": "xdragon host not support create vm using an iso image.",
    "zh_CN": "神龙服务器不支持使用ISO镜像创建云主机。",
    "arguments": [],
    "line": 30,
    "fileName": "src/main/java/org/zstack/xdragon/XDragonFilterExtensionPoint.java"
  },
  {
    "raw": "cluster[uuid:%s] hypervisorType is not %s",
    "en_US": "cluster[uuid:{0}] hypervisorType is not {1}",
    "zh_CN": "群集[uuid：{0}]管理程序类型不是{1}",
    "arguments": [
      "msg.getClusterUuid()",
      "XDragonConstant.HYPERVISOR_TYPE"
    ],
    "line": 34,
    "fileName": "src/main/java/org/zstack/xdragon/XDragonHostFactory.java"
  },
  {
    "raw": "the url is null, please config the YunShan NSP.",
    "en_US": "the url is null, please config the YunShan NSP.",
    "zh_CN": "URL为空，请配置云山NSP。",
    "arguments": [],
    "line": 46,
    "fileName": "src/main/java/org/zstack/yunshan/util/YunshanClient.java"
  },
  {
    "raw": "usb device[uuid:%s] has been attached VM[uuid:%s], cannot be add to zbox",
    "en_US": "usb device[uuid:{0}] has been attached VM[uuid:{1}], cannot be add to zbox",
    "zh_CN": "USB设备[uuid：{0}]已连接到云主机[uuid：{1}]，无法添加到ZBox",
    "arguments": [
      "msg.getUsbDeviceUuid()",
      "inventory.getVmInstanceUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java"
  },
  {
    "raw": "zbox[name:%s] status is not Ready, current status is %s",
    "en_US": "zbox[name:{0}] status is not Ready, current status is {1}",
    "zh_CN": "ZBox[名称：{0}]状态未就绪，当前状态为{1}",
    "arguments": [
      "zbox.getName()",
      "zbox.getStatus()"
    ],
    "line": 72,
    "fileName": "src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java"
  },
  {
    "raw": "zbox[uuid:%s] is still in use, cannot eject it",
    "en_US": "zbox[uuid:{0}] is still in use, cannot eject it",
    "zh_CN": "ZBox[uuid：{0}]仍在使用，无法将其弹出",
    "arguments": [
      "msg.getZBoxUuid()"
    ],
    "line": 122,
    "fileName": "src/main/java/org/zstack/zbox/ZBoxBase.java"
  },
  {
    "raw": "zbox[uuid:%s] is not Ready, cannot sync capacity.",
    "en_US": "zbox[uuid:{0}] is not Ready, cannot sync capacity.",
    "zh_CN": "ZBox[uuid：{0}]未就绪，无法同步容量。",
    "arguments": [
      "msg.getZBoxUuid()"
    ],
    "line": 151,
    "fileName": "src/main/java/org/zstack/zbox/ZBoxBase.java"
  },
  {
    "raw": "only file on zbox[mountPath:%s] can be deleted. but pass [%s]",
    "en_US": "only file on zbox[mountPath:{0}] can be deleted. but pass [{1}]",
    "zh_CN": "只能删除ZBox[mountPath：{0}]上的文件。但传递[{1}]",
    "arguments": [
      "self.getMountPath()",
      "msg.getInstallPath()"
    ],
    "line": 219,
    "fileName": "src/main/java/org/zstack/zbox/ZBoxBase.java"
  },
  {
    "raw": "zbox[name:%s] state is not Ready, current state is %s",
    "en_US": "zbox[name:{0}] state is not Ready, current state is {1}",
    "zh_CN": "ZBox[名称：{0}]状态未就绪，当前状态为{1}",
    "arguments": [
      "self.getName()",
      "self.getStatus()"
    ],
    "line": 285,
    "fileName": "src/main/java/org/zstack/zbox/ZBoxBase.java"
  },
  {
    "raw": "zbox[uuid: %s] seems like removed",
    "en_US": "zbox[uuid: {0}] seems like removed",
    "zh_CN": "ZBox[uuid：{0}]似乎已删除",
    "arguments": [
      "zbox.getUuid()"
    ],
    "line": 57,
    "fileName": "src/main/java/org/zstack/zbox/ZBoxFactory.java"
  },
  {
    "raw": "output from [%s] is empty",
    "en_US": "output from [{0}] is empty",
    "zh_CN": "[{0}]的输出为空",
    "arguments": [
      "apiStr"
    ],
    "line": 140,
    "fileName": "src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java"
  },
  {
    "raw": "call action[%s] failed, cause: %s",
    "en_US": "call action[{0}] failed, cause: {1}",
    "zh_CN": "调用操作[{0}]失败，原因：{1}",
    "arguments": [
      "apiName",
      "JSONObjectUtil.toJsonString(ob)"
    ],
    "line": 159,
    "fileName": "src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java"
  },
  {
    "raw": "invalid order by clause, expect direction[asc,desc] but got %s",
    "en_US": "invalid order by clause, expect direction[asc,desc] but got {0}",
    "zh_CN": "ORDER BY子句无效，应为方向[ASC，DESC]，但得到{0}",
    "arguments": [
      "node.getDirection()"
    ],
    "line": 14,
    "fileName": "src/main/java/org/zstack/zql/ast/visitors/OrderByExprVistor.java"
  },
  {
    "raw": "invalid order by clause, inventory[%s] doesn\u0027t have field[%s]",
    "en_US": "invalid order by clause, inventory[{0}] doesn\u0027t have field[{1}]",
    "zh_CN": "ORDER BY子句无效，库存[{0}]没有字段[{1}]",
    "arguments": [
      "m.simpleInventoryName()",
      "f"
    ],
    "line": 22,
    "fileName": "src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java"
  },
  {
    "raw": "the field to sum must be specified",
    "en_US": "the field to sum must be specified",
    "zh_CN": "必须指定要汇总的字段",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/zql/ast/visitors/plugin/SumPlugin.java"
  },
  {
    "raw": "volume %s still have snapshot group on vm %s, cannot attach to other vm",
    "en_US": "volume {0} still have snapshot group on vm {1}, cannot attach to other vm",
    "zh_CN": "卷{0}在云主机{1}上仍具有快照组，无法连接到其他云主机",
    "arguments": [
      "volume.getUuid()",
      "volume.getLastVmInstanceUuid()"
    ],
    "line": 95,
    "fileName": "src/main/java/org/zstack/zsv/ZsvManagerImpl.java"
  },
  {
    "raw": "volume %s still have snapshot group, cannot delete it",
    "en_US": "volume {0} still have snapshot group, cannot delete it",
    "zh_CN": "卷{0}仍具有快照组，无法将其删除",
    "arguments": [
      "volume.getUuid()"
    ],
    "line": 127,
    "fileName": "src/main/java/org/zstack/zsv/ZsvManagerImpl.java"
  },
  {
    "raw": "unknown parameter[%s] in zwatch return with clause, %s",
    "en_US": "unknown parameter[{0}] in zwatch return with clause, {1}",
    "zh_CN": "ZWatch Return WITH子句中的未知参数[{0}]，{1}",
    "arguments": [
      "paramName",
      "normalizedExpr"
    ],
    "line": 241,
    "fileName": "src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java"
  },
  {
    "raw": "invalid zwatch return with clause: %s, %s",
    "en_US": "invalid zwatch return with clause: {0}, {1}",
    "zh_CN": "无效的ZWatch返回WITH子句：{0}，{1}",
    "arguments": [
      "expr",
      "e.getMessage()"
    ],
    "line": 250,
    "fileName": "src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java"
  },
  {
    "raw": "Some messages have expired. The expired messages are not allowed to be modified. The system will automatically clean up the expired messages. Please operate later",
    "en_US": "Some messages have expired. The expired messages are not allowed to be modified. The system will automatically clean up the expired messages. Please operate later",
    "zh_CN": "部分消息已过期，过期消息不允许修改。系统会自动清理过期消息，请稍后再操作",
    "arguments": [],
    "line": 1188,
    "fileName": "src/main/java/org/zstack/zwatch/ZWatchManagerImpl.java"
  },
  {
    "raw": "event doesn\u0027t have label[%s]",
    "en_US": "event doesn\u0027t have label[{0}]",
    "zh_CN": "报警事件没有标签[{0}]",
    "arguments": [
      "msg.getKey()"
    ],
    "line": 162,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "the event subscription already has the label[%s]",
    "en_US": "the event subscription already has the label[{0}]",
    "zh_CN": "事件订阅已经有标签[{0}]",
    "arguments": [
      "msg.getKey()"
    ],
    "line": 167,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "the action[uuid:%s] already attached to the event subscription[uuid:%s]",
    "en_US": "the action[uuid:{0}] already attached to the event subscription[uuid:{1}]",
    "zh_CN": "报警动作[uuid:{0}]已经被加载到报警时间订阅[uuid:{1}]",
    "arguments": [
      "msg.getActionUuid()",
      "msg.getSubscriptionUuid()"
    ],
    "line": 138,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "namespace[%s] not found",
    "en_US": "namespace[{0}] not found",
    "zh_CN": "找不到命名空间[{0}]",
    "arguments": [
      "msg.getNamespace()"
    ],
    "line": 213,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "namespace[%s] doesn\u0027t have the event[%s]",
    "en_US": "namespace[{0}] doesn\u0027t have the event[{1}]",
    "zh_CN": "命名空间[{0}]中没有事件[{1}]",
    "arguments": [
      "ns.getName()",
      "msg.getEventName()"
    ],
    "line": 187,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "event[%s] doesn\u0027t have the label[%s]",
    "en_US": "event[{0}] doesn\u0027t have the label[{1}]",
    "zh_CN": "事件[{0}]不存在标签[{1}]",
    "arguments": [
      "msg.getEventName()",
      "l.getKey()"
    ],
    "line": 195,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "duplicate key[%s] with values%s",
    "en_US": "duplicate key[{0}] with values{1}",
    "zh_CN": "重复的键[{0}]和键值{1}",
    "arguments": [
      "k",
      "l"
    ],
    "line": 361,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "Period field is not supported for metric [name:%s]",
    "en_US": "Period field is not supported for metric [name:{0}]",
    "zh_CN": "度量[名称：{0}]不支持期间字段",
    "arguments": [
      "msg.getMetricName()"
    ],
    "line": 222,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "Period field can not be null for metric [name:%s]",
    "en_US": "Period field can not be null for metric [name:{0}]",
    "zh_CN": "度量[名称：{0}]的期间字段不能为Null",
    "arguments": [
      "msg.getMetricName()"
    ],
    "line": 219,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "namespace[%s] doesn\u0027t have the metric[%s]",
    "en_US": "namespace[{0}] doesn\u0027t have the metric[{1}]",
    "zh_CN": "命名空间[{0}]不包含时序数据[{1}]",
    "arguments": [
      "msg.getNamespace()",
      "metricName"
    ],
    "line": 401,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "the metric[%s] is admin only, not available for current user",
    "en_US": "the metric[{0}] is admin only, not available for current user",
    "zh_CN": "指标[{0}]仅供管理员使用，不可用于当前用户",
    "arguments": [
      "metric"
    ],
    "line": 405,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "the metric[%s] doesn\u0027t have the label[%s]",
    "en_US": "the metric[{0}] doesn\u0027t have the label[{1}]",
    "zh_CN": "时序数据[{0}]没有标签[{0}]",
    "arguments": [
      "templateVO.getMetricName()",
      "l.getKey()"
    ],
    "line": 350,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "invalid action type[%s]",
    "en_US": "invalid action type[{0}]",
    "zh_CN": "无效的报警动作类型[{0}]",
    "arguments": [
      "actionType"
    ],
    "line": 273,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "action[uuid:%s, type:%s] not found",
    "en_US": "action[uuid:{0}, type:{1}] not found",
    "zh_CN": "找不到报警动作[uuid:{0}, 类型:{1}]",
    "arguments": [
      "actionUuid",
      "actionType"
    ],
    "line": 278,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "duplicated action[uuid:%s, type:%s] for the alarm[uuid:%s]",
    "en_US": "duplicated action[uuid:{0}, type:{1}] for the alarm[uuid:{2}]",
    "zh_CN": "报警器[uuid:{2}]已经存在报警动作[uuid:{0}, 类型:{1}]",
    "arguments": [
      "msg.getActionUuid()",
      "msg.getActionType()",
      "msg.getAlarmUuid()"
    ],
    "line": 286,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "duplicate label[key:%s, operator:%s, value:%s] for the alarm[uuid:%s]",
    "en_US": "duplicate label[key:{0}, operator:{1}, value:{2}] for the alarm[uuid:{3}]",
    "zh_CN": "报警器[uuid:{2}]已经存在标签[key:{0}, operator:{1}, value:{2}]",
    "arguments": [
      "msg.getKey()",
      "msg.getOperator()",
      "msg.getValue()",
      "msg.getAlarmUuid()"
    ],
    "line": 296,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "namespace[%s] not support",
    "en_US": "namespace[{0}] not support",
    "zh_CN": "不支持命名空间[{0}]",
    "arguments": [
      "msg.getNamespace()"
    ],
    "line": 390,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java"
  },
  {
    "raw": "cannot find the event subscription[uuid:%s], it may have been deleted",
    "en_US": "cannot find the event subscription[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到事件订阅[uuid:{0}]，它可能已经被删除",
    "arguments": [
      "msg.getSubscriptionUuid()"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java"
  },
  {
    "raw": "cannot find the alarm[uuid:%s], it may have been deleted",
    "en_US": "cannot find the alarm[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到报警器[uuid:{0}]，它可能已经被删除",
    "arguments": [
      "msg.getAlarmUuid()"
    ],
    "line": 119,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java"
  },
  {
    "raw": "the metric[%s] repeatInterval value cannot be less than 1h",
    "en_US": "the metric[{0}] repeatInterval value cannot be less than 1h",
    "zh_CN": "时序数据[{0}]的报警间隔时间不能低于1h",
    "arguments": [
      "alarmVO.getMetricName()"
    ],
    "line": 525,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java"
  },
  {
    "raw": "InsufficientData",
    "en_US": "InsufficientData",
    "zh_CN": "数据不足",
    "arguments": [],
    "line": 16,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java"
  },
  {
    "raw": "Alarm",
    "en_US": "Alarm",
    "zh_CN": "已触发",
    "arguments": [],
    "line": 14,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java"
  },
  {
    "raw": "OK",
    "en_US": "OK",
    "zh_CN": "监控中",
    "arguments": [],
    "line": 12,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java"
  },
  {
    "raw": "cannot find the topic[uuid:%s]",
    "en_US": "cannot find the topic[uuid:{0}]",
    "zh_CN": "找不到主题[uuid:{0}]",
    "arguments": [
      "actionUuid"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java"
  },
  {
    "raw": "cannot find SNSTextTemplate[uuid:%s], it may have been deleted",
    "en_US": "cannot find SNSTextTemplate[uuid:{0}], it may have been deleted",
    "zh_CN": "找不到报警文本模板[uuid:{0}], 它可能已经被删除",
    "arguments": [
      "msg.getAlarmTextTemplateUuid()"
    ],
    "line": 96,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java"
  },
  {
    "raw": "invalid application platform type[%s]",
    "en_US": "invalid application platform type[{0}]",
    "zh_CN": "无效的平台类型[{0}]",
    "arguments": [
      "vo.getApplicationPlatformType()"
    ],
    "line": 198,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "parameters:\\n %s are not supported by ZStack, available values are:\\n %s",
    "en_US": "parameters:\\n {0} are not supported by ZStack, available values are:\\n {1}",
    "zh_CN": "参数：\\n{0}不受ZStack支持，可用值为：\\n{1}",
    "arguments": [
      "String.join(\",\\n\", errorRecoverParams)",
      "String.join(\",\\n\", AbstractTextTemplate.defaultSupportedParams.get(vo.getType()))"
    ],
    "line": 212,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "application platform/endpoint [%s] doesn\u0027t support user-defined template",
    "en_US": "application platform/endpoint [{0}] doesn\u0027t support user-defined template",
    "zh_CN": "应用平台/终端[{0}]不支持用户定义模板",
    "arguments": [
      "vo.getApplicationPlatformType()"
    ],
    "line": 203,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "The length of aliyun sms sign should between 2 to 12 characters. Got sign: [%s] with [%d] characters.",
    "en_US": "The length of aliyun sms sign should between 2 to 12 characters. Got sign: [{0}] with [{1}] characters.",
    "zh_CN": "阿里云短信标识的长度应在2-12个字符之间。获得符号：[{0}]，包含[{1}]个字符。",
    "arguments": [
      "sign",
      "sign.length()"
    ],
    "line": 107,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "Sms template code is a string with 13 characters. Got alarm template code: [%s] with [%d] characters.",
    "en_US": "Sms template code is a string with 13 characters. Got alarm template code: [{0}] with [{1}] characters.",
    "zh_CN": "短信模板代码是一个13个字符的字符串。获取报警模板代码：[{0}]，包含[{1}]个字符。",
    "arguments": [
      "alarmTemplateCode",
      "alarmTemplateCode.length()"
    ],
    "line": 112,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "Sms template code is a string with 13 characters. Got event template code: [%s] with [%d] characters.",
    "en_US": "Sms template code is a string with 13 characters. Got event template code: [{0}] with [{1}] characters.",
    "zh_CN": "短信模板代码是一个13个字符的字符串。获取事件模板代码：[{0}]，包含[{1}]个字符。",
    "arguments": [
      "eventTemplateCode",
      "eventTemplateCode.length()"
    ],
    "line": 117,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java"
  },
  {
    "raw": "no template of this type：%s, ",
    "en_US": "no template of this type：{0}, ",
    "zh_CN": "没有此类型的模板：{0}，",
    "arguments": [
      "type"
    ],
    "line": 31,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java"
  },
  {
    "raw": "template error：%s",
    "en_US": "template error：{0}",
    "zh_CN": "模板错误：{0}",
    "arguments": [
      "e.getMessage()"
    ],
    "line": 43,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java"
  },
  {
    "raw": "alarm[uuid:%s] is a system alarm which cannot be deleted",
    "en_US": "alarm[uuid:{0}] is a system alarm which cannot be deleted",
    "zh_CN": "报警器[uuid:{0}]是一个系统报警器，不能被删除",
    "arguments": [
      "DATA_DIR_CAPACITY_ALARM_uuid"
    ],
    "line": 1471,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java"
  },
  {
    "raw": "removing system topic[uuid:%s] from system alarm[uuid:%s] is forbidden",
    "en_US": "removing system topic[uuid:{0}] from system alarm[uuid:{1}] is forbidden",
    "zh_CN": "禁止从系统报警器[uuid:{1}]移除系统主题[uuid:{0}]",
    "arguments": [
      "SNSSystemAlarmTopicManager.SYSTEM_ALARM_TOPIC_uuid",
      "DATA_DIR_CAPACITY_ALARM_uuid"
    ],
    "line": 1482,
    "fileName": "src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java"
  },
  {
    "raw": "invalid label[%s], valid queryable labels are %s",
    "en_US": "invalid label[{0}], valid queryable labels are {1}",
    "zh_CN": "无效的标签[{0}]，有效的可查询标签是{1}",
    "arguments": [
      "l.getKey()",
      "AuditDataV2.queryableLoginLabels"
    ],
    "line": 270,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "startTime[%s] is greater than endTime[%s]",
    "en_US": "startTime[{0}] is greater than endTime[{1}]",
    "zh_CN": "开始时间[{0}]大于结束时间[{1}]",
    "arguments": [
      "startTime",
      "endTime"
    ],
    "line": 487,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "dataUuid cannot be missed",
    "en_US": "dataUuid cannot be missed",
    "zh_CN": "不能缺少数据用户ID",
    "arguments": [],
    "line": 162,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "dataStartTime and dataEndTime cannot be missed",
    "en_US": "dataStartTime and dataEndTime cannot be missed",
    "zh_CN": "DataStartTime和DataEndTime不能丢失",
    "arguments": [],
    "line": 168,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "dataStartTime[%s] is greater than dataEndTime[%s]",
    "en_US": "dataStartTime[{0}] is greater than dataEndTime[{1}]",
    "zh_CN": "DataStartTime[{0}]大于DataEndTime[{1}]",
    "arguments": [
      "msg.getDataStartTime()",
      "msg.getDataEndTime()"
    ],
    "line": 172,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "namespace name cannot start with %s that is reserved",
    "en_US": "namespace name cannot start with {0} that is reserved",
    "zh_CN": "名字空间(namespace)不能以{0}开头",
    "arguments": [
      "Namespace.ZSTACK_NAMESPACE_PREFIX"
    ],
    "line": 190,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "endTime[%s, %sms] must not be before startTime[%s, %sms]",
    "en_US": "endTime[{0}, {1}ms] must not be before startTime[{2}, {3}ms]",
    "zh_CN": "停止时间(endTime)[{0}, {1}ms]不能在开始时间(startTime)[{2}, {3}ms]",
    "arguments": [
      "end",
      "msg.getEndTime()",
      "start",
      "msg.getStartTime()"
    ],
    "line": 396,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "query period cannot exceed %s",
    "en_US": "query period cannot exceed {0}",
    "zh_CN": "查询期间不能超过{0}",
    "arguments": [
      "MAX_QUERY_PERIOD"
    ],
    "line": 211,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "cannot find namespace[%s]",
    "en_US": "cannot find namespace[{0}]",
    "zh_CN": "名字空间(namespace[{0}]不存在",
    "arguments": [
      "msg.getNamespace()"
    ],
    "line": 355,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "cannot find metric[%s] in namespace[%s]",
    "en_US": "cannot find metric[{0}] in namespace[{1}]",
    "zh_CN": "名字空间(namespace[{1}]中找不到时序数据[{0}]",
    "arguments": [
      "msg.getMetricName()",
      "msg.getNamespace()"
    ],
    "line": 228,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "metric[%s]\u0027s labels[%s] does not include [%s]",
    "en_US": "metric[{0}]\u0027s labels[{1}] does not include [{2}]",
    "zh_CN": "时序数据[{0}]的标签列表[{1}]没有指定的标签[{2}]",
    "arguments": [
      "msg.getMetricName()",
      "labels",
      "label.getKey()"
    ],
    "line": 378,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "metric[%s] does not has filter[%s]",
    "en_US": "metric[{0}] does not has filter[{1}]",
    "zh_CN": "时序数据[{0}]不包含过滤条件[{1}]",
    "arguments": [
      "msg.getMetricName()",
      "l.getValue()"
    ],
    "line": 253,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "account[uuid: %s] has no access to the resource[uuid: %s]",
    "en_US": "account[uuid: {0}] has no access to the resource[uuid: {1}]",
    "zh_CN": "帐户[uuid：{0}]无权访问资源[uuid：{1}]",
    "arguments": [
      "msg.getSession().getAccountUuid()",
      "opt.get().getValue()"
    ],
    "line": 324,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "if namespace is all, not support specify metric and labels",
    "en_US": "if namespace is all, not support specify metric and labels",
    "zh_CN": "如果命名空间为ALL，则不支持指定规格和标签",
    "arguments": [],
    "line": 346,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "no namespace[%s] defined in the system",
    "en_US": "no namespace[{0}] defined in the system",
    "zh_CN": "系统中未定义名字空间(namespace[{0}])",
    "arguments": [
      "msg.getNamespace()"
    ],
    "line": 440,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "the namespace[%s] has no metric[%s]",
    "en_US": "the namespace[{0}] has no metric[{1}]",
    "zh_CN": "名字空间(namespace[{0}])不包含时序数据[{1}]",
    "arguments": [
      "msg.getNamespace()",
      "msg.getMetricName()"
    ],
    "line": 443,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "The url format is invalid, the beginning is not http",
    "en_US": "The url format is invalid, the beginning is not http",
    "zh_CN": "URL格式无效，开头不是HTTP",
    "arguments": [],
    "line": 433,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "Illegal json string, labelsJsonStr format is invalid",
    "en_US": "Illegal json string, labelsJsonStr format is invalid",
    "zh_CN": "非法的JSON字符串，labelsjsonstr格式无效",
    "arguments": [],
    "line": 449,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "platform[url\u003d%s] already exists",
    "en_US": "platform[url\u003d{0}] already exists",
    "zh_CN": "平台[URL\u003d{0}]已存在",
    "arguments": [
      "url"
    ],
    "line": 477,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "alert acknowledgement record does not exist",
    "en_US": "alert acknowledgement record does not exist",
    "zh_CN": "警报确认记录不存在",
    "arguments": [
      "msg.getAlertDataUuid()"
    ],
    "line": 498,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "invalid table[%s]",
    "en_US": "invalid table[{0}]",
    "zh_CN": "表[{0}]无效",
    "arguments": [
      "tableName"
    ],
    "line": 516,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "endTime[%s] must not be before startTime[%s]",
    "en_US": "endTime[{0}] must not be before startTime[{1}]",
    "zh_CN": "EndTime[{0}]不能早于StartTime[{1}]",
    "arguments": [
      "endTime",
      "startTime"
    ],
    "line": 522,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "the time interval exceeds % days",
    "en_US": "the time interval exceeds % days",
    "zh_CN": "时间间隔超过%天",
    "arguments": [
      "maxDurationDay"
    ],
    "line": 527,
    "fileName": "src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java"
  },
  {
    "raw": "Normal",
    "en_US": "Normal",
    "zh_CN": "提示",
    "arguments": [],
    "line": 19,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java"
  },
  {
    "raw": "Important",
    "en_US": "Important",
    "zh_CN": "严重",
    "arguments": [],
    "line": 17,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java"
  },
  {
    "raw": "Emergent",
    "en_US": "Emergent",
    "zh_CN": "紧急",
    "arguments": [],
    "line": 15,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java"
  },
  {
    "raw": "invalid function: %s, %s",
    "en_US": "invalid function: {0}, {1}",
    "zh_CN": "无效的方法: {0}, {1}",
    "arguments": [
      "expr",
      "e.getMessage()"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Function.java"
  },
  {
    "raw": "invalid expression: %s, no function found",
    "en_US": "invalid expression: {0}, no function found",
    "zh_CN": "无效的表达式: {0}，找不到对应的方法",
    "arguments": [
      "expr"
    ],
    "line": 110,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Function.java"
  },
  {
    "raw": "the label string[%s] contains no valid operator",
    "en_US": "the label string[{0}] contains no valid operator",
    "zh_CN": "标签中[{0}]未包含有效的比较符号(operator)",
    "arguments": [
      "str"
    ],
    "line": 58,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "invalid label, \u0027key\u0027 field cannot be null. %s",
    "en_US": "invalid label, \u0027key\u0027 field cannot be null. {0}",
    "zh_CN": "无效的标签\"key\"不能为空。{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(this)"
    ],
    "line": 79,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "invalid label, \u0027op\u0027 field is null or something another than Regex and Equal. %s",
    "en_US": "invalid label, \u0027op\u0027 field is null or something another than Regex and Equal. {0}",
    "zh_CN": "无效的标签，\u0027op\u0027为空或者是其它的非正则或者等于符号。{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(this)"
    ],
    "line": 82,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "invalid label, \u0027value\u0027 field cannot be null. %s",
    "en_US": "invalid label, \u0027value\u0027 field cannot be null. {0}",
    "zh_CN": "无效的标签\"value\"不能为空。{0}",
    "arguments": [
      "JSONObjectUtil.toJsonString(this)"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/Label.java"
  },
  {
    "raw": "the ValueCondition string[%s] require \u0027value\u0027 as key ",
    "en_US": "the ValueCondition string[{0}] require \u0027value\u0027 as key ",
    "zh_CN": "ValueCondition字符串[{0}]需要“ value ”作为键",
    "arguments": [
      "str"
    ],
    "line": 73,
    "fileName": "src/main/java/org/zstack/zwatch/datatype/ValueCondition.java"
  },
  {
    "raw": "invalid value[%s] of the argument[%s]",
    "en_US": "invalid value[{0}] of the argument[{1}]",
    "zh_CN": "参数[{1}]值(value)[{0}]无效",
    "arguments": [
      "value",
      "name"
    ],
    "line": 30,
    "fileName": "src/main/java/org/zstack/zwatch/function/ArgumentChecker.java"
  },
  {
    "raw": "unknown arguments",
    "en_US": "unknown arguments",
    "zh_CN": "未知参数",
    "arguments": [],
    "line": 24,
    "fileName": "src/main/java/org/zstack/zwatch/function/ExtremumFunction.java"
  },
  {
    "raw": "missing required argument",
    "en_US": "missing required argument",
    "zh_CN": "缺少必需的参数",
    "arguments": [],
    "line": 30,
    "fileName": "src/main/java/org/zstack/zwatch/function/ExtremumFunction.java"
  },
  {
    "raw": "missing required argument[%s]",
    "en_US": "missing required argument[{0}]",
    "zh_CN": "缺少参数[{0}]",
    "arguments": [
      "name"
    ],
    "line": 88,
    "fileName": "src/main/java/org/zstack/zwatch/function/MetricFunction.java"
  },
  {
    "raw": "duplicate argument[%s]",
    "en_US": "duplicate argument[{0}]",
    "zh_CN": "重复的参数[{0}]",
    "arguments": [
      "k"
    ],
    "line": 101,
    "fileName": "src/main/java/org/zstack/zwatch/function/MetricFunction.java"
  },
  {
    "raw": "unknown function[%s]",
    "en_US": "unknown function[{0}]",
    "zh_CN": "未知方法[{0}]",
    "arguments": [
      "func.getName()"
    ],
    "line": 116,
    "fileName": "src/main/java/org/zstack/zwatch/function/MetricFunction.java"
  },
  {
    "raw": "value[%s] is not a Integer number",
    "en_US": "value[{0}] is not a Integer number",
    "zh_CN": "值(value)[{0}]不是一个整数",
    "arguments": [
      "v"
    ],
    "line": 32,
    "fileName": "src/main/java/org/zstack/zwatch/function/PaginationFunction.java"
  },
  {
    "raw": "invalid argument[limit:%s], it can\u0027t be a negative number",
    "en_US": "invalid argument[limit:{0}], it can\u0027t be a negative number",
    "zh_CN": "无效的参数[limit:{0}]，不能是负数",
    "arguments": [
      "v"
    ],
    "line": 19,
    "fileName": "src/main/java/org/zstack/zwatch/function/PaginationFunction.java"
  },
  {
    "raw": "invalid argument[start:%s], it can\u0027t be a negative number",
    "en_US": "invalid argument[start:{0}], it can\u0027t be a negative number",
    "zh_CN": "参数[开始：{0}]无效，它不能是负数",
    "arguments": [
      "v"
    ],
    "line": 29,
    "fileName": "src/main/java/org/zstack/zwatch/function/PaginationFunction.java"
  },
  {
    "raw": "unknown argument[%s]",
    "en_US": "unknown argument[{0}]",
    "zh_CN": "未知参数[{0}]",
    "arguments": [
      "arg.name"
    ],
    "line": 42,
    "fileName": "src/main/java/org/zstack/zwatch/function/SortFunction.java"
  },
  {
    "raw": "unable to query influxdb, %s",
    "en_US": "unable to query influxdb, {0}",
    "zh_CN": "无法查询InfluxDB，{0}",
    "arguments": [
      "ret.getError()"
    ],
    "line": 62,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "invalid influxdb response: %s, no name found in columns",
    "en_US": "invalid influxdb response: {0}, no name found in columns",
    "zh_CN": "InfluxDB响应无效：{0}，在列中找不到名称",
    "arguments": [
      "JSONObjectUtil.toJsonString(ret)"
    ],
    "line": 106,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "failed to create influxdb retention \u0027%s\u0027, %s",
    "en_US": "failed to create influxdb retention \u0027{0}\u0027, {1}",
    "zh_CN": "无法创建InfluxDB保留“{0}”，{1}",
    "arguments": [
      "retention",
      "res.getError()"
    ],
    "line": 92,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "failed to alter influxdb retention \u0027%s\u0027, %s",
    "en_US": "failed to alter influxdb retention \u0027{0}\u0027, {1}",
    "zh_CN": "无法更改InfluxDB保留“{0}”，{1}",
    "arguments": [
      "retention",
      "res.getError()"
    ],
    "line": 85,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "failed to create influxdb default user \u0027%s\u0027, %s",
    "en_US": "failed to create influxdb default user \u0027{0}\u0027, {1}",
    "zh_CN": "无法创建InfluxDB默认用户“{0}”，{1}",
    "arguments": [
      "defaultUserName",
      "res.getError()"
    ],
    "line": 124,
    "fileName": "src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java"
  },
  {
    "raw": "cannot find EventFamily[name:%s]",
    "en_US": "cannot find EventFamily[name:{0}]",
    "zh_CN": "找不到事件族[name:{0}]",
    "arguments": [
      "name"
    ],
    "line": 806,
    "fileName": "src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java"
  },
  {
    "raw": "cannot find EventFamily[name:%s, namespace:%s]",
    "en_US": "cannot find EventFamily[name:{0}, namespace:{1}]",
    "zh_CN": "找不到事件族[name:{0}, namespace:{1}]",
    "arguments": [
      "name",
      "namespace"
    ],
    "line": 797,
    "fileName": "src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java"
  },
  {
    "raw": "invalid query label[%s]. Allowed label names are %s",
    "en_US": "invalid query label[{0}]. Allowed label names are {1}",
    "zh_CN": "无效的查询标签[{0}]。允许标签名是 {1}",
    "arguments": [
      "label.getKey()",
      "nameSpaceLabelList"
    ],
    "line": 726,
    "fileName": "src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java"
  },
  {
    "raw": "there are multiple EventFamily with the name[%s], you must specify the label[%s]",
    "en_US": "there are multiple EventFamily with the name[{0}], you must specify the label[{1}]",
    "zh_CN": "存在多个名为[{0}]的事件族，你必须指定标签[{1}]",
    "arguments": [
      "name.getValue()",
      "InfluxEventDataV2.FIELD_NAMESPACE"
    ],
    "line": 627,
    "fileName": "src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java"
  },
  {
    "raw": "the instance[%s] is already in the group",
    "en_US": "the instance[{0}] is already in the group",
    "zh_CN": "实例[{0}]已在组中",
    "arguments": [
      "msg.getInstanceUuid()"
    ],
    "line": 55,
    "fileName": "src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java"
  },
  {
    "raw": "instance[%s] is not in the group",
    "en_US": "instance[{0}] is not in the group",
    "zh_CN": "实例[{0}]不在组中",
    "arguments": [
      "msg.getInstanceUuid()"
    ],
    "line": 66,
    "fileName": "src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java"
  },
  {
    "raw": "The monitorGroup[%s] does not have an monitorTemplate applied",
    "en_US": "The monitorGroup[{0}] does not have an monitorTemplate applied",
    "zh_CN": "MonitorGroup[{0}]未应用MonitorTemplate",
    "arguments": [
      "msg.getGroupUuid()"
    ],
    "line": 76,
    "fileName": "src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java"
  },
  {
    "raw": "The instance in the group has reached the maximum limit",
    "en_US": "The instance in the group has reached the maximum limit",
    "zh_CN": "组中的实例已达到最大限制",
    "arguments": [],
    "line": 333,
    "fileName": "src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupBase.java"
  },
  {
    "raw": "The rule in the template has reached the maximum limit",
    "en_US": "The rule in the template has reached the maximum limit",
    "zh_CN": "模板中的规则已达到最大限制",
    "arguments": [],
    "line": 607,
    "fileName": "src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupManagerImpl.java"
  },
  {
    "raw": "no mysql namespace[%s] found",
    "en_US": "no mysql namespace[{0}] found",
    "zh_CN": "未找到MySQL命名空间[{0}]",
    "arguments": [
      "qo.getNamespaceName()"
    ],
    "line": 51,
    "fileName": "src/main/java/org/zstack/zwatch/mysql/MysqlDatabaseDriver.java"
  },
  {
    "raw": "namespace[%s] has no metric[%s]",
    "en_US": "namespace[{0}] has no metric[{1}]",
    "zh_CN": "名字空间(namespace)[{0}]没有任何时序数据(metric)[{1}]",
    "arguments": [
      "getName()",
      "queryObject.getMetricName()"
    ],
    "line": 48,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java"
  },
  {
    "raw": "metric[%s] of the namespace[%s] has no label named %s",
    "en_US": "metric[{0}] of the namespace[{1}] has no label named {2}",
    "zh_CN": "名字空间(namespace)[{1}]的时序数据(metric)[{0}]没有名为{2}的标签",
    "arguments": [
      "m.getName()",
      "getName()",
      "l.getKey()"
    ],
    "line": 54,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java"
  },
  {
    "raw": "error happened but reason not specified",
    "en_US": "error happened but reason not specified",
    "zh_CN": "发生了意想不到的错误",
    "arguments": [],
    "line": 437,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/NamespaceEventManagerImpl.java"
  },
  {
    "raw": "folder[%s] not found on the management server[%s]",
    "en_US": "folder[{0}] not found on the management server[{1}]",
    "zh_CN": "在管理服务器[{1}]上找不到对应的文件夹[{0}]",
    "arguments": [
      "d",
      "Platform.getManagementServerIp()"
    ],
    "line": 32,
    "fileName": "src/main/java/org/zstack/zwatch/namespace/SystemNamespace.java"
  },
  {
    "raw": "%s",
    "en_US": "{0}",
    "zh_CN": "{0}",
    "arguments": [
      "rsp.getError()"
    ],
    "line": 165,
    "fileName": "src/main/java/org/zstack/zwatch/prometheus/KvmHostScrape.java"
  },
  {
    "raw": "LessThanOrEqualTo",
    "en_US": "LessThanOrEqualTo",
    "zh_CN": "小于等于",
    "arguments": [],
    "line": 35,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "LessThan",
    "en_US": "LessThan",
    "zh_CN": "小于",
    "arguments": [],
    "line": 33,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "GreaterThan",
    "en_US": "GreaterThan",
    "zh_CN": "大于",
    "arguments": [],
    "line": 31,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "GreaterThanOrEqualTo",
    "en_US": "GreaterThanOrEqualTo",
    "zh_CN": "大于等于",
    "arguments": [],
    "line": 29,
    "fileName": "src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java"
  },
  {
    "raw": "resource[%s] doesn\u0027t support zwatch return with clause",
    "en_US": "resource[{0}] doesn\u0027t support zwatch return with clause",
    "zh_CN": "资源[{0}]不支持ZWatch Return WITH子句",
    "arguments": [
      "voClassSimpleName"
    ],
    "line": 78,
    "fileName": "src/main/java/org/zstack/zwatch/utils/ResourceVOToNamespaceMappingUtils.java"
  },
  {
    "raw": "on purpose",
    "en_US": "on purpose",
    "zh_CN": "",
    "arguments": [],
    "line": 80,
    "fileName": "src/test/java/org/zstack/test/TestSafeWhile.java"
  },
  {
    "raw": "on purpose %d",
    "en_US": "on purpose {0}",
    "zh_CN": "",
    "arguments": [
      "item"
    ],
    "line": 56,
    "fileName": "src/test/java/org/zstack/test/TestSafeWhile.java"
  },
  {
    "raw": "I should not be in error list %d",
    "en_US": "I should not be in error list {0}",
    "zh_CN": "",
    "arguments": [
      "item"
    ],
    "line": 39,
    "fileName": "src/test/java/org/zstack/test/TestSafeWhile.java"
  },
  {
    "raw": "I should not be in error list either %d",
    "en_US": "I should not be in error list either {0}",
    "zh_CN": "",
    "arguments": [
      "item"
    ],
    "line": 40,
    "fileName": "src/test/java/org/zstack/test/TestSafeWhile.java"
  },
  {
    "raw": "done, on purpose",
    "en_US": "done, on purpose",
    "zh_CN": "",
    "arguments": [],
    "line": 63,
    "fileName": "src/test/java/org/zstack/test/TestSafeWhile.java"
  },
  {
    "raw": "I should not be errs list",
    "en_US": "I should not be errs list",
    "zh_CN": "",
    "arguments": [],
    "line": 81,
    "fileName": "src/test/java/org/zstack/test/TestSafeWhile.java"
  },
  {
    "raw": "I should not be errs list either.",
    "en_US": "I should not be errs list either.",
    "zh_CN": "",
    "arguments": [],
    "line": 82,
    "fileName": "src/test/java/org/zstack/test/TestSafeWhile.java"
  },
  {
    "raw": "unit test asks it to fail",
    "en_US": "unit test asks it to fail",
    "zh_CN": "",
    "arguments": [],
    "line": 40,
    "fileName": "src/test/java/org/zstack/test/aop/ManInTheMiddleService.java"
  },
  {
    "raw": "On purpose",
    "en_US": "On purpose",
    "zh_CN": "",
    "arguments": [],
    "line": 22,
    "fileName": "src/test/java/org/zstack/test/compute/hostallocator/HostAllocateExtension.java"
  },
  {
    "raw": "on purpose 3",
    "en_US": "on purpose 3",
    "zh_CN": "",
    "arguments": [],
    "line": 67,
    "fileName": "src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java"
  },
  {
    "raw": "on purpose 1",
    "en_US": "on purpose 1",
    "zh_CN": "",
    "arguments": [],
    "line": 75,
    "fileName": "src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java"
  },
  {
    "raw": "on purpose 2",
    "en_US": "on purpose 2",
    "zh_CN": "",
    "arguments": [],
    "line": 83,
    "fileName": "src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java"
  }
]