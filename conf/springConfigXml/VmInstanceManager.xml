<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:zstack="http://zstack.org/schema/zstack"
       xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.0.xsd
    http://zstack.org/schema/zstack
    http://zstack.org/schema/zstack/plugin.xsd"
    default-init-method="init" default-destroy-method="destroy">

    <bean id="VmInstanceManager" class="org.zstack.compute.vm.VmInstanceManagerImpl">
        <property name="createVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.VmImageSelectBackupStorageFlow</value>
                <value>org.zstack.compute.vm.VmAllocateHostAndPrimaryStorageFlow</value>
                <value>org.zstack.compute.vm.VmAllocateVolumeFlow</value>
                <value>org.zstack.compute.vm.VmAllocateNicFlow</value>
                <value>org.zstack.compute.vm.VmAllocateCdRomFlow</value>
                <value>org.zstack.compute.vm.VmInstantiateResourcePreFlow</value>
                <value>org.zstack.compute.vm.VmCreateOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmInstantiateResourcePostFlow</value>
            </list>
        </property>
        <property name="stopVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.BeforeVmStopOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmStopOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmReturnHostFlow</value>
                <value>org.zstack.compute.vm.VmReleaseResourceFlow</value>
            </list>
        </property>
        <property name="rebootVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.BeforeVmStopOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmStopOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmReleaseResourceFlow</value>
                <value>org.zstack.compute.vm.VmImageSelectBackupStorageFlow</value>
                <value>org.zstack.compute.vm.VmAllocateNicForStartingVmFlow</value>
                <value>org.zstack.compute.vm.VmInstantiateResourcePreFlow</value>
                <value>org.zstack.compute.vm.VmStartOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmInstantiateResourcePostFlow</value>
            </list>
        </property>
        <property name="startVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.VmAllocateHostForStoppedVmFlow</value>
                <value>org.zstack.compute.vm.VmImageSelectBackupStorageFlow</value>
                <value>org.zstack.compute.vm.VmAllocateNicForStartingVmFlow</value>
                <value>org.zstack.compute.vm.VmInstantiateResourcePreFlow</value>
                <value>org.zstack.compute.vm.VmStartOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmInstantiateResourcePostFlow</value>
            </list>
        </property>
        <property name="migrateVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.VmMigrationCheckL2NetworkOnHostFlow</value>
                <value>org.zstack.compute.vm.VmAllocateHostForMigrateVmFlow</value>
                <value>org.zstack.compute.vm.VmMigrateCallExtensionFlow</value>
                <value>org.zstack.compute.vm.VmMigrateOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmReturnHostFlow</value>
            </list>
        </property>
        <property name="destroyVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.VmDestroyOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.VmReturnHostFlow</value>
                <value>org.zstack.compute.vm.VmReleaseResourceFlow</value>
                <value>org.zstack.compute.vm.VmReturnReleaseNicFlow</value>
                <value>org.zstack.compute.vm.VmDeleteVolumeFlow</value>
            </list>
        </property>
        <property name="attachVolumeWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.VmAllocatePrimaryStorageForAttachingDiskFlow</value>
                <value>org.zstack.compute.vm.VmInstantiateAttachingVolumeFlow</value>
                <value>org.zstack.compute.vm.VmAfterInstantiateVolumeInAttachingVolumeFlow</value>
                <value>org.zstack.compute.vm.VmAssignDeviceIdToAttachingVolumeFlow</value>
                <value>org.zstack.compute.vm.VmAttachVolumeOnHypervisorFlow</value>
            </list>
        </property>
        <property name="attachIsoWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.VmDownloadIsoFlow</value>
                <value>org.zstack.compute.vm.AttachIsoOnHypervisorFlow</value>
            </list>
        </property>
        <property name="detachIsoWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.DetachIsoOnHypervisorFlow</value>
                <value>org.zstack.compute.vm.DetachIsoOnPrimaryStorageFlow</value>
            </list>
        </property>
        <property name="expungeVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.VmExpungeRootVolumeFlow</value>
                <value>org.zstack.compute.vm.VmExpungeMemoryVolumeFlow</value>
                <value>org.zstack.compute.vm.VmExpungeCacheVolumeFlow</value>
            </list>
        </property>
        <property name="pauseVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.PauseVmOnHypervisorFlow</value>
            </list>
        </property>
        <property name="resumeVmWorkFlowElements">
            <list>
                <value>org.zstack.compute.vm.ResumeVmOnHypervisorFlow</value>
            </list>
        </property>

        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.Component" />
            <zstack:extension interface="org.zstack.header.Service" />
            <zstack:extension interface="org.zstack.header.identity.ReportQuotaExtensionPoint" />
            <zstack:extension interface="org.zstack.header.managementnode.ManagementNodeReadyExtensionPoint" />
            <zstack:extension interface="org.zstack.header.network.l3.L3NetworkDeleteExtensionPoint" />
            <zstack:extension interface="org.zstack.header.apimediator.GlobalApiMessageInterceptor" />
            <zstack:extension interface="org.zstack.header.identity.ResourceOwnerAfterChangeExtensionPoint" />
            <zstack:extension interface="org.zstack.header.host.AfterChangeHostStatusExtensionPoint"/>
            <zstack:extension interface="org.zstack.header.vm.VmInstanceMigrateExtensionPoint"/>
        </zstack:plugin>
    </bean>

    <bean id="UserVmFactory" class="org.zstack.compute.vm.UserVmFactory">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.vm.VmInstanceFactory" />
        </zstack:plugin>
    </bean>

    <bean id="VmInstanceExtensionPointEmitter" class="org.zstack.compute.vm.VmInstanceExtensionPointEmitter">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.Component" />
        </zstack:plugin>
    </bean>

    <bean id="VmInstanceNotifyPointEmitter" class="org.zstack.compute.vm.VmInstanceNotifyPointEmitter">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.Component" />
        </zstack:plugin>
    </bean>

    <bean id="VmInstanceApiInterceptor" class="org.zstack.compute.vm.VmInstanceApiInterceptor">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.apimediator.ApiMessageInterceptor" />
        </zstack:plugin>
    </bean>

    <bean id="VmCascadeExtension" class="org.zstack.compute.vm.VmCascadeExtension">
        <zstack:plugin>
			<zstack:extension interface="org.zstack.core.cascade.CascadeExtensionPoint" />
        </zstack:plugin>
    </bean>

    <bean id="VmInstanceDeletionPolicyManager" class="org.zstack.compute.vm.VmInstanceDeletionPolicyManagerImpl" />

    <bean id="VmTracerHelper" class="org.zstack.compute.vm.VmTracerHelperImpl">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.Component" />
        </zstack:plugin>
    </bean>

    <util:list id="SupportNicDriverTypes">
        <value>virtio</value>
        <value>e1000</value>
        <value>rtl8139</value>
    </util:list>

    <bean id="VmNicManager" class="org.zstack.compute.vm.VmNicManagerImpl">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.compute.vm.VmNicManager" />
            <zstack:extension interface="org.zstack.compute.vm.VmNicExtensionPoint" />
            <zstack:extension interface="org.zstack.header.managementnode.PrepareDbInitialValueExtensionPoint" />
            <zstack:extension interface="org.zstack.header.vm.VmPlatformChangedExtensionPoint" />
            <zstack:extension interface="org.zstack.header.Component"/>
        </zstack:plugin>
        
        <property name="supportNicDriverTypes" ref="SupportNicDriverTypes"/>
        <property name="defaultPVNicDriver" value="virtio"/>
        <property name="defaultNicDriver" value="e1000"/>
    </bean>

    <bean id="VmNicFactory" class="org.zstack.compute.vm.VmNicFactory">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.vm.VmInstanceNicFactory" />
        </zstack:plugin>
    </bean>

    <bean id="VmCdRomUpgradeExtension" class="org.zstack.compute.vm.VmCdRomUpgradeExtension">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.managementnode.ManagementNodeReadyExtensionPoint"/>
        </zstack:plugin>
    </bean>

    <bean id="VmPriorityOperator" class="org.zstack.compute.vm.VmPriorityOperator">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.managementnode.PrepareDbInitialValueExtensionPoint" />
        </zstack:plugin>
    </bean>

    <bean id="VmPriorityUpgradeExtension" class="org.zstack.compute.vm.VmPriorityUpgradeExtension">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.header.Component"/>
        </zstack:plugin>
    </bean>

    <bean id="VmInstanceNumaCascadeExtension" class="org.zstack.compute.vm.VmInstanceNumaCascadeExtension">
        <zstack:plugin>
            <zstack:extension interface="org.zstack.core.cascade.CascadeExtensionPoint" />
        </zstack:plugin>
    </bean>

</beans>
