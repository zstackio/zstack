# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:43
# args: accountUuid,userUuid
no\ pemission\ to\ do\ the\ operation\ for\ [accountUuid\:%s,\ userUuid\:%s] = 没有可对[AccountUuId：{0}，UserUuId：{1}]执行操作的pEmission

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:50
# args: 
If\ a\ specified\ Accesskey\ is\ expected,\ the\ AccesskeyId\ and\ the\ AccesskeySecret\ must\ be\ provided\ at\ the\ same\ time. = 如果需要指定的AccessKey，则必须同时提供AccessKeyId和AccessKeySecret。

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:72
# args: msg.getAccountUuid(),msg.getUserUuid()
[accountId\:\ %s,\ userID\:\ %s]\ is\ not\ valid\ account\ or\ iam2\ porject/user = [帐户ID：{0}，用户ID：{1}]不是有效的帐户或IAM2对象/用户

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:91
# args: msg.getAccountUuid(),msg.getUserUuid()
accessKey\ number\ for\ [accountId\:\ %s,\ userID\:\ %s]exceeds\ the\ max = [AccountId：{0}，UserId：{1}]的AccessKey编号超出最大值

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:92
# args: ipVer
not\ support\ the\ ip\ version\ %d = 不支持的IP版本{0}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:98
# args: ips,acl.getUuid()
%s\ duplicate/overlap\ ip\ entry\ with\ access-control-list\ group\:%s = {0}中有和访问控制组{1}里的ip重复/重叠

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:105
# args: ips
ip\ format\ only\ supports\ ip/iprange/cidr,\ but\ find\ %s = 只支持IP地址/IP段/IP网络的格式，不支持{0}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:109
# args: startIp,endIp,NetworkUtils.longToIpv4String(r.lowerEndpoint()),NetworkUtils.longToIpv4String(r.upperEndpoint()),acl.getUuid()
ip\ range[%s,\ %s]\ is\ overlap\ with\ [%s,\ %s]\ in\ access-control-list\ group\:%s = IP段[{0}，{1}]和访问控制组：{4}里的[{2}, {3}]有重叠的ip

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:127
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ redirect\ rule,\ can\ not\ add\ IP\ Entry = 访问控制列表组[{0}]已拥有重定向规则，无法添加IP条目

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:133
# args: acl.getUuid(),AccessControlListConstants.MAX_ENTRY_COUNT_PER_GROUP
the\ access-control-list\ groups[%s]\ can't\ be\ added\ more\ than\ %d\ ip\ entries = 访问控制组[{0}]最多只能添加{1}ip组

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:138
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ redirect\ rule,\ can\ not\ add\ ip\ entry = 访问控制列表组[{0}]已拥有重定向规则，无法添加IP条目

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:154
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ ip\ entry,\ can\ not\ add\ redirect\ rule = 访问控制列表组[{0}]已拥有IP条目，无法添加重定向规则

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:158
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ one\ redirect\ rule,\ can\ not\ add\ redirect\ rule = 访问控制列表组[{0}]已拥有一个重定向规则，无法添加重定向规则

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:162
# args: 
domain\ and\ url\ can\ not\ both\ empty = 域和URL不能同时为空

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:178
# args: msg.getUrl()
url[%s]\ is\ not\ validate\ url = URL[{0}]不是验证URL

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:167
# args: msg.getDomain()
domain[%s]\ is\ not\ validate\ domain = 域[{0}]不是验证域

# at: src/main/java/org/zstack/aliyun/account/AliyunAccountBase.java:348
# args: builder.deleteCharAt(builder.length() - 1),timeout
cannot\ connect\ to\ [%s]\ in\ %d\ milliseconds,\ so\ aliyun\ openapi\ is\ unreachable. = 无法在{1}毫秒内连接到[{0}]，因此无法访问阿里云OpenAPI。

# at: src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java:466
# args: 
no\ bucket\ found\ for\ backup = 没有可用的Bucket执行备份

# at: src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java:28
# args: 
accessKey\ and\ keySecret\ must\ be\ set = 必须设置accessKey和keySecret

# at: src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java:73
# args: 
ocean\ api\ endpoint\ must\ not\ be\ null = Ocean API终结点不能为空

# at: src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:33
# args: 
accessKey\ and\ keySecret\ must\ be\ set! = 必须设置AccessKey和KeySecret！

# at: src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:40
# args: 
regionId\ must\ be\ set! = 必须设置RegionID！

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2162
# args: AliyunConstant.DEFAULT_ENTRY_WAIT_STATUS_TIMEOUT
entry\ is\ still\ existed\ after\ %s\ ms = 虚拟路由器删除超时（{0} ms）

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2648
# args: request.getInstanceIds()
cannot\ find\ EcsInstance[%s],\ please\ check\ if\ it\ exists\ in\ Aliyun\ console = 找不到ECSInstance[{0}]，请检查阿里云控制台是否存在

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2708
# args: 
image\ already\ existed\ remote,\ please\ use\ sync\ first. = 镜像已经存在阿里云服务器上，请尝试同步数据

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:3015
# args: request.getRegionId()
regionId[%s]\ is\ invalid\ by\ aliyun! = regionId[{0}]是无效的！

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:61
# args: 
Not\ a\ valid\ message! = 无效消息！

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:177
# args: action,result.ErrorCode,result.ErrorMessage
%s\ failed,\ ErrorCode\:\ %s,\ ErrorMessage\:\ %s = {0}失败，错误代码：{1}，错误消息：{2}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:301
# args: 15000
Device\ Not\ Ready\ in\ %d\ milli\ seconds = 设备在{0}毫秒内未就绪

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:497
# args: result.Content.TaskStatus
snapshot\ task\ status\ is\ finished\ %s = 快照任务状态为已完成{0}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:493
# args: msg.getTimeout(),result.Content.Progress,result.Content.TaskStatus
snapshot\ task\ cannot\ finished\ in\ %d\ milliseconds,\ now\ progress\ is\ %d,\ status\ is\ %s = 快照任务无法在{0}毫秒内完成，当前进度为{1}，状态为{2}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:898
# args: 
not\ supported\ HybridClient = 不支持HybridClient

# at: src/main/java/org/zstack/aliyun/core/AliyunUtils.java:259
# args: e.getMessage()
add\ endpoint\ to\ sdk\ failed,\ due\ to\:\ %s = 将终结点添加到SDK失败，原因是：{0}

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:86
# args: 
cannot\ find\ key\ /\ secret\ from\ msg = 无法从消息中找到密钥/机密

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:410
# args: 
cannot\ input\ 0-length\ file\ as\ vm\ images! = 无法将长度为0的文件作为云主机镜像输入！

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:499
# args: e.getMessage()
Permission\ denied\ for\:\ %s = 权限被拒绝：{0}

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:588
# args: e.getRequestId()
Bucket\ name\ is\ already\ existed\ (maybe\ created\ by\ other\ user),\ Please\ select\ a\ different\ name\ and\ try\ again.(aliyun\ request-id\:\ %s) = Bucket名称已经存在（可能已经被别的用户使用了），请尝试使用一个新的命名。（阿里云请求ID: {0}）

# at: src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java:277
# args: HybridType.AliyunEBS.toString()
arg\ 'endpoint'\ must\ be\ set\ in\ %s\ type = 必须在{0}类型中设置参数“ endpoint ”

# at: src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java:332
# args: type.toString()
not\ supported\ datacenter\ [%s]\ type\ here! = 此处不支持数据中心[{0}]类型！

# at: src/main/java/org/zstack/aliyun/core/identityzone/AliyunPrivateIdentityZoneBase.java:175
# args: 
must\ indicate\ zoneId\ in\ private\ aliyun. = 必须在私有阿里云中注明ZoneID。

# at: src/main/java/org/zstack/aliyun/ebs/storage/OceanApi.java:87
# args: e.getMessage()
make\ ocean\ api\ signature\ string\ failed\:\ %s = 生成Ocean API签名字符串失败：{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageApiInterceptor.java:30
# args: 
url(ocean\ endpoint)\ must\ be\ set\ for\ aliyun\ ebs\ backupstorage = 阿里云EBS备份存储必须设置URL（海洋端点）

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java:376
# args: 
aliyun\ ebs\ backup\ storage\ do\ not\ support\ to\ cancel\ download\ image = 阿里云EBS备份存储不支持取消下载镜像

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java:620
# args: objectFile,ovo.getBucketName()
no\ such\ object\ %s\ found\ in\ bucket\ %s = 在存储桶{1}中找不到此类对象{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageCascadeExtenstion.java:46
# args: oss.getUuid(),evo.getUuid()
cannot\ delete\ oss\ bucket\ [%s],\ Aliyun\ Ebs\ BackupStorage\ [%s]\ still\ existed,\ please\ delete\ it\ first. = 无法删除OSS Bucket[{0}]，Aliyun EBS BackupStorage[{1}]仍然存在，请先将其删除。

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:147
# args: vol.getUuid()
cannot\ find\ device\ path\ from\ volume\:\ %s = 无法从卷中找到设备路径：{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:490
# args: 
aliyun\ ebs\ not\ support\ resize\ on\ running\ vm\ now. = 阿里云EBS现在不支持在运行的云主机上调整大小。

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:612
# args: isoUuid
iso\ [%s]\ has\ been\ attached,\ we\ can\ not\ attach\ it\ until\ detach\ it = 已附加ISO[{0}]，在分离它之前无法附加它

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:39
# args: msg.getUrl()
url\ must\ starts\ with\ http\://\ or\ https\://,\ but\ got\ %s = URL必须以HTTP：//或HTTPS：//开头，但获得了{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:35
# args: 
url(ocean\ endpoint)\ must\ be\ set\ for\ aliyun\ ebs\ primarystorage = 阿里云EBS PrimaryStorage必须设置URL（海洋端点）

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:43
# args: 
panguPartitionUuid\ or\ identityZoneUuid\ must\ be\ set. = 必须设置PangUpartitionUuid或IdentityZoneUuid。

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:49
# args: msg.getPanguPartitionUuid(),msg.getIdentityZoneUuid()
panguPartitionUuid\ [%s]\ not\ be\ matched\ with\ identityZoneUuid\ [%s] = panguPartitionUuid[{0}]与identityZoneUuid[{1}]不匹配

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:669
# args: self.getUuid(),self.getName()
the\ aliyun\ ebs\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = 阿里云EBS主存储[uuid：{0}，名称：{1}]在连接的集群中找不到任何可用于实例化卷的物理机

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:2888
# args: reply1.getProgress()
create\ snapshot\ timeout,\ progress\ is\ %d = 创建快照超时，进度为{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:1971
# args: msg.getVolume().getRootImageUuid()
cannot\ find\ snapshot\ from\ image\:\ %s,\ maybe\ the\ image\ has\ been\ deleted = 无法从镜像中找到快照：{0}，该镜像可能已被删除

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:2746
# args: 
ebs\ primarystorage\ cannot\ support\ decrease\ size\ now = EBS主存储现在无法支持减小大小

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:3134
# args: bsvo.getType()
aliyun\ ebs\ primarystorage\ only\ support\ aliyun\ ebs\ bs,\ actually\ get\ type\:\ %s = 阿里云EBS PrimaryStorage仅支持阿里云EBS BS，实际获取类型：{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageCascadeExtension.java:46
# args: iz.getUuid(),evo.getUuid()
cannot\ delete\ identity\ zone\ [%s],\ Aliyun\ Ebs\ PrimaryStorage\ [%s]\ still\ existed,\ please\ delete\ it\ first. = 无法删除标识区[{0}]，阿里云EBS PrimaryStorage[{1}]仍然存在，请先删除。

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:113
# args: installPath
invalid\ install\ path\:\ %s = 安装路径无效：{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:24
# args: volumeId,url
append\ volumeId\:\ %s,\ but\ another\ volumeId\ existed\ in\ url\:\ %s = 附加VolumeID：{0}，但URL中存在另一个VolumeID：{1}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:79
# args: url
invalid\ install\ url\:\ %s = 无效的安装URL：{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:35
# args: hostUuid,url
hostUuid\ [%s]\ already\ existed\ in\ url\:\ %s = URL{1}中已存在HostUuid[{0}]

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:83
# args: hostUuid
cannot\ find\ devicePath\ on\ host\:\ %s = 在物理机上找不到DevicePath：{0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:128
# args: installPath
invalid\ snapshot\ install\ path\:\ %s = 快照安装路径无效：{0}

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:79
# args: eivo.getUuid(),eivo.getName(),eivo.getCreateDate()
ecs\ image\ existed\ remote\ and\ local,\ ecs\ image\ uuid\:\ %s,\ name\:\ %s,\ created\ time\:\ %s = 云主机镜像存在于阿里云服务器和本地，云主机镜像的uuid: {0}，名称: {1}，创建时间: {2}

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:107
# args: msg.getName(),new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(HybridUtilsForAliyun.fmtTime(rpl.getCreateDate()))
ecs\ image\ existed\ remote,\ name\:\ %s,\ created\ time\:\ %s = 云主机镜像已经存在于阿里云服务器上，名称: {0}，创建时间: {1}

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:184
# args: 
No\ Available\ instance\ types\ now. = 没有可用的实例类型

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:253
# args: regionId,data1.get("type")
This\ region\ [%s]\ cannot\ produce\ instance\ type\ [%s]\ now,\ please\ select\ another\ instance\ type\ or\ another\ region = 此地区[{0}]现在无法生成实例类型[{1}]，请选择其他实例类型或其他地区

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:344
# args: ecs.getUuid(),ecs.getEcsInstanceId()
no\ system\ disk\ found\ for\ ecs\:\ [%s],\ ecs\ id\ is\:\ [%s] = 没有系统云盘可用来创建云主机，云主机id是: [{1}]

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:65
# args: evo.getEcsStatus().toString()
Only\ delete\ ecs\ which\ status\ is\ running\ or\ stopped,\ now\ is\ %s = 只能删除状态为运行中或者已停止的云主机，现在云主机状态为{0}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:70
# args: evo.getChargeType().toString()
Only\ postpaid\ ecs\ support\ delete\ remote,\ the\ indicate\ ecs\ charge\ type\ is\:\ %s = 只有已付费的云主机支持删除，目前云主机付费状态是: {0}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:84
# args: 
Only\ admin\ can\ set\ parameter\ [onlyZstack]\ \=\ false = 只有管理员能设置[onlyZsatck]参数为false

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:93
# args: evo.getAvailableIpAddressCount()
vSwitch\ availableIpAddress\ is\ not\ enough,\ now\ is\ (%d) = 虚拟交换机可用IP地址不够，现有IP地址数量({0})

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:97
# args: privateIp,cidr
%s\ is\ not\ in\ cidr\ range\:\ %s = {0}没有在CIDR范围中: {1}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:103
# args: vSwitchUuid,ecs.getUuid()
private\ ip\ is\ existed\ in\ vswitch\:\ %s,\ allocated\ to\ ecs\:\ %s = 私有IP已经存在虚拟交换机中: {0}，已分配给云主机: {1}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:137
# args: 
bandwidth\ must\ be\ set\ while\ allocate\ publicIp = 当分配公有IP时带宽必须被设置

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:140
# args: msg.getPrivateIpAddress()
%s\ is\ not\ ipv4\ address = {0}不是一个ipv4地址

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:143
# args: msg.getEcsRootVolumeType(),EcsInstanceConstant.validVolumeCategory.toString()
%s\ is\ not\ valid\ volume\ type,\ valid\ types\ are\ [%s] = {0}不是有效的云盘类型，有效的云盘类型有[{1}]

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:147
# args: 
instanceOffering\ or\ instanceType\ must\ be\ set! = 计算规格和实例类型必须被设置

# at: src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java:517
# args: rly1.getVncUrl()
decode\ url\ failed\:\ %s = url解码失败: {0}

# at: src/main/java/org/zstack/aliyun/ecs/ExportImageFromBSFlow.java:52
# args: 
image\ has\ been\ deleted! = 图像已删除！

# at: src/main/java/org/zstack/aliyun/identityzone/AliyunIdentityZoneBase.java:187
# args: 
no\ identity\ found = 找不到身份

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:71
# args: 
the\ operation\ only\ custom\ image = 这个操作只能对用户自己的镜像进行

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:80
# args: 
Only\ system\ disks\ can\ create\ mirrors = 只有系统云盘可以创建快照

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:131
# args: 
can\ not\ delete\ ecs\ system\ image\ remote = 不能删除阿里云服务器上的云主机系统镜像

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:142
# args: 
Only\ support\ ImageStoreBackupStorage = 用本地镜像创建阿里云上的镜像只支持ImageStore镜像服务器

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:145
# args: 
image\ name\ cannot\ starts\ with\ http\://\ or\ https\:// = 镜像名称不可以以http://或https://开始

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:158
# args: imageUuid
no\ backup\ storage\ found\ for\ imageUuid\:\ %s = 未找到uuid为{0}的镜像服务器

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:162
# args: imageUuid
exceeded\ backup\ storage\ found\ for\ the\ imageUuid\:\ %s,\ please\ indicate\ it\ manually = 发现多个存在镜像uuid为{0}的镜像服务器，请尝试指定镜像服务器

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:173
# args: platform,EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()
valid\ platform\:[%s]\ for\ aliyun\ image\ import,\ valid\ value\ are\:\ [%s] = 有效的导入阿里云镜像平台: [{0}]，有效值是[{1}]

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:178
# args: ivo.getUuid()
image\ [%s]\ is\ not\ enable\ now = 镜像[{0}]不可用

# at: src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:306
# args: msg.getDataCenterUuid()
no\ ossbucket\ attached\ to\ the\ datacenter\:\ %s = 没有oss Bucket添加到数据中心{0}

# at: src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:361
# args: msg.getImageUuid(),msg.getDataCenterUuid()
the\ indicated\ image\ [%s]\ is\ importing\ to\ datacenter\ [%s]\ now... = 指定的镜像[{0}]正在被导入到数据中心[{1}]中...

# at: src/main/java/org/zstack/aliyun/nas/core/AliyunNasApiInterceptor.java:44
# args: psUuids.toString()
PrimaryStorage\ [%s]\ still\ running,\ can\ not\ delete\ access\ group = PrimaryStorage[{0}]仍在运行，无法删除访问组

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:194
# args: msg.getSourceCidrIp(),msg.getAccessGroupUuid()
access\ group\ rule\ [%s]\ already\ existed\ in\ access\ group\ [%s] = 访问组规则[{0}]已存在于访问组[{1}]中

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:849
# args: msg.getName(),msg.getDataCenterUuid()
access\ group\ [%s]\ already\ existed\ in\ datacenter\ [%s] = 数据中心[{1}]中已存在访问组[{0}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:150
# args: self.getFileSystemId(),regionId
no\ filesystem\ [%s]\ found\ in\ region\:\ %s = 在数据中心{1}中找不到文件系统[{0}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:203
# args: msg.getDataCenterUuid()
nas\ filesystem\ existed\ in\ datacenter\:\ %s = NAS文件系统存在于数据中心：{0}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:304
# args: refs.toString()
some\ primary\ storage\ [%s]\ used\ this\ nas,\ can\ not\ delete\ it\ until\ delete\ the\ primary\ storage. = 某个主存储[{0}]使用了此NAS，在删除主存储之前无法将其删除。

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:314
# args: cmsg.getWait()
mount\ domain\ not\ valid\ after\ %d\ milliseconds,\ delete\ it... = 装载域在{0}毫秒后无效，请将其删除..

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:422
# args: 
there\ are\ no\ nas\ access\ group\ existed,\ please\ create\ at\ least\ one = 不存在NAS访问组，请至少创建一个

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:404
# args: self.getMountDomain(),self.getNasFileSystemUuid()
no\ such\ mount\ target\ [%s]\ in\ nas\:\ %s = NAS中没有这样的装载目标[{0}]：{1}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:472
# args: msg.getMountDomain(),msg.getNasFSUuid()
nas\ mount\ target\ [%s]\ existed\ in\ filesystem\:\ %s = 文件系统{1}中存在NAS装载目标[{0}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:512
# args: self.getAccessGroupUuid()
the\ access\ group\ attached\ is\ already\:\ %s = 附加的访问组已为：{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2907
# args: imageVO.getUuid()
image\ [uuid\:%s]\ has\ been\ deleted = 镜像[uuid:{0}]已经被删除

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:535
# args: vSwitchUuid
EcsVSwitchVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = ECSVSwitchVO[{0}]不存在，可能已被删除！

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:528
# args: accessGroupUuid
AliyunNasAccessGroupVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = AliyunNASAccessGroupVO[{0}]不存在，可能已被删除！

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:827
# args: self.getUuid()
cannot\ find\ an\ available\ host\ to\ operation\ in\ primary\ storage\:\ %s = 在主存储中找不到可用于操作的物理机：{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:906
# args: self.getUuid(),hostUuid,rsp.error
failed\ to\ ping\ aliyun\ nas\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = 无法从物理机[uuid：{1}]Ping Aliyun NAS主存储[uuid：{0}]，因为{2}。断开此物理机-PS连接

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:1394
# args: 
nas\ primary\ storage\ not\ mounted,\ please\ init\ it\ first! = NAS主存储未装载，请先将其初始化！

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2004
# args: vol.getUuid()
cannot\ find\ host\ to\ operate\ volume\:\ [%s] = 找不到操作卷[{0}]的物理机

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2241
# args: self.getUuid()
cannot\ find\ and\ host\ to\ sync\ volume\ size\ in\ primary\:\ %s = 在主节点中找不到要同步卷大小的物理机：{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2268
# args: 
image\ [%s]\ has\ been\ deleted,\ cannot\ reinit\ root\ volume\ from\ it = 镜像[{0}]已删除，无法从中重新初始化根卷

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2423
# args: 
no\ available\ host\ could\ check\ mountPath! = 没有可用的物理机可以检查装载路径！

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2653
# args: String.join(",", msg.getBackupStorageUuids()),errorCodes.getCauses().get(0).getDetails()
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids\:\ %s,\ becasue\:\ %s = 不能给uuid列表{0}分配镜像服务器，因为{1}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2795
# args: bsvo.getType()
aliyun\ nas\ primarystorage\ only\ support\ imagestore\ bs,\ actually\ get\ type\:\ %s = 阿里云NAS PrimaryStorage仅支持ImageStore BS，实际获取类型：{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:161
# args: context.getInventory().getUuid(),context.getInventory().getName(),mine,e.getKey(),version,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage\ to\ cluster.\ Kvm\ host[uuid\:%s,\ name\:%s]\ in\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ a\ cluster\ that\ has\ kvm\ host[uuid\:%s],\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = 不能挂载主存储到集群。集群中的物理机[uuid:{0}, name:{1}]拥有[{2}]版本的qemu-img；但是主存储已经挂载到拥有[{4}]版本qemu-img的集群上。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:344
# args: 
no\ available\ host\ could\ download\ imagecache! = 没有可用的物理机可以下载ImageCache！

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:1147
# args: msg.getResourceUuid()
resource[uuid\:\ %s]\ cannot\ found = 找不到资源[uuid：{0}]

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:75
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = Aliyun NAS主存储[uuid：{0}，名称：{1}]在连接的集群中找不到任何可用于实例化卷的物理机

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:208
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ delete\ bits\ on\ primarystorage = Aliyun NAS主存储[uuid：{0}，名称：{1}]在连接的集群中找不到任何可用于主存储删除位的物理机

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:619
# args: self.getUuid(),self.getName()
the\ Aliyun\ Nas\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = 阿里云NAS主存储[uuid：{0}，名称：{1}]未挂接任何集群，或挂接的集群中没有物理机

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:936
# args: hostUuid
failed\ to\ check\ mount\ path\ on\ host\:\ %s = 无法检查物理机上的装载路径：{0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:1023
# args: 
cannot\ find\ a\ host\ to\ cleanup\ image\ cache. = 找不到用于清除镜像缓存的物理机。

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:533
# args: eipVo.getAllocateResourceUuid()
ecs\ instance[%s]\ isn't\ existed,\ please\ check\ it. = 云主机[{0}]不存在，请进行核查

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:537
# args: ecsVo.getUuid(),ecsVo.getEcsStatus()
Only\ ecs\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ detach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = 只有正在运行或已停止状态的云主机才能绑定弹性IP，但是云主机[{0}]状态为[{1}]

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:2860
# args: msg.getUuid()
virtual\ border\:\ %s\ has\ been\ deleted = 边界路由器: {0}已经被删除

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3389
# args: tupleCidr,msg.getNextHopUuid()
destination\ cidr\ [%s]\ is\ existed\ and\ point\ to\ another\ instance-id\ [%s],\ please\ check\ or\ delete\ it\ first = 目标CIDR[{0}]已经存在且指向其他云主机[{1}]，请检查或删除它

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3902
# args: evo.getUuid(),evo.getEcsStatus()
Only\ esc\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ attach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = 只有正在运行或已停止状态的云主机才能绑定弹性IP，但是云主机[{0}]状态为[{1}]

# at: src/main/java/org/zstack/aliyun/network/connection/AliyunConnectionManagerImpl.java:585
# args: msg.getVbrUuid()
Vbr\:\ [%s]\ is\ in\ create\ connection\ progress,\ please\ wait... = 虚拟边界路由器: [{0}]正在创建连接中，请稍后...

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java:80
# args: tuple.get(0, String.class),msg.getVbrUuid(),vpcCidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vbr\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = 自定义CIDR['{0]已经存在于虚拟边界路由器[{1}']，它已经和目标CIDR[{2}]重叠了，请检查然后删除它

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java:71
# args: tuple.get(0, String.class),vRouterUuid,cidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vrouter\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = 原始的CIDR[{0}]已经存在于虚拟路由器中[{1}]，已经被目标CIDR所覆盖，请先检验然后删除它

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:51
# args: msg.getL3networkUuid()
No\ Such\ Cidr\ found\ for\ l3network\:\ %s = 未找到三层网络{0}对应的CIDR

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:42
# args: msg.getL3networkUuid()
No\ Such\ VRouter\ nic\ found\ for\ l3network\:\ %s = 未找到三层网络{0}对应的虚拟路由器网卡

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:43
# args: msg.getUuid()
no\ such\ vpc\ found\ for\:\ %s = 未找到该VPC: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:48
# args: msg.getUuid()
no\ such\ vm\ found\ for\:\ %s = 没有找到该云主机: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:53
# args: msg.getUuid()
no\ such\ vbr\ found\ for\:\ %s = 没有找到该虚拟边界路由器: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:58
# args: msg.getUuid()
no\ such\ l3network\ found\ for\:\ %s = 没有找到该三层网络: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:62
# args: msg.getResourceType()
not\ a\ supported\ resource\ type\:\ %s = 不支持资源类型: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:68
# args: 
Only\ admin\ can\ create\ connections = 只有admin才能创建连接

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:72
# args: msg.getCpeIp()
CpeIp\ must\ be\ ipv4\ address,\ but\ now\ is\ %s = CpeIp必须是ipv4地址，但是现在是{0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:76
# args: 
cpeIp\ must\ be\ ipv4\ address = cpeIp必须是ipv4地址

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:82
# args: msg.getL3networkUuid(),msg.getVpcUuid()
l3network\ %s\ and\ vpc\ %s\ already\ connected,\ please\ check\ it = 三层网络{0}和vpc{1}已经连接

# at: src/main/java/org/zstack/aliyun/network/vpn/AliyunVpcVpnBase.java:955
# args: 
vpn\ gateway\ and\ user\ gateway\ are\ not\ in\ the\ same\ dataCenterUuid! = vpn网关和用户网关不是同一个dataCenterUuid

# at: src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:33
# args: msg.getBucketName(),msg.getDataCenterUuid()
ossBucket\ [%s]\ is\ already\ added\ in\ dataCenter\ [%s] = oss Bucket['{0]已经被添加数据中心[{1}']

# at: src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:41
# args: ovo.getUuid()
OssBucket[%s]\ is\ not\ attached. = oss Bucket[{0}]没有被添加

# at: src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:114
# args: 
domain,\ key,\ secret\ must\ be\ set\ all = 域、密钥、机密必须全部设置

# at: src/main/java/org/zstack/aliyun/oss/OssBucketCascadeExtension.java:107
# args: 
oss\ bucket\ is\ not\ empty! = oss Bucket不为空

# at: src/main/java/org/zstack/aliyun/pangu/AliyunPanguApiInterceptor.java:39
# args: appName,partitionName,vo.getIdentityZoneUuid()
appName\:\ %s,\ partitionName\:\ %s\ is\ existed\ in\ identityZone\:\ %s = AppName：{0}，PartitionName：{1}存在于IdentityZone：{2}中

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:62
# args: 
Root\ volume\ cannot\ be\ deleted = 云盘不能被删除

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:83
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ cloud\ and\ portable\ property\ is\ false = 当云盘的category属性是cloud且portable为false，不能设置云盘的deleteWithInstance属性为false

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:78
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ ephemeral = 当云盘的category属性为ephemeral时，不能设置云盘的deleteWithInstance属性为false

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:95
# args: msg.getUuid()
The\ disk\ [%s]\ is\ not\ attach\ on\ any\ instance\  = 该云盘[{0}]没有加载到任何云主机

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:121
# args: msg.getEcsUuid()
The\ state\ of\ the\ ecs\ [%s]\ instance\ must\ be\ running\ or\ stopped = 云主机[{0}]的状态必须是运行或者已停止

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:105
# args: 
Only\ data\ disk\ can\ be\ mounted\ on\ ecs = 只有云盘可以挂装到云主机上

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:109
# args: 
The\ disk\ not\ be\ attach\ on\ any\ ecs = 该云盘没有加载到任何云主机

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:143
# args: 
Non-independent\ disk\ can\ only\ be\ destroyed\ with\ instances = 未独立的云盘只能和云主机一起删除

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:126
# args: 
Disk\ and\ ecs\ instances\ must\ be\ in\ the\ same\ zone = 云盘和云主机必须在相同的区域下

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:130
# args: msg.getDiskUuid(),msg.getEcsUuid()
The\ disk\ [%s]\ is\ already\ mounted\ on\ the\ instance\ [%s] = 云盘[{0}]已经安装到云服务器实例[{1}]

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:135
# args: 
Only\ data\ disk\ can\ attach\ to\ ecs = 只有云盘能加载到云服务器

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:139
# args: 
Cannot\ attach\ disk\ when\ in\ use = 不能加载正在使用的云盘

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:154
# args: 
The\ size\ and\ snapshot\ id\ in\ the\ request\ parameter\ must\ select\ one\ of\ the\ items\ to\ specify\ the\ size\ of\ the\ disk\ or\ create\ a\ disk\ using\ the\ snapshot. = 在请求参数中size和快照id必须选择一项以便于指定磁盘大小或创建一个快照使用的磁盘

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:167
# args: 
Not\ allowed\ create\ disk\ on\ root\ volume\ snapshot = 不允许在云盘快照上创建云盘

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:176
# args: 
the\ disk\ name\ or\ description\ cannot\ set\ start\ with\ 'http\://'\ or\ 'https\://'\  = 云盘名称和介绍不能以http://或https://开头

# at: src/main/java/org/zstack/aliyun/storage/snapshot/AliyunSnapshotApiInterceptor.java:41
# args: 
The\ operation\ allows\ only\ when\ ecs\ state\ of\ the\ ecs\ instance\ status\ be\ running\ or\ stopped = 当云主机态为运行中或已停止时该操作才被允许

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:60
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ a\ SftpBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = 有超过一个镜像服务器拥有相同的物理机名，已经存在一个 SFTP 镜像服务器 [物理机名:{0}]，被添加的镜像服务器类型为 {1}

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:68
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ an\ ImageStoreBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = 有超过一个镜像服务器拥有相同的物理机名，已经存在一个镜像服务器 [物理机名:{0}]，被添加的镜像服务器类型为 {1}

# at: src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java:486
# args: msg.getAppUuid()
PublishAppVO[uuid\:\ %s]\ is\ not\ existed = PublishAppVO[uuid：{0}]不存在

# at: src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java:588
# args: 
[appcenter]\ filterName\ must\ be\ appcenter\:true\ or\ appcenter\:false = [appCenter]FilterName必须为appCenter：true或appCenter：false

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:127
# args: struct.getParamName()
%s\ is\ in\ preParameters,\ but\ not\ be\ set = {0}在前参数中，但未设置

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:131
# args: 
%s\ need\ Number\ value,\ but\ got\ wrong\ type = {0}需要数值，但类型错误

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:136
# args: 
%s\ need\ Boolean\ value,\ but\ got\ wrong\ type = {0}需要布尔值，但类型错误

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:141
# args: 
%s\ need\ String\ value,\ but\ got\ wrong\ type = {0}需要字符串值，但获取的类型错误

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:389
# args: msg.getBuildSystemUuid()
cannot\ find\ build\ system\ [%s] = 找不到生成系统[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:339
# args: msg.getBuildSystemUuid(),msg.getZoneUuid()
build\ system[uuid\:\ %s]\ has\ been\ attached\ to\ zone[uuid\:\ %s] = 生成系统[uuid：{0}]已附加到区域[uuid：{1}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:396
# args: msg.getBuildSystemUuid(),msg.getZoneUuid()
build\ system[uuid\:\ %s]\ has\ not\ been\ attached\ to\ zone[uuid\:\ %s] = 生成系统[uuid：{0}]尚未附加到区域[uuid：{1}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:620
# args: appUuid
cannot\ find\ build\ application\:\ [%s] = 找不到生成应用程序：[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:989
# args: 
imageStore\ is\ not\ Enabled = 未启用ImageStore

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:993
# args: 
imageStore\ is\ not\ Connected = ImageStore未连接

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:1147
# args: p.getDefaultValue()
cannot\ find\ imageUuid\ for\ image[%s] = 找不到镜像[{0}]的ImageUuid

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:1159
# args: msg.getUuid()
cannot\ find\ build-app[uuid\:\ %s],\ or\ it\ was\ in\ Deleting\ status = 找不到Build-App[uuid：{0}]，或者它处于删除状态

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:50
# args: msg.getUuid()
build-app[%s]\ is\ exported\ or\ is\ exporting,\ please\ delete\ it\ first = Build-App[{0}]已导出或正在导出，请先删除它

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:63
# args: build.getUuid(),build.getName(),build.getHostname(),build.getUrl()
another\ build\ system[uuid\:\ %s,\ name\:\ %s]\ in\ this\ host[%s]\ used\ the\ url[%s] = 此物理机[{2}]中的另一个生成系统[uuid：{0}，名称：{1}]使用了URL[{3}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:74
# args: msg.getDataPath()
dataPath\ must\ start\ with\ '/',\ actually\ got\ [%s] = 数据路径必须以“/”开头，实际获得[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:88
# args: 
both\ backupStorageUuid\ and\ hostname\ are\ null = backupStorageUuid和hostname均为空

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:95
# args: msg.getHostname()
cannot\ find\ imageStore\ which\ hostname\ is\ \:%s = 找不到物理机名为{0}的ImageStore

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:98
# args: msg.getHostname()
find\ more\ than\ one\ imageStore\ which\ hostname\ is\:\ %s,\ please\ use\ backupStorageUuid\ instead = 找到多个物理机名为{0}的ImageStore，请改用BackupStorageUuid

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:102
# args: 
both\ backupStorageUuid\ and\ hostname\ are\ set,\ but\ they\ are\ not\ the\ same\ host = 同时设置了backupStorageuuid和hostname，但它们不是同一物理机

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:116
# args: 
buildAppUuid\ and\ exportId\ cannot\ both\ be\ null = BuildAppuuid和ExportId不能同时为空

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:120
# args: 
buildAppUuid\ and\ buildSystemUuid\ cannot\ both\ be\ null = BuildAppUuid和BuildSystemUuid不能同时为空

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:126
# args: 
no\ such\ exportId\ in\ build\ export\ history = 在生成导出历史记录中没有这样的导出ID

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:130
# args: 
both\ exportId\ and\ buildAppUuid\ are\ set\ but\ they\ are\ not\ equal = 同时设置了ExportId和BuildAppUuid，但它们不相等

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:108
# args: self.getStatus()
unable\ to\ do\ the\ operation\ because\ the\ build\ system\ is\ in\ status\ of\ %s = 无法执行该操作，因为生成系统处于{0}状态

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:121
# args: msg.getBuildAppUuid()
cannot\ find\ the\ build\ app\ by\ uuid[%s] = 按uuid[{0}]找不到生成应用程序

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:126
# args: status.toString()
build\ app\ is\ in\ %s\ status,\ which\ can\ not\ support\ the\ current\ operation. = 生成应用程序处于{0}状态，无法支持当前操作。

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:156
# args: buildUrl(path),rsp.error
rest\ call\ %s\ failed,\ because\:\ %s = REST调用{0}失败，因为：{1}

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:353
# args: 
build\ application\ is\ disabled\ because\ build\ system\ is\ in\ 'Disabled'\ state = 生成应用程序已禁用，因为生成系统处于“禁用”状态

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:506
# args: meta.getAppId(),meta.getVersion().getVersion()
create\ BuildApp\ failed,\ because\ appId[%s\:\ %s]\ is\ duplicated\ by\ another\ BuildApp = 创建BuildApp失败，因为AppId[{0}：{1}]与另一个BuildApp重复

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:659
# args: buildUrl(CONNECT_BUILDSYSTEM_PATH),errorCode
unable\ to\ connect\ to\ localstorage\ build\ system[url\:%s],\ because\ %s = 无法连接到localStorage生成系统[URL：{0}]，因为{1}

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:762
# args: struct.getAppId(),struct.getVersion().getVersion()
add\ BuildApp\ failed,\ because\ appId[%s\:%s]\ is\ duplicated\ by\ another\ BuildApp = 添加BuildApp失败，因为AppId[{0}：{1}]与另一个BuildApp重复

# at: src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java:48
# args: file
cannot\ find\ raw-template\ json\ file\ at\:\ %s = 在{0}处找不到原始模板JSON文件

# at: src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java:61
# args: e
Unable\ to\ create\ json\ template = 无法创建JSON模板

# at: src/main/java/org/zstack/appliancevm/ApplianceVmAllocateNicFlow.java:108
# args: l2NetworkVO.getUuid()
there\ is\ no\ available\ nicType\ on\ L2\ network\ [%s] = 二层网络[{0}]上没有可用的nicType

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:136
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
appliance\ vm[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = 系统云主机[uuid:{0}]处于{1}状态，无法对[{2}]执行HTTP RPC调用

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:430
# args: getSelf().getUuid()
appliance\ vm\ %s\ stopped = 应用装置VM{0}已停止

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:709
# args: getSelf().getUuid()
appliance\ vm\ %s\ reboot = 应用装置云主机{0}重新启动

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:719
# args: getSelf().getUuid()
appliance\ vm\ %s\ reboot\ failed = 应用装置云主机{0}重新启动失败

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:781
# args: getSelf().getUuid()
appliance\ vm\ %s\ start\ failed = 应用装置VM{0}启动失败

# at: src/main/java/org/zstack/appliancevm/ApplianceVmKvmBootstrapFlow.java:64
# args: rsp.getError()
set\ appliance\ bootstrapinfo\ error,\ because\:%s = 设置装置BootstrapInfo错误，原因：{0}

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:120
# args: msg.getUuid(),uuid
listener[uuid\:%s]\ are\ being\ used\ by\ the\ autoScalingVmTemplate[%s]\ and\ cannot\ be\ deleted = 侦听器[uuid：{0}]正由AutoScalingVMTemplate[{1}]使用，无法删除

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:131
# args: msg.getInstanceUuid(),msg.getGroupUuid()
The\ instance[%s]\ does\ not\ exist\ in\ the\ scaling\ group[%s] = 缩放组[{1}]中不存在实例[{0}]

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:163
# args: msg.getAlarmUuid(),ruleVO.getScalingGroupUuid()
alarm[uuid\:%s]\ are\ being\ used\ by\ the\ autoScalingGroup[%s]\ which\ cannot\ be\ deleted = 无法删除的AutoScalingGroup[{1}]正在使用报警[uuid：{0}]

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:173
# args: msg.getUuid()
rule[%s]\ state\ is\ Disabled = 规则[{0}]状态已禁用

# at: src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java:386
# args: l3Uuids,uuid
invalid\ l3\ network\ uuids[%s]\ for\ listener\ that\ belongs\ lb[%s],\ all\ the\ networks\ must\ be\ attached\ the\ LB\ service\ and\ be\ attached\ with\ the\ same\ vRouter\ with\ LB = 属于LB[{1}]的侦听器的三层网络uuid[{0}]无效，所有网络都必须附加到LB服务，并且必须附加到与LB相同的VRouter

# at: src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java:744
# args: msg.getTemplateUuid(),JSONObjectUtil.toJsonString(errors)
detach\ autoScalingTemplate[%s]\ from\ AutoScalingGroup\ failed,\ errors\ are\ %s = 从AutoScalingGroup分离AutoScalingTemplate[{0}]失败，错误为{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:890
# args: imageVO.getUuid(),imageVO.getMediaType()
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ and\ ISO\ can\ be\ used\ to\ create\ vm = 镜像[uuid:{0}] 类型为{1}，只能用RootVolumeTemplate和ISO来创建云主机

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:893
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ image\ mediaType\ is\ ISO = 云盘规格不能为空在镜像类型为ISO时

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:367
# args: 
Only\ one\ scaling\ activity\ can\ be\ executed\ in\ the\ same\ scaling\ group\ at\ the\ same\ time. = 同一伸缩组中同一时间只能执行一个伸缩活动。

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1317
# args: 
The\ number\ of\ instances\ exceeds\ the\ limit = 实例数超过限制

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:645
# args: loadBalancerListenerUuidListStr
add\ vm\ nic\ to\ loadBalancer\ failed,\ No\ loadBalancer[uuids\=%s]\ can\ be\ found. = 将VM NIC添加到LoadBalancer失败，找不到LoadBalancer[uuid={0}]。

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:684
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToLoadBalancerErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ loadBalancer\ failed\ completely,\ errors\ are\ %s = AutoScalingGroup[{0}]将新创建的VM添加到LoadBalancer完全失败，错误为{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:719
# args: securityGroupUuid
add\ vm\ nic\ to\ securityGroup\ failed,\ No\ securityGroup[uuid\=%s]\ can\ be\ found. = 将VM NIC添加到SecurityGroup失败，找不到SecurityGroup[uuid={0}]。

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:755
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToSecurityGroupErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ securityGroup\ failed\ completely,\ errors\ are\ %s = AutoScalingGroup[{0}]将新创建的VM添加到SecurityGroup完全失败，错误为{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:865
# args: templateGroupRefVO.getTemplateUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:AutoScalingVmTemplateVO]\ not\ found = 找不到资源，详细信息：找不到资源[uuid：{0}，类型：AutoScalingVMTemplateVo]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:870
# args: vmTemplateVO.getVmInstanceOfferingUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:InstanceOfferingVO]\ not\ found = 找不到资源，详细信息：找不到资源[uuid：{0}，类型：InstanceOfferingVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:881
# args: vmTemplateVO.getImageUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:ImageVO]\ not\ found = 找不到资源，详细信息：找不到资源[uuid：{0}，类型：ImageVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:905
# args: diskOffering
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:DiskOfferingVO]\ not\ found = 找不到资源，详细信息：找不到资源[uuid：{0}，类型：DiskOfferingVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:918
# args: l3Uuid
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:L3NetworkVO]\ not\ found = 找不到资源，详细信息：找不到资源[uuid：{0}，类型：L3NetworkVO]

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:934
# args: vmTemplateVO.getDefaultL3NetworkUuid(),l3Uuids
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids\ %s = 默认L3NetworkUuid[Uuid：{0}]不在L3NetworkUuids{1}中

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1018
# args: self.getUuid(),AutoScalingGroupState.Enabled.toString()
the\ auto\ scaling\ group[%s]\ state\ error,\ expected\:\ %s\ state = 自动缩放组[{0}]状态错误，应为：{1}状态

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1055
# args: self.getUuid()
The\ autoScalingGroup[%s]\ not\ attach\ any\ vm\ template = AutoScalingGroup[{0}]未附加任何VM模板

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1123
# args: self.getUuid(),vmInstanceUuids,JSONObjectUtil.toJsonString(errors)
autoScalingGroup[%s]\ destroy\ vms[%s]\ failed\ completely,\ errors\ are\ %s = AutoScalingGroup[{0}]销毁云主机[{1}]完全失败，错误为{2}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1330
# args: 
Cannot\ find\ deleted\ target\ instance\ list = 找不到已删除的目标实例列表

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1569
# args: 
need\ skip\ autoScalingGroup\ activity = 需要跳过自动缩放组活动

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1835
# args: ruleUuid,JSONObjectUtil.toJsonString(errors)
delete\ autoScalingRule[%s]\ triggers\ failed,\ errors\ are\ %s = 删除AutoScalingRule[{0}]触发器失败，错误为{1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:2452
# args: removalPolicy.toString()
Unsupported\ RemovalPolicy[%s]\ type = 不支持RemovalPolicy[{0}]类型

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:183
# args: triggerVO.getUuid(),triggerVO.getState()
AutoScalingRuleSchedulerJobTriggerVO[uuid\:%s]\ is\ %s,\ state\ change\ is\ not\ allowed = AutoScalingRuleSchedulerJobTriggerVO[uuid：{0}]为{1}，不允许更改状态

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:192
# args: ruleUuid
AutoScalingRuleSchedulerJobTriggerVO[uuid\:%s]\ is\ be\ in\ cooldownDate = AutoScalingRuleSchedulerJobTriggerVO[uuid：{0}]在CooldownDate中

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:250
# args: ruleUuid,AutoScalingRuleState.Disabled.toString()
AutoScalingRuleVO[uuid\:%s]\ is\ %s,\ state\ change\ is\ not\ allowed = AutoScalingRuleVO[uuid：{0}]为{1}，不允许更改状态

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:64
# args: 
Failed\ to\ reach\ the\ bare-metal\ chassis,\ please\ make\ sure\:\ 1.\ the\ IPMI\ connection\ is\ active;\ 2.\ the\ IPMI\ Address,\ Port,\ Username\ and\ Password\ are\ correct;\ 3.\ IPMI\ Over\ LAN\ is\ enabled\ in\ BIOS. = 无法连通裸金属设备，请确认：1，管理节点与裸金属设备远程控制口连通；2，IPMI地址、端口、账号、密码是正确的；3，BIOS中启用LAN上的IPMI功能。

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:111
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ a\ baremetal\ cluster. = 集群[uuid:{0}]不是一个裸金属集群

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:155
# args: address,port
IPMI\ Address\ and\ Port\ %s\:%d\ already\ exists. = IPMI地址为{0}，端口为{1}的裸金属设备已经存在

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:220
# args: clusterUuid
no\ usable\ baremetal\ pxeserver\ attached\ to\ cluster[uuid\:%s] = 裸金属集群[uuid:{0}]中没有可用的部署服务器

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:175
# args: chassis.getUuid(),chassis.getPxeServerUuid(),cmd.content
baremetal\ chassis[uuid\:%s]\ is\ supposed\ to\ using\ pxeserver[uuid\:%s],\ but\ it\ was\ pxeserver[uuid\:%s]\ that\ actually\ handled\ the\ DHCP\ request = 裸金属设备[uuid:{0}]应当由部署服务器[uuid:{1}]提供DHCP服务，但实际情况是部署服务器[uuid:{2}]提供的DHCP服务

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:671
# args: msg.getUuid()
failed\ to\ delete\ baremetal\ chassis\ %s = 无法删除裸机机箱{0}

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:737
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ on\ baremetal\ chassis[uuid\:%s] = 无法远程启动裸金属设备[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:753
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ reset\ baremetal\ chassis[uuid\:%s] = 无法远程重启裸金属设备[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:764
# args: bmc.getUuid()
Failed\ to\ remotely\ pxe\ boot\ chassis[uuid\:%s] = 无法远程设置裸金属设备[uuid:{0}]从网卡启动

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:924
# args: bmc.getUuid()
failed\ to\ connect\ to\ chassis\ [uuid\:%s],\ please\ check\ ipmi\ connection. = 无法连接到裸金属设备[uuid:{0}], 请确认IPMI连接可用

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:1010
# args: e.getMessage()
fail\ to\ load\ chassis\ info\ from\ file,\ because\:\ %s = 无法从文件中读取裸金属设备信息，因为：{0}

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:59
# args: msg.getChassisUuid()
Baremetal\ chassis[uuid\:%s]\ does\ not\ exist = 裸机机箱[uuid：{0}]不存在

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:65
# args: chassis.getUuid()
Baremetal\ chassis[uuid\:%s]\ is\ not\ Enabled\ or\ Available,\ please\ choose\ another\ one. = 裸金属设备[uuid:{0}]被停用或者已被分配，请重新选择

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:71
# args: chassis.getUuid()
no\ corresponding\ pxeserver,\ please\ inspect\ baremetal\ chassis[uuid\:%s]\ again = 裸金属设备[uuid:{0}]没有关联部署服务器，请重新获取硬件信息

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:84
# args: chassis.getUuid()
No\ hardware\ info\ found\ for\ baremetal\ chassis[uuid\:%s],\ please\ choose\ another\ one. = 裸金属设备[uuid:{0}]硬件信息未知，请重新选择

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:95
# args: chassis.getPxeServerUuid()
baremetal\ pxeserver[uuid\:%s]\ is\ neither\ Enabled\ nor\ Connected,\ please\ check = Baremetal Pxeserver[uuid：{0}]既未启用也未连接，请检查

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:112
# args: mac
Mac\ address\ %s\ is\ invalid.\ It\ should\ be\ like\ 6c\:b3\:11\:1b\:0b\:1e = MAC地址{0}不合法

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:118
# args: chassis.getUuid(),mac
Baremetal\ chassis[uuid\:%s]\ doesn't\ have\ nic\ with\ mac\ address\ %s = 裸金属设备[uuid:{0}]硬件信息中未发现MAC地址为{1}的网卡

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:136
# args: 
duplicated\ bm\ bonding\ uuid\ detacted = 已分离重复的BM绑定uuid

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:140
# args: 
Baremetal\ Bonding\ does\ not\ exist = 裸机焊接不存在

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:148
# args: 
duplicated\ l3\ network\ uuid\ detacted = 已分离重复的三层网络uuid

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:152
# args: 
the\ selected\ l3\ network\ doesn't\ exist = 选定的三层网络不存在

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:165
# args: chassis.getUuid()
the\ selected\ l3\ network\ cannot\ be\ assigned\ to\ chassis[uuid\:%s] = 无法将选定的三层网络分配给机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:177
# args: 
only\ iso\ image\ is\ supported\ in\ zstack\ baremetal\ service = 目前仅支持为裸机部署ISO镜像

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:186
# args: 
only\ ImageStoreBackupStorage\ is\ supported\ in\ zstack\ baremetal\ service = 目前仅支持从镜像仓库中为裸机选择ISO镜像

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:200
# args: 
cannot\ recover\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = 只能恢复处于Destroyed状态的裸金属物理机

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:212
# args: 
cannot\ expunge\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = 只能彻底删除处于Destroyed状态的裸金属物理机

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:461
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ off\ baremetal\ chassis[uuid\:%s] = 无法远程关闭裸金属设备[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:266
# args: self.getClusterUuid()
failed\ to\ allocate\ baremetal\ pxeserver,\ make\ sure\ there\ is\ a\ pxeserver\ with\ enough\ available\ capacity\ attached\ on\ cluster[uuid\:%s] = 分配部署服务器失败，请确认裸金属集群[uuid:{0}]中所挂载的部署服务器拥有足够的剩余存储空间用于保存镜像缓存

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:453
# args: reboot ? "reset" : "on",bmc.getUuid()
Failed\ to\ remotely\ power\ %s\ baremetal\ chassis[uuid\:%s] = 无法远程启动{0}裸机机箱[uuid：{1}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1141
# args: msg.getL2NetworkUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ l2[uuid\:%s] = 存在使用从L2[uuid：{0}]分配的IP地址的BM实例

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1149
# args: msg.getL3NetworkUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ l3[uuid\:%s] = 存在使用从L3[uuid：{0}]分配的IP地址的BM实例

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1169
# args: msg.getIpRangeUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ ip\ range[uuid\:%s] = 存在使用从IP范围[uuid：{0}]分配的IP地址的BM实例

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:39
# args: 
creating\ bm\ bonding\ is\ only\ allowed\ before\ creating\ bm\ instance = 只能在创建BM实例之前创建BM绑定

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:48
# args: msg.getName()
bond\ name\ %s\ already\ exists = 结合名称{0}已存在

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:73
# args: slave
Slave\ address\ %s\ is\ invalid.\ It\ should\ be\ like\ 6c\:b3\:11\:1b\:0b\:1e,6c\:b3\:11\:1b\:0b\:1f = 从属地址{0}无效。它应该类似于6C：B3:11:1B:0B:1E，6C：B3:11:1B:0B:1F

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:79
# args: slave,msg.getChassisUuid()
mac\ address\ %s\ does\ not\ belong\ to\ chassis[uuid\:%s] = MAC地址{0}不属于机箱[uuid：{1}]

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:85
# args: slave
mac\ address\ %s\ is\ already\ a\ bond\ slave = MAC地址{0}已是绑定从属地址

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:43
# args: 
cannot\ update\ predefined\ preconfiguration\ templates = 无法更新预定义的预配置模板

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:55
# args: 
cannot\ delete\ predefined\ preconfiguration\ templates = 无法删除预定义的预配置模板

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:63
# args: 
cannot\ change\ state\ of\ predefined\ preconfiguration\ templates = 无法更改预定义的预配置模板的状态

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationManagerImpl.java:66
# args: msg.getTemplateUuid()
cannot\ find\ PreconfigurationTemplateVO[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到PreConfigurationTemplateVo[uuid：{0}]，它可能已被删除

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:69
# args: netmask
PXE\ Server\ DHCP\ Range\ Netmask\ %s\ is\ invalid. = 部署服务器DHCP服务子网掩码{0}非法

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:75
# args: begin,end
PXE\ Server\ DHCP\ Range\ Start\ %s\ and\ Range\ Stop\ %s\ do\ not\ belong\ to\ the\ same\ subnet. = 部署服务器DHCP地址区间起始IP{0}和结束IP{1}不属于一个子网内

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:92
# args: msg.getHostname()
PXE\ Server\ with\ hostname\ %s\ already\ exists. = 地址为{0}的部署服务器已经存在

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:103
# args: msg.getHostname()
there\ is\ already\ a\ baremetal2\ gateway\ with\ management\ ip\ %s,\ do\ not\ use\ it\ to\ create\ baremetal\ pxe\ server = 已存在管理IP为{0}的BareMetal2网关，请不要使用它来创建BareMetal PXE服务器

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:110
# args: 
storagePath\ should\ be\ an\ absolute\ path = 部署服务器的存储路径必须是绝对路径

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:126
# args: msg.getHostname()
failed\ to\ connect\ to\ %s,\ please\ check\ network\ connection\ between\ zstack\ management\ node\ and\ baremetal\ pxeserver = 请检查管理节点与部署服务器{0}之间的网络连接

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:136
# args: msg.getHostname()
no\ local\ repo\ found\ under\ /opt/zstack-dvd\ of\ %s,\ please\ download\ zstack\ iso\ and\ create\ local\ repo\ first = 部署服务器{0}中缺少使用ZStack ISO创建的本地源

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:146
# args: msg.getDhcpInterface()
PXE\ Server\ DHCP\ Interface\ %s\ does\ not\ exists,\ or\ it\ does\ not\ have\ an\ IP\ address. = 部署服务器DHCP接口{0}不存在，或者它没有IP地址

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:155
# args: msg.getDhcpRangeBegin(),msg.getDhcpRangeEnd(),msg.getDhcpInterface()
%s\ ~\ %s\ cannot\ connect\ to\ dhcp\ interface\ %s = {0} ~ {1} 无法连通DHCP监听网卡{2}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:192
# args: msg.getClusterUuid(),msg.getPxeServerUuid()
cluster[uuid\:%s]\ and\ pxeserver[uuid\:%s]\ don't\ belong\ to\ one\ zone = 裸金属集群[uuid:{0}]和部署服务器[uuid:{1}]不属于同一个区域

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:201
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ baremetal\ cluster = 集群[uuid:{0}]不是一个裸金属集群

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:212
# args: msg.getPxeServerUuid(),msg.getClusterUuid()
baremetal\ pxeserver[uuid\:%s]\ already\ attached\ to\ cluster[uuid\:%s] = 部署服务器[uuid:{0}]已经挂载到裸金属集群[uuid:{1}]，无需再次挂载

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:238
# args: msg.getPxeServerUuid(),msg.getClusterUuid(),ip,begin,end
baremetal\ pxeserver[uuid\:%s]\ is\ not\ compatible\ with\ baremetal\ instances\ in\ cluster[uuid\:%s],\ existing\ nic\ ip\ %s\ is\ out\ of\ pxeserver\ dhcp\ range\ %s\ ~\ %s. = 部署服务器[uuid:{0}]不适合于集群[uuid:{1}]，因为集群中已有的裸金属物理机网卡地址{2}超出了部署服务器的DHCP范围{3} ~ {4}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:255
# args: msg.getPxeServerUuid(),msg.getClusterUuid()
baremetal\ pxeserver[uuid\:\ %s]\ not\ attached\ to\ cluster[uuid\:\ %s] = 部署服务器[uuid:{0}]没有挂载到裸金属集群[uuid:{1}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:295
# args: self.getUuid()
failed\ to\ init\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = 部署服务器[uuid:{0}]初始化配置失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:432
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = 在部署服务器[uuid:{0}]上创建裸金属物理机相关配置失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:463
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = 在部署服务器[uuid:{0}]上删除裸金属物理机相关配置失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:494
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ novnc\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = 在部署服务器[uuid:{0}]上创建裸金属物理机NoVNC代理失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:525
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ novnc\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = 在部署服务器[uuid:{0}]上删除裸金属物理机NoVNC代理失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:558
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ nginx\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = 在部署服务器[uuid:{0}]上创建裸金属物理机Nginx代理失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:589
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ nginx\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = 在部署服务器[uuid:{0}]上删除裸金属物理机Nginx代理失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:620
# args: self.getUuid()
failed\ to\ start\ baremetal\ pxeserver[uuid\:%s] = 启动部署服务器[uuid:{0}]失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:653
# args: self.getUuid()
failed\ to\ stop\ baremetal\ pxeserver[uuid\:%s] = 停止部署服务器[uuid:{0}]失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:968
# args: msg.getChassisUuid(),self.getUuid()
failed\ to\ create\ dhcp\ config\ of\ chassis[uuid\:%s]\ on\ pxeserver[uuid\:%s] = 无法在Pxeserver[uuid：{1}]上创建机箱[uuid：{0}]的DHCP配置

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:997
# args: msg.getChassisUuid(),self.getUuid()
failed\ to\ delete\ dhcp\ config\ of\ chassis[uuid\:%s]\ on\ pxeserver[uuid\:%s] = 无法删除机箱[uuid：{0}]（在Pxeserver[uuid：{1}]上）的DHCP配置

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1055
# args: self.getUuid(),ret.uuid
the\ uuid\ of\ baremtal\ pxeserver\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = Baremtal PXEServer代理的uuid已更改[应为：{0}，实际为：{1}]，代理很可能已手动重新启动。发出重新连接以同步状态

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1270
# args: url,rsp.error
unable\ to\ connect\ to\ baremetal\ pxeserver[url\:%s],\ because\ %s = 连接部署服务器[uuid:{0}]失败，因为: {1}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1362
# args: cache.getImageUuid()
failed\ to\ mount\ baremetal\ cache\ of\ image[uuid\:%s] = 挂载裸金属镜像缓存[uuid:{0}]失败

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1467
# args: msg.getImageUuid()
no\ enough\ space\ left\ in\ baremetal\ image\ cache\ for\ image[uuid\:%s] = 部署服务器存储路径剩余空间不足

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1563
# args: 
unsupported\ backup\ storage\ type\ for\ baremetal = 裸金属管理所不支持的镜像服务器类型

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:59
# args: msg.getName()
bond\ name\ %s\ has\ been\ existed = 债券名称{0}已存在

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:71
# args: mac
nic\ with\ mac\:%s\ has\ been\ bonded = 已绑定具有MAC：{0}的NIC

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:98
# args: chassisUuid
cannot\ find\ the\ cluster\ of\ baremetal2\ chassis[uuid\:%s],\ maybe\ it\ doesn't\ exist = 找不到BareMetal2机箱[uuid：{0}]的群集，该群集可能不存在

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:107
# args: clusterUuid
there\ is\ no\ baremetal2\ gateway\ found\ in\ cluster[uuid\:%s] = 在群集[uuid：{0}]中找不到BareMetal2网关

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:116
# args: clusterUuid
there\ is\ no\ usable\ baremetal2\ gateway\ found\ in\ cluster[uuid\:%s] = 在群集[uuid：{0}]中找不到可用的Baremetal2网关

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:124
# args: clusterUuid
there\ is\ no\ baremetal2\ provision\ network\ found\ in\ cluster[uuid\:%s] = 在群集[uuid：{0}]中找不到BareMetal2配置网络

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:132
# args: provisionNetworkUuid
baremetal2\ provision\ network[uuid\:%s]\ is\ not\ usable,\ make\ sure\ it's\ Enabled = Baremetal2配置网络[uuid：{0}]不可用，请确保它已启用

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:78
# args: hardwareInfo
wrong\ baremetal2\ chassis\ hardware\ info\ format\:\ %s = 错误的Baremetal2机箱硬件信息格式：{0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:87
# args: info.architecture,clusterArchitecture
the\ cpu\ architecture\ of\ the\ chassis[arch\:%s]\ and\ the\ cluster[arch\:%s]\ don't\ match = 机箱[arch：{0}]和群集[arch：{1}]的CPU体系结构不匹配

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:97
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ baremetal2\ chassis\ with\ boot\ mode\ %s\ is\ supported = 仅支持引导模式为{0}的BareMetal2机箱

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:108
# args: hardwareInfo
wrong\ baremetal2\ chassis\ nic\ hardware\ info\ format\:\ %s = 错误的Baremetal2机箱NIC硬件信息格式：{0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:114
# args: 
there\ must\ be\ one\ and\ only\ one\ provision\ nic\ in\ a\ baremetal2\ chassis = Baremetal2机箱中必须有且只有一个配置NIC

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:124
# args: hardwareInfo
wrong\ baremetal2\ chassis\ disk\ hardware\ info\ format\:\ %s = 错误的Baremetal2机箱磁盘硬件信息格式：{0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:167
# args: 
other\ chassis\ has\ nics\ with\ the\ same\ mac\ address,\ which\ is\ impossible = 其他机箱具有相同MAC地址的NIC，这是不可能的

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:372
# args: msg.getClusterUuid()
BareMetal2\ Chassis[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled = Baremetal2机箱[uuid：{0}]不存在或已禁用

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:438
# args: msg.getRequiredClusterUuids()
no\ available\ baremetal2\ chassis\ found\ in\ baremetal2\ clusters[uuids\:%s] = 在Baremetal2群集中找不到可用的Baremetal2机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:430
# args: 
no\ available\ baremetal2\ chassis\ found = 找不到可用的Baremetal2机箱

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:82
# args: address
IPMI\ Address\ %s\ is\ not\ valid = IPMI地址{0}是无效的

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:121
# args: address,port
Baremetal\ Chassis\ of\ IPMI\ address\ %s\ and\ IPMI\ port\ %d\ has\ already\ been\ created. = IPMI地址为{0}，端口为{1}的裸金属设备已经被创建

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:111
# args: address,port
BareMetal2\ Chassis\ of\ IPMI\ address\ %s\ and\ IPMI\ port\ %d\ has\ already\ been\ created. = 已创建IPMI地址为{0}、IPMI端口为{1}的BareMetal2机箱。

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:133
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ does\ not\ exists. = 集群[uuid:{0}]不存在

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:146
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ Enabled. = 集群[uuid:{0}]处于停用状态

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:74
# args: address,port
Bare\ Metal\ IPMI\ 2\ Chassis\ %s\:%d\ already\ exists = 裸机IPMI 2机箱{0}：{1}已存在

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:93
# args: 
Failed\ to\ reach\ the\ baremetal2\ chassis,\ please\ make\ sure\:\ 1.\ the\ IPMI\ connection\ is\ active;\ 2.\ the\ IPMI\ Address,\ Port,\ Username\ and\ Password\ are\ correct;\ 3.\ IPMI\ Over\ LAN\ is\ enabled\ in\ BIOS. = 无法访问Baremetal2机箱，请确保:1.IPMI连接处于活动状态；2.IPMI地址、端口、用户名和密码正确；3.在BIOS中启用了IPMI over LAN。

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:140
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ a\ BareMetal2\ Cluster. = 群集[uuid：{0}]不是BareMetal2群集。

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:178
# args: clusterUuid
no\ usable\ baremetal2\ gateway\ in\ cluster[uuid\:%s] = 群集[uuid：{0}]中没有可用的Baremetal2网关

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:134
# args: self.getUuid()
failed\ to\ power\ on\ baremetal2\ ipmi\ chassis[uuid\:%s] = 无法打开BareMetal2 IPMI机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:206
# args: self.getUuid()
failed\ to\ power\ off\ baremetal2\ ipmi\ chassis[uuid\:%s] = 无法关闭BareMetal2 IPMI机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:249
# args: self.getUuid()
failed\ to\ power\ reset\ baremetal2\ ipmi\ chassis[uuid\:%s] = 无法重新启动BareMetal2 IPMI机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:340
# args: self.getUuid()
Failed\ to\ remotely\ ipxe\ boot\ chassis[uuid\:%s] = 无法远程IPXE引导机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:76
# args: e.getMessage()
fail\ to\ load\ baremetal2\ ipmi\ chassis\ info\ from\ file,\ because\:\ %s = 无法从文件加载BareMetal2 IPMI机箱信息，原因是：{0}

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:94
# args: 
the\ api\ message's\ chassis\ type\ is\ ipmi,\ but\ it's\ not\ an\ APICreateBareMetal2ChassisHardwareInfoMsg = API消息的机箱类型为IPMI，但它不是APICreateBareMetal2ChassisHardwareInfoMsg

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:104
# args: imsg.getIpmiAddress(),imsg.getIpmiPort()
received\ hardware\ info\ for\ unknown\ baremetal2\ chassis[ipmi_addr\:%s,\ ipmi_port\:%d] = 收到未知Baremetal2机箱的硬件信息[IPMI_地址：{0}，IPMI_端口：{1}]

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:84
# args: 
cluster\ type\ and\ hypervisor\ type\ should\ all\ be\ baremetal2\ or\ all\ not = 群集类型和云主机管理程序类型应全部为BareMetal2或全部为非BareMetal2

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:90
# args: 
the\ architecture\ must\ be\ set\ when\ create\ new\ baremetal2\ clusters = 创建新的Baremetal2群集时必须设置体系结构

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:101
# args: 
do\ not\ add\ host\ into\ baremetal2\ cluster = 不要将物理机添加到BareMetal2群集中

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:123
# args: 
l2\ network\ should\ not\ have\ the\ same\ interface\ name\ with\ provision\ network\ that's\ already\ attached\ to\ the\ cluster = 二层网络不应与已连接到群集的Provision网络具有相同的接口名称

# at: src/main/java/org/zstack/baremetal2/cluster/CephStorageAttachBm2ClusterMetric.java:29
# args: 
Can\ not\ attach\ third-party\ ceph\ with\ token\ into\ aarch64\ cluster. = 无法使用令牌将第三方 分布式存储 附加到Aarch64集群。

# at: src/main/java/org/zstack/baremetal2/cluster/LocalStorageAttachBm2ClusterMetric.java:12
# args: 
Can\ not\ attach\ local\ storage\ into\ baremetal2\ cluster. = 无法将本地存储连接到BareMetal2群集。

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1328
# args: msg.getInstanceUuid()
no\ provision\ nic\ found\ for\ baremetal2\ instance[uuid\:%s] = 未找到BareMetal2实例[uuid：{0}]的配置NIC

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:269
# args: self.getUuid(),msg.getInstanceUuid()
failed\ to\ delete\ convert\ volume\ to\ chassis\ local\ disk\ configurations\ in\ gateway[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s] = 无法删除将网关[uuid：{0}]中的卷转换为机箱本地磁盘配置（对于BareMetal2实例[uuid：{1}]）

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1342
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ create\ provision\ configurations\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = 无法为网关[uuid：{1}]中的BareMetal2实例[uuid：{0}]创建设置配置，因为{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:418
# args: chassis.getUuid()
chassis\:%s\ disk\ does\ not\ have\ wwn\ info,\ please\ inspect\ chassis\ and\ try\ again = 机箱：{0}磁盘没有WWN信息，请检查机箱并重试

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1809
# args: chassis.getUuid()
failed\ to\ power\ on\ baremetal2\ chassis[uuid\:%s]\ using\ ipmitool = 无法使用ipmitool打开Baremetal2机箱[uuid：{0}]的电源

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:567
# args: 
convert\ image\ data\ to\ local\ disk\ failed = 将图像数据转换到本地磁盘失败

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:576
# args: instanceVO.getUuid(),chassis.getUuid(),BareMetal2GlobalConfig.CONVERT_VOLUME_TO_LOCAL_DISK_TIMEOUT.value(Integer.class)
baremetal2\ instance[uuid\:%s]\ convert\ volume\ failed\ on\ baremetal2\ chassis[uuid\:%s]\ ,\ timeout\ after\ %s\ minutes\  = Baremetal2实例[uuid：{0}]转换卷在Baremetal2机箱[uuid：{1}]上失败，{2}分钟后超时

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1235
# args: self.getUuid(),ret.getError()
failed\ to\ prepare\ provision\ network\ in\ gateway[uuid\:%s],\ because\ %s = 无法在网关[uuid：{0}]中准备设置网络，因为{1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1304
# args: self.getUuid(),ret.getError()
failed\ to\ destroy\ provision\ network\ in\ gateway[uuid\:%s],\ because\ %s = 无法销毁网关[uuid：{0}]中的设置网络，因为{1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1391
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ delete\ provision\ configurations\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = 无法删除Baremetal2实例[uuid：{0}]（在网关[uuid：{1}]中）的设置配置，因为{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1435
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ create\ console\ proxy\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = 无法为网关[uuid：{1}]中的BareMetal2实例[uuid：{0}]创建控制台代理，因为{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1492
# args: msg.getOldDefaultL3Uuid(),msg.getNewDefaultL3Uuid(),msg.getInstanceUuid(),ret.getError()
failed\ to\ change\ default\ network\ from\ l3[uuid\:%s]\ to\ l3[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s],\ because\ %s = 无法将默认网络从第3层[uuid：{0}]更改为第3层[uuid：{1}]（对于BareMetal2实例[UUid：{2}]），因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1531
# args: msg.getInstanceUuid(),msg.getGatewayUuid(),ret.getError()
failed\ to\ ping\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = 无法通过网关[uuid：{1}]Ping BareMetal2实例[uuid：{0}]，因为{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1578
# args: msg.getInstanceUuid(),msg.getGatewayUuid(),ret.getError()
failed\ to\ change\ the\ password\ of\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = 无法通过网关[uuid：{1}]更改BareMetal2实例[uuid：{0}]的密码，因为{2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1677
# args: 
third\ party\ ceph\ with\ token\ not\ support\ local\ disk\ yet = 带有令牌的第三方 分布式存储 尚不支持本地磁盘

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1838
# args: chassis.getUuid()
failed\ to\ power\ off\ baremetal2\ chassis[uuid\:%s]\ using\ ipmitool = 无法使用ipmitool关闭Baremetal2机箱[uuid：{0}]的电源

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1923
# args: chassis.getUuid(),timeout
baremetal2\ chassis[uuid\:%s]\ is\ still\ not\ POWER_OFF\ %d\ seconds\ later = Baremetal2机箱[uuid：{0}]在{1}秒后仍未关闭电源_。

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1896
# args: bm.getUuid(),ret.getError()
failed\ to\ power\ off\ baremetal2\ instance[uuid\:%s]\ by\ bm\ agent,\ because\ %s = 无法通过BM代理关闭BareMetal2实例[uuid：{0}]，因为{1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2103
# args: 
vmInstanceUuids\ is\ empty = VMInstanceUuids为空

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2109
# args: self.getUuid(),self.getStatus()
the\ baremetal2\ gateway[uuid\:%s,\ status\:%s]\ is\ not\ Connected = Baremetal2网关[uuid：{0}，状态：{1}]未连接

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2186
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ not\ connected,\ cannot\ attach\ nic\ to\ it = BareMetal2实例[uuid：{0}]未连接，无法将NIC连接到该实例

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2209
# args: nicUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ attach\ nic[uuid\:%s]\ to\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = 无法通过网关[uuid：{2}]将NIC[uuid：{0}]连接到BareMetal2实例[Uuid：{1}]，因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2252
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ is\ not\ connected,\ cannot\ detach\ nic\ from\ it = BareMetal2实例[uuid：{0}]未连接，无法将NIC与其分离

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2275
# args: nicUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ detach\ nic[uuid\:%s]\ from\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = 无法通过网关[uuid：{2}]从BareMetal2实例[uuid：{1}]分离NIC[Uuid：{0}]，因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2441
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ is\ not\ connected,\ cannot\ attach\ volume\ to\ it = BareMetal2实例[uuid：{0}]未连接，无法将卷附加到该实例

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2338
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ prepare\ volume[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = 无法通过网关[uuid：{2}]为BareMetal2实例[uuid：{1}]准备卷[Uuid：{0}]，因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2399
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ attach\ volume[uuid\:%s]\ to\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = 无法通过网关[uuid：{2}]将卷[uuid：{0}]附加到BareMetal2实例[Uuid：{1}]，因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2480
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ get\ volume[uuid\:%s]\ lunid\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = 无法获取卷[uuid：{0}]的lunid（针对网关[uuid：{2}]中的BareMetal2实例[Uuid：{1}]），因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2535
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ detach\ volume[uuid\:%s]\ from\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = 无法通过网关[uuid：{2}]分离卷[uuid：{0}]（从BareMetal2实例[Uuid：{1}]），因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2570
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ destroy\ volume[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = 无法销毁网关[uuid：{2}]中BareMetal2实例[uuid：{1}]的卷[Uuid：{0}]，因为{3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:100
# args: msg.getManagementIp()
there\ has\ been\ a\ baremetal2\ gateway\ having\ management\ ip\ %s = 存在管理IP为{0}的BareMetal2网关

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:66
# args: msg.getManagementIp()
there\ is\ already\ a\ baremetal\ pxe\ server\ with\ management\ ip\ %s,\ do\ not\ use\ it\ to\ create\ baremetal2\ gateway = 已存在管理IP为{0}的Baremetal PXE服务器，请不要使用它来创建Baremetal2网关

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:107
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ management\ ip\ %s = 已存在管理IP为{0}的物理机

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:80
# args: msg.getManagementIp()
management\ ip[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = 管理IP[{0}]既不是IPv4地址也不是有效的物理机名

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:90
# args: msg.getClusterUuid()
cannot\ add\ baremetal2\ gateway\ in\ non-baremetal2\ cluster[uuid\:%s] = 无法在非Baremetal2群集[uuid：{0}]中添加Baremetal2网关

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:120
# args: msg.getGatewayUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ gateway[uuid\:%s]\ to\ non-baremetal2\ cluster[uuid\:%s] = 无法将Baremetal2网关[uuid：{0}]连接到非Baremetal2群集[uuid：{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:131
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ already\ attached\ to\ cluster[uuid\:%s] = Baremetal2网关[uuid：{0}]已连接到群集[uuid：{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:140
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ can\ only\ attach\ to\ one\ cluster = Baremetal2网关[uuid：{0}]只能连接到一个群集

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:151
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ not\ attached\ to\ cluster[uuid\:%s],\ no\ need\ to\ detach = Baremetal2网关[uuid：{0}]未连接到群集[uuid：{1}]，无需分离

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:156
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ attached\ to\ only\ one\ cluster\ now,\ do\ not\ detach\ it = BareMetal2网关[uuid：{0}]现在仅连接到一个群集，请不要将其分离

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:164
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ does\ not\ exist = 群集[uuid：{0}]不存在

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:168
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ a\ baremetal2\ cluster = 群集[uuid：{0}]不是BareMetal2群集

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:173
# args: msg.getGatewayUuid()
gateway[uuid\:%s]\ does\ not\ exist = 网关[uuid：{0}]不存在

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:177
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ already\ in\ cluster[uuid\:%s] = Baremetal2网关[uuid：{0}]已在群集[uuid：{1}]中

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:181
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ the\ same\ zone\ as\ cluster[uuid\:%s] = Baremetal2网关[uuid：{0}]与群集[uuid：{1}]不在同一个区域中

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:191
# args: msg.getGatewayUuid()
cannot\ change\ the\ cluster\ of\ baremetal2\ gateway[uuid\:%s]\ when\ there\ are\ running\ instances\ depending\ on\ it = 存在依赖于Baremetal2网关[uuid：{0}]的正在运行的实例时，无法更改该群集

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java:45
# args: 
baremetal2\ instance[uuid\:%s]\ doesn't\ exist,\ cannot\ generate\ its\ console\ url = Baremetal2实例[uuid：{0}]不存在，无法生成其控制台URL

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java:54
# args: bm.getGatewayUuid(),bm.getUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Connected,\ cannot\ generate\ console\ url\ for\ instance[uuid\:%s] = Baremetal2网关[uuid：{0}]未连接，无法为实例[uuid：{1}]生成控制台URL

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayManagerImpl.java:258
# args: resourceUuid
cluster[%s]\ is\ not\ baremetal2\ type = 群集[{0}]不是BareMetal2类型

# at: src/main/java/org/zstack/baremetal2/gateway/allocator/AbstractGatewayAllocatorStrategy.java:102
# args: 
failed\ to\ allocate\ baremetal2\ gateway = 无法分配Baremetal2网关

# at: src/main/java/org/zstack/baremetal2/gateway/allocator/BareMetal2GatewayMainAllocatorFlow.java:62
# args: 
no\ available\ baremetal2\ gateway\ found = 找不到可用的Baremetal2网关

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:166
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ baremetal2\ image\ with\ boot\ mode\ %s\ is\ supported = 仅支持引导模式为{0}的BareMetal2镜像

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:138
# args: bm2ImageCount
only\ one\ baremetal2\ system\ tag\ is\ allowed,\ but\ %d\ was\ got = 只允许一个Baremetal2系统标记，但获得了{0}

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:158
# args: 
only\ root\ volume\ template\ of\ format\ raw/qcow2\ can\ be\ tagged\ with\ baremetal2 = 只有RAW/QCOW2格式的根卷模板才能使用BareMetal2进行标记

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:162
# args: 
the\ bootMode\ tag\ is\ mandatory\ for\ baremetal2\ images = 对于BareMetal2镜像，bootmode标记是必需的

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java:76
# args: spec.getRequiredChassisDiskUuid(),chassis.getUuid()
required\ chassis\ disk[%s]\ not\ belong\ to\ chassis[%s] = 所需的机箱磁盘[{0}]不属于机箱[{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java:88
# args: chassis.getUuid(),spec.getImageSpec().getInventory().getUuid()
chassis\ not\ have\ engouh\ capacity\ for\ image[%s] = 机箱没有足够的容量用于镜像[{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:85
# args: 
not\ enough\ information\ to\ determine\ which\ baremetal2\ cluster\ should\ be\ used = 没有足够的信息来确定应使用哪个BareMetal2群集

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:100
# args: 
no\ baremetal2\ cluster\ found = 未找到BareMetal2群集

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:217
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ primary\ storage\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = 无法在群集[uuid：{0}]中为Baremetal2实例[uuid：{1}]分配主存储

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:224
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ gateway\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = 无法在群集[uuid：{0}]中为BareMetal2实例[uuid：{1}]分配网关

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:231
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ chassis\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = 无法在群集[uuid：{0}]中为Baremetal2实例[uuid：{1}]分配机箱

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:262
# args: clusterUuids
only\ baremetal2\ clusters[uuid\:%s]\ meet\ the\ needs\ for\ chassis\ and\ gateway,\ but\ they\ have\ no\ provision\ network\ attached = 只有BareMetal2群集[uuid：{0}]满足机箱和网关的需求，但它们没有连接的配置网络

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:253
# args: spec.getRequiredClusterUuids()
no\ baremetal2\ cluster\ found\ in\ clusters[uuid\:%s] = 在群集[uuid：{0}]中找不到BareMetal2群集

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:881
# args: msg.getPrimaryStorageUuidForRootVolume(),msg.getPrimaryStorageUuidForDataVolume()
the\ primary\ storage[%s]\ of\ the\ root\ volume\ and\ the\ primary\ storage[%s]\ of\ the\ data\ volume\ are\ not\ in\ the\ same\ cluster = 根卷的主存储[{0}]和数据云盘的主存储[{1}]不在同一群集中

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:244
# args: networkUuid
make\ sure\ all\ baremetal2\ gateways\ on\ provision\ network[uuid\:%s]\ are\ Connected = 确保配置网络[uuid：{0}]上的所有Baremetal2网关均已连接

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:707
# args: 
neither\ chassisUuid\ nor\ chassisOfferingUuid\ is\ set\ when\ create\ baremetal2\ instance = 创建BareMetal2实例时，Chassisuuid和ChassisOfferuuid均未设置

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:169
# args: 
only\ support\ vpc\ network\ support\ attach\ eip\ on\ baremetal2\ instance = 仅支持VPC网络支持在Baremetal2实例上附加EIP

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:179
# args: 
bare\ metal\ instance\ not\ allowed\ to\ change\ vm\ nic\ network = 不允许裸机实例更改VM NIC网络

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:190
# args: 
current\ operation\ is\ not\ supported\ on\ local\ baremetal\ instance = 本地裸机实例不支持当前操作

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:201
# args: 
not\ supported\ by\ baremetal2\ instance = BareMetal2实例不支持

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:207
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ Connected = BareMetal2实例[uuid：{0}]未连接

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:215
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ stopped = Baremetal2实例[uuid：{0}]未停止

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:221
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ running\ but\ its\ agent\ is\ not\ Connected = Baremetal2实例[uuid：{0}]正在运行，但其代理未连接

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:607
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ does\ not\ exist = Baremetal2机箱产品[uuid：{0}]不存在

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:318
# args: msg.getInstanceUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ stopped\ can\ not\ change\ its\ chassis\ offering = Baremetal2实例[uuid：{0}]未停止，无法更改其机箱产品

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:337
# args: msg.getVmInstanceUuid()
baremetal2\ instance[uuid\:%s]\ has\ not\ been\ allocated\ a\ chassis,\ start\ the\ instance\ and\ try\ again = 尚未为BareMetal2实例[uuid：{0}]分配机箱，请启动该实例并重试

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:343
# args: ipVersion
only\ l3\ network\ with\ ip\ version\ %d\ is\ supported\ by\ baremetal2\ instance = Baremetal2实例仅支持IP版本为{0}的三层网络

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:349
# args: l2Type
l2\ network\ type\ %s\ not\ supported\ by\ baremetal2\ instance = 二层网络类型{0}不受Baremetal2实例支持

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:355
# args: 
customMac\ is\ mandatory\ when\ attaching\ l3\ network\ to\ baremetal2\ instance = 将三层网络连接到Baremetal2实例时，CustomMAC是必需的

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:359
# args: msg.getCustomMac()
%s\ is\ not\ valid\ mac\ address = {0}不是有效的MAC地址

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:364
# args: msg.getCustomMac()
duplicated\ mac\ address\ %s = 重复的MAC地址{0}

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:373
# args: bm.getUuid(),bm.getChassisUuid(),msg.getCustomMac()
baremetal2\ instance[uuid\:%s]\ running\ on\ chassis[uuid\:%s],\ which\ doesn't\ have\ non-provisioning\ nic\ with\ mac\ address\ %s = 机箱[uuid：{1}]上运行的Baremetal2实例[uuid：{0}]没有MAC地址为{2}的非配置NIC

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:382
# args: msg.getCustomMac()
mac\ address\ %s\ has\ already\ been\ used,\ try\ another\ one = MAC地址{0}已被使用，请尝试其他地址

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:399
# args: msg.getCustomMac()
nic\ with\ mac\:%s\ cannot\ be\ attached\ l3Network,\ because\ it\ has\ been\ bonded = MAC为{0}的NIC无法连接到L3Network，因为它已绑定

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:448
# args: 
third\ party\ ceph\ cannot\ mixed\ with\ other\ primary\ storage = 第三方 分布式存储 不能与其他主存储混合

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:571
# args: msg.getClusterUuid(),msg.getUuid()
cluster[uuid\:%s]\ is\ not\ an\ Enabled\ baremetal2\ cluster,\ cannot\ start\ instance[uuid\:%s]\ in\ it = 群集[uuid：{0}]不是已启用的BareMetal2群集，无法在其中启动实例[uuid：{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:583
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ does\ not\ exist\ or\ is\ not\ Enabled\ or\ Connected = Baremetal2网关[uuid：{0}]不存在，或者未启用或未连接

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:594
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ cluster\ [uuid\:%s] = Baremetal2网关[uuid：{0}]不在群集[uuid：{1}]中

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:600
# args: msg.getUuid()
please\ specify\ chassis\ uuid\ or\ chassis\ offering\ uuid\ to\ start\ baremetal2\ instance[uuid\:%s] = 请指定机箱uuid或机箱提供uuid以启动BareMetal2实例[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:611
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ is\ not\ Enabled = 未启用Baremetal2机箱产品[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:711
# args: 
do\ not\ set\ chassisUuid\ and\ chassisOfferingUuid\ at\ the\ same\ time = 不要同时设置Chassisuuid和ChassisOfferuuid

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:619
# args: 
no\ need\ to\ set\ chassisOfferingUuid\ because\ the\ instance\ has\ been\ assigned\ an\ chassis\ already = 无需设置Chassisofferinguuid，因为实例已分配机箱

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:623
# args: 
no\ need\ to\ set\ chassisOfferingUuid\ because\ the\ instance\ has\ been\ assigned\ an\ chassis\ offering\ already = 无需设置ChassisOfferinguuid，因为已为实例分配了机箱产品

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:631
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ does\ not\ exist = Baremetal2机箱[uuid：{0}]不存在

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:636
# args: msg.getChassisUuid(),bm.getChassisOfferingUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ belonging\ to\ chassis\ offering[uuid\:%s] = Baremetal2机箱[uuid：{0}]不属于机箱产品[uuid：{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:641
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Enabled = 未启用Baremetal2机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:645
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ has\ already\ been\ allocated = 已分配Baremetal2机箱[uuid：{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:763
# args: msg.getGatewayUuid(),msg.getChassisUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ the\ same\ cluster\ with\ chassis[uuid\:%s] = Baremetal2网关[uuid：{0}]与机箱[uuid：{1}]不在同一群集中

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:685
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ not\ Enabled,\ can\ not\ create\ baremetal2\ instance\ from\ it = 区域[uuid：{0}]已指定但未启用，无法从中创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:699
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ not\ an\ Enabled\ baremetal2\ cluster,\ can\ not\ create\ baremetal2\ instance\ from\ it = 指定了群集[uuid：{0}]，但它不是启用的BareMetal2群集，无法从中创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:717
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2机箱[uuid：{0}]未启用，无法从中创建Baremetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:722
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Available,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2机箱[uuid：{0}]不可用，无法从中创建Baremetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:732
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2机箱产品[uuid：{0}]未启用，无法从中创建Baremetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:743
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2网关[uuid：{0}]未启用，无法从中创建Baremetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:748
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Connected,\ can't\ create\ baremetal2\ instance\ from\ it = Baremetal2网关[uuid：{0}]未连接，无法从中创建Baremetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:780
# args: 
image\ cannot\ be\ empty\ unless\ chassis\ is\ in\ direct\ mode = 除非机箱处于直接模式，否则镜像不能为空

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:787
# args: 
direct\ mode\ not\ support\ choose\ image = 直接模式不支持选择镜像

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:794
# args: msg.getImageUuid()
image[uuid\:%s]\ does\ not\ exist = 镜像[uuid：{0}]不存在

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:800
# args: disk.getUuid(),image.getUuid()
Chassis\ disk[%s]\ not\ have\ enough\ capacity\ for\ image[%s] = 机箱磁盘[{0}]没有足够的容量用于镜像[{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:805
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = 镜像[uuid：{0}]未启用，无法从中创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:810
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ Ready,\ can't\ create\ baremetal2\ instance\ from\ it = 镜像[uuid：{0}]未就绪，无法从中创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:815
# args: msg.getImageUuid(),image.getMediaType()
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ can\ be\ used\ to\ create\ baremetal2\ instance = 镜像[uuid：{0}]的媒体类型为：{1}，只有RootVolumeTemplate可用于创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:820
# args: image.getFormat(),BareMetal2InstanceConstant.IMAGE_FORMAT_FOR_BM
image[uuid\:%s]\ is\ of\ format\:\ %s,\ only\ %s\ can\ be\ used\ to\ create\ baremetal2\ instance = 镜像[uuid：{0}]的格式为：{1}，只有{2}可用于创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:826
# args: image.getUuid()
image[uuid\:%s]\ is\ not\ baremetal2\ image,\ can't\ create\ baremetal2\ instance\ from\ it = 镜像[uuid：{0}]不是BareMetal2镜像，无法从中创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:832
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ image\ with\ boot\ mode\ %s\ is\ supported\ to\ create\ baremetal2\ instance = 仅支持引导模式为{0}的镜像来创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:841
# args: 
different\ boot\ mode\ between\ the\ image\ and\ chassis/offering = 镜像和机箱/产品之间的引导模式不同

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:851
# args: clusterArchitecture,image.getArchitecture()
the\ architecture\ of\ baremetal2\ cluster[arch\:%s]\ and\ image[arch\:%s]\ don't\ match = BareMetal2群集[arch：{0}]的体系结构与镜像[arch：{1}]不匹配

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:863
# args: msg.getDataDiskOfferingUuids()
not\ all\ disk\ offerings[uuids\:%s]\ are\ Enabled,\ can\ not\ create\ baremetal2\ instance\ from\ them = 并非所有磁盘产品[uuid：{0}]都已启用，无法从中创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:890
# args: 
cannot\ decide\ which\ zone\ the\ baremetal2\ instance\ should\ be\ created\ in = 无法确定应在哪个区域中创建BareMetal2实例

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceBase.java:476
# args: 
baremetal2\ instance[uuid\:%s]\ is\ either\ not\ exist\ or\ not\ Connected,\ cannot\ change\ its\ password = Baremetal2实例[uuid：{0}]不存在或未连接，无法更改其密码

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java:386
# args: releaseTag
%s\ can\ only\ be\ created\ or\ deleted = 只能创建或删除{0}

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java:397
# args: releaseTag
%s\ can\ only\ be\ created\ or\ deleted\ when\ the\ baremetal2\ instance\ is\ Running = 只能在运行BareMetal2实例时创建或删除{0}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:112
# args: dhcpInterface,dhcpRangeStartIp,dhcpRangeEndIp,dhcpRangeNetmask,dhcpRangeGateway
there\ already\ exists\ a\ baremetal2\ provision\ network\ with\ dhcpInterface\ \=\ %s,\ dhcpRangeStartIp\ \=\ %s,\ dhcpRangeEndIp\ \=\ %s,\ dhcpRangeNetmask\ \=\ %s,\ dhcpRangeGateway\ \=\ %s = 已存在DHCPINTERFACE={0}、DHCPRANGESTARTIP={1}、DHCPRANGEENDIP={2}、DhcpRangeNetMask={3}、DhcpRangeGateway={4}的BareMetal2配置网络

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:123
# args: msg.getNetworkUuid()
cannot\ update\ baremetal2\ provision\ network[uuid\:%s]\ dhcp\ configuration\ when\ there\ are\ instances\ depending\ on\ it = 当有实例依赖于网络[uuid：{0}]DHCP配置时，无法更新该配置

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:141
# args: netmask
baremetal2\ provision\ network\ dhcp\ range\ netmask\ %s\ is\ invalid = Baremetal2设置网络DHCP范围网络掩码{0}无效

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:147
# args: begin,end
baremetal2\ provision\ network\ start\ ip\ %s\ and\ stop\ ip\ %s\ do\ not\ belong\ to\ the\ same\ subnet = Baremetal2配置网络启动IP{0}和停止IP{1}不属于同一子网

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:157
# args: msg.getNetworkUuid()
cannot\ delete\ baremetal2\ provision\ network[uuid\:%s]\ when\ there\ are\ instances\ depending\ on\ it = 有实例依赖于BareMetal2配置网络[uuid：{0}]时，无法删除该网络

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:171
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ non-baremetal2\ cluster[uuid\:%s] = 无法将BareMetal2设置网络[uuid：{0}]连接到非BareMetal2群集[uuid：{1}]

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:182
# args: msg.getNetworkUuid(),msg.getClusterUuid()
baremetal2\ provision\ network[uuid\:%s]\ is\ already\ attached\ to\ cluster[uuid\:%s] = Baremetal2配置网络[uuid：{0}]已连接到群集[uuid：{1}]

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:188
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s]\ because\ the\ cluster\ already\ have\ one = 无法将BareMetal2设置网络[uuid：{0}]附加到群集[uuid：{1}]，因为该群集已有一个网络

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:198
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s]\ because\ they\ are\ not\ in\ the\ same\ zone = 无法将BareMetal2配置网络[uuid：{0}]附加到群集[uuid：{1}]，因为它们不在同一区域中

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:219
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s],\ because\ we\ need\ to\ make\ sure\ that\ every\ gateway\ attached\ to\ the\ clusters\ that\ have\ the\ same\ provision\ network\ attached = 无法将BareMetal2配置网络[uuid：{0}]连接到群集[uuid：{1}]，因为我们需要确保连接到具有相同配置网络的群集的每个网关

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:241
# args: 
provision\ network\ should\ not\ have\ the\ same\ interface\ name\ with\ l2\ networks\ that\ are\ already\ attached\ to\ the\ cluster = 设置网络不应与已连接到群集的二层网络具有相同的接口名称

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:251
# args: msg.getNetworkUuid()
cannot\ detach\ baremetal2\ provision\ network[uuid\:%s]\ when\ there\ are\ running\ instances\ depending\ on\ it = 存在依赖于Baremetal2配置网络[uuid：{0}]的正在运行的实例时，无法分离该网络

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:258
# args: 
networkUuids\ is\ empty = 网络uuid为空

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:265
# args: msg.getNetworkUuids()
not\ all\ baremetal2\ provision\ networks\ exist\ in\ %s = {0}中并不存在所有BareMetal2配置网络

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:496
# args: networkUuid,gatewayUuid,reply.getError()
failed\ to\ prepare\ provision\ network[uuid\:%s]\ in\ gateway[uuid\:%s]\:\ %s = 无法准备设置网络[uuid：{0}]（在网关[uuid：{1}]中）：{2}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:308
# args: networkUuid,gatewayUuid,reply.getError()
failed\ to\ update\ provision\ network[uuid\:%s]\ in\ gateway[uuid\:%s]\:\ %s = 无法更新设置网络[uuid：{0}]（在网关[uuid：{1}]中）：{2}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:650
# args: msg.getNetworkUuid()
failed\ to\ allocate\ ip\ from\ baremetal2\ provision\ network[uuid\:%s] = 无法从BareMetal2配置网络[uuid：{0}]分配IP

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:73
# args: 
billing\ is\ disabled = 已禁用计费

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:120
# args: 
the\ start\ date\ must\ be\ greater\ than\ the\ end\ date = 开始时间必须早于结束时间

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:124
# args: 
resourceType\ and\ resourceUuid\ cannot\ be\ empty\ at\ the\ same\ time = ResourceType和Resourceuuid不能同时为空

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:244
# args: 
the\ minimal\ resource\ unit\ is\ megabyte,\ cannot\ be\ byte = 资源的最小单位必须为MB，而不是byte

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:252
# args: 
price\ must\ be\ 0\ and\ 999999999.99 = 价格必须为0和999999999.99

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:259
# args: 
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ empty = GPU类型的价格必须绑定一个GPU设备

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:266
# args: price.getSystemTags()
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ %s = GPU类型的价格必须绑定一个正确的GPU设备{0}

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:226
# args: resourceName
resourceName[%s]\ is\ invalid = 资源名称[{0}]无效

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:278
# args: msg.getAccountUuid()
The\ account[uuid\=%s]\ has\ attach\ price\ table = 帐户[uuid={0}]具有附加价格表

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:284
# args: msg.getUuid()
This\ priceTable[uuid\=%s]\ is\ not\ allowed\ to\ delete = 不允许删除此价格表[uuid={0}]

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:298
# args: 
accountUuid/tableUuid\ only\ one\ of\ them\ is\ allowed\ to\ be\ set = Accountuuid/Tableuuid只允许设置其中一个

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:304
# args: 
endDateInLong\ is\ not\ allowed\ to\ be\ negative = EndDateInLong不允许为负数

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:308
# args: 
endDateInLong\ and\ setEndDateInLongBaseOnCurrentTime\ are\ not\ allowed\ to\ set\ at\ the\ same\ time = 不允许同时设置EndDateInLong和SetEndDateInLongBaseOnCurrentTime

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:321
# args: 
endDateInLong\ is\ set,\ no\ modification\ allowed = EndDateInLong已设置，不允许修改

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:329
# args: 
endDateInLong\ cannot\ be\ earlier\ than\ dateInLong = EndDateInlong不能早于DateInlong

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:336
# args: 
billing\ is\ enable,\ This\ operation\ is\ only\ allowed\ in\ the\ disabled\ state = 计费已启用，只有在禁用状态下才能执行此操作

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:451
# args: 
priceKeyName\ is\ null = PriceKeyName为空

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:1084
# args: currentPriceVO.getDateInLong()
dateInLong\ is\ less\ than\ %s = DateInLong小于{0}

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:3090
# args: 
please\ set\ the\ correct\ priceUserConfig,\ for\ example\:\ priceUserConfig\:{\nrootVolume\:{\npriceKeyName\:\"priceKeyName\"}} = 请设置正确的priceUserConfig，例如：priceUserConfig：'{\nRootVolume：{\nPriceKeyName：\“ priceKeyName\”}'}

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:3105
# args: 
please\ set\ the\ correct\ priceUserConfig,\ for\ example\:\ priceUserConfig\:{\nvolume\:{\npriceKeyName\:\"priceKeyName\"}} = 请设置正确的priceUserConfig，例如：priceUserConfig：'{\nVolume：{\nPriceKeyName：\“ priceKeyName\”}'}

# at: src/main/java/org/zstack/billing/ResourceSpendingHelper.java:49
# args: resourceType
unsupported\ billing\ resource\ type\ [%s] = 不支持的计费资源类型[{0}]

# at: src/main/java/org/zstack/cas/CasInterceptor.java:31
# args: type
there\ is\ no\ such\ type[%s]\ in\ CAS = CAS中没有此类型[{0}]

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:76
# args: loginContext.getUsername()
wrong\ virtual\ ID[name\:%s],\ not\ existing\ or\ wrong\ password = 错误的virtual ID[名称:{0}], 密码不存在或者密码错误

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:57
# args: 
missing\ property\ of\ cas\ driver = 缺少CAS驱动程序的属性

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:64
# args: casDriverType
Unsupported\ cas\ driver\:\ %s = 不支持的CAS驱动程序：{0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:63
# args: msg.getUuid()
cannot\ find\ such\ ResourceStackVO\ by\ uuid\ [%s] = 无法通过uuid[{0}]找到此类ResourceStackVO

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:67
# args: validStatus
restart\ resource\ stack\ only\ support\ %s\ status! = 重新启动资源堆栈仅支持{0}状态！

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:173
# args: 
templateContent\ and\ uuid\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = TemplateContent和uuid不能同时为空或同时设置！

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:98
# args: validStatus
expect\ %s\ status! = 预期{0}状态！

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:118
# args: 
templateContent\ and\ templateUuid\ mustn't\ both\ be\ empty! = TemplateContent和TemplateUuid不能同时为空！

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:129
# args: 
templateContent\ and\ url\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = TemplateContent和URL不能同时为空或同时设置！

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:145
# args: 
only\ admin\ could\ enable/disable\ system\ StackTemplate = 只有管理员才能启用/禁用系统堆栈模板

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1032
# args: vo.getName()
cannot\ delete\ or\ update\ system\ template\:\ %s = 无法删除或更新系统模板：{0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:322
# args: msg.getVmInstanceUuid()
no\ stackUuid\ found\ for\ the\ vmInstance[%s] = 找不到VMInstance[{0}]stackUuid

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:612
# args: msg.getUuid()
ResourceStackVO\:\ [%s]\ has\ been\ deleted... = ResourceStackVO：[{0}]已被删除..

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:642
# args: uuid
ResourceStackVO\ [%s]\ already\ been\ deleted! = ResourceStackVO[{0}]已被删除！

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:871
# args: 
templateContent\ must\ be\ set! = 必须设置TemplateContent！

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:865
# args: template.getUuid()
template\ [%s]\ chosen\ is\ disabled = 所选模板[{0}]已禁用

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:955
# args: p.getParamName(),p.getResourceType()
cannot\ find\ parameters\ for\ %s,\ which\ is\ %s\ type,\ please\ check\ parameters = 找不到{1}类型的{0}的参数，请检查参数

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1025
# args: 
StackTemplateVO\ has\ been\ deleted... = StackTemplateVo已被删除..

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1048
# args: 
content\ must\ be\ set\ by\ templateContent\ or\ url! = 必须通过TemplateContent或URL设置内容！

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1066
# args: 
get\ null\ content\ input = 获取空内容输入

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1073
# args: result.getTemplateVersion()
invalid\ cloudformation\ template\ version\:\ %s = CloudFormation模板版本无效：{0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1087
# args: msg.getUuid()
StackTemplateVO\:\ [%s]\ has\ been\ deleted... = StackTemplateVo：[{0}]已删除..

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1385
# args: 
[cloudformation]\ filterName\ must\ be\ cloudformation\:true\ or\ cloudformation\:false = [cloudFormation]FilterName必须为cloudFormation：true或cloudFormat：false

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:31
# args: 
get\ null\ element\ in\ template\ content = 获取模板内容中的空元素

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:35
# args: 
template\ must\ contain\ [ZStackTemplateFormatVersion] = 模板必须包含[ZStackTemplateFormatVersion]

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:38
# args: result.getTemplateVersion(),CloudFormationConstant.version
invalid\ ZStackTemplateFormatVersion\:\ [%s,\ expected\:\ %s] = 无效的ZStackTemplateFormatVersion：[{0}，应为：{1}]

# at: src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java:124
# args: l2Uuid
cannot\ find\ l2_bridge_name\ of\ l2[%s]\ from\ systemTag = 在系统标记中找不到L2[{0}]的L 2_Bridge_名称

# at: src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java:135
# args: vm.getUuid()
cannot\ find\ default\ ip\ on\ vm[%s] = 在云主机[{0}]上找不到默认IP

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:97
# args: 
cannot\ find\ resource\ of\ properties\ set\ before! = 找不到以前设置的属性的资源！

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:152
# args: value
invalid\ dynamic\ variables,\ which\ must\ contained\ ${\:\ %s = 动态变量无效，必须包含$'{：{0}'

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:174
# args: 
verb\ must\ contain\ '\:\:'! = 谓词必须包含“：:”！

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:218
# args: t[0],last.getClass().getName()
need\ List\ for\ resource\ [%s]\ output\ here,\ but\ got\ %s. = 此处需要资源[{0}]输出的列表，但获得了{1}。

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:380
# args: 
Some\ actions\ are\ invalid = 某些操作无效

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:253
# args: 
no\ root\ element\ found,\ please\ check\ your\ cfn\ formation! = 找不到根元素，请检查您的CFN结构！

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:432
# args: e.getMessage()
Wrong\ json\ format,\ causes\:\ %s = 错误的JSON格式，导致：{0}

# at: src/main/java/org/zstack/cloudformation/template/decoder/AbstractCfnRootDecoder.java:14
# args: 
CfnRootDecoder's\ weight\ must\ between\ 0-100,\ 0\ means\ decode\ first,\ default\ is\ 50 = cfnRootDecoder的权重必须介于0-100之间，0表示先解码，默认值为50

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:45
# args: 
Condition\ body\ cannot\ support\ json\ null\ or\ array! = 条件体不支持JSON NULL或数组！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:41
# args: 
Only\ support\ ZStack\ Template\ Functions\ in\ 'Condition'\ field! = 仅支持“条件”字段中的ZStack模板函数！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:37
# args: 
Value\ must\ be\ boolean\ in\ 'Condition'\ field = “条件”字段中的值必须为布尔值

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:30
# args: key,es.size()
Condition\ key\:\ %s\ only\ support\ 1\ element\ in\ the\ json\ object\ of\ value,\ but\ got\ %d\ elements! = 条件键：{0}在值为的JSON对象中只支持1个元素，但得到了{1}个元素！

# at: src/main/java/org/zstack/cloudformation/template/decoder/DecoderUtils.java:91
# args: msg
cannot\ find\ such\ msg\:\ %s\ for\ create = 无法为创建找到这样的消息：{0}

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:56
# args: 
Mapping\ value\ body\ cannot\ support\ null! = 映射值正文不能支持Null！

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:54
# args: 
Mapping\ value\ body\ cannot\ support\ json\ array! = 映射值主体不支持JSON数组！

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:66
# args: 
mappingName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = 必须在结果中找到MappingName，否则它是无效的CFN JSON。

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:84
# args: 
Mapping\ body\ cannot\ support\ json\ null! = 映射体不支持JSON NULL！

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:82
# args: 
Mapping\ body\ cannot\ support\ non\ map\ value! = 映射体不支持非映射值！

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:57
# args: 
Output\ body\ cannot\ support\ json\ null! = 输出正文不支持JSON NULL！

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:70
# args: 
Description\ in\ Outputs\ must\ be\ String\ type! = 输出中的描述必须是字符串类型！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java:59
# args: 
paramName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = 必须在结果中找到ParamName，否则它是无效的CFN JSON。

# at: src/main/java/org/zstack/cloudformation/template/decoder/PreParameterDecoder.java:53
# args: 
Parameters\ root\ body\ must\ be\ json\ object! = 参数根体必须是JSON对象！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:145
# args: 
Mappings\ root\ body\ must\ be\ json\ object! = 映射根体必须是JSON对象！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:112
# args: 
resourceName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = ResourceName必须在结果中找到，或者它是无效的CFN JSON。

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:123
# args: 
Parameters\ body\ cannot\ support\ null! = 参数体不支持NULL！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:68
# args: 
Resource\ value\ body\ cannot\ support\ null! = 资源值体不能支持null！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:48
# args: resource.getResourceName(),e.getKey(),resource.getResourceName()
Resource\ %s\ cannot\ depends\ on\ itself,\ please\ check\ %s\ in\ Resource\ [%s] = 资源{0}不能依赖自身，请检查资源[{2}]中的{1}

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:254
# args: 
Resource\ root\ body\ must\ be\ json\ object! = 资源根体必须是JSON对象！

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:216
# args: 
Resource\ Type\ must\ be\ String! = 资源类型必须是字符串！

# at: src/main/java/org/zstack/cloudformation/template/function/IfTemplateFunction.java:42
# args: cond
cannot\ find\ condition[%s]\ in\ 'Conditions' = 在“条件”中找不到条件[{0}]

# at: src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java:42
# args: e.getAsString()
expect\ 'true',\ 'false'\ for\ the\ object,\ but\ got\ %s = 该对象应为“ true ”和“ false ”，但得到了{0}

# at: src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java:35
# args: keys,e.getAsString()
expect\ 'true',\ 'false'\ or\ an\ other\ Condition,\ current\ Conditions\ include\:\ %s,\ but\ got\ %s = 应为“ true ”、“ false ”或其他条件，当前条件包括：{0}，但得到了{1}

# at: src/main/java/org/zstack/cloudformation/template/function/SelectTemplateFunction.java:83
# args: 
Fn\:\:Select\ out\ of\ range,\ please\ check\ your\ json\ file! = FN：:选择超出范围，请检查您的JSON文件！

# at: src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:75
# args: e.getKey()
only\ functions\ can\ in\ Function,\ but\ found\ %s = 只能在函数中使用函数，但找到了{0}

# at: src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:90
# args: 
element\ is\ null! = 元素为空！

# at: src/main/java/org/zstack/compute/VmNicUtils.java:26
# args: 
duplicate\ nic\ params = 复制NIC参数

# at: src/main/java/org/zstack/compute/VmNicUtils.java:32
# args: 
l3NetworkUuid\ of\ vm\ nic\ can\ not\ be\ null = 云主机NIC的L3Networkuuid不能为空

# at: src/main/java/org/zstack/compute/VmNicUtils.java:35
# args: l3Uuids
l3NetworkUuid\ of\ vm\ nic\ is\ not\ in\ l3[%s] = 云主机NIC的l3NetworkUuid不在L3[{0}]中

# at: src/main/java/org/zstack/compute/VmNicUtils.java:40
# args: nic.getOutboundBandwidth()
outbound\ bandwidth[%d]\ of\ vm\ nic\ is\ out\ of\ [8192,\ 32212254720] = VM NIC的出站带宽[{0}]超出[8192，32212254720]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:46
# args: nic.getInboundBandwidth()
inbound\ bandwidth[%d]\ of\ vm\ nic\ is\ out\ of\ [8192,\ 32212254720] = VM NIC的入站带宽[{0}]超出[8192，32212254720]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:52
# args: nic.getMultiQueueNum()
multi\ queue\ num[%d]\ of\ vm\ nic\ is\ out\ of\ [1,256] = VM NIC的多队列数[{0}]超出[1，256]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:58
# args: nic.getL3NetworkUuid(),nic.getState(),VmNicState.enable.toString(),VmNicState.disable.toString()
vm\ nic\ of\ l3[uuid\:%s]\ state[%s]\ is\ not\ %s\ or\ %s\  = L3[uuid：{0}]状态[{1}]的VM NIC不是{2}或{3}

# at: src/main/java/org/zstack/compute/VmNicUtils.java:64
# args: driverType
vm\ nic\ driver\ %s\ not\ support\ yet = VM NIC驱动程序{0}尚不支持

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:420
# args: resourceUuid,affinityGroupUuid
VM\ [uuid\:\ %s]\ has\ already\ been\ added\ to\ affinityGroup\ [uuid\:\ %s] = VM[uuid:{0}已经被添加到亲和组[uuid:{1}]中。]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:437
# args: hostUuid,affinityGroupUuid
There\ are\ other\ VMs\ on\ this\ host\ [uuid\:\ %s]\ belonging\ to\ same\ affinityGroup\ [%s] = 在物理机[uuid:{0}]上的云主机属于同一个亲和组中[{1}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:468
# args: self.getUuid(),host.getUuid(),vmUuid
affinityGroup\ [uuid\:%s]\ reserve\ host\ [uuid\:%s]\ for\ vm\ [uuid\:\ %s]\ failed = 亲和组[uuid:{0}]为云主机[uuid:{2}]预分配物理机资源[uuid:{1}]失败

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:538
# args: inv.getResourceUuid(),self.getUuid()
vm\ [uuid\:%s]\ doesn't\ satisfy\ the\ affinityGroup\ [uuid\:%s] = 云主机[uuid:{1}]不满足亲和组[uuid:{2}]的要求

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupFilterFlow.java:139
# args: 
can\ not\ satisfied\ affinity\ group\ conditions = 不能满足亲和组的条件

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:42
# args: VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString(),state.toString()
Vm\ can\ change\ its\ affinityGroup\ only\ in\ state\ [%s,%s],\ but\ vm\ is\ in\ state\ [%s] = 只有状态为[{0},{1}]的云主机可以改变亲和组，但是现在云主机的状态为[{2}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:52
# args: msg.getUuid(),agUuid
Vm\ [uuid\:\ %s]\ is\ already\ added\ to\ affinityGroup\ [uuid\:\ %s] = 云主机[uuid:{0}]已经被添加至亲和组[uuid:{1}]中

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:77
# args: affinityGroupUuid
AffinityGroup\ [uuid\:\ %s]\ does\ not\ existed = 亲和组[uuid:{0}]不存在

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:81
# args: 
Can\ not\ operate\ on\ affinity\ group\ created\ by\ system = 不能对系统创建的亲和组进行操作

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:88
# args: affinityGroupUuid
Can\ not\ operate\ on\ affinityGroup\ [uuid\:\ %s]\ which\ is\ not\ enabled = 不能对不是enabled状态的亲和组操作

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupManagerImpl.java:219
# args: msg.getAffinityGroupUuid()
cannot\ find\ the\ affinity\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = 未找到亲和组[uuid:{0}]，它可能已经被删除

# at: src/main/java/org/zstack/compute/allocator/AttachedL2NetworkAllocatorFlow.java:118
# args: spec.getL3NetworkUuids()
no\ host\ found\ in\ clusters\ that\ has\ attached\ to\ L2Networks\ which\ have\ L3Networks%s = 在连接到具有L3Networks{0}的L2Networks的群集中找不到物理机

# at: src/main/java/org/zstack/compute/allocator/AttachedPrimaryStorageAllocatorFlow.java:79
# args: psuuids
no\ host\ found\ in\ clusters\ that\ have\ attached\ to\ primary\ storage\ %s = 在已连接到主存储{0}的群集中找不到物理机

# at: src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java:41
# args: vm.getUuid()
cannot\ find\ root\ volume\ of\ vm[uuid\:%s] = 找不到VM[uuid：{0}]的根卷

# at: src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java:84
# args: requiredPsUuids,vm.getUuid()
no\ host\ found\ in\ clusters\ which\ have\ attached\ to\ all\ primary\ storage\ %s\ where\ vm[uuid\:%s]'s\ volumes\ locate = 在已连接到VM[uuid：{1}]的卷所在的所有主存储{0}的群集中找不到物理机

# at: src/main/java/org/zstack/compute/allocator/AvoidHostAllocatorFlow.java:30
# args: spec.getAvoidHostUuids()
after\ rule\ out\ avoided\ host%s,\ there\ is\ no\ host\ left\ in\ candidates = 在排除避免的物理机{0}后，候选物理机中没有剩余的物理机

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:87
# args: spec.getRequiredBackupStorageUuid(),bsType
the\ backup\ storage[uuid\:%s,\ type\:%s]\ requires\ bound\ primary\ storage,\ however,\ the\ primary\ storage\ has\ not\ been\ added = 无法找到跟镜像服务器[uuid:{0}, type:{1}]配对的主存储。一些镜像服务器必须跟配对的主存储共同使用，例如Ceph镜像服务器监控节点只能搭配分布式存储使用。请检查你主存储的设置

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:80
# args: spec.getImage().getUuid(),spec.getRequiredBackupStorageUuid(),type,psUuids
The\ image[uuid\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[uuids\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = 镜像[uuid:{0}]所在的镜像服务器[uuid:{1}, type:{2}]必须跟主存储[uuid:{3}]配对使用，但无法找到可以跟满足条件并可以访问该主存储的物理机

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:71
# args: spec.getImage().getUuid(),name,spec.getRequiredBackupStorageUuid(),spec.getImage().getType(),possiblePrimaryStorageTypes
The\ image[uuid\:%s,\ name\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[types\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = 镜像[uuid:{0},name:{1}]所在的镜像服务器[uuid:{2}, type:{3}]必须跟主存储[uuid:{4}]一起使用，但无法找到可以跟满足条件并可以访问该主存储的物理机

# at: src/main/java/org/zstack/compute/allocator/DesignatedHostAllocatorFlow.java:107
# args: args
No\ host\ with\ %s\ found = 找不到具有{0}的物理机

# at: src/main/java/org/zstack/compute/allocator/FilterFlow.java:39
# args: filter.getClass().getSimpleName(),filter.filterErrorReason()
after\ filtering,\ HostAllocatorFilterExtensionPoint[%s]\ returns\ zero\ candidate\ host,\ it\ means\:\ %s = 过滤后，HostAllocatorFilterExtensionPoint[{0}]返回零候选物理机，表示：{1}

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:56
# args: 
either\ volumeUuid\ or\ volumeSnapshotUuid\ must\ be\ set = 云盘uuid或者快照uuid必须被设置

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:75
# args: 
zoneUuids,\ clusterUuids,\ hostUuids\ must\ at\ least\ have\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = 区域uuid，集群uuid,物理机uuid必须有一个不为空，或者全部都填写

# at: src/main/java/org/zstack/compute/allocator/HostCapacityAllocatorFlow.java:69
# args: spec.getCpuCapacity(),spec.getMemoryCapacity()
no\ host\ having\ cpu[%s],\ memory[%s\ bytes]\ found = 未找到CPU为[{0}]、内存为[{1}字节]的物理机

# at: src/main/java/org/zstack/compute/allocator/HostOsVersionAllocatorFlow.java:52
# args: currentHostOs
no\ candidate\ host\ has\ version[%s] = 没有版本为[{0}]的候选物理机

# at: src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java:248
# args: PrimaryStorageState.Enabled,PrimaryStorageState.Disabled,PrimaryStorageStatus.Connected
cannot\ find\ available\ primary\ storage[state\:\ %s\ or\ %s,\ status\:\ %s].\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = 找不到可用的主存储[状态：{0}或{1}，状态：{2}]。检查主存储的状态，并确保它们已连接到群集

# at: src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java:244
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,spec.getDiskSize()
cannot\ find\ available\ primary\ storage[state\:\ %s,\ status\:\ %s,\ available\ capacity\ %s\ bytes].\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = 找不到可用的主存储[状态：{0}，状态：{1}，可用容量为{2}字节]。检查主存储的状态，并确保它们已连接到群集

# at: src/main/java/org/zstack/compute/allocator/HostSortorChain.java:130
# args: e.getMessage(),host.getUuid(),e.getMessage()
[Host\ Allocation]\:\ %s\ on\ host[uuid\:%s].\ try\ next\ one.\ %s = [物理机分配]：物理机[uuid：{1}]上的{0}。请尝试下一个。{2}

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:97
# args: spec.getHypervisorType()
no\ host\ having\ state\=Enabled\ status\=Connected\ hypervisorType\=%s\ found = 未找到状态为“已启用”、状态为“已连接”、管理程序类型为“{0}”的物理机

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:99
# args: 
no\ host\ having\ state\=Enabled\ status\=Connected\ found = 未找到状态=已启用、状态=已连接的物理机

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:94
# args: candidates.size(),spec.getHypervisorType()
no\ Enabled\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts\ having\ the\ hypervisor\ type\ [%s] = 在具有云主机监控程序类型[{1}]的[{0}]候选物理机中未找到已启用的物理机

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:92
# args: candidates.size()
no\ Enabled\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts = 在[{0}]个候选物理机中找不到已启用的物理机

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:90
# args: candidates.size()
no\ Connected\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts = 在[{0}]个候选物理机中找不到已连接的物理机

# at: src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:110
# args: spec.getImage().getUuid(),spec.getImage().getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ deleted\ on\ all\ backup\ storage = 镜像[uuid:{0}, name:{1}]已经从所有镜像服务器上删除，无法执行相应操作

# at: src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:144
# args: zoneUuids,spec.getImage().getUuid()
no\ host\ found\ in\ zones[uuids\:%s]\ that\ attaches\ to\ backup\ storage\ where\ image[%s]\ is\ on = 在区域[uuid：{0}]中找不到连接到镜像[{1}]所在的备份存储的物理机

# at: src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java:114
# args: entry.getKey()
resource\ binding\ not\ support\ type\ %s\ yet = 资源绑定尚不支持类型{0}

# at: src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java:133
# args: resources
no\ available\ host\ found\ with\ binded\ resource\ %s = 未找到具有绑定资源{0}的可用物理机

# at: src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java:68
# args: extp.getClass().getName()
InstanceOfferingTagAllocatorExtensionPoint[%s]\ return\ zero\ candidate\ host = InstanceOfferingTagAllocatorExtensionPoint[{0}]返回零个候选物理机

# at: src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java:104
# args: extp.getClass().getName()
DiskOfferingTagAllocatorExtensionPoint[%s]\ return\ zero\ candidate\ host = DiskOfferingTagAllocatorExtensionPoint[{0}]返回零候选物理机

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:108
# args: 
cannot\ bind\ with\ interface\ configured\ with\ vtep\ ip = 无法与配置了VTEP IP的接口绑定

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:64
# args: bondingName,HostNetworkBondingConstant.BONDING_NAME_MAX
invalid\ bonding\ name[%s],\ it\ must\ be\ shorter\ than\ [%s]\ characters = 绑定名称[{0}]无效，它必须少于[{1}]个字符

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:68
# args: bondingName
invalid\ bonding\ name[%s],\ it\ must\ only\ contains\ letters,\ numbers\ and\ underscores = 绑定名称[{0}]无效，它只能包含字母、数字和下划线

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:77
# args: bondingName,hostUuid
bonding\ card\ can\ not\ have\ occupied\ bondingName\:[%s],\ which\ was\ already\ been\ used\ by\ host[%s]. = 绑定卡不能占用BondingName：[{0}]，它已被物理机[{1}]使用。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:103
# args: 
cannot\ bind\ with\ interface\ corresponding\ to\ the\ management\ network = 无法与管理网络对应的接口绑定

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:115
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ which\ is\ not\ on\ the\ same\ host[%s]. = 绑定卡不能具有不在同一物理机[{0}]上的接口。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:120
# args: hostUuid
bonding\ card\ can\ not\ have\ occupied\ interfaces,\ which\ was\ already\ been\ used\ by\ host[%s]. = 绑定卡不能占用接口，该接口已被物理机[{0}]使用。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:125
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ that\ has\ been\ used\ as\ a\ network\ bridge,\ which\ was\ already\ been\ used\ by\ host[%s]. = 绑定卡不能具有已用作网桥的接口，该接口已被物理机[{0}]使用。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:152
# args: interfaceVO.getUuid()
bonding\ card\ can\ not\ have\ interface[%s]\ which\ have\ been\ sriov\ virtualized. = 绑定卡不能具有已被SRIOV虚拟化的接口[{0}]。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:161
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ with\ different\ speed,\ which\ is\ on\ the\ host[%s]. = 绑定卡不能有不同速度的接口，在物理机[{0}]上。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:168
# args: mode,xmitHashPolicy
[%s]\ bonding\ card\ can\ not\ designate\ [%s],\ Only\ mode\ 802.3ad\ support\ specifying\ different\ xmit_hash_policys = [{0}]绑定卡无法指定[{1}]，只有模式802.3ad支持指定不同的xmit_哈希_策略

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:181
# args: mode,size
[%s]\ bonding\ can\ not\ have\ [%s]\ interfaces,\ it\ must\ be\ the\ number\ between[1~2]. = [{0}]绑定不能有[{1}]个接口，其数量必须在[1~2]之间。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:177
# args: mode,size
[%s]\ bonding\ card\ can\ not\ have\ [%s]\ interfaces,\ it\ must\ be\ the\ number\ between[1~8]. = [{0}]个绑定卡不能有[{1}]个接口，必须在[1~8]之间。

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:214
# args: msg.getType()
invalid\ bonding\ type[%s] = 绑定类型[{0}]无效

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:242
# args: 
cannot\ delete\ bonding\ corresponding\ to\ the\ management\ network = 无法删除与管理网络对应的绑定

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:247
# args: 
cannot\ delete\ bonding\ configured\ with\ vtep\ ip = 无法删除使用VTEP IP配置的绑定

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:58
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ add\ linux\ bonding\ to\ host[uuid\:%s]\ \:\ %s = 无法将Linux绑定添加到物理机[uuid：{0}]：{1}

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:97
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ update\ linux\ bonding\ on\ host[uuid\:%s]\ \:\ %s = 无法更新物理机[uuid：{0}]上的Linux绑定：{1}

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:132
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ remove\ linux\ bonding\ from\ host[uuid\:%s]\ \:\ %s = 无法从物理机[uuid：{0}]中删除Linux绑定：{1}

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:55
# args: 
if\ cluster\ type\ is\ baremetal,\ then\ hypervisorType\ must\ be\ baremetal\ too,\ or\ vice\ versa = 如果群集类型为裸机，则hypervisorType也必须为裸机，反之亦然

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:71
# args: 
only\ kvm\ hosts'\ operating\ system\ can\ be\ updated,\ for\ now = 目前只支持升级KVM物理机操作系统

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:82
# args: msg.getUuid()
there\ are\ hosts\ in\ cluster[uuid\:%s]\ in\ the\ PreMaintenance\ state,\ cannot\ update\ cluster\ os\ right\ now = 集群[uuid:{0}] 中存在处于预维护模式的物理机，无法执行操作系统升级操作

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:94
# args: msg.getUuid()
not\ all\ hosts\ in\ cluster[uuid\:%s]\ are\ in\ the\ Connected\ status,\ cannot\ update\ cluster\ os\ right\ now = 集群[uuid:{0}] 中存在未处于已连接状态的物理机，无法执行操作系统升级操作

# at: src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java:45
# args: r
invalid\ cpu\ pinning\ ref[%s].\ correct\ example\ is\ [1,3\:3-6,^5] = CPU固定引用[{0}]无效。正确的例子是[1，3:3-6，^5]

# at: src/main/java/org/zstack/compute/cpuPinning/CpuRangeSet.java:58
# args: word
Invalid\ cpuset\ [%s] = 无效的CPUSet[{0}]

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java:53
# args: pCpuNum
the\ host\ vm\ located\ only\ have\ %\ CPUs = 所定位的物理机云主机只有%的CPU

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java:46
# args: 
incorrect\ input\ format,\ only\ accept\ '^[0-9,]+$' = 输入格式不正确，只接受'^[0-9，]+$'

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningFilterFlow.java:37
# args: 
vcpu\ pinning\ pcpu\ id\ >\ host\ cores = vcpu要绑定的pcpu id大于了物理机实际核数

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:81
# args: 
webssh\ server\ is\ not\ running. = WebSSH服务器未运行。

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:105
# args: msg.getManagementIp()
managementIp[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = 管理IP[{0}]既不是有效的IPv4地址也不是有效的物理机名

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:115
# args: msg.getHostUuid(),hostStatus
can\ not\ maintain\ host[uuid\:%s,\ status\:%s]which\ is\ not\ Connected = 只能对已连接状态的物理机[uuid:{0}, status:{1}]进行维护操作

# at: src/main/java/org/zstack/compute/host/HostBase.java:272
# args: msg.getHostUuid()
host[%s]\ does\ not\ have\ ipmi\ device\ or\ ipmi\ does\ not\ have\ address.After\ config\ ipmi\ address,\ please\ reconnect\ host\ to\ refresh\ host\ ipmi\ information = 物理机[{0}]没有IPMI设备或IPMI没有地址。配置IPMI地址后，请重新连接物理机以刷新物理机IPMI信息

# at: src/main/java/org/zstack/compute/host/HostBase.java:435
# args: vmFailedToMigrate.keySet(),self.getUuid(),self.getName(),self.getManagementIp()
failed\ to\ migrate\ vm[uuids\:%s]\ on\ host[uuid\:%s,\ name\:%s,\ ip\:%s],\ will\ try\ stopping\ it. = 无法迁移物理机[uuid：{1}，名称：{2}，IP：{3}]上的VM[uuid：{0}]，将尝试停止它。

# at: src/main/java/org/zstack/compute/host/HostBase.java:841
# args: 
host\ is\ connecting,\ ping\ failed = 物理机正在连接, 不能进行ping操作

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:63
# args: host.getUuid()
mock\ power\ off\ host[%s]\ by\ ipmi\ failed. = 通过IPMI模拟物理机[{0}]断电失败。

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:79
# args: host.getUuid()
power\ off\ host[%s]\ by\ ipmi\ failed. = 通过IPMI关闭物理机[{0}]失败。

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:121
# args: host.getUuid()
mock\ power\ on\ host[%s]\ by\ ipmi\ failed. = 通过IPMI模拟物理机[{0}]上的电源失败。

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:131
# args: host.getUuid()
power\ on\ host[%s]\ by\ ipmi\ failed. = 通过IPMI打开物理机[{0}]电源失败。

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:161
# args: host.getUuid()
mock\ power\ reset\ host[%s]\ by\ ipmi\ failed. = 通过IPMI模拟电源重置物理机[{0}]失败。

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:171
# args: host.getUuid()
power\ reset\ host[%s]\ by\ ipmi\ failed. = 通过IPMI对物理机[{0}]进行电源重置失败。

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:192
# args: 
ipmi\ information\ is\ not\ complete. = IPMI信息不完整。

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:205
# args: ipmi.getUuid(),rst.getStderr()
host[%s]\ can\ not\ connect\ ipmi[%s],\ because\:%s = 物理机[{0}]无法连接IPMI[{1}]，因为：{2}

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:202
# args: ipmi.getUuid()
host[%s]\ got\ unexpected\ return\ value = 物理机[{0}]获得意外的返回值

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:222
# args: ipmi.getIpmiAddress(),rst.getStderr()
host\ ipmi[%s]\ is\ not\ reachable.because\ %s = 无法访问物理机IPMI[{0}]。原因是{1}

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:264
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ managementIp[%s] = 已经存在一个管理IP是[{0}]的物理机

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:270
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ existing = 群集[uuid：{0}]不存在

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:364
# args: vo.getName(),vo.getManagementIp()
after\ connecting,\ host[name\:%s,\ ip\:%s]\ returns\ a\ null\ architecture = 连接后，物理机[名称：{0}，IP：{1}]返回空体系结构

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:379
# args: vo.getClusterUuid(),cluster.getArchitecture(),vo.getName(),vo.getManagementIp(),arch
cluster[uuid\:%s]'s\ architecture\ is\ %s,\ not\ match\ the\ host[name\:%s,\ ip\:%s]\ architecture\ %s = 群集[uuid：{0}]的体系结构为{1}，与物理机[名称：{2}，IP：{3}]的体系结构{4}不匹配

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:515
# args: msg.getCancellationApiId()
no\ running\ api[%s]\ task\ on\ hosts = 物理机上没有正在运行的API[{0}]任务

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:733
# args: d.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ becomes\ disconnected,\ the\ host\ has\ no\ connected\ primary\ storage\ attached = 主存储[uuid:{0}]失联，物理机没有关联的主存储

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:59
# args: nameips.stream().map( it -> it.get(1, String.class) + "/" + it.get(0, String.class)).collect(Collectors.joining(", "))
host(s)\ [%s]\ is\ not\ Connected,\ not\ support\ to\ power\ off = 物理机[{0}]未连接，不支持关机

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:67
# args: ipAddress
invalid\ ip\ address\ format[%s] = IP地址格式[{0}]无效

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:71
# args: netmask
invalid\ netmask\ format[%s] = 网络掩码格式[{0}]无效

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:75
# args: 
invalid\ ip\ set,\ it\ must\ be\ set\ with\ netmask = 设置的IP无效，必须使用网络掩码进行设置

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:91
# args: 
cannot\ set\ ip\ on\ interface\ corresponding\ to\ the\ management\ network = 无法在与管理网络对应的接口上设置IP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:192
# args: 
cannot\ set\ ip\ which\ has\ been\ set\ on\ the\ other\ interfaces = 无法设置已在其他接口上设置的IP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:126
# args: 
cannot\ set\ ip\ on\ bonding\ slaves = 无法在绑定从属服务器上设置IP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:203
# args: 
cannot\ set\ ip\ on\ bridge\ slaves = 无法在网桥从属服务器上设置IP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:151
# args: msg.getInterfaceUuid()
invalid\ interface\ uuid = 接口uuid无效

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:168
# args: 
cannot\ set\ ip\ on\ bonding\ corresponding\ to\ the\ management\ network = 无法在与管理网络对应的绑定上设置IP

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:213
# args: msg.getBondingUuid()
invalid\ bonding\ uuid = 绑定uuid无效

# at: src/main/java/org/zstack/compute/host/HostNetworkInterfaceStateAllocatorFlow.java:141
# args: 
no\ available\ network\ interface\ on\ the\ host\ to\ start\ the\ vm = 物理机上没有可用于启动云主机的网络接口

# at: src/main/java/org/zstack/compute/host/HostSecurityLevelAllocatorFilterExtensionPoint.java:68
# args: 
vm\ security\ level\ not\ consistent\ with\ vms\ running\ on\ host = 云主机安全级别与物理机上运行的云主机不一致

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:280
# args: host.getUuid(),host.getName(),host.getState()
host[uuid\:%s,\ name\:%s]\ is\ in\ state[%s],\ cannot\ perform\ required\ operation = 物理机[uuid:{0}, name:{1}]处于状态[{2}]中，不能处理该请求

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:917
# args: ret.getError()
operation\ error,\ because\ %s = 操作错误，因为{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:370
# args: l3Uuid,msg.getHostUuid()
failed\ to\ allocate\ pci\ device\ for\ l3[uuid\:%s]\ on\ host[uuid\:%s] = 无法为物理机[uuid：{1}]上的L3[uuid：{0}]分配PCI设备

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:622
# args: msg.getNetworkInterfaceName(),msg.getHostUuid()
networkInterface[name\:%s]\ of\ host[uuid\:%s]\ can\ not\ find = 找不到物理机[uuid：{1}]的网络接口[名称：{0}]

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:805
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
only\ support\ do\ live\ snapshot\ on\ vm\ state[%s],\ but\ vm\ is\ on\ [%s]\ state = 仅支持在VM状态[{0}]上执行实时快照，但VM处于[{1}]状态

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:1389
# args: ret.getError()
sync\ vm\ port\ config\ failed\:\ %s = 同步云主机端口配置失败：{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:1423
# args: ret.getError()
set\ vm\ hostname\ failed\:\ %s = 设置VM物理机名失败：{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBaseFactory.java:84
# args: huuid,cidr
host[uuid\:%s]\ has\ multi\ ips\ in\ cidr[%s] = 物理机[uuid：{0}]在CIDR[{1}]中具有多个IP

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:1058
# args: msg.getHostUuid()
host[uuid\:%s]\ can\ not\ find = 找不到物理机[uuid：{0}]

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:408
# args: rsp.getError()
failed\ to\ update\ interface\ ip,\ because\ %s = 无法更新接口IP，因为{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:510
# args: rsp.getError()
failed\ to\ update\ bonding\ ip,\ because\ %s = 无法更新绑定IP，因为{0}

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:1024
# args: clusterUuids,hypervisorType
cluster[uuids\:%s,\ hypervisorType\:%s]\ are\ not\ exist! = 群集[uuid：{0}，HypervisorType：{1}]不存在！

# at: src/main/java/org/zstack/compute/ovs/VSwitchOvsManagerImpl.java:72
# args: newValue
ovs\ cpu\ pinning\ resource\ config\:[%s]\ format\ error. = OVS CPU固定资源配置：[{0}]格式错误。

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:136
# args: msg.getVmNicUuid()
vm\ nic[uuid\:%s]\ doesn't\ exist = VM NIC[uuid：{0}]不存在

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:77
# args: VmVfNicConstant.SRIOVABLE_L2_NETWORK_TYPES
only\ %s\ support\ sriov = 仅{0}支持SRIOV

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:83
# args: L2NetworkConstant.VSWITCH_TYPE_OVS_DPDK
%s\ don't\ support\ sriov = {0}不支持SRIOV

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:93
# args: l3Uuid
L3\ Network\ [uuid\:%s]\ doesn't\ exist = 三层网络[uuid：{0}]不存在

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:97
# args: l2Uuid,l3Uuid
related\ l2\ network[uuid\:%s]\ of\ l3\ network[uuid\:%s]\ is\ not\ sriov\ enabled = 三层网络[uuid：{1}]的相关二层网络[uuid：{0}]未启用SRIOV

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:140
# args: msg.getVmNicUuid(),msg.getVmNicType()
vm\ nic[uuid\:%s]\ is\ already\ of\ type\ %s,\ no\ need\ to\ change = VM NIC[uuid：{0}]已属于类型{1}，无需更改

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:146
# args: 
change\ vm\ nic\ type\ only\ when\ the\ vm\ is\ stopped = 仅在VM停止时更改VM NIC类型

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:190
# args: 
cant\ not\ change\ vf\ nic\ to\ normal\ type = 无法将VF NIC更改为正常类型

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:197
# args: 
cant\ not\ change\ nic\ to\ vf\ type = 无法将NIC更改为VF类型

# at: src/main/java/org/zstack/compute/sriov/VmVfNicFilterFlow.java:89
# args: 
no\ candidate\ host\ with\ enough\ vf\ nic\ pci\ devices = 没有具有足够VF NIC PCI设备的候选物理机

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:275
# args: vmType
enableSRIOV\ tag\ is\ not\ supported\ for\ vm\ type\ [%s] = 云主机类型[{0}]不支持EnableSriov标记

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:476
# args: vmUuid
vm[uuid\:%s]\ needs\ to\ be\ running\ when\ attach\ vf\ nics,\ but\ no\ hostUuid\ found = 连接VF NIC时需要运行VM[uuid：{0}]，但未找到HOSTuuid

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:499
# args: hostUuid,l3Uuid
cannot\ find\ available\ vf\ nic\ pci\ device\ on\ host[uuid\:%s]\ for\ l3[uuid\:%s] = 对于L3[uuid：{1}]，在物理机[uuid：{0}]上找不到可用的VF NIC PCI设备

# at: src/main/java/org/zstack/compute/sriov/VmVfNicReserveFlow.java:88
# args: hostUuid,vmUuid
reserve\ pci\ address\ for\ on\ host[uuid]\ for\ vm\ [uuid\:%s]\ failed, = 在物理机[uuid]上为云主机[uuid：{0}]保留的PCI地址失败，

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java:49
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ delete\ vHost\ User\ Client\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = 无法删除云主机[uuid：{1}]的物理机[uuid：{0}]中的vhost用户客户端：{2}

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java:85
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ generate\ vHost\ User\ Client\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = 无法在物理机[uuid：{0}]中为VM[uuid：{1}]生成vhost用户客户端：{2}

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicManagerImpl.java:309
# args: inv.getUuid(),destHostUuid
cannot\ generate\ vhost\ user\ client\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = 无法为目标物理机[uuid：{1}]上的云主机[uuid：{0}]生成vhost用户客户端

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:66
# args: VmVdpaNicConstant.VDPA_L2_NETWORK_TYPES
only\ %s\ support\ vdpa = 仅{0}支持VDPA

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:106
# args: l2Vo.getvSwitchType(),l2Vo.getPhysicalInterface()
can\ not\ create\ %s\ with\ physical\ interface\:[%s]\ which\ was\ already\ been\ used\ by\ another\ vSwitch\ type. = 无法创建物理接口为[{1}]的{0}，该接口已由另一个vSwitch类型使用。

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:131
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ do\ not\ support\ ovs-dpdk = 群集[uuid：{0}]不支持OVS-DPDK

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:147
# args: l2NicName,hostUuid,l2NicName
physical\ interface[%s]\ in\ host[uuid\:%s]\ is\ not\ sriov\ virtualized,\ please\ perform\ sriov\ cutting\ operation\ on\ physical\ interface[%s]. = 物理机[uuid：{1}]中的物理接口[{0}]未进行SRIOV虚拟化，请对物理接口[{2}]进行SRIOV裁剪操作。

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java:49
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ delete\ vdpas\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = 无法删除物理机[uuid：{0}]中VM[uuid：{1}]的VDPA：{2}

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java:86
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ generate\ vdpas\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = 无法在物理机[uuid：{0}]中为VM[uuid：{1}]生成VDPA：{2}

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:650
# args: hostUuid,l3Uuid
cannot\ find\ available\ vdpa\ nic\ pci\ device\ on\ host[uuid\:%s]\ for\ l3[uuid\:%s] = 在物理机[uuid：{0}]上找不到可用于L3[uuid：{1}]的VDPA NIC PCI设备

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:263
# args: vmUuid
vm[uuid\:%s]\ needs\ to\ be\ running\ when\ attach\ vdpa\ nics,\ but\ no\ hostUuid\ found = 连接VDPA NIC时需要运行VM[uuid：{0}]，但未找到HOSTuuid

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:688
# args: inv.getUuid(),destHostUuid
cannot\ generate\ vdpa\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = 无法为目标物理机[uuid：{1}]上的云主机[uuid：{0}]生成VDPA

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:835
# args: 
no\ candidate\ host\ with\ enough\ vdpa\ resource = 没有具有足够VDPA资源的候选物理机

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:63
# args: 
not\ dest\ host\ found\ in\ db,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = 没有在物理机上发现数据库，不能发送更改密码的指令到这个物理机上

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:64
# args: 
not\ account\ preference\ found,\ \ send\ change\ password\ cmd\ to\ the\ host! = 没有优先级账户去发送改变密码的指令到物理机

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:160
# args: srcPath,getManagementServerId()
fail\ to\ attach\ virtio\ driver\ because\ read\ md5\ of\ file[%s]\ fail\ in\ mn[uuid\:%s]\:\ file\ not\ found\ on\ classpath = 无法附加virtio驱动程序，因为在Mn[uuid：{1}]中读取文件[{0}]的MD5失败：在类路径中找不到文件

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:172
# args: srcPath,getManagementServerId(),e.getMessage()
fail\ to\ attach\ virtio\ driver\ because\ read\ md5\ of\ file[%s]\ fail\ in\ mn[uuid\:%s]\:\ %s = 无法附加virtio驱动程序，因为在Mn[uuid：{1}]中读取文件[{0}]的MD5失败：{2}

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:167
# args: srcPath,getManagementServerId()
fail\ to\ attach\ virtio\ driver\ because\ of\ invalid\ md5\ of\ file[%s]\ in\ mn[uuid\:%s] = 无法附加virtio驱动程序，因为Mn[uuid：{1}]中文件[{0}]的MD5无效

# at: src/main/java/org/zstack/compute/vm/CheckIfCreateTemporaryTemplateFlow.java:105
# args: spec.getDataVolumeRequiredHostUuids()
only\ host(s)[uuid(s)\:\ %s]\ can\ access\ data\ volume. = 只有物理机[uuid：{0}]可以访问数据云盘。

# at: src/main/java/org/zstack/compute/vm/CpuTopology.java:71
# args: cpuNum,cpuSockets,cpuCores,cpuThreads,socketNum,coreNum,threadNum
cpu\ topology\ is\ not\ correct,\ cpuNum[%s],\ configured\ cpuSockets[%s],\ cpuCores[%s],\ cpuThreads[%s];\ Calculated\ cpuSockets[%s],\ cpuCores[%s],\ cpuThreads[%s] = CPU拓扑结构不正确，cpunum[{0}]，已配置的cpusockets[{1}]，cpuCore[{2}]，cpuThreads[{3}]。计算的CPU套接字[{4}]，CPU核心[{5}]，CPU线程[{6}]

# at: src/main/java/org/zstack/compute/vm/IsoOperator.java:40
# args: vmUuid,isoUuid
VM[uuid\:%s]\ has\ attached\ ISO[uuid\:%s] = 云主机[uuid:{0}]已经加载了ISO[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/IsoOperator.java:48
# args: vmUuid
All\ vm[uuid\:%s]\ CD-ROMs\ have\ mounted\ ISO = 所有VM[uuid：{0}]CD-ROM都已装载ISO

# at: src/main/java/org/zstack/compute/vm/KvmUserVmVirtIODriverExtension.java:142
# args: driverFormat
invalid\ virtio\ driver\ device\ format\:\ %s = 无效的virtio驱动程序设备格式：{0}

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:77
# args: mac
This\ is\ not\ a\ valid\ MAC\ address\ [%s] = 这是一个无效的MAC地址

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:87
# args: mac
Not\ a\ valid\ MAC\ address\ [%s] = 这是一个无效的MAC地址[{0}]

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:90
# args: 
Disallowed\ address = 不被允许的MAC地址

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:93
# args: mac
Expected\ unicast\ mac\ address,\ found\ multicast\ MAC\ address\ [%s] = 期望的是一个单播的MAC地址，但找到的是一个组播的MAC地址[{0}]

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:251
# args: 
state\ of\ vm[uuid\:%s]\ is\ not\ in\ Running\ state,\ can\ not\ sync\ clock = VM[uuid：{0}]的状态未处于运行状态，无法同步时钟

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:442
# args: 
hot\ plug\ is\ not\ turned\ off,can\ not\ open\ vm\ numa = 热插拔未关闭，无法打开VM NUMA

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:609
# args: self.getUuid()
vm[uuid\:\ %s]'s\ state\ is\ not\ Stopped\ now,\ cannot\ operate\ 'changevmimage'\ action = VM[uuid：{0}]的状态现在未停止，无法执行“ ChangeVMImage ”操作

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:662
# args: self.getUuid()
vm[uuid\:%s]\ cluster\ uuid\ is\ null,\ cannot\ change\ image\ for\ it = VM[uuid：{0}]群集uuid为空，无法更改其镜像

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:675
# args: self.getUuid(),self.getClusterUuid()
vm[uuid\:%s]\ is\ in\ cluster[uuid\:%s],\ but\ there\ is\ no\ available\ host\ in\ the\ cluster,\ cannot\ change\ image\ for\ the\ vm = 云主机[uuid：{0}]位于集群[uuid：{1}]中，但集群中没有可用的物理机，无法更改云主机的镜像

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:967
# args: vivo.getRootVolumeUuid(),vivo.getRootVolume().getPrimaryStorageUuid(),msg.getPrimaryStorageUuidForRootVolume()
cannot\ find\ backupStorage\ for\ volume[uuid\:\ %s,\ psUuid\:\ %s],\ required\ primary\ storage\ uuid\:%s = 找不到卷[uuid：{0}，PSuuid：{1}]的BackupStorage，所需的主存储uuid为{2}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1152
# args: vol.getPrimaryStorageUuid(),requiredPsUuid
can\ not\ find\ backup\ storage,\ unable\ to\ commit\ volume\ snapshot[psUuid\:%s]\ as\ image,\ destination\ required\ PS\ uuid\:%s = 找不到备份存储，无法将卷快照[PSuuid：{0}]作为镜像提交，目标需要PS uuid：{1}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2052
# args: 
direction\ must\ be\ set\ to\ in\ or\ out = 方法必须设置in或者out

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2132
# args: struct.inboundBandwidthUpthreshold
inboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = 下行带宽不能超过{0}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2142
# args: struct.outboundBandwidthUpthreshold
outboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = 上行带宽不能超过{0}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2199
# args: self.getUuid()
vm\ [%s]'\ state\ must\ be\ Running\ or\ Paused\ to\ sync\ nic\ qos = VM[{0}]状态必须为“正在运行”或“已暂停”才能同步NIC QoS

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2204
# args: 
vm\ [%s]'s\ HostUuid\ is\ null,\ cannot\ sync\ nic\ qos = VM[{0}]的Hostuuid为空，无法同步NIC QoS

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2661
# args: amsg.getVmInstanceUuid()
not\ dest\ host\ found\ in\ db\ by\ uuid\:\ %s,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = 没有在物理机{0}上发现数据库，不能发送更改密码的指令到这个物理机上

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2691
# args: 
state\ is\ not\ correct\ while\ change\ password. = 该状态不支持修改密码

# at: src/main/java/org/zstack/compute/vm/VmAllocateCdRomFlow.java:56
# args: spec.getVmInventory().getUuid()
vm[uuid\:%s]\ cdRom\ deviceId\ repetition = VM[uuid：{0}]CDROM DeviceID重复

# at: src/main/java/org/zstack/compute/vm/VmAllocateHostAndPrimaryStorageFlow.java:69
# args: imageUuid,cachedPsUuids
creation\ rely\ on\ image\ cache[uuid\:%s,\ locate\ ps\ uuids\:\ [%s]],\ cannot\ create\ other\ places. = 创建依赖于镜像缓存[uuid：{0}，定位PS uuid：[{1}]]，无法创建其他位置。

# at: src/main/java/org/zstack/compute/vm/VmAllocateNicIpFlow.java:83
# args: v.getL3Invs().get(0).getUuid()
there\ is\ no\ available\ ipRange\ on\ L3\ network\ [%s] = 三层网络[{0}]中没有可用的网络段

# at: src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java:50
# args: spec.getVmInventory().getUuid()
\ Can\ not\ find\ the\ vm's\ host,\ please\ start\ the\ vm[%s],\ then\ mount\ the\ disk = 未找到云主机的物理机，请重启云主机[{0}]，然后挂载云盘

# at: src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java:68
# args: iso.getUuid(),host.getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ iso[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ running\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = 不能发现iso[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \n1. 镜像服务器是否已经挂载到区域中的任何运行状态的云主机[name: {2}, uuid:{3}]上；\n2. 如果镜像服务器不是处于连接状态，请尝试重连

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:713
# args: msg.getVmInstanceUuid(),msg.getIsoUuid()
VM[uuid\:%s]\ already\ has\ an\ ISO[uuid\:%s]\ attached = 云主机[uuid:{0}]已经挂载了ISO[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:169
# args: 
either\ l3NetworkUuids\ or\ backupStorageUuid\ must\ be\ set = 必须设置L3Networkuuid或BackupStorageuuid

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:205
# args: msg.getVmInstanceUuid(),state
unable\ to\ change\ to\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = 无法更改为三层网络。VM[uuid：{0}]未运行或已停止。当前状态为{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:211
# args: msg.getDestL3NetworkUuid()
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ doesn't\ has\ have\ ip\ range = 无法更改为三层网络。三层网络[uuid：{0}]没有IP范围

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:221
# args: newAddedL3Uuids,l2Uuids
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ different\ l2\ networks\ [uuids\:%s] = 无法更改为三层网络。三层网络[uuid：{0}]属于不同的二层网络[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:228
# args: newAddedL3Uuids,l2Uuids
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ l2\ networks\ [uuids\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = 无法更改为三层网络。三层网络[uuid：{0}]属于尚未连接到任何群集的二层网络[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:240
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = 无法更改为三层网络。三层网络[uuid：{0}]已连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:247
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ change\ to\ a\ non-guest\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = 无法更改为非来宾三层网络。三层网络[uuid：{0}]已连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:255
# args: l3Uuid
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = 无法更改为三层网络。三层网络[uuid：{0}]已禁用

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:258
# args: l3Uuid
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = 无法更改为三层网络。三层网络[uuid：{0}]是系统网络，VM是用户VM

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:942
# args: staticIp,l3Uuid
the\ static\ IP[%s]\ is\ not\ in\ any\ IP\ range\ of\ the\ L3\ network[uuid\:%s] = 该静态IP[{0}]不在三层网络[uuid:{1}]的任何IP段

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:949
# args: staticIp,l3Uuid
the\ static\ IP[%s]\ has\ been\ occupied\ on\ the\ L3\ network[uuid\:%s] = 该静态IP[{0}]已经存在在三层网络[uuid:{1}]中

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:912
# args: e.getKey(),newAddedL3Uuids
static\ ip\ l3\ uuid[%s]\ is\ not\ included\ in\ nic\ l3\ [%s] = 静态IP的三层网络[uuid:{0}]不在网卡的L3列表[uuid:{1}]中

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:373
# args: image.getName(),image.getUuid()
the\ image[name\:%s,\ uuid\:%s]\ is\ an\ ISO,\ rootDiskSize\ must\ be\ set = 镜像[name:{0}, uuid:{1}]是一个IOS, 必须设置云盘大小

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:383
# args: msg.getVmInstanceUuid(),vo.getState().toString()
Can\ not\ create\ CD-ROM\ for\ vm[uuid\:%s]\ which\ is\ in\ state[%s]\  = 无法为处于状态[{1}]的VM[uuid：{0}]创建CD-ROM

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:391
# args: vo.getPlatform()
Current\ platform\ %s\ not\ support\ update\ nic\ driver\ yet = 当前平台{0}尚不支持更新NIC驱动程序

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:407
# args: 
rootDiskSize\ is\ needed\ when\ image\ media\ type\ is\ ISO = 当镜像类型是ISO时云盘大小需要设置

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:419
# args: msg.getVmInstanceUuid(),msg.getHostUuid()
the\ vm[uuid\:%s]\ is\ already\ on\ host[uuid\:%s] = 云主机[uuid:{0}]已经运行于物理机[uuid:{1}]上

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:436
# args: 
the\ VM\ cannot\ do\ online\ cpu/memory\ update\ because\ of\ disabling\ Instance\ Offering\ Online\ Modification.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu/memory\ update\ again = 云主机无法执行在线升级CPU/内存，因为未启用计算规格在线修改。请关闭该云主机再尝试

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:495
# args: vo.getUuid(),vo.getState(),StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), ",")
The\ state\ of\ vm[uuid\:%s]\ is\ %s.\ Only\ these\ state[%s]\ is\ allowed\ to\ update\ cpu\ or\ memory. = 云主机[uuid:{0}]的状态为{1}。只有这些状态[{2}]允许在线升级CPU/内存

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:452
# args: vo.getUuid()
can't\ decrease\ capacity\ when\ vm[uuid\:%s]\ is\ running = 无法在云主机[uuid:{0}]运行时减少容量

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:482
# args: 
the\ VM\ cannot\ do\ cpu\ hot\ plug\ because\ of\ disabling\ cpu\ hot\ plug.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu\ hot\ plug\ again = 云主机无法执行在线添加CPU，因为未启用CPU热插拔。请关闭该云主机再尝试

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:488
# args: 
the\ VM\ cannot\ do\ memory\ hot\ plug\ because\ of\ disabling\ memory\ hot\ plug.\ Please\ stop\ the\ VM\ then\ do\ the\ memory\ hot\ plug\ again = 云主机无法执行在线添加内存，因为未启用内存热插拔。请关闭该云主机再尝试

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:506
# args: vo.getUuid()
can't\ decrease\ cpu\ of\ vm[uuid\:%s]\ when\ it\ is\ running = 无法在云主机[uuid:{0}]运行时减少CPU数目

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:512
# args: vo.getUuid()
can't\ decrease\ memory\ size\ of\ vm[uuid\:%s]\ when\ it\ is\ running = 无法在云主机[uuid:{0}]运行时减少容量

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:523
# args: 
either\ l3NetworkUuids\ or\ imageUuid\ must\ be\ set = 三层网络的uuid们或者镜像的uuid必须被设置

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:538
# args: ip
%s\ is\ not\ a\ valid\ IPv4\ address = {0}不是有效的IPv4地址

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:576
# args: ip,vmNicVO.getUuid()
ip\ address\ [%s]\ already\ set\ to\ vmNic\ [uuid\:%s] = IP地址[{0}]已经设置到网卡[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:557
# args: ip,rangeVO.getNetworkCidr()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [%s] = IP地址[{0}]不在IP地址段[{1}]范围内

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:566
# args: ip
%s\ is\ not\ a\ valid\ IPv6\ address = {0}不是有效的IPv6地址

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:584
# args: ip,rangeVO.getStartIp(),rangeVO.getEndIp()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [startIp\ %s,\ endIp\ %s] = IP地址[{0}]不在IP地址段[{1}-{2}]范围内

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:595
# args: 
could\ not\ set\ ip\ address,\ due\ to\ no\ ip\ address\ is\ specified = 无法设置IP地址，因为未指定IP地址

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:610
# args: msg.getIp()
static\ ip\ [%s]\ format\ error = 静态IP[{0}]格式错误

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:622
# args: 
ipv4\ address\ need\ a\ netmask = IPv4地址需要网络掩码

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:640
# args: msg.getIp6()
ip\ address\ [%s]\ already\ set\ to\ vmNic = IP地址[{0}]已设置为vmnic

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:634
# args: 
ipv6\ address\ need\ a\ prefix = IPv6地址需要前缀

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:654
# args: msg.getVmInstanceUuid(),msg.getL3NetworkUuid()
the\ VM[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = 云主机[uuid:{0}]在三层网络[uuid:{1}]上没有任何网卡

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:661
# args: msg.getStaticIp(),msg.getVmInstanceUuid()
could\ not\ delete\ static\ ip\ [%s]\ for\ vm\ [uuid\:%s]\ because\ it\ doesn't\ existed = 无法删除VM[uuid：{1}]的静态IP[{0}]，因为它不存在

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:673
# args: o,msg.getBootOrder()
invalid\ boot\ device[%s]\ in\ boot\ order%s = 在启动列表{1}中的设备[{0}]启动失败

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:696
# args: 
boot\ volume\ cannot\ be\ shareable. = 启动卷无法共享。

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:700
# args: msg.getVolumeUuid(),msg.getVmInstanceUuid()
volume[uuid\:%s]\ must\ be\ attached\ to\ vm[uuid\:%s] = 卷[uuid：{0}]必须连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:705
# args: msg.getVmInstanceUuid()
the\ vm\ %s\ with\ memory\ snapshots\ do\ not\ support\ setting\ boot\ volume = 具有内存快照的云主机{0}不支持设置启动卷

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:718
# args: type
Unsupported\ Image\ Media\ Type\:\ [%s]\  = 不支持的镜像媒体类型：[{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:733
# args: cdRomUuid
The\ cdRom[uuid\:%s]\ does\ not\ exist = CDROM[uuid：{0}]不存在

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:737
# args: msg.getVmInstanceUuid(),cdRomUuid
VM[uuid\:%s]\ cdRom[uuid\:%s]\ has\ mounted\ the\ ISO = VM[uuid：{0}]CDROM[uuid：{1}]已装载ISO

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:755
# args: msg.getVmInstanceUuid()
VM[uuid\:%s]\ has\ multiple\ ISOs\ attached,\ specify\ the\ isoUuid\ when\ detaching = 云主机[uuid:{0}]已经加载了多个ISO，卸载ISO时需要指定isoUuid

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:863
# args: l3Uuid
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = 不能挂载三层网络，因为该三层网络[uuid:{0}]处于未启动状态

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:813
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = 无法挂载三层网络。云主机[uuid: {0}]既不处于Running也不处于Stopped状态中，当前状态为{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:819
# args: msg.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ doesn't\ has\ have\ ip\ range = 无法连接三层网络。三层网络[uuid：{0}]没有IP范围

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:829
# args: newAddedL3Uuids,l2Uuids
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ different\ l2\ networks\ [uuids\:%s] = 不能挂载三层网络，三层网络[uuid:{0}]属于不同的二层网络

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:836
# args: newAddedL3Uuids,l2Uuids
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ l2\ networks\ [uuids\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = 无法连接三层网络。三层网络[uuid：{0}]属于尚未连接到任何群集的二层网络[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:848
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = 不能挂载三层网络，三层网络[uuid:{0}]已经挂载到云主机[uuid: {1}]上了

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:855
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ attach\ a\ non-guest\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = 无法连接非来宾三层网络。三层网络[uuid：{0}]已连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:866
# args: l3Uuid
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = 不能连接三层网络。这个三层网络[uuid:{0}]是系统网络，但云主机是一个用户云主机

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1300
# args: e.getMessage()
invalid\ json\ format,\ causes\:\ %s = 无效的JSON格式，原因：{0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:986
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ the\ nic.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = 无法连接NIC。VM[uuid：{0}]未运行或已停止。当前状态为{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:993
# args: vmNicVO.getVmInstanceUuid()
unable\ to\ attach\ the\ nic.\ The\ nic\ has\ been\ attached\ with\ vm[uuid\:\ %s] = 无法连接NIC。已使用VM[uuid：{0}]连接NIC

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1004
# args: vmNicVO.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = 无法连接NIC。其三层网络[uuid：{0}]已连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1009
# args: vmNicVO.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ the\ nic\ with\ a\ non-guest\ L3\ network.\ Its\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = 无法将NIC连接到非来宾三层网络。其三层网络[uuid：{0}]已连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1018
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ disabled = 无法连接NIC。其三层网络[uuid：{0}]已禁用

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1021
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = 无法连接NIC。其三层网络[uuid：{0}]是系统网络，VM是用户VM

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1028
# args: l3NetworkVO.getL2NetworkUuid()
unable\ to\ attach\ the\ nic.\ Its\ l2\ network\ [uuid\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = 无法连接NIC。其二层网络[uuid：{0}]尚未连接到任何群集

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1037
# args: msg.getVmNicUuid(),nicVO.getType()
could\ not\ update\ nic[uuid\:\ %s]\ state,\ due\ to\ nic\ type[%s]\ not\ support = 无法更新NIC[uuid：{0}]状态，因为不支持NIC类型[{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1043
# args: msg.getVmNicUuid()
could\ not\ update\ nic[uuid\:\ %s]\ state,\ due\ to\ vm\ not\ support = 无法更新NIC[uuid：{0}]状态，因为VM不支持

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1060
# args: vmUuid,state
unable\ to\ detach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = 不能卸载三层网络，云主机[uuid: {0}]不是运行状态或者暂停状态，状态为{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1075
# args: msg.getVmInstanceUuid(),state
vm[uuid\:%s]\ can\ only\ attach\ volume\ when\ state\ is\ Running\ or\ Stopped,\ current\ state\ is\ %s = 云主机[uuid:{0}]挂载盘时状态只能是运行或者暂停状态，而现在的状态是{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1083
# args: 
image\ mediaType\ is\ ISO\ but\ missing\ root\ disk\ settings = 镜像媒体类型为ISO，但缺少根磁盘设置

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1087
# args: 
Unexpected\ root\ disk\ settings = 意外的根磁盘设置

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1154
# args: 
Unexpected\ data\ disk\ settings.\ dataDiskSizes\ need\ to\ be\ greater\ than\ 0 = 意外的数据磁盘设置。DataDiskSizes需要大于0

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1206
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ platform\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = 至少应设置消息或镜像[uuid：{0}]中的一个字段平台

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1210
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ guestOsType\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = 至少应设置邮件或镜像[uuid：{0}]中的一个字段GuestOsType

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1214
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ architecture\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = 至少应设置消息或镜像[uuid：{0}]中的一个字段体系结构

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1249
# args: 
cannot\ create\ vm\ instance\ from\ a\ shareable\ volume. = 无法从可共享云盘创建VM实例。

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1253
# args: 
could\ not\ create\ vm\ instance\ from\ a\ attached\ volume. = 无法从连接的卷创建VM实例。

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1257
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ could\ not\ satisfy\ conditions[state\:Enabled\ status\:Ready] = 卷[uuid：{0}]无法满足条件[状态：已启用状态：就绪]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1293
# args: 
l3NetworkUuids\ and\ vmNicInventories\ mustn't\ both\ be\ empty\ or\ both\ be\ set = l3NetworkUuids和vmnicinventory不能同时为空或同时设置

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1415
# args: cdRomIsoUuid
The\ image[uuid\=%s]\ does\ not\ exist = 镜像[uuid={0}]不存在

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1420
# args: 
Do\ not\ allow\ to\ mount\ duplicate\ ISO = 不允许装载重复的ISO

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1435
# args: 
The\ console\ password\ cannot\ start\ with\ 'password'\ which\ may\ trigger\ a\ VNC\ security\ issue = 控制台密码不能以password开头，这样可能导致一个VNC安全问题

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1440
# args: 
can\ not\ call\ this\ api\ because\ it's\ Deprecated = 无法调用此API，因为它已被弃用

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1457
# args: vmCdRomVO.getUuid()
The\ CdRom[%s]\ Already\ the\ default = CDROM[{0}]已经是默认的

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:271
# args: vo.getUuid(),vo.getName()
vm[uuid\:%s,\ name\:%s]\ has\ been\ deleted = 云主机[uuid:{0}, name:{1}]已经被删除了

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:595
# args: vmInv.getUuid(),vmInv.getHostUuid(),reply.getError()
failed\ to\ check\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s],\ %s = 无法检查物理机[uuid：{1}]上的VM[uuid：{0}]的状态，{2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:602
# args: vmInv.getUuid(),vmInv.getHostUuid()
got\ an\ unrecognized\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s] = 物理机[uuid：{1}]上的VM[uuid：{0}]的状态无法识别

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:984
# args: self.getUuid(),l3Uuid
the\ vm[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = 云主机[uuid:{0}] 没有网卡在三层网络[uuid:{1}]上

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:1382
# args: 
the\ vm\ has\ been\ deleted = 云主机已经被删除了

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3758
# args: msg.getUuid()
VM[uuid\:%s]\ state\ is\ not\ Running. = VM[uuid：{0}]状态未运行。

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:4837
# args: isoUuid,psUuid,self.getName(),self.getUuid()
the\ ISO[uuid\:%s]\ is\ on\ backup\ storage\ that\ is\ not\ compatible\ of\ the\ primary\ storage[uuid\:%s]\ where\ the\ VM[name\:%s,\ uuid\:%s]\ is\ on = ISO[uuid:{0}]在镜像服务器上，这个ISO不能兼容主存储[uuid:{1}]在云主机[name:{2}, uuid:{3}]上

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:5325
# args: self.getHostUuid(),cpuNum - oldCpuNum,struct.alignedMemory - oldMemorySize
host[uuid\:%s]\ capacity\ is\ not\ enough\ to\ offer\ cpu[%s],\ memory[%s\ bytes] = 物理机[uuid:{0}]无法提供CPU: [{1}]，内存: [{2} bytes]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:5633
# args: isoUuid,self.getUuid()
ISO[uuid\:%s]\ is\ not\ attached\ to\ VM[uuid\:%s] = ISO[uuid:{0}]未被加载到云主机[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:7168
# args: cdRomSpecs.size(),max
One\ vm\ cannot\ create\ %s\ CDROMs,\ vm\ can\ only\ add\ %s\ CDROMs = 一个VM无法创建{0}个CDROM，VM只能添加{1}个CDROM

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:8150
# args: msg.getVmInstanceUuid(),max
VM[uuid\:%s]\ can\ only\ add\ %s\ CDROMs = VM[uuid：{0}]只能添加{1}个CDROM

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:8219
# args: self.getUuid(),msg.getPriority(),reply.getError()
update\ vm[%s]\ priority\ to\ [%s]\ failed,because\ %s = 将云主机[{0}]的优先级更新为[{1}]失败，原因是{2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:65
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartNewCreatedVmExtensionPoint[%s]\ refuses\ to\ create\ vm[uuid\:%s]\ because\ %s = VmInstanceStartNewCreatedVmExtensionPoint[{0}] 因为{2} 拒绝创建云主机[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:192
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceRebootExtensionPoint[%s]\ refuses\ to\ reboot\ vm[uuid\:%s]\ because\ %s = VmInstanceRebootExtensionPoint[{0}] 因为{2} 拒绝重启云主机[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:234
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceDestroyVmExtensionPoint[%s]\ refuses\ to\ destroy\ vm[uuid\:%s]\ because\ %s = VmInstanceDestroyVmExtensionPoint[{0}] 因为{2} 拒绝删除云主机[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:284
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartExtensionPoint[%s]\ refuses\ to\ start\ vm[uuid\:%s]\ because\ %s = VmInstanceStartExtensionPoint[{0}] 因为{2} 拒绝启动云主机[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1136
# args: msg.getName()
could\ not\ create\ vm,\ a\ vm\ with\ the\ name\ [%s]\ already\ exists = 无法创建VM，已存在名为[{0}]的VM

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2245
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ create\ vm\ without\ image = 在不使用镜像的情况下创建VM时，RootDiskOfferInGuuid不能为空

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:308
# args: 
Spice\ certificate\ does\ not\ exist,\ Please\ check\ if\ spice\ tls\ is\ enabled = SPICE证书不存在，请检查是否启用了SPICE TLS

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:492
# args: msg.getImageUuid(),msg.getZoneUuid()
the\ image[uuid\:%s]\ is\ not\ on\ any\ backup\ storage\ that\ has\ been\ attached\ to\ the\ zone[uuid\:%s] = 镜像[uuid:{0}]不在任何加载到区域[uuid:{1}]的镜像服务器上

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:565
# args: bss.get(0).getUuid(),bss.get(0).getType()
no\ primary\ storage\ accessible\ to\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ is\ found = 未找到镜像服务器[uuid:{0}, type:{1}]可访问的主存储

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:586
# args: psUuids,zoneUuid
the\ primary\ storages[uuids\:%s]\ has\ not\ attached\ any\ cluster\ on\ the\ zone[uuid\:%s] = 主存储[uuids:{0}]尚未加载区域[uuid:{1}]上的任何集群

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:605
# args: psUuids
no\ l2Networks\ found\ in\ clusters\ that\ have\ attached\ to\ primary\ storages[uuids\:%s] = 在已加载到主存储[uuids:{0}]的集群中未找到二层网络

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:672
# args: image.getName(),image.getUuid()
zoneUuid\ must\ be\ set\ because\ the\ image[name\:%s,\ uuid\:%s]\ is\ on\ multiple\ backup\ storage = zoneUuid必须被设置，因为image[name:{0}, uuid:{1}]在多个镜像服务器上

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1067
# args: 
CreateVmInstanceMsg\ cannot\ be\ null = CreateVmInstanceMsg不能为空

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1158
# args: StringUtils.join(errorCodes.stream().map(ErrorCode::getDescription).collect(Collectors.toList()), ", ")
handle\ system\ tag\ fail\ when\ creating\ vm\ because\ [%s] = 由于[{0}]，在创建VM时处理系统标记失败

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1589
# args: tuple.get(0, String.class),tuple.get(1, String.class)
unable\ to\ enable\ this\ function.\ There\ are\ multi\ nics\ of\ L3\ network[uuid\:%s]\ in\ the\ vm[uuid\:\ %s] = 无法启用此功能。云主机[uuid：{1}]中存在多个三层网络[uuid：{0}]的NIC

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1623
# args: hostname,tag
hostname[%s]\ specified\ in\ system\ tag[%s]\ is\ not\ a\ valid\ domain\ name = 在系统标签[{1}]中特别声明的物理机名[{0}]不是一个有效的域名

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1635
# args: hostnameCount
only\ one\ hostname\ system\ tag\ is\ allowed,\ but\ %s\ got = 只允许通过系统标签设置一个物理机名，但是实际上有{0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1660
# args: ip,sysTag
%s\ is\ not\ a\ valid\ ip\ address.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = {0}不是有效的IP地址。请更正静态IP的系统标记[{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1666
# args: ip,l3Uuid,sysTag
IP[%s]\ is\ already\ used\ on\ the\ L3\ network[uuid\:%s].\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = IP[{0}]已在三层网络[uuid：{1}]上使用。请更正静态IP的系统标记[{2}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1683
# args: ip,l3Uuid,cr.getReason()
IP[%s]\ is\ not\ available\ on\ the\ L3\ network[uuid\:%s]\ because\:\ %s = 在三层网络[uuid:{1}]中，IP[{0}]不可用, 因为{2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1706
# args: tag,sameTag.getResourceUuid(),hostname,l3Uuid
conflict\ hostname\ in\ system\ tag[%s];\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = 系统标签的物理机名存在冲突[{0}]；已经存在以一个物理机名为[{2}]的VM[uuid:{1}]出现在三层网络[uuid:{3}]中

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1737
# args: o,order
invalid\ boot\ device[%s]\ in\ boot\ order[%s] = 在引导顺序[{1}]中存在无效的引导设备[{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1753
# args: 
cpuSockets\ must\ be\ an\ integer = CPUSockets必须为整数

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1762
# args: 
cpuCores\ must\ be\ an\ integer = cpucores必须为整数

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1771
# args: 
cpuThreads\ must\ be\ an\ integer = CPUThreads必须为整数

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1782
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ vm[uuid\:\ %s]. = 在云主机[uuid:{0}]已经存在一个userdata的系统标签

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1808
# args: 
Shouldn't\ be\ more\ than\ one\ userdata\ systemTag\ for\ one\ vm. = 在一个云主机中不能存在多个userdata的系统标签

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1932
# args: type
vm\ machine\ type\ requires\ [q35,\ pc,\ virt],\ but\ get\ [%s] = VM计算机类型需要[q35，PC，virt]，但得到[{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1992
# args: systemTag,SecurityElementEnableTokenByTag
invalid\ securityElementEnable[%s],\ %s\ is\ not\ securityElementEnable\ tag = SecurityElementEnable[{0}]无效，{1}不是SecurityElementEnable标记

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1995
# args: systemTag,SecurityElementEnableTokenByTag
invalid\ securityElementEnable[%s],\ %s\ is\ not\ boolean\ class = SecurityElementEnable[{0}]无效，{1}不是布尔类

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2022
# args: systemTag,usbRedirectTokenByTag
invalid\ usbRedirect[%s],\ %s\ is\ not\ usbRedirect\ tag = usbRedirect[{0}]无效，{1}不是usbRedirect标记

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2025
# args: systemTag,usbRedirectTokenByTag
invalid\ usbRedirect[%s],\ %s\ is\ not\ boolean\ class = usbRedirect[{0}]无效，{1}不是布尔类

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2561
# args: ref.getResourceUuid()
the\ resource[uuid\:%s]\ is\ a\ ROOT\ volume,\ you\ cannot\ change\ its\ owner,\ instead,change\ the\ owner\ of\ the\ VM\ the\ root\ volume\ belongs\ to = 当前资源[uuid:{0}]是一个云盘，你不能改变它的所有者，但是你能够修改对应VM的所有者

# at: src/main/java/org/zstack/compute/vm/VmInstantiateAttachingVolumeFlow.java:54
# args: spec.getDestHost().getUuid(),pinv.getUuid()
Failed\ to\ instantiate\ volume.\ Because\ vm's\ host[uuid\:\ %s]\ and\ allocated\ primary\ storage[uuid\:\ %s]\ is\ not\ connected. = 无法实例化卷。因为VM的物理机[uuid：{0}]和分配的主存储[uuid：{1}]未连接。

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:211
# args: msg.getMac()
Duplicate\ mac\ address\ [%s] = 重复的MAC地址[{0}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:221
# args: vmType
clean\ traffic\ is\ not\ supported\ for\ vm\ type\ [%s] = VM类型[{0}]不支持清理流量

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:100
# args: KVMGlobalConfig.MAX_DATA_VOLUME_NUM.value(int.class)
The\ number\ of\ data\ volumes\ exceeds\ the\ limit[num\:\ %s],\ please\ reduce\ the\ number\ of\ data\ volumes\ during\ vm\ creation. = 数据云盘的数量超过限制[数量：{0}]，请在创建云主机期间减少数据云盘的数量。

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:130
# args: VmInstanceState.Stopped,msg.getVmInstanceUuid()
Can\ not\ set\ security\ level\ to\ not\ %s\ vm\ [uuid\:%s] = 设置密级失败，无法对不处于{0}状态的云主机操作[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:147
# args: 
The\ operation\ only\ allows\ on\ user\ vm = 该操作仅允许在用户云主机上执行

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:177
# args: msg.getVmInstanceUuid(),volumeVOS.stream().map(VolumeVO::getUuid).collect(Collectors.toList()),primaryStorageUuid,(totalCapacity - snapshotsCapacity) * msg.getNames().size(),primaryStorageVO.getCapacity().getAvailableCapacity()
there\ are\ not\ enough\ capacity\ for\ full\ vm\ clone\ to\ vm[uuid\:\ %s],\ volumes[uuid\:\ %s]\ on\ primary\ storage[uuid\:\ %s]\ required\:\ %s\ bytes,\ current\ available\ capacity\ is\ %s\ bytes = 没有足够的空间对云主机[uuid: {0}]做整机克隆，主存储[uuid: {2}]上的云盘[uuid: {1}]共需要[{3}]字节的空间，目前主存储的可用空间为[{4}]字节

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:191
# args: msg.getVmNicUuid()
The\ nic\ [%s%s]\ is\ not\ mounted\ on\ the\ VM = 网卡[{0}]不能被挂载到云主机上

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:197
# args: 
The\ operation\ only\ allows\ on\ user\ vm\  = 该操作只能在用户云主机上进行

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:202
# args: vmInstanceVO.getUuid()
The\ operation\ only\ allows\ when\ vm\ [%s]\ state\ is\ stopped\  = 该操作只有云主机[{0}]状态为已停止才能进行

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:231
# args: msg.getVmInstanceUuid()
user\ has\ no\ privilege\ to\ change\ image\ of\ vm\ %s = 当前用户不能修改云主机{0}的镜像

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:243
# args: 
do\ not\ change\ vm\ image\ when\ it's\ not\ stopped = 当云主机镜像未停止时，不要更改它

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:260
# args: msg.getVmInstanceUuid()
make\ sure\ the\ primary\ storage\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = 确认主存储[uuid:{0}]是可用的且已连接

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:275
# args: msg.getVmInstanceUuid()
make\ sure\ the\ last\ host\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = 确定物理机[uuid:{0}]是可用的且已连接

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:285
# args: msg.getVmInstanceUuid()
vm[uuid\:%s]\ has\ no\ default\ l3,\ cannot\ change\ image\ for\ it = VM[uuid：{0}]没有默认的L3，无法为其更改镜像

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:305
# args: msg.getVmInstanceUuid(),msg.getImageUuid()
instance[uuid\:%s]\ cannot\ be\ changed\ image\ to\ image[uuid\:%s] = 无法将实例[uuid：{0}]的镜像更改为镜像[uuid：{1}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:314
# args: 
either\ uuid\ or\ account\ or\ password\ must\ be\ set = uuid或者账户或者密码需要被设置

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:327
# args: msg.getDirection()
direction\ must\ be\ set\ in\ (in,\ out),\ but\ was\ %s = 方向必须设置在(in, out)，但是输入的是{0}

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:333
# args: 
Monitor\ number\ must\ be\ 1\ or\ 2\ or\ 4. = 监听器数量必须是1、2或4

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:341
# args: 
outboundBandwidth\ and\ inboundBandwidth\ must\ be\ set\ at\ lease\ one. = 上行带宽和下行带宽至少有一个需要被设置

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:350
# args: 
the\ nic\ can't\ apply\ Qos\ with\ the\ port\ mirror\ service\ at\ same\ time. = NIC不能同时对端口镜像服务应用QoS。

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:359
# args: msg.getUuid()
nic\ id\:\ %s\ does\ not\ exist... = 网卡id: {0}不存在

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:370
# args: 
The\ 'uuids'\ parameter\ must\ belong\ to\ the\ VmInstanceVO\ or\ HostVO = “ uuids ”参数必须属于vminstancevo或hostvo

# at: src/main/java/org/zstack/compute/vm/VmNicManagerImpl.java:261
# args: state,VmInstanceState.Stopped
vm\ current\ state[%s],\ modify\ virtio\ requires\ the\ vm\ state[%s] = VM当前状态[{0}]，修改virtio需要VM状态[{1}]

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:111
# args: 
wrong\ format\ of\ password\ strength\ config = 密码强度配置的格式错误

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:114
# args: 
minimum\ can\ not\ be\ larger\ than\ maximum = 最小值不能大于最大值

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:74
# args: minimum,maximum
password\ length\ must\ be\ [%s-%s] = 密码长度必须为[{0}-{1}]

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:93
# args: 
password\ does\ not\ match\ numbers,\ uppercase\ and\ lowercase,\ and\ special\ character\ combinations = 密码与数字、大小写和特殊字符组合不匹配

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:117
# args: resourceUuid,vmInstanceUuid
missing\ parameter,\ resourceUuid\:\ %s,\ vmInstanceUuid\:\ %s\ is\ requested = 缺少参数，ResourceUuid：{0}，请求vmInstanceUuid：{1}

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:153
# args: vmInstanceUuid
missing\ parameter,\ vmInstanceUuid\:\ %s\ is\ requested = 缺少参数，请求了vmInstanceUuid：{0}

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:334
# args: vmInstanceUuid
cannot\ find\ vm\ with\ uuid\:\ %s = 找不到uuid为{0}的云主机

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:338
# args: resourceUuid
cannot\ find\ vm\ device\ with\ uuid\:\ %s = 找不到uuid为{0}的VM设备

# at: src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java:38
# args: vmUuid,hostUuid
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\ host[%s]\ not\ have\ numa\ node = VM[{0}]启动失败，因为已启用NUMA，但物理机[{1}]没有NUMA节点

# at: src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java:41
# args: vmUuid
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\ cpu\ not\ pin = VM[{0}]启动失败，因为NUMA已启用，但CPU未pin

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:45
# args: 
hot\ plug\ not\ close = 热插拔未关闭

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:49
# args: 
vm\ cpu\ not\ all\ pinning = 云主机CPU未完全固定

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:53
# args: entry.getKey().toString()
cpu[%s]\ not\ pin\ in\ a\ same\ host\ numa\ node = CPU[{0}]未固定在同一物理机NUMA节点中

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:57
# args: vmUuid,String.join(VmNumaConstant.RULES_SEPARATOR, errors)
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\:\ %s = VM[{0}]启动失败，因为NUMA已启用，但：{1}

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaFilterFlow.java:52
# args: 
No\ host\ is\ available\ to\ create\ vm\ Instance.Because\ vNuma\ vms\ need\ to\ be\ created\ on\ hosts\ with\ same\ numa,\ but\ no\ hosts\ is\ available\ after\ filter\ primary\ vm's\ host = 没有物理机可用于创建VM实例。因为需要在具有相同NUMA的物理机上创建vNUMA VM，但在筛选主VM的物理机后没有可用的物理机

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaManagerImpl.java:92
# args: 
fail\ to\ set\ vm\ numa,\ incorrect\ input\ format,only\ accept\ true\ or\ false = 无法设置VM NUMA，输入格式不正确，仅接受TRUE或FALSE

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaUtils.java:46
# args: word
invalid\ cpu\ set\ [%s] = CPU集[{0}]无效

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:98
# args: msg.getHostUuid(),refVO.getHostGroupUuid()
the\ host[uuid\:%s]\ already\ attached\ to\ host\ scheduling\ group[uuid\:%s] = 物理机[uuid：{0}]已连接到物理机调度组[uuid：{1}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:107
# args: 
host\ clusterUuid\ is\ null = 物理机Clusteruuid为空

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:111
# args: 
hosts\ that\ you\ can\ add\ to\ a\ host\ scheduling\ group\ must\ be\ enabled\ and\ connected\ to\ the\ MN. = 您可以添加到物理机调度组的物理机必须启用并连接到Mn。

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:117
# args: hostVO.getUuid(),hostVO.getZoneUuid(),hostGroup.getUuid(),hostGroup.getZoneUuid()
unmatched\ zone\ detected,\ host[uuid\:\ %s,\ zone\ uuid\:\ %s]'s\ zone\ is\ different\ from\ host\ sheduling\ rule\ group[uuid\:\ %s,\ zone\ uuid\:\ %s] = 检测到不匹配的区域，物理机[uuid：{0}，区域uuid：{1}]的区域不同于物理机计划规则组[UUId：{2}，区域UUId：{3}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:132
# args: msg.getVmUuid(),refVO.getVmGroupUuid()
vm[uuid\:%s]\ already\ attached\ to\ vm\ scheduling\ group[uuid\:%s] = 云主机[uuid：{0}]已连接到云主机调度组[uuid：{1}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:145
# args: vm.getUuid(),vm.getZoneUuid(),groupVO.getUuid(),groupVO.getZoneUuid()
unmatched\ zone\ detected,\ vm[uuid\:\ %s,\ zone\ uuid\:\ %s]'s\ zone\ is\ different\ from\ vm\ sheduling\ rule\ group[uuid\:\ %s,\ zone\ uuid\:\ %s] = 检测到不匹配的区域，VM[uuid：{0}，区域uuid：{1}]的区域不同于VM调度规则组[UUId：{2}，区域UUId：{3}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:161
# args: VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString(),vm.getState().toString()
vm\ can\ change\ its\ vm\ scheduling\ group\ only\ in\ state\ [%s,%s],\ but\ vm\ is\ in\ state\ [%s] = VM只能在状态[{0}，{1}]下更改其VM调度组，但VM处于状态[{2}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:171
# args: 
cannot\ operate\ vpc\ vm\ scheduling\ group = 无法运行VPC云主机调度组

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:209
# args: 
zoneUuid\ is\ not\ null = zoneUuid不为空

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:399
# args: 
the\ vm\ scheduling\ group[uuid\:%s]\ has\ already\ had\ a\ executed\ exclusive\ vm\ or\ affinitive\ vm\ scheduling\ policy\ attached.\ you\ cannot\ attach\ either\ of\ the\ two\ scheduling\ policies\ that\ require\ execution\ to\ the\ group\ again = VM调度组[uuid：{0}]已附加已执行的独占VM或关联VM调度策略。您不能再次将需要执行的两个计划策略中的任何一个附加到组

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleFilterFlow.java:132
# args: 
can\ not\ satisfied\ vm\ scheduling\ rule\ group\ conditions = 无法满足VM调度规则组条件

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:158
# args: self.getUuid(),host.getUuid(),vmUuid
vm\ scheduling\ group[uuid\:%s]\ reserve\ host\ [uuid\:%s]\ for\ vm\ [uuid\:\ %s]\ failed = 云主机调度组[uuid：{0}]为云主机[uuid：{2}]保留物理机[UuId：{1}]失败

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:392
# args: vmInv.getUuid(),hostUuid,refVO.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],which\ does\ not\ comply\ with\ the\ scheduling\ rule\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = 云主机[uuid：{0}]现在正在物理机[uuid：{1}]上运行，该物理机不符合与云主机调度组[uuid：{2}]关联的调度规则。

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:402
# args: msg.getVmGroupUuid()
hostGroup[uuid\:%s]\ is\ no\ host = 物理机组[uuid：{0}]不是物理机

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:407
# args: msg.getVmUuid(),hostUuid,VMSchedulingRuleType.AFFINITY.toString(),msg.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],\ which\ does\ not\ comply\ with\ the\ scheduling\ rule[%s]\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = 云主机[uuid：{0}]现在正在物理机[uuid：{1}]上运行，该物理机不符合与云主机调度组[uuid：{3}]关联的调度规则[{2}]。

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:414
# args: msg.getVmUuid(),hostUuid,VMSchedulingRuleType.ANTIAFFINITY.toString(),msg.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],which\ does\ not\ comply\ with\ the\ scheduling\ rule[%s]\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = 云主机[uuid：{0}]现在正在物理机[uuid：{1}]上运行，该物理机不符合与云主机调度组[UuId：{3}]关联的调度规则[{2}]。

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:82
# args: msg.getHostGroupUuid()
cannot\ find\ the\ host\ scheduling\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到物理机调度组[uuid：{0}]，它可能已被删除

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:95
# args: msg.getVmSchedulingRuleUuid()
cannot\ find\ the\ vm\ scheduling\ rule[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到VM计划规则[uuid：{0}]，它可能已被删除

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:108
# args: msg.getVmSchedulingRuleGroupUuid()
cannot\ find\ the\ vm\ scheduling\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到VM调度组[uuid：{0}]，它可能已被删除

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:86
# args: msg.getAllocatorStrategy()
unsupported\ host\ allocation\ strategy[%s] = 不被支持的物理机分配策略[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:72
# args: msg.getType()
unsupported\ instance\ offering\ type[%s] = 不被支持的计算规格类型[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:76
# args: msg.getCpuNum()
cpu\ num[%s]\ is\ less\ than\ 1 = cpu数量[{0}]少于1

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:80
# args: msg.getMemorySize()
memory\ size[%s\ bytes]\ is\ less\ than\ 16M,\ no\ modern\ operating\ system\ is\ likely\ able\ to\ boot\ with\ such\ small\ memory\ size = 内存大小[{0} bytes]少于16M，没有一个现代操作系统能够在如此小的内存里被引导

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:92
# args: msg.getAllocationStrategy()
unsupported\ primary\ storage\ allocation\ strategy[%s] = 不被支持的主存储分配策略[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1043
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ instanceOffering[uuid\:\ %s]. = 实例[uuid：{0}]已有一个用户数据系统标记。

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1108
# args: 
Shouldn't\ be\ more\ than\ one\ systemTag\ for\ one\ instanceOffering. = 对于一个实例提供，不应超过一个系统标记。

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1085
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ diskOffering[uuid\:\ %s]. = DiskOffering[uuid：{0}]已有一个UserData系统标记。

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:104
# args: 
the\ console\ agent\ is\ not\ connected;\ it's\ mostly\ like\ the\ management\ node\ just\ starts,\ please\ wait\ for\ the\ console\ agent\ connected,\ or\ you\ can\ reconnect\ it\ manually\ if\ disconnected\ for\ a\ long\ time. = 控制台代理失联，很有可能管理节点刚刚启动，请等待控制台代理的连接，如果长时间没有连上可以尝试手动重连控制台代理。

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:125
# args: vm.getUuid()
cannot\ find\ host\ IP\ of\ the\ vm[uuid\:%s],\ is\ the\ vm\ running??? = 无法找到vm[uuid:{0}]的物理机IP，请确认该vm是否在运行？？？

# at: src/main/java/org/zstack/console/ConsoleApiInterceptor.java:49
# args: msg.getVmInstanceUuid(),state
Console\ is\ only\ available\ when\ the\ VM[uuid\:%s]\ is\ Running\ or\ Crashed,\ but\ the\ current\ state\ is\ %s = 控制台仅在VM[uuid：{0}]正在运行或崩溃时可用，但当前状态为{1}

# at: src/main/java/org/zstack/console/ConsoleProxyBase.java:133
# args: uri.toString()
establish\ VNC\:\ unexpected\ uri\:\ %s = 建立VNC：意外的URI：{0}

# at: src/main/java/org/zstack/console/ConsoleProxyBase.java:198
# args: ret.getError()
unable\ to\ check\ console\ proxy\ availability,\ because\ %s = 无法检查控制台代理是否可用，因为{0}

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:189
# args: 
Ansible\ private\ key\ not\ found. = 找不到Ansible私钥。

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:387
# args: uuid
invalid\ management\ node\ uuid[%s] = 非法的管理节点uuid[{0}]

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:520
# args: 
failed\ to\ configure\ consoleProxyOverriddenIp[code\:%d]\ or\ consoleProxyPort[code\:%d] = 无法配置ConsoleProxyOverriddeNip[代码：{0}]或ConsoleProxyPort[代码：{1}]

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:543
# args: 
failed\ to\ reconnect\ console\ proxy = 重连控制台代理失败

# at: src/main/java/org/zstack/core/ansible/AnsibleRunner.java:426
# args: 
User\ name\ or\ password\ or\ port\ number\ may\ be\ problematic = 用户名、密码或者端口可能是错误的

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:106
# args: srcFolder,srcRes.getStdout(),srcRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s].\nstdout\:%s\nstderr\:%s = 无法检查文件夹[{0}]下文件的md5sum.\nstdout:{1}\nstderr:{2}

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:121
# args: dstFolder,hostname,dstRes.getStdout(),dstRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s]\ on\ the\ host[ip\:%s].\nstdout\:%s\nstderr\:%s = 无法检查物理机[ip:{1}]的文件夹[{0}]下文件的md5sum.\nstdout:{2}\nstderr:{3}

# at: src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java:684
# args: errMsg
message\ is\ not\ in\ corrected\ JSON\ mediaType,\ %s = 消息是错误的JSON格式，{0}

# at: src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java:69
# args: EventFacade.WEBHOOK_TYPE
for\ webhooks\ with\ type[%s],\ the\ field\ opaque\ cannot\ be\ null = 对于[{0}]类型的webhooks，opaque字段不能为null

# at: src/main/java/org/zstack/core/config/GlobalConfig.java:430
# args: 
do\ not\ allow\ skip\ verification = 不允许跳过验证

# at: src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java:118
# args: msg.getCategory(),msg.getName()
Unable\ to\ find\ GlobalConfig[category\:\ %s,\ name\:\ %s] = 无法找到全局变量[category:{0}, name:{1}]

# at: src/main/java/org/zstack/core/debug/DebugManagerImpl.java:93
# args: 
taskInfo\ was\ not\ found = 未找到TaskInfo

# at: src/main/java/org/zstack/core/encrypt/EncryptFacadeImpl.java:204
# args: encrypt.error
Encryption\ error\ \:\ %s = 加密错误：{0}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:71
# args: 
non\ file\ or\ jsoncontent\ input = 非文件或JSON内容输入

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:76
# args: 
file\ or\ jsoncontent\ cannot\ both\ nonempty = 文件或JSONContent不能同时为非空

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:108
# args: e.getMessage()
Unable\ to\ scan\ folder\:\ %s = 无法扫描文件夹：{0}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:112
# args: filename
%s\ is\ not\ existed\ or\ is\ empty\ folder = {0}不存在或为空文件夹

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:249
# args: 
elaboration\ code\ must\ be\ number! = 精化代码必须为数字！

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:318
# args: returnValue.get(0).getContent(),returnValue.get(0).getReason()
%s\:\ %s = {0}: {1}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:415
# args: 
input\ args\ 'regex'\ or\ 'category'\ must\ be\ set = 必须设置输入参数“ regex ”或“ category ”

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:32
# args: service.getName()
service[%s]\ has\ been\ registered = 服务(service)[{0}]已经被注册

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:93
# args: msg.getName()
service[%s]\ is\ not\ registered = 服务[{0}]未注册

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:99
# args: msg.getName()
service[%s]\ does\ not\ support\ reload\ config = 服务[{0}]不支持重新加载配置

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:105
# args: msg.getName()
service[%s]\ is\ not\ running = 服务[{0}]未运行

# at: src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java:315
# args: vo.getUuid(),vo.getName()
cannot\ trigger\ a\ finished\ GC\ job[uuid\:%s,\ name\:%s] = 无法触发一个完成过的GC任务

# at: src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java:38
# args: msg.getApiId()
parameter\ apiId[%s]\ is\ not\ a\ valid\ uuid. = 参数apiId[{0}]不是一个有效的uuid

# at: src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:656
# args: url,finalTimeout
unable\ to\ echo\ %s\ in\ %sms = 无法在{1}ms内返回{0}

# at: src/main/java/org/zstack/core/retry/Retry.java:103
# args: __name__,times,interval
an\ operation[%s]\ fails\ after\ retrying\ %s\ times\ with\ the\ interval\ %s\ seconds = 在重试{1}次间隔时间为{2}后操作[{0}]失败

# at: src/main/java/org/zstack/core/salt/SaltRunner.java:297
# args: stateName,targetIp,retry
failed\ to\ run\ salt\ state[%s]\ on\ system[%s],\ failed\ after\ %s\ retries = 重试{2}次之后，在系统[{1}]上运行加盐状态[{0}]失败

# at: src/main/java/org/zstack/core/salt/SaltSetupMinionJob.java:84
# args: targetIp
scp\ is\ not\ found\ on\ system[%s],\ unable\ to\ setup\ salt = 在系统[{0}]上找不到SCP，无法设置销售

# at: src/main/java/org/zstack/core/timeout/ApiTimeoutManagerImpl.java:76
# args: ApiTimeoutGlobalProperty.MINIMAL_TIMEOUT
api\ timeout\ cannot\ be\ set\ smaller\ than\ %s = API超时不能设置为小于{0}

# at: src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java:28
# args: url
Invalid\ url[%s] = 无效的URL[{0}]

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:72
# args: 
the\ identity\ authentication\ does\ not\ specify\ the\ resource\ pool\ to\ provide\ the\ service = 身份认证未指定提供服务的资源池

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:83
# args: setting.resourcePoolType,model
wrong\ secret\ resource\ pool\ model,\ expect\ %s,\ actual\ %s = 机密资源池模型错误，应为{0}，实际为{1}

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:81
# args: resourceUuid
failed\ to\ find\ model\ for\ secretResourcePool\ [%s] = 找不到SecretResourcePool[{0}]的模型

# at: src/main/java/org/zstack/crypto/auth/CryptoAuthenticationHelper.java:121
# args: 
failed\ to\ find\ certificate\ info = 找不到证书信息

# at: src/main/java/org/zstack/crypto/auth/CryptoEncryptionParamParser.java:57
# args: plainText,e.getMessage()
failed\ to\ parse\ plain\ text\ in\ encryption\ param\ to\ json\ object\:\ %s,\ %s = 无法将加密参数中的纯文本解析为JSON对象：{0}，{1}

# at: src/main/java/org/zstack/crypto/auth/UKeyCryptoAuthenticationFacade.java:73
# args: 
operation\ not\ supported = 不支持的操作

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java:200
# args: userUuid
user[uuid\=%s]\ not\ found = 找不到用户[uuid={0}]

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java:204
# args: 
certificate\ uuid\ is\ empty\ and\ UKey\ system\ tag\ does\ not\ exist = 证书uuid为空，且UKEY系统标记不存在

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateManagerImpl.java:217
# args: msg.getCertificateUuid()
certificate[uuid\=%s]\ not\ found = 未找到证书[uuid={0}]

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:47
# args: msg.getResourceType()
check\ batch\ data\ integrity\ fail,\ unsupported\ resourceType\:\ %s = 检查批处理数据完整性失败，不支持的资源类型：{0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:57
# args: msg.getResourceType()
add\ integrity\ resource\ fail,\ unsupported\ resourceType\:\ %s = 添加完整性资源失败，不支持的资源类型：{0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:65
# args: msg.getEncryptType()
start\ data\ protection\ encryptType[%s]\ is\ error = 启动数据保护加密类型[{0}]出错

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:240
# args: inventory.getUuid()
the\ snapshot[uuid\:%s]\ is\ not\ encrypted = 快照[uuid：{0}]未加密

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:249
# args: inventory.getUuid()
verify\ volume\ snapshot[%s]\ consistency\ failed = 验证卷快照[{0}]一致性失败

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:311
# args: inventory.getId(),exception.getMessage()
encryption\ image\ cache[id\:%s]\ error\:\ %s = 加密镜像缓存[ID：{0}]错误：{1}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:375
# args: inventory.getId()
the\ image\ cache[id\:%s]\ is\ not\ encrypted = 镜像缓存[ID：{0}]未加密

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:388
# args: inventory.getId()
verify\ image\ cache[%s]\ consistency\ failed = 验证镜像缓存[{0}]一致性失败

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:668
# args: msg.getNodeType(),msg.getPath()
nodeType\ %s\ integrity\ file[path\:%s]\ already\ exists = NodeType{0}完整性文件[路径：{1}]已存在

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:682
# args: msg.getNodeType()
invalid\ nodeType[%s] = 节点类型[{0}]无效

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:694
# args: msg.getNodeType(),msg.getPath()
filed\ to\ add\ integrity\ file[%s.%s],\ it's\ a\ directory\ now. = 已归档以添加完整性文件[{0}.{1}]，它现在是一个目录。

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:699
# args: msg.getNodeType(),msg.getPath()
integrity\ file[%s.%s]\ is\ not\ exists = 完整性文件[{0}.{1}]不存在

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:716
# args: msg.getNodeUuid()
host\ %s\ is\ not\ exists = 物理机{0}不存在

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:724
# args: res.getStderr()
Shell\ fail,\ because\ %s = Shell失败，原因是{0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:747
# args: msg.getNodeType(),msg.getPath(),exception.getMessage()
add\ integrity\ file[%s.%s]\ fail,\ because\ %s = 添加完整性文件[{0}.{1}]失败，原因是{2}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/EncryptColumnIntegrityFactory.java:141
# args: 
unsupported\ operation\ for\ EncryptColumnIntegrityFactory = 不支持对EncryptColumnIntegrityFactory的操作

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:138
# args: encrypt.error
virtualID\ attribute\ encryption\ error,\ because\:%s = VirtualID属性加密错误，原因：{0}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:187
# args: resourceUuid
IAM2VirtualIDAttributeVO\ %s\ does\ not\ exists = IAM2VirtualIDAttributeVO{0}不存在

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:194
# args: encrypt.error
virtualID\ attribute\ check\ error,\ because\:%s = VirtualID属性检查错误，原因：{0}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/RolePolicyIntegrityFactory.java:115
# args: encrypt.error
rolePolicy\ encryption\ error,\ because\:%s = RolePolicy加密错误，原因：{0}

# at: src/main/java/org/zstack/crypto/datacrypto/smp/SMPCryptoBase.java:40
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters = 共享装入点主存储[uuid：{0}，名称：{1}]在连接的群集中找不到任何可用物理机

# at: src/main/java/org/zstack/crypto/securitymachine/AttachVerifyPair.java:26
# args: 
originText\ or\ certificateText\ can\ not\ be\ null = 原始文本或证书文本不能为空

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:60
# args: msg.getSecurityMachineUuid()
the\ security\ machine\ [%s]\ does\ not\ exist = 安全计算机[{0}]不存在

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:86
# args: msg.getManagementIp()
managementIp[%s]\ is\ not\ in\ IPV4\ format = ManagementIP[{0}]不是IPv4格式

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:92
# args: msg.getName(),msg.getManagementIp(),error
failed\ to\ connect\ to\ the\ security\ machine\ %s[%s],\ because\ %s = 无法连接到安全性计算机{0}[{1}]，因为{2}

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:112
# args: msg.getSecurityMachineUuid()
after\ the\ crypto\ function\ is\ enabled,\ at\ least\ one\ security\ machine\ should\ be\ reserved\ in\ the\ corresponding\ resource\ pool = 启用加密功能后，应在相应的资源池中至少保留一台安全机

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:123
# args: msg.getAlgType(),StringUtils.join(EncryptType.values(), ',')
invalid\ algType\ %s,\ supported\ types\:\ %s. = AlgType{0}无效，支持的类型：{1}。

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:127
# args: poolForProtect
the\ resource\ pool[%s]\ specified\ by\ data\ protection\ does\ not\ exist = 数据保护指定的资源池[{0}]不存在

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:145
# args: 
cannot\ be\ deleted.\ after\ the\ encryption\ function\ is\ enabled,\ the\ number\ of\ synced\ security\ machines\ in\ the\ resource\ pool\ that\ provides\ the\ service\ is\ at\ least\ 1 = 无法删除。启用加密功能后，提供该服务的资源池中同步的安全机器至少为1台

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:444
# args: 
securityMachine\ is\ disabled,\ failed\ to\ detect\ heartbeat = SecurityMachine已禁用，无法检测心跳

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:584
# args: 
an\ other\ connect\ security\ machine\ task\ is\ running,\ cancel\ the\ new\ task\ and\ wait\ return = 其他连接安全性计算机任务正在运行，请取消新任务并等待返回

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:183
# args: data,algType
encrypt\ data[%s]\ or\ algType[%s]\ is\ null = 加密数据[{0}]或AlgType[{1}]为空

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:165
# args: resourceUuid
cannot\ find\ model\ for\ secretResourcePool\ [%s] = 找不到SecretResourcePool[{0}]的模型

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:105
# args: poolForAuth
the\ crypto\ function\ is\ enabled\ but\ the\ resource\ pool[%s]\ for\ auto\ login\ is\ not\ set. = 已启用加密功能，但未设置用于自动登录的资源池[{0}]。

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:113
# args: poolForProtect
the\ crypto\ function\ is\ enabled\ but\ the\ resource\ pool[%s]\ for\ data\ protect\ is\ not\ set. = 已启用加密功能，但未设置数据保护的资源池[{0}]。

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:122
# args: state.toString()
the\ current\ state[%s]\ does\ not\ allow\ manual\ modification\ of\ the\ state = 当前状态[{0}]不允许手动修改状态

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:149
# args: 
cannot\ disable\ all\ security\ machines\ when\ the\ crypto\ function\ is\ enabled = 启用加密功能时，无法禁用所有安全计算机

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:159
# args: 
check\ whether\ the\ resource\ pool\ uuid\ is\ set\ for\ authentication = 检查是否为身份验证设置了资源池uuid

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:202
# args: algType
unknown\ encryptType[%s] = 未知的加密类型[{0}]

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:216
# args: data,algType
decrypt\ data[%s]\ or\ algType[%s]\ is\ null = 解密数据[{0}]或AlgType[{1}]为空

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:225
# args: algType
invalid\ decrypt\ algType\:\ %s = 无效的解密AlgType：{0}

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:280
# args: msg.getManagementIp()
there\ has\ been\ a\ security\ machine\ having\ managementIp[%s] = 已存在具有ManagementIP[{0}]的安全计算机

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:82
# args: securityMachineType
no\ client\ for\ security\ machine[type\=%s] = 安全计算机[类型={0}]没有客户端

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:101
# args: securityMachineType
no\ security\ machine\ client\ factory\ for\ security\ machine[type\=%s] = 安全计算机[类型={0}]没有安全计算机客户端工厂

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:50
# args: 
there\ is\ no\ security\ machine\ that\ can\ be\ activated = 没有可以激活的安全机器。

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:54
# args: msg.getType(),StringUtils.join(SecurityMachineKeyType.values(), ',')
invalid\ token\ type\ %s,\ only\ supports\ %s. = 令牌类型{0}无效，仅支持{1}。

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:68
# args: msg.getSecretResourcePoolUuid()
the\ identity\ authentication\ function\ is\ enabled\ but\ the\ corresponding\ resource\ pool\ is\ not\ set,\ please\ re-enable\ the\ function\ and\ try\ again = 身份认证功能已启用，但未设置相应的资源池，请重新启用后再试

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:72
# args: msg.getSecretResourcePoolUuid()
cannot\ delete\ the\ resource\ pool\ %s\ when\ in\ use = 无法删除正在使用的资源池{0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:237
# args: 
generate\ certificate\ failed = 生成证书失败

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:134
# args: rsp.getData()
flkSec\ securityMachine\ unhealthy\:\ %s = FlkSec SecurityMachine不正常：{0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:161
# args: keyLabel,sm4EncryptResponse.result
keyLabel\ %s\ and\ encryptResult\ %s\ are\ inconsistent = KeyLabel{0}和EncryptResult{1}不一致

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:168
# args: vo.getUuid(),response.error
the\ connection\ to\ the\ security\ machine\ %s\ failed\ during\ the\ process\ of\ generating\ the\ test\ key\ because\ %s = 在生成测试密钥的过程中，与安全计算机{0}的连接失败，原因是{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:185
# args: vo.getUuid(),dataProtectTokenRes.error
failed\ to\ generate\ dataProtect\ token\ for\ the\ security\ machine\ %s\ because\ %s = 无法为安全计算机{0}生成DataProtect令牌，因为{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:196
# args: vo.getUuid(),hmacTokenTokenRes.error
failed\ to\ generate\ hmac\ token\ for\ the\ security\ machine\ %s\ because\ %s = 无法为安全计算机{0}生成HMAC令牌，因为{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:208
# args: vo.getUuid(),encryptRes.error
failed\ to\ get\ encrypt\ result\ for\ the\ security\ machine\ %s\ because\ %s = 无法获取安全性计算机{0}的加密结果，因为{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineBase.java:123
# args: self.getManagementIp()
the\ security\ machine\ [%s]\ failed\ to\ manually\ detect\ synchronization,\ please\ confirm\ whether\ the\ security\ machine\ has\ synchronized\ the\ key! = 安全计算机[{0}]手动检测同步失败，请确认安全计算机是否已同步密钥！

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineFactory.java:32
# args: msg.getName(),vo.getModel()
security\ machine[uuid\:%s]\ model\ is\ not\ %s = 安全计算机[uuid：{0}]型号不是{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolApiInterceptor.java:52
# args: msg.getModel()
currently\ does\ not\ support\ the\ creation\ of\ %s\ resource\ pools = 当前不支持创建{0}资源池

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolFactory.java:33
# args: msg.getResourceUuid(),vo.getModel()
secretResourcePool[uuid\:%s]\ model\ is\ not\ %s = SecretResourcePool[uuid：{0}]模型不是{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:409
# args: agentBasic.INSMGetReturnCode(),agentBasic.INSMGetErrMsg()
large\ file\ hmac\ encrypt\ failed,\ code\:\ %s,\ detail\:\ %s = 大文件HMAC加密失败，代码：{0}，详细信息：{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:457
# args: 
failed\ to\ find\ secret\ key = 找不到密钥

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:465
# args: e.getMessage()
failed\ to\ parse\ secret\ key,\ error\:\ %s = 无法分析密钥，错误：{0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:500
# args: 
cipherText\ can\ not\ be\ null = 密文不能为空

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:503
# args: 
encryptSubjectDN\ can\ not\ be\ null = EncryptSubjectDN不能为空

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:508
# args: 
failed\ to\ parse\ MS\ Envelope = 解析MS信封失败

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:533
# args: 
failed\ to\ export\ secret\ key = 无法导出密钥

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:550
# args: 
import\ secret\ key\ fail = 导入密钥失败

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:196
# args: vo.getUuid(),activateTokenRes.error
failed\ to\ generate\ activated\ token\ for\ the\ security\ machine\ %s\ because\ %s = 无法为安全计算机{0}生成激活的令牌，因为{1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:206
# args: dataProtectTokenName,vo.getUuid(),dataProtectTokenRes.error
failed\ to\ generate\ dataProtect\ token\ %s\ for\ the\ security\ machine\ %s\ because\ %s = 无法为安全计算机{1}生成DataProtect令牌{0}，因为{2}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:216
# args: hmacTokenName,vo.getUuid(),hmacTokenTokenRes.error
failed\ to\ generate\ hmac\ token\ %s\ for\ the\ security\ machine\ %s\ because\ %s = 无法为安全计算机{1}生成HMAC令牌{0}，因为{2}

# at: src/main/java/org/zstack/cube/CubeManagerImpl.java:505
# args: cmd.host,cmd.detail
host[uuid\:\ %s]\ memory\ ecc\ triggered,\ detail\:\ %s = 物理机[uuid：{0}]内存ECC已触发，详细信息：{1}

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:99
# args: 
parameters\ [accountUuid]\ only\ can\ be\ used\ by\ admin\ user! = 参数[accountUuid]必须被admin用户设置

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:54
# args: msg.getExpirePolicy()
expire\ policy\:\ %s\ is\ not\ valid = 无效的过期策略:{0}

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:57
# args: msg.getVlan()
vlanId[%s]\ has\ been\ existed! = VlanId[{0}]已存在！

# at: src/main/java/org/zstack/daho/core/DahoSdkImpl.java:128
# args: 
create\ daho\ vll\ task\ failed! = 创建daho vll任务失败

# at: src/main/java/org/zstack/daho/core/DahoSdkImpl.java:169
# args: msg.getAccountUuid()
no\ aliyun\ account\ found\ for\ accountUuid\:\ %s = 找不到当前账户{0}对应的阿里云账户

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:105
# args: list,msg.getDirectoryUuid()
resources\ %s\ has\ already\ been\ bound\ to\ directory\ uuid[%s]\ ,\ multiple\ paths\ are\ not\ supported = 资源{0}已绑定到目录uuid[{1}]，不支持多个路径

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:112
# args: list,ALLOW_RESOURCE_TYPES
resource\ types\ %s\ are\ not\ supported\ by\ directory,\ allowed\ types\ are\ %s = 目录不支持资源类型{0}，允许的类型为{1}

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:129
# args: 
name\ contains\ unsupported\ characters,\ name\ can\ only\ contain\ Chinese\ characters,\ English\ letters,\ numbers,\ spaces,\ and\ the\ following\ characters\:\ ()（）【】@._-+\  = 名称包含不支持的字符，名称只能包含中文字符、英文字母、数字、空格和以下字符：（）（）[]@._-+

# at: src/main/java/org/zstack/directory/DirectoryBase.java:356
# args: msg.getDirectoryUuid(),msg.getTargetParentUuid()
circular\ dependency\ detected,\ directory\ %s\ and\ directory\ %s\ will\ cause\ circular\ dependency = 检测到循环依赖，目录{0}和目录{1}将导致循环依赖

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:147
# args: list.get(0).getUuid(),msg.getName()
duplicate\ directory\ name,\ directory[uuid\:\ %s]\ with\ name\ %s\ already\ exists = 已存在名称为{1}的重复目录名、目录[uuid：{0}]

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:154
# args: 
fail\ to\ create\ directory,\ directories\ are\ up\ to\ four\ levels = 创建目录失败，目录最多有四层

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:158
# args: msg.getType(),DIRECTORY_TYPES
the\ type\ of\ directory\ %s\ is\ not\ supported,\ the\ supported\ directory\ types\ are\ %s = 不支持目录{0}的类型，支持的目录类型为{1}

# at: src/main/java/org/zstack/directory/VmDirectoryChecker.java:27
# args: vo.getZoneUuid()
all\ resources\ zoneUuid\ must\ be\ consistent\ with\ the\ directory\ zoneUuid[%s] = 所有资源的zoneuuid必须与目录zoneuuid[{0}]一致

# at: src/main/java/org/zstack/drs/DRSBase.java:216
# args: 
Advice\ not\ allowed\ while\ scheduling = 计划时不允许通知

# at: src/main/java/org/zstack/drs/DRSBase.java:277
# args: 
delete\ DRS\ is\ not\ allowed\ while\ the\ vm\ is\ being\ migrated = 迁移云主机时不允许删除DRS

# at: src/main/java/org/zstack/drs/DRSBase.java:370
# args: 
Scheduling\ is\ not\ allowed\ while\ the\ vm\ is\ being\ migrated = 迁移云主机时不允许计划

# at: src/main/java/org/zstack/drs/DRSBase.java:481
# args: 
Lack\ of\ host\ CPU,\ memory\ monitoring\ data = 缺少物理机CPU、内存监控数据

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:55
# args: msg.getClusterUuid()
The\ cluster[%s]\ has\ created\ DRS = 群集[{0}]已创建DRS

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:59
# args: 
DRS\ is\ disabled = DRS已禁用

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:64
# args: 
thresholds\ can\ not\ be\ empty = 阈值不能为空

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:73
# args: threshold.getThresholdName()
illegal\ thresholdName[%s] = 阈值名称[{0}]非法

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:77
# args: threshold.getOperator()
illegal\ threshold\ operator[%s] = 阈值运算符[{0}]非法

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:81
# args: 
thresholdValue\ can\ not\ be\ empty = 阈值不能为空

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:86
# args: 
illegal\ thresholdValue,\ valid\ range\:\ (0,\ 100] = 阈值非法，有效范围：（[0，100]

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:103
# args: 
GlobalConfig\ ENABLE_DRS\ is\ closed = GlobalConfig启用_DRS已关闭

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:107
# args: msg.getUuid(),vo.getState().toString()
The\ DRS[%s]\ state\ is\ %s = DRS[{0}]状态为{1}

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:122
# args: adviceVO.getDrsUuid()
The\ DRS[%s]\ automation\ level\ is\ not\ manual = DRS[{0}]自动化级别不是手动的

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:136
# args: msg.getAdviceUuid()
advice[%s]\ has\ expired = 建议[{0}]已过期

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:145
# args: 
Successfully\ executed,\ no\ repeated\ executions\ allowed = 执行成功，不允许重复执行

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:152
# args: adviceVO.getVmUuid()
The\ vm[%s]\ has\ been\ deleted = 云主机[{0}]已删除

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:155
# args: adviceVO.getVmUuid()
The\ vm[%s]\ state\ is\ not\ running = VM[{0}]状态未运行

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:158
# args: adviceVO.getVmUuid(),adviceVO.getVmSourceHostUuid()
The\ vm[%s]\ is\ no\ longer\ on\ the\ source\ host[%s] = VM[{0}]不再位于源物理机[{1}]上

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:273
# args: msg.getClusterUuid()
The\ cluster[%s]\ does\ not\ support\ DRS. = 群集[{0}]不支持DRS。

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:290
# args: reasons
Can\ not\ create\ DRS,\ %s = 无法创建DRS，{0}

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:323
# args: 
hostUuids\ is\ empty = HOSTuuidS为空

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:330
# args: 
query\ hosts\ utilization\ data\ failed = 查询物理机利用率数据失败

# at: src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java:83
# args: bundle.getEncryptionType()
failed\ to\ parse\ API\ message\:\ can\ not\ parse\ encryption\ param\ with\ type\ %s = 未能分析API消息：无法分析类型为{0}的加密参数

# at: src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java:128
# args: matchTags.size()
failed\ to\ parse\ API\ message\:\ found\ %d\ encryption\ param\ system\ tags,\ expect\ 1 = 未能分析API消息：找到{0}个加密参数系统标记，应为1个

# at: src/main/java/org/zstack/externalbackup/zbox/HostZBoxBackupRecoverGC.java:142
# args: volumeUuids
some\ volume[uuids\:%s]\ recover\ failed.\ you\ can\ trigger\ it\ again\ by\ reconnect\ it. = 某些卷[uuid：{0}]恢复失败。您可以通过重新连接来再次触发它。

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java:34
# args: externalBackupUuid
there\ is\ another\ external\ backup[uuid\:\ %s]\ recovering = 另一个外部备份[uuid：{0}]正在恢复

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java:38
# args: 
both\ hostUuids\ and\ backupStorageUuids\ are\ empty.\ you\ must\ specify\ one\ or\ both\ of\ them. = Hostuuid和BackupStorageuuid均为空。您必须指定其中一个或两个。

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:691
# args: 
please\ insert\ zbox\ to\ management\ node. = 请将ZBOX插入管理节点。

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:219
# args: 
cannot\ find\ recover.conf\ under\ zbox\ backup\ install\ dir. = 在ZBOX备份安装目录下找不到recover.conf。

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:741
# args: result.getExecutionLog()
fail\ to\ backup\ database\:\ %s = 无法备份数据库：{0}

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:591
# args: 
zbox\ should\ be\ inserted\ to\ a\ host\ first. = 应首先将ZBox插入物理机。

# at: src/main/java/org/zstack/externalservice/cronjob/CronJobImpl.java:81
# args: 
crond\ is\ not\ running = crond任务未在运行

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:485
# args: 
Missing\ CPU/memory\ settings = 缺少CPU/内存设置

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:489
# args: 
Unexpected\ CPU/memory\ settings = 意外的CPU/内存设置

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:498
# args: instanceOfferingUuid
instance\ offering[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = 计算规格[uuid:{0}]没有被启用，不能根据该规格创建云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:502
# args: instanceOfferingUuid,ivo.getType()
instance\ offering[uuid\:%s,\ type\:%s]\ is\ not\ UserVm\ type,\ can't\ create\ vm\ from\ it = 计算规格[uuid:{0}, type:{1}]不是UserVm类型，不能通过它创建云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:539
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = 镜像[uuid:{0}]没被启用，不能根据该镜像创建云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:544
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ ready\ yet,\ can't\ create\ vm\ from\ it = 镜像[uuid：{0}]尚未就绪，无法从中创建VM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:559
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ system\ image,\ can't\ be\ used\ to\ create\ user\ vm = 镜像[uuid:{0}] 是系统镜像，不能使用它创建用户云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:575
# args: diskUuids
disk\ offerings[uuids\:%s]\ are\ Disabled,\ can\ not\ create\ vm\ from\ it = 云盘规格[uuids:{0}]没有被启用，不能使用它创建云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:450
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ secondary\ vm[uuid\:%s] = FT辅助云主机[uuid：{0}]不支持当前操作

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:126
# args: group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
pvm[uuid\:%s]\ and\ svm[uuid\:%s]\ volume\ number\ not\ matches,\ do\ not\ allowed\ to\ start = PVM[uuid：{0}]和SVM[uuid：{1}]卷号不匹配，不允许启动

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:135
# args: i,group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
volume\ with\ index\:\ %d,\ of\ pvm[uuid\:%s]\ and\ svm[uuid\:%s]\ have\ different\ size,\ do\ not\ allowed\ to\ start = PVM[uuid：{1}]和SVM[uuid：{2}]中索引为{0}的卷大小不同，不允许启动

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:146
# args: i,group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
volume\ with\ index\:\ %d,\ of\ pvm[uuid\:%s]\ and\ svm[uuid\:%s]'s\ cache\ volume\ have\ different\ size,\ do\ not\ allowed\ to\ start = PVM[uuid：{1}]和SVM[uuid：{2}]的缓存卷的索引为{0}的卷大小不同，不允许启动

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:169
# args: msg.getUuid(),faultToleranceVmGroupUuid
image[uuid\:%s]\ is\ still\ used\ by\ fault\ tolerance\ vm[uuid\:%s] = 容错云主机[uuid：{1}]仍在使用镜像[uuid：{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:212
# args: msg.getL3NetworkUuid(),String.join(",", vmInstanceUuids),VmInstanceState.Paused,VmInstanceState.Running
could\ not\ delete\ l3\ network[uuid\:%s].\ Fault\ tolerance\ vm[%s]\ in\ states[%s,\ %s]\ still\ using\ it.\ Stop\ related\ fault\ tolerance\ vms\ before\ delete\ l3\ network = 无法删除三层网络[uuid：{0}]。状态为[{2}，{3}]的容错VM[{1}]仍在使用。在删除三层网络之前停止相关的容错云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:266
# args: msg.getFaultToleranceVmUuid()
Can\ not\ fail-over\ vm[uuid\:%s],\ please\ enable\ ft\ in\ GlobalConfig = 无法对VM[uuid：{0}]进行故障转移，请在GlobalConfig中启用FT

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:270
# args: msg.getFaultToleranceVmUuid()
Can\ not\ fail-over\ vm[uuid\:%s],\ please\ confirm\ it\ is\ a\ fault\ tolerance\ vm\ group = 无法对VM[uuid：{0}]进行故障转移，请确认它是容错VM组

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:276
# args: msg.getFaultToleranceVmUuid(),FaultToleranceStatus.Protected,FaultToleranceStatus.Unknown
Can\ not\ fail-over\ vm[uuid\:%s],\ because\ fault\ tolerance\ vm\ group\ is\ not\ in\ status\ of\ [%s,\ %s] = 无法对VM[uuid：{0}]进行故障转移，因为容错VM组的状态不是[{1}，{2}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:301
# args: Joiner.on(",").join(vmUuids)
Can\ not\ maintain\ host,\ because\ ft\ vms[%s]\ are\ under\ recovering = 无法维护物理机，因为正在恢复FT VM[{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:319
# args: msg.getClass(),msg.getVmInstanceUuid(),state
current\ operation[api\:%s]\ is\ not\ supported\ when\ ft\ vm[uuid\:%s,\ state\:%s]\ is\ not\ stopped = 未停止FT VM[uuid：{1}，状态：{2}]时，不支持当前操作[API：{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:367
# args: VmHaLevel.FaultTolerance.toString()
Can\ not\ set\ vm\ level\ to\ %s,\ please\ enable\ ft\ in\ GlobalConfig = 无法将VM级别设置为{0}，请在GlobalConfig中启用FT

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:515
# args: 
Ft\ network\ is\ not\ set = 未设置FT网络

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:423
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ cpu\ number,\ need\ to\ stop\ both\ of\ the\ vms = 无法更新FT VM[uuid：{0}]CPU编号，需要停止两个VM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:427
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ memory\ size,\ need\ to\ stop\ both\ of\ the\ vms = 无法更新FT VM[uuid：{0}]内存大小，需要停止两个VM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:431
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ platform,\ need\ to\ stop\ both\ of\ the\ vms = 无法更新FT VM[uuid：{0}]平台，需要停止两个VM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:442
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ group\ vm[uuid\:%s] = FT组VM[uuid：{0}]不支持当前操作

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:446
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ primary\ vm[uuid\:%s] = FT主VM[uuid：{0}]不支持当前操作

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:466
# args: msg.getVmInstanceUuid()
current\ operation\ is\ not\ supported\ on\ secondary\ vm[uuid\:%s] = 辅助云主机[uuid：{0}]不支持当前操作

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:472
# args: 
can\ not\ migrate\ FT\ primary\ vm = 无法迁移FT主云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:476
# args: 
can\ not\ migrate\ FT\ secondary\ vm = 无法迁移FT辅助云主机

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:511
# args: 
Failed\ to\ create\ ft\ vm,\ please\ enable\ ft\ in\ GlobalConfig = 无法创建FT VM，请在GlobalConfig中启用FT

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:549
# args: msg.getImageUuid(),imgFormat
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ can\ be\ used\ to\ create\ vm = 镜像[uuid：{0}]的媒体类型为：{1}，只能使用RootVolumeTemplate创建VM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:554
# args: msg.getImageUuid(),imageFileFmt,ImageConstant.QCOW2_FORMAT_STRING
image[uuid\:%s]\ is\ of\ format\:\ %s,\ only\ %s\ can\ be\ used\ to\ create\ vm = 镜像[uuid：{0}]的格式为：{1}，只有{2}可用于创建VM

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:364
# args: hostUuid
failed\ to\ allocate\ port\ on\ host[uuid\:\ %s] = 无法在物理机[uuid：{0}]上分配端口

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:369
# args: hostUuid
allocated\ port\ num\ less\ than\ requested\ on\ host[uuid\:\ %s] = 物理机[uuid：{0}]上分配的端口号小于请求的端口号

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:524
# args: smsg.getPrimaryVmInstanceUuid()
could\ not\ get\ hostUuid\ of\ primary\ vm[uuid\:%s] = 无法获取主云主机[uuid：{0}]的Hostuuid

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:892
# args: 
can\ not\ start\ secondary\ vm,\ because\ primary\ vm\ is\ still\ stopped = 无法启动辅助云主机，因为主云主机仍处于停止状态

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:1322
# args: vm.getUuid()
Can\ not\ migrate\ ft\ secondary\ vm[uuid\:%s] = 无法迁移FT辅助云主机[uuid：{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:1327
# args: vm.getUuid()
Can\ not\ migrate\ ft\ primary\ vm[uuid\:%s] = 无法迁移FT主云主机[uuid：{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java:546
# args: 
Current\ ft\ vm\ is\ in\ unknown\ status,\ can\ not\ stop\ it,\ please\ try\ to\ fail-over\ it\ manually = 当前FT云主机处于未知状态，无法停止，请尝试手动故障转移

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java:596
# args: self.getUuid()
unable\ to\ start\ the\ vm[uuid\:%s].\ It\ doesn't\ have\ any\ nic,\ please\ attach\ a\ nic\ and\ try\ again = 无法启动云主机[uuid:{0}]。该云主机没有网卡，请添加网卡后再试

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3110
# args: nicUuid,pvm.getHostUuid()
failed\ to\ allocate\ port\ of\ nic[uuid\:\ %s]\ on\ host[uuid\:\ %s] = 无法分配物理机[uuid：{1}]上的NIC[uuid：{0}]的端口

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3115
# args: nicUuid,pvm.getHostUuid()
allocated\ port\ num\ less\ than\ requested\ of\ nic[uuid\:\ %s]\ on\ host[uuid\:\ %s] = 分配的端口数小于物理机[uuid：{1}]上的NIC[uuid：{0}]请求的端口数

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:727
# args: 
can\ not\ create\ secondary\ vm,\ because\ primary\ vm\ is\ stopped = 无法创建辅助云主机，因为主云主机已停止

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:641
# args: 
an\ other\ fault\ tolerance\ gc\ task\ is\ running,\ cancel\ the\ new\ task\ and\ wait\ return = 其他容错GC任务正在运行，请取消新任务并等待返回

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:2256
# args: 
can\ not\ start\ secondary\ vm,\ because\ primary\ vm\ is\ stopped = 无法启动辅助云主机，因为主云主机已停止

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1212
# args: 
created\ svm\ found,\ report\ error\ for\ this\ start\ secondary\ vm\ request = 找到已创建的SVM，报告此启动辅助云主机请求的错误

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1468
# args: vmInstanceUuid
could\ not\ failover\ vm[uuid\:%s].\ Related\ fault\ tolerance\ vm\ group\ not\ exists = 无法对云主机[uuid：{0}]进行故障切换。相关容错云主机组不存在

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1484
# args: group.getPrimaryVmInstanceUuid()
pvm[uuid\:%s]\ not\ exists = PVM[uuid：{0}]不存在

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1596
# args: 
unexpected\ exception = 意外异常

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1556
# args: 
could\ not\ failover.\ Secondary\ vm\ is\ unknown\ but\ no\ fault\ tolerance\ network\ address\ available = 无法进行故障转移。辅助云主机未知，但没有可用的容错网络地址

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1495
# args: 
could\ not\ failover.\ Primary\ vm\ is\ unknown\ but\ no\ fault\ tolerance\ network\ address\ available = 无法进行故障转移。主云主机未知，但没有可用的容错网络地址

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1669
# args: hostUuid
cannot\ found\ available\ ip\ from\ current\ ft\ network.\ Check\ whether\ global\ config[category\:ft\ name\:fault.tolerance.network.cidr]\ is\ correctly\ set,\ and\ confirm\ that\ host[uuid\:%s]\ own\ ip\ address\ in\ the\ CIDR = 在当前FT网络中找不到可用的IP。e.检查是否正确设置了全局配置[Category：FT Name：Fault.TolerancNetwork.CIDR]，并确认物理机[uuid：{0}]在CIDR中拥有IP地址

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3009
# args: 
not\ fault\ tolerance\ vm\ port\ found = 未找到容错VM端口

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:95
# args: imageUuid,spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage.\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = 不能发现镜像[uuid:{0}]在任何处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \n1. 镜像服务器是否已经过载到区域中的云主机[name: {1}, uuid:{2}]中；\n2. 如果镜像服务器不是处于连接状态，请尝试重连

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:89
# args: imageUuid,spec.getVmInventory().getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = 不能发现镜像[uuid:{0}]在任何已经挂载到集群[uuid:{1}]上的并且处于Connected状态备份的镜像服务器。可以进行对以下选项的检查: \n1. 镜像服务器是否已经过载到区域中的云主机[name: {2}, uuid:{3}]中；\n2. 如果镜像服务器不是处于Connected状态，请尝试重连

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:117
# args: zoneUuid,isoImageUuid
no\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s]\ contains\ the\ ISO[uuid\:%s] = 没有包含着ISO[uuid:{1}]的镜像服务器添加到区域[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/ShadowVmCloneTagsFlow.java:63
# args: 
missing\ fault\ tolerance\ vm\ group = 缺少容错VM组

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:63
# args: vo.getL3NetworkUuid(),vo.getFlowMeterUuid()
The\ network[%s]\ have\ been\ added\ into\ the\ flow\ meter[%s] = 网络[{0}]已添加到流量计[{1}]中

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:71
# args: 
The\ virtual\ router\ have\ been\ added\ into\ other\ flow\ meter = 已将虚拟路由器添加到其他流量计中

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:77
# args: msg.getVersion(),FlowMeterConstants.TYPE.NetFlow.toString()
invalid\ type\ parameter\ is\ %s\ and\ should\ be\ in\ %s = 无效的类型参数为{0}，应位于{1}中

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:154
# args: msg.getServer()
[%s]\ is\ not\ formatted\ as\ IP\ address = [{0}]的格式不是IP地址

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:143
# args: collector.getUuid()
Collector\ duplicate\ with\ %s = 收集器与{0}重复

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:164
# args: collectorVO.getFlowMeterUuid()
FlowMeter[%s]\ doesn't\ exist = 流量计[{0}]不存在

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:168
# args: collectorVO.getFlowMeterUuid(),vo.getVersion().toString()
FlowMeter[%s]\ IPv6\ doesn't\ support\ version[%s] = 流量计[{0}]IPv6不支持版本[{1}]

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:150
# args: 
no\ specify\ parameter = 没有指定参数

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:159
# args: msg.getUuid()
Flow\ collector[%s]\ doesn't\ exist = 流收集器[{0}]不存在

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:183
# args: server,port,collector.getUuid()
Collector\ [%s\ %d]\ duplicate\ with\ %s = 收集器[{0}{1}]与{2}重复

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:88
# args: vmUuid
unable\ to\ set\ vm\ hostname.\ the\ vm[uuid\:%s]\ do\ not\ have\ default\ L3\ network = 无法设置云主机物理机名。VM[uuid：{0}]没有默认的三层网络

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:103
# args: sameTag.getResourceUuid(),hostname,defaultL3uuid
conflict\ hostname,\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = 物理机名冲突，在三层网络[uuid：{2}]上存在物理机名为[{1}]的云主机[uuid：{0}]

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:111
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ vm\ not\ running. = 更新VM[uuid：{0}]网络配置失败，因为VM未运行。

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:116
# args: msg.getVmInstanceUuid(),vm.getType()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ the\ vm\ type\ %s\ is\ not\ supported. = 更新VM[uuid：{0}]网络配置失败，因为不支持VM类型{1}。

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:129
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ guesttools\ not\ running. = 更新VM[uuid：{0}]网络配置失败，因为guestTools未运行。

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:125
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ the\ guesttools\ version\ is\ too\ low\ for\ this\ feature. = 更新VM[uuid：{0}]网络配置失败，因为GuestTools版本太低，无法使用此功能。

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:136
# args: nic.getUuid()
sync\ nic[uuid\:%s]\ network\ config\ failed,\ the\ current\ qga\ tools\ only\ support\ manual\ ipv6\ configuration\ and\ do\ not\ support\ automatic\ sync = 同步NIC[uuid：{0}]网络配置失败，当前QGA工具仅支持手动IPv6配置，不支持自动同步

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:147
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ hypervisor\ type\ is\ not\ supported = 无法为云主机[uuid:{0}]挂载增强工具镜像，因为其虚拟化层目前不支持增强工具

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:154
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ not\ running = 无法为云主机[uuid:{0}]挂载增强工具镜像，因为它目前并未处于运行状态

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:161
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = 无法为云主机[uuid:{0}]挂载增强工具镜像，因为它不是用户云主机

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:168
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it\ has\ no\ cdrom = 无法为云主机[uuid:{0}挂载增强工具镜像，因为它没有配备光驱

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:191
# args: vmUuid
cannot\ get\ guest-tools\ info\ from\ vm[uuid\:%s]\ because\ it's\ not\ running = 无法从云主机[uuid:{0}]内部获取增强工具信息，因为它目前并未处于运行状态

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:197
# args: vmUuid
cannot\ get\ guest-tools\ info\ from\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = 无法从云主机[uuid:{0}]内部获取增强工具信息，因为它不是用户云主机

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:219
# args: invalidSet
invalid\ debug\ parameter\:\ %s = 无效的调试参数：{0}

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:227
# args: msg.getVmInstanceUuid()
can\ not\ update\ guest\ tools\ state\ for\ vm\ [uuid\:%s]\ because\ vm\ is\ deleted = 无法更新VM[uuid：{0}]的来宾工具状态，因为VM已删除

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:232
# args: msg.getVmInstanceUuid()
can\ not\ update\ guest\ tools\ state\ for\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = 无法更新VM[uuid：{0}]的来宾工具状态，因为它不是用户VM

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:704
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ hypervisor\ type\ is\ not\ supported = 无法为云主机[uuid:{0}获取最新可用的增强工具镜像，因为其虚拟化层目前不支持增强工具

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:713
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ not\ running\ or\ volume\ recovering. = 无法获取VM[uuid：{0}]的最新来宾工具，因为它未运行或卷正在恢复。

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:722
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = 无法为云主机[uuid:{0}]获取最新可用的增强工具镜像，因为它不是用户云主机

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:1067
# args: Platform.getManagementServerId(),msg.getHostUuid()
no\ proper\ guest\ tools\ iso\ found\ in\ management\ node[uuid\:%s]\ for\ host[uuid\:%s] = 无法在管理节点[uuid:{0}]上为物理机[uuid:{1}]寻找到合适的增强工具镜像

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:2042
# args: vm.getUuid(),vm.getName()
failed\ to\ set\ vm[uuid\:\ %s,\ name\:\ %s]\ hostname,\ because\ qga\ state\ is\ not\ running\ and\ there\ is\ no\ dhcp\ service = 无法设置VM[uuid：{0}，名称：{1}]物理机名，因为QGA状态未在运行，并且没有DHCP服务

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:144
# args: vmUuid,rsp.getError()
failed\ to\ get\ guest\ tools\ info\ from\ vm[uuid\:%s],\ because\:%s = 无法从云主机[uuid:{0}]内部获取增强工具信息，因为:{1}

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:244
# args: host.getUuid()
failed\ to\ download\ guest\ tools\ iso\ because\ no\ kvm\ host[uuid\:%s]\ found = KVM物理机[uuid:{0}]不存在，无法为其下载增强工具镜像

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:313
# args: vm.getUuid(),rsp.getError()
failed\ to\ attach\ guest\ tools\ iso\ to\ vm[uuid\:%s],\ because\:%s = 无法为云主机[uuid:{0}]挂载增强工具镜像，因为:{1}

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:358
# args: vm.getUuid(),rsp.getError()
failed\ to\ detach\ guest\ tools\ iso\ from\ vm[uuid\:%s],\ because\:%s = 无法从VM[uuid：{0}]分离来宾工具ISO，因为：{1}

# at: src/main/java/org/zstack/guesttools/pvpanic/PVPanicCrashStrategyManagerImpl.java:200
# args: errCode
can\ not\ be\ here = 不能在这里。

# at: src/main/java/org/zstack/ha/HaInterceptor.java:90
# args: vm.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ it\ is\ not\ stopped = 无法在VM[uuid：{0}]上设置FT，因为它未停止

# at: src/main/java/org/zstack/ha/HaInterceptor.java:94
# args: vm.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ some\ data\ volume\ is\ still\ attached = 无法在VM[uuid：{0}]上设置FT，因为某些数据云盘仍处于挂接状态

# at: src/main/java/org/zstack/ha/HaInterceptor.java:102
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ since\ pci\ device\ attached = 由于连接了PCI设备，无法在VM[uuid：{0}]上设置FT

# at: src/main/java/org/zstack/ha/HaInterceptor.java:108
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached\ by\ passthrough = 无法在VM[uuid：{0}]上设置FT，因为存在通过passthrough连接的USB设备

# at: src/main/java/org/zstack/ha/HaInterceptor.java:119
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vmm[uuid\:%s]\ since\ mdev\ device\ attached = 无法在VMM[uuid：{0}]上设置FT，因为已连接MDEV设备

# at: src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java:237
# args: struct.getHostUuid(),struct.getHostIp(),errors
hosts\ failed\ to\ port\ scan\ the\ failure\ host[uuid\:%s,\ ip\:%s],\ errors\ are\ %s = 扫描物理机失败[uuid:{0}, ip:{1}]，错误原因是 {2}

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:96
# args: checkers.indexOf(checker) + 1,checkers.size(),checker.getClass().getSimpleName(),s.getSuccessTimes() * s.getSuccessInterval()
(%d/%d)\ start\ HaHostChecker\ %s\:\ predict\ time\ is\ [%d]\ seconds = （{0}/{1}）启动HaHostChecker{2}：预测时间为[{3}]秒

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:160
# args: self.getName(),self.getUuid()
cannot\ find\ the\ host\ of\ the\ vm[name\:%s,\ uuid\:%s],\ hostUuid\ is\ null = 找不到vm[name:{0}, uuid:{1}]的物理机, 因为hostUuid为null

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:167
# args: 
no\ HaHostChecker\ found,\ cannot\ do\ HA = 找不到HaHostChecker，无法执行HA

# at: src/main/java/org/zstack/ha/HaManagementNodeChecker.java:102
# args: 
the\ management\ node\ fails\ to\ scan\ the\ host = 管理节点扫描物理机失败

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1873
# args: vmUuid
the\ VM[uuid\:%s]\ volume\ stored\ location\ primary\ storage\ is\ in\ a\ state\ of\ maintenance = 云主机[{0}]云盘所在主存储处于维护状态

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1615
# args: 
VM\ is\ started\ successfully = 云主机已成功启动

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1618
# args: 
Failed\ to\ start\ the\ NeverStop\ VM = 无法启动NeverStop云主机

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:394
# args: newValue
the\ value[%s]\ is\ lesser\ than\ 0\ or\ greater\ than\ 1\  = 值[{0}]小于0或大于1

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:699
# args: HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)
A\ GC\ job\ is\ submitted\ to\ HA\ the\ VM[retry\ delay\:\ %s\ seconds] = 提交GC任务来高可用VM[重试间隔: {0} 秒]

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1301
# args: 
HA\ is\ successfully\ completed = HA已成功完成

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1309
# args: 
Failed\ to\ HA\ the\ VM = 高可用VM失败

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1195
# args: 
vm\ stopped\ unexpectedly,\ double\ check\ state = VM意外停止，请再次检查状态

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1204
# args: vmUuid,hostUuid
cannot\ determine\ VM[%s]\ status\ on\ host[%s],\ try\ to\ start\ it = 无法确定物理机[{1}]上的VM[{0}]状态，请尝试启动它

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1601
# args: 
vm\ state\ is\ stopped,\ try\ to\ start\ it = 云主机状态为“已停止”，请尝试启动它

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1227
# args: vmUuid,hostUuid
VM[%s]\ is\ running\ on\ host[%s] = VM[{0}]正在物理机[{1}]上运行

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1240
# args: vmUuid,hostUuid
VM[%s]\ is\ paused\ on\ host[%s] = 物理机[{1}]上的云主机[{0}]已暂停

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1268
# args: vm.getHypervisorType()
the\ hypervisor[%s]\ does\ not\ support\ VM\ HA = 当前云主机监视器(hypervisor)[{0}]不支持VM HA

# at: src/main/java/org/zstack/ha/HostCheckResult.java:59
# args: ratio,threshold,hostUuid,errors
[HA\ Worker]\:\ the\ success\ ratio[%s]\ below\ the\ threshold[%s],\ the\ host[uuid\:%s]\ is\ judged\ as\ dead,\ errors\ are\ %s.\ Start\ HA\ all\ the\ vms\ on\ this\ host\ before = [HA Worker]：成功率[{0}]低于阈值[{1}]，物理机[uuid：{2}]被判断为死，错误为{3}。之前在此物理机上启动所有云主机的HA

# at: src/main/java/org/zstack/ha/HostCheckResult.java:56
# args: ratio,threshold
[HA\ worker]\:\ all\ host\ checkers\ are\ finished\ and\ the\ success\ ratio\ is\ %s\ that\ is\ greater\ than\ the\ threshold[%s];\ no\ HA\ need\ for\ the\ vms\ on\ this\ host\ before.\ Please\ wait\ for\ the\ host\ reconnected = [HA Worker]：所有物理机检查器都已完成，成功率为{0}，大于阈值[{1}]。以前，此物理机上的云主机不需要HA。请等待物理机重新连接

# at: src/main/java/org/zstack/ha/NeverStopVmGC.java:102
# args: 
VM\ state\ is\ not\ running,\ try\ to\ start\ it = 云主机状态为未运行，请尝试启动它

# at: src/main/java/org/zstack/header/backup/NonBackupInfo.java:14
# args: 
enter\ the\ new\ value\ here,\ empty\ means\ no\ change. = 在此输入新值，空表示不变。

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:44
# args: type
keyType\ not\ supported\ type\ [%s] = KeyType不支持类型[{0}]

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:60
# args: msg.getKey(),msg.getType(),accountUuid
key\:\ [%s]\ with\ type\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = AccountUuId[{2}]已存在类型为[{1}]的项[{0}]

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:84
# args: msg.getKey(),accountUuid
key\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = key: [{0}]已经存在于accountUuid: [{1}]

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java:63
# args: msg.getRegionId(),ak
regionId\ [%s]\ already\ created\ by\ ak\ [%s] = 区域ID[{0}]已经被AccessKey[{1}]创建

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java:46
# args: type
dcType\ not\ supported\ type\ [%s] = DCType不支持类型[{0}]

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterManagerImpl.java:96
# args: msg.getUuid()
DataCenter\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = 区域[{0}]仍在同步进程中，请稍后

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:55
# args: msg.getZoneId(),izo.getUuid()
identity\ zone\ [%s]\ already\ existed,\ uuid\ is\:\ %s = 可用区[{0}]已经存在，uuid是{1}

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:72
# args: type,dvo.getDcType().toString()
type\ [%s]\ is\ not\ matched\ datacenter\ type\ [%s] = 类型[{0}]与区域类型[{1}]不匹配

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:82
# args: 
either\ dataCenterUuid\ or\ regionId\ should\ be\ set,\ please\ check\ the\ parameters. = dataCenterUuid和regionId应该被设置，请检查参数

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneManagerImpl.java:111
# args: msg.getUuid()
IdentityZone\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = 可用区[{0}]仍在同步进程中，请稍后

# at: src/main/java/org/zstack/hybrid/network/HybridEipCascadeExtension.java:88
# args: 
EcsInstance\ must\ be\ running\ or\ stopped\ while\ deleting\ eip\  = 删除弹性IP时云主机必须时允许中或者已停止

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:83
# args: vbri.getUuid(),vbri.getDataCenterUuid(),vrouteri.getUuid(),vrouteri.getDataCenterUuid()
router\ interface\ must\ be\ in\ the\ same\ datacenter,\ but\ ri[%s]\ is\ in\ dc[%s]\ and\ ri[%s]\ is\ in\ dc[%s] = 路由接口必须在相同的区域，但是接口[{0}]在区域[{1}]而接口[{2}]在区域[{3}]

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:93
# args: vrouteri.getUuid(),vrouteri.getStatus()
router\ interface[%s]\ status\ is\ not\ idle,\ it\ is\ %s = 路由接口[{0}]并非闲置状态，当前状态为{1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:101
# args: vrouteri.getUuid(),vrouteri.getOppositeInterfaceUuid()
router\ interface[%s]\ already\ has\ a\ connection,\ it\ is\ %s = 路由接口[{0}]已经有链接{1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:109
# args: 
accessPointUuid\ cannot\ be\ null\ if\ the\ router\ interface\ on\ VBR\ type\ router = 当路由接口的类型为VBR路由时，accessPointUuid不能为空

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:183
# args: 
cannot\ delete\ system\ entry = 不能删除系统路由条目

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:189
# args: 
only\ support\ intranet\ rule\ in\ vpc = 在VPC中仅仅支持内网规则

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:194
# args: msg.getCidr()
%s\ is\ not\ a\ valid\ cidr = {0}是一个无效的CIDR

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:204
# args: 
security\ group\ rule\ already\ existed = 安全组已经存在了

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:210
# args: msg.getDstCidrBlock()
dstCidrBlock[%s]\ is\ not\ a\ valid\ cidr = dstCidrBlock[{0}]是一个无效的CIDR

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:239
# args: msg.getNextHopType()
next\ hop\ type\ [%s]\ not\ supported\ create\ route\ entry\ now! = 不支持下一个跃点类型[{0}]，请立即创建路由条目！

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:235
# args: msg.getNextHopUuid()
no\ such\ vpn\ gateway\:\ %s = 没有这样的VPN网关: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:224
# args: rivo.getvRouterType().toString(),msg.getvRouterType()
nexthop\ routerInterface\ belongs\ to\ %s,\ but\ the\ entry\ belongs\ to\ %s = 下一跳路由接口类型是{0}，但是该路由类型是{1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:217
# args: msg.getNextHopUuid()
no\ such\ ecs\ instance\:\ %s = 没有这样的ESC云主机: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:249
# args: 
virtual\ border\ router\ only\ support\ routerinterface\ as\ next\ hop\ type = 作为下一跳类型，虚拟边界路由只支持路由接口

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:269
# args: msg.getCidrBlock(),vpcCidr
vswitch's\ cidr\ [%s]\ not\ in\ the\ vpc's\ [%s] = 虚拟交换机的CIDR没有在VPC[{1}]中

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:276
# args: old.getUuid()
cidr\ is\ overlap\ by\ another\ vswitch\:\ %s = CIDR和其他的虚拟交换机{0}有重叠

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:289
# args: msg.getCidrBlock()
invalid\ CidrBlock\:\ %s,\ which\ must\ subnet\ in\ '10.0.0.0/8',\ '172.16.0.0/12',\ '192.168.0.0/16' = 无效的CIDR块: {0}，CIDR必须在10.0.0.0/8、172.16.0.0/12和192.168.0.0/16子网内

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:305
# args: msg.getvRouterUuid()
no\ such\ virtual\ router\:\ %s = 没有这个的虚拟路由: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:300
# args: msg.getvRouterUuid()
no\ such\ virtual\ border\ router\:\ %s = 没有这个虚拟边界路由器: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:312
# args: msg.getLocalGatewayIp()
localGateway\ is\ not\ IPv4\:\ %s = 本地网关地址不是IPV4: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:315
# args: msg.getPeerGatewayIp()
peerGateway\ is\ not\ IPv4\:\ %s = 对端网关地址不是IPV4: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:318
# args: msg.getPeeringSubnetMask()
peerGateway\ is\ not\ subnet\ mask\:\ %s = 对端网关地址不是在子网掩码{0}中

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:322
# args: msg.getVlanId()
vlanId\ is\ not\ number\:\ %s = vlanId不是一个数字:{0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:332
# args: msg.getEcsUuid(),msg.getEipUuid(),hevo.getAllocateResourceUuid()
couldn't\ attach\ eip\ to\ ecs\:\ [%s]\ ,\ eip\ \:[%s]\ already\ attached\ ecs\:[%s]\  = 不能绑定弹性IP到ECS云主机[{0}]，弹性IP[{1}]已经绑定到ECS云主机[{2}]

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:337
# args: msg.getEcsUuid()
ecs\ [%s]\ already\ has\ public\ ip\ now = ECS云主机[{0}]已经拥有IP

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:343
# args: msg.getEipUuid(),msg.getEcsUuid()
couldn't\ attach\ eip\ [%s]\ to\ ecs\:\ [%s]\ ,\ ecs\ is\ already\ attached = 不能绑定弹性IP[{0}]到ECS云主机[{1}]，ECS云主机已经绑定了弹性IP

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:350
# args: msg.getEipUuid(),msg.getEcsUuid()
eip[%s]\ and\ ecs[%s]\ should\ be\ in\ the\ same\ dataCenter\  = 弹性IP[{0}]和ECS云主机[{1}]应该在同一个区域

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:359
# args: msg.getEipUuid()
couldn't\ detach\ eip\ \:[%s],\ it\ is\ not\ attached\ on\ any\ instance\  = 不能解绑弹性IP[{0}]，因为它没有绑定任何云主机

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:45
# args: msg.getId()
%s\ is\ not\ a\ valid\ ipv4\ address = {0}是一个无效的IPV4地址

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:51
# args: 
localCidr\ must\ be\ Cidr! = 本地CIDR必须是CIDR

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:55
# args: 
remoteCidr\ must\ be\ Cidr! = 远程CIDR必须是CIDR

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:62
# args: 
localCidr\ and\ remoteCidr\ must\ be\ Cidr! = 本地CIDR和远程CIDR必须是CIDR

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnGatewayCascadeExtension.java:80
# args: gateways.get(0).getUuid()
vpngateway\ [%s]\ existed,\ cannot\ delete\ remote = VPN网关[{0}]已经存在，不能删除远程的

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:343
# args: oldSession.getUserUuid()
The\ user[%s]\ is\ not\ a\ platform\ user = 用户[{0}]不是平台用户

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:994
# args: results.size()
There\ are\ %d\ problems\ with\ the\ file.\  = 文件中包含{0}个错误

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1011
# args: e.getMessage()
fail\ to\ load\ VirtualID\ info\ from\ file.\ because\n%s = 解析文件内容出错，{0}

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1022
# args: 
name\ cannot\ be\ empty.\  = 名称不能为空

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1030
# args: cmsg.getUsername()
userName[%s]\ is\ repeated.\  = 用户名[{0}]重复

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1028
# args: cmsg.username.length()
name\ exceeds\ max\ length\ of\ string.\ expected\ was\ <\=\ 255,\ actual\ was\ %s.\  = 名称字符数量不能超过255

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1026
# args: 
username\ cannot\ be\ empty.\  = 用户名不能为空

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1036
# args: cmsg.password.length()
Incorrect\ password\ length.\ expected\ was\ >\=\ 6\ and\ <\=\ 255,\ actual\ was\ %s.\  = 密码长度错误，应该大于等于6个字符，小于等于255字符

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1034
# args: 
password\ cannot\ be\ empty.\  = 密码不能为空

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1044
# args: 
email\ format\ does\ not\ match.\  = 邮箱格式错误

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1100
# args: noMatchNames
organization[%s]\ is\ not\ exist.\  = 部门[{0}]不存在

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1108
# args: repeatNames
organization[%s]\ in\ line\ is\ repeated.\  = 部门[{0}]出现重复

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1116
# args: repeatNames
organization[%s]\ is\ repeated.\  = 部门[{0}]出现重复

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1146
# args: noMatchName
project[%s]\ is\ not\ exist.\  = 项目[{0}]不存在

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1340
# args: 
fail\ to\ build\ VirtualID\ info\ from\ file.\  = 不能解析文件内容

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1469
# args: resourceUuid,projectUuid
virtualID[uuid\:%s]\ not\ in\ project[uuid\:%s] = VirtualID[uuid：{0}]不在项目[uuid：{1}]中

# at: src/main/java/org/zstack/iam2/IAM2OrganizationBase.java:144
# args: self.getUuid()
Can\ not\ do\ operations,\ because\ current\ organization[uuid\:%s]\ is\ staled,\ please\ enable\ it = 无法进行操作，因为当前组织[uuid：{0}]已过时，请启用该组织

# at: src/main/java/org/zstack/iam2/IAM2OrganizationBase.java:688
# args: puuid,self.getUuid()
organization[uuid\:%s]\ is\ parent\ of\ the\ organization[uuid\:%s],\ cannot\ set\ it\ as\ a\ child\ organization = 部门[uuid:{0}]是部门[uuid:{1}]的上级部门，无法被设置为子部门

# at: src/main/java/org/zstack/iam2/IAM2ProjectBase.java:130
# args: self.getUuid(),self.getName(),self.getState(),msg.getClass()
the\ project[uuid\:\ %s,\ name\:%s]\ is\ in\ state\ of\ %s\ which\ disallows\ the\ operation[%s] = 项目[[uuid: {0}, 名称:{1}]]是{2}状态，不允许执行[{3}]操作

# at: src/main/java/org/zstack/iam2/IAM2ProjectBase.java:910
# args: 
can\ not\ parse\ the\ cron\ expression = 无法分析Cron表达式

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:43
# args: loginContext.getUsername()
project[name\:%s]\ not\ existing = 项目[name:{0}]不存在

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:51
# args: puuid,loginContext.getUsername()
no\ account\ found\ for\ project[uuid\:%s,\ name\:%s] = 未找到项目[uuid：{0}，名称：{1}]的帐户

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:57
# args: loginContext.getOperatorSession().getUserUuid()
wrong\ virtual\ ID[uuid\:%s],\ not\ existing\ or\ wrong\ password = 错误的virtual ID[uuid:{0}], 密码不存在或者密码错误

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:62
# args: vid.getName()
virtual\ ID[name\:%s]\ is\ disabled = virtual ID[名称:{0}]不可用

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:72
# args: vid.getName(),loginContext.getUsername()
virtual\ ID[name\:%s]\ not\ belonging\ to\ the\ project[name\:%s] = virtual ID[名称:{0}]不属于项目[name:{1}]

# at: src/main/java/org/zstack/iam2/IAM2QuotaUpdateChecker.java:75
# args: quota.getName(),quota.getIdentityUuid(),updatedValue,organizationUuid
the\ quota[name\:%s]\ of\ Account[uuid\:%s]\ can\ not\ be\ %d,\ otherwise\ it\ will\ exceeds\ the\ quota\ of\ organization[uuid\:%s] = 帐户[uuid：{1}]的配额[名称：{0}]不能为{2}，否则将超过组织[uuid：{3}]的配额

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:256
# args: self.getUuid()
Can\ not\ do\ operations,\ because\ Current\ virtualID[uuid\:%s]\ is\ staled,\ please\ enable\ it = 无法执行操作，因为当前VirtualID[uuid：{0}]已过时，请启用它

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:649
# args: 
only\ admin\ and\ the\ virtual\ ID\ itself\ can\ do\ the\ update = 只有admin和virtual ID本身可以执行更新操作

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:653
# args: msg.getVirtualIDUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ virtual\ ID[uuid\:%s] = 旧密码不等于原始密码，无法更新虚拟ID[uuid：{0}]的密码

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:50
# args: attr.getValue()
attribute\ name\ cannot\ be\ null,\ value[%s] = 属性不能为null，输入值[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:54
# args: attr.getName()
attribute\ name[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = 属性名称[{0}]不能超过2048个字符

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:57
# args: attr.getName(),attr.getValue()
attribute[name\:%s]\ value[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = 属性[name:{0}] value[{1}]不能超过2048个字符

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:173
# args: msg.getOrganizationUuid(),msg.getName(),projectUsed,msg.getValue()
The\ Organization[uuid\:\ %s]\ used\ [name\:\ %s,\ usedValue\:\ %s]\ exceeds\ Request\:%s. = 组织[uuid：{0}]使用的[名称：{1}，UsedValue：{2}]超出请求：{3}。

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:186
# args: msg.getLoginExpired()
%s\ is\ not\ a\ valid\ value.\ Valid\ values\ are\ \ allow/rejection\ \ xxx\ to\ xxx = {0}不是有效值。有效值为允许/拒绝XXX至XXX

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:192
# args: msg.getUuid()
The\ default\ organization[%s]\ cannot\ be\ deleted = 无法删除默认组织[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:201
# args: msg.getName()
duplicate\ template\ name[%s] = 重复的模板名称[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:652
# args: IAM2RolePolicyStatementHelper.PROJECT_ADMIN_ROLE_NAME
illegal\ operation,\ cannot\ add\ Role[%s] = 非法操作，无法添加角色[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:265
# args: 
admin\ is\ a\ reserved\ name,\ please\ use\ another\ name = admin是保留名称，请使用其他名称

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:273
# args: msg.getName()
invalid\ name[%s],\ there\ has\ been\ a\ project\ or\ account\ with\ the\ same\ name = 无效的名称[{0}],已经存在同名的项目或账户

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:281
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ group = 属性[uuid：{0}]不适用于任何组

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:289
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ organization = 属性[uuid：{0}]不适用于任何组织

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:297
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ project = 属性[uuid：{0}]不适用于任何项目

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:305
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ virtual\ ID = 属性[uuid：{0}]不适用于任何虚拟ID

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:325
# args: 
retire\ policy\ must\ be\ deleted\ before\ pull\ the\ project\ out\ of\ Retired\ state = 在将项目从已停用状态拉出之前，必须删除停用策略

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:337
# args: state
login\ is\ prohibited\ because\ the\ project\ is\ in\ state\ of\ %s = 禁止登录，因为项目处于{0}状态

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:347
# args: name
no\ quota[name\:%s]\ found = 未找到配额[名称：{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:371
# args: msg.getUuid()
organization[uuid\:%s]\ is\ a\ Company\ that\ cannot\ have\ parent\ organization = 组织[uuid：{0}]是不能有上级组织的公司

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:381
# args: msg.getUuid(),msg.getParentUuid()
parent\ organization[uuid\:%s]\ cannot\ be\ a\ child\ organization[uuid\:%s]\ of\ a\ childOrganization = 父组织[uuid：{0}]不能是子组织[uuid：{1}]的子组织

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:400
# args: msg.getName()
duplicate\ virtualID\ name[%s] = 重复的用户名[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:418
# args: msg.getName()
duplicate\ project\ name[%s] = 重复的项目名[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:426
# args: msg.getName()
invalid\ project\ name[%s],\ an\ account\ or\ project\ with\ the\ same\ name\ exists = 无效的项目名[{0}]，已有账户或项目使用了相同的名称

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:432
# args: msg.getOrganizationUuid()
IAM2OrganizationVO[uuid\:%s]\ is\ not\ exists = Iam2OrganizationVO[uuid：{0}]不存在

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:515
# args: refVO.getProjectUuid(),refVO.getOrganizationUuid()
The\ project[uuid\=%s]\ has\ been\ attached\ to\ the\ organization[uuid\=%s] = 项目[uuid={0}]已附加到组织[uuid={1}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:557
# args: msg.getProjectUuid()
The\ project[uuid\=%s]\ is\ not\ attached = 未附加项目[uuid={0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:568
# args: uuids
organizations%s\ are\ company\ that\ cannot\ be\ children\ of\ other\ organization = 组织{0}类型是子公司，不能设置为其它组织的部门

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:582
# args: msg.getVirtualIDUuid(),msg.getProjectUuid()
virtual\ id[uuid\:\ %s]\ is\ not\ in\ project[uuid\:\ %s] = 虚拟ID[uuid：{0}]不在项目[uuid：{1}]中

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:679
# args: staleVirtualIDs
can\ not\ operate\ stale\ virtual\ ids\:\ %s = 无法操作无效的用户: {0}

# at: src/main/java/org/zstack/iam2/attribute/SystemAttributes.java:69
# args: 
attribute[name\:%s]\ is\ a\ system\ attribute\ that\ cannot\ be\ updated = 属性[名称：{0}]是一个系统属性，无法被更新

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:38
# args: inv.getValue()
virtual\ ID[uuid\:%s]\ not\ existing = 用户[uuid:{0}]不存在

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:45
# args: inv.getValue(),((IAM2OrganizationAttributeInventory) inv).getOrganizationUuid()
virtual\ ID[uuid\:%s]\ not\ in\ organization[uuid\:%s] = 虚拟ID[uuid：{0}]不在组织中[uuid：{1}]

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:50
# args: oinv.getOrganizationUuid()
organization[uuid\:%s]\ already\ has\ a\ supervisor = 组织[uuid:{0}]已经设置了负责人

# at: src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java:58
# args: pinv.getUuid(),pinv.getName()
the\ project[uuid\:%s,\ name\:%s]\ already\ has\ a\ login\ expired\ strategy = 项目[uuid：{0}，名称：{1}]已有登录过期策略

# at: src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java:109
# args: projectUuid,ProjectState.Enabled.toString()
IAM2ProjectVO[uuid\:%s]\ is\ not\ %s,\ state\ change\ is\ not\ allowed = Iam2ProjectVO[uuid：{0}]不是{1}，不允许更改状态

# at: src/main/java/org/zstack/iam2/attribute/project/Retire.java:65
# args: pinv.getUuid(),pinv.getName()
the\ project[uuid\:%s,\ name\:%s]\ already\ has\ a\ retire\ policy = 项目[uuid:{0}, name:{1}]已经设置了回收策略

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:53
# args: 
invalid\ value,\ no\ 'at',\ 'after'\ or\ 'exceed'\ found = 无效的值，找不到关键字no 'at', 'after' or 'exceed'

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:58
# args: value
invalid\ value,\ %s = 无效的值, {0}

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:64
# args: ss[0],Arrays.asList(Means.values()).toString()
invalid\ means[%s],\ allowed\ means\ are\ %s = 无效的回收方法[{0}]，允许的方法是{1}

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:100
# args: policyValue
invalid\ spending\ value[%s],\ it\ should\ be\ in\ format\ of\ for\ example\ 10.001 = 无效的费用[{0}], 费用格式应该符合例如：10.001

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:94
# args: policyValue,Double.MAX_VALUE
invalid\ spending\ value[%s],\ spending\ value\ should\ between\ 0\ and\ %f = 无效的费用[{0}], 费用范围应该在0到{1}之间

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:87
# args: policyValue
invalid\ time[%s],\ it\ should\ be\ in\ format\ of\ for\ example\ 10m,\ 1h,\ 2d = 无效的时间[{0}]，时间格式需要符合例如：10m, 1h, 2d

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:78
# args: policyValue
invalid\ date[%s],\ it\ should\ be\ in\ format\ of\ yyyy-MM-dd\ HH\:mm\:ss = 无效的日期，日期格式需要符合：yyyy-MM-dd HH:mm:ss

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:107
# args: policyValue,dateFormat.format(new Timestamp(System.currentTimeMillis()))
invalid\ date\ or\ time[%s],\ it\ cannot\ be\ before\ current\ time[%s] = 无效的日期或时间，回收时间不能在当前时间之前[{1}]

# at: src/main/java/org/zstack/iam2/attribute/virtualid/AbstractAdminAttribute.java:17
# args: vid,attributeName
virtual\ ID[uuid\:%s]\ already\ has\ admin\ related\ attributes,\ can\ not\ add\ %s = 用户[uuid:{0}]已经有管理员属性了，无法继续添加属性{1}

# at: src/main/java/org/zstack/iam2/attribute/virtualid/IAM2OrganizationOperator.java:29
# args: inv.getValue(),IAM2_ORGANIZATION_OPERATION.getName()
organiztion\ ID[uuid\:%s]\ already\ has\ opoeration\ attributes,\ can\ not\ add\ %s = 组织ID[uuid：{0}]已具有Poeration属性，无法添加{1}

# at: src/main/java/org/zstack/iam2/attribute/virtualid/IAM2ProjectOperator.java:35
# args: idinv.getVirtualIDUuid()
virtual\ id[uuid\:%s]\ already\ has\ a\ project\ operator\ attribute = 虚拟ID[uuid：{0}]已具有项目运算符属性

# at: src/main/java/org/zstack/iam2/attribute/virtualid/PlatformAdminZoneRelation.java:36
# args: inv.getValue()
cannot\ find\ zone[uuid\:%s] = 找不到区域[uuid:{0}]

# at: src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:71
# args: inv.getValue()
project[uuid\:%s]\ already\ has\ a\ project\ admin = 项目[uuid:{0}]已经设置过项目管理员了

# at: src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:83
# args: inv.getValue()
project[uuid\:%s]\ not\ existing = 项目[uuid:{0}]不存在

# at: src/main/java/org/zstack/iam2/rbac/IAM2AuthorizationBackend.java:133
# args: deniedApis
the\ operations[%s]\ is\ denied = 操作[{0}]被拒绝

# at: src/main/java/org/zstack/iam2/rbac/IAM2OperationTargetAPIRequestChecker.java:114
# args: 
since\ the\ project\ starts\ the\ force\ securityGroup,\ systemtag\ is\ required\ for\ VM\ operation = 由于项目启动了Force SecurityGroup，因此VM操作需要SystemTag

# at: src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java:28
# args: session.getAccountUuid()
project\ of\ account[uuid\:%s]\ not\ exists = 账户为[uuid:{0}]的项目不存在

# at: src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java:37
# args: projectUuid
project[uuid\:%s]\ is\ retired,\ reject\ all\ operations = 项目[uuid:{0}]已经过期，无法操作

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:107
# args: 
system\ tag\ requested.\ need\ specify\ default\ security\ group\ for\ vm\ nic\ by\ system\ tag\ L3_NETWORK_SECURITY_GROUP_uuidS_REF\ with\ format\ l3\:\:{%s}\:\:SecurityGroupUuids\:\:{%s},\ because\ force\ security\ group\ is\ enabled = 已请求系统标记。需要按系统标记L为VM NIC指定默认安全组3_网络_安全_组_uuid_引用，格式为L3:{0}：SecurityGroupUUIds：{1}，因为启用了强制安全组

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:114
# args: l3Uuid,msg.getL3NetworkUuid()
the\ l3Uuid[%s]\ in\ the\ label\ is\ inconsistent\ with\ the\ l3Uuid[%s]\ in\ the\ parameter = 标签中的L3uuid[{0}]与参数中的L3uuid[{1}]不一致

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:124
# args: projectUuid
since\ force\ security\ group\ is\ enabled,\ securityGroupUuid\ in\ the\ tag\ must\ be\ in\ the\ project[%s] = 由于启用了强制安全组，因此标记中的SecurityGroupuuid必须在项目[{0}]中

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:145
# args: msg.getL3NetworkUuid(),msg.getSecurityGroupUuid()
nics\ on\ the\ l3Network[uuid\:%s]\ are\ attached\ to\ the\ securityGroup.\ before\ you\ can\ detach\ the\ l3Network\ from\ the\ securityGroup,\ you\ need\ to\ detach\ the\ nics\ from\ the\ securityGroup. = 三层网络[uuid：{0}]上的NIC已连接到SecurityGroup。在将L3Network与SecurityGroup分离之前，需要将NIC与SecurityGroup分离。

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:161
# args: msg.getUuid()
the\ default\ security\ group\ %s\ cannot\ be\ deleted\ by\ enabling\ the\ enforced\ security\ group\ function = 无法通过启用强制安全组功能来删除默认安全组{0}

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:165
# args: msg.getUuid()
this\ security\ group\ %s\ is\ bound\ to\ vm,\ please\ try\ again\ after\ unbinding = 此安全组{0}已绑定到VM，请在解除绑定后重试

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:175
# args: sessionInventory.getAccountUuid(),securityGroupUuid
account[%s]\ cannot\ operation\ the\ default\ securityGroup[%s] = 帐户[{0}]无法操作默认SecurityGroup[{1}]

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:187
# args: msg.getSession().getAccountUuid()
account[%s]\ not\ allowed\ to\ operate\ on\ default\ securityGroup = 不允许帐户[{0}]对默认的SecurityGroup进行操作

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:241
# args: refVOS.stream().map(VmNicSecurityGroupRefVO::getVmNicUuid).collect(Collectors.joining(",")),msg.getSecurityGroupUuid()
vm's\ nic[uuid\:%s]\ only\ has\ one\ security\ group,\ can\ not\ delete\ the\ nic\ from\ security\ group[uuid\:%s] = VM的NIC[uuid：{0}]只有一个安全组，无法从安全组[uuid：{1}]中删除NIC

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java:60
# args: projectUuid
can't\ find\ the\ quota\ for\ the\ security\ group\ for\ the\ corresponding\ project\ %s = 找不到对应项目{0}的安全组的配额

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java:64
# args: 
security\ group\ quota\ cannot\ less\ than\ 1 = 安全组配额不能小于1

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:35
# args: 
The\ iam2\ script\ function\ is\ not\ enabled. = 未启用IAM2脚本函数。

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:39
# args: 
Script\ doesn't\ have\ any\ content. = 脚本没有任何内容。

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:45
# args: 
The\ amount\ of\ params\ exceeds\ the\ limit. = 参数数量超过限制。

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:61
# args: 
Specified\ script\ executor\ are\ not\ supported. = 不支持指定的脚本执行程序。

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:139
# args: 
Decode\ script\ content\ failed. = 解码脚本内容失败。

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:147
# args: 
Script\ content\ is\ blank. = 脚本内容为空。

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:179
# args: 
Run\ iam2\ script\ failed. = 运行IAM2脚本失败。

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:244
# args: 
Cannot\ read\ the\ result\ of\ the\ script\ running. = 无法读取脚本运行的结果。

# at: src/main/java/org/zstack/identity/AccountBase.java:327
# args: group.getUuid(),msg.getAccountUuid()
the\ user\ group[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = 这个用户组[uuid:{0}]不属于当前账户[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:528
# args: self.getUuid(),ruuid
the\ account[uuid\:\ %s]\ doesn't\ have\ a\ resource[uuid\:\ %s] = 账户[uuid: {0}]没有资源[uuid: {1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:590
# args: user.getUuid(),msg.getAccountUuid()
the\ user[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = 当前用户[uuid:{0}]不属于当前账户[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:595
# args: user.getUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ user[uuid\:%s] = 旧密码不等于原始密码，无法更新用户[uuid：{0}]的密码

# at: src/main/java/org/zstack/identity/AccountInterceptor.java:55
# args: 
wrong\ password = 密码错误

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1660
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ effect\ field.\ Invalid\ statement[%s] = 声明必须含有'effect'字段。 无效的声明

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1663
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ action\ field.\ Invalid\ statement[%s] = 声明必须含有'action'字段。 无效的声明

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1666
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ a\ non-empty\ action\ field.\ Invalid\ statement[%s] = 声明必须含有不为空的'action'字段。 无效的声明

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:175
# args: resourceUuid
cannot\ find\ the\ resource[uuid\:%s];\ wrong\ resourceUuid\ or\ the\ resource\ is\ admin\ resource = 无法找到资源[uuid:{0}]: 错误的资源uuid或者资源是管理员资源

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:405
# args: msg.getUserUuid()
the\ user\ specified\ by\ the\ userUuid[%s]\ does\ not\ belong\ to\ the\ current\ account,\ and\ the\ current\ account\ is\ not\ an\ admin\ account,\ so\ it\ has\ no\ permission\ to\ check\ the\ user'spermissions = 当前通过userUuid获得的user不属于当前账户，而且当前账户不是管理员账户

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1055
# args: accountUuid
cannot\ find\ the\ account[uuid\:%s] = 找不到账户[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1495
# args: 
accountName\ and\ accountUuid\ cannot\ both\ be\ null,\ you\ must\ specify\ at\ least\ one = accountName和accountUuid不能同时为空，您必须定义至少一个

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1506
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ group.\ A\ group\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = 不能创建用户组，用户组“{0}”已经在账户“{0}”下了

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1516
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ user.\ A\ user\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = 不能创建用户，用户“{0}”已经在账户“{0}”下了

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1525
# args: msg.getName()
unable\ to\ create\ an\ account.\ An\ account\ already\ called\ %s = 不能创建账户，“{0}”已经被使用

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1532
# args: 
account\ cannot\ delete\ itself = 账户不能删除自己

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1538
# args: 
cannot\ delete\ builtin\ admin\ account. = 无法删除内置管理员帐户。

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1544
# args: 
Only\ admin\ can\ delete\ account. = 只有admin能删除账户

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1552
# args: 
the\ current\ session\ is\ an\ account\ session.\ You\ need\ to\ specify\ the\ field\ 'uuid'\ of\ the\ user\ you\ want\ to\ update = 当前会话是一个账户会话，你需要定义一个'uuid'字段来指定你要更新的用户

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1567
# args: msg.getUuid()
your\ are\ login\ as\ a\ user,\ you\ cannot\ another\ user[uuid\:%s] = 你已经登录为一个用户，不能成为另一个用户[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1575
# args: 
all\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = all参数被设为false时，账户uuid不能为空

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1583
# args: 
toPublic\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = toPublic参数被设为false时，账户uuid不能为空

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1632
# args: policy.getName(),policy.getUuid(),msg.getSession().getAccountUuid()
policy[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = 策略[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1646
# args: user.getName(),user.getUuid(),msg.getSession().getAccountUuid()
user[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = 用户[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1650
# args: group.getName(),group.getUuid(),msg.getSession().getAccountUuid()
group[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = 用户组[名称: {0}, uuid: {1}]不属于账户[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1691
# args: msg.getName()
unable\ to\ update\ name.\ An\ account\ already\ called\ %s = 无法更新名称。已有一个名为{0}的帐户

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1702
# args: msg.getUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ account[uuid\:\ %s] = 旧密码不等于原始密码，无法更新帐户[uuid：{0}]的密码

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1707
# args: 
the\ name\ of\ admin\ account\ cannot\ be\ updated = 不能更改管理员账户名称

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1713
# args: 
only\ admin\ account\ can\ update\ it's\ password = 只有管理员帐户才能更新其密码

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1720
# args: account.getUuid(),account.getName(),msg.getUuid()
account[uuid\:\ %s,\ name\:\ %s]\ is\ a\ normal\ account,\ it\ cannot\ reset\ the\ password\ of\ another\ account[uuid\:\ %s] = [uuid: {0}, 名称: {1}]是一个普通账户，不能被其他普通账户重设密码

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1731
# args: msg.getName(),msg.getIdentityUuid()
cannot\ find\ Quota[name\:\ %s]\ for\ the\ account[uuid\:\ %s] = 无法为当前账户[uuid: {1}]找到Quota

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1738
# args: quota.getIdentityUuid(),quota.getIdentityType()
can\ not\ find\ quota\ update\ checker\ for\ quota[uuid\:%s,\ type\:%s] = 找不到配额[uuid：{0}，类型：{1}]的配额更新检查器

# at: src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java:32
# args: quota.getName(),quota.getIdentityUuid(),updatedValue
the\ quota[name\:%s]\ of\ account[uuid\:%s]\ can\ not\ be\ %d = 帐户[uuid：{1}]的配额[名称：{0}]不能为{2}

# at: src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java:54
# args: accountUuid,quotaName,used,updatedValue
the\ account[uuid\:%s]\ used\ [name\:%s,\ usedValue\:%s]\ exceeds\ request\ quota\:\ %d = 帐户[uuid：{0}]使用的[名称：{1}，UsedValue：{2}]超过了请求配额：{3}

# at: src/main/java/org/zstack/identity/login/LoginManagerImpl.java:46
# args: loginType
unsupported\ login\ type\ %s = 不支持的登录类型{0}

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:180
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),uuid,resourceType.getSimpleName()
permission\ denied,\ the\ account[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ resource[uuid\:%s,\ type\:%s] = 操作错误，账户[uuid:{0}]不是资源[uuid:{1}, type:{2}]的所有者

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:228
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),uuid,type
permission\ denied,\ the\ account[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ tagged\ resource[uuid\:%s,\ type\:%s] = 权限被拒绝，帐户[uuid：{0}]不是已标记资源[uuid：{1}，类型：{2}]的所有者

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:251
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),resourceWithNoAccess,resourceType.getSimpleName()
the\ account[uuid\:%s]\ has\ no\ access\ to\ the\ resources[uuid\:%s,\ type\:%s] = 账户[uuid:{0}]无法使用资源[uuid:{1}, type:{2}]

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:80
# args: rbacEntity.getApiMessage().getClass().getName()
operation[API\:%s]\ is\ denied\ by\ default,\ please\ contact\ admin\ to\ correct\ it = 默认情况下拒绝操作[API：{0}]，请与管理员联系以更正

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:187
# args: p.getName(),p.getUuid()
the\ operation\ is\ denied\ by\ the\ policy[name\:%s\ uuid\:%s] = 操作被策略[名称：{0}uuid：{1}]拒绝

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:200
# args: p.getName(),p.getUuid(),fname
the\ operation\ is\ denied\ by\ the\ policy[name\:%s,\ uuid\:%s],\ field[%s]\ is\ not\ permitted\ to\ set = 策略[名称：{0}，uuid：{1}]拒绝该操作，不允许设置字段[{2}]

# at: src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java:92
# args: 
cannot\ update\ a\ system\ or\ predefined\ role = 无法更新系统角色或预定义角色

# at: src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java:108
# args: 
cannot\ delete\ a\ system\ or\ predefined\ role = 无法删除系统角色或预定义角色

# at: src/main/java/org/zstack/image/AddImageLongJob.java:187
# args: 
Failed\ because\ management\ node\ restarted. = 失败，因为管理节点已重新启动。

# at: src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java:35
# args: backupStorageUuid,bsStatus
the\ backup\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = 镜像服务器[uuid:{0}]不是Connected状态，当前状态为{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:101
# args: 
The\ aarch64\ architecture\ does\ not\ support\ legacy. = AARCH64体系结构不支持旧版。

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:108
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = 云盘[uuid:{0}]未Ready，它现在为{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:112
# args: vol.getUuid(),vol.getState()
volume[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = 云盘[uuid:{0}]未Enabled，它现在为{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:119
# args: vsvo.getUuid(),vsvo.getStatus()
volume\ snapshot[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = 卷快照[uuid：{0}]未就绪，它是{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:123
# args: vsvo.getUuid(),vsvo.getState()
volume\ snapshot[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = 卷快照[uuid：{0}]未启用，它是{1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:142
# args: 
ISO\ cannot\ be\ used\ as\ system\ image = ISO不能被作为一个系统标签

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:148
# args: msg.getFormat()
unknown\ format[%s] = 未知格式[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:152
# args: msg.getType()
unsupported\ image\ type[%s] = 不支持的镜像类型[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:169
# args: msg.getBackupStorageUuids(),BackupStorageStatus.Connected,BackupStorageState.Enabled
no\ backup\ storage\ specified\ in\ uuids%s\ is\ available\ for\ adding\ this\ image;\ they\ are\ not\ in\ status\ %s\ or\ not\ in\ state\ %s,\ or\ the\ uuid\ is\ invalid\ backup\ storage\ uuid = 镜像服务器uuids{0}不满足添加镜像的条件；它们的状态不同时满足{1}和{2},亦或者是无效的uuid

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:180
# args: 
url\ must\ starts\ with\ 'file\:///',\ 'http\://',\ 'https\://'，\ 'ftp\://',\ 'sftp\://'\ or\ '/' = url必须以下列格式开头'file:///', 'http://', 'https://'， 'ftp://', 'sftp://' or '/'

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:191
# args: path
absolute\ path\ must\ be\ used = 必须使用绝对路径

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:214
# args: path,blackList.value()
image\ path\ [%s]\ is\ in\ black\ list\ %s = 镜像路径[{0}]在黑名单{1}中

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:223
# args: 
all\ images\ on\ this\ server\ cannot\ be\ used = 无法使用此服务器上的所有镜像

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:228
# args: whiteList.value()
image\ path\ is\ not\ in\ white\ list\:\ %s = 镜像路径不在白名单中：{0}

# at: src/main/java/org/zstack/image/ImageBase.java:214
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ any\ backup\ storage = 镜像[uuid:{0}, 名称:{1}]不在任一镜像服务器上

# at: src/main/java/org/zstack/image/ImageBase.java:224
# args: self.getUuid(),self.getName()
No\ connected\ backup\ storage\ found\ for\ image[uuid\:%s,\ name\:%s] = 在所有 Connected 状态的镜像服务器上都找不到镜像[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/image/ImageBase.java:416
# args: msg.getImageUuid(),JSONObjectUtil.toJsonString(errors)
detach\ iso[uuid\=%s]\ from\ vm\ failed,\ errors\ are\ %s = 从VM分离ISO[uuid={0}]失败，错误为{1}

# at: src/main/java/org/zstack/image/ImageBase.java:782
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ the\ backup\ storage[uuid\:%s] = 镜像[uuid:{0}, 名称:{1}]不在镜像服务器[uuid:{2}]上

# at: src/main/java/org/zstack/image/ImageBase.java:724
# args: self.getUuid(),self.getName(),ref.getStatus(),bsUuid
the\ image[uuid\:%s,\ name\:%s]'s\ status[%s]\ is\ not\ Deleted\ on\ the\ backup\ storage[uuid\:%s] = 镜像[uuid:{0}, 名称:{1}]的状态[{2}]在镜像服务器[uuid:{3}]上不是Deleled

# at: src/main/java/org/zstack/image/ImageBase.java:766
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ any\ backup\ storage = 镜像[uuid:{0}, 名称:{1}]未在任一镜像服务器上被删除

# at: src/main/java/org/zstack/image/ImageBase.java:787
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ the\ backup\ storage[uuid\:%s] = 镜像[uuid:{0}, 名称:{1}]未在镜像服务器[uuid:{2}]上被删除

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:812
# args: bootModeCount
only\ one\ bootMode\ system\ tag\ is\ allowed,\ but\ %d\ got = 只允许一个Bootmode系统标记，但{0}获得了

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:830
# args: bootMode,systemTag
[%s]\ specified\ in\ system\ tag\ [%s]\ is\ not\ a\ valid\ boot\ mode = 系统标记[{1}]中指定的[{0}]不是有效的启动模式

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1455
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids%s,\ list\ errors\ are\:\ %s = 不能根据[uuids:{0}]分配镜像服务器，错误清单为: {1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1581
# args: rootVolumeUuid
failed\ to\ create\ image\ from\ root\ volume[uuid\:%s]\ on\ all\ backup\ storage,\ see\ cause\ for\ one\ of\ errors = 在所有镜像服务器上从云盘[uuid:{0}]创建镜像失败，查看错误原因

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1809
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
failed\ to\ allocate\ all\ backup\ storage[uuid\:%s],\ a\ list\ of\ error\:\ %s = 镜像服务器[uuid:{0}]分配失败，错误清单:{1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1779
# args: 
cannot\ find\ proper\ backup\ storage = 找不到适当的备份存储

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1922
# args: volumeUuid,msgData.getBackupStorageUuids()
failed\ to\ create\ data\ volume\ template\ from\ volume[uuid\:%s]\ on\ all\ backup\ storage%s.\ See\ cause\ for\ one\ of\ errors = 在所有镜像服务器[uuid:{1}]上创建云盘[uuid:{0}]的云盘模版失败，查看错误原因

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1999
# args: imageUuid
image[uuid\:%s]\ is\ not\ on\ creating,\ please\ wait\ for\ it\ to\ cancel\ itself. = 镜像[uuid：{0}]未处于创建状态，请等待其自行取消。

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:2005
# args: volumeUuid
volume[uuid\:%s]\ has\ been\ deleted.\ no\ need\ to\ cancel = 卷[uuid：{0}]已删除。不需要取消。

# at: src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java:48
# args: 
Failed\ to\ set\ security\ level,\ because\ security\ level\ is\ disabled. = 设置密级失败，因为密级功能已禁用

# at: src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java:58
# args: msg.getSecurityLevel(),Arrays.stream(SecurityLevel.values()).map(SecurityLevel::getCode).collect(Collectors.toList())
Unknown\ security\ level\ code[%s],\ supported\ values\ are\ %s = 未知的密级[{0}]，支持的值有[{1}]

# at: src/main/java/org/zstack/image/UploadImageTracker.java:197
# args: 
upload\ session\ expired = 上传session失效了

# at: src/main/java/org/zstack/imagereplicator/ImageReplicatorImpl.java:366
# args: targetBsUuid
target\ backup\ storage[uuid\:%s]\ became\ unavailable = 目标备份存储[uuid：{0}]变得不可用

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:30
# args: String.join(",", msg.getBackupStorageUuids()),msg.getReplicationGroupUuid()
One\ or\ more\ backup\ storage[uuids\:%s]\ has\ been\ added\ to\ replication\ group[uuid\:%s] = 已将一个或多个备份存储[uuid：{0}]添加到复制组[uuid：{1}]

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:41
# args: bsUuid
Backup\ storage[uuids\:%s]\ is\ not\ of\ type\ ImageStore = 备份存储[uuid：{0}]不属于ImageStore类型

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:51
# args: bsUuid
Backup\ storage[uuids\:%s]\ is\ not\ attached\ to\ any\ Zone = 备份存储[uuid：{0}]未连接到任何区域

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:65
# args: l3NetworkUuid
Network\ [uuid\:\ %s]\ does't\ not\ have\ IPsec\ service = 网络[uuid: {0}]没有IPsec服务

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:74
# args: rcidr
the\ remote\ CIDR[%s]\ is\ same\ to\ existed\ cidrs = 远程CIDR[{0}]与现有的CIDR相同

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:86
# args: rcidr,tempCidr
the\ remote\ CIDR[%s]\ and\ remote\ CIDR[%s]\ are\ overlaped = 远程的CIDR[{0}]和远端CIDR[{1}]存在覆盖

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:109
# args: lcidr,tempCidr
the\ CIDR[%s]\ of\ local\ router\ and\ remote\ CIDR[%s]\ are\ overlaped = 本地路由的CIDR[{0}]和远端CIDR存在覆盖

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:122
# args: 
all\ networks\ in\ same\ IPsecConnection\ should\ be\ same\ type = 在相同的IPsec连接中的所有连接应该是相同类型

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:128
# args: L3NetworkConstant.L3_BASIC_NETWORK_TYPE
IPsecConnection\ can\ ONLY\ have\ 1\ network\ for\ %s = IPsec连接只能有一个网络服务

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:140
# args: l3Uuid
L3Network\ [uuid\:\ %s]\ has\ not\ been\ attached\ to\ vpc\ router = 三层网络[uuid:{0}]还没有绑定VPC路由

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:162
# args: vrUuids.toArray()[0]
there\ is\ no\ master\ vpc\ for\ ha\ group\ %s = 高可用性组{0}没有主VPC

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:159
# args: 
all\ networks\ in\ same\ IPsecConnection\ must\ be\ attached\ to\ same\ VPC\ router = 在相同的IPsec连接中的所有网络必须绑定在相同的VPC路由

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:172
# args: masterUuid
there\ is\ a\ vpc[%s]\ using\ old\ ipsec\ plugin,\ upgrade\ it\ to\ create\ ipsec = 存在使用旧IPSec插件的VPC[{0}]，请升级该插件以创建IPSec

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:185
# args: tuples.get(0).get(0, String.class),tuples.get(0).get(1, String.class)
there\ already\ have\ ipsec\ connection[uuid\:%s,\ name\:%s]\ with\ the\ same\ vrouter\ and\ peerAddress = 这里已经有相同云路由和对端地址的IPsec连接[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:209
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ has\ been\ used\ for\ %s = 虚拟IP[uuid:{0}]已经用作网络服务 {1}

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:214
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ cannot\ be\ the\ same\ to\ the\ VIP\ address = 对端地址[{0}]不能和虚拟IP地址相同

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:218
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ is\ not\ an\ IPv4\ address = 对端地址[{0}]不是一个IPv4地址

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:230
# args: 
the\ authKey\ cannot\ contain\ white\ space\ and\ special\ characters\ of\ '\"`\\ = 验证码不能包含空格和以下字符:'\"`\\

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:249
# args: vipVO.getIp()
Ipsec\ VIP\ [%s]\ cannot\ be\ the\ first\ or\ the\ last\ IP\ of\ the\ CIDR\ with\ the\ public\ address\ pool\ type = IPSec VIP[{0}]不能是具有公用地址池类型的CIDR的第一个或最后一个IP

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:281
# args: 
must\ include\ l3\ networks\ in\ APIAttachL3NetworksToIPsecConnectionMsg = 参数中缺少三层网络的uuid

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:288
# args: l3NetworkUuid
L3\ network\ [%s]\ is\ not\ vpc\ network,\ can\ not\ be\ attached\ or\ detached\ to\ ipsec = 三层网络[{0}]不是VPC网络，不能绑定或解绑IPsec

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:269
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ can\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s]twice = 三层网络[{0}]不能绑定IPsec[uuid :{1}]两次

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:292
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ is\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s] = 三层网络[{0}]不能绑定IPsec[uuid :{1}]

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:302
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ already\ in\ the\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = CIDR[{0}]已经在IPsec[uuid :{1}]的CIDR中

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:316
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ not\ in\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = CIDR[{0}]没有在IPsec[uuid :{1}]的CIDR中

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:324
# args: msg.getUuid()
can\ not\ change\ state\ because\ ipsec\ [uuid\:%s]\ status\ is\ not\ ready = 不能修改IPsec的状态，因为IPsec的状态没有准备

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:330
# args: msg.getUuid()
could\ not\ reconnect\ this\ ipsec\ [uuid\:%s],\ please\ upgrade\ ipsec\ version = 无法重新连接此IPSec[uuid：{0}]，请升级IPSec版本

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:133
# args: msg.getIPsecConnectionUuid()
cannot\ find\ the\ IPsecconnection[uuid\:%s],\ it\ may\ have\ been\ deleted = 未找到IPsec连接[uuid:{0}],它可能会被删除了

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:466
# args: Long.toString(range2.getStart()),Long.toString(range2.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),msg.getVipUuid()
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ UDP = 当前的端口范围以UDP使用的端口范围冲突了

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:504
# args: cidr,l3Inv.getUuid(),uuid,rCidr
cidr[%s]\ of\ attached\ L3Network\ [uuid\:%s]\ is\ overlapped\ with\ ipsec\ [uuid\:%s]\ remote\ cidr[%s] = 已绑定在三层网络[uuid:{1}]的CIDR与IPSec[uuid:{2}]远程CIDR存在重叠

# at: src/main/java/org/zstack/ipsec/vyos/VyosCreateIPsecFlow.java:69
# args: errorCode.getDescription()
create\ ipsec\ to\ ha\ route\ failed,\ because\ %s = 创建IPSec到HA路由失败，因为{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosDeleteIPsecFlow.java:55
# args: errorCode.getDescription()
delete\ ipsec\ from\ ha\ group\ failed\ because\ %s = 从HA组中删除IPSec失败，原因是{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:178
# args: rcidr,cidr
the\ remoteCidr[%s]\ is\ overlaped\ with\ VirtualRouter\ interface\ cidr[%s] = RemoteCidR[{0}]与VirtualRouter接口CIDR[{1}]重叠

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:293
# args: 
vyos\ doesn't\ support\ aes-192\ as\ IkeEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos不支持aes-192作为密钥交换加密算法，可用选择为aes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:299
# args: 
vyos\ doesn't\ support\ aes-192\ as\ PolicyEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos不支持aes-192作为加密算法协议，可用选择为aes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:305
# args: msg.getIkeDhGroup()
vyos\ doesn't\ support\ %d\ as\ Ike\ DhGroup\  = vyos不支持[{0}]作为Ike DhGroup

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:788
# args: errorCode.getDescription()
sync\ to\ ha\ group\ failed,\ because\:%s = 与高可用性组同步失败，原因：{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:675
# args: errorCode.getDescription()
apply\ to\ ha\ group\ failed,\ because\ %s = 应用到HA组失败，原因是{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:768
# args: vrUuid
update\ ipsec\ version\ failed,\ because\:vpc[%s]\ not\ exist = 更新IPSec版本失败，因为：VPC[{0}]不存在

# at: src/main/java/org/zstack/kvm/KVMApiInterceptor.java:46
# args: msg.getManagementIp()
there\ has\ been\ a\ kvm\ host\ having\ management\ ip[%s] = 已经存在一个拥有管理节点IP[{0}]的物理机

# at: src/main/java/org/zstack/kvm/KVMConsoleHypervisorBackend.java:70
# args: rsp.getPort(),vm.getUuid()
unexpected\ VNC\ port\ number[%d]\ for\ VM\ [uuid\:%s] = VM[uuid：{1}]的意外VNC端口号[{0}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:465
# args: self.getUuid()
host[uuid\:%s]\ has\ been\ deleted = 物理机[uuid:{0}]已经被删除了

# at: src/main/java/org/zstack/kvm/KVMHost.java:2499
# args: msg.getVmUuid(),vmState
vm[uuid\:%s]\ is\ not\ Running\ or\ Stopped,\ current\ state[%s] = 云主机[uuid:{0}]未处在Running或Stopped状态, 现在状态为[{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:745
# args: ret.getNewVolumeInstallPath()
after\ block\ commit,\ new\ volume\ path\ still\ use\ %s = 块提交后，新卷路径仍使用{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:877
# args: host.getUuid(),webSsh.status
create\ connection\ to\ host[%s]\ failed,\ because\ %s = 创建到物理机[{0}]的连接失败，原因是{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1326
# args: reply.getError()
check\ host\ capacity\ failed,\ because\:%s = 检查物理机容量失败，原因：{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1337
# args: msg.getHostUuid(),rsp.getTotalMemory(),reservedSize
The\ host[uuid\:%s]'s\ available\ memory\ capacity[%s]\ is\ lower\ than\ the\ reserved\ capacity[%s] = 物理机[uuid:{0}]的可用内存[{1}]少于保留内存[{2}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:1392
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ register\ colo\ heartbeat\ for\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = 无法为KVM物理机[uuid：{1}，IP：{2}]上的VM[uuid：{0}]注册COLO检测信号，因为{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1448
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ start\ colo\ sync\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = 无法在KVM物理机[uuid：{1}，IP：{2}]上启动Colo Sync VM[uuid：{0}]，原因是{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1503
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ config\ secondary\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = 无法在KVM物理机[uuid：{1}，IP：{2}]上配置辅助云主机[uuid：{0}]，原因是{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1535
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ config\ primary\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = 无法在KVM物理机[uuid：{1}，IP：{2}]上配置主VM[uuid：{0}]，原因是{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1576
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ get\ first\ boot\ dev\ of\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = 无法获取KVM物理机[uuid：{1}，IP：{2}]上的VM[uuid：{0}]的第一个引导设备，因为{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1625
# args: msg.getVmInstanceUuid(),rsp.getError()
failed\ to\ get\ vm[uuid\:%s]\ device\ address,\ because\:%s = 无法获取VM[uuid：{0}]设备地址，因为：{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1680
# args: msg.getHostUuid(),rsp.getError()
failed\ to\ get\ host[uuid\:%s]\ virtualizer\ info,\ because\:%s = 无法获取物理机[uuid：{0}]虚拟化程序信息，因为：{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1762
# args: ret.getError()
failed\ to\ increase\ vm\ cpu,\ error\ details\:\ %s = 无法增加VM CPU，错误详细信息：{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1860
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),result.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = 无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1942
# args: self.getUuid(),self.getStatus()
the\ host[uuid\:%s,\ status\:%s]\ is\ not\ Connected = 物理机[uuid:{0}, 状态:{1}]不是Connected状态

# at: src/main/java/org/zstack/kvm/KVMHost.java:2280
# args: volume.getUuid(),state
cannot\ do\ volume\ snapshot\ merge\ when\ vm[uuid\:%s]\ is\ in\ state\ of\ %s.\ The\ operation\ is\ only\ allowed\ when\ vm\ is\ Running\ or\ Stopped = 当云主机[uuid:{0}]处于{1}状态的时候不能做云盘快照合并。此操作只能在云主机处在Running和Stopped状态时进行

# at: src/main/java/org/zstack/kvm/KVMHost.java:2287
# args: KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION,libvirtVersion
live\ volume\ snapshot\ merge\ needs\ libvirt\ version\ greater\ than\ %s,\ current\ libvirt\ version\ is\ %s.\ Please\ stop\ vm\ and\ redo\ the\ operation\ or\ detach\ the\ volume\ if\ it's\ data\ volume = 实时云盘快照合并需要libvirt版本高于{0}，现在libvirt版本为{1}。请停止云主机后重试或卸载云盘（仅当为云盘时）

# at: src/main/java/org/zstack/kvm/KVMHost.java:2911
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ update\ nic[vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = 无法更新KVM物理机[uuid：{1}，IP：{2}]上的NIC[VM：{0}]，因为{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2963
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = 在物理机[uuid:{2},IP:{3}]上加载网卡[uuid:{0},云主机:{1}]失败，因为:{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2959
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError(),msg.getNicInventory().getInternalName()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s,\ please\ try\ again\ or\ delete\ device[%s]\ by\ yourself = 无法在KVM物理机[uuid：{2}，IP：{3}]上连接NIC[uuid：{0}，VM：{1}]，因为{4}，请重试或自行删除设备[{5}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3018
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ detach\ data\ volume[uuid\:%s,\ installPath\:%s]\ from\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = 无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]卸载云盘[uuid:{0}, installPath:{1}]，因为: {6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3105
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ attach\ data\ volume[uuid\:%s,\ installPath\:%s]\ to\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = 无法在KVM物理机[uuid:{4}, ip:{5}]上为云主机[uuid:{2}, name:{3}]挂载云盘[uuid:{0}, installPath:{1}]，因为: {6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3149
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ destroy\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = 无法在物理机[uuid:{2}, ip:{3}]上删除云主机[uuid:{0} name:{1}]，原因: {4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3281
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ stop\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = 在物理机[uuid:{2}, ip:{3}]上停止云主机[uuid:{0} 名称:{1}]失败，因为:{4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3386
# args: msg.getHostUuid(),ret.getError()
Host[%s]\ update\ spice\ channel\ config\ faild,\ because\ %s = 物理机[{0}]更新SPICE通道配置失败，原因是{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3505
# args: total
when\ the\ vm\ platform\ is\ Other,\ the\ number\ of\ dataVolumes\ and\ cdroms\ cannot\ exceed\ 3,\ currently\ %s = 当VM平台为OTHER时，DataVolumes和CDROM的数量不能超过3个，目前为{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3997
# args: msg.getPhysicalInterface(),context.getInventory().getUuid(),context.getInventory().getManagementIp()
failed\ to\ check\ physical\ network\ interfaces[names\ \:\ %s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s] = 无法检查KVM物理机[uuid：{1}，IP：{2}]上的物理网络接口[名称：{0}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4128
# args: self.getUuid(),ret.getHostUuid(),dbf.getDbVersion(),ret.getVersion()
detected\ abnormal\ status[host\ uuid\ change,\ expected\:\ %s\ but\:\ %s\ or\ agent\ version\ change,\ expected\:\ %s\ but\:\ %s]\ of\ kvmagent,it's\ mainly\ caused\ by\ kvmagent\ restarts\ behind\ zstack\ management\ server.\ Report\ this\ to\ ping\ task,\ it\ will\ issue\ a\ reconnect\ soon = 检测到KVMAgent的异常状态[物理机uuid更改，预期：{0}但是：{1}或代理版本更改，预期：{2}但是：{3}]，这主要是由KVMAgent在ZStack管理服务器后面重新启动引起的。将此报告给ping任务，它将很快发出重新连接

# at: src/main/java/org/zstack/kvm/KVMHost.java:4283
# args: self.getUuid(),self.getManagementIp(),connectPath,rsp.getError()
unable\ to\ connect\ to\ kvm\ host[uuid\:%s,\ ip\:%s,\ url\:%s],\ because\ %s = 连接物理机[uuid:{0}, ip:{1}，url:{2}]失败，因为:{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4342
# args: errorCodeList != null && StringUtils.isNotEmpty(errorCodeList.getReadableDetails()) ? errorCodeList.getReadableDetails() : "please check network"
host\ can\ not\ access\ any\ primary\ storage,\ %s = 物理机无法访问任何主存储，{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4482
# args: getSelf().getManagementIp(),getSelf().getPort(),TimeUnit.MILLISECONDS.toSeconds(sshTimeout)
the\ host[%s]\ ssh\ port[%s]\ not\ open\ after\ %s\ seconds,\ connect\ timeout = 物理机[{0}]SSH端口[{1}]在{2}秒后未打开，连接超时

# at: src/main/java/org/zstack/kvm/KVMHost.java:4542
# args: checkList
failed\ to\ ping\ all\ DNS/IP\ in\ %s;\ please\ check\ /etc/resolv.conf\ to\ make\ sure\ your\ host\ is\ able\ to\ reach\ public\ internet = 在{0}中的所有DNS/IP都ping失败了，请检查 /etc/resolv.conf 来确保你的物理机能连接到公网

# at: src/main/java/org/zstack/kvm/KVMHost.java:4540
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:\ %d,\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = 无法连接物理机[ip:{0}, 用户名:{1}, ssh端口:{2} ]做DNS检查，请检查用户名密码是否正确；{3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4585
# args: self.getManagementIp(),restf.getHostName(),ret.getStderr(),ret.getExitErrorMessage()
the\ KVM\ host[ip\:%s]\ cannot\ access\ the\ management\ node's\ callback\ url.\ It\ seems\ that\ the\ KVM\ host\ cannot\ reach\ the\ management\ IP[%s].\ %s\ %s = 物理机[ip:{0}] 不能连接到管理节点 。 看起来是这个物理机无法到达管理节点的IP [{1}]. {2} {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4582
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d]\ to\ check\ the\ management\ node\ connectivity,please\ check\ if\ username/password\ is\ wrong;\ %s = 不能连接到物理机[ip:{0}, username:{1}, sshPort:{2}] 去检查与管理节点是否连通  ,请检查您的用户名或者密码是否有误; {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4611
# args: hostRet.getExitErrorMessage()
unable\ to\ Check\ whether\ the\ host\ is\ taken\ over,\ \ because\ %s = 无法检查物理机是否已被接管，因为{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4625
# args: timeRet.getExitErrorMessage()
Unable\ to\ get\ the\ timestamp\ of\ the\ flag,\ \ because\ %s = 无法获取标志的时间戳，因为{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4634
# args: self.getManagementIp(),hostOutput,diff,HostGlobalConfig.PING_HOST_INTERVAL.value(int.class)
the\ host[ip\:%s]\ has\ been\ taken\ over,\ because\ the\ takeover\ flag[HostUuid\:%s]\ already\ exists\ and\ utime[%d]\ has\ not\ exceeded\ host\ ping\ interval[%d] = 物理机[IP：{0}]已被接管，因为接管标志[HOSTuuid：{1}]已存在，并且UTIME[{2}]未超过物理机ping间隔[{3}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4643
# args: self.getManagementIp(),lastHostInv.getUuid()
the\ host[ip\:%s]\ has\ been\ taken\ over,\ because\ flag[HostUuid\:%s]\ exists\ in\ the\ database = 物理机[IP：{0}]已被接管，因为数据库中存在标志[HOSTuuid：{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4666
# args: ret.getExitErrorMessage()
unable\ to\ get\ host\ cpu\ architecture,\ please\ check\ if\ username/password\ is\ wrong;\ %s = 无法获取物理机CPU架构，请检查用户名/密码是否错误；{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4693
# args: hostArchitecture,cluster.getArchitecture()
host\ cpu\ architecture[%s]\ is\ not\ matched\ the\ cluster[%s] = 物理机CPU体系结构[{0}]与群集[{1}]不匹配

# at: src/main/java/org/zstack/kvm/KVMHost.java:4997
# args: 
cannot\ find\ either\ 'vmx'\ or\ 'svm'\ in\ /proc/cpuinfo,\ please\ make\ sure\ you\ have\ enabled\ virtualization\ in\ your\ BIOS\ setting = 不能发现以下任意一个  'vmx' or 'svm' 在路径 /proc/cpuinfo 里, 请检查你是否在你的BIOS设置里开启了virtualization选项

# at: src/main/java/org/zstack/kvm/KVMHost.java:5064
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ qemu/libvirt\ version\ does\ not\ match = 物理机[uuid:{0}]不能添加到集群[uuid:{1}]中，因为qemu/libvirt不匹配

# at: src/main/java/org/zstack/kvm/KVMHost.java:5084
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ cpu\ model\ name\ does\ not\ match = 物理机[uuid:{0}]无法被添加到集群[uuid:{1}]因为cpu型号不一致

# at: src/main/java/org/zstack/kvm/KVMHost.java:5217
# args: msg.getHostUuid(),ctimeout
host[%s]\ not\ shutdown\ in\ %d\ seconds = 物理机[{0}]未在{1}秒内关闭

# at: src/main/java/org/zstack/kvm/KVMHost.java:5374
# args: 
host\ is\ not\ in\ the\ connected\ status,\ cannot\ update\ os = 物理机当前并不是已连接状态，不能升级操作系统

# at: src/main/java/org/zstack/kvm/KVMHost.java:5372
# args: 
host\ is\ in\ the\ premaintenance\ state,\ cannot\ update\ os = 物理机正处于预维护状态，不能升级操作系统

# at: src/main/java/org/zstack/kvm/KVMHost.java:5666
# args: rsp.getError()
failed\ to\ attach\ volume\ to\ host,\ because\:%s = 无法将卷附加到物理机，因为：{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:5727
# args: rsp.getError()
failed\ to\ detach\ volume\ from\ host,\ because\:%s = 无法从物理机分离卷，因为：{0}

# at: src/main/java/org/zstack/kvm/KVMHostAllocatorFilterExtensionPoint.java:201
# args: 
cannot\ adapt\ version\ for\ the\ bellow\ rpm\:\ libvirt\ /\ qemu\ /\ cpumodel = 源和目的之间的以下组件版本不兼容：libvirt、qemu、cpumodel

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:164
# args: e.getMessage()
fail\ to\ load\ host\ info\ from\ file.\ because\n%s = 无法从文件加载物理机信息。因为\n{0}

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:290
# args: os,vo.getName(),vo.getManagementIp()
the\ operation\ system[%s]\ of\ host[name\:%s,\ ip\:%s]\ is\ invalid = 物理机[名称：{1}，IP：{2}]的操作系统[{0}]无效

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:316
# args: vo.getClusterUuid(),otherOs,vo.getName(),vo.getManagementIp(),os
cluster[uuid\:%s]\ already\ has\ host\ with\ os\ version[%s],\ but\ new\ added\ host[name\:%s\ ip\:%s]\ has\ different\ host\ os\ version[%s] = 群集[uuid：{0}]已具有操作系统版本为[{1}]的物理机，但新添加的物理机[名称：{2}IP：{3}]具有不同的物理机操作系统版本[{4}]

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:461
# args: cmd.vmUuid
vm[uuid\:%s]\ crashes\ due\ to\ kernel\ error = VM[uuid：{0}]因内核错误而崩溃

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:500
# args: str.toString()
there\ are\ still\ hosts\ not\ have\ the\ same\ cpu\ model,\ details\:\ %s = 仍存在host有不同的cpu模型，详细信息：{0}

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:514
# args: KVMSystemTags.VM_PREDEFINED_PCI_BRIDGE_NUM_TOKEN
pci\ bridge\ need\ a\ value\ greater\ than\ 0\ and\ lower\ than\ 32 = PCI桥需要大于0且小于32的值

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:557
# args: vm.getState(),VmInstanceState.Stopped
vm\ current\ state[%s],\ modify\ virtioSCSI\ requires\ the\ vm\ state[%s] = VM当前状态[{0}]，修改VirtiosCsi需要VM状态[{1}]

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:759
# args: hostUuid
host[uuid\:%s]\ does\ not\ have\ cpu\ model\ information,\ you\ can\ reconnect\ the\ host\ to\ fix\ it = 物理机[uuid:{0}]无cpu模型信息，你可以尝试重连来解决这个问题

# at: src/main/java/org/zstack/kvm/KVMHostUtils.java:35
# args: format
invalid\ format\ string\ %s = 格式字符串{0}无效

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:70
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 在物理机[uuid:{3}]上为二层网络[uuid:{1}, type:{2}]创建网桥[{0}]失败，原因: {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:129
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2NoVlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = 在二层网络[uuid:{1}中检查网桥[{0}]失败，名字为[{2}]在物理机t[uuid: {3}]上, {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:211
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 无法在KVM物理机[uuid：{3}]上删除二层网络[uuid：{1}，类型：{2}]的网桥[{0}]，因为{4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:82
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 创建二层网络[uuid:{1}中的网桥[{0}]失败 , 类型为: {2}, vlan:{3}] 在物理机[uuid:{4}]上, 原因:  {5}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:142
# args: cmd.getBridgeName(),l2vlan.getUuid(),l2vlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2VlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = 检查在物理机[uuid:{3}]上二层网络[uuid:{1}, name:{2}]中的网桥[{0}]失败, {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:239
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 无法在KVM物理机[uuid：{4}]上删除二层网络[uuid：{1}，类型：{2}，VLAN：{3}]的网桥[{0}]，因为{5}

# at: src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:109
# args: hto.getHostUuid(),rsp.getError()
failed\ to\ apply\ rules\ of\ security\ group\ rules\ to\ kvm\ host[uuid\:%s],\ because\ %s = 不能应用安全组规则在物理机t[uuid:{0}]上, 因为 {1}

# at: src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:152
# args: hostUuid,rsp.getError()
failed\ to\ check\ default\ rules\ of\ security\ group\ on\ kvm\ host[uuid\:%s],\ because\ %s = 在host[uuid:{0}]上检查默认安全组规则失败

# at: src/main/java/org/zstack/kvm/KvmVmHardwareVerifyExtensionPoint.java:31
# args: 
Failed\ to\ start\ vm,\ because\ can\ not\ disable\ vm.cpu.hypervisor.feature\ with\ vm.cpuMode\ none = 无法启动VM，因为无法使用VM.CPUMode None禁用VM.CPU.Hypervisor.Feature

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:95
# args: msg.getMessageName()
cannot\ get\ vmUuid\ from\ msg\ %s = 无法从消息{0}获取VMuuid

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:258
# args: host.getUuid(),host.getManagementIp(),ret.getError()
unable\ to\ do\ vm\ sync\ on\ host[uuid\:%s,\ ip\:%s]\ because\ %s = 不能在物理机[uuid:{0}, ip:{1}]上执行云主机状态同步操作，因为{2}

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:287
# args: vmUuid
The\ vm[%s]\ state\ is\ in\ shutdown\ for\ a\ long\ time,\ check\ whether\ the\ vm\ is\ normal = 云主机[{0}]长时间处于关闭状态，请检查云主机是否正常

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:67
# args: 
unsupported\ LDAP/AD\ server\ scope = 不支持的LDAP/AD服务器作用域

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:128
# args: type,LdapConstant.OpenLdap.TYPE,LdapConstant.WindowsAD.TYPE
Wrong\ LdapServerType[%s],\ valid\ values\:\ [%,%s] = 错误的LDAP服务类型[{0}]，有效的值: [%,{1}]

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:153
# args: 
Cannot\ connect\ to\ LDAP/AD\ server,\ Invalid\ Credentials,\ please\ checkout\ User\ DN\ and\ password = 无法连接到LDAP/AD服务器，凭据无效，请签出用户DN和密码

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:156
# args: 
Cannot\ connect\ to\ LDAP/AD\ server,\ communication\ false,\ please\ checkout\ IP,\ port\ and\ Base\ DN = 无法连接到LDAP/AD服务器，通信错误，请检查IP、端口和基本DN

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:159
# args: e.toString()
Cannot\ connect\ to\ LDAP/AD\ server,\ %s = 不能连接LDAP服务，{0}

# at: src/main/java/org/zstack/ldap/LdapManagerImpl.java:560
# args: vo.getAccountUuid()
Account[uuid\:%s]\ Not\ Found!!! = 未找到帐户[uuid：{0}]！

# at: src/main/java/org/zstack/ldap/LdapUtil.java:581
# args: filter,errorMessage
query\ ldap\ entry[filter\:\ %s]\ fail,\ because\ %s = 查询LDAP条目[筛选器：{0}]失败，原因是{1}

# at: src/main/java/org/zstack/ldap/externalSearch/AggregateSearch.java:52
# args: e.toString()
query\ ldap\ entry\ fail,\ %s = 查询LDAP条目失败，{0}

# at: src/main/java/org/zstack/license/LicenseChecker.java:167
# args: 
Parse\ license\ error,\n1.\ check\ your\ private\ key\ and\ application\ code\ is\ correct\n2.\ check\ your\ license\ is\ not\ corrupted\n3.\ use\ zstack-ctl\ clear_license\ to\ clear\ your\ licenses\ and\ try\ to\ reinstall\n = 解析许可证错误，\N1。检查您的私钥和应用程序代码是否正确\N2。检查您的许可证是否已损坏\N3。使用zstack-CTL清除_许可证清除您的许可证并尝试重新安装\n

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:229
# args: 
the\ licenseRequestCode\ is\ illegal = 许可证请求代码不合法

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:242
# args: e.getMessage()
Decode\ fail\ because\ %s = 解码失败，因为{0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:239
# args: bytes.length
Unexpected\ decoded\ license\ file\ length\:\ %d = 意外的解码许可证文件长度：{0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:791
# args: 
Licensed\ VM\ number\ overrun = VM数量超过云主机授权上限

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:857
# args: 
unexpected\ host\ vendor\ for\ MINI = Mini的意外物理机供应商

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1216
# args: info.getUuid()
not\ supported\:\ delete\ license[%s]\ from\ USB-key = 不支持：从USB-KEY删除许可证[{0}]

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1271
# args: System.getProperty("os.arch")
UKey\ not\ supported\ (arch\:\ %s) = 不支持UKey（Arch：{0}）

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1351
# args: ex.getLocalizedMessage()
update\ local\ ukey\ license\:\ %s = 更新本地UKEY许可证：{0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1347
# args: 
No\ local\ ukey\ license\ updated = 没有本地UKEY许可证更新

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1377
# args: 
No\ node\ available\ to\ update\ UKey = 没有节点可用于更新UKEY

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1519
# args: Platform.getManagementServerIp()
Multiple\ MN\ exists\ but\ only\ supplied\ licenses\ for\ %s = 管理节点有多个，但是仅提供了节点{0}的许可证

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1493
# args: mnUuid,reply.getError().getDetails()
MN[uuid\:%s]\:\ %s = Mn[uuid：{0}]：{1}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1521
# args: msg.getManagementUuids()
MN\ HA\ environment,\ but\ only\ updated\ license\ for\ %s = 管理节点有多个，但是仅更新了节点{0}的许可证

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1724
# args: newLicenseInfo.getUuid(),newLicenseInfo.getLicenseType().toString(),path
can\ not\ find\ license[uuid\:%s,\ type\:%s]\ file\ on\ path\ %s = 在路径{2}上找不到许可证[uuid：{0}，类型：{1}]文件

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:2263
# args: 
License\ expired = 许可证已过期

# at: src/main/java/org/zstack/license/cube/CubeLicenseFactory.java:50
# args: sdsInfoPath
%s\ is\ not\ existed = {0}不存在

# at: src/main/java/org/zstack/license/cube/XmsCli.java:61
# args: 
context\ cannot\ be\ null\ in\ license = 许可证中的上下文不能为空

# at: src/main/java/org/zstack/log/LogConfigurationManagerImpl.java:247
# args: struct.getType()
No\ factory\ found\ for\ type\:%s = 未找到类型为{0}的工厂

# at: src/main/java/org/zstack/log/LogConfigurationManagerImpl.java:462
# args: msg.getType()
Unknown\ log\ configuration\ type\ %s = 未知的日志配置类型{0}

# at: src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java:60
# args: lstruct.getAppenderType()
No\ factory\ found\ for\ log4j2\ appender\ type\:%s. = 找不到Log4j2附加器类型的工厂：{0}。

# at: src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java:134
# args: lstruct.getAppenderType()
Unknown\ log4j2\ appender\ type\ %s = 未知的Log4j2 Appender类型{0}

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:33
# args: 
facility\ can\ not\ be\ null = 设备不能为空

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:37
# args: configuration.facility
invalid\ facility\ %s = 工具{0}无效

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:41
# args: 
hostname\ can\ not\ be\ null = 物理机名不能为空

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:45
# args: 
port\ can\ not\ be\ null = 端口不能为空

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:49
# args: 
protocol\ can\ not\ be\ null = 协议不能为空

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:55
# args: configuration.protocol
unsupported\ protocol\ %s = 不支持的协议{0}

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:69
# args: configuration.hostname,configuration.port
syslog\ server[address\:\ %s\:%s]\ is\ not\ available = Syslog服务器[地址：{0}：{1}]不可用

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:61
# args: configuration.hostname
syslog\ server[address\:\ %s]\ is\ not\ available = Syslog服务器[地址：{0}]不可用

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:74
# args: 
There\ is\ no\ LDAP/AD\ server\ in\ the\ system,\ Please\ add\ a\ LDAP/AD\ server\ first. = 在系统中没有LDAP服务，请先添加一个LDAP服务

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:68
# args: msg.getLdapUid(),msg.getVirtualIDUuid()
Can\ not\ bind\ this\ ldap\ uid\ %s\ to\ virtual\ id\ [uuid\:%s] = 无法将此LDAP UID{0}绑定到虚拟ID[uuid：{1}]

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:82
# args: 
This\ uid\ is\ already\ used = 此UID已被使用

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:228
# args: 
ZStack\ is\ loading\ ldap\ organizations\ from\ DB\ now,\ can\ not\ execute\ sync\ operation = ZStack正在从数据库加载LDAP组织，无法执行同步操作

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:390
# args: e.getMessage()
Failed\ to\ sync\ ldap\ entry[],\ because\ %s = 无法同步LDAP条目[]，因为{0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1021
# args: reply.getError().getReadableDetails()
Failed\ to\ sync\ organizations,\ because\ %s = 无法同步组织，因为{0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:969
# args: 
Failed\ to\ transform\ ldap\ entry\ to\ organization\ ndoe = 无法将LDAP条目转换为组织ndoe

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:958
# args: 
failed\ to\ sync\ ldap\ organization = 无法同步LDAP组织

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1441
# args: scope.toString()
Can\ not\ sync\ LDAP/AD\ server\ whose\ scope\ is\ not\ %s = 无法同步范围不是{0}的LDAP/AD服务器

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1575
# args: uid
Failed\ to\ validate\ uid[%s],\ maybe\ it\ has\ been\ deleted = 无法验证UID[{0}]，它可能已被删除

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1616
# args: uid,reply.getError().getReadableDetails()
Failed\ to\ create\ iam2\ virtual\ id\ for\ uid[%s],\ because\ %s = 无法为UID[{0}]创建IAM2虚拟ID，因为{1}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1751
# args: ldapUid
Failed\ to\ validate\ dn\ [%s],\ maybe\ it\ has\ been\ deleted = 无法验证DN[{0}]，它可能已被删除

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2195
# args: 
invalid\ json\ format = 无效的JSON格式

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2206
# args: 
name\ is\ mandatory\ field\ % = 名称是必填字段%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2210
# args: 
attribute\ is\ mandatory\ field\ % = 属性是强制字段%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2214
# args: 
type\ is\ mandatory\ field\ % = 类型为必填字段%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2218
# args: 
optional\ is\ mandatory\ field\ % = 可选为必填字段%

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2222
# args: fieldNames
name\ should\ use\ values\ in\ %s = 名称应使用{0}中的值

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2254
# args: rule.getAttribute()
Invalid\ attribute.\ Attribute[%s]\ is\ required,\ but\ found\ there\ are\ some\ record\ not\ matched = 无效属性。属性[{0}]是必需的，但发现有一些记录不匹配

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2199
# args: 
strategy\ is\ mandatory\ field\ % = 策略为必填字段%

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:54
# args: 
missing\ loginPluginName = 缺少LoginPluginName

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:59
# args: loginContext.getLoginPluginName()
no\ login\ plugin\ named\ %s = 没有名为{0}的登录插件

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:64
# args: loginContext.getLoginPluginName()
missing\ LoginUserInfo\ when\ use\ plugin\ login = 使用插件登录时缺少LoginUserInfo

# at: src/main/java/org/zstack/loginControl/LoginControlApiInterceptor.java:40
# args: e.getMessage()
Invalid\ rule\ expression,\ add\ access\ control\ rule\ fail\ because\:\ %s = 规则表达式无效，添加访问控制规则失败，原因是：{0}

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:107
# args: key
unrecognized\ key\:\ %s = 无法识别的键：{0}

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:113
# args: opt.get()
missing\ key\:value\ of\ %s = 缺少键：{0}的值

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:291
# args: msg.getResourceName(),msg.getLoginType()
No\ available\ user\ with\ name\:\ %s,\ type\:\ %s = 没有名称为{0}、类型为{1}的可用用户

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:90
# args: msg.getJobName()
%s\ is\ not\ an\ API = {0}不是一个API

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:152
# args: 
cannot\ cancel\ longjob\ that\ is\ succeeded = 不能取消已经成功的longjob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:155
# args: 
cannot\ cancel\ longjob\ that\ is\ failed = 不能取消已经失败的longjob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:166
# args: 
delete\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = 只能删除已经成功、取消、失败的longjob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:177
# args: 
rerun\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = 仅在成功、取消或失败时重新运行LongJob

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:206
# args: 
can\ only\ resume\ longjob\ that\ is\ Suspended = 只能恢复挂起的LongJob

# at: src/main/java/org/zstack/longjob/LongJobFactoryImpl.java:39
# args: jobName
%s\ has\ no\ corresponding\ longjob = {0}没有与之对应的longjob

# at: src/main/java/org/zstack/mediator/ApiValidator.java:123
# args: l3NetworkUuid,vmNicVO.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ cidr\ of\ l3[%s]\ to\ attach\ overlapped\ with\ l3[%s]\ already\ attached\ to\ vm = 不能绑定这个三层网络。这个云主机上已经绑定的三层网络[{1}]和这个三层网络[{0}]的CIDR存在重叠

# at: src/main/java/org/zstack/mediator/ApiValidator.java:155
# args: vm.getName(),vm.getUuid(),StringUtils.join(pfStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ port\ forwarding\ rules%s\ attached = 云主机[name:{0}, uuid:{1}] 已经设置了一些端口转发规则{2}

# at: src/main/java/org/zstack/mediator/ApiValidator.java:176
# args: vm.getName(),vm.getUuid(),StringUtils.join(eipStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ EIPs%s\ attached = 云主机[name:{0}, uuid:{1}] 已经配置了弹性IP{2}

# at: src/main/java/org/zstack/mediator/ApiValidator.java:191
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ already\ has\ bound\ to\ other\ service[%s] = 该虚拟IP[uuid:{0}]已经绑定了其他服务

# at: src/main/java/org/zstack/mediator/ApiValidator.java:231
# args: Long.toString(range.getStart()),Long.toString(range.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),vipUuid,protocol
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ %s\  = 当前使用的端口范围[{0}, {1}]和虚拟IP[uuid: {4}, 协议: {5}]已经使用的端口范围[{2}, {3}]冲突

# at: src/main/java/org/zstack/mediator/ApiValidator.java:228
# args: Long.toString(range.getStart()),Long.toString(range.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),vipUuid,protocol
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ system\ service\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ %s\  = 当前使用的端口范围[{0}, {1}]和虚拟IP[uuid: {4}, 协议: {5}]已经使用的系统服务端口范围[{2}, {3}]冲突

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:851
# args: l3Uuid,systemTag
L3\ network[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = 找不到三层网络[uuid:0]。请确认静态IP的系统标签

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:327
# args: supportSharedVolumePrimaryStorage,psType
for\ shareable\ volume,\ the\ only\ supported\ primary\ storage\ type\ is\ %s,\ current\ is\ %s = 共享云盘仅支持在主存储类型为{0}的主存储上使用，当前的类型为{1}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:795
# args: bandwidth,Long.MAX_VALUE
invalid\ volume\ bandwidth[%s]\ is\ larger\ than\ %d = 云盘带宽[{0}]大于{1}是无效的

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:745
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ or\ equal\ to\ 8192 = 错误的网络带宽[{0}],这个数字必须大于等于8K

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:793
# args: bandwidth
invalid\ volume\ bandwidth[%s]\ is\ not\ a\ number = 错误的云盘带宽 ，[{0}] 这个不是数字

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:790
# args: bandwidth
invalid\ volume\ bandwidth[%s],\ it\ must\ be\ greater\ than\ 1024\ (include\ 1024) = 无效的云盘带宽，它必须大于等于1M

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:832
# args: iops
invalid\ volume\ IOPS[%s]\ is\ not\ a\ number = 错误的云盘每秒读写速度[{0}]，它应该是个数字

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:834
# args: iops,Long.MAX_VALUE
invalid\ volume\ IOPS[%s]\ is\ larger\ than\ %d = 云盘IOPS[{0}]大于{1}是无效的

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:829
# args: iops
invalid\ volume\ IOPS[%s],\ it\ must\ be\ greater\ than\ 1\ (include\ 1) = 卷IOPS[{0}]无效，它必须大于1（包括1）

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:865
# args: 
\ usb\ device\ can\ only\ be\ called\ by\ admin\ account = USB设备只能由管理员帐户调用

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:901
# args: level
Unknown\ code[%s]\ of\ Security\ Level = 安全级别的未知代码[{0}]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:918
# args: cidr
[%s]\ is\ not\ a\ standard\ cidr = [{0}]不是标准CIDR

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:939
# args: hostUuid,os.distribution,os.version
the\ host[uuid\:%s]'s\ operating\ system\ %s\ %s\ is\ too\ old,\ the\ QEMU\ doesn't\ support\ QoS\ of\ network\ or\ disk\ IO.\ Please\ choose\ another\ instance\ offering\ with\ no\ QoS\ configuration = 物理机[uuid:{0}] 的操作系统{1} {2} 过老,  QEMU 不支持云盘的QOS IO设置 。 请选择别的没有Qos的计算规格

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1186
# args: newValue
invalid\ value[%s],\ it's\ not\ a\ double = 错误的值[{0}]，这个不是双精度值

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1154
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ greater\ than\ 0 = 错误的值[{0}]，必须是一个大于0的双精度值

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1183
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ between\ (0,\ 1] = 错误的值[{0}]，这个必须在0~1之间的双精度值

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1197
# args: newValue
invalid\ value[%s],\ ZStack\ doesn't\ have\ such\ host\ allocator\ type = 错误值[{0}]，Zstack没有这样的分配器类型

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1219
# args: MevocoGlobalConfig.AIO_NATIVE.getCanonicalName(),MevocoGlobalConfig.AIO_NATIVE.value(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.getCanonicalName(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.value()
%s\ value\ is[%s],\ which\ is\ conflict\ with\ %s\ value\ [%s] = {0}值为[{1}]，与{2}值[{3}]冲突

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1489
# args: 
obj\ is\ not\ instanceof\ NicQos! = OBJ不是NICQoS的实例！

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2054
# args: String.join(",", ips)
unexpected\ host\ management\ IPs\:\ [%s] = 意外的物理机管理IP：[{0}]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2190
# args: 
can\ not\ set\ local\ and\ configure\ at\ same\ time = 不能同时设置本地和配置

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2242
# args: 
can\ not\ find\ node\ A\ config\ info = 找不到节点A配置信息

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2252
# args: 
can\ not\ find\ node\ A\ address\ info\ from\ bootstrap\ agent = 无法从启动代理中找到节点A地址信息

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2314
# args: s.getJobUuid()
can\ not\ get\ bootstrap\ job\ %s\ result\ after\ 900s = 无法在900秒后获取引导程序作业{0}结果

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2322
# args: ret.getRetCode(),ret.getStdout(),ret.getStderr()
curl\ bootstrap\ agent\ finished,\ return\ code\:\ %s,\ stdout\:\ %s,\ stderr\:\ %s = cURL引导代理已完成，返回代码：{0}，标准输出：{1}，标准错误：{2}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2686
# args: errorOfNodeA.getCauses().get(0)
node\ A\ update\ factory\ mode\ failed,\ details\:\ %s = 节点A更新工厂模式失败，详细信息：{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2684
# args: errorCodeList.getCauses().get(0)
all\ management\ node\ update\ factory\ mode\ failed,\ details\:\ %s = 所有管理节点更新工厂模式失败，详细信息：{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2790
# args: ManagementNodeState.RUNNING
management\ node\ status\ is\ not\ %s = 管理节点状态不是{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2720
# args: r.getStdout()
some\ node\ on\ factory\ mode\ exists,\ detail\ of\ arping\:\ %s = 工厂模式上的某些节点存在，ARPING的详细信息：{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2741
# args: 
set\ address\ on\ node\ A\ failed = 在节点A上设置地址失败

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2738
# args: 
this\ node\ is\ not\ node\ A = 此节点不是节点A

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2875
# args: bandwidth
networkInboundBandwidth\ format\ error\ %s = 下行网络带宽格式错误{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2887
# args: bandwidth
networkOutboundBandwidth\ format\ error\ %s = 上行网络带宽超格式错误{0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2884
# args: 
networkOutboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = 超过上行网络带宽超过最大值32G bps

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3060
# args: volume.getUuid(),vm.getUuid()
Shareable\ Volume[uuid\:%s]\ has\ already\ been\ attached\ to\ VM[uuid\:%s] = 共享云盘[uuid:{0}]已经挂载到云主机[uuid:{1}]上

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3078
# args: 
shareable\ disk\ only\ support\ virtio-scsi\ type\ for\ now = 目前共享盘只支持virtio-scsi

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3213
# args: sharedVolUuids
shareable\ volume(s)[uuid\:\ %s]\ attached,\ not\ support\ to\ group\ snapshot. = 可共享云盘[uuid：{0}]已连接，但不支持组快照。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1811
# args: msg.getMode()
invalid\ volume\ qos\ mode\:\ %s = 无效的卷QoS模式：{0}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:284
# args: msg.getIoThreadId(),msg.getPin(),vm.getUuid(),rsp.getError()
Failed\ set\ iothread[%d]\ pin[%s]\ on\ vm[%s]\:\ %s. = 无法在VM[{2}]上设置IOThread[{0}]Pin[{1}]：{3}。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:339
# args: msg.getUuid()
can\ not\ found\ in\ used\ snapshot\ tree\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = 在卷[uuid：{0}]的已使用快照树中找不到。可能不需要验证快照链。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:352
# args: currentTreeUuid,msg.getUuid()
can\ not\ found\ latest\ snapshot\ from\ tree[uuid\:\ %s]\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = 从树[uuid：{0}]（属于卷[uuid：{1}]）中找不到最新快照。可能不需要验证快照链。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:368
# args: currentTreeUuid,msg.getUuid()
can\ not\ found\ snapshots\ from\ tree[uuid\:\ %s]\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = 从树[uuid：{0}]（属于卷[uuid：{1}]）中找不到快照。可能不需要验证快照链。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:678
# args: vmInstanceVO.getUuid()
How\ can\ a\ Running\ VM[uuid\:%s]\ has\ no\ hostUuid? = 正在运行的VM[uuid：{0}]怎么会没有HOSTuuid？

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:676
# args: vmInstanceVO.getUuid()
Unexpectedly,\ VM[uuid\:%s]\ is\ not\ running\ any\ more,\ please\ try\ again\ later = 意外的是，VM[uuid：{0}]不再运行，请稍后再试

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:842
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),errorInfoMap.keySet(),errorInfoMap.values()
after\ subtracting\ reserved\ capacity[%s],\ primary\ storage[%s]\ don't\ have\ required\ size[%s\ bytes],\ may\ be\ the\ threshold\ of\ primary\ storage\ physical\ capacity\ setting\ is\ lower = 减去保留容量[{0}]后，主存储[{1}]没有所需的大小[{2}字节]，可能是主存储物理容量设置的阈值较低

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1231
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ not\ attached = 当云盘[uuid:{1}]未加载时，无法给云盘[{0}]创建快照

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1237
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ appears\ twice = 当云盘[uuid:{1}]出现多次时，无法给云盘[{0}]创建快照

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1244
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid(),volumeVOS.get(0).getVmInstanceUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ attached\ multiple\ vms[%s,\ %s] = 当云盘[uuid:{1}]加载到多个云主机上时，无法给云盘[{0}]创建快照

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1251
# args: 
no\ volumes\ found = 找不到云盘

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1516
# args: SizeUnit.BYTE.toGigaByte((double) resize)
this\ snapshot\ recording\ the\ volume\ state\ before\ resize\ to\ %fG\ is\ created\ automatically = 该快照记录云盘扩容到{0}G之前的状态，由系统自动创建

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1823
# args: msg.getUuid()
DeleteVolumeQos\ [%s]\ ignore\ because\ of\ account\ privilege. = DeleteVolumeQoS[{0}]由于帐户权限而忽略。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1891
# args: ivo.getHostUuid(),ivo.getState(),VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString()
Cannot\ delete\ vm's\ volume\ qos\ on\ host\ %s,\ because\ the\ current\ vm\ is\ in\ state\ of\ %s,\ but\ support\ expect\ states\ are\ [%s,\ %s] = 无法在物理机{0}上删除VM的卷QoS，因为当前VM的状态为{1}，但支持的预期状态为[{2}，{3}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2039
# args: VolumeQos.getVolumeQosByMode(self.getVolumeQos(), mode)
non\ admin\ account\ cannot\ set\ bandwidth\ more\ than\ %s = 非管理员帐户无法设置大于{0}的带宽

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2051
# args: 
unknown\ message\ version. = 未知消息版本。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2068
# args: 
unknown\ qos\ limit\ type. = 未知的QoS限制类型。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2082
# args: limitType
Non-admin\ account\ is\ only\ allowed\ to\ set\ the\ total\ %s\ limit. = 仅允许非管理员帐户设置总{0}限制。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2091
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ total\ %s\ limits\ as\ unlimited. = 非管理员帐户无法将总{0}限制设置为无限制。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2095
# args: limitType.getType(),totalLimit
Non-admin\ account\ cannot\ set\ the\ total\ %s\ limit\ greater\ than\:\ %s = 非管理员帐户无法将总{0}限制设置为大于：{1}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2102
# args: limitType.getType()
Non-admin\ account\ is\ only\ allowed\ to\ set\ the\ read/write\ %s\ limits. = 仅允许非管理员帐户设置读/写{0}限制。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2108
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ read\ %s\ limits\ as\ unlimited. = 非管理员帐户无法将读取{0}限制设置为无限制。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2119
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ write\ %s\ limits\ as\ unlimited. = 非管理员帐户无法将写入{0}限制设置为无限制。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2128
# args: limitType.getType(),readLimit,writeLimit
Non-admin\ account\ cannot\ set\ the\ read/write\ %s\ limits\ greater\ than\:\ %s/%s = 非管理员帐户无法将读/写{0}限制设置为大于：{1}/{2}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2215
# args: self.getUuid()
volume\ [%s]\ isn't\ attached\ to\ any\ vm,\ cannot\ get\ qos\ by\ forceSync = 卷[{0}]未连接到任何VM，无法通过ForceSync获得QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2221
# args: self.getUuid()
volume\ [%s]\ isn't\ attached\ to\ any\ vm\ (or\ vm\ is\ not\ existed\ now),\ cannot\ sync\ volume\ qos = 卷[{0}]未连接到任何VM（或VM现在不存在），无法同步卷QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2226
# args: vm.getUuid()
vm\ [%s]'\ state\ must\ be\ Running\ or\ Paused\ to\ sync\ volume\ qos = VM[{0}]状态必须为“正在运行”或“已暂停”才能同步卷QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2231
# args: 
vm\ [%s]'s\ HostUuid\ is\ null,\ cannot\ sync\ volume\ qos = VM[{0}]的HostUuid为空，无法同步卷QoS

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2377
# args: msg.getVolume().getUuid(),msg.getVmInstanceUuid()
failed\ to\ detach\ shareable\ volume[uuid\:%s]\ from\ VmInstance[uuid\:%s] = 不能卸载云主机[uuid:{1}]上的共享盘[uuid:{0}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2389
# args: StringUtils.join(errors, "\n\n")
failed\ to\ detach\ shareable\ volume\ from\ VmInstance\:[\n%s] = 不能卸载云主机上的共享盘，原因是{0}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java:89
# args: resourceUuid
unsupported\ operation\ for\ setting\ root\ volume[%s]\ multiQueues. = 不支持设置根卷[{0}]多队列的操作。

# at: src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java:93
# args: resourceUuid
unsupported\ operation\ for\ setting\ virtio-scsi\ volume[%s]\ multiQueues. = 不支持设置virtio-SCSI卷[{0}]多队列的操作。

# at: src/main/java/org/zstack/mevoco/PauseWorldApiInterceptor.java:46
# args: MevocoSystemTags.CONFIRM_CALL_API.getTagFormat()
ZStack\ has\ been\ paused,\ reject\ all\ API\ which\ are\ not\ read\ only.\ If\ you\ really\ want\ to\ call\ it\ and\ known\ the\ consequence,\ add\ '%s'\ into\ systemTags. = ZStack已暂停，拒绝所有非只读API。如果您确实想调用它并且知道结果，请将“{0}”添加到SystemTags中。

# at: src/main/java/org/zstack/mevoco/PremiumGlobalConfig.java:27
# args: getName()
the\ current\ version\ of\ license\ does\ not\ support\ modifying\ this\ global\ config\ [name\:%s] = 当前license版本不支持修改此全局设置[name:{0}]

# at: src/main/java/org/zstack/mevoco/PremiumResourceConfig.java:22
# args: globalConfig.getName()
the\ current\ version\ of\ license\ does\ not\ support\ modifying\ this\ resource\ config\ [name\:%s] = 当前版本的许可证不支持修改此资源配置[名称：{0}]

# at: src/main/java/org/zstack/mevoco/VolumeQos.java:331
# args: 
cannot\ find\ mode\ from\ null\ VolumeQos = 无法从NULL卷中找到模式QoS

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:190
# args: msg.getMonitorTriggerUuid()
cannot\ find\ monitor\ trigger[uuid\:%s],\ it\ may\ have\ been\ deleted = 不能找到触发监控器[uuid:{0}]，它可能已经被删除了

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:199
# args: msg.getMonitorTriggerActionUuid()
cannot\ find\ monitor\ trigger\ action[uuid\:%s],\ it\ may\ have\ been\ deleted = 为找到这个监控触发行为[uuid:{0}]，它可能已经被删除了

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:243
# args: msg.getResourceType()
the\ resource[type\:%s]\ doesn't\ have\ any\ monitoring\ items = 该资源[type:{0}]没有任何监控条目

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:335
# args: msg.getTargetResourceUuid(),msg.getSession().getAccountUuid()
the\ resource[uuid\:%s]\ doesn't\ belong\ to\ the\ account[uuid\:%s] = 该资源[uuid:{0}]不属于账户[uuid:{1}]

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:386
# args: resourceUuid
cannot\ find\ type\ for\ the\ resource[uuid\:%s] = 未找到资源[uuid:{0}]这种类型

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:391
# args: resourceType,triggerExpression.getItem()
no\ monitoring\ item\ found\ for\ the\ resourceType[%s]\ and\ item[%s] = 未找到资源类型[{0}]和条目[{1}]这种监控条目

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:50
# args: args
A\ resource[name\:{resourceName},\ uuid\:{resourceUuid},\ type\:{resourceType}]'s\ monitoring\ trigger[uuid\:{triggerUuid}]\ changes\ status\ to\ {triggerStatus} = 资源[name:'{resourceName}', uuid:'{resourceUuid}', type:'{resourceType}']的监听触发器[uuid:'{triggerUuid}']修改状态为'{triggerStatus}'

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:55
# args: 
\n\=\=\=\ BELOW\ ARE\ DETAILS\ OF\ THE\ PREVIOUS\ ALERT\ \=\=\= = \n=== 以下是上一次警告内容 ===

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:58
# args: 
\nalert\ details\: = \n警告内容: 

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:59
# args: args
\ncondition\:\ {itemName}\ {operator}\ {threshold} = \n环境: '{itemName}' '{operator}' '{threshold}'

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:60
# args: args
\ncurrent\ value\:\ {value} = \n当前值: '{value}'

# at: src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java:31
# args: 
Host\ CPU\ utilization = CPU使用率

# at: src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java:29
# args: 
VM\ CPU\ utilization = 云主机CPU使用率

# at: src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java:98
# args: ruleFile
fail\ to\ create\ new\ File[%s] = 无法创建新文件[{0}]

# at: src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java:143
# args: rb.name,r
conflict\ alert\ rule[%s],\ there\ has\ been\ a\ rule[%s]\ with\ the\ same\ name = 冲突提示规则[{0}]，这里已经存在和它一样名称的规则

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusAlert.java:79
# args: resourceName,resourceUuid,toI18nString(resourceType),itemName,toI18nString(expression.getOperator()),expression.getConstant(),value,tvo.getDuration()
ALERT\:\n\ resource[name\:\ %s,\ uuid\:\ %s,\ type\:\ %s]\nevent\:\ %s\ %s\ %s\ncurrent\ value\:\ %s\nduration\:\ %s\ seconds\n = 警告:\n 资源[名称: {0}, uuid: {1}, 类型: {2}]\n 事件: {3} {4} {5}\n 周期: {7}\n

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:40
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it\ must\ be\ in\ format\ of,\ for\ example,\ 10s,\ 1h = 相关时间[{0}]不合法,格式必须例如10s，1h

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:44
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it's\ too\ big = 相关时间[{0}]不合法，值's 过大

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilAlertWriter.java:95
# args: 
CPU\ number = CPU数量

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilItem.java:70
# args: cpu,trigger.getTargetResourceUuid(),cpuNum
invalid\ cpu[%s],\ the\ host[uuid\:%s]\ doesn't\ have\ a\ CPU\ numbered\ by\ %s = 无效CPU数目[{0}]，物理机[uuid:{1}]存在的CPU数目是{2}

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:92
# args: 
Host\ Disk\ Capacity = 物理机磁盘容量

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:98
# args: 
Host\ Disk\ Capacity\ type = 物理机磁盘容量类型

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:100
# args: 
Host\ devices = 物理机服务

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostNetworkIOAlertWriter.java:77
# args: 
Host = 物理机

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusMonitorProviderFactory.java:124
# args: ret.get("errorType"),ret.get("error")
query\ failure,\ errorType\:%s,\ error\:\ %s = 查询失败，错误类型: {0}, 错误: {1}

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:81
# args: 
CPU\ Utilization = CPU使用率

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:84
# args: 
CPU\ utilization\ type = CPU使用类型

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:86
# args: 
Disk\ IO = 磁盘IO

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:92
# args: 
Disk\ IO\ direction = 磁盘IO方向

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:93
# args: 
Disk\ IO\ type = 磁盘IO类型

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOItem.java:19
# args: type,ALLOWED_TYPES
invalid\ type[%s],\ only\ %s\ are\ allowed = 无效类型[{0}]，只有{1}被允许

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilAlertWriter.java:77
# args: 
Memory\ Utilization = 内存使用率

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:57
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ float\ or\ double\ number = 无效的参数值[{0}]，它必须是一个float或者double类型的数值

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:53
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ float\ or\ double\ number\ greater\ than\ zero\ and\ lesser\ than\ one = 无效参数值[{0}]，它必须是一个float或者double类型的大于0小于1的数值

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:47
# args: expression.getArguments().keySet()
invalid\ arguments\ %s,\ no\ argument\ is\ allowed = 无效参数列表{0}，没有被参数被允许

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:84
# args: 
Network\ IO = 网络IO

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:89
# args: 
Network\ IO\ direction = 网络IO方向

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:77
# args: 
Virtual\ Machine = 云主机器

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:22
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ number(int,\ long,\ float,\ double) = 无效参数值[{0}]，他应该是一个数字(int, long, float, double)

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:18
# args: dir,ALLOWED_DIRECTION
invalid\ direction[%s],\ only\ %s\ are\ allowed = 无效direction[{0}]，只有{1}被允许

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:106
# args: expr,e.getMessage()
invalid\ expression\:\ %s,\ %s = 无效的语句: {0}, {1}

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ expression\ found = 无效的语句: {0}，未找到该语句

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:127
# args: key
missing\ parameter\ '%s'\ in\ the\ expression = 在语句中缺失参数{0}

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:131
# args: key,clz,value.getClass()
wrong\ type\ of\ parameter\ '%s'\ in\ the\ expression,\ it\ must\ be\ type\ of\ %s,\ but\ got\ %s = 在语句中{0}参数类型错误，它必须是{1}这种类型，但是获得的是{2}

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:58
# args: partNum
The\ number[value\:%s]\ is\ not\ a\ valid\ part\ number. = 编号[值：{0}]不是有效的物料编号。

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:69
# args: mttyDeviceUuid,accu
The\ quantity\ exceeded.\ The\ device[uuid\:\ %s]\ required\ se\ devices\ number\ exceeds\ a\ quantiry[value\:\ %s]. = 数量超出。设备[uuid：{0}]所需的SE设备数量超过数量[值：{1}]。

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:93
# args: rsp.getError()
failed\ to\ generate\ se\ devices,\ because\:%s = 无法生成SE设备，因为：{0}

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:152
# args: rsp.getError()
failed\ to\ ungenerate\ se\ devices,\ because\:%s = 无法取消生成SE设备，因为：{0}

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:41
# args: msg.getMttyDeviceUuid()
mtty\ device[uuid\:%s]\ is\ not\ virtualized\ into\ mdevs = MTTY设备[uuid：{0}]未虚拟化为MDEV

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:58
# args: msg.getMttyDeviceUuid()
mdev\ devices\ generated\ from\ mtty\ device[uuid\:%s]\ still\ attached\ to\ vm = 从MTTY设备[uuid：{0}]生成的MDEV设备仍连接到云主机

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:87
# args: mtty.getHostUuid(),mtty.getUuid()
the\ host[uuid\:%s]\ that\ mtty\ device[uuid\:%s]\ in\ is\ not\ Connected = 未连接MTTY设备[uuid：{1}]所在的物理机[uuid：{0}]

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:78
# args: msg.getMttyDeviceUuid()
mtty\ device[uuid\:%s]\ cannot\ be\ virtualized\ into\ mdevs = MTTY设备[uuid：{0}]无法虚拟化为MDEV

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:59
# args: rpAddress
Rendezvous\ Point\ [%s]\ is\ not\ a\ unicast\ address = 组播聚合点地址[{0}]不是单播地址

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:63
# args: multicastGroup
group\ address\ [%s]\ is\ not\ a\ multicast\ address = 地址 [{0}] 不是组播地址

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:75
# args: msg.getRpAddress(),msg.getGroupAddress(),msg.getUuid()
rp\ address\ pair\ [%s\:\ %s]\ already\ existed\ for\ multicast\ router\ [uuid\:%s] = 组播聚合点地址对[{0}: {1}]已经存在于组播路由器[uuid:{2}]的配置中

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:89
# args: msg.getRpAddress(),msg.getGroupAddress(),msg.getUuid()
rp\ address\ tuple\ [%s\ \:\ %s]\ is\ not\ existed\ for\ multicast\ router\ [uuid\:%s] = 组播聚合点地址对[{0}: {1}]不存于组播路由器[uuid:{2}]的配置中

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:98
# args: msg.getUuid()
multicastRouter[uuid\:%s]\ has\ not\ been\ attached\ to\ vpc\ router = 组播路由器[uuid:{0}]没有关联到VPC路由器

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:124
# args: msg.getVpcRouterVmUuid()
multicast\ already\ enabled\ on\ vpc\ router\ uuid[\:%s] = VPC路由器[uuid:{0}]的组播路功能已经打开

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:317
# args: msg.getUuid()
vpc\ router\ for\ multicast\ router\ [uuid\:%s]\ has\ been\ deleted = 组播路由器[uuid:{0}]关联的VPC路由器已经被删除

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:760
# args: msg.getUuid()
multicast\ router\ [uuid\:%s]\ is\ not\ attached\ to\ Vpc\ Router = 组播路由器[uuid:{0}]没有关联到VPC路由器

# at: src/main/java/org/zstack/multicast/router/backend/MulticastRouterVyosBackendImpl.java:95
# args: vrUuid
multicast\ router\ [uuid\:%s]\ has\ been\ delete\ during\ enable\ multilcast\ on\ backend = 组播路由器[uuid:{0}]已经被删除

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:91
# args: msg.getNasFileSystemUuid()
nas\ file\ system\ [%s]\ is\ not\ existed\ yet = NAS文件系统[{0}]尚不存在

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:139
# args: type
cannot\ find\ nas\ factory\ for\ type\:\ %s = 找不到类型为{0}的NAS工厂

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:164
# args: f.getClass().getSimpleName(),old.getClass().getSimpleName(),f.getNasFileSystemType()
duplicate\ NasFileSystemFactory[%s,\ %s]\ for\ type[%s] = 类型[{2}]的NASFileSystemFactory[{0}，{1}]重复

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:63
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ attached\ to\ cluster[uuid\:%s],\ can't\ attach\ again = 不能再次挂载二层网络[uuid:{0}]，因为已经挂载到集群[uuid:{1}]上了

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:75
# args: otherL2s.get(0),l2.getPhysicalInterface()
could\ not\ attach\ l2\ network,\ because\ there\ is\ another\ network\ [uuid\:%]\ on\ physical\ interface\ [%s]\ with\ different\ vswitch\ type = 无法连接二层网络，因为物理接口[{0}]上存在另一个具有不同vSwitch类型的网络[uuid：%]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:87
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ not\ attached\ to\ cluster[uuid\:%s] = 二层网络[uuid:{0}]没有挂载到集群上[uuid:{1}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:101
# args: msg.getType()
unsupported\ l2Network\ type[%s] = 不支持的网络类型[{0}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:105
# args: msg.getvSwitchType()
unsupported\ vSwitch\ type[%s] = 不支持的vSwitch类型[{0}]

# at: src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:626
# args: vl2.getUuid(),vl2.getName(),msg.getClusterUuid(),vl2.getPhysicalInterface(),vl2.getVlan(),tl2.getUuid()
There\ has\ been\ a\ L2VlanNetwork[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s],\ vlan[%s].\ Failed\ to\ attach\ L2VlanNetwork[uuid\:%s] = 二层网络挂载失败[uuid:{5}]: 二层网络[uuid:{0}, name:{1}]的物理接口[{3}], vlan[{4}]已经挂载到集群[uuid:{2}]上

# at: src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:608
# args: l2.getUuid(),l2.getName(),msg.getClusterUuid(),l2.getPhysicalInterface(),tl2.getUuid()
There\ has\ been\ a\ l2Network[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s].\ Failed\ to\ attach\ l2Network[uuid\:%s] = 二层网络挂载失败[uuid:{4}]: 二层网络[uuid:{0}, name:{1}]的物理接口[{3}]]已经挂载到集群[uuid:{2}]上

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:84
# args: msg.getvSwitchUuid(),msg.getVlan()
could\ not\ create\ L2PortGroupNetwork,\ because\ L2VirtualSwitchNetwork[uuid\:%s]\ already\ has\ L2PortGroupNetworks\ with\ the\ same\ vlanId[%s] = 创建端口组失败，因为虚拟交换机[uuid:{0}]已经存在vlanId[{1}]的端口组

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:106
# args: vswitchVO.getPhysicalInterface(),msg.getClusterUuid()
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ interface[%s]\ in\ cluster[uuid\:%s]\ is\ already\ used\ for\ another\ L2VirtualSwitchNetwork = 挂载虚拟交换机失败，因为集群[uuid:{1}]中的网卡[{0}]已被其他虚拟交换机使用

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:113
# args: msg.getClusterUuid()
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ there\ are\ no\ hosts\ in\ cluster[uuid\:%s] = 挂载虚拟交换机失败，因为集群[uuid:{0}]中不存在任何物理机

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:126
# args: vswitchVO.getPhysicalInterface(),hostUuid
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ interface[%s]\ should\ be\ created\ on\ host[uuid\:%s] = 挂载虚拟交换机失败，因为网卡[{0}]应当在物理机[uuid:{1}]上创建

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java:231
# args: inv.getUuid(),destHostUuid
cannot\ configure\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = 无法为云主机[uuid:{0}]在目标物理机[uuid:{1}]上配置VXLAN网络

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:77
# args: vtepIps,hostUuid
find\ multiple\ vtep\ ips[%s]\ for\ one\ host[uuid\:%s],\ need\ to\ delete\ host\ and\ add\ again = 在一个物理机[uuid:{1}]发现多个VTEP IP，需要删除物理机在进行添加

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:82
# args: hostUuid,l2vxlan.getPoolUuid()
failed\ to\ find\ vtep\ on\ host[uuid\:\ %s],\ please\ re-attach\ vxlanpool[uuid\:\ %s]\ to\ cluster. = 无法在物理机[uuid：{0}]上找到VTEP，请将vxlanpool[uuid：{1}]重新挂接到集群。

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:133
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 为二层网络[uuid:{1}, type:{2}, vni:{3}]在KVM物理机[uuid:{4}]上创建网桥[{0}]失败，错误细节: {5}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:197
# args: cmd.getCidr(),l2vxlan.getUuid(),l2vxlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = 为KVM物理机[uuid:{3}]上的L2 VXLAN 网络[uuid:{1}, name:{2}]检查CIDR[{0}]失败，错误细节: {4}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:474
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 无法删除KVM物理机[uuid：{4}]上的二层网络[uuid：{1}，类型：{2}，VNI：{3}]的网桥[{0}]，因为{5}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:261
# args: l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ realize\ vxlan\ network\ pool[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 无法在KVM物理机[uuid：{2}]上实现VXLAN网络池[uuid：{0}，类型：{1}]，因为{3}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:111
# args: cmd.getCidr(),vxlanPool.getUuid(),vxlanPool.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetworkPool[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = 检查在kvm物理机[uuid:{3}]上的l2VxlanNetworkPool[uuid:{1}, name:{2}]的CIDR[{0}]失败，{4}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:37
# args: VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()
need\ to\ input\ one\ system\ tag\ like\ \:\ [%s] = 需要输入一个系统标签，格式为：[{0}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:49
# args: tag,VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()
wrong\ system\ tag\ [%s],\ should\ be\ like\ \:\ [%s] = 错误的系统标签[{0}]，格式应该为：[{1}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:55
# args: tag
wrong\ cidr\ format\ in\ system\ tag\ [%s] = 系统标签[{0}]中的cidr格式错误

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:64
# args: inv.getType(),overlappedPool
overlap\ vni\ range\ with\ %s\ [%s] = 与{0}[{1}]的vni范围重叠

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:99
# args: 
vxlan\ network\ pool\ doesn't\ support\ create\ l3\ network = vxlan network pool不支持创建三层网络

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanPoolApiInterceptor.java:56
# args: msg.getHostUuid(),msg.getPoolUuid()
vxlan\ vtep\ address\ for\ host\ [uuid\ \:\ %s]\ and\ pool\ [uuid\ \:\ %s]\ pair\ already\ existed = 物理机[uuid : {0}]在vxlan资源池[uuid : {1}]中隧道端点地址已经配置

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:27
# args: 
it\ is\ used = 被占用

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:25
# args: 
it\ is\ not\ in\ this\ range = 不在IP地址范围内

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:23
# args: 
it\ is\ gateway = 网关不能分配

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:159
# args: l2VO.getUuid(),msg.getL3NetworkUuid()
could\ not\ set\ mtu\ because\ l2\ network[uuid\:%s]\ of\ l3\ network\ [uuid\:%s]\ mtu\ can\ not\ be\ bigger\ than\ the\ novlan\ network = 无法设置MTU，因为三层网络[uuid：{1}]MTU的二层网络[uuid：{0}]不能大于NoVLAN网络

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:175
# args: 
can\ not\ delete\ the\ last\ normal\ ip\ range\ because\ there\ is\ still\ has\ address\ pool = 无法删除最后一个正常IP范围，因为仍有地址池

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:190
# args: 
you\ must\ update\ system\ and\ category\ both = 必须同时更行system属性和category属性

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:474
# args: L3NetworkCategory.validCombination
not\ valid\ combination\ of\ system\ and\ category,only\ %s\ are\ valid = 无效的system属性和category属性的组合，只有{0}是有效的

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:237
# args: msg.getIp()
invalid\ IP[%s] = 错误的IP值[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:221
# args: msg.getL3NetworkUuid()
no\ ip\ range\ in\ l3[%s] = 没有IP在三层网络范围中

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:225
# args: msg.getRouterInterfaceIp(),ipr.getUuid(),ipr.getNetworkCidr(),msg.getL3NetworkUuid()
ip[%s]\ is\ not\ in\ the\ cidr\ of\ ip\ range[uuid\:%s,\ cidr\:%s]\ which\ l3\ network[%s]\ attached = IP[{0}]没有在三层网络[{3}]的CIDR的IP范围内[uuid:{1}, cidr:{2}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:229
# args: msg.getRouterInterfaceIp(),ipr.getUuid(),ipr.getStartIp(),ipr.getEndIp(),msg.getL3NetworkUuid()
ip[%s]\ in\ ip\ range[uuid\:%s,\ startIp\:%s,\ endIp\:%s]\ which\ l3\ network[%s]\ attached,\ this\ is\ not\ allowed = IP[{0}]在三层网络[{4}]绑定的IP范围内[uuid:{1}, startIp:{2}, endIp:{3}]，这是不被允许的

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:243
# args: 
ipRangeUuid\ and\ l3NetworkUuid\ cannot\ both\ be\ null;\ you\ must\ set\ either\ one. = IP段和L3的uuid不能都为空，您必须选择一个填上

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:276
# args: msg.getStart(),msg.getStart()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ start[ip\:%s]\ is\ not\ a\ correct\ ipv6\ address = 无法使用start[IP：{0}]获取可用IP，因为start[IP：{1}]不是正确的IPv6地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:274
# args: msg.getStart(),msg.getStart()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ start[ip\:%s]\ is\ not\ a\ correct\ ipv4\ address = 无法使用start[IP：{0}]获取可用IP，因为start[IP：{1}]不是正确的IPv4地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:272
# args: msg.getStart(),msg.getL3NetworkUuid()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ l3Network[uuid\:%s]\ is\ dual\ stack = 无法使用start[IP：{0}]获取可用IP，因为L3Network[uuid：{1}]是双堆栈

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:408
# args: msg.getNetworkCidr()
%s\ is\ not\ a\ valid\ network\ cidr = {0}不是有效的无类别域间路由

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:304
# args: msg.getGateway()
%s\ is\ not\ a\ valid\ ipv6\ address = {0}不是有效的IPv6地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:308
# args: msg.getStartIp(),msg.getEndIp(),msg.getPrefixLen(),msg.getGateway()
[startIp\ %s,\ endIp\ %s,\ prefixLen\ %d,\ gateway\ %s]\ is\ not\ a\ valid\ ipv6\ range = IPv6地址段{0}-{1}/{2}, 网关{3}不是有效的IPv6地址段

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:633
# args: 
adding\ normal\ ip\ range\ must\ specify\ gateway\ ip\ address = 添加正常IP范围必须指定网关IP地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:324
# args: 
can\ not\ add\ ip\ range,\ because\ ipv6\ address\ pool\ is\ not\ supported = 无法添加IP范围，因为不支持IPv6地址池

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:335
# args: IPv6Constants.IPV6_PREFIX_LEN_MIN,IPv6Constants.IPV6_PREFIX_LEN_MAX
ip\ range\ prefix\ length\ is\ out\ of\ range\ [%d\ -\ %d]\  = IPv6地址前缀长度不在有效范围内[{0}-{1}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:342
# args: 
can\ not\ add\ ip\ range,\ because\ system\ network\ doesn't\ support\ ipv6\ yet = 无法添加IP范围，因为系统网络尚不支持IPv6

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:348
# args: ipr.getAddressMode(),rangeVOS.get(0).getAddressMode()
addressMode[%s]\ is\ different\ from\ L3Netowork\ address\ mode[%s] = 地址模式[{0}]和三层网络的地址模式[{1}]不同

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:354
# args: IPv6Constants.IPV6_STATELESS_PREFIX_LEN
ipv6\ prefix\ length\ must\ be\ %d\ for\ Stateless-DHCP\ or\ SLAAC = Stateless-DHCP or SLAAC地址模式IPv6网络前缀长度必须是{0}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:364
# args: ipr.getStartIp(),ipr.getEndIp(),r.getStartIp(),r.getEndIp()
new\ ip\ range\ [startip\ \:%s,\ endip\ \:%s]\ is\ overlaped\ with\ old\ ip\ range[startip\ \:%s,\ endip\ \:%s] = 新的IP地址段[{0}-{1}]和旧的IP地址段[{2}-{3}]冲突

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:374
# args: r.getNetworkCidr(),ipr.getNetworkCidr()
new\ network\ CIDR\ [%s]\ is\ different\ from\ old\ network\ cidr\ [%s] = 同一三层网络上不能加载多个CIDR。

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:618
# args: ipr.getGateway(),r.getGateway()
new\ add\ ip\ range\ gateway\ %s\ is\ different\ from\ old\ gateway\ %s = 新ip段的网关地址{0}和已有ip段的网关地址{1}冲突

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:611
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getEndIp()
gateway[%s]\ can\ not\ be\ part\ of\ range[%s,\ %s] = 网关[{0}]不能是IP段[{1}, {2}]的一部分

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:401
# args: msg.getNetworkCidr()
%s\ is\ not\ an\ allowed\ network\ cidr,\ because\ it\ doesn't\ have\ usable\ ip\ range = {0}是不允许的无类别域间路由，因为它不支持可用的IP段

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:405
# args: msg.getGateway(),msg.getNetworkCidr()
%s\ is\ not\ the\ first\ or\ last\ address\ of\ the\ cidr\ %s = {0}不是CIDR{1}的第一个或最后一个地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:432
# args: 
ipRangeUuids,\ L3NetworkUuids,\ zoneUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = ipRangeUuids, L3NetworkUuids, zoneUuids 至少一个不是为空列表，或者全部不为空

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:453
# args: msg.getType()
unsupported\ l3network\ type[%s] = 不支持的三层网络类型[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:459
# args: msg.getDnsDomain()
%s\ is\ not\ a\ valid\ domain\ name = {0}不是有效的域名

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:580
# args: r.getUuid(),r.getStartIp(),r.getEndIp()
overlap\ with\ ip\ range[uuid\:%s,\ start\ ip\:%s,\ end\ ip\:\ %s] = 重叠的IP段[uuid:{0}, 起始ip:{1}, 尾ip: {2}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:523
# args: l3Vo.getUuid(),l3Vo.getName()
l3\ network\ [uuid\ %s\:\ name\ %s]\ is\ not\ a\ public\ network,\ address\ pool\ range\ can\ not\ be\ added = 三层网络[uuid{0}：名称{1}]不是公用网络，无法添加地址池范围

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:527
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ D\ class\ addresses\ which\ are\ for\ multicast = 这个IP段[{0} ~ {1}]包含了D类的组播地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:531
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ E\ class\ addresses\ which\ are\ reserved = 这个IP段[{0} ~ {1}]包含了E类的保留地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:535
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ link\ local\ addresses\ which\ are\ reserved = 这个IP段[{0} ~ {1}]包含了本地的保留地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:541
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getNetmask()
the\ gateway[%s]\ is\ not\ in\ the\ subnet\ %s/%s = 网关[{0}]不在子网{1}/{2}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:545
# args: 
ip\ allocation\ can\ not\ contain\ network\ address\ or\ broadcast\ address = ip 地址分配不能包含网络地址或广播的地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:551
# args: ipr.getStartIp()
start\ ip[%s]\ is\ not\ a\ IPv4\ address = 开始的ip[{0}] 不是IPV4的地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:555
# args: ipr.getEndIp()
end\ ip[%s]\ is\ not\ a\ IPv4\ address = 结束的ip[{0}] 不是IPV4的地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:559
# args: ipr.getGateway()
gateway[%s]\ is\ not\ a\ IPv4\ address = 网关[{0}]不是IPV4的地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:563
# args: ipr.getNetmask()
netmask[%s]\ is\ not\ a\ netmask,\ and\ the\ IP\ range\ netmask\ cannot\ be\ 0.0.0.0 = 子网掩码[{0}]不是子网掩码，并且IP段的子网掩码不能是0.0.0.0

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:569
# args: ipr.getStartIp(),ipr.getEndIp()
start\ ip[%s]\ is\ behind\ end\ ip[%s] = 起始ip[{0}]在尾ip[{1}]后

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:596
# args: r.getUuid(),rcidr,cidr
multiple\ CIDR\ on\ the\ same\ L3\ network\ is\ not\ allowed.\ There\ has\ been\ a\ IP\ range[uuid\:%s,\ CIDR\:%s],\ the\ new\ IP\ range[CIDR\:%s]\ is\ not\ in\ the\ CIDR\ with\ the\ existing\ one = 在相同的三层网络上多个CIDR是不允许的，已有的IP范围 [uuid: {0}，CIDR: {1}]。新的IP范围 [CIDR: {2}] 不在现有的一个CIDR

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:606
# args: ipr.getEndIp(),ipr.getStartIp(),ipr.getNetmask()
the\ endip[%s]\ is\ not\ in\ the\ subnet\ %s/%s = IP段结束地址不在子网{1}/{2}范围内

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:659
# args: msg.getDns(),msg.getL3NetworkUuid()
there\ has\ been\ a\ DNS[%s]\ on\ L3\ network[uuid\:%s] = 在三层网络[uuid:{1}]上已经存在一个DNS[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:692
# args: msg.getL3NetworkUuid()
prefix\ [%s]\ is\ not\ a\ IPv4\ network\ cidr = 网络段{0}不是合法的网络段

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:679
# args: msg.getNexthop()
nexthop[%s]\ is\ not\ a\ IPv4\ address = 下一跳{0}不是有效的IP地址

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:686
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ has\ been\ a\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = 三层网络{1}已配置物理机路由{0}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:699
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ is\ no\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = 三层网络{1}没有物理机路由{0}

# at: src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java:286
# args: rsp.getError()
apply\ gratuitous\ arp\ error,\ because\:%s = 应用无故ARP错误，原因：{0}

# at: src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java:329
# args: rsp.getError()
release\ gratuitous\ arp\ error,\ because\:%s = 释放无端的ARP错误，原因：{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:248
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ vm\ nic[uuid\:%s]\ not\ found = 无法设置VM NIC安全组，因为找不到VM NIC[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:254
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ the\ vm\ nic[uuid\:%s]\ not\ attached\ to\ any\ security\ group = 无法设置VM NIC安全组，因为VM NIC[uuid：{0}]未连接到任何安全组

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:261
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ not\ found = 无法设置VM NIC安全组，因为找不到安全组[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:266
# args: priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ cannot\ be\ less\ than\ 1 = 无法设置VM NIC安全组，因为优先级无效，优先级[{0}]不能小于1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:270
# args: aoMap.get(priority),ao.getSecurityGroupUuid(),priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ priority,\ both\ security\ group\ %s\ and\ %s\ have\ priority[%d] = 无法设置VM NIC安全组，因为优先级重复，安全组{0}和{1}都具有优先级[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:273
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ security\ group[uuid\:%s] = 无法设置VM NIC安全组，因为安全组[uuid：{0}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:285
# args: priorities[0]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority\ expects\ to\ start\ at\ 1,\ but\ [%d] = 无法设置VM NIC安全组，因为优先级无效，优先级应从1开始，但[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:289
# args: priorities[i],priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ and\ priority[%d]\ expected\ to\ be\ consecutive = 无法设置VM NIC安全组，因为优先级无效，优先级[{0}]和优先级[{1}]应是连续的

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:301
# args: ref.getSecurityGroupUuid(),sgOwnerAccountUuid
could\ no\ set\ vm\ nic\ security\ Group,\ because\ securityGroup[uuid\:%s]\ is\ already\ attached\ on\ this\ nic\ by\ account[uuid\:%s],\ current\ user\ does\ not\ have\ permission\ to\ delete = 无法设置VM NIC安全组，因为SecurityGroup[uuid：{0}]已由帐户[uuid：{1}]附加在此NIC上，当前用户没有删除权限

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:310
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ ruleUuids\ is\ empty = 无法更改安全组规则状态，因为RuleUIds为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:314
# args: msg.getSecurityGroupUuid()
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group[uuid\:%s]\ not\ found = 无法更改安全组规则状态，因为找不到安全组[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:322
# args: r
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group\ rule[uuid\:%s]\ not\ found = 无法更改安全组规则状态，因为找不到安全组规则[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:331
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ no\ security\ group\ rule\ state\ need\ to\ change = 无法更改安全组规则状态，因为无需更改安全组规则状态

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:339
# args: 
could\ no\ change\ vm\ nic\ security\ policy,\ because\ ingress\ policy\ and\ egress\ policy\ cannot\ be\ both\ null = 无法更改VM NIC安全策略，因为入口策略和出口策略不能同时为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:342
# args: msg.getIngressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ ingress\ policy[%s] = 无法更改VM NIC安全策略，因为入口策略[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:346
# args: msg.getEgressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ egress\ policy[%s] = 无法更改VM NIC安全策略，因为出口策略[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:350
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ not\ found = 无法更改VM NIC安全策略，因为找不到VM NIC[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:355
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ has\ no\ security\ policy = 无法更改VM NIC安全策略，因为VM NIC[uuid：{0}]没有安全策略

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:369
# args: msg.getType()
could\ not\ update\ security\ group\ rule\ priority,\ because\ invalid\ type[%s] = 无法更新安全组规则优先级，因为类型[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:374
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ is\ not\ exist = 无法更新安全组规则优先级，因为安全组[uuid：{0}]不存在

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:378
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rules\ is\ empty = 无法更新安全组规则优先级，因为规则为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:388
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ rules\ size\ not\ match = 无法更新安全组规则优先级，因为安全组[uuid：{0}]规则大小不匹配

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:393
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ priority[%d]\ is\ invalid = 无法更新安全组规则优先级，因为规则优先级[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:396
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ has\ duplicate = 无法更新安全组规则优先级，因为优先级[{0}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:402
# args: ao.getRuleUuid(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule[uuid\:%s]\ not\ in\ security\ group[uuid\:%s] = 无法更新安全组规则优先级，因为规则[uuid：{0}]不在安全组[uuid：{1}]中

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:405
# args: ao.getPriority(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ not\ in\ security\ group[uuid\:%s] = 无法更新安全组规则优先级，因为优先级[{0}]不在安全组[uuid：{1}]中

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:410
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ uuid\ duplicate = 无法更新安全组规则优先级，因为规则uuid重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:417
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule\ uuid[%s]\ is\ not\ exist = 无法更改安全组规则，因为安全组规则uuid[{0}]不存在

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:423
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ is\ default\ rule,\ only\ the\ description\ and\ status\ can\ be\ set = 无法更改安全组规则，因为安全组规则[{0}]是默认规则，只能设置描述和状态

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:429
# args: msg.getUuid(),SecurityGroupConstant.DEFAULT_RULE_PRIORITY
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ priority\ cannot\ be\ set\ to\ default\ rule\ priority[%d] = 无法更改安全组规则，因为安全组规则[{0}]优先级无法设置为默认规则优先级[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:438
# args: vo.getType(),count.intValue(),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = 无法更改安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:441
# args: vo.getType().toString(),count.intValue()
could\ not\ change\ security\ group\ rule,\ because\ the\ maximum\ priority\ of\ %s\ rule\ is\ [%d] = 无法更改安全组规则，因为{0}规则的最高优先级为[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:450
# args: msg.getState()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ state[%s] = 无法更改安全组规则，因为状态[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:458
# args: msg.getAction()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ action[%s] = 无法更改安全组规则，因为操作[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:466
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ protocol[%s] = 无法更改安全组规则，因为协议[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:498
# args: msg.getUuid(),msg.getSrcIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Egress,\ srcIpRange[%s]\ cannot\ be\ set = 无法更改安全组规则，因为安全组规则[{0}]类型为出口，无法设置SrcIPRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:495
# args: msg.getUuid(),msg.getDstIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Ingress,\ dstIpRange[%s]\ cannot\ be\ set = 无法更改安全组规则，因为安全组规则[{0}]类型为入口，无法设置DSTIPRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:488
# args: msg.getSrcIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ srcIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = 无法更改安全组规则，因为已设置SrcIPRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:501
# args: msg.getDstIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ dstIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = 无法更改安全组规则，因为已设置DSTIPRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:508
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ not\ found = 无法更改安全组规则，因为找不到远程安全组[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:511
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ is\ set,\ srcIpRange\ and\ dstIpRange\ must\ be\ empty = 无法更改安全组规则，因为已设置远程安全组[uuid：{0}]，SrcIPRange和DstIPRange必须为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:564
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ must\ be\ set = 无法更改安全组规则，因为规则协议为[{0}]，必须设置DSTPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:556
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ empty = 无法更改安全组规则，因为规则协议为[{0}]，DstPortRange不能为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:551
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ set = 无法更改安全组规则，因为规则协议为[{0}]，无法设置目标映射

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:595
# args: JSONObjectUtil.toJsonString(sao),o.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = 无法更改安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:721
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ not\ attached\ to\ l3Network[uuid\:%s],\ can't\ detach = 不能卸载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为还未挂载

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:757
# args: 
can't\ delete\ rules\ of\ different\ security\ group = 无法删除不同安全组的规则

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:760
# args: vo.getUuid()
can't\ delete\ default\ rule[uuid\:%s] = 无法删除默认规则[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:780
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ attached\ to\ l3Network[uuid\:%s],\ can't\ attach\ again = 不能再次挂载安全组[uuid:{0}]到L3[uuid:{1}]网络上，因为已经挂载了

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:788
# args: msg.getL3NetworkUuid(),SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE
the\ L3\ network[uuid\:%s]\ doesn't\ have\ the\ network\ service\ type[%s]\ enabled = 三层网络[uuid:{0}]没有开启[{1}]类型的网络服务

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:850
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = 云主机网卡[uuids:{0}]不在安全组[uuid:{1}]挂载的三层网络上

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:886
# args: uuid
could\ not\ add\ security\ group\ rule,\ because\ security\ group[uuid\:%s]\ does\ not\ exist = 无法添加安全组规则，因为安全组[uuid：{0}]不存在

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:875
# args: SecurityGroupConstant.ONE_API_RULES_MAX_NUM
could\ not\ add\ security\ group\ rule,\ because\ the\ rules\ cannot\ be\ empty\ or\ exceed\ the\ max\ number\ %d = 无法添加安全组规则，因为规则不能为空或超过最大数量{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:880
# args: msg.getRemoteSecurityGroupUuids()
could\ not\ add\ security\ group\ rule,\ because\ duplicate\ uuid\ in\ remoteSecurityGroupUuids\:\ %s = 无法添加安全组规则，因为RemoteSecurityGroupuuid中存在重复的uuid：{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:891
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ remote\ security\ group\ uuid\ is\ conflict = 无法添加安全组规则，因为远程安全组uuid冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:927
# args: SecurityGroupConstant.DEFAULT_RULE_PRIORITY,SecurityGroupConstant.LOWEST_RULE_PRIORITY
could\ not\ add\ security\ group\ rule,\ because\ rule\ priority\ must\ greater\ than\ %d\ or\ equals\ %d = 无法添加安全组规则，因为规则优先级必须大于{0}或等于{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:935
# args: ao.getType(),SecurityGroupRuleType.getAllType()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ type[%s],\ valid\ types\ are\ %s = 无法添加安全组规则，因为规则类型[{0}]无效，有效类型为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:942
# args: ao.getState(),SecurityGroupRuleState.getAllState()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ state[%s],\ valid\ states\ are\ %s = 无法添加安全组规则，因为规则状态[{0}]无效，有效状态为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:947
# args: ao.getProtocol(),SecurityGroupRuleProtocolType.getAllProtocol()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ protocol[%s],\ valid\ protocols\ are\ %s = 无法添加安全组规则，因为规则协议[{0}]无效，有效协议为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:954
# args: ao.getAction(),SecurityGroupRuleAction.getAllAction()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ action[%s],\ valid\ actions\ are\ %s = 无法添加安全组规则，因为规则操作[{0}]无效，有效操作为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:962
# args: ao.getIpVersion(),IPv6Constants.IPv4,IPv6Constants.IPv6
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ ipVersion[%d],\ valid\ ipVersions\ are\ %d/%d = 无法添加安全组规则，因为规则IPVersion[{0}]无效，有效的IPVersion为{1}/{2}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:990
# args: ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ dstIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ ingress\ rule = 无法添加安全组规则，因为不允许为入口规则设置DSTIPRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:995
# args: ao.getAllowedCidr(),ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ srcIpRange[%s]\ are\ in\ conflict = 无法添加安全组规则，因为allowedcidr[{0}]和srciprange[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:984
# args: ao.getDstIpRange(),ao.getRemoteSecurityGroupUuid()
could\ not\ add\ security\ group\ rule,\ because\ the\ ip\ range[%s]\ and\ remoteSecurityGroupUuid[%s]\ are\ in\ conflict = 无法添加安全组规则，因为IP范围[{0}]和RemoteSecurityGroupuuid[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:972
# args: ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ srcIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ egress\ rule = 无法添加安全组规则，因为不允许为出口规则设置SrcIPRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:977
# args: ao.getAllowedCidr(),ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ dstIpRange[%s]\ are\ in\ conflict = 无法添加安全组规则，因为AllowedCidr[{0}]和DSTIPRange[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1026
# args: ao.getEndPort(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ endPort[%d],\ endPort\ must\ be\ greater\ than\ or\ equal\ to\ startPort[%d] = 无法添加安全组规则，因为规则endPort[{0}]无效，endPort必须大于或等于startPort[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1029
# args: ao.getDstPortRange(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ dstPortRange[%s]\ and\ starPort[%s]\ are\ in\ conflict = 无法添加安全组规则，因为DstPortRange[{0}]和StarPort[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1040
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ TCP/UDP\ must\ set\ dstPortRange = 无法添加安全组规则，因为协议类型TCP/UDP必须设置DSTPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1018
# args: ao.getDstPortRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ dstPortRange[%s] = 无法添加安全组规则，因为协议类型ALL或ICMP无法设置DstPortRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1021
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ startPort\ or\ endPort = 无法添加安全组规则，因为协议类型ALL或ICMP无法设置StartPort或EndPort

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1050
# args: JSONObjectUtil.toJsonString(newRules.get(i)),JSONObjectUtil.toJsonString(newRules.get(j))
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ and\ rule[%s]\ are\ dupilicated = 无法添加安全组规则，因为规则[{0}]和规则[{1}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1074
# args: JSONObjectUtil.toJsonString(sao),vo.getUuid()
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = 无法添加安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1089
# args: SecurityGroupRuleType.Egress,SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ has\ reached\ the\ maximum\ limit[%d] = 无法添加安全组规则，因为安全组{0}规则已达到最大限制[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1097
# args: SecurityGroupRuleType.Egress,(egressRuleCount + toCreateEgressRuleCount),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = 无法添加安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1101
# args: msg.getPriority(),ingressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ ingress\ rule\ maximum\ priority\ is\ [%d] = 无法添加安全组规则，因为优先级[{0}]必须连续，入口规则最大优先级为[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1104
# args: msg.getPriority(),egressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ egress\ rule\ maximum\ priority\ is\ [%d] = 无法添加安全组规则，因为优先级[{0}]必须是连续的，出口规则最大优先级为[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1908
# args: ref.getVmNicUuid(),msg.getSecurityGroupUuid()
vm\ nic[uuid\:%s]\ has\ been\ attach\ to\ security\ group[uuid\:%s] = VM NIC[uuid：{0}]已连接到安全组[uuid：{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1917
# args: SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE,nic.getL3NetworkUuid(),nic.getUuid()
the\ netwotk\ service[type\:%s]\ not\ enabled\ on\ the\ l3Network[uuid\:%s]\ of\ nic[uuid\:%s] = 网络服务[类型：{0}]未在NIC[uuid：{2}]的L3网络[uuid：{1}]上启用

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:153
# args: SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE,l3Uuid
the\ netwotk\ service[type\:%s]\ not\ enabled\ on\ the\ l3Network[uuid\:%s] = 未在L3网络[uuid：{1}]上启用网络服务[类型：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1051
# args: ao.getRuleUuid()
failed\ to\ chenge\ rule[uuid\:%s]\ priority,\ beacuse\ it's\ not\ found = 无法更改规则[uuid：{0}]的优先级，因为找不到该优先级

# at: src/main/java/org/zstack/network/service/HostRouteExtension.java:88
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ provide\ type\ null = 三层网络{0}后端为空

# at: src/main/java/org/zstack/network/service/HostRouteExtension.java:113
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ does\ not\ have\ host\ route\ service = 三层网络{0}没有物理机路由功能

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:107
# args: 
networkServices\ cannot\ be\ empty = 网络服务(networkServices)不能为空

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:68
# args: puuid
network\ service\ for\ provider[uuid\:%s]\ must\ be\ specified = 服务提供器[uuid:{0}]的网络服务必须被指定

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:73
# args: puuid
cannot\ find\ network\ service\ provider[uuid\:%s]\ or\ it\ provides\ no\ services = 无法找到网络服务提供器[uuid:{0}]或它没有提供任何服务

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:87
# args: puuid,notSupported
network\ service\ provider[uuid\:%s]\ doesn't\ provide\ services%s = 网络服务提供器[uuid:{0}]无法提供服务{1}

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:99
# args: type,msg.getL3NetworkUuid()
there\ has\ been\ a\ network\ service[%s]\ attached\ to\ L3\ network[uuid\:%s] = 已经有一个网络服务[{0}]被挂载到三层网络[uuid:{1}]

# at: src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java:332
# args: l3NetworkUuid,serviceType
L3Network[uuid\:%s]\ doesn't\ have\ network\ service[type\:%s]\ enabled\ or\ no\ provider\ provides\ this\ network\ service = 三层网络[uuid:{0}]上没有网络服务[type:{1}]被启用或没有服务提供器提供该网络服务

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:87
# args: msg.getVmNicUuid()
vmNic[uuid\:%s]\ is\ not\ attached\ to\ vmInstance,\ cannot\ get\ attachable\ eips = vmnic[uuid：{0}]未连接到VMInstance，无法获取可连接的EIP

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:93
# args: 
either\ eipUuid\ or\ vipUuid\ must\ be\ set = eipUuid或vipUuid必须有一个被指定

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:99
# args: msg.getEipUuid()
eip[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ cannot\ get\ attachable\ vm\ nic = eip[uuid:{0}]没有被启用，无法获取可挂载的云主机网卡

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:137
# args: guestIpUuid,vmNicUuid
ip\ [uuid\:%s]\ is\ attached\ to\ vm\ nic\ [%s] = IP地址[uuid:{0}]已经绑定到网卡[{1}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:148
# args: msg.getEipUuid(),vmNicUuid
eip[uuid\:%s]\ has\ attached\ to\ another\ vm\ nic[uuid\:%s],\ can't\ attach\ again = eip[uuid:{0}]已经被挂载到另外一台云主机网卡[uuid:{1}]，无法再次挂载

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:154
# args: msg.getEipUuid(),EipState.Enabled,state
eip[uuid\:\ %s]\ can\ only\ be\ attached\ when\ state\ is\ %s,\ current\ state\ is\ %s = eip[uuid:{0}]只有在状态(state)为{1}的情况下可以被挂载，当前状态是{2}

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:184
# args: msg.getVmNicUuid(),msg.getEipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ EIP[uuid\:%s]\ are\ the\ same\ network = 云主机网卡[uuid:{0}]的客户三层网络，和EIP[uuid:{1}]的虚拟ip 三层网络是同一个网络

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:203
# args: msg.getEipUuid(),msg.getVmNicUuid()
Ip\ address\ [uuid\:%s]\ is\ not\ belonged\ to\ nic\ [uuid\:%s] = IP地址[uuid:{0}]没有绑定到网卡[uuid:{1}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:216
# args: msg.getUuid()
eip[uuid\:%s]\ has\ not\ attached\ to\ any\ vm\ nic = eip[uuid:{0}]还没有被挂载到任意云主机网卡

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:239
# args: vipIp.getIpVersion(),guestIp.getIpVersion()
vip\ ipVersion\ [%d]\ is\ different\ from\ guestIp\ ipVersion\ [%d]. = 虚拟IP的协议号[{0}]和网卡的IP协议号[{1}]不同

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:246
# args: vipIp.getIp(),guestRange.getStartIp(),guestRange.getEndIp()
Vip[%s]\ is\ in\ the\ guest\ ip\ range\ [%s,\ %s] = 虚拟IP[{0}]和网卡的IP不能在相同地址段[{1}-{2}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:266
# args: vmUuid,vip.getL3NetworkUuid(),vip.getUuid(),vip.getName(),vip.getIp()
the\ vm[uuid\:%s]\ that\ the\ EIP\ is\ about\ to\ attach\ is\ already\ on\ the\ public\ network[uuid\:%s]\ from\ which\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:%s]\ comes = EIP将要挂载到的云主机[uuid:{0}]已经处于公共网络[uuid:{1}]上，该网络上已有vip[uuid:{2}, name:{3}, ip:{4}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:277
# args: msg.getVipUuid(),useForList.toString()
vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = vip[uuid:{0}]已经被其他网络服务实体[{1}]占用

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:282
# args: 
eip\ can\ not\ be\ created\ on\ system\ vip = 无法在系统VIP上创建EIP

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:286
# args: msg.getVipUuid(),VipState.Enabled,vip.getState()
vip[uuid\:%s]\ is\ not\ in\ state[%s],\ current\ state\ is\ %s = vip[uuid:{0}]不处于状态[{1}]中，当前状态[{2}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:323
# args: state.toString()
vm\ state[%s]\ is\ not\ allowed\ to\ operate\ eip,\ maybe\ you\ should\ wait\ the\ vm\ process\ complete = 云主机状态[{0}]不允许进行弹性IP操作，你可能需要等待云主机操作完成

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:337
# args: vmNicUuid
vmNic\ uuid[%s]\ is\ not\ allowed\ add\ eip,\ because\ vmNic\ exist\ portForwarding\ with\ allowedCidr\ rule = 不允许vmnic uuid[{0}]添加EIP，因为vmnic存在具有AllowedCIDR规则的端口转发

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1463
# args: struct.getEip().getUuid()
eip\ [uuid\:%s]\ is\ deleted = 已删除EIP[uuid：{0}]

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1316
# args: eip.getGuestIp(),nicIps
cannot\ find\ Eip\ guest\ ip\:\ %s\ in\ vmNic\ ips\ \:%s = 在vmnic IP{1}中找不到EIP来宾IP{0}

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1622
# args: l3.getUuid(),l3.getName(),vm.getUuid(),vm.getName()
unable\ to\ attach\ the\ L3\ network[uuid\:%s,\ name\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s],\ because\ the\ L3\ network\ is\ providing\ EIP\ to\ one\ of\ the\ vm's\ nic = 无法将三层网络[uuid:{0}, name:{1}]挂载到云主机[uuid:{2}, name:{3}]，因为三层网络正在为云主机上的一块网卡提供EIP

# at: src/main/java/org/zstack/network/service/flat/DhcpApply.java:73
# args: msg.getL3NetworkUuid()
could\ not\ get\ dhcp4\ server\ ip\ for\ l3\ network\ [uuid\:%s] = 无法获取三层网络[uuid：{0}]的DHCP4服务器IP

# at: src/main/java/org/zstack/network/service/flat/DhcpApply.java:77
# args: msg.getL3NetworkUuid()
could\ not\ get\ dhcp6\ server\ ip\ for\ l3\ network\ [uuid\:%s] = 无法获取三层网络[uuid：{0}]的DHCP6服务器IP

# at: src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java:39
# args: 
Session/account\ uuid\ is\ not\ valid. = 会话/帐户uuid无效。

# at: src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java:43
# args: accountUuid,msg.getL3NetworkUuid()
the\ account[uuid\:%s]\ has\ no\ access\ to\ the\ resource[uuid\:%s,\ type\:L3NetworkVO] = 帐户[uuid：{0}]无权访问资源[uuid：{1}，类型：L3NetworkVO]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:647
# args: 
l3\ network\ uuid\ cannot\ be\ null = 三层网络的uuid不能为空

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:654
# args: msg.getL3NetworkUuid()
Cannot\ find\ DhcpIp\ for\ l3\ network[uuid\:%s] = 无法为三层网络[uuid:{0}]找到DHCP IP

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:998
# args: inv.getUuid(),destHostUuid
cannot\ configure\ DHCP\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = 无法为目标物理机[uuid:{1}]上的云主机[uuid:{0}]配置DHCP

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1751
# args: IPv6Constants.IPV6_PREFIX_LEN_MIN_DNSMASQ
minimum\ ip\ range\ prefix\ length\ of\ flat\ network\ is\ %d = 三层网络的最小IP范围前缀长度为{0}

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1780
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ is\ not\ a\ IPv6\ address = DHCP服务器地址[{0}]不是一个正确的IPv6地址

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1776
# args: dhcpServerIp,inv.getNetworkCidr()
DHCP\ server\ ip\ [%s]\ is\ not\ in\ the\ cidr\ [%s] = DHCP服务器地址[{0}]不在网络段[{1}]的范围内

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1772
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ is\ not\ a\ IPv4\ address = DHCP服务器地址[{0}]不是一个正确的IPv4地址

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1791
# args: entry.getKey(),inv.getL3NetworkUuid()
DHCP\ server\ ip\ [%s]\ is\ already\ existed\ in\ l3\ network\ [%s] = 三层网络[{1}]已经配置了DHCP服务器地址[{0}]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1796
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ can\ not\ be\ equaled\ to\ gateway\ ip = DHCP服务器地址[{0}]不能等于网关地址

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1802
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ can\ not\ be\ configured\ to\ system\ l3 = 系统网络不能配置DHCP服务器地址[{0}]

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:80
# args: 
could\ not\ attach\ eip\ because\ ipv6\ eip\ can\ ONLY\ be\ attached\ to\ flat\ network = 无法附加EIP，因为IPv6 EIP只能附加到三层网络

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:109
# args: vmNicUuid
L2Network\ where\ vip's\ L3Network\ based\ hasn't\ attached\ the\ cluster\ where\ vmNic[uuid\:%s]\ located = 基于虚拟IP三层网络的二层网络没有绑定到云主机网卡所在的集群

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:134
# args: version,vmNicUuid
can\ not\ bound\ more\ than\ 1\ %s\ eip\ to\ a\ vm\ nic[uuid\:%s]\ of\ flat\  = 无法将1个以上的{0}EIP绑定到平面的VM NIC[uuid：{1}]

# at: src/main/java/org/zstack/network/service/flat/FlatEipBackend.java:614
# args: vmUuid,vm.getState()
unable\ to\ apply\ the\ EIP\ operation\ for\ the\ the\ vm[uuid\:%s,\ state\:%s],\ because\ cannot\ find\ the\ VM's\ hostUUid = 无法为云主机[uuid:{0}, state:{1}]应用EIP操作，因为无法找到该云主机的物理机uuid(hostUuid)

# at: src/main/java/org/zstack/network/service/flat/FlatUserdataBackend.java:374
# args: struct.getHostUuid()
host[uuid\:%s]\ is\ not\ connected = 物理机[uuid:{0}]未连接

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:306
# args: e.getMessage()
Invalid\ rule\ expression,\ the\ detail\:\ %s = 规则表达式无效，详细信息：{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:180
# args: 
could\ not\ get\ candidate\ vmnic,\ because\ both\ load\ balancer\ uuid\ and\ server\ group\ uuid\ are\ not\ specified = 无法获取候选vmnic，因为未指定负载平衡器uuid和服务器组uuid

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:198
# args: 
could\ not\ get\ candidate\ l3\ network,\ because\ both\ load\ balancer\ uuid\ and\ server\ group\ uuid\ are\ not\ specified = 无法获取候选三层网络，因为未指定负载平衡器uuid和服务器组uuid

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:222
# args: msg.getListenerUuid()
could\ not\ detach\ vm\ nic\ to\ load\ balancer\ listener[uuid\:%s],\ because\ default\ server\ group\ for\ listener\ has\ been\ deleted = 无法将VM NIC与负载平衡器侦听器[uuid：{0}]分离，因为已删除侦听器的默认服务器组

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:251
# args: vipVO.getIp()
Load\ balancer\ VIP\ [%s]\ cannot\ be\ the\ first\ or\ the\ last\ IP\ of\ the\ CIDR\ with\ the\ public\ address\ pool\ type = 负载平衡器VIP[{0}]不能是具有公共地址池类型的CIDR的第一个或最后一个IP

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:282
# args: ipVer
operation\ failure,\ not\ support\ the\ ip\ version\ %d = 操作失败，不支持IPv{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:288
# args: ips,acl.getUuid()
operation\ failure,\ duplicate/overlap\ ip\ entry\ in\ %s\ of\ accesscontrol\ list\ group\:%s = 操作失败，在访问控制组：{1}中有重复/重叠ip{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:295
# args: ips
operation\ failure,\ ip\ format\ only\ supports\ ip/iprange/cidr,\ but\ find\ %s = 操作失败，只支持IP地址/IP段/IP网络格式的参数，不支持{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:299
# args: startIp,endIp,NetworkUtils.longToIpv4String(r.lowerEndpoint()),NetworkUtils.longToIpv4String(r.upperEndpoint()),acl.getUuid()
ip\ range[%s,\ %s]\ is\ overlap\ with\ start\ ip\:%s,\ end\ ip\:\ %s\ of\ access-control-list\ group\:%s = ip段[{0}, {1}]和访问控制列表组：{4}中的ip段[{2},{3}]重叠

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:321
# args: aclUuids,lbUuid
Can't\ attach\ the\ type\ access-control-list\ group[%s]\ whose\ ip\ version\ is\ different\ with\ LoadBalancer[%s] = 负载均衡器[{1}]不能添加IP版本不一致的访问控制列表组[{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:396
# args: aclEntry.getDomain(),aclEntry.getUrl(),acl.getUuid()
domian[%s],\ url[%s]\ duplicate/overlap\ redirect\ rule\ with\ access-control-list\ group\:%s = 域[{0}]，URL[{1}]与访问控制列表组{2}重复/重叠重定向规则

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:506
# args: msg.getAclType(),msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ use\ to\ %s,\ but\ there\ some\ access-control-list\ not\ has\ ip\ entry\ but\ redirect\ rule = 访问控制列表组[uuid：{0}]用于{1}，但某些访问控制列表没有IP条目，但有重定向规则

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:515
# args: existingAcls,msg.getListenerUuid()
the\ access-control-list\ groups[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ listener[uuid\:%s] = 负载均衡监听器[uuid:{1}]已经添加了访问控制列表组[uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:521
# args: msg.getListenerUuid(),type.toString()
the\ load\ balancer\ listener[uuid\:%s]\ just\ only\ attach\ the\ %s\ type\ access-control-list\ group = 负载均衡监听器[uuid:{0}]只能以{1}方式添加访问控制列表组

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:526
# args: msg.getListenerUuid(),LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)
the\ load\ balancer\ listener[uuid\:%s]\ can't\ \ attach\ more\ than\ %d\ access-control-list\ groups = 负载均衡监听器[uuid:{0}]最多只能添加{1}个访问控制列表组

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:414
# args: msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ use\ to\ redirect,\ but\ there\ some\ access-control-list\ not\ has\ redirect\ rule\ but\ ip\ entry = Access-Control-List组[uuid：{0}]用于重定向，但某些Access-Control-List没有重定向规则，只有IP条目

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:419
# args: msg.getAclUuids()
redirect\ access-control-list\ groups[uuid\:%s]\ cannot\ only\ attach\ to\ load\ balancer\ listener,\ must\ assign\ server\ group = 重定向访问控制列表组[uuid：{0}]不能仅连接到负载平衡器侦听器，必须分配服务器组

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:424
# args: msg.getAclUuids(),msg.getListenerUuid()
access-control-list\ groups[uuid\:%s]\ attach\ to\ load\ balancer\ listener[uuid\:%s]\ not\ https\ or\ http = 访问控制列表组[uuid：{0}]连接到负载平衡器侦听器[uuid：{1}]而不是HTTPS或HTTP

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:547
# args: msg.getServerGroupUuids(),msg.getListenerUuid()
server\ group[%s]\ not\ attach\ to\ load\ balancer\ listener[%s] = 服务器组[{0}]未连接到负载平衡器侦听器[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:443
# args: msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ has\ no\ redirect\ rule = 访问控制列表组[uuid：{0}]没有重定向规则

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:456
# args: msg.getAclUuids(),msg.getListenerUuid()
access-control-list\ groups[uuid\:%s]\ has\ attach\ to\ another\ load\ balancer\ listener[uuid\:%s] = 访问控制列表组[uuid：{0}]已连接到另一个负载平衡器侦听器[uuid：{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:468
# args: msg.getListenerUuid(),LoadBalancerGlobalConfig.ACL_REDIRECT_MAX_COUNT.value(Long.class)
the\ load\ balancer\ listener[uuid\:%s]\ can't\ \ attach\ more\ than\ %d\ redirect\ rule\ access-control-list\ groups = 负载平衡器侦听器[uuid：{0}]无法附加{1}个以上的重定向规则访问控制列表组

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:494
# args: msg.getListenerUuid(),redireRuleExistAclUuid
load\ balancer\ listener\ [uuid\:%s]\ had\ redirect\ rule\ of\ access-control-list\ groups[uuid\:%s] = 负载平衡器侦听器[uuid：{0}]具有访问控制列表组的重定向规则[uuid：{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:555
# args: msg.getAclUuid(),msg.getListenerUuid()
acl[%s]\ not\ attach\ to\ load\ balancer\ listener[%s] = ACL[{0}]未附加到负载平衡器侦听器[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1294
# args: l3Uuids,LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING
L3\ networks[uuids\:%s]\ of\ the\ vm\ nics\ has\ no\ network\ service[%s]\ enabled = 云主机网卡的三层网络没有可用的网络服务

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:587
# args: nicUuid,groupVO.getUuid()
could\ not\ attach\ vm\ nic\ to\ load\ balancer\ listener,\ because\ the\ vm\ nic[uuid\:%s]\ are\ already\ on\ the\ default\ server\ group\ [uuid\:%s] = 无法将VM NIC附加到负载平衡器侦听器，因为VM NIC[uuid：{0}]已位于默认服务器组[uuid：{1}]上

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1176
# args: listenerVO.getProtocol(),msg.getHealthCheckProtocol()
the\ listener\ with\ protocol\ [%s]\ doesn't\ support\ this\ health\ check\:[%s] = [{0}]类型的监听器不支持此类型[{1}]的健康检查

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1145
# args: 
the\ http\ health\ check\ protocol\ must\ be\ specified\ its\ healthy\ checking\ parameter\ healthCheckURI = http类型的健康检查必须提供healthCheckURI参数

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1152
# args: msg.getHealthCheckHttpCode()
the\ http\ health\ check\ protocol's\ expecting\ code\ [%s]\ is\ invalidate = http健康检查协议的expeting-code参数非法

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:697
# args: LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)
Can't\ attach\ more\ than\ %d\ access-control-list\ groups\ to\ a\ listener = 一个监听器加载的访问控制组不能超过{0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:787
# args: msg.getProtocol(),msg.getName()
l4[%s]\ loadBalancer\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ state = L4[{0}]LoadBalancer侦听器[{1}]不支持分配会话持久性状态

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:808
# args: msg.getLoadBalancerUuid(),msg.getName(),algorithm
loadBalancer[%s]\ listener[%s]\ %s\ algorithm\ doesn't\ support\ assigning\ session\ persistence\ state\ except\ assigning\ disable\ explicitly = LoadBalancer[{0}]Listener[{1}]{2}算法不支持分配会话持久性状态，但显式分配Disable时除外

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:823
# args: msg.getLoadBalancerUuid(),msg.getName(),algorithm
loadBalancer[%s]\ listener[%s]\ %s\ algorithm\ doesn't\ support\ assigning\ session\ persistence\ state\ except\ assigning\ iphash\ explicitly = LoadBalancer[{0}]Listener[{1}]{2}算法不支持分配会话持久性状态，但显式分配IPHASH除外

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:849
# args: enableSession,Arrays.toString(LoadBalancerSessionPersistence.values())
invalid\ session\ persistence\ type[%s],\ it\ only\ support\ %s = 会话持久性类型[{0}]无效，它仅支持{1}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:856
# args: timeout,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX
invalid\ session\ idle\ timeout[%s],\ it\ must\ be\ the\ number\ between[%s~%s]\  = 会话空闲超时[{0}]无效，它必须是介于[{1}~{2}]之间的数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:863
# args: cookieName,COOKIE_NAME_MAX
invalid\ session\ cookie\ name[%s],\ it\ must\ be\ shorter\ than\ [%s]\ characters = 会话Cookie名称[{0}]无效，必须少于[{1}]个字符

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:866
# args: cookieName
invalid\ session\ cookie\ name[%s],\ it\ must\ only\ contains\ letters,\ numbers\ and\ underscores = 会话Cookie名称[{0}]无效，它只能包含字母、数字和下划线

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:870
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name\ at\ the\ same\ time = LoadBalancer[{0}]Listener[{1}]不支持同时分配空闲超时和Cookie名称

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:876
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name,\ it\ must\ specify\ session\ persistence = LoadBalancer[{0}]Listener[{1}]不支持分配空闲超时和Cookie名称，它必须指定会话持久性

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:880
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name\ when\ the\ session\ persistence\ is\ disabled = 禁用会话持久性时，LoadBalancer[{0}]Listener[{1}]不支持分配空闲超时和Cookie名称

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:894
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ rewrite\ without\ assigning\ cookie\ name = LoadBalancer[{0}]侦听器[{1}]不支持在不分配Cookie名称的情况下分配会话持久性重写

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:899
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ idle\ timeout\ without\ assigning\ rewrite\ mode = LoadBalancer[{0}]侦听器[{1}]不支持在不分配重写模式的情况下分配会话持久性空闲超时

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:904
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ cookieName\ without\ assigning\ insert\ mode = LoadBalancer[{0}]侦听器[{1}]不支持在不分配插入模式的情况下分配会话持久性CookieName

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:909
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ rewrite\ when\ the\ http\ mode\ is\ http-tunnel = 当HTTP模式为HTTP隧道时，LoadBalancer[{0}]Listener[{1}]不支持分配会话持久性重写

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:920
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ other\ session\ persistence\ when\ the\ source\ balancer\ algorithm\ is\ source = 当源平衡器算法为源时，LoadBalancer[{0}]侦听器[{1}]不支持分配其他会话持久性

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:932
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ iphash = LoadBalancer[{0}]侦听器[{1}]不支持分配会话持久性IPHASH

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:950
# args: tag,s,LoadBalancerConstants.MAX_CONNECTION_LIMIT
invalid\ max\ connection[%s],\ %s\ is\ larger\ than\ upper\ threshold\ %d = 非法的最大连接数标签[{0}]，因为其值{1}大于上限值{2}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:972
# args: msg.getLoadBalancerPort(),luuid
conflict\ loadBalancerPort[%s],\ a\ listener[uuid\:%s]\ has\ used\ that\ port = 冲突的负载均衡器端口(loadBalancerPort)[{0}]，一个监听器[uuid:{1}]已经使用了该端口

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1161
# args: listenerVO.getProtocol(),msg.getHealthCheckProtocol()
the\ listener\ with\ protocol\ [%s]\ doesn't\ support\ select\ security\ policy = 具有协议[{0}]的侦听器不支持选择安全策略

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1005
# args: vo.getProtocol()
loadbalancer\ listener\ with\ type\ %s\ does\ not\ need\ certificate = [{0}]类型证书不需要证书

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1009
# args: msg.getListenerUuid(),msg.getCertificateUuid()
loadbalancer\ listener\ [uuid\:%s]\ already\ had\ certificate[uuid\:%s] = LoadBalancer侦听器[uuid：{0}]已具有证书[uuid：{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1019
# args: msg.getCertificateUuid(),msg.getListenerUuid()
certificate\ [uuid\:%s]\ is\ not\ added\ to\ loadbalancer\ listener\ [uuid\:%s] = 证书[uuid:{0}]未添加到负载均衡监听器[uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1034
# args: target
healthCheck\ target\ [%s]\ error,\ it\ must\ be\ 'default'\ or\ number\ between[1~65535]\  = 健康检查端口[{0}]错误,值必须是'default'或者数字[1~65535]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1050
# args: listener.getProtocol(),listener.getName()
l4[%s]\ loadBalancer\ listener[%s]\ doesn't\ support\ modifying\ session\ persistence\ state = L4[{0}]LoadBalancer侦听器[{1}]不支持修改会话持久性状态

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1064
# args: msg.getUuid()
listener[%s]\ can\ not\ modifying\ session\ persistence\ rewrite\ when\ the\ http\ mode\ is\ http-tunnel = 当HTTP模式为HTTP隧道时，侦听器[{0}]无法修改会话持久性重写

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1072
# args: msg.getUuid()
listener[%s]\ can\ not\ modifying\ httpMode\ http-tunnel\ when\ the\ session\ persistence\ is\ rewrite = 重写会话持久性时，侦听器[{0}]无法修改httpmode HTTP-tunnel

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1079
# args: msg.getUuid()
listener[%s]\ changes\ session\ persistence\ to\ iphash,\ it\ must\ specify\ source\ balancer\ algorithm = 侦听器[{0}]将会话持久性更改为IPHASH，它必须指定源平衡器算法

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1084
# args: msg.getUuid()
listener[%s]\ modifies\ session\ persistence,\ it\ must\ specify\ balancer\ algorithm = 侦听器[{0}]修改会话持久性，它必须指定平衡器算法

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1090
# args: msg.getUuid(),msg.getBalancerAlgorithm()
listener[%s]\ %s\ algorithm\ doesn't\ support\ modifying\ session\ persistence\ except\ assigning\ iphash\ explicitly = 侦听器[{0}]{1}算法不支持修改会话持久性，除非显式分配IPHASH

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1098
# args: msg.getUuid(),msg.getBalancerAlgorithm()
listener[%s]\ %s\ algorithm\ doesn't\ support\ modifying\ session\ persistence\ except\ assigning\ disable\ explicitly = 侦听器[{0}]{1}算法不支持修改会话持久性，除非显式指定禁用

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1106
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ idle\ timeout\ and\ cookie\ name,\ it\ must\ specify\ session\ persistence = 侦听器[{0}]不支持修改空闲超时和cookie名称，它必须指定会话持久性

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1110
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ idle\ timeout\ when\ the\ session\ persistence\ is\ not\ insert = 当会话持久性不是INSERT时，侦听器[{0}]不支持修改空闲超时

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1114
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ cookie\ name\ when\ the\ session\ persistence\ is\ not\ rewrite = 侦听器[{0}]不支持在会话持久性未重写时修改cookie名称

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1118
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ session\ rewrite\ without\ modifying\ cookie\ name = 侦听器[{0}]不支持在不修改Cookie名称的情况下修改会话重写

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1132
# args: timeout,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX
invalid\ session\ idle\ timeout[%s],\ it\ must\ be\ the\ number\ between[%s~%s] = 会话空闲超时[{0}]无效，它必须是介于[{1}~{2}]之间的数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1181
# args: 
the\ http\ health\ check\ protocol\ must\ be\ specified\ its\ healthy\ checking\ parameters\ including\ healthCheckMethod\ and\ healthCheckURI = http类型的健康检查协议必须提供healthCheckMethod和healthCheckURI参数

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1204
# args: msg.getUuid()
could\ not\ allow\ to\ delete\ default\ serverGroup[uuid\:%s] = 无法允许删除默认服务器组[uuid：{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1429
# args: msg.getServerGroupUuid()
loadbalacerServerGroup\ [%s]\ is\ non-existent = LoadBalacerServerGroup[{0}]不存在

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1263
# args: vmNic.get("uuid"),msg.getServerGroupUuid()
could\ not\ add\ backend\ server\ vmnic[uuid\:%s]\ to\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ not\ exist = 无法将后端服务器vmnic[uuid：{0}]添加到ServerGroup[uuid：{1}]，因为vmnic uuid不存在

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1274
# args: vmNic.get("weight")
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = 无法将后端服务器vmnic添加到ServerGroup[uuid：{0}]，因为vmnic权重[{1}]不是正确的数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1552
# args: vmNic.get("uuid"),vmNicWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[vimNic\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = 无效的平衡器重量[vimnic：{0}，重量：{1}]，重量不在范围[{2}，{3}]内

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1304
# args: existingNics,msg.getServerGroupUuid()
the\ vm\ nics[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ servegroup\ [uuid\:%s] = VM NIC[uuid：{0}]已位于负载平衡器ServerGroup[uuid：{1}]上

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1313
# args: msg.getServerGroupUuid(),vmNicIps
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup\ [uuid\:%s],\ because\ vmnic\ ip\ [ipAddress\:%s]\ is\ repeated = 无法将后端服务器vmnic添加到ServerGroup[uuid：{0}]，因为vmnic IP[IPAddress：{1}]重复

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1325
# args: vmNicUuids,msg.getServerGroupUuid(),listenerVO.getUuid()
could\ not\ add\ vm\ nic\ [uuid\:%s]\ to\ server\ group\ [uuid\:%s]\ because\ listener\ [uuid\:%s]\ attached\ this\ server\ group\ already\ the\ nic\ to\ be\ added = 无法将VM NIC[uuid：{0}]添加到服务器组[uuid：{1}]，因为侦听程序[uuid：{2}]已将此服务器组连接到要添加的NIC

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1606
# args: msg.getServerGroupUuid(),serverIps
could\ not\ add\ backend\ server\ ip\ to\ serverGroup\ [uuid\:%s],\ because\ ip\ [ipAddress\:%s]\ is\ invalid = 无法将后端服务器IP添加到ServerGroup[uuid：{0}]，因为IP[IPAddress：{1}]无效

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1341
# args: msg.getServerGroupUuid(),server.get("ipAddress")
could\ not\ add\ backend\ server\ ip\ to\ serverGroup\ [uuid\:%s],\ because\ ip\ [ipAddress\:%s]\ is\ repeated = 无法将后端服务器IP添加到ServerGroup[uuid：{0}]，因为IP[IPAddress：{1}]重复

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1599
# args: server.get("weight")
could\ not\ add\ backend\ server\ ip\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = 无法将后端服务器IP添加到ServerGroup[uuid：{0}]，因为vmnic权重[{1}]不是正确的数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1352
# args: server.get("ipAddress"),serverIpWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ \ weight[serverIp\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = 权重[服务器IP：{0}，权重：{1}]无效，权重不在范围[{2}，{3}]内

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1367
# args: existingServerIps,msg.getServerGroupUuid()
the\ server\ ips\ [uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ servegroup\ [uuid\:%s] = 服务器IP[uuid：{0}]已在负载平衡器ServerGroup[uuid：{1}]上

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1611
# args: 
could\ not\ add\ server\ ip\ to\ share\ load\ balancer\ server\ group = 无法将服务器IP添加到共享负载平衡器服务器组

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1433
# args: 
vmnic\ or\ ip\ is\ null = vmnic或IP为空

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1397
# args: msg.getServerGroupUuid()
vmnics\ are\ all\ not\ in\ servergroup\ [%s] = VMNIC均不在ServerGroup[{0}]中

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1414
# args: msg.getServerGroupUuid()
serverips\ are\ all\ not\ in\ servergroup\ [%s] = ServerIP全部不在ServerGroup[{0}]中

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1444
# args: msg.getServerGroupUuid(),msg.getlistenerUuid()
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ it\ is\ already\ added\  = 无法将服务器组[uuid：{0}}添加到侦听器[uuid：{1}]，因为它已添加

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1461
# args: msg.getServerGroupUuid(),msg.getlistenerUuid(),nicUuid
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ nic\ [uuid\:%s]\ is\ already\ added = 无法将服务器组[uuid：{0}}添加到侦听器[uuid：{1}]，因为已经添加了NIC[uuid：{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1476
# args: msg.getServerGroupUuid(),msg.getlistenerUuid(),ipAddress
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ server\ ip\ [%s]\ is\ already\ added = 无法将服务器组[uuid：{0}}添加到侦听器[uuid：{1}]，因为已添加服务器IP[{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1496
# args: msg.getServerGroupUuid(),msg.getListenerUuid()
could\ not\ remove\ server\ group[uuid\:%s}\ from\ listener\ [uuid\:%s]\ because\ it\ is\ not\ added = 由于未添加服务器组[uuid：{1}]，因此无法将其从侦听器[uuid：{1}]中删除

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1511
# args: loadBalancerUuid
loadbalacerUuid\ [%s]\ is\ non-existent = LoadBalaceRuuid[{0}]不存在

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1526
# args: msg.getServerGroupUuid()
could\ not\ find\ loadBalancer\ with\ serverGroup\ [uuid\:%s] = 找不到ServerGroup为[uuid：{0}]的LoadBalancer

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1567
# args: msg.getServerGroupUuid()
could\ not\ update\ backend\ server\ vmnic\ of\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ null = 无法更新ServerGroup[uuid：{0}]的后端服务器vmnic，因为vmnic uuid为空

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1542
# args: msg.getServerGroupUuid(),vmNic.containsKey("uuid")
could\ not\ update\ backend\ server\ vmnic\ of\ serverGroup,because\ serverGroup[uuid\:%s]\ don\ not\ have\ vmnic\ [uuid\:%s]\  = 无法更新ServerGroup的后端服务器vmnic，因为ServerGroup[uuid：{0}]没有vmnic[uuid：{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1564
# args: vmNic.get("uuid")
invalid\ balancer\ weight[vimNic\:%s],\ weight\ is\ null = 平衡器权重[vimnic：{0}]无效，权重为空

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1559
# args: vmNic.get("weight")
could\ not\ change\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = 无法将后端服务器vmnic更改为ServerGroup[uuid：{0}]，因为vmnic权重[{1}]不是正确的数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1583
# args: msg.getServerGroupUuid(),ipAddress
could\ not\ update\ backend\ server\ ip\ of\ serverGroup,because\ serverGroup[uuid\:%s]\ don\ not\ have\ ip\ [ipAddress\:%s]\  = 无法更新ServerGroup的后端服务器IP，因为ServerGroup[uuid：{0}]没有IP[IP地址：{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1602
# args: server.get("ipAddress")
invalid\ balancer\ weight[serverIp\:%s],\ weight\ is\ null = 无效的平衡器权重[ServerIP：{0}]，权重为空

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1592
# args: server.get("ipAddress"),serverIpWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[serverIp\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = 无效的平衡器权重[服务器IP：{0}，权重：{1}]，权重不在范围[{2}，{3}]内

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1618
# args: 
could\ not\ change\ backendserver,\ beacause\ vmincs\ and\ serverips\ is\ null = 无法更改后端服务器，因为VMINCS和ServerIPS为空

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1355
# args: struct.listenerUuid
can\ not\ get\ service\ providerType\ for\ load\ balancer\ listener\ [uuid\:%s] = 无法获取负载平衡器侦听器[uuid：{0}]的Service ProviderType

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1384
# args: self.getUuid(),self.getProviderType(),providerType
service\ provider\ type\ mismatching.\ The\ load\ balancer[uuid\:%s]\ is\ provided\ by\ the\ service\ provider[type\:%s],\ but\ new\ service\ provider\ is\ [type\:\ %s] = 服务提供商类型不匹配。负载平衡器[uuid：{0}]由服务提供程序[类型：{1}]提供，但新服务提供程序为[类型：{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1486
# args: msg.getLoadBalancerPort(),msg.getLoadBalancerUuid()
there\ is\ listener\ with\ same\ port\ [%s]\ and\ same\ load\ balancer\ [uuid\:%s] = 存在具有相同端口[{0}]和相同负载平衡器[uuid：{1}]的侦听器

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:2011
# args: param
invalid\ health\ checking\ parameters[%s],\ the\ format\ is\ method\:URI\:code,\ for\ example,\ GET\:/index.html\:http_2xx = 无效的健康检查参数[{0}]，正确格式：method:URI:code，例如 GET:/index.html:http_2xx

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:699
# args: systemTag
invalid\ health\ target[%s],\ the\ format\ is\ targetCheckProtocol\:port,\ for\ example,\ tcp\:default = 无效的健康检查目标[{0}]，格式为[目标检查协议(targetCheckProtocol):端口(port)], 例如[tcp:default]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:100
# args: msg.getLoadBalancerUuid()
cannot\ find\ the\ load\ balancer[uuid\:%s] = 无法找到负载均衡器[uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:483
# args: tag.getTag()
cannot\ delete\ the\ system\ tag[%s].\ The\ load\ balancer\ plugin\ relies\ on\ it,\ you\ can\ only\ update\ it = 无法删除系统标签[{0}]。负载均衡器插件依赖于该标签，该标签只能被更新

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:502
# args: nicUuid,systemTag
nic[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ loadbalancer = 找不到网卡[uuid:{0}]。请检查负载均衡器的系统标签[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:514
# args: systemTag,s
invalid\ balancer\ weight[%s],\ %s\ is\ not\ a\ number = 无效的权重值[{0}], {1}不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:510
# args: systemTag,s,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[%s],\ %s\ is\ not\ in\ the\ range\ [%d,\ %d] = 无效的权重值[{0}], {1}不在允许范围[{2}, {3}]中

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:526
# args: algorithm,LoadBalancerConstants.BALANCE_ALGORITHMS
invalid\ balance\ algorithm[%s],\ valid\ algorithms\ are\ %s = 无效的均衡算法[{0}]，有效的为[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:602
# args: systemTag,s
invalid\ unhealthy\ threshold[%s],\ %s\ is\ not\ a\ number = 无效的不健康阈值[{0}]，[{1}]不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:616
# args: systemTag,s
invalid\ healthy\ threshold[%s],\ %s\ is\ not\ a\ number = 无效的健康阈值[{0}]，[{1}]不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:630
# args: systemTag,s
invalid\ healthy\ timeout[%s],\ %s\ is\ not\ a\ number = 无效的健康超时[{0}]，[{1}]不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:644
# args: systemTag,s
invalid\ connection\ idle\ timeout[%s],\ %s\ is\ not\ a\ number = 无效的连接空闲超时[{0}]，[{1}]不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:658
# args: systemTag,s
invalid\ health\ check\ interval[%s],\ %s\ is\ not\ a\ number = 无效的健康检查间隔[{0}]，[{1}]不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:672
# args: systemTag,s
invalid\ max\ connection[%s],\ %s\ is\ not\ a\ number = 无效的最大连接[{0}]，[{1}]不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:686
# args: systemTag,s
invalid\ process\ number[%s],\ %s\ is\ not\ a\ number = 进程编号[{0}]无效，{1}不是数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:704
# args: systemTag,protocol,LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS
invalid\ health\ target[%s],\ the\ target\ checking\ protocol[%s]\ is\ invalid,\ valid\ protocols\ are\ %s = 无效的健康检查目标[{0}]，目标检查协议无效[{1}]，有效的为[{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:716
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ a\ number = 无效的健康检查目标[{0}]，端口[{1}]不是一个数字

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:713
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ in\ the\ range\ of\ [1,\ 65535] = 无效的无效健康检查目标[{0}]，端口[{1}]不在范围[1, 65535]内

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerWeightOperator.java:89
# args: nicUuid,weight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight\ for\ nic\:%s,\ %d\ is\ not\ in\ the\ range\ [%d,\ %d] = 无效的网卡:{0}权重值{1}，不在有效范围[{2}, {3}]内

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:226
# args: msg.getVmNicUuid(),msg.getVipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ vip[uuid\:\ %s]\ are\ the\ same\ network = 云主机网卡[uuid:{0}]的客户三层网络和虚拟IP[uuid:{1}]的虚拟IP 三层网络是同一个网络

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:201
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = 虚拟IP[uuid:{0}]已经被其他网络服务占用

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:68
# args: msg.getRuleUuid(),state
Port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ current\ state\ is\ %s = 端口转发规则[uuid:{0}]未启用，当前状态[{1}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:83
# args: msg.getUuid()
port\ forwarding\ rule\ rule[uuid\:%s]\ has\ not\ been\ attached\ to\ any\ vm\ nic,\ can't\ detach = 端口转发规则[uuid:{0}]尚未被挂载到任何云主机网卡，无法卸载

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:99
# args: msg.getRuleUuid(),vmNicUuid
port\ forwarding\ rule[uuid\:%s]\ has\ been\ attached\ to\ vm\ nic[uuid\:%s],\ can't\ attach\ again = 端口转发规则[uuid:{0}]已经被挂载到云主机网卡[uuid:{1}]，无法再次挂载

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:104
# args: msg.getRuleUuid(),state
port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ \ current\ state\ is\ %s.\ A\ rule\ can\ only\ be\ attached\ when\ its\ state\ is\ Enabled = 端口转发规则[uuid:{0}]没有启用，当前状态为{1}。一个规则只能在启用时被挂载

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:123
# args: msg.getVmNicUuid(),msg.getRuleUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ port\ forwarding\ rule[uuid\:%s]\ are\ the\ same\ network = 云主机网卡[uuid:{0}]的客户三层网络和端口转发规则[uuid:{1}]的VIP 三层网络是同一个网络

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:167
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
could\ not\ create\ port\ forwarding\ rule,\ because\ vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ is\ incompatible\ with\ private\ port\ range[privateStartPort\:%s,\ privateEndPort\:%s] = 无法创建端口转发规则，因为VIP端口范围[vipStartPort：{0}，vipEndPort：{1}]与专用端口范围[PrivateStartPort：[2}，PrivateEndPport：{3}]不兼容

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:184
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
for\ range\ port\ forwarding,\ the\ port\ range\ size\ must\ match;\ vip\ range[%s,\ %s]'s\ size\ doesn't\ match\ range[%s,\ %s]'s\ size = 对于范围端口转发，端口范围大小必须匹配；VIP范围[{0}, {1}]的大小不匹配范围[{2}, {3}]的大小

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:193
# args: msg.getAllowedCidr()
invalid\ CIDR[%s],\ only\ ipv4\ is\ supported = 无效的CIDR[{0}]，仅支持ipv4

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:191
# args: msg.getAllowedCidr()
invalid\ CIDR[%s] = 无效的CIDR[{0}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:211
# args: vipStart,vipEnd,vo.getUuid(),vo.getVipPortStart(),vo.getVipPortEnd()
vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ overlaps\ with\ rule[uuid\:%s,\ vipStartPort\:%s,\ vipEndPort\:%s] = 虚拟IP（vip）端口范围[vipStartPort:{0}, vipEndPort:{1}]与规则[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]重叠

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:269
# args: vm.getName(),vm.getUuid(),vipUuid
the\ VM[name\:%s\ uuid\:%s]\ already\ has\ port\ forwarding\ rules\ that\ have\ different\ VIPs\ than\ the\ one[uuid\:%s] = 云主机[name:{0} uuid:{1}]已经有端口转发规则，且与[uuid:{2}]有不同的VIPs

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:282
# args: vmNicUuid
vmNic\ uuid[%s]\ is\ not\ allowed\ add\ portForwarding\ with\ allowedCidr\ rule,\ because\ vmNic\ exist\ eip = 不允许vmnic uuid[{0}]使用AllowedCIDR规则添加PortForwarding，因为vmnic存在EIP

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:316
# args: vmNicUuid,privatePortStart,privatePortEnd,protocolType
could\ not\ attach\ port\ forwarding\ rule,\ because\ vmNic[uuid\:%s]\ already\ has\ a\ rule\ that\ overlaps\ the\ target\ private\ port\ ranges[%s,\ %s],\ has\ the\ same\ protocol\ type[%s]\ and\ has\ AllowedCidr = 无法挂载端口转发规则，因为云主机网卡[uuid:{0}]已经有与目标规则的云主机端口范围[{1}, {2}]重叠、协议类型[{3}]相同且设置有允许CIDR的规则

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:306
# args: vmNicUuid,privatePortStart,privatePortEnd,protocolType
could\ not\ attach\ port\ forwarding\ rule\ with\ allowedCidr,\ because\ vmNic[uuid\:%s]\ already\ has\ rules\ that\ overlap\ the\ target\ private\ port\ ranges[%s,\ %s]\ and\ have\ the\ same\ protocol\ type[%s] = 无法挂载设置有允许CIDR的端口转发规则，因为云主机网卡[uuid:{0}]已经有与目标规则的云主机端口范围[{1}, {2}]重叠且协议类型[{3}]相同的规则

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingManagerImpl.java:1222
# args: struct.getRule().getUuid()
port\ forwarding\ rule\ [uuid\:%s]\ is\ deleted = 端口转发规则[uuid：{0}]已删除

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:375
# args: msg.getServerGroupUuid()
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ null = 无法将后端服务器vmnic添加到ServerGroup[uuid：{0}]，因为vmnic uuid为空

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:88
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ there\ is\ no\ load\ balancer\ slb\ group\ [uuid\:%s] = 无法创建SLB实例，因为没有负载平衡器SLB组[uuid：{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:93
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ there\ is\ no\ slb\ offering\ configured\ for\ slb\ group\ [uuid\:%s] = 无法创建SLB实例，因为没有为SLB组[uuid：{0}]配置SLB产品

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:99
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ image\ uuid\ of\ slb\ offering\ [uuid\:%s]\ is\ null = 无法创建SLB实例，因为SLB产品[uuid：{0}]的镜像uuid为空

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:104
# args: slbOfferingVO.getImageUuid()
could\ not\ create\ slb\ instance\ because\ image\ [uuid\:%s]\ is\ deleted = 无法创建SLB实例，因为镜像[uuid：{0}]已删除

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:112
# args: frontL3.getCategory()
could\ not\ create\ slb\ group\ because\ invalid\ front\ l3\ network\ type\ %s = 无法创建SLB组，因为前端三层网络类型{0}无效

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:127
# args: 
could\ not\ create\ slb\ group,\ because\ front\ network\ doesn't\ support\ ipv6\ yet = 无法创建SLB组，因为前端网络尚不支持IPv6

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:142
# args: 
could\ not\ create\ slb\ group,\ because\ backend\ network\ doesn't\ support\ ipv6\ yet = 无法创建SLB组，因为后端网络尚不支持IPv6

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:143
# args: msg.getResourceUuid()
could\ not\ change\ resource\ owner,\ because\ the\ resource[uuid\:%s,\ type\:VmInstance]\ has\ already\ attached\ security\ group = 无法更改资源所有者，因为资源[uuid:{0}, 类型:VmInstance] 已加载安全组

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:250
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ vm\ nic[uuid\:%s]\ not\ found = 无法设置VM NIC安全组，因为找不到VM NIC[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:256
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ the\ vm\ nic[uuid\:%s]\ not\ attached\ to\ any\ security\ group = 无法设置VM NIC安全组，因为VM NIC[uuid：{0}]未挂载到任何安全组

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:266
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ not\ found = 无法设置VM NIC安全组，因为找不到安全组[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:271
# args: priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ cannot\ be\ less\ than\ 1 = 无法设置VM NIC安全组，因为优先级无效，优先级[{0}]不能小于1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:275
# args: aoMap.get(priority),ao.getSecurityGroupUuid(),priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ priority,\ both\ security\ group\ %s\ and\ %s\ have\ priority[%d] = 无法设置VM NIC安全组，因为优先级重复，安全组{0}和{1}都具有相同的优先级[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:278
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ security\ group[uuid\:%s] = 无法设置VM NIC安全组，因为安全组[uuid：{0}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:288
# args: ao.getSecurityGroupUuid(),vmAccountUuid
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ is\ not\ owned\ by\ account[uuid\:%s]\ or\ admin = 无法设置 VM NIC 安全组，因为安全组 [uuid:{0}] 不属于帐户[uuid:{1}] 或管理员

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:298
# args: priorities[0]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority\ expects\ to\ start\ at\ 1,\ but\ [%d] = 无法设置VM NIC安全组，因为优先级无效，优先级应从1开始，而不是[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:302
# args: priorities[i],priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ and\ priority[%d]\ expected\ to\ be\ consecutive = 无法设置VM NIC安全组，因为优先级无效，优先级[{0}]和优先级[{1}]应是连续的

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:348
# args: priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ admin\ security\ group\ priority[%d]\ must\ be\ higher\ than\ users = 无法设置VM NIC安全组，因为管理员安全组优先级[{0}]必须高于用户安全组

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:357
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ ruleUuids\ is\ empty = 无法更改安全组规则状态，因为RuleUIds为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:361
# args: msg.getSecurityGroupUuid()
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group[uuid\:%s]\ not\ found = 无法更改安全组规则状态，因为找不到安全组[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:369
# args: r
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group\ rule[uuid\:%s]\ not\ found = 无法更改安全组规则状态，因为找不到安全组规则[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:378
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ no\ security\ group\ rule\ state\ need\ to\ change = 无法更改安全组规则状态，因为没有安全组规则需要修改状态

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:386
# args: 
could\ no\ change\ vm\ nic\ security\ policy,\ because\ ingress\ policy\ and\ egress\ policy\ cannot\ be\ both\ null = 无法更改VM NIC安全策略，因为入口策略和出口策略不能同时为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:389
# args: msg.getIngressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ ingress\ policy[%s] = 无法更改VM NIC安全策略，因为入口策略[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:393
# args: msg.getEgressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ egress\ policy[%s] = 无法更改VM NIC安全策略，因为出口策略[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:397
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ not\ found = 无法更改VM NIC安全策略，因为找不到VM NIC[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:402
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ has\ no\ security\ policy = 无法更改VM NIC安全策略，因为VM NIC[uuid：{0}]没有安全策略

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:416
# args: msg.getType()
could\ not\ update\ security\ group\ rule\ priority,\ because\ invalid\ type[%s] = 无法更新安全组规则优先级，因为类型[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:421
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ is\ not\ exist = 无法更新安全组规则优先级，因为安全组[uuid：{0}]不存在

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:425
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rules\ is\ empty = 无法更新安全组规则优先级，因为规则为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:435
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ rules\ size\ not\ match = 无法更新安全组规则优先级，因为安全组[uuid：{0}]规则大小不匹配

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:440
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ priority[%d]\ is\ invalid = 无法更新安全组规则优先级，因为规则优先级[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:443
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ has\ duplicate = 无法更新安全组规则优先级，因为优先级[{0}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:449
# args: ao.getRuleUuid(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule[uuid\:%s]\ not\ in\ security\ group[uuid\:%s] = 无法更新安全组规则优先级，因为规则[uuid：{0}]不在安全组[uuid：{1}]中

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:452
# args: ao.getPriority(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ not\ in\ security\ group[uuid\:%s] = 无法更新安全组规则优先级，因为优先级[{0}]不在安全组[uuid：{1}]中

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:457
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ uuid\ duplicate = 无法更新安全组规则优先级，因为规则uuid重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:464
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule\ uuid[%s]\ is\ not\ exist = 无法更改安全组规则，因为安全组规则uuid[{0}]不存在

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:470
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ is\ default\ rule,\ only\ the\ description\ and\ status\ can\ be\ set = 无法更改安全组规则，因为安全组规则[{0}]是默认规则，只能设置描述和状态

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:476
# args: msg.getUuid(),SecurityGroupConstant.DEFAULT_RULE_PRIORITY
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ priority\ cannot\ be\ set\ to\ default\ rule\ priority[%d] = 无法更改安全组规则，因为安全组规则[{0}]优先级无法设置为默认规则优先级[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:485
# args: vo.getType(),count.intValue(),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = 无法更改安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:488
# args: vo.getType().toString(),count.intValue()
could\ not\ change\ security\ group\ rule,\ because\ the\ maximum\ priority\ of\ %s\ rule\ is\ [%d] = 无法更改安全组规则，因为{0}规则的最高优先级为[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:497
# args: msg.getState()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ state[%s] = 无法更改安全组规则，因为状态[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:505
# args: msg.getAction()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ action[%s] = 无法更改安全组规则，因为协议[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:513
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ protocol[%s] = 无法更改安全组规则，因为协议[{0}]无效

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:545
# args: msg.getUuid(),msg.getSrcIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Egress,\ srcIpRange[%s]\ cannot\ be\ set = 无法更改安全组规则，因为安全组规则[{0}]类型为出口，无法设置SrcIPRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:542
# args: msg.getUuid(),msg.getDstIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Ingress,\ dstIpRange[%s]\ cannot\ be\ set = 无法更改安全组规则，因为安全组规则[{0}]类型为入口，无法设置dstIpRange[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:535
# args: msg.getSrcIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ srcIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = 无法更改安全组规则，因为已设置SrcIPRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:548
# args: msg.getDstIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ dstIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = 无法更改安全组规则，因为已设置dstIpRange[{0}]，RemoteSecurityGroupuuid[{1}]必须为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:555
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ not\ found = 无法更改安全组规则，因为找不到远程安全组[uuid：{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:558
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ is\ set,\ srcIpRange\ and\ dstIpRange\ must\ be\ empty = 无法更改安全组规则，因为已设置远端安全组[uuid：{0}]，SrcIPRange和DstIPRange必须为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:611
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ must\ be\ set = 无法更改安全组规则，因为规则协议为[{0}]，必须设置dstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:603
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ empty = 无法更改安全组规则，因为规则协议为[{0}]，dstPortRange不能为空

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:598
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ set = 无法更改安全组规则，因为规则协议为[{0}]，无法设置dstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:642
# args: JSONObjectUtil.toJsonString(sao),o.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = 无法更改安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:145
# args: uuid,backendL3Cidr,frontL3Uuid,frontL3Cidr
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ cidr\ [%s]\ is\ overlapped\ with\ frond\ l3\ network[uuid\:%s]\ cidr\ [%s] = 无法执行API操作。后端网络[uuid：{0}]CIDR[{1}]与前端三层网络[uuid：{2}]CIDR[{3}]重叠

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:768
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ can\ not\ be\ vpc\ network\ because\ other\ backend\ network\ is\ not\ vpc\ network = 无法执行API操作。后端网络[uuid：{0}]不能是VPC网络，因为其他后端网络不是VPC网络

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:804
# args: 
can't\ delete\ rules\ of\ different\ security\ group = 无法删除不同安全组的规则

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:807
# args: vo.getUuid()
can't\ delete\ default\ rule[uuid\:%s] = 无法删除默认规则[uuid：{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:170
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ not\ connected\ vpc\ router = 无法执行API操作。后端网络[uuid：{0}]未连接到VPC路由器

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:835
# args: backendL3Uuids.get(0),firstBackendVrUuids.get(0),frontL3Uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ which\ is\ not\ connect\ to\ front\ network[uuid\:%s] = 无法执行API操作。后端网络[uuid：{0}]连接了VPC路由器[uuid：{1}]，而该路由器未连接到前端网络[uuid：{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:897
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = 云物理机网卡[uuids:{0}]不在安全组[uuid:{1}]挂载的L3网络上

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:933
# args: uuid
could\ not\ add\ security\ group\ rule,\ because\ security\ group[uuid\:%s]\ does\ not\ exist = 无法添加安全组规则，因为安全组[uuid：{0}]不存在

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:922
# args: SecurityGroupConstant.ONE_API_RULES_MAX_NUM
could\ not\ add\ security\ group\ rule,\ because\ the\ rules\ cannot\ be\ empty\ or\ exceed\ the\ max\ number\ %d = 无法添加安全组规则，因为规则不能为空或超过最大数量{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:927
# args: msg.getRemoteSecurityGroupUuids()
could\ not\ add\ security\ group\ rule,\ because\ duplicate\ uuid\ in\ remoteSecurityGroupUuids\:\ %s = 无法添加安全组规则，因为RemoteSecurityGroupuuid中存在重复的uuid：{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:938
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ remote\ security\ group\ uuid\ is\ conflict = 无法添加安全组规则，因为远端安全组uuid冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:974
# args: SecurityGroupConstant.DEFAULT_RULE_PRIORITY,SecurityGroupConstant.LOWEST_RULE_PRIORITY
could\ not\ add\ security\ group\ rule,\ because\ rule\ priority\ must\ greater\ than\ %d\ or\ equals\ %d = 无法添加安全组规则，因为规则优先级必须大于{0}或等于{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:982
# args: ao.getType(),SecurityGroupRuleType.getAllType()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ type[%s],\ valid\ types\ are\ %s = 无法添加安全组规则，因为规则类型[{0}]无效，有效类型为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:989
# args: ao.getState(),SecurityGroupRuleState.getAllState()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ state[%s],\ valid\ states\ are\ %s = 无法添加安全组规则，因为规则状态[{0}]无效，有效状态为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:994
# args: ao.getProtocol(),SecurityGroupRuleProtocolType.getAllProtocol()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ protocol[%s],\ valid\ protocols\ are\ %s = 无法添加安全组规则，因为规则协议[{0}]无效，有效协议为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1001
# args: ao.getAction(),SecurityGroupRuleAction.getAllAction()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ action[%s],\ valid\ actions\ are\ %s = 无法添加安全组规则，因为规则动作[{0}]无效，有效动作为{1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1009
# args: ao.getIpVersion(),IPv6Constants.IPv4,IPv6Constants.IPv6
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ ipVersion[%d],\ valid\ ipVersions\ are\ %d/%d = 无法添加安全组规则，因为规则IPVersion[{0}]无效，有效的IPVersion为{1}/{2}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1037
# args: ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ dstIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ ingress\ rule = 无法添加安全组规则，因为不允许为入口规则设置dstIpRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1042
# args: ao.getAllowedCidr(),ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ srcIpRange[%s]\ are\ in\ conflict = 无法添加安全组规则，因为allowedcidr[{0}]和srciprange[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1031
# args: ao.getDstIpRange(),ao.getRemoteSecurityGroupUuid()
could\ not\ add\ security\ group\ rule,\ because\ the\ ip\ range[%s]\ and\ remoteSecurityGroupUuid[%s]\ are\ in\ conflict = 无法添加安全组规则，因为IP范围[{0}]和RemoteSecurityGroupuuid[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1019
# args: ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ srcIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ egress\ rule = 无法添加安全组规则，因为不允许为出口规则设置SrcIPRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1024
# args: ao.getAllowedCidr(),ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ dstIpRange[%s]\ are\ in\ conflict = 无法添加安全组规则，因为AllowedCidr[{0}]和dstIpRange[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1073
# args: ao.getEndPort(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ endPort[%d],\ endPort\ must\ be\ greater\ than\ or\ equal\ to\ startPort[%d] = 无法添加安全组规则，因为规则endPort[{0}]无效，endPort必须大于或等于startPort[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1076
# args: ao.getDstPortRange(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ dstPortRange[%s]\ and\ starPort[%s]\ are\ in\ conflict = 无法添加安全组规则，因为DstPortRange[{0}]和StarPort[{1}]冲突

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1087
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ TCP/UDP\ must\ set\ dstPortRange = 无法添加安全组规则，因为协议类型TCP/UDP必须设置dstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1065
# args: ao.getDstPortRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ dstPortRange[%s] = 无法添加安全组规则，因为协议类型ALL或ICMP无法设置DstPortRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1068
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ startPort\ or\ endPort = 无法添加安全组规则，因为协议类型ALL或ICMP无法设置StartPort或EndPort

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1097
# args: JSONObjectUtil.toJsonString(newRules.get(i)),JSONObjectUtil.toJsonString(newRules.get(j))
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ and\ rule[%s]\ are\ dupilicated = 无法添加安全组规则，因为规则[{0}]和规则[{1}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1121
# args: JSONObjectUtil.toJsonString(sao),vo.getUuid()
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = 无法添加安全组规则，因为规则[{0}]与数据库中的规则[uuid：{1}]重复

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1136
# args: SecurityGroupRuleType.Egress,SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ has\ reached\ the\ maximum\ limit[%d] = 无法添加安全组规则，因为安全组{0}规则已达到最大限制[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1144
# args: SecurityGroupRuleType.Egress,(egressRuleCount + toCreateEgressRuleCount),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = 无法添加安全组规则，因为安全组{0}规则编号[{1}]超出最大限制[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1148
# args: msg.getPriority(),ingressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ ingress\ rule\ maximum\ priority\ is\ [%d] = 无法添加安全组规则，因为优先级[{0}]必须连续，入口规则最大优先级为[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1151
# args: msg.getPriority(),egressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ egress\ rule\ maximum\ priority\ is\ [%d] = 无法添加安全组规则，因为优先级[{0}]必须是连续的，出口规则最大优先级为[{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:217
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ vpc\ network\ because\ other\ backend\ network\ is\ vpc\ network = 无法执行API操作。后端网络[uuid：{0}]必须是VPC网络，因为其他后端网络是VPC网络

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:228
# args: uuid,bVrUuids.get(0),firstBackendVrUuids.get(0)
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ while\ other\ backend\ network\ is\ connected\ to\ vpc\ router[uuid\:%s] = 无法执行API操作。后端网络[uuid：{0}]连接到VPC路由器[uuid：{1}]，而另一个后端网络连接到VPC路由器[uuid：{2}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:186
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ private\ flat\ network\ because\ frond\ l3\ network\ is\ private\ flat\ network = 无法执行API操作。后端网络[uuid：{0}]必须是专用三层网络，因为前端三层网络是专用三层网络

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:156
# args: frontL3.getUuid()
could\ not\ execute\ the\ api\ operation.\ frontend\ network\ [uuid\:%s]\ is\ not\ connected\ vpc\ router = 无法执行API操作。前端网络[uuid：{0}]未连接VPC路由器

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:164
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ vpc\ network\ because\ frond\ l3\ network\ is\ vpc\ network = 无法执行API操作。后端网络[uuid：{0}]必须是VPC网络，因为前端三层网络是VPC网络

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:175
# args: uuid,backendVrUuids.get(0),frontVrUuids.get(0)
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ while\ front\ network\ is\ connected\ to\ vpc\ router[uuid\:%s] = 无法执行API操作。后端网络[uuid：{0}]连接到VPC路由器[uuid：{1}]，前端网络连接到VPC路由器[uuid：{2}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:254
# args: msg.getDeployType()
could\ not\ create\ slb\ group\ because\ invalid\ deploy\ type\ %s = 无法创建SLB组，因为部署类型{0}无效

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:263
# args: msg.getBackendType()
could\ not\ create\ slb\ group\ because\ invalid\ backend\ type\ %s = 无法创建SLB组，因为后端类型{0}无效

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:298
# args: frontL3Uuid,slbVO.getUuid()
can\ not\ detach\ front\ end\ l3\ network\ [uuid\:%s]\ from\ SLB\ instance = 无法从SLB实例分离前端三层网络[uuid：{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:303
# args: slbVO.getManagementNetworkUuid(),slbVO.getUuid()
can\ not\ detach\ management\ l3\ network\ [uuid\:%s]\ from\ SLB\ instance = 无法从SLB实例分离管理三层网络[uuid：{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:315
# args: msg.getVmNicUuid()
can\ not\ detach\ nic\ [uuid\:%s]\ from\ SLB\ instance,\ because\ it\ is\ the\ last\ backend\ l3\ network\ nic = 无法从SLB实例分离NIC[uuid：{0}]，因为它是最后一个后端三层网络NIC

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:343
# args: msg.getVipUuid(),vipVO.getServicesTypes()
can\ not\ create\ load\ balancer\ because\ vip\ [uuid\:%s]\ has\ attached\ other\ network\ service\ [%s] = 无法创建负载平衡器，因为VIP[uuid：{0}]已附加其他网络服务[{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:350
# args: msg.getVipUuid(),vrUuids
can\ not\ create\ load\ balancer\ because\ vip\ [uuid\:%s]\ has\ attached\ to\ vpc\ router\ [%s] = 无法创建负载平衡器，因为VIP[uuid：{0}]已连接到VPC路由器[{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:356
# args: slbGroupUuid
can\ not\ create\ load\ balancer\ because\ invalid\ slb\ group\ [uuid\:%s] = 无法创建负载平衡器，因为SLB组[uuid：{0}]无效

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:407
# args: 
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network\ is\ not\ connected\ slb\ instance = 无法将vmnic添加到负载平衡器服务器组，因为三层网络未连接到SLB实例

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:389
# args: uuid
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network\ [uuid\:%s]\ is\ connected\ any\ vpc\ router = 无法将vmnic添加到负载平衡器服务器组，因为三层网络[uuid：{0}]已连接到任何VPC路由器

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:396
# args: uuid
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network[uuid\:%s]\ is\ connected\ to\ different\ vpc\ router = 无法将vmnic添加到负载平衡器服务器组，因为三层网络[uuid：{0}]已连接到不同的VPC路由器

# at: src/main/java/org/zstack/network/service/slb/SlbCreatePublicVipFlow.java:60
# args: slbInstance.getUuid(),frontL3Uuid
can\ not\ find\ nic\ of\ slb\ instance\ [uuid\:%s]\ which\ is\ attached\ to\ slb\ group\ front\ l3\ network\ [uuid\:%s] = 找不到SLB实例[uuid：{0}]的网卡，该网卡挂接在SLB组前三层网络[uuid：{1}]上

# at: src/main/java/org/zstack/network/service/slb/SlbVyosBackend.java:38
# args: 
can\ not\ find\ slb\ vm\ instance = 找不到SLB云主机实例

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:48
# args: 
system\ vip\ can\ not\ be\ deleted\ by\ API\ message = API消息无法删除系统VIP

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:54
# args: msg.getAllocatorStrategy()
unsupported\ ip\ allocation\ strategy[%s] = 不支持的ip分配策略[{0}]

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:63
# args: msg.getRequiredIp()
requiredIp[%s]\ is\ not\ in\ valid\ IPv4\ mediaType = 请求的ip[{0}]不是有效的IPv4地址

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:70
# args: msg.getRequiredIp(),msg.getL3NetworkUuid()
there\ is\ already\ a\ vip[%s]\ on\ l3Network[uuid\:%s] = 已有一个vip[{0}]在三层网络[uuid:{1}]上

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:76
# args: msg.getRequiredIp()
required\ ip\ address\ [%s]\ is\ already\ used = 所需的IP地址[{0}]已被使用

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:100
# args: 
could\ not\ create\ vip,\ because\ can\ not\ determine\ the\ vip\ version = 无法创建VIP，因为无法确定VIP版本

# at: src/main/java/org/zstack/network/service/vip/VipBase.java:155
# args: self.getUuid(),self.getName(),self.getIp(),self.getServiceProvider()
service\ provider\ of\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:\ %s]\ has\ been\ set\ to\ %s = vip[uuid:{0}, name:{1}, ip: {2}]的服务提供器已经被设置成[{3}]

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:43
# args: 
VipQos\ for\ ipv6\ wil\ be\ added\ soon = IPv6的VIPQoS将很快添加

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:53
# args: msg.getVipUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ already\ existed = 虚拟IP[uuid: {0}]的Qos已经存在了

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:48
# args: msg.getVipUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ already\ existed = 虚拟IP[uuid: {0}]的Qos端口{1}已经存在

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:59
# args: 
SetVipQos\ MUST\ set\ InboundBandwidth\ or\ OutboundBandwidth = 设置虚拟IP的Qos是必须设置上行网络带宽和下行网络带宽

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:67
# args: 
Cannot\ set\ Qos\ for\ this\ Vip.\ Not\ all\ peer\ l3networks\ provide\ VipQos\ service. = 无法设置此VIP的QoS。并非所有对等三层网络都提供VIPQoS服务。

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:80
# args: msg.getUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ does\ not\ exist = 虚拟IP[uuid: {0}]的Qos不存在

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:75
# args: msg.getUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ does\ not\ exist = 虚拟IP[uuid: {0}]的Qos端口{1}不存在

# at: src/main/java/org/zstack/network/service/vipQos/VipQosManagerImpl.java:129
# args: vipUuid
Can\ not\ find\ VipQos\ backend\ for\ Vip\ [uuid\:%s] = 未找到虚拟IP的Qos后端

# at: src/main/java/org/zstack/network/service/vipQos/flat/FlatVipQosBackend.java:198
# args: hostUuid
operation\ error,\ vip\ %s\ has\ not\ bind\ to\ vm = 操作失败，虚拟IP{0}没有绑定云主机

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:656
# args: self.getName(),self.getUuid(),self.getState()
the\ virtual\ router[name\:%s,\ uuid\:%s,\ current\ state\:%s]\ is\ not\ running,and\ cannot\ perform\ required\ operation.\ Please\ retry\ your\ operation\ later\ once\ it\ is\ running = 云路由[name:{0}, uuid:{1}, current state:{2}]没有运行，无法执行请求的操作。请在其启动后重试

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:661
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
virtual\ router[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = 云路由[uuid:{0}]处于状态{1}中，无法向{2}发送http调用

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:666
# args: self.getUuid(),msg.getPath()
virtual\ router[uuid\:%s]\ has\ no\ management\ nic\ that\ cannot\ make\ http\ call\ to\ %s = 虚拟路由器[uuid：{0}]没有无法对{1}进行HTTP调用的管理NIC

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:995
# args: info.getIp(),info.getMac(),vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError()
unable\ to\ add\ nic[ip\:%s,\ mac\:%s]\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s = 不能添加网卡[ip:{0}, mac:{1}]到虚拟路由设备[uuid:{2} ip:{3}]，因为{4}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:94
# args: msg.getDefaultRouteL3NetworkUuid(),msg.getVmInstanceUuid()
l3\ uuid[\:%s]\ is\ same\ to\ default\ network\ of\ virtual\ router\ [uuid\:%s] = L3 uuid[：{0}]与虚拟路由器[uuid：{1}]的默认网络相同

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:107
# args: msg.getDefaultRouteL3NetworkUuid(),msg.getVmInstanceUuid()
l3\ uuid[\:%s]\ is\ not\ attached\ to\ virtual\ router\ [uuid\:%s] = L3 uuid[：{0}]未连接到虚拟路由器[uuid：{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:114
# args: msg.getDefaultRouteL3NetworkUuid()
could\ not\ set\ the\ default\ network,\ because\ l3\ uuid[\:%s]\ is\ not\ public\ network = 设置默认网络失败，因为三层网路[:{0}] 不是公有网络

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:112
# args: msg.getDefaultRouteL3NetworkUuid()
could\ not\ set\ the\ default\ network,\ because\ l3\ uuid[\:%s]\ is\ management\ network = 设置默认网络失败，因为三层网路[:{0}] 是管理网络

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:219
# args: msg.getImageUuid(),type,ImageMediaType.RootVolumeTemplate
image[uuid\:%s]'s\ mediaType\ is\ %s,\ the\ mediaType\ of\ a\ virtual\ router\ image\ must\ be\ %s = 镜像[uuid:{0}]的mediaType为{1}，云路由的mediaType必须为{2}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:225
# args: msg.getImageUuid(),format
image[uuid\:%s]\ is\ of\ format\ %s,\ cannot\ be\ used\ for\ virtual\ router = 镜像[uuid:{0}]的格式为{1}，无法被用于云路由

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:191
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
management\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = 管理网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:196
# args: 
can\ not\ create\ virtual\ router\ offering,\ because\ management\ network\ doesn't\ support\ ipv6\ yet = 无法创建虚拟路由器产品，因为管理网络尚不支持IPv6

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:208
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
public\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = 公共网络[uuid:{0}]和将要创建的规格不处于同一个区域（zone）[uuid:{1}]中

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:236
# args: msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ public\ network = 三层网络[uuid: {0}]启用了SNAT服务，无法被用作公共网络

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:234
# args: msg.getManagementNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ management\ network = 三层网络[uuid: {0}]启用了SNAT服务，无法被用作管理网络

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:243
# args: msg.getManagementNetworkUuid(),msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ is\ same\ network\ address\ with\ [uuid\:\ %s],\ it\ cannot\ be\ used\ for\ virtual\ router = 三层网络[uuid: {0}] 和 网络 [uuid: {1}] 具有相同的网络地址，无法被用于云路由

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:253
# args: managementNetworkUuid
the\ management\ network[uuid\:%s]\ doesn't\ have\ any\ IP\ range = 管理网络[uuid:{0}]不包含任何的IP范围

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:274
# args: managementNetworkUuid,gateway
the\ management\ network[uuid\:%s,\ gateway\:%s]\ is\ not\ reachable = 管理网络[uuid:{0}, gateway:{1}]不可抵达

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:103
# args: iso.getIsoPath(),vrSpec.getDestHost().getUuid(),vrSpec.getDestHost().getManagementIp(),iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ create\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = 创建云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}, ip:{2}]上为云路由[uuid:{3}]执行的，原因为{4}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:136
# args: iso.getIsoPath(),hostUuid,iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ delete\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = 删除云路由引导镜像（VirtualRouterBootstrapIso）[{0}]失败，该操作是在KVM物理机[uuid:{1}]上为云路由[uuid:{2}]执行的，原因为{3}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:289
# args: 
cannot\ create\ virtual\ Router\ vm\ while\ virtual\ router\ network\ overlaps\ with\ private\ network\ in\ ip\  = 当云路由规格的网络和私有网络IP范围有重叠时，无法创建云路由设备

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:716
# args: offeringUuid
No\ virtual\ router\ instance\ offering\ with\ uuid\:%s\ is\ found = 找不到uuid为{0}的虚拟路由器实例产品

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:720
# args: offeringUuid,resourceUuid
the\ network\ of\ virtual\ router\ instance\ offering\ with\ uuid\:%s\ can't\ be\ same\ with\ private\ l3\ network\ uuid\:%s = uuid为{0}的虚拟路由器实例提供的网络不能与uuid为{1}的专用三层网络相同

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1434
# args: l3NetworkUuid
cannot\ add\ ip\ range,\ because\ l3\ network[uuid\:%s]\ is\ management\ network\ of\ virtual\ router\ offering = 无法添加IP范围，因为三层网络[uuid：{0}]是虚拟路由器产品的管理网络

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1439
# args: l3NetworkUuid
cannot\ add\ ip\ range,\ because\ l3\ network[uuid\:%s]\ is\ management\ network\ of\ virtual\ router = 无法添加IP范围，因为三层网络[uuid：{0}]是虚拟路由器的管理网络

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1466
# args: tag,type
couldn't\ add\ image,\ because\ systemTag\ [%s]\ includes\ invalid\ appliance\ image\ type\ [%s] = 无法添加镜像，因为系统标记[{0}]包含无效的装置镜像类型[{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1504
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ eip\ is\ selected,\ snat\ must\ be\ selected\ too = 挂载虚拟路由网络服务到三层网络[uuid:{0}]失败。选中EIP服务时，SNAT服务也必须被选中

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1508
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ port\ forwarding\ is\ selected,\ snat\ must\ be\ selected\ too = 挂载虚拟路由网络服务到三层网络[uuid:{0}]失败。选中端口转发服务时，SNAT服务也必须被选中

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:2445
# args: vrUuid,ret.getError()
update\ virtual\ router\ [uuid\:%s]\ default\ network\ failed,\ because\ %s = 更新虚拟路由器[uuid：{0}]默认网络失败，原因是{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:2541
# args: ss[1]
invalid\ ApplianceVmType\ %s = 无效的设备VMType{0}

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:93
# args: vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError(),JSONObjectUtil.toJsonString(info)
unable\ to\ add\ dhcp\ entries\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s,\ dhcp\ entry[%s] = 无法向云路由[uuid:{0} ip:{1}]添加DHCP条目，因为{2}，DHCP条目为[{3}]

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:375
# args: 
no\ virtual\ router\ is\ configured\ for\ vyos\ dhcp = 没有为VyOS DHCP配置虚拟路由器

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java:208
# args: vr.getUuid(),vr.getManagementNic().getIp(),ret.getError()
unable\ to\ program\ dhcp\ entries\ served\ by\ virtual\ router[uuid\:%s,\ ip\:%s],\ %s = 无法执行由云路由[uuid:{0}, ip:{1}]提供的DHCP条目{2}.

# at: src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterDnsBackend.java:210
# args: vr.getUuid(),vr.getManagementNic().getIp(),struct,l3.getUuid(),l3.getName(),ret.getError()
virtual\ router[uuid\:%s,\ ip\:%s]\ failed\ to\ configure\ dns%s\ for\ L3Network[uuid\:%s,\ name\:%s],\ %s = 云路由[uuid:{0}, ip:{1}]未能为三层网络[uuid:{3}, name:{4}]配置DNS{2}，错误细节: {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java:127
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(dns),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ configure\ dns%s,\ %s\  = 云路由[name: {0}, uuid: {1}]未能配置DNS{2}，错误细节: {3}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:168
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ create\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = 无法为云主机网卡[uuid:{3}]在云路由[uuid:{4}]上创建EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节: {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:226
# args: offering.getUuid(),l3inv.getUuid(),l3inv.getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getEip().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ EIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = 在区域（zone）[uuid:{2}]上为三层网络[uuid:{1}]找到了云路由规格[uuid:{0}]；但是，其公共网络[uuid:{3}]和EIP[uuid:{4}]的公共网络不是同一个三层网络。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该三层网络指定一个特定的云路有规格

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:318
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ remove\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = 未能在云路由[uuid:{4}]上为云主机网卡[uuid:{3}]移除EIP[uuid:{0}, name:{1}, ip:{2}]，错误细节: {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterSyncEipOnStartFlow.java:214
# args: vr.getUuid(),ret.getError()
failed\ to\ sync\ eip\ on\ virtual\ router[uuid\:%s],\ %s = 未能在云路由[uuid:{0}]上同步EIP，错误细节: {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/ha/VirtualRouterHaBackendImpl.java:63
# args: 
ha\ group\ extension\ point\ nil = HA组扩展点Nil

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:170
# args: msg.getVmNicUuids(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ attached\ vmnics\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = 新添加的虚拟网卡[uuids:{0}]和绑定云主机的网卡没有在一个云路由上，它们分别在云路由[uuids:{1}]上

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:200
# args: msg.getVmNicUuids(),peerL3NetworkUuids,msg.getLoadBalancerUuid(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ peer\ l3s[uuids\:%s]\ of\ loadbalancer[uuid\:\ %s]'s\ vip\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = 新添加的云主机网卡[uuids:{0}]和负载均衡器[uuid: {2}]的弹性IP的三层网络[uuids:{1}]没有在相同的云路由上，它们分别在云路由[uuids:{3}]上

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:1320
# args: 
vmnic\ must\ be\ specified\ for\ share\ loadbalancer = 必须为Share LoadBalancer指定vmnic

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:1778
# args: struct.getLb().getUuid()
cannot\ find\ virtual\ router\ for\ load\ balancer\ [uuid\:%s] = 未能为负载均衡器[uuid:{0}]找到云路由

# at: src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java:91
# args: guestL3.getUuid(),guestL3.getName(),offering.getPublicNetworkUuid(),offering.getUuid(),offering.getName()
guest\ l3Network[uuid\:%s,\ name\:%s]\ needs\ SNAT\ service\ provided\ by\ virtual\ router,\ but\ public\ l3Network[uuid\:%s]\ of\ virtual\ router\ offering[uuid\:\ %s,\ name\:%s]\ is\ the\ same\ to\ this\ guest\ l3Network = 用户三层网络[uuid:{0}, name:{1}]需要云路由提供的SNAT服务，但是云路由规格[uuid: {3}, name:{4}]的公共三层网络[uuid:{2}]与该客户三层网络相同

# at: src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSyncSNATOnStartFlow.java:144
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(snatInfo),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ sync\ snat%s,\ %s = 云路由[name: {0}, uuid: {1}]未能同步SNAT{2}，错误细节: {3}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java:85
# args: to.getVipIp(),to.getPrivateIp(),to.getVipPortStart(),to.getVipPortEnd(),to.getPrivatePortStart(),to.getPrivatePortEnd(),ret.getError()
failed\ to\ create\ port\ forwarding\ rule[vip\ ip\:\ %s,\ private\ ip\:\ %s,\ vip\ start\ port\:\ %s,\ vip\ end\ port\:\ %s,\ private\ start\ port\:\ %s,\ private\ end\ port\:\ %s],\ because\ %s = 无法创建端口转发规则[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}]，错误细节: {6}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java:82
# args: JSONObjectUtil.toJsonString(to),ret.getError()
failed\ to\ revoke\ port\ forwarding\ rules\ %s,\ because\ %s = 未能解除端口转发规则{0}，原因: {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:184
# args: offering.getUuid(),struct.getGuestL3Network().getUuid(),struct.getGuestL3Network().getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getRule().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ PortForwarding\ rule[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = 在区域（zone）[uuid:{2}]内为三层网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和端口转发规则[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该三层网络指定一个特定的云路有规格

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:249
# args: rule.getVipPortStart(),rule.getVipPortEnd(),rule.getPrivatePortStart(),rule.getPrivatePortEnd()
virtual\ router\ doesn't\ support\ port\ forwarding\ range\ redirection,\ the\ vipPortStart\ must\ be\ equals\ to\ privatePortStart\ and\ vipPortEnd\ must\ be\ equals\ to\ privatePortEnd;but\ this\ rule\ rule\ has\ a\ mismatching\ range\:\ vip\ port[%s,\ %s],\ private\ port[%s,\ %s] = 云路由不支持范围性的端口转发重定向，vipPortStart和privatePortStart必须一致，vipPortEnd和privatePortEnd必须一致，但这条规则有个不匹配的范围: vip端口范围[{0}, {1}]，私有端口范围[{2}, {3}]

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:408
# args: vrVO.getUuid(),ret.getError()
failed\ to\ add\ portforwardings\ on\ virtual\ router[uuid\:%s],\ %s = 在云路由[uuid:{0}]添加端口转发失败，{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:484
# args: vrVO.getUuid(),ret.getError()
failed\ to\ revoke\ port\ forwardings\ on\ virtual\ router[uuid\:%s],\ %s = 取消在云路由[uuid:{0}]上端口转发服务失败，{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java:212
# args: vr.getName(),vr.getUuid(),ret.getError()
failed\ to\ sync\ port\ forwarding\ rules\ served\ by\ virtual\ router[name\:\ %s,\ uuid\:\ %s],\ because\ %s = 未能同步由云路由[name: {0}, uuid: {1}]提供的端口转发规则，因为: {2}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:179
# args: tos,ret.getError()
failed\ to\ remove\ vip%s,\ because\ %s = 未能移除VIP{0}，因为{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:125
# args: tos,vr.getUuid(),ret.getError()
failed\ to\ create\ vip%s\ on\ virtual\ router[uuid\:%s],\ because\ %s = 未能在云路由[uuid:{1}]上创建VIP{0}，因为{2}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:245
# args: vips.stream().map(VipTO::getIp).collect(Collectors.toList()),nic.getVmInstanceUuid(),nic.getUuid(),nic.getIp(),ret.getError()
failed\ to\ sync\ vips[ips\:\ %s]\ on\ virtual\ router[uuid\:%s]\ for\ attaching\ nic[uuid\:\ %s,\ ip\:\ %s],\ because\ %s = 为了绑定网卡[uuid: {2}, ip: {3}]在云路由[uuid:{1}]上同步虚拟IP[ips: {0}]失败，因为{4}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:240
# args: vrUuid,vrState
virtual\ router[uuid\:%s,\ state\:%s]\ is\ not\ running = 云路由[uuid:{0}, state:{1}]没有运行

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:281
# args: offering.getUuid(),s.getL3Network().getUuid(),s.getL3Network().getZoneUuid(),self.getL3NetworkUuid(),self.getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ VIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = 在区域（zone）[uuid:{2}]内为三层网络[uuid:{1}]找到了一个云路由规格[uuid:{0}]；然而，其网络的公共网络[uuid:{3}]和VIP[uuid:{4}]的公共网络不一致。你可能需要使用系统标签[guestL3Network::l3NetworkUuid]为该三层网络指定一个特定的云路有规格

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosChangePrivateL3FirewallDefaultActionExtensionPoint.java:67
# args: nic.getIp(),nic.getMac(),nic.getVmInstanceUuid(),rsp.getError()
failed\ to\ change\ nic[ip\:%s,\ mac\:%s]\ firewall\ default\ action\ of\ virtual\ router\ vm[uuid\:%s],\ because\ %s = 修改云路由[uuid:{2}]的网卡[ip:{0}, mac:{1}]的默认防火墙规则失败，因为{3}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConfigSshFlow.java:156
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ virtual\ router[%s]\ after\ configure\ ssh = 配置SSH后，无法通过SSH连接到虚拟路由器[{0}]

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConnectFlow.java:214
# args: ret.getError()
vyos\ init\ command\ failed,\ because\:%s = vyos init命令失败，原因是：{0}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java:246
# args: nic.getVmInstanceUuid(),rsp.getError()
unable\ to\ start\ dhcp\ server\ on\ virtual\ router\ vm[uuid\:%s],\ because\ %s = 无法在虚拟路由器VM[uuid：{0}]上启动DHCP服务器，因为{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java:282
# args: nic.getVmInstanceUuid(),rsp.getError()
unable\ to\ stop\ dhcp\ server\ on\ virtual\ router\ vm[uuid\:%s],\ because\ %s = 无法停止虚拟路由器VM[uuid：{0}]上的DHCP服务器，因为{1}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:104
# args: id
File\ reference\ not\ fount\ for\ disk\ %s = 找不到磁盘{0}的文件引用

# at: src/main/java/org/zstack/ovf/OvfHelper.java:117
# args: capacity
Illegal\ disk\ capacity\:\ %s = 非法磁盘容量：{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:127
# args: pSize
Illegal\ disk\ populated\ size\:\ %s = 非法的磁盘填充大小：{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:288
# args: 
Volume\ controller\ not\ found. = 未找到卷控制器。

# at: src/main/java/org/zstack/ovf/OvfHelper.java:320
# args: 
CD\ Driver\ controller\ not\ found. = 找不到光驱控制器。

# at: src/main/java/org/zstack/ovf/OvfHelper.java:368
# args: name
Ethernet\ Adapter\:\ %s\ do\ not\ connect\ to\ a\ network. = 以太网适配器：{0}不要连接到网络。

# at: src/main/java/org/zstack/ovf/OvfHelper.java:380
# args: 
Memory\ 'InstanceID'\ not\ found = 未找到内存“ instanceId ”

# at: src/main/java/org/zstack/ovf/OvfHelper.java:387
# args: 
Memory\ 'VirtualQuantity'\ not\ found = 未找到内存“ virtualQuantity ”

# at: src/main/java/org/zstack/ovf/OvfHelper.java:392
# args: quantity
Illegal\ Memory\ 'VirtualQuantity'\ value\:\ %s = 非法内存“ virtualQuantity ”值：{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:401
# args: 
CPU\ 'InstanceID'\ not\ found = 未找到CPU “ instanceId ”

# at: src/main/java/org/zstack/ovf/OvfHelper.java:407
# args: 
CPU\ 'VirtualQuantity'\ not\ found = 未找到CPU ' virtualQuantity '

# at: src/main/java/org/zstack/ovf/OvfHelper.java:412
# args: quantity
Illegal\ CPU\ 'VirtualQuantity'\ value\:\ %s = 非法的CPU “ VirtualQuantity ”值：{0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:422
# args: cps
Illegal\ CPU\ 'CoresPerSocket'\ value\:\ %s = 非法的CPU “ CoreSperSocket ”值：{0}

# at: src/main/java/org/zstack/ovf/OvfImageUploadTracker.java:156
# args: failLongJobUuids
long\ job[uuid\:%s]\ execute\ fail = 长作业[uuid：{0}]执行失败

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:69
# args: msg.getVmUuid(),ovaUuid
Vm[uuid\:\ %s]\ is\ already\ exported\ as\ the\ ova\ package[uuid\:\ %s],\ please\ delete\ the\ package\ and\ try\ again. = VM[uuid：{0}]已作为OVA程序包[uuid：{1}]导出，请删除该程序包，然后重试。

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:77
# args: msg.getBackupStorageUuid()
Export\ vm\ requires\ an\ ImageStore\ backup\ storage,\ but\ given\ backupStorageUuid\:\ %s\ is\ not\ an\ ImageStore\ backup\ storage. = 导出VM需要ImageStore备份存储，但给定的BackupStorageUuid{0}不是ImageStore备份存储。

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:84
# args: msg.getVmUuid()
Not\ found\ the\ vm\ to\ be\ exported\ with\ the\ uuid\:\ %s = 未找到uuid为{0}的要导出的VM

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:89
# args: VmInstanceState.Stopped.toString()
Only\ vm\ in\ state\:\ %s\ can\ be\ exported. = 只能导出状态为{0}的云主机。

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:114
# args: 
failed\ to\ parse\ jsonCreateVmParam\ in\ APICreateVmInstanceFromOvfMsg = 无法分析APICreateVmInstanceFromOvFMsg中的JsonCreateVmParam

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:229
# args: msg.getBackupStorageUuid(),msg.getVmUuid(),totalSize
backup\ storage[uuid\:\ %s]\ does\ not\ have\ enough\ available\ capacity\ for\ exporting\ vm[uuid\:\ %s],\ required\ capacity\ is\:\ %d = 备份存储[uuid：{0}]没有足够的可用容量来导出云主机[uuid：{1}]，所需容量为：{2}

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:629
# args: msg.getUuid()
ova\ package[uuid\:\ %s]\ not\ found. = 未找到OVA程序包[uuid：{0}]。

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:757
# args: 
Failed\ to\ read\ ovf\ file. = 无法读取OVF文件。

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:1028
# args: 
failed\ to\ create\ VM\ from\ OVF\ because\ the\ root\ disk\ of\ the\ VM\ cannot\ be\ found = 无法从OVF创建VM，因为找不到VM的根磁盘

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:417
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ doesn't\ exist = PCI设备[uuid:{0}]不存在

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:422
# args: pci.getHostUuid()
could\ not\ enable\ sriov\ for\ device\ because\ iommu\ is\ disabled\ on\ host[uuid\:%s] = 无法为设备启用SRIOV，因为已在物理机[uuid：{0}]上禁用IOMMU

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:468
# args: pci.getHostUuid()
pci\ devices\ in\ host[uuid\:%s]\ already\ sriov\ virtualized = 物理机[uuid:{0}]上的PCI设备已经SRIOV虚拟化，无法再次切分

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:473
# args: pci.getHostUuid()
cannot\ sr-iov\ virtualize\ pci\ devices\ in\ host[uuid\:%s]\ that\ are\ attached\ to\ vm = 物理机[uuid:{0}]上的PCI设备已经挂载到云主机，无法SRIOV虚拟化

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:487
# args: minIns,pci.getType(),pci.getHostUuid()
only\ %d\ virtual\ pci\ devices\ can\ be\ generated\ by\ %ss\ in\ host[uuid\:%s] = 物理机[uuid:{2}]上的{1}类型PCI设备最多被切分出{0}个虚拟PCI设备

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:609
# args: pci.getHostUuid(),pci.getUuid()
the\ host[uuid\:%s]\ that\ pci\ device[uuid\:%s]\ in\ is\ not\ Connected = PCI设备[uuid:{1}]所在物理机[uuid:{0}]已失联

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:505
# args: interfaceVO.getUuid()
cannot\ sr-iov\ virtualize\ pci\ devices\ on\ interface[uuid\:%s]\ that\ are\ been\ bonded = SR-IOV无法虚拟化已绑定的接口[uuid：{0}]上的PCI设备

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:513
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ not\ sriov\ virtualized = PCI设备[uuid:{0}]不存在，或者未处于SRIOV虚拟化状态

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:528
# args: pci.getHostUuid()
virtual\ pci\ devices\ generated\ from\ pci\ devices\ in\ host[uuid\:%s]\ still\ attached\ to\ vm = 物理机[uuid:{0}]上存在仍处于已挂载状态的虚拟PCI设备，无法执行虚拟化还原操作

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:550
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ cannot\ be\ virtualized\ into\ mdevs,\ make\ sure\ it's\ enabled\ and\ un-attached = PCI设备[uuid:{0}]无法被切分为MDEV设备，请确保它处于启用状态，并且没有挂载到云主机

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:561
# args: msg.getPciDeviceUuid(),msg.getMdevSpecUuid()
pci\ device[uuid\:%s]\ cannot\ be\ virtualized\ by\ mdev\ spec[uuid\:%s] = PCI设备[uuid:{0}]无法使用MDEV设备规格[uuid:{1}]进行虚拟化切分

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:583
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ is\ not\ virtualized\ into\ mdevs = PCI设备[uuid:{0}]未处于VFIO_MDEV虚拟化状态

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:600
# args: msg.getPciDeviceUuid()
mdev\ devices\ generated\ from\ pci\ device[uuid\:%s]\ still\ attached\ to\ vm = PCI设备[uuid:{0}]切分出的MDEV设备仍处于已挂载状态，无法执行虚拟化还原操作

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:624
# args: VmInstanceUuid
please\ umount\ all\ GPU\ devices\ of\ the\ vm[%s]\ and\ try\ again = 请卸载云主机[{0}]的所有GPU设备，然后重试

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:628
# args: VmInstanceUuid
please\ umount\ all\ vGPU\ devices\ of\ the\ vm[%s]\ and\ try\ again = 请卸载云主机[{0}]的所有vGPU设备，然后重试

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:635
# args: VmInstanceUuid
please\ umount\ other\ pci\ devices\ of\ the\ vm[%s]\ and\ try\ again = 请卸载VM[{0}]的其他PCI设备，然后重试

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:59
# args: vo.getUuid(),vo.getHostUuid(),attachedPciUuid,dstHostUuid
specified\ pci\ devices\ not\ on\ same\ host\:\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s]\ while\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s] = 云主机试图挂载来自不同物理机的PCI设备：设备[uuid: {0}]来自物理机[uuid: {1}]，而设备[uuid: {2}]来自物理机[uuid: {3}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:92
# args: 
no\ candidate\ host\ with\ enough\ pci\ devices = 没有具有足够PCI设备的候选物理机

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:123
# args: vmUuid,specMap.keySet()
failed\ to\ start\ vm[uuid\:%s]\ because\ not\ all\ pci\ specs[uuids\:%s]\ exist = 云主机[uuid:{0}]启动失败，因为所设置的PCI设备规格[uuids:{1}]中有部分不存在

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1319
# args: vo.getType(),PciDeviceType.leagalPciDeviceCandidateTypes
illegal\ type[%s]\ for\ pci\ device,\ only\ %s\ are\ legal = PCI设备的类型[{0}]非法，只有{1}是合法的

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:719
# args: specUuid,hostUuid,vmUuid
failed\ to\ find\ enough\ pci\ device\ of\ spec[uuid\:%s]\ in\ dest\ host[uuid\:%s]\ for\ vm[uuid\:%s] = 无法在物理机[uuid:{1}]上为云主机[uuid:{2}]找到足够多满足规格[uuid:{0}]的PCI设备

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:782
# args: pciUuid
something\ wrong\ with\ iommu\ group\ of\ pci\ device[uuid\:%s] = PCI设备[uuid：{0}]的IOMMU组出现问题

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:795
# args: pciUuids
pci\ devices\ [%s]\ are\ not\ all\ available = PCI设备[{0}]并非全部可用

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:928
# args: msg.getPciDeviceUuid(),msg.getVmInstanceUuid()
can\ not\ attach\ this\ pci\ device[uuid\:%s]\ to\ vm[uuid\:%s]\ due\ to\ host\ allocation = 由于物理机分配问题导致不能将PCI设备[uuid:{0}]绑定云主机[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1221
# args: msg.getVmInstanceUuid()
can\ not\ migrate\ vm[uuid\:%s]\ since\ pci\ device\ attached = 当PCI设备绑定后不能迁移云主机[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1270
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = 不能迁移云盘[uuid:{0}]，因为它所在的云主机挂载了PCI设备

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1316
# args: pciDeviceUuid
pci\ device[uuid\:%s]\ doesn't\ exists = PCI设备[uuid：{0}]不存在

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1330
# args: pciSpecUuid
pci\ device\ spec[uuid\:%s]\ doesn't\ exists = PCI设备规范[uuid：{0}]不存在

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1511
# args: pciUuid,vmUuid
pci\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled\ for\ vm[uuid\:%s] = PCI设备[uuid：{0}]不存在或已为云主机[uuid：{1}]禁用

# at: src/main/java/org/zstack/pciDevice/PciDeviceReserveFlow.java:161
# args: wrongStatusPciUuids,vmUuid
pci\ device[uuid\:%s]\ can\ not\ attach\ to\ vm[uuid\:%s]\ due\ to\ wrong\ status = 由于状态错误，PCI设备[uuid：{0}]无法连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/pciDevice/PciHostChangeStateExtension.java:69
# args: inventory.getUuid(),hasPciVmUuids.toString()
The\ host\ [%s]\ has\ failed\ to\ enter\ the\ maintenance,\ The\ vm\ [%s]\ cannot\ migrate\ automatically\ because\ it\ contains\ the\ PCI\ device = 物理机[{0}]进入维护状态失败，这个云主机[{1}]不能自动迁移，因为云主机包含了PCI设备

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:185
# args: vo.getType(),PciDeviceType.leagalPciDeviceCandidateTypes
illegal\ type[%s]\ for\ pci\ device\ spec,\ only\ %s\ are\ legal = PCI设备规范的类型[{0}]非法，只有{1}合法

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:258
# args: vmUuid,state
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ set\ pci\ device\ spec = 云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以设置PCI设备规格

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:169
# args: msg.getVmInstanceUuid(),msg.getPciSpecUuid()
vm[uuid\:%s]\ already\ has\ pci\ device\ spec[uuid\:%s] = 云主机[uuid:{0}]已经设置过了PCI设备规格[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:197
# args: msg.getVmInstanceUuid(),msg.getPciSpecUuid()
vm[uuid\:%s]\ doesn't\ have\ pci\ device\ spec[uuid\:%s] = 云主机[uuid:{0}]未设置PCI设备规格[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:204
# args: vm.getUuid(),vm.getState(),msg.getPciSpecUuid()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ remove\ pci\ device\ spec[uuid\:%s] = 云主机[uuid:{0}], state:{1}需要处于关机状态下才可以取消PCI设备规格[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:285
# args: msg.getVmInstanceUuid(),msg.getMdevSpecUuid()
vm[uuid\:%s]\ already\ has\ mdev\ device\ spec[uuid\:%s] = 云主机[uuid:{0}]已经设置过了MDEV设备规格[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:293
# args: vm.getUuid(),vm.getState()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ set\ mdev\ device\ spec = 云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以设置MDEV设备规格

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:306
# args: msg.getVmInstanceUuid(),msg.getMdevSpecUuid()
vm[uuid\:%s]\ doesn't\ have\ mdev\ device\ spec[uuid\:%s] = 云主机[uuid:{0}]未设置过MDEV设备规格[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:313
# args: vm.getUuid(),vm.getState(),msg.getMdevSpecUuid()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ remove\ mdev\ device\ spec[uuid\:%s] = 云主机[uuid:{0}, state:{1}]需要处于关机状态下才可以取消MDEV设备规格[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:374
# args: msg.getPciSpecUuid(),msg.getVmInstanceUuid()
pci\ device\ spec[uuid\:%s]\ is\ not\ available\ for\ vm[uuid\:%s] = 云主机[uuid:{1}]无法设置PCI设备规格[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:372
# args: msg.getVmInstanceUuid()
no\ pci\ device\ spec\ available\ for\ vm[uuid\:%s] = 云主机[uuid:{0}]无可用的PCI设备规格

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:367
# args: msg.getVmInstanceUuid(),rly.getError()
failed\ to\ get\ pci\ device\ spec\ available\ for\ vm[uuid\:%s]\:\ %s = 无法获取可用于VM[uuid：{0}]的PCI设备规范：{1}

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:557
# args: msg.getMdevSpecUuid(),msg.getVmInstanceUuid()
mdev\ device\ spec[uuid\:%s]\ is\ not\ available\ for\ vm[uuid\:%s] = 云主机[uuid:{1}]无法设置MDEV设备规格[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:550
# args: msg.getVmInstanceUuid()
no\ mdev\ device\ spec\ available\ for\ vm[uuid\:%s] = 云主机[uuid:{0}]无可用的MDEV设备规格

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:751
# args: specUuid,systemTag
pci\ device\ spec[uuid\:%s]\ doesn't\ exist = PCI设备规格[uuid:{0}]不存在

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:764
# args: specUuid,systemTag
mdev\ device\ spec[uuid\:%s]\ doesn't\ exist = MDEV设备规格[uuid:{0}]不存在

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:191
# args: 
cluster\ uuids\ or\ host\ uuid\ or\ vm\ uuid\ can\ not\ be\ set\ at\ same\ time = 获取候选规格列表时不要同时指定集群uuids、物理机uuid或云主机uuid

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:198
# args: 
clusters\ not\ exist\ or\ disabled = 集群不存在或已禁用

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:232
# args: type,legalTypes
illegal\ mdev\ device\ type\ [%s],\ only\ %s\ are\ legal = 非法的MDEV设备类型[{0}]，只有{1}才是合法的

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:69
# args: 
cannot\ change\ the\ state\ of\ mdev\ device\ that's\ in\ attached\ status = MDEV设备处于已挂载状态，无法修改其状态

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:77
# args: msg.getMdevDeviceUuid()
cannot\ attach\ mdev\ device[uuid\:%s]\ to\ vm,\ make\ sure\ it's\ enabled\ and\ un-attached = 无法为云主机挂载MDEV设备[uuid:{0}]，因为该设备处于禁用状态或已被挂载

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:220
# args: 
cannot\ attach\ mdev\ device\ to\ vm\ instance\ that's\ not\ stopped = 云主机需要处于关机状态下才可以挂载MDEV设备

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:103
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ has\ pci\ devices\ attached\ that\ are\ in\ different\ host\ with\ mdev\ device[uuid\:%s] = 云主机[uuid:{0}]已经挂载了PCI设备，并且它们和MDEV设备[uuid:{1}]不在同一台物理机上

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:113
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ has\ mdev\ devices\ attached\ that\ are\ in\ different\ host\ with\ mdev\ device[uuid\:%s] = 云主机[uuid:{0}]已经挂载了MDEV设备，并且它们和MDEV设备[uuid:{1}]不在同一台物理机上

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:168
# args: mdev.getHostUuid(),mdev.getUuid(),HostState.Enabled,HostStatus.Connected
the\ host[uuid\:%s]\ that\ holds\ mdev\ device[uuid\:%s]\ is\ not\ [%s]\ and\ [%s] = 拥有MDEV设备[uuid：{1}]的物理机[uuid：{0}]不是[{2}]和[{3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:132
# args: msg.getVmInstanceUuid(),mdev.getUuid()
the\ vm[uuid\:%s]\ that\ holds\ se\ mdev\ device\ can\ not\ attach\ more\ se\ mdev[%s] = 拥有SE MDEV设备的VM[uuid：{0}]无法附加更多SE MDEV[{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:143
# args: mdev.getHostUuid(),mdev.getUuid(),HostState.Enabled,HostStatus.Connected
IOMMU\ of\ the\ host[uuid\:%s]\ that\ hosts\ pci\ device[uuid\:%s]\ is\ not\ [%s]\ and\ [%s] = 托管PCI设备[uuid：{1}]的物理机[uuid：{0}]的IOMMU不是[{2}]和[{3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:156
# args: msg.getMdevDeviceUuid(),msg.getVmInstanceUuid()
mdev\ device\ [uuid\:%s]\ is\ not\ attached\ to\ vm[uuid\:%s] = MDEV设备[uuid:{0}]没有挂载到云主机[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:181
# args: 
cannot\ detach\ mdev\ device\ from\ vm\ instance\ when\ it's\ not\ stopped = 云主机需要处于关机状态下才可以卸载MDEV设备

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:245
# args: 
cannot\ delete\ mdev\ device\ when\ it's\ attached = 无法删除已连接的MDEV设备

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:379
# args: msg.getVmInstanceUuid(),reply.getError()
failed\ to\ get\ candidate\ hosts\ to\ start\ vm[uuid\:%s],\ %s = 无法为云主机[uuid:{0}]寻找到可启动的物理机：{1}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:100
# args: mdevUuid
mdev\ device\ [%s]\ is\ not\ available = MDEV设备[{0}]不可用

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:217
# args: rsp.getError()
failed\ to\ hot\ plug\ mdev\ device\ to\ running\ vm,\ because\:%s = 无法将MDEV设备热插拔到正在运行的云主机，因为：{0}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:278
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ cannot\ start\ in\ host\ that\ hold\ mdev\ device[uuid\:%s] = 云主机[uuid:{0}]无法在MDEV设备[uuid:{1}]所在的物理机上启动

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:353
# args: rsp.getError()
failed\ to\ hot\ unplug\ mdev\ device\ to\ running\ vm,\ because\:%s = 无法将MDEV设备热拔出到正在运行的云主机，原因是：{0}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFactory.java:68
# args: pciDevice.getUuid(),PciDeviceVirtStatus.VFIO_MDEV_VIRTUALIZED
pci\ device[uuid\:%s]\ is\ known\ as\ %s,\ but\ cannot\ find\ it's\ mdev\ spec,\ so\ abort. = PCI设备[uuid:{0}]是{1}，但无法找到可用的MDEV设备规格

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:48
# args: vmUuid,specMap.keySet()
failed\ to\ start\ vm[uuid\:%s]\ because\ not\ all\ mdev\ specs[uuids\:%s]\ exist = 云主机[uuid:{0}]启动失败，由于所设置的MDEV设备规格[uuids:{1}]中有部分不存在

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:145
# args: mdev.getUuid(),mdev.getHostUuid(),attachedMdevUuid,dstHostUuid
specified\ mdev\ devices\ not\ on\ same\ host\:\ mdev\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s]\ while\ mdev\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s] = 云主机试图挂载来自不同物理机的MDEV设备：设备[uuid: {0}]来自物理机[uuid: {1}]，而设备[uuid: {2}]来自物理机[uuid: {3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:184
# args: 
no\ candidate\ host\ with\ enough\ mdev\ devices = 没有物理机满足mdev device设备的条件

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceHostChangeStateExtension.java:55
# args: inventory.getUuid(),hasMdevVmUuids.toString()
The\ host\ [%s]\ has\ failed\ to\ enter\ the\ maintenance,\ because\ vm[%s]\ has\ mdev\ devices\ attached\ and\ cannot\ migrate\ automatically = 物理机[{0}]无法进入维护模式，因为云主机[{1}]挂载了MDEV设备导致无法迁移

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:308
# args: specUuid,hostUuid,vmUuid
failed\ to\ find\ enough\ mdev\ device\ of\ spec[uuid\:%s]\ in\ dest\ host[uuid\:%s]\ for\ vm[uuid\:%s] = 无法在物理机[uuid:{1}]上为云主机[uuid:{2}]找到足够多满足规格[uuid:{0}]的MDEV设备

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:352
# args: msg.getMdevDeviceUuid()
cannot\ find\ mdev\ device[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到MDEV设备[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:555
# args: vo.getUuid(),vmUuid
mdev\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled\ for\ vm[uuid\:%s] = MDEV设备[uuid：{0}]不存在或已为VM[uuid：{1}]禁用

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:644
# args: msg.getVmInstanceUuid()
can\ not\ migrate\ vm[uuid\:%s]\ since\ mdev\ device\ attached = 无法迁移云主机[uuid:{0}]，因为它挂载了MDEV设备

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:673
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ mdev\ devices\ attached = 无法迁移跟云盘[uuid:{0}]，因为它所在云主机挂载了MDEV设备

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:688
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ mdev\ devices\ attached = 无法迁移云主机[uuid:{0}]，因为它挂载了MDEV设备

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceReserveFlow.java:129
# args: wrongStatusMdevUuids,vmUuid
mdev\ device[uuid\:%s]\ can\ not\ attach\ to\ vm[uuid\:%s]\ due\ to\ wrong\ status = 由于状态错误，MDEV设备[uuid：{0}]无法连接到VM[uuid：{1}]

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostAllocatorFlow.java:71
# args: String.format("maxInstancePerHost = %d", maxInstancePerHost)
No\ host\ with\ fewer\ than\ %s\ vms\ found = 找不到VM少于{0}的物理机

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:76
# args: HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
%s\ must\ be\ a\ number = {0}必须是一个数字

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:58
# args: HostAllocatorConstant.MAX_INSTANCE_PER_HOST_HOST_ALLOCATOR_STRATEGY_TYPE,HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
Select\ %s\ strategy,\ you\ must\ set\ %s = 选择策略{0}，你必须设置{1}

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MinimumMemoryUsageHostAllocatorStrategyFactory.java:58
# args: HostAllocatorSystemTags.MINIMUM_MEMORY_USAGE_HOST_ALLOCATOR_STRATEGY_MODE_TOKEN,modes
Incorrect\ %s\ settings,\ valid\ value\ is\ %s = 不正确的设置{0}，有效的值是{1}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:93
# args: 
default\ route\ network\ can\ not\ be\ changed\ when\ system\ policy\ route\ is\ enabled = 启用系统策略路由时，无法更改默认路由网络

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:382
# args: 
can\ not\ find\ related\ virtual\ router = 找不到相关的虚拟路由器

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:132
# args: msg.getL3Uuid()
l3[%s]\ already\ attached\ a\ policy\ route\ ruleSet = L3[{0}]已附加策略路由规则集

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:192
# args: msg.getvRouterUuid(),msg.getName()
VRouter[%s]\ already\ has\ a\ ruleSet\ named\ %s = VRouter[{0}]已具有名为{1}的规则集

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:283
# args: 
can\ not\ update\ system\ policy\ route\ set = 无法更新系统策略路由集

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:198
# args: msg.getDestinationCidr()
DestinationCidr\ must\ be\ in\ cidr\ format\ but\ found\ [%s] = DestinationCIDR必须为CIDR格式，但找到[{0}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:202
# args: msg.getNextHopIp()
NextHopIp\ must\ be\ in\ ipv4\ format\ but\ found\ [%s] = NextHopIP必须为IPv4格式，但找到[{0}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:278
# args: 
can\ not\ find\ related\ vRouter = 找不到相关的VRouter

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:288
# args: 
can\ not\ update\ system\ policy\ route\ table = 无法更新系统策略路由表

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:237
# args: ip
operation\ failure,\ ip\ format\ only\ supports\ ipv4/iprange/cidr,\ but\ find\ %s = 操作失败，IP格式仅支持IPv4/IPRange/CIDR，但找到{0}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:245
# args: protocol
illegal\ protocol\ type\ %s = 非法的协议类型{0}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:254
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
RuleSet[%s]\ already\ has\ a\ rule\ with\ rule\ number\ %s. = 规则集[{0}]已具有规则编号为{1}的规则。

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:310
# args: msg.getvRouterUuid(),msg.getNumber()
VRouter[%s]\ already\ has\ a\ policy\ route\ table\ [%s] = VRouter[{0}]已具有策略路由表[{1}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:387
# args: 
can\ not\ delete\ system\ policy\ route\ table = 无法删除系统策略路由表

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:371
# args: 
can\ not\ delete\ system\ policy\ route\ set = 无法删除系统策略路由集

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:360
# args: msg.getUuid()
ruleSet[%s]\ is\ still\ attached\ to\ nic = 规则集[{0}]仍连接到NIC

# at: src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java:958
# args: vrouterVmUuid
virtual\ router[uuid\:%s]\ can\ not\ find = 云路由[uuid:{0}]未找到

# at: src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java:963
# args: vo.getApplianceVmType()
can\ not\ find\ service\ factory\ for\ virtual\ router\ type[%s] = 未找到云路由类型为[{0}]的服务工厂

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:54
# args: msg.getMirrorNetworkUuid()
Invalid\ parameter\ [%s],\ make\ sure\ it's\ PortMirror\ Network = 参数[{0}]无效，请确保它是PortMirror网络

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:62
# args: msg.getMirrorNetworkUuid()
The\ network[%s]\ has\ been\ attached\ with\ a\ PortMirror\ service = 网络[{0}]已附加PortMirror服务

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:70
# args: msg.getUuid()
The\ PortMirror\ service[%s]\ has\ not\ been\ created = 尚未创建PortMirror服务[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:86
# args: msg.getSrcEndPoint(),msg.getDstEndPoint(),mirror.getUuid()
The\ nic[%s,\ %s]\ has\ been\ mirrored\ by\ service[%s] = NIC[{0}，{1}]已由服务[{2}]镜像

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:92
# args: msg.getSrcEndPoint(),mirror.getUuid()
The\ nic[%s]\ can't\ been\ mirrored\ for\ service[%s]\ using = 无法使用为服务[{1}]镜像NIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:109
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ doesn't\ support\ to\ mirror\ the\ nic[%s] = PortMirror服务不支持镜像网卡[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:114
# args: msg.getDstEndPoint()
The\ PortMirror\ service\ doesn't\ support\ the\ nic[%s]\ because\ of\ its\ hypervisor\ type = 由于其云主机监控程序类型，PortMirror服务不支持NIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:121
# args: msg.getDstEndPoint()
The\ PortMirror\ service\ can't\ mirror\ to\ the\ nic[%s]\ that\ is\ not\ a\ non-default\ interface\ of\ a\ vm = PortMirror服务无法镜像到不是VM的非默认接口的NIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:128
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ that\ is\ not\ an\ interface\ of\ any\ vm = PortMirror服务无法镜像不是任何VM接口的NIC[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:138
# args: msg.getSrcEndPoint(),msg.getDstEndPoint(),vo.getMirrorNetworkUuid()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ \ to\ nic[%s]\ because\ the\ mirror\ network[%s]\ can't\ setup\ the\ mirror\ tunnel = PortMirror服务无法将NIC[{0}]镜像到NIC[{1}]，因为镜像网络[{2}]无法设置镜像隧道

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:144
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ to\ itself = PortMirror服务无法将NIC[{0}]镜像到其自身

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:153
# args: 
The\ PortMirror\ service\ can't\ work\ at\ the\ nic\ with\ configured\ Qos = PortMirror服务无法在配置了QoS的NIC上工作

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:761
# args: sessionVO.getUuid(),errorCode.getDetails()
failed\ to\ delete\ portMirror\ session[%s]\ from\ hypervisor,\ detail\:\ %s = 无法从云主机监控程序中删除PortMirror会话[{0}]，详细信息：{1}

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:794
# args: sessionVO.getUuid(),errorCode.getDetails()
failed\ to\ release\ portMirror\ session[%s]\ from\ hypervisor,\ detail\:\ %s = 无法从云主机监控程序释放PortMirror会话[{0}]，详细信息：{1}

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:912
# args: vo.getUuid()
cannot\ find\ internal\ id\ of\ the\ session[uuid\:%s],\ are\ there\ too\ many\ sessions\ in\ a\ host??? = 找不到会话[uuid：{0}]的内部ID，物理机中是否有太多会话？？

# at: src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java:276
# args: cmsg.getResourceUuid()
resourceUuid[%s]\ is\ not\ a\ valid\ uuid.\ A\ valid\ uuid\ is\ a\ uuid(v4\ recommended)\ with\ '-'\ stripped.\ see\ http\://en.wikipedia.org/wiki/Universally_unique_identifier\ for\ format\ of\ uuid,\ the\ regular\ expression\ uses\ to\ validate\ a\ uuid\ is\ '[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}' = Resourceuuid[{0}]不是有效的uuid。有效的uuid是去除了“-”的uuid（建议使用v4）。a.请参阅http：//en.wikipediorg/wiki/Universally_unique_identifier for format of uuid，用于验证uuid的正则表达式是“[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9A-f）{3}[89ab][O-9A-F]{3}[O-9A-F]{12}”

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java:122
# args: method
non\ support\ method\:\ %s = 不支持方法：{0}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java:134
# args: statusCode,response.getStatusLine().getReasonPhrase()
http\ request\ error!\ status_code\:\ %s,\ error\:\ %s = HTTP请求错误！状态_代码：{0}，错误：{1}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDB.java:24
# args: r.getStderr()
sqlite3\ execute\ failed,\ because\:\ %s = SQLite3执行失败，因为：{0}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDashboard.java:34
# args: GrafanaDB.folderTitle
cannot\ find\ folder\:\ %s\ in\ dashboard = 在仪表板中找不到文件夹：{0}

# at: src/main/java/org/zstack/premium/externalservice/loki/LokiFactory.java:84
# args: src.getAbsolutePath(),dst.getAbsolutePath(),rst.getStderr()
cannot\ copy\ %s\ to\ %s,\ caused\:\ %s = 无法将{0}复制到{1}，原因：{2}

# at: src/main/java/org/zstack/premium/externalservice/loki/PromtailFactory.java:103
# args: 
ssh\ failed = SSH失败

# at: src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java:124
# args: v.getClass().getSimpleName(),k
unknown\ value\ type\ %s,\ key\ \=\ %s = 未知的值类型{0}，键={1}

# at: src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java:153
# args: 
failed\ to\ HTTP\ call\ all\ prometheus\ instances = 无法对所有Prometheus实例进行HTTP调用

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java:48
# args: rbacEntity.getApiMessage().getSession().getUserUuid()
the\ operation\ is\ not\ permitted\ by\ white\ list\ of\ virtual-id[uuid\:%s] = 无法操作，操作不存在用户[uuid:{0}]白名单中

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java:60
# args: rbacEntity.getApiMessage().getSession().getUserUuid()
the\ operation\ is\ denied\ by\ black\ list\ of\ virtual-id[uuid\:%s] = 无法操作，操作被用户[uuid:{0}]黑名单拒绝

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:199
# args: unmatchedApis,identity.toString()
action\:\ %s,\ is\ not\ supported\ for\ role\ identity\:\ %s = 角色标识{1}不支持操作{0}

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:372
# args: msg.getName()
%s\ is\ a\ reserved\ name,\ please\ use\ another\ name = {0}是保留名称，请使用其他名称

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:370
# args: 
the\ name\ of\ initial\ user\ can\ not\ be\ updated = 无法更新初始用户的名称

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:407
# args: 
cannot\ remove\ builtin\ system\ admin\ role\ from\ builtin\ system\ admin. = 无法从内置系统管理员中删除内置系统管理员角色。

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:405
# args: 
cannot\ remove\ builtin\ security\ admin\ role\ from\ builtin\ security\ admin. = 无法从内置安全管理员中删除内置安全管理员角色。

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:403
# args: 
cannot\ remove\ builtin\ audit\ admin\ role\ from\ builtin\ audit\ admin. = 无法从内置审核管理员中删除内置审核管理员角色。

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:417
# args: 
cannot\ delete\ builtin\ system\ admin. = 无法删除内置系统管理员。

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:415
# args: 
cannot\ delete\ builtin\ security\ admin. = 无法删除内置安全管理员。

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:413
# args: 
cannot\ delete\ builtin\ audit\ admin. = 无法删除内置审核管理员。

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:430
# args: 
Confirm\ the\ roles\ you\ want\ to\ add\ have\ same\ identity = 确认要添加的角色具有相同的身份

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:444
# args: msg.getRoleUuids(),identitySet,msg.getVirtualIDUuid()
Cannot\ add\ role\:\ %s\ with\ identity\:\ %s\ to\ virtualID[uuid\:%s] = 无法将标识为{1}的角色{0}添加到VirtualID[uuid：{2}]

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:456
# args: String.join(",", privilegeAdminUuids),msg.getProjectUuid()
can\ not\ add\ privilege\ admin[uuids\:%s]\ to\ project[uuid\:%s] = 无法将特殊管理员用户[uuids:{0}]加入到项目中去

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:432
# args: attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ no\ such\ field\ on\ inventory\ class[%s] = 条件名[{0}]非法，在清单类里面没有这个阈

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:437
# args: attr,attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ field[%s]\ of\ inventory[%s]\ is\ annotated\ as\ @Unqueryable\ field = 条件名[{0}]非法，清单[{2}]的值[{1}]不是被标记为@Unqueryable的值

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:448
# args: info.jpaMetaClass.getName(),attr
entity\ meta\ class[%s]\ has\ no\ field[%s] = 实体元类[{0}]中没有值[{1}]

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:1000
# args: f,info.inventoryClass.getSimpleName(),info.premitiveFieldNames
field[%s]\ is\ not\ a\ primitive\ of\ the\ inventory\ %s;\ you\ cannot\ specify\ it\ in\ the\ parameter\ 'fields';valid\ fields\ are\ %s = 值[{0}]不是清单{1}的原语；你不能在参数'域'中指定该参数；非法的域{2}

# at: src/main/java/org/zstack/query/QueryFacadeImpl.java:519
# args: 
filterName\ must\ be\ formatted\ as\ [filterType\:condition(s)] = FilterName的格式必须为[filterType：条件]

# at: src/main/java/org/zstack/query/QueryFacadeImpl.java:659
# args: JSONObjectUtil.toJsonString(cond)
'value'\ of\ query\ condition\ %s\ cannot\ be\ null = 查询条件中{0}的'值'不能为空

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:273
# args: typeByResourceUuids.toString()
resources\ has\ inconsistent\ resourceTypes.\ Details\:\ %s = 资源具有不一致的资源类型。详细信息：{0}

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:433
# args: resourceUuid
cannot\ find\ resource[uuid\:\ %s] = 找不到资源[uuid：{0}]

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:437
# args: globalConfig.getCategory(),globalConfig.getName(),resourceType
ResourceConfig\ [category\:%s,\ name\:%s]\ cannot\ bind\ to\ resourceType\:\ %s = ResourceConfig[类别：{0}，名称：{1}]无法绑定到资源类型：{2}

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:85
# args: msg.getCategory(),identity
no\ global\ config[category\:%s,\ name\:%s]\ found = 找不到全局配置[类别：{0}，名称：{1}]

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:91
# args: msg.getCategory(),identity
global\ config[category\:%s,\ name\:%s]\ cannot\ bind\ resource = 全局配置[类别：{0}，名称：{1}]无法绑定资源

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:114
# args: msg.getResourceUuid()
account\ has\ no\ access\ to\ the\ resource[uuid\:\ %s] = 账号没有访问资源[uuid:{0}]的权限

# at: src/main/java/org/zstack/rest/TypeVerifier.java:22
# args: f.getName(),source
[%s]\ field\ is\ excepted\ an\ int\ or\ long,\ but\ was\ [%s]. = [{0}] 属性期望是一个整数，但是得到的是 [{1}]

# at: src/main/java/org/zstack/rest/TypeVerifier.java:31
# args: f.getName(),source
Invalid\ value\ for\ boolean\ field\ [%s],\ [%s]\ is\ not\ a\ valid\ boolean\ string[true,\ false]. = boolean属性字段[{0}]无效，[{1}]不是一个有效的boolean字符串[true, false]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:141
# args: msg.getvRouterUuid()
All\ the\ networks\ should\ be\ in\ the\ virtual\ router[%s] = 所有网络都应位于虚拟路由器[{0}]中

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:69
# args: msg.getAreaId()
[%s]\ is\ not\ formatted\ as\ IPv4\ address = [{0}]的格式不是IPv4地址

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:108
# args: msg.getAreaAuth()
KeyID\ &\ password\ must\ be\ not\ null\ when\ authentication\ type\ is\ %s = 当身份验证类型为{0}时，密钥ID和密码不能为Null

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:114
# args: msg.getAreaAuth()
password\ must\ be\ not\ null\ when\ authentication\ type\ is\ %s = 当身份验证类型为{0}时，密码不能为null

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:118
# args: msg.getAreaAuth()
the\ length\ of\ password\ is\ at\ most\ than\ 8Bytes\ when\ authentication\ type\ is\ %s = 当身份验证类型为{0}时，密码长度不超过8个字节

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:127
# args: vo.getAreaId(),RouterAreaType.Standard.toString()
AreaId[%s]\ type\ must\ be\ %s = AreaID[{0}]类型必须为{1}

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:97
# args: msg.getAreaId()
AreaId[%s]\ has\ been\ created = 已创建Area ID[{0}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:158
# args: vo.getL3NetworkUuid(),haUuid
The\ network[%s]\ have\ been\ added\ into\ the\ haGroup[%s] = 网络[{0}]已添加到HAG组[{1}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:150
# args: vo.getL3NetworkUuid(),vo.getRouterAreaUuid()
The\ network[%s]\ have\ been\ added\ into\ the\ virtual\ routerArea[%s] = 网络[{0}]已添加到虚拟路由器区域[{1}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:181
# args: msg.getRouterId()
Router\ ID[%s]\ is\ not\ formatted\ as\ IPv4\ address = 路由器ID[{0}]的格式不是IPv4地址

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:193
# args: msg.getRouterId()
Router\ ID[%s]\ is\ not\ unique\ in\ this\ system = 路由器ID[{0}]在此系统中不唯一

# at: src/main/java/org/zstack/scheduler/AbstractSchedulerJob.java:235
# args: 
the\ last\ job\ is\ not\ completed.\ skip\ this\ job = 上一个作业未完成。跳过这份工作

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:189
# args: 
cron\ must\ be\ set\ when\ use\ cron\ scheduler = 当使用定时器任务时，必须设置cron

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:195
# args: 
cron\ task\ must\ follow\ format\ like\ this\ \:\ \"0\ 0/3\ 17-23\ *\ *\ ?\"\  = 定时器任务必须符合以下格式: \"0 0/3 17-23 * * ?\" 

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:198
# args: 
cron\ scheduler\ only\ need\ to\ specify\ cron\ task = 定时调度器（Cron Scheduler）仅需要指定定时任务（Cron Task）

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:207
# args: 
startTime\ out\ of\ range = 开始时间超出范围

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:203
# args: 
startTime\ must\ be\ positive\ integer\ or\ 0 = 开始时间必须是正整数或者0

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:184
# args: 
stopTime\ has\ been\ passed = 截止时间已经过去了

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:182
# args: 
stopTime\ out\ of\ mysql\ timestamp\ range = 定时任务停止时间超出mysql的timestamp的范围

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:180
# args: 
duration\ time\ out\ of\ range = 任务需要的时间超出范围

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:99
# args: 
interval\ must\ be\ set\ when\ use\ simple\ scheduler\ when\ repeat\ more\ than\ once = 当简单定时任务执行超过一次时，必须设置间隔时间

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:134
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ twice\ to\ the\ same\ trigger[uuid\:%s] = 不能两次添加任务[uuid:{0}]到相同的触发器[uuid:{1}]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:139
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ to\ a\ out\ of\ time\ trigger[uuid\:%s] = 不能添加任务[uuid:{0}]到一个已经过时的触发器[uuid:{1}]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:147
# args: count,msg.getSchedulerJobUuid()
There\ are\ [%d]\ triggers\ added\ to\ job[uuid\:%s],\ cannot\ add\ any\ more. = 有[{0}]个触发器已添加到作业[uuid：{1}]，无法再添加更多触发器。

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:162
# args: count,msg.getSchedulerJobGroupUuid()
There\ are\ [%d]\ triggers\ added\ to\ job\ group[uuid\:%s],\ cannot\ add\ any\ more. = 有[{0}]个触发器已添加到作业组[uuid：{1}]，无法添加更多触发器。

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:192
# args: 
invalid\ cron\ expression = 无效的cron表达式

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:172
# args: 
startTime\ must\ be\ set\ for\ simple\ scheduler = simple类型的定时任务必须设置开始时间[startTime]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:176
# args: 
schedulerInterval\ must\ be\ set\ for\ simple\ scheduler = simple类型的定时任务必须设置执行间隔[schedulerInterval]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:226
# args: msg.getType()
No\ SchedulerJobFactory\ of\ type[%s]\ found = 未找到类型为[{0}]的SchedulerJobFactory

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:253
# args: n
%d\ jobs\ have\ different\ job\ type\ with\ job\ group = {0}个作业的作业类型与作业组不同

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:262
# args: count,limit - count
job\ group\ has\ contained\ %d\ job,\ only\ %d\ seats\ left = 作业组已包含{0}个作业，只剩下{1}个席位

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:794
# args: timeUnitInStr
invalid\ time\ unit\:\ %s = 无效时间单位：{0}

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:921
# args: jobUuid,e.getMessage()
trigger\ job[uuid\:\ %s]\ failed,\ because\ %s = 触发器作业[uuid：{0}]失败，原因是{1}

# at: src/main/java/org/zstack/scheduler/SchedulerJobParamCascadeUpdater.java:86
# args: field.getName()
field[%s]\ cannot\ be\ empty = 字段[{0}]不能为空

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:54
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ is\ not\ available.\ check\ if\ the\ volume\ exists. = 卷[{0}]不可用。检查卷是否存在。

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:58
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ is\ not\ root\ volume = 卷[{0}]不是根卷

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:63
# args: msg.getTargetResourceUuid()
the\ vm\ of\ the\ root\ volume[%s]\ is\ not\ available.\ check\ if\ the\ vm\ exists. = 根卷[{0}]的VM不可用。检查云主机是否存在。

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:70
# args: 
The\ primary\ storage\ of\ volumes\ don\ not\ support\ create\ volume\ snapshot\ group\ job. = 卷的主存储不支持创建卷快照组作业。

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:77
# args: msg.getParameters().get(SchedulerJobParameters.snapshotGroupMax),e.getMessage()
snapshotGroupMaxNumber\ \:\ %s\ format\ error\ because\ %s = SnapshotGroupMaxNumber：{0}格式错误，原因是{1}

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java:58
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ does\ not\ support\ snapshots\ retention = 卷[{0}]不支持快照保留

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java:70
# args: msg.getParameters().get(SchedulerJobParameters.snapshotMax),e.getMessage()
snapshotMaxNumber\ \:\ %s\ format\ error\ because\ %s = snapshotMaxNumber : {0} 转换类型失败，因为{1}

# at: src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java:125
# args: getTargetResourceUuid()
the\ vm\ of\ the\ root\ volume[%s]\ state\ in\ Destroyed.\ job\ state\ change\ is\ not\ allowed = 根卷[{0}]的VM处于已销毁状态。不允许更改作业状态

# at: src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java:189
# args: 
The\ primary\ storage\ of\ volumes\ don\ not\ support\ create\ volume\ snapshot\ group\ job = 卷的主存储不支持创建卷快照组作业

# at: src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java:83
# args: getTargetResourceUuid()
vm[uuid\:%s]\ is\ destroyed,\ state\ change\ is\ not\ allowed = VM[uuid：{0}]已销毁，不允许更改状态

# at: src/main/java/org/zstack/sdnController/SdnControllerApiInterceptor.java:75
# args: msg.getVendorType(),SdnControllerType.getAllTypeNames()
Sdn\ controller\ type\:\ %s\ in\ not\ in\ the\ supported\ list\:\ %s\  = SDN控制器类型：{0}不在支持的列表中：{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:102
# args: msg.getL2NetworkUuid()
unable\ create\ vni\ range,\ because\ l2\ uuid[%s]\ is\ not\ vxlan\ network\ pool = 无法创建VNI范围，因为L2 uuid[{0}]不是VXLAN网络池

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:117
# args: msg.getStartVni(),msg.getEndVni()
the\ vni\ range\:[%s.%s}\ is\ illegal,\ because\ h3c's\ controller\ uses\ vni\ as\ vlan\ id = VNI范围[{0}.{1}}非法，因为H3C的控制器使用VNI作为VLAN ID

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:132
# args: userVniRange.startVni,userVniRange.endVni
the\ vni\ range\:[%s.%s}\ is\ illegal,\ must\ covered\ by\ a\ sdn's\ vniRange = VNI范围[{0}.{1}}非法，必须由SDN的VNI范围覆盖

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:178
# args: 
H3C\ VCFC\ controller\ must\ include\ systemTags\ vdsUuid\:\:{%s} = H3C VCFC控制器必须包含系统标签VDSuuid：:'{{0}'}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:116
# args: self.getIp(),e.getLocalizedMessage()
get\ sdn\ controller\ [ip\:%s]\ vni\ range\ failed\ because\ %s = 获取SDN控制器[IP：{0}]VNI范围失败，原因是{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:86
# args: self.getIp()
get\ vni\ range\ on\ sdn\ controller\ [ip\:%s]\ failed = 在SDN控制器[IP：{0}]上获取VNI范围失败

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:148
# args: self.getIp()
there\ is\ no\ vni\ range\ on\ sdn\ controller\ [ip\:%s] = SDN控制器[IP：{0}]上没有VNI范围

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:154
# args: self.getIp()
there\ is\ no\ default\ tenant\ on\ sdn\ controller\ [ip\:%s] = SDN控制器[IP：{0}]上没有默认租户

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:299
# args: self.getIp(),e.getMessage()
create\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = 在SDN控制器[IP：{0}]上创建VXLAN网络失败，原因是{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:283
# args: self.getIp()
create\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed = 在SDN控制器[IP：{0}]上创建VXLAN网络失败

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:383
# args: self.getIp(),e.getMessage()
delete\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = 删除SDN控制器[IP：{0}]上的VXLAN网络失败，原因是{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:377
# args: self.getIp()
delete\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed = 删除SDN控制器[IP：{0}]上的VXLAN网络失败

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:468
# args: self.getIp(),e.getMessage()
get\ token\ of\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = 获取SDN控制器[IP：{0}]的令牌失败，原因是{1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:439
# args: self.getIp()
get\ leader\ of\ sdn\ controller\ [ip\:%s]\ failed = 获取SDN控制器[IP：{0}]的领导者失败

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:460
# args: self.getIp()
get\ token\ of\ sdn\ controller\ [ip\:%s]\ failed = 获取SDN控制器[IP：{0}]的令牌失败

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetwork.java:51
# args: vo.getPoolUuid()
there\ is\ no\ sdn\ controller\ for\ vxlan\ pool\ [uuid\:%s] = VXLAN池[uuid：{0}]没有SDN控制器

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkFactory.java:410
# args: inv.getUuid(),destHostUuid
cannot\ configure\ hardware\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = 无法为目标物理机[uuid：{1}]上的VM[uuid：{0}]配置硬件VXLAN网络

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:150
# args: msg.getPhysicalInterface()
cannot\ create\ vlan-device\ on\ %s\ because\ it's\ too\ long = 无法在{0}上创建VLAN设备，因为它太长

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:112
# args: 
hardware\ vxlan\ network\ pool\ doesn't\ support\ create\ l3\ network = 硬件VXLAN网络池不支持创建三层网络

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:118
# args: 
hardware\ vxlan\ network\ pool\ must\ configure\ the\ physical\ interface = 硬件VXLAN网络池必须配置物理接口

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:126
# args: 
ONLY\ hardware\ vxlan\ network\ can\ be\ created\ in\ hardware\ vxlan\ pool = 在硬件VXLAN池中只能创建硬件VXLAN网络

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:131
# args: 
hardware\ vxlan\ network\ can\ ONLY\ be\ created\ in\ hardware\ vxlan\ pool = 硬件VXLAN网络只能在硬件VXLAN池中创建

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java:86
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),finalVlanId,hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ hardwareVxlan[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = 无法在KVM物理机[uuid：{4}]上为HardwareVXLAN[uuid：{1}，类型：{2}，VLAN：{3}]创建网桥[{0}]，因为{5}

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java:144
# args: cmd.getBridgeName(),vxlan.getUuid(),vxlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ hardwareVxlan[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = 无法在KVM物理机[uuid：{3}]上检查硬件VXLAN[uuid：{1}，名称：{2}]的网桥[{0}]，{4}

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanPoolNetworkBackend.java:64
# args: l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ physical\ interface\ for\ HardwareVxlanPool[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = 无法检查KVM物理机[uuid：{2}]上的硬件vxlanpool[uuid：{0}，名称：{1}]的物理接口，{3}

# at: src/main/java/org/zstack/simulator/SimulatorHost.java:92
# args: 
set\ to\ disconnected = 设置为断开连接

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:97
# args: number
invalid\ phone\ number[%s],\ sms\ number\ is\ like\ +86-18654321234 = 电话号码[{0}]无效，短信号码类似于+86-18654321234

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:64
# args: msg.getApplicationEndpointUuid()
can\ not\ add\ same\ email\ address\ to\ endpoint[uuid\:%s] = 无法将同一电子邮件地址添加到终结点[uuid：{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:165
# args: errorEmails
invalid\ email\ address[%s] = 无效的email地址[{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:77
# args: msg.getEmailAddress(),msg.getApplicationEndpointUuid()
cannot\ update\ email\ address\ to\ %s,\ which\ is\ already\ exists\ in\ endpoint[uuid\:%s] = 无法将电子邮件地址更新为{0}，该地址已存在于终结点[uuid：{1}]中

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:91
# args: msg.getPhoneNumber()
phone\ number\ [%s]\ already\ exists = 电话号码[{0}]已存在

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:106
# args: msg.getPhoneNumber()
phone\ number[%s]\ already\ exists = 手机号码[{0}]已存在

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:115
# args: url
invalid\ url[%s] = 无效的url[{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:121
# args: host
[%s]\ is\ not\ a\ legal\ ip = [{0}]不是合法的IP

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:127
# args: n
invalid\ phone\ number[%s],\ the\ DingDing\ phone\ number\ is\ like\ +86-12388889999 = 无效的手机号码[{0}], 钉钉手机号码格式应当为 +86-12388889999

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:144
# args: 
username\ and\ password\ must\ either\ absent\ at\ all\ or\ present\ with\ each\ other = 用户名和密码要么同时为空要么同时不为空

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:152
# args: 
can\ not\ create\ sns\ email\ endpoint\ without\ any\ email\ address = 无法在没有任何电子邮件地址的情况下创建SNS电子邮件端点

# at: src/main/java/org/zstack/sns/SNSApplicationPlatformBase.java:118
# args: 
the\ operation\ is\ not\ permitted\ for\ the\ system\ application\ platform = 禁止对该应用平台进行当前操作

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:67
# args: msg.getTopicUuid()
cannot\ find\ the\ SNSTopic[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到SNS主题[uuid:{0}], 它可能已经被删除

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:85
# args: msg.getApplicationPlatformUuid()
cannot\ find\ SNSApplicationPlatform[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到SNS应用平台[uuid:{0}], 它可能已经被删除

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:95
# args: msg.getApplicationEndpointUuid()
cannot\ find\ SNSApplicationEndpoint[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到SNS应用接收终端[uuid:{0}], 它可能已经被删除

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:128
# args: 
the\ topic\ is\ not\ subscribed\ by\ any\ endpoints = 当前主题并未被任何应用终端订阅

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:154
# args: 
application\ platform\ is\ disabled = 应用平台被不可用

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:224
# args: 
application\ endpoint\ is\ disabled = 应用接收端被禁用

# at: src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsApiInterceptor.java:44
# args: msg.getAccessKeyUuid()
Aliyun\ account[uuid\:%s]\ not\ exists = 阿里云账号[uuid：{0}]不存在

# at: src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsEndpoint.java:83
# args: SysErrors.RESOURCE_NOT_FOUND
Aliyun\ sms\ event\ text\ template\ not\ found. = 未找到阿里云短信事件文本模板。

# at: src/main/java/org/zstack/sns/platform/dingtalk/SNSDingTalkEndpoint.java:130
# args: rsp.getStatusCode(),rsp.getBody()
failed\ to\ send\ messages\ to\ DingTalk.\ status\:\ %s,\ body\:\ %s = 向DingTalk发送消息失败。状态：{0}，正文：{1}

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:72
# args: getSelf().getSmtpServer(),getSelf().getSmtpPort()
cannot\ connect\ SMTP\ server[server\:\ %s,\ port\:\ %s]\ in\ 15\ seconds = 在15秒内无法连接到SMTP服务器[server: {0}, port: {1}]

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:88
# args: e.getMessage()
SMTP\ server\ validation\ error\:\ %s = SMTP服务器验证错误: {0}

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:130
# args: 
the\ endpoint\ is\ disabled = 通知终端不可用

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:158
# args: 
no\ subject = 没有主题

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:66
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ email\ permission\ denied = 导致操作失败的原因可能是不正确的用户名、密码或邮件访问权限不足

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:68
# args: smtpServer,smtpPort
Couldn't\ connect\ to\ host,\ port\:\ %s,\ %d.\ The\ problem\ may\ be\ caused\ by\ an\ incorrect\ smtpServer\ or\ smtpPort = 连接{0}:{1}超时，导致原因可能是不正确的邮件服务器和邮件服务器端口

# at: src/main/java/org/zstack/sns/platform/http/SNSHttpEndpoint.java:67
# args: rsp.getStatusCode(),rsp.getBody()
HTTP\ POST\ failure.\ status\:\ %s,\ body\:\ %s = HTTP POST失败，状态码: {0}, body: {1}

# at: src/main/java/org/zstack/sns/platform/microsoftteams/SNSMicrosoftTeamsEndpoint.java:69
# args: rsp.getStatusCode(),rsp.getBody()
failed\ to\ send\ messages\ to\ Microsoft\ Teams.\ status\:\ %s,\ body\:\ %s = 未能将消息发送到Microsoft Teams。状态：{0}，正文：{1}

# at: src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:172
# args: endpoint.getType()
only\ HTTP\ endpoint\ can\ subscribe\ API\ topic,\ the\ endpoint[type\:%s]\ is\ not\ a\ HTTP\ endpoint = 仅HTTP通知终端可以订阅API通知主题，当前通知终端[type:{0}]不是一个HTTP通知终端

# at: src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:191
# args: 
API\ topic\ cannot\ be\ deleted = API通知主题无法被删除

# at: src/main/java/org/zstack/sns/system/SNSSystemAlarmTopicManagerImpl.java:78
# args: 
system\ alarm\ topic\ cannot\ be\ deleted = 系统警报通知主题不能被删除

# at: src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java:53
# args: 
url\ is\ error,\ clientUuid\ is\ miss = URL错误，缺少Clientuuid

# at: src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java:58
# args: 
\ missing\ cas\ client,\ please\ create\ cas\ client\ before\ sso = 缺少CAS客户端，请在SSO之前创建CAS客户端

# at: src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java:62
# args: login.getClass().getName(),old.getClass().getName(),login.getLoginType()
duplicate\ casLogin[%s,\ %s]\ for\ type[%s] = 类型[{2}]的CASLogin[{0}，{1}]重复

# at: src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java:73
# args: type
Cannot\ find\ CasLogin\ for\ type(%s) = 找不到类型（{0}）的CASlogin

# at: src/main/java/org/zstack/sso/cas/service/CasLoginIAM2.java:67
# args: userName
iam2\ has\ a\ user\ with\ the\ same\ name[%s] = IAM2具有同名[{0}]的用户

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM1.java:71
# args: userName
\ local\ user\ has\ a\ user\ with\ the\ same\ name[%s] = 本地用户具有同名[{0}]的用户

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:57
# args: ssoUseAsLoginName
fail\ to\ get\ params[%s] = 无法获取参数[{0}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:61
# args: 
get\ user\ name\ is\ null = 获取用户名为空

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:66
# args: userName
\ iam2\ has\ a\ user\ with\ the\ same\ name[%s] = IAM2具有同名[{0}]的用户

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:375
# args: rsp.getStatusCode(),rsp.getBody()
HTTP\ ERROR,\ status\ code\:\ %s,\ body\:\ %s = HTTP错误，状态代码：{0}，正文：{1}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:382
# args: HttpMethod.POST,url,e.getStatusCode(),e.getResponseBodyAsString()
failed\ to\ %s\ to\ %s,\ status\ code\:\ %s,\ response\ body\:\ %s = 访问{1}时执行{0}方法失败，状态码: {2}，响应体: {3}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:386
# args: HttpMethod.POST,url,e.getMessage()
failed\ to\ %s\ to\ %s,\ IO\ Error\:\ %s = 访问{1}时执行{0}方法失败，IO错误: {2}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:201
# args: e
response\ has\ error\ \:\ %s = 响应出现错误：{0}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:101
# args: login.getClass().getName(),old.getClass().getName(),login.getLoginType()
duplicate\ OAuth2Login[%s,\ %s]\ for\ type[%s] = 类型[{2}]的重复OAuth2Login[{0}，{1}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:113
# args: type
Cannot\ find\ OAuth2Login\ for\ type(%s) = 找不到类型（{0}）的OAuth2Login

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:190
# args: 
there\ was\ an\ error,\ reason\:\ \ token\ response\ is\ null = 出现错误，原因：令牌响应为空

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:194
# args: AuthGolabalProperty.OAUTH2_GET_TOKEN_USERINFO
there\ was\ an\ error,\ reason\:\ \ %s\ is\ null = 出现错误，原因：{0}为空

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:300
# args: e
get\ code\ response\ has\ error\ \:\ %s = 获取代码响应出现错误：{0}

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:65
# args: name
%s\ should\ not\ be\ null = {0} 不能为空

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:88
# args: 
zoneUuids,\ backupStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, backupStorageUuids 至少有一个不为空，或者all被设置为真 

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:118
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ zone[uuid\:%s] = 镜像服务器[uuid:{0}]没有被加载到zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:127
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ been\ attached\ to\ zone[uuid\:%s] = 镜像服务器[uuid:{0}]已经被加载到zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:148
# args: url,e.toString()
failed\ to\ get\ header\ of\ image\ url\ %s\:\ %s = 获取链接 {0} 的Header信息失败，原因：{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:152
# args: url
failed\ to\ get\ header\ of\ image\ url\ %s = 获取链接 {0} 的Header信息失败

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:175
# args: self.getUuid(),self.getName(),url,size,self.getAvailableCapacity()
the\ backup\ storage[uuid\:%s,\ name\:%s]\ has\ not\ enough\ capacity\ to\ download\ the\ image[%s].Required\ size\:%s,\ available\ size\:%s = 镜像服务器[uuid:{0}, name:{1}]没有足够的容量可供下载镜像[{2}]。需要的大小: {3}，可用的大小: {4}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:172
# args: url,size
the\ image\ size\ get\ from\ url\ %s\ is\ %d\ bytes,\ it's\ too\ small\ for\ an\ image,\ please\ check\ the\ url\ again. = 从链接 {0} 获取到的镜像大小为{1}字节，对一个正常的镜像来说太小了，请检查该链接是否合法

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:190
# args: msg.getClass().getName(),self.getStatus()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ status\ is\ %s = 镜像服务器无法处理消息[{0}]因为它的状态为{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:196
# args: msg.getClass().getName(),self.getState()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ state\ is\ %s = 镜像服务器无法处理消息[{0}]因为它的状态为{1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java:139
# args: size,backupStorageUuid,capacityVO.getAvailableCapacity()
cannot\ reserve\ %s\ on\ the\ backup\ storage[uuid\:%s],\ it\ only\ has\ %s\ available = 无法在镜像服务器{1}保留{0}，它仅有{2}可用容量

# at: src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:276
# args: 
capacity\ reservation\ on\ all\ backup\ storage\ failed = 在所有镜像服务器上保留容量失败

# at: src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:320
# args: backupStorageDataNetworkTags.size()
only\ one\ backup\ storage\ data\ network\ system\ tag\ is\ allowed,\ but\ %s\ got = 只允许一个备份存储数据网络系统标记，但{0}已获得

# at: src/main/java/org/zstack/storage/backup/BackupStoragePrimaryStorageAllocatorFlow.java:46
# args: spec.getRequiredPrimaryStorageUuid(),psTypeName
required\ primary\ storage[uuid\:%s,\ type\:%s]\ could\ not\ support\ any\ backup\ storage. = 所需的主存储[uuid：{0}，类型：{1}]无法支持任何备份存储。

# at: src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java:55
# args: spec.getSize()
after\ subtracting\ reserved\ capacity,\ no\ backup\ storage\ has\ required\ capacity[%s\ bytes] = 减去保留容量后，没有备份存储具有所需容量[{0}字节]

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:328
# args: 
missing\ 'retentionType'\ in\ job\ parameters = parameters中缺少retentionType参数

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:332
# args: 
missing\ 'retentionValue'\ in\ job\ parameters = parameter中缺少retentionValue参数

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:336
# args: 
missing\ 'backupStorageUuids'\ in\ job\ parameters = parameter中缺少backupStorageUuids参数

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:340
# args: 
job\ parameter\ 'backupStorageUuids'\ is\ empty = parameter中backupStorageUuids为空

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:345
# args: bsUuid
unexpected\ backup\ storage\ uuid\:\ %s = 错误的镜像服务器uuid: {0}

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:354
# args: 
missing\ 'remoteRetentionValue'\ in\ job\ parameters = 作业参数中缺少“ RemoteRetentionValue ”

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:352
# args: 
missing\ 'remoteRetentionType'\ in\ job\ parameters = 作业参数中缺少“ RemoteRetentionType ”

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:84
# args: 
No\ available\ backup\ storage\ found,\ skip\ this\ job = 找不到可用的备份存储，请跳过此作业

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:578
# args: getTargetResourceUuid()
volume[uuid\:%s]\ is\ deleted,\ state\ change\ is\ not\ allowed = 卷[uuid：{0}]已删除，不允许更改状态

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:137
# args: 
bandWidth\ must\ be\ a\ positive\ number = 带宽必须为正数

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:217
# args: 
missing\ job\ parameters = 缺少parameters参数

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:93
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ not\ been\ exported\ from\ backupStorage[uuid\:%s] = 数据库备份[uuid{0}]尚未从备份存储[uuid：{1}]中导出

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:107
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ been\ exported\ from\ backupStorage[uuid\:%s] = 数据库备份[uuid{0}]已从备份存储[uuid：{1}]中导出

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:120
# args: 
do\ not\ allow\ cover\ database\ from\ backup = 不允许从备份中覆盖数据库

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:124
# args: 
installPath\ and\ bsUrl\ are\ both\ need = InstallPath和BSURL都是必需

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:133
# args: 
databaseBackup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = DatabaseBackup[uuid：{0}]未启用且未就绪

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:142
# args: url
illegal\ url[%s],\ correct\ example\ is\ ssh\://username\:password@hostname[\:sshPort]/path = 非法URL[{0}]，正确示例为SSH：//username：password@hostname[：sshport]/path

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:80
# args: self.getUuid()
database\ backup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = 数据库备份[uuid：{0}]未启用且未就绪

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:328
# args: msg.getDatabaseBackupUuid(),msg.getSrcBackupStorageUuid()
database\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = 未在备份存储[uuid：{1}]中找到数据库备份[uuid：{0}]

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:91
# args: msg.getDatabaseBackupUuid()
database\ backup\ [uuid\:%s]\ is\ not\ existed\ yet = 数据库备份[uuid：{0}]尚不存在

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:107
# args: 
backup\ storage[uuid\:%s]\ is\ not\ enabled\ and\ connected = 备份存储[uuid：{0}]未启用和连接

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:603
# args: result.getStderr()
not\ pass\ the\ restore\ security\ check\:\n%s = 未通过还原安全检查：\n{0}

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:615
# args: 
cannot\ get\ free\ port\ to\ listen = 无法获取空闲端口以进行侦听

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:643
# args: version,dbf.getDbVersion()
database\ backup\ version[%s]\ is\ not\ match\ currently\ version[%s] = 数据库备份版本[{0}]与当前版本[{1}]不匹配

# at: src/main/java/org/zstack/storage/backup/MultiDatabaseRecoverChecker.java:26
# args: 
cannot\ ssh\ peer\ node\ via\ sshkey,\ please\ check\ connection = 无法通过SSHKEY进行SSH对等节点，请检查连接

# at: src/main/java/org/zstack/storage/backup/SingleDatabaseRecoverChecker.java:19
# args: 
please\ stop\ other\ node\ first! = 请先停止其他节点！

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:355
# args: 
could\ not\ create\ vm,\ because\ at\ least\ one\ of\ field\ (l3NetworkUuids,zoneUuid,clusterUuid,hostUuid)\ should\ be\ set = 无法创建VM，因为至少应设置字段（l3NetworkUuids、zoneUuid、clusterUuid、hostUuid）中的一个

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:91
# args: currentState,msgName,checker.getStatesForOperation(msgName)
current\ backup\ storage\ state[%s]\ doesn't\ allow\ to\ proceed\ message[%s],\ allowed\ states\ are\ %s = 当前镜像服务器状态[{0}]不能处理消息[{1}]，仅当镜像服务器处于{2}时才能处理该消息

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:231
# args: bsType,bsUuid
Unexpected\ backup\ storage[type\:%s,uuid\:%s] = 错误的镜像服务器[type:{0}, uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:252
# args: msg.getVolumeUuid()
Can\ not\ create\ volume\ backup\ for\ shareable\ volume[uuid\:%s] = 无法给共享云盘[uuid:{0}]创建云盘备份

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:256
# args: msg.getVolumeUuid()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ it\ is\ not\ attached\ to\ any\ vm = 无法给云盘[uuid:{0}]创建云盘备份，因为它未加载到云主机上

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:265
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ its\ attached\ volume\ is\ not\ in\ state[%s,\ %s] = 无法给云盘[uuid:{0}]创建云盘备份，因为加载到的云主机并不处于以下状态[{1}, {2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:262
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ the\ vm\ is\ not\ in\ state[%s,\ %s] = 无法给云盘[uuid:{0}]创建云盘备份，因为加载到的云主机并不处于以下状态[{1}, {2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:292
# args: msg.getVolumeUuid()
The\ resource[uuid\:\ %s]\ has\ already\ created\ a\ cdp\ task,\ cannot\ create\ the\ backup\ job\ at\ the\ same\ time. = 资源[uuid：{0}]已创建CDP任务，无法同时创建备份作业。

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:280
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ root\ volume = 卷[uuid：{0}]不是根卷

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:287
# args: t.get(0),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ backups\ for\ VM[uuid\:%s],\ because\ it\ is\ not\ in\ state[%s,\ %s] = 无法为VM[uuid：{0}]创建备份，因为它未处于状态[{1}，{2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:305
# args: groupUuid
No\ volume\ backup\ found\ for\ group\ uuid\:\ %s = 未找到组uuid为{0}的卷备份

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:311
# args: groupUuid
root\ volume\ backup\ of\ group[uuid\:%s]\ not\ found = 未找到组[uuid：{0}]的根卷备份

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:315
# args: expectVmUuid,rootVolumeInfo.get(0),rootVolumeInfo.get(1)
Current\ vm[uuid\:\ %s]\ of\ the\ volume[uuid\:\ %s]\ is\ no\ longer\ the\ vm[uuid\:\ %s]\ that\ was\ used\ for\ backup = 卷[uuid：{1}]的当前云主机[uuid：{0}]不再是用于备份的云主机[UuId：{2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:348
# args: 
cannot\ specify\ primary\ storage\ which\ attached\ different\ cluster. = 无法指定连接到其他群集的主存储。

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:378
# args: backupUuid,state
volume\ backup[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = 云盘备份[uuid:{0}]处于{1}状态，无法用于恢复云盘

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:388
# args: backupUuid
original\ volume\ for\ backup[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = 云盘备份[uuid:{0}]已经被删除，无法用于恢复云盘

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:392
# args: volUuid,backupUuid,expectVmUuid
original\ volume[uuid\:%s]\ for\ backup[uuid\:%s]\ is\ no\ longer\ attached\ to\ vm[uuid\:%s] = 原始卷[uuid：{0}]（用于备份[uuid：{1}]）不再连接到云主机[uuid：{2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:402
# args: backupUuid
VM\ not\ found\ with\ volume\ backup[uuid\:%s] = 找不到和云盘备份[uuid:{0}]对应的云主机

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:406
# args: vmState
VM\ is\ not\ in\ stopped\ state\:\ %s = 当前云主机状态并不是停止状态：{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:423
# args: 
No\ available\ backup\ storage\ found = 没有可用的镜像服务器

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:518
# args: 
The\ vm\ is\ creating\ a\ backup\ job,\ cannot\ enable\ the\ cdp\ task\ at\ the\ same\ time. = 云主机正在创建备份作业，无法同时启用CDP任务。

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:191
# args: 
Operation\ not\ supported\ on\ shared\ volume = 共享云盘不支持该操作

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:196
# args: volumeVO.getUuid()
No\ VM\ found\ for\ volume[uuid\:%s] = 找不到和云盘[uuid:{0}]对应的云主机

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:380
# args: msg.getRootVolumeUuid()
No\ VM\ found\ with\ root\ volume\ uuid\:\ %s = 找不到根卷uuid为{0}的云主机

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1974
# args: cidr,fmtCidr
[%s]\ is\ not\ a\ standard\ cidr,\ do\ you\ mean\ [%s]? = [{0}]不是一个标准的cidr, 是否指定的是[{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1320
# args: msg.getDstBackupStorageUuid(),msg.getSrcBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuids\:\ %s,\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = 镜像服务器[uuid: {0}]处于状态{1}, 无法执行同步操作

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:992
# args: 
sync\ task\ failed. = 同步失败

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:999
# args: reply.getStatus()
unexpected\ task\ status\:\ %s = 错误的任务状态{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:293
# args: vos.stream().filter( vo -> !succeedUuids.contains(vo.getUuid())).map(VolumeBackupVO::getUuid).collect(Collectors.toList())
failed\ to\ create\ image\ from\ backup\ %s = 无法从备份{0}创建镜像

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:498
# args: msg.getImageStoreUuid(),e.getMessage()
sync\ volume\ backup\ metadata\ file\ in\ image\ store[uuid\:%s]\ meet\ I/O\ error\:\ %s = 同步卷备份元数据文件（位于镜像存储[uuid：{0}]中）遇到I/O错误：{1}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:535
# args: volumeVmUuid,backupUuid,backupVmUuid
Current\ vm[uuid\:\ %s]\ of\ the\ backup\ volume\ is\ no\ longer\ the\ vm[uuid\:\ %s]\ that\ was\ used\ for\ backup = 备份卷的当前云主机[uuid：{0}]不再是用于备份的云主机[uuid：{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:544
# args: hypervisorType
No\ VolumeBackupFactory\ of\ type[%s]\ found = 未找到类型为[{0}]的VolumeBackupFactory

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:561
# args: msg.getBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuid\:\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = 镜像服务器[uuid: {0}]处于状态{1}, 无法执行同步操作

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:738
# args: struct.getBackupUuid(),struct.getBackupStorageUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ backup\ storage[uuid\:%s] = 在镜像服务器[uuid:{1}]上找不到云盘备份[uuid:{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1187
# args: backupUuid,srcBackupStorageUuid
volume\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = 在镜像服务器[uuid:{1}]上找不到云盘备份[uuid:{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1399
# args: groupUuid
No\ volume\ backups\ found\ with\ group\ uuid\:\ %s = 未找到组uuid为{0}的卷备份

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1406
# args: groupUuid
Root\ volume\ missing\ within\ group\ uuid\:\ %s = 组uuid中缺少根卷：{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1412
# args: groupUuid
Multiple\ root\ volumes\ found\ within\ group\ uuid\:\ %s = 在组uuid中找到多个根卷：{0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1424
# args: groupUuid
No\ permission\ to\ volume\ backups\ within\ group\ uuid\:\ %s = 对组uuid{0}中的卷备份没有权限

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1564
# args: vo.getUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ any\ backup\ storage = 未在任何备份存储上找到卷备份[uuid：{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2001
# args: degree
degree\ [%s]\ should\ be\ a\ positive\ number = 度[{0}]应为正数

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2035
# args: type
invalid\ type[%s],\ should\ be\ [nfs,\ sshfs,\ nbd] = 类型[{0}]无效，应为[NFS，sshfs，NBD]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2045
# args: url
invalid\ url[%s],\ should\ be\ hostname\:/path = URL[{0}]无效，应为hostname：/path

# at: src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java:177
# args: inv.getUuid(),e.getMessage()
generate\ volume\ backup\ metadata\ file\ on\ image\ store[uuid\:%s]\ failure,\ because\ IO\ error\:\ %s = 在镜像存储[uuid：{0}]上生成卷备份元数据文件失败，因为IO错误：{1}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java:505
# args: rsp.getError()
volume\ backup\ metadata\ operation\ failure,\ because\ %s = 卷备份元数据操作失败，原因是{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:586
# args: cmd.imgurl,cmd.uuid,ret.getError()
failed\ to\ download\ image[url\:\ %s]\ on\ backup\ storage[uuid\:\ %s],\ because\:\ %s = 无法下载镜像[URL：{0}]（在备份存储[uuid：{1}]上），原因是：{2}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:277
# args: url,rsp.getError()
unable\ to\ connect\ to\ SimpleHttpBackupStorage[url\:%s],\ because\ %s = 无法连接到SimpleHttpBackupStorage[url:{0}]，因为{1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:507
# args: iinv.getName()
Missing\ cert\ file\ for\ downloading\ image\:\ %s = 下载镜像时证书文件丢失

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:831
# args: 
No\ response = 无响应

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:907
# args: ret.getError()
reclaim\ imagestore\ error,\ because\:%s = 收回imagestore错误，因为{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:994
# args: self.getUuid(),ret.getError()
failed\ to\ set\ max\ capacity\ on\ image\ store[uuid\:%s],\ because\:\ %s = 无法设置镜像存储[uuid：{0}]的最大容量，因为：{1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1223
# args: msg.getImageUuid(),self.getUuid()
image[%s]\ not\ found\ on\ backup\ storage[%s] = 在备份存储[{1}]上找不到镜像[{0}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1134
# args: ret.getError()
failed\ to\ delete\ image\ package,\ because\:\ %s = 无法删除镜像包，因为：{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1158
# args: StringUtils.join(notOnBsImageUuids, ','),msg.getBackupStorageUuid()
some\ images\ [%s]\ are\ not\ exported\ on\ the\ backup\ storage[uuid\:\ %s] = 某些镜像[{0}]未在备份存储[uuid：{1}]上导出

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1192
# args: ret.getError()
failed\ to\ package\ exported\ images,\ because\ %s = 无法打包导出的镜像，因为{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1234
# args: self.getUuid(),actualSize
the\ backup\ storage[uuid\:%s]\ has\ not\ enough\ capacity[%s]\ to\ export = 备份存储[uuid：{0}]没有足够的容量[{1}]用于导出

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1393
# args: 
image\ store\ [%s]\ cannot\ add\ image,\ because\ it\ is\ used\ for\ backup\ remote = ImageStore[{0}]不能添加镜像，因为它已经被远程镜像使用

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1591
# args: 
commercial\ license\ is\ required\ to\ use\ ImageStore = 使用ImageStore需要商业许可证

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1712
# args: self.getUuid(),resp.getUuid()
the\ uuid\ of\ imagestoreBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = 镜像镜像服务器的代理的uuid发生了改变[期望: {0}，实际: {1}]，很有可能代理被手动重启了，需要重连同步状态

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:125
# args: msg.getHostname()
hostname[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = 物理机名[{0}]不是一个IPv4的地址，而是一个非法的物理机名

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:60
# args: bsUuid,imageUuid
target\ backup\ storage[uuid\:%s]\ already\ contains\ the\ image\ [uuid\:%s] = 目标备份存储[uuid：{0}]已包含镜像[uuid：{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:79
# args: msg.getSrcBackupStorageUuid(),msg.getUuid()
source\ backup\ storage[%s]\ doesn't\ contain\ image[%s] = 源镜像服务器[{0}]不包含该镜像[{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:94
# args: msg.getSrcBackupStorageUuid(),msg.getUuid()
src\ backupstorage[%s]\ doesn't\ contain\ image[%s] = SRC BackupStorage[{0}]不包含镜像[{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:142
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ an\ image\ store\ backup\ storage[hostname\:%s] = 重复的镜像服务器。已经存在一个镜像服务器[物理机名: {0}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:147
# args: 
file\ path\ needed = 需要文件路径

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:151
# args: dir
absolute\ file\ path\ required\:\ %s = 需要文件的绝对路径；{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:154
# args: 
the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = URL包含了一个无效的目录[/dev or /proc or /sys]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:162
# args: dir
file\ path\ contains\ invalid\ character\:\ %s = 文件路径包含非法字符: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageExtension.java:193
# args: ps.getUuid()
cannot\ find\ a\ connected\ host\ in\ cluster\ to\ which\ PS\ [uuid\:\ %s]\ attached = 在PS[uuid：{0}]连接到的集群中找不到已连接的物理机

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:108
# args: amsg.getUrl()
invalid\ url[%s],\ the\ url\ must\ be\ an\ absolute\ path\ starting\ with\ '/' = 无效的url[{0}]，url必须是以'/'开头的绝对路径

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:117
# args: hostname
existing\ SimpleHttpBackupStorage\ with\ hostname[%s]\ found = 存在物理机名为[{0}]的简单http镜像服务器

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:228
# args: 
sync\ status\ failed. = 同步失败

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:343
# args: 
failed\ to\ get\ task\ reply! = 获取任务回复失败！

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:841
# args: rsp.getError()
delete\ image\ metadata\ file\ failed\:\ %s = 删除镜像元数据文件失败: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:397
# args: bsUuid
AddImage\ is\ forbidden\ in\ Disaster\ BS\:\ [%s] = 在Disaster镜像服务器中添加镜像是被禁止的

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:770
# args: rsp.getBackupStorageMetaFileName()
Check\ image\ metadata\ file\:\ %s\ failed = 检查镜像元数据文件: {0}失败

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:594
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ \:\ %s\ failed = 创建镜像元数据文件: {0}失败

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:569
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ sync\ \:\ %s\ failed = 同步创建镜像元数据文件{0}失败了

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreImageStruct.java:80
# args: e.getMessage()
parse\ create\ time\ error\:\ %s = 解析创建时间出错: {0}

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:111
# args: scheme,url
SftpBackupStorage\ doesn't\ support\ scheme[%s]\ in\ url[%s] = Sftp镜像服务器不支持在url[{1}]里包含scheme[{0}]

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:242
# args: rsp.getError()
fail\ to\ cancel\ download\ image,\ because\ %s = 无法取消下载镜像，因为{0}

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:316
# args: self.getUuid(),ret.getUuid()
the\ uuid\ of\ sftpBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = Sftp镜像镜像服务器的代理的uuid发生了改变[期望: {0}，实际: {1}]，很有可能代理被手动重启了，需要重连同步状态

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:70
# args: bsUuid
Please\ stop\ the\ vm\ before\ create\ volume\ template\ to\ sftp\ backup\ storage\ %s = 请在创建SFTP备份存储{0}的卷模板之前停止云主机

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:106
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ a\ sftp\ backup\ storage[hostname\:%s]\ existing = 重复的镜像服务器。已经存在一个镜像服务器[物理机名: {0}]

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:554
# args: rsp.getBackupStorageMetaFileName()
check\ image\ metadata\ file\:\ %s\ failed = 检查镜像元数据文件: {0}失败

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:399
# args: rsp.getBackupStorageMetaFileName()
create\ image\ metadata\ file\ \:\ %s\ failed = 创建镜像元数据文件: {0}失败

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:559
# args: rsp.getBackupStorageMetaFileName()
image\ metadata\ file\:\ %s\ is\ not\ exist = 镜像元数据文件: {0}不存在

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:321
# args: vmUuid
host\ not\ found\ for\ VM\:\ %s = 找不到VM的物理机：{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:241
# args: vmUuid
query-mirror\:\ host\ not\ found\ for\ VM[uuid\:%s] = 查询镜像：找不到VM[uuid：{0}]的物理机

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:328
# args: hostUuid
libvirt\ on\ the\ host[uuid\:\ %s]\ not\ support\ to\ create\ cdp\ task,\ please\ check\ the\ version\ of\ libvirt. = 物理机[uuid：{0}]上的libvirt不支持创建CDP任务，请检查libvirt的版本。

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:334
# args: hostUuid
qemu\ on\ the\ host[uuid\:\ %s]\ not\ support\ to\ create\ cdp\ task,\ please\ check\ the\ version\ of\ qemu. = 物理机[uuid：{0}]上的QEMU不支持创建CDP任务，请检查QEMU的版本。

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:366
# args: vmUuid
The\ QEMU\ version\ running\ on\ the\ VM[uuid\:%s]\ does\ not\ support\ mirrorBitmap. = 在VM[uuid：{0}]上运行的QEMU版本不支持MirrorBitMap。

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:458
# args: vol.getUuid(),reply.getError()
cannot\ ask\ primary\ storage[uuid\:%s]\ for\ volume\ snapshot\ capability,\ see\ detail\ [%s] = 无法向主存储[uuid：{0}]请求卷快照功能，请参阅详细信息[{1}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:320
# args: msg.getTaskType()
unexpected\ task\ type\:\ %s = 意外的任务类型：{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:127
# args: 
CDP\ task\ is\ still\ enabled = CDP任务仍处于启用状态

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:152
# args: s,OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS)
invalid\ time\ string\:\ %s,\ should\ be\ in\ ISO\ offset\ format,\ for\ example\:\ %s = 无效的时间字符串：{0}，应为ISO偏移格式，例如：{1}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:189
# args: state
VM\ is\ not\ stopped,\ current\ state\:\ %s = 云主机未停止，当前状态：{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:233
# args: volumeUuid,msg.getVmInstanceUuid()
Shared\ volume[%s]\ from\ VM[uuid]\ is\ still\ used\ by\ other\ VMs. = 云主机[uuid]中的共享云盘[{0}]仍由其他云主机使用。

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:243
# args: msg.getUuid()
Task\ not\ found[uuid\:\ %s] = 未找到任务[uuid：{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:248
# args: msg.getUuid(),taskVO.getTaskType()
Unexpected\ task\ type[uuid\:\ %s,\ type\:\ %s] = 意外的任务类型[uuid：{0}，类型：{1}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:261
# args: refVO.getResourceUuid()
VM[uuid\:\ %s]\ already\ deleted = 云主机[uuid：{0}]已删除

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:275
# args: state
Unexpected\ VM\ state\:\ %s = 意外的VM状态：{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:283
# args: taskVO.getBackupStorageUuid()
Backup\ storage\ not\ found[uuid\:\ %s] = 未找到备份存储[uuid：{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:288
# args: taskVO.getBackupStorageUuid()
Backup\ storage[uuid\:\ %s]\ is\ disabled = 备份存储[uuid：{0}]已禁用

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:293
# args: taskVO.getBackupStorageUuid()
Backup\ storage[uuid\:\ %s]\ is\ not\ connected = 备份存储[uuid：{0}]未连接

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:309
# args: refVO.getResourceUuid()
The\ vm[uuid\:\ %s]\ has\ already\ created\ a\ backup\ job,\ cannot\ enable\ the\ cdp\ task\ at\ the\ same\ time. = VM[uuid：{0}]已创建备份作业，无法同时启用CDP任务。

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:334
# args: s2,v2,s1,v1
'%s'(%d)\ should\ be\ larger\ than\ '%s'(%d) = “{0}”（{1}）应大于“{2}”（{3}）

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:340
# args: "hourlyRpSinceDay"
mandatory\ args\ missing\:\ %s = 缺少必需的参数：{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:376
# args: vmUuids.size()
expected\ one\ VM\ uuid,\ but\ given\ %d = 应为一个VM uuid，但给定了{0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:380
# args: vmUuids.get(0)
resource\ [uuid\:\ %s]\ is\ not\ VM = 资源[uuid：{0}]不是VM

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:402
# args: msg.getTargetResourceUuid()
The\ vm[uuid\:\ %s]\ has\ already\ created\ a\ cdp\ task,\ cannot\ create\ the\ backup\ job\ at\ the\ same\ time. = VM[uuid：{0}]已创建CDP任务，无法同时创建备份作业。

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java:243
# args: groupId
No\ recovery\ point\ found\ with\ grpId\ %d = 找不到具有grpid{0}的恢复点

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java:717
# args: backupStorageUuid
hostname\ not\ found\ for\ backup\ storage[uuid\:\ %s] = 未找到备份存储的物理机名[uuid：{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1921
# args: msg.getUuid()
CDP\ task[uuid\:\ %s]\ not\ found = 未找到CDP任务[uuid：{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:179
# args: msg.getMaxCapacity(),oldUsedCapacity
Invalid\ max\ capacity[%d],\ current\ usage\ is\ %d = 最大容量[{0}]无效，当前使用量为{1}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:269
# args: vmUuid,tasks.get(0)
VM\ [uuid\:\ %s]\ have\ been\ protected\ by\ task\:\ %s = 云主机[uuid：{0}]已受任务{1}保护

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:715
# args: 
revert\ job\ cancelled = 已取消还原作业

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:781
# args: 
create-vm\ job\ cancelled = 创建云主机作业已取消

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1181
# args: taskVO.getUuid()
CDP\ task[uuid\:\ %s]\ has\ no\ VM\ attached = CDP任务[uuid：{0}]未连接VM

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1215
# args: taskVO.getUuid()
task[uuid\:%s]\ have\ been\ deleted = 任务[uuid：{0}]已被删除

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1279
# args: taskUuid,maxCapacity,usedCapacity
CDP\ task[uuid\:%s]\ exceeded\ storage\ usage\:\ maximum\ %d,\ used\ %d. = CDP任务[uuid：{0}]超出了存储使用率：最大值{1}，已使用{2}。

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1728
# args: vmUuid
No\ CDP\ task\ found\ for\ VM\:\ %s = 未找到VM{0}的CDP任务

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1736
# args: vmUuid
No\ CDP\ backup\ storage\ found\ for\ VM\:\ %s = 未找到云主机{0}的CDP备份存储

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1784
# args: hypervisorType
No\ CdpBackupFactory\ of\ type[%s]\ found = 未找到类型为[{0}]的CDPBackupFactory

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1815
# args: hostUuid
No\ hypervisor\ type\ for\ VM\ %s = 云主机{0}没有云主机管理程序类型

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:2221
# args: msg.getVolume().getUuid()
The\ operation\ has\ volume[uuid\:\ %s]\ that\ will\ take\ chain\ type\ snapshot.\ Therefore,\ you\ could\ not\ do\ this\ operation\ when\ a\ CDP\ task\ is\ running\ on\ the\ VM\ instance. = 该操作具有将创建链类型快照的卷[uuid：{0}]。因此，当CDP任务在VM实例上运行时，您无法执行此操作。

# at: src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java:163
# args: 
Could\ not\ attach\ volume.The\ VM\ instance\ is\ running\ a\ CDP\ task.\ After\ the\ volume\ is\ attached,\ the\ capacity\ required\ for\ full\ backup\ will\ exceed\ the\ CDP\ task\ planned\ size.\ Please\ plan\ the\ size\ properly\ and\ try\ again. = 无法连接卷。VM实例正在运行CDP任务。连接卷后，完整备份所需的容量将超过CDP任务计划的大小。请正确规划大小，然后重试。

# at: src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java:187
# args: volume.getVmInstanceUuid(),volume.getUuid()
The\ VM[%s]\ for\ volume[%s]\ is\ running\ CDP,\ cannot\ resize\ now. = 卷[{1}]的VM[{0}]正在运行CDP，现在无法调整大小。

# at: src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java:88
# args: apiMessage.getCdpTaskUuid()
No\ VM\ found\ for\ CDP\ task[uuid\:\ %s] = 未找到CDP任务[uuid：{0}]的VM

# at: src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java:119
# args: bsUuid
BackupStorage[uuid\:\ %s]\ already\ been\ deleted = BackupStorage[uuid：{0}]已删除

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:179
# args: 
no\ volume\ records\ found\ from\ VM\ backup = 未从云主机备份中找到卷记录

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:138
# args: taskUuid
VM\ CDP\ task[uuid\:\ %s]\ not\ found = 找不到VM CDP任务[uuid：{0}]

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:147
# args: taskUuid
VM\ not\ found\ for\ CDP\ task[uuid\:\ %s] = 未找到CDP任务[uuid：{0}]的VM

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:236
# args: taskUuid,msg.getGroupId()
multiple\ root\ volumes\ found\ from\ CDP\ backup\ %s\:%d = 从CDP备份{0}中找到多个根卷：{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:250
# args: taskUuid,msg.getGroupId()
cannot\ find\ root\ volume\ from\ CDP\ backup\ %s\:%d = 无法从CDP备份{0}中找到根卷：{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:257
# args: taskUuid,msg.getGroupId()
root\ volume\ not\ found\ from\ CDP\ backup\ %s\:%d = 未从CDP备份{0}中找到根卷：{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:118
# args: hostUuid,this.msg.getVmInstanceUuid()
recoverVm\:\ host[uuid\:\ %s]\ not\ found\ for\ VM[uuid\:\ %s] = 未找到VM[uuid：{1}]的RecoverVM：物理机[uuid：{0}]

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:216
# args: uuids
multiple\ root\ volumes\ found\:\ %s = 找到多个根卷：{0}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:792
# args: volumeUuid,installPath
volume[uuid\:\ %s]\ has\ unexpected\ path\:\ %s = 卷[uuid：{0}]具有意外路径：{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:718
# args: volumeUuid,oldVolumeSize
unexpected\ volume[uuid\:\ %s]\ size\:\ %d = 意外卷[uuid：{0}]大小：{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:746
# args: volumeUuid,reply.getError().getDetails()
resize\ volume[uuid\:\ %s]\ failed\:\ %s = 调整卷[uuid：{0}]大小失败：{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:377
# args: uuid,msg.getVmInstanceUuid()
volume\ %s\ contains\ in\ backup\ but\ detached\ from\ VM[uuid\:\ %s]\:\ you\ need\ to\ either\ attach\ it\ back\ or\ delete\ it = 卷{0}包含在备份中，但已从VM分离[uuid：{1}]：您需要将其重新连接或将其删除

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:305
# args: 
no\ root\ volume\ found\ from\ VM\ backup = 未从云主机备份中找到根卷

# at: src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java:145
# args: 
kvmagent\ restarted = KVMAGENT重新启动

# at: src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java:164
# args: maxFailure
kvmagent\ no\ response\ %d\ times = KVMAgent无响应{0}次

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:117
# args: apiMessage.getHostUuid(),apiMessage.getBackupStorageUuid()
waiting\ host[uuid\:%s]\ and\ backupStorage[uuid\:%s]\ to\ be\ Connected... = 正在等待要连接的物理机[uuid：{0}]和备份存储[uuid：{1}]..

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:72
# args: apiMessage.getVmInstanceUuid()
recoverVm\:\ host\ uuid\ is\ not\ provided\ and\ original\ host\ is\ not\ found\ for\ VM[uuid\:\ %s] = RecoverVM：未提供物理机uuid，并且未找到VM[uuid：{0}]的原始物理机

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:165
# args: vmUuid
No\ CDP\ task\ found\ for\ VM[uuid\:\ %s] = 找不到VM[uuid：{0}]的CDP任务

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:174
# args: vmUuid,backupStorageUuid
CDP\ task\ for\ VM[uuid\:\ %s]\ is\ not\ found\ on\ BS[uuid\:\ %s] = 在BS[uuid：{1}]上找不到VM[uuid：{0}]的CDP任务

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:84
# args: msg.getPoolName()
operation\ failure,\ because\ the\ poolName[poolName\:%s]\ can\ not\ include\ unprintable\ ascii\ characters. = 操作失败，因为pool名称[poolName:{0}]不能包含中文和特殊字符

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:98
# args: duplicatePoolUuid
Ceph\ pool[uuid\:%s]\ with\ this\ name\ is\ already\ added\ into\ ZStack\ and\ used\ elsewhere,\ cannot\ reuse\ the\ ceph\ pool. = 池名称为此的扩展池[uuid:{0}]已经被添加进 ZStack 了，已做它用，不能复用该扩展池

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:93
# args: msg.getPoolName(),duplicatePoolUuid
creation\ failure,\ duplicate\ poolName[%s].\ There\ has\ been\ a\ pool[uuid\:%s]\ with\ the\ same\ name\ existing. = 创建失败，重复的池名称[{0}]。已经有一个相同名称的扩展池[uuid:{1}]存在

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:126
# args: existing
cannot\ add\ ceph\ primary\ storage,\ there\ has\ been\ some\ ceph\ primary\ storage\ using\ mon[hostnames\:%s] = 无法添加分布式存储，一定有某些分布式存储使用了mon[物理机名: {0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:137
# args: uri.getHostname()
Cannot\ add\ same\ host[%s]\ in\ mons = 在mon中无法添加相同的物理机[{0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:163
# args: 
Adding\ the\ same\ Mon\ node\ is\ not\ allowed = 添加相同的Mon节点不被允许

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:202
# args: monUrl,MON_URL_FORMAT
invalid\ monUrl[%s].\ A\ valid\ url\ is\ in\ format\ of\ %s = 无效的monURL[{0}]。有效URL的格式为{1}

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:209
# args: 
dataVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = DataVolumePoolName可以为空，但不能为空字符串

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:214
# args: 
rootVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = RootVolumePoolName可以为空，但不能为空字符串

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:219
# args: 
imageCachePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = ImageCachePoolName可以为空，但不能为空字符串

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:242
# args: existing
cannot\ add\ ceph\ backup\ storage,\ there\ has\ been\ some\ ceph\ backup\ storage\ using\ mon[hostnames\:%s] = 无法添加Ceph镜像服务器监控节点，已经有某个Ceph镜像服务器监控节点使用mon[物理机名: {0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:250
# args: 
poolName\ is\ required\ when\ importImages\ is\ true = 当importImages为真的时候必须填写池名

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:248
# args: 
poolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = PoolName可以为空，但不能为空字符串

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:269
# args: 
Third-party\ ceph\ cannot\ mixed\ with\ other\ primary\ storage. = 第三方Ceph不能与其他主存储混合。

# at: src/main/java/org/zstack/storage/ceph/CephMonBase.java:66
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ SSH\ port\ or\ unstable\ network\ environment = 该问题可能是由不正确的用户名、密码、SSH端口或者不稳定的网络环境引起的

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:768
# args: path
all\ monitors\ cannot\ execute\ http\ call[%s] = 所有的监控节点都无法执行http call[{0}]

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:866
# args: msg.getHostname(),msg.getBackupStorageUuid()
CephMon[hostname\:%s]\ not\ found\ on\ backup\ storage[uuid\:%s] = 在备份存储[uuid：{1}]上找不到cephmon[物理机名：{0}]

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1386
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ backup\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ backup\ storage = 有另外一个Ceph镜像服务器监控节点[name:{0}, uuid:{1}]有相同的FSID[{2}]，你不能添加同样的CEPH为两个不同的镜像服务器

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1756
# args: msg.getImageUuid(),self.getUuid(),self.getName()
image[uuid\:\ %s]\ is\ not\ on\ backup\ storage[uuid\:%s,\ name\:%s] = 镜像[uuid：{0}]不在备份存储[uuid：{1}，名称：{2}]上

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:97
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ backup\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = 无法更新Ceph镜像服务器监控节点监控节点[uuid:{0}]，他已经被删除。这个错误可以被忽略

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:463
# args: getSelf().getBackupStorageUuid()
Ceph\ bs[uuid\=%s]\ pool\ name\ not\ found = 找不到Ceph BS[uuid={0}]池名称

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4126
# args: base.getSelf().getHostname(),fsid,getSelf().getFsid()
the\ mon[ip\:%s]\ returns\ a\ fsid[%s]\ different\ from\ the\ current\ fsid[%s]\ of\ the\ cep\ cluster,are\ you\ adding\ a\ mon\ not\ belonging\ to\ current\ cluster\ mistakenly? = MON[IP：{0}]返回的FSID[{1}]与CEP群集的当前FSID[{2}]不同，您是否错误地添加了不属于当前群集的MON？

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1520
# args: backupStorage.getUuid(),backupStorage.getName(),bsFsid,self.getUuid(),self.getName(),getSelf().getFsid()
the\ backup\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s]\ is\ not\ in\ the\ same\ ceph\ cluster\ with\ the\ primary\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s] = 镜像服务器[uuid:{0}, name:{1}, fsid:{2}]和主存储[uuid:{3}, name:{4}, fsid:{5}]不在同一个ceph集群中

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2588
# args: psUuid,bsUuid
fsid\ is\ not\ same\ between\ ps[%s]\ and\ bs[%s],\ create\ template\ is\ forbidden. = 在主存储和镜像服务器中fsid不是一样的，禁止创建模版。

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3410
# args: self.getUuid()
ceph\ primary\ storage[uuid\:%s]\ may\ have\ been\ deleted. = 分布式存储[uuid:{0}]可能已经被删除

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3394
# args: self.getUuid()
unable\ to\ connect\ to\ the\ ceph\ primary\ storage[uuid\:%s],\ failed\ to\ connect\ all\ ceph\ monitors. = 无法连接到分布式存储[uuid:{0}]，所有监控节点均连接失败

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3507
# args: 
the\ fsid\ returned\ by\ mons\ are\ mismatching,\ it\ seems\ the\ mons\ belong\ to\ different\ ceph\ clusters\:\n = 监控节点返回的fsid不匹配，似乎监控节点属于不同的ceph集群

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3525
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ primary\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ primary\ storage = 有另外一个分布式存储[name:{0}, uuid:{1}] 有相同的 FSID[{2}]，你不能添加相同的CEPH设置到两个不同的主存储

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3783
# args: self.getUuid(),self.getName(),mon.getSelf().getUuid(),res.error
the\ ceph\ primary\ storage[uuid\:%s,\ name\:%s]\ is\ down,\ as\ one\ mon[uuid\:%s]\ reports\ an\ operation\ failure[%s] = 分布式存储[uuid:{0}, name:{1}]关闭，因为一个mon[uuid:{2}]报告了一个操作失败[{3}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4697
# args: 
operation\ error,\ because\:\ failed\ to\ get\ response = 操作错误，原因：无法获取响应

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4744
# args: 
backing\ up\ snapshots\ to\ backup\ storage\ is\ a\ depreciated\ feature,\ which\ will\ be\ removed\ in\ future\ version = 将快照备份到备份存储是一项过时的功能，在未来版本中将被删除

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4915
# args: volume.getUuid(),volume.getRootImageUuid()
cannot\ reinit\ rootvolume\ [%s]\ because\ image\ [%s]\ has\ been\ deleted\ and\ imagecache\ cannot\ be\ found = 无法重新初始化RootVolume[{0}]，因为镜像[{1}]已被删除并且找不到ImageCache

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4950
# args: ImageStatus.Ready.toString()
Because\ image\ status\ is\ not\ %s = 因为镜像状态不是{0}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4947
# args: 
Because\ the\ image\ is\ currently\ inaccessible,\ possibly\ due\ to\ a\ previous\ volume\ storage\ migration = 因为镜像当前不可访问，可能是由于之前的卷存储迁移

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4953
# args: volume.getRootImageUuid(),getSelf().getUuid(),cause
cannot\ find\ backupstorage\ to\ download\ image\ [%s]\ to\ primarystorage\ [%s].\ %s = 找不到用于将镜像[{0}]下载到主存储[{1}]的备份存储。{2}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:5653
# args: 
allocated\ url\ not\ found = 未找到分配的URL

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:5658
# args: allocatedUrl
invalid\ allocated\ url\:%s = 分配的URL无效：{0}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:396
# args: vol.getPrimaryStorageUuid()
cannot\ find\ any\ Connected\ ceph\ mon\ for\ the\ primary\ storage[uuid\:%s] = 无法为分布式存储[uuid:{0}]找到一台处于Connected状态的的监控节点

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:838
# args: targetCephPoolName,cephPoolName
ceph\ pool\ conflict,\ the\ ceph\ pool\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ ceph\ pool\ specified\ in\ the\ creation\ parameter\ is\ %s = Ceph池冲突，由实例提供的Ceph池指定为{0}，而在创建参数中指定的Ceph池为{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:964
# args: targetCephPoolName,cephPoolName
ceph\ pool\ conflict,\ the\ ceph\ pool\ specified\ by\ the\ disk\ offering\ is\ %s,\ and\ the\ ceph\ pool\ specified\ in\ the\ creation\ parameter\ is\ %s = Ceph池冲突，磁盘产品指定的Ceph池为{0}，而创建参数中指定的Ceph池为{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1217
# args: rootVolume.getInstallPath(),reply.getError().getDetails()
get\ rootVolume[%s]\ rbd\ image\ watchers\ fail,\ %s = 查询云盘[{0}] rbd image watchers失败，{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1233
# args: msg.getVolumeUuid(),installPath
rootVolume[%s]\ is\ already\ in\ use(ceph\ rbd\ image[%s]\ already\ has\ watchers),\ in\ order\ to\ prevent\ brain\ splitting,\ Starting\ VM\ is\ prohibited. = 云盘[{0}]正在使用中(ceph rbd 镜像[{1}]存在watchers)，为了防止云主机脑裂，禁止启动云主机

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1341
# args: poolName
cannot\ find\ cephPrimaryStorage\ pool[poolName\=%s] = 找不到CephPrimaryStorage池[PoolName={0}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1351
# args: poolName,volumeSize
cephPrimaryStorage\ pool[poolName\=%s]\ available\ virtual\ capacity\ not\ enough\ for\ size\ %s = CephPrimary存储池[PoolName={0}]可用虚拟容量不足，无法满足大小{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1399
# args: psUuid,purpose
cannot\ allocate\ pool\ for\ primaryStorage[%s],\ purpose\:\ %s = 无法为主存储[{0}]分配池，目的：{1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:93
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ primary\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = 不能更新一台已经被删除的Ceph主存储监控节点[uuid:{0}]，这个错误可被忽略

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:471
# args: primaryStorageUuid
Ceph\ ps[uuid\=%s]\ root\ pool\ name\ not\ found = 找不到Ceph PS[uuid={0}]根池名称

# at: src/main/java/org/zstack/storage/ceph/primary/CephRequiredUrlParser.java:32
# args: 
invalid\ uri,\ correct\ example\ is\ ceph\://$POOLNAME/$VOLUMEuuid\ or\ volume\://$VOLUMEuuid = URI无效，正确示例为ceph：//$poolName/$volumeUuid或volume：//$volumeUuid

# at: src/main/java/org/zstack/storage/ceph/primary/CephStorageAttachKvmClusterMetric.java:19
# args: 
Can\ not\ attach\ third-party\ ceph\ with\ token\ into\ kvm\ cluster. = 无法使用令牌将第三方Ceph连接到KVM集群。

# at: src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java:168
# args: poolUuid,size,originAvailableCapacity
required\ ceph\ pool[uuid\:%s]\ cannot\ satisfy\ conditions\ [availableSize\ >\ %s\ bytes],\ current\ available\ size\ %s = 所需的Ceph池[uuid：{0}]无法满足条件[AvailableSize>{1}字节]，当前可用大小{2}

# at: src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java:196
# args: poolUuid
cannot\ find\ ceph\ pool\ [%s]\ related\ osdgroup = 找不到Ceph池[{0}]相关的OSDGroup

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:95
# args: 
no\ candidate\ host\ with\ the\ scsi\ lun\ with\ enough\ cpu\ /\ memory\ or\ Enabled/Connected\ status = 需要的lun所在的物理机都不满足cpu / memory 以及物理机状态的条件

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:54
# args: firstScsiLunVO.getUuid(),scsiLunVO.getUuid()
scsi\ lun[uuid\:\ %s]\ and\ [uuid\:\ %s]\ does\ not\ has\ a\ common\ host = SCSI Lun[uuid：{0}]和[uuid：{1}]没有共同的物理机

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:59
# args: scsiLunVO.getUuid()
scsi\ lun[uuid\:\ %s]\ is\ in\ disabled\ state = SCSI Lun[uuid：{0}]处于禁用状态

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:150
# args: scsiLunVO.getWwid(),refVO.getVmInstanceUuid()
scsi\ lun[wwid\:\ %s]\ has\ been\ attached\ to\ vm\ instance\ %s = SCSI Lun[WWID：{0}]已连接到VM实例{1}

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:86
# args: msg.getIp(),msg.getPort()
iSCSI\ server[ip\:\ %s,\ port\:\ %s]\ already\ exists = iSCSI服务器[IP：{0}，端口：{1}]已存在

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:91
# args: msg.getIp()
iSCSI\ server\ ip\:\ %s\ is\ not\ valid = iSCSI服务器IP：{0}无效

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:100
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ already\ attached\ to\ cluster[uuid\:\ %s] = iSCSI服务器[uuid：{0}]已连接到群集[uuid：{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:110
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ not\ attached\ to\ cluster[uuid\:\ %s] = iSCSI服务器[uuid：{0}]未连接到群集[uuid：{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:121
# args: msg.getUuid(),clusterUuid
iSCSI\ server[uuid\:\ %s]\ still\ attached\ to\ cluster[uuid\:\ %s] = iSCSI服务器[uuid：{0}]仍连接到群集[uuid：{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:171
# args: VmInstanceUuid
please\ umount\ all\ block\ devices\ of\ the\ vm[%s]\ and\ try\ again = 请卸载云主机[{0}]的所有块设备，然后重试

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1501
# args: lunVO.getWwid(),msg.getVmInstanceUuid()
scsi\ lun[wwid\:%s]\ has\ been\ attached\ into\ the\ vm[%s] = SCSI Lun[WWID：{0}]已连接到云主机[{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1508
# args: msg.getUuid(),vmInstanceVO.getState(),allowedVmOperationStates
vm\ instance[%s]\ state\ [%s]\ not\ in\ allowed\ state[%s]\ for\ operation = VM实例[{0}]状态[{1}]不处于操作的允许状态[{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1517
# args: msg.getUuid(),vmInstanceVO.getHostUuid(),msg.getUuid()
vm\ instance[uuid\:\ %s]\ host[uuid\:\ %s]\ not\ attached\ scsi\ lun[uuid\:\ %s] = 云主机实例[uuid：{0}]物理机[uuid：{1}]未连接scsi lun[uuid：{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1576
# args: msg.getVmInstanceUuid(),vmInstanceVO.getState(),allowedVmOperationStates
vm\ instance[%s]\ state[%s]\ not\ in\ allowed\ state[%s]\ for\ operation = VM实例[{0}]状态[{1}]不处于操作的允许状态[{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1585
# args: msg.getVmInstanceUuid(),hostVO.getUuid(),msg.getUuid()
vm\ instance[%s]\ host[uuid\:\ %s]\ not\ attached\ scsi\ lun[uuid\:\ %s] = 云主机实例[{0}]物理机[uuid：{1}]未连接SCSI Lun[uuid：{2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1738
# args: msg.getUuid(),vmUuids
SCSI\ LUN[%s]\ is\ attached\ to\ VM\ [%s] = SCSI Lun[{0}]已连接到云主机[{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1748
# args: msg.getUuid(),msg.getHostUuid()
SCSI\ LUN[%s]\ record\ not\ found\ on\ host\ [%s] = 在物理机[{1}]上未找到SCSI Lun[{0}]记录

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1760
# args: hvType,msg.getHostUuid()
unexpected\ hypervisor\ type[%s]\ for\ host\ [%s] = 物理机[{1}]的意外云主机监控程序类型[{0}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:2024
# args: serial
different\ disk\ types\ are\ found\ in\ different\ hosts\ for\ lun[serial\:%s],\ unable\ to\ attach\ it\ to\ cluster = 在不同的物理机中为Lun[serial：{0}]找到不同的磁盘类型，无法将其连接到群集

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1975
# args: scannedServer.getKey(),JSONObjectUtil.toJsonString(scannedTargets),hostVO.getUuid(),JSONObjectUtil.toJsonString(returnValue.getIscsiTargets())
different\ iscsi\ configuration\ were\ found\ on\ host[uuid\:%s,\ targets\:%s]and\ host[uuid\:%s,\ targets\:%s] = 在物理机[uuid：{0}，目标：{1}]和物理机[uuid：{2}，目标：{3}]上找到不同的iSCSI配置

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:2661
# args: refVO.getScsiLunUuid()
specified\ scsi\ lun[wwid\:\ %s]\ not\ exists\ or\ disabled = 指定的SCSI Lun[WWID：{0}]不存在或已禁用

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:60
# args: msg.getVolumeUuid()
the\ vm\ where\ the\ data\ volume\ [%s]\ is\ located\ has\ a\ memory\ snapshot,\ can't\ delete = 数据云盘[{0}]所在的云主机具有内存快照，无法删除

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:71
# args: msg.getVolumeUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ volume\ %s\ to\ vmInstance\ %s\ with\ memory\ snapshot\ group = 无法使用内存快照组将卷{0}附加到VMInstance{1}

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:78
# args: msg.getVolumeUuid()
the\ vm\ where\ the\ data\ volume\ [%s]\ is\ located\ has\ a\ memory\ snapshot,\ can't\ detach = 数据云盘[{0}]所在的VM具有内存快照，无法分离

# at: src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java:60
# args: 
defaultL3NetworkUuid\ not\ exist = defaultL3NetworkUuid不存在

# at: src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java:432
# args: l3Uuid,String.join("','", memorySnapshotGroupUuidList)
nic\ with\ l3\ network[uuid\:\ %s]\ is\ referenced\ by\ VolumeSnapshotGroup[uuid\:\ %s],\ delete\ this\ VolumeSnapshotGroup\ before\ deleting\ this\ l3\ network. = 具有三层网络[uuid：{0}]的NIC由卷SnapshotGroup[uuid：{1}]引用，请在删除此三层网络之前删除此卷SnapshotGroup。

# at: src/main/java/org/zstack/storage/memorySnapshot/VolumeMemorySnapshotGroupExtension.java:155
# args: archiveVolume.getResourceUuid()
the\ volume\ %s\ does\ not\ exist = 卷{0}不存在

# at: src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java:161
# args: rsp.getError()
vm\ block\ migrate\ failed\:\ %s = VM块迁移失败：{0}

# at: src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java:188
# args: 
target\ primary\ storage\ does\ not\ support\ migration\ for\ current\ host = 目标主存储不支持当前物理机的迁移

# at: src/main/java/org/zstack/storage/migration/KvmMigrateVmWithStorageWorkFlow.java:116
# args: 
No\ host\ available\ for\ block\ live\ migration = 没有可用于数据块实时迁移的物理机

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:121
# args: 
do\ not\ support\ storage\ migration\ with\ iso\ in\ ceph\ backup\ storage\ attached = 不支持Ceph备份存储中附加ISO的存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:289
# args: srcVm.getUuid(),srcVm.getName()
do\ not\ support\ storage\ migration\ of\ vm[uuid\:%s,\ name\:\ %s]\ while\ shared\ volume\ attached = 连接共享云盘时，不支持VM[uuid：{0}，名称：{1}]的存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:173
# args: srcPsType,dstPsType
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ data\ volume = 不支持从[{0}]到[{1}]的带数据盘的存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:178
# args: srcPsType,dstPsType
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ snapshot = 不支持从[{0}]到[{1}]的存在云盘快照的存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:185
# args: primaryStorageVO.getType(),dstPrimaryStorageVO.getType()
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s] = 不支持从[{0}]到[{1}]的存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:191
# args: vmInstanceVO.getUuid()
VM[uuid\:%s]\ is\ running\ but\ host\ uuid\ is\ missing = 云主机[uuid：{0}]正在运行，但缺少物理机uuid

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:202
# args: 
Source\ BS\ and\ Destination\ BS\ cannot\ be\ the\ same. = 源镜像服务器和目标镜像服务器不能相同

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:210
# args: 
Source\ BS\ and\ Destination\ BS\ must\ not\ be\ Disabled. = 源镜像服务器和目标镜像服务器必须不是不可用。

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:217
# args: msg.getImageUuid()
Image[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = 镜像[uuid:{0}]的状态不是已准备，不能迁移它

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:228
# args: msg.getImageUuid(),msg.getSrcBackupStorageUuid()
Image[uuid\:%s]\ is\ not\ in\ source\ backup\ storage[uuid\:%s] = 镜像[uuid:{0}]没有在源镜像服务器[uuid:{1}]

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:237
# args: srcBS.getType(),dstBS.getType()
Cannot\ migrate\ image\ from\ %s\ to\ %s. = 不能从{0}迁移镜像到{1}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:256
# args: msg.getVolumeUuid(),msg.getDstPrimaryStorageUuid()
Volume[uuid\:%s]\ is\ already\ in\ PS[uuid\:%s],\ cannot\ migrate. = 云盘[uuid:{0}]已经在主存储[uuid:{1}]里，不能迁移。

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:264
# args: 
Source\ PS\ and\ Destination\ PS\ must\ not\ be\ Disabled\ or\ Maintenance\ state. = 源主存储和目标主存储必须不是不可用或者维护状态。

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:271
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = 云盘[uuid:{0}]状态不是已准备，不能进行迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:333
# args: msg.getVolumeUuid(),srcVolume.getVmInstanceUuid()
cannot\ migrate\ data\ volume[uuid\:%s]\ bewteen\ sharedblock\ primary\ storages\ when\ vm[vmuuid\:%s]\ instance\ is\ not\ stopped. = VM[vmuuid：{1}]实例未停止时，无法在SharedBlock主存储之间迁移数据云盘[uuid：{0}]。

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:328
# args: msg.getVolumeUuid(),srcVolume.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ still\ attached\ on\ vm[uuid\:%s],\ please\ detach\ it\ before\ migration. = 云盘[uuid:{0}]一直连接在云主机[uuid:{1}]，在迁移之前请先断开连接

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:341
# args: srcVolume.getUuid(),srcVolume.getName()
do\ not\ support\ storage\ migration\ while\ shared\ volume[uuid\:\ %s,\ name\:\ %s]\ attached = 加载了共享云盘[uuid:{0}, name:{1}]不支持存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:284
# args: 
Cannot\ migrate\ root\ volume\ when\ vm\ instance\ is\ not\ stopped. = 当云主机不是已停止，不能迁移云盘。

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:301
# args: 
Cannot\ migrate\ root\ volume\ when\ there\ are\ data\ volumes\ attached\ to\ the\ vm\ instance. = 当云盘连接在云主机上时，不能迁移云盘

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:320
# args: 
The\ destination\ primary\ storage\ is\ not\ attached\ to\ any\ cluster\ that\ has\ the\ same\ L2\ networks\ as\ source\ cluster. = 目标主存储不能连接任何和源集群一样的二层网络的集群

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:351
# args: srcPS.getType(),dstPS.getType()
Cannot\ migrate\ volume\ from\ %s\ to\ %s. = 不能从{0}迁移云盘到{1}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:372
# args: msg.getVolumeUuid()
can\ not\ migrate\ volume[%s],\ because\ volume\ state\ is\ Disabled = 无法迁移卷[{0}]，因为卷状态已禁用

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:510
# args: vmInstanceVO.getState()
not\ support\ vm\ state[%s]\ to\ do\ storage\ migration = 云主机状态为[{0}],无法进行存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:448
# args: msg.getVmInstanceUuid(),size,dstPrimaryStorageVO.getCapacity().getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ vm[uuid\:\ %s]\ storage\ migration,\ required\ capacity(include\ image\ cache)\:\ %s,\ current\ available\ physical\ capacity\:\ %s = 对云主机[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量（容量计算包含镜像cache），但现在只有{2}的空余容量

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1125
# args: msg.getVmInstanceUuid()
VM[uuid\:\ %s]\ not\ found = 找不到VM[uuid：{0}]

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:846
# args: srcPs.getType(),dstPs.getType()
unsupported\ storage\ migration\ type\:\ from\ %s\ to\ %s = 不支持的存储迁移类型：从{0}到{1}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1094
# args: msg.getType()
not\ support\ to\ cancel\ %s = 不支持取消{0}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1194
# args: vmInstanceVO.getState()
not\ support\ vm\ state[%s]\ to\ do\ cancellation\ of\ storage\ migration = 不支持云主机状态[{0}]取消存储迁移

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1514
# args: 
failed\ to\ get\ host\ candidates\ for\ vm\ migration = 无法获取云主机迁移的候选物理机

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:114
# args: dstBsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ backup\ storage[uuid\:%s] = 所有在Ceph镜像服务器监控节点[uuid:{0}]的监控节点都处于失联状态

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:187
# args: imageUuid,srcBsUuid,dstBsUuid,errCode.getDetails()
Failed\ to\ migrate\ Image\ %s\ from\ BS\ %s\ to\ BS\ %s.\ cause\:\ %s = 无法将镜像{0}从BS{1}迁移到BS{2}。原因：{3}

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:143
# args: reply1.getTrashId(),dstBsUuid,dstImageInstallPath,reply1.getResourceUuid()
found\ trashId(%s)\ in\ BackupStorage\ [%s]\ for\ the\ migrate\ installPath[%s].\ Please\ clean\ it\ first\ by\ 'APICleanUpTrashOnBackupStorageMsg'\ if\ you\ insist\ to\ migrate\ the\ image[%s] = 在备份存储[{1}]的回收数据({0})中己存在要迁移的目标路径[{2}]，如果要继续迁移镜像[{3}]，请先调用'APICleanUpTrashOnBackupStorageMsg'来手动清理该回收数据

# at: src/main/java/org/zstack/storage/migration/primary/PrimaryStorageMigrateVmJob.java:141
# args: amsg.getVmInstanceUuid(),job.getUuid()
vm[uuid\:%s]\ storage\ migration\ long\ job[uuid\:%s]\ failed\ because\ management\ node\ was\ restarted = 云主机[uuid：{0}]存储迁移长作业[uuid：{1}]失败，因为管理节点已重新启动

# at: src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:584
# args: volume.getType()
The\ type\ [%s]\ of\ volume\ is\ invalid. = 卷的类型[{0}]无效。

# at: src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:122
# args: dstPsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ primary\ storage[uuid\:%s] = 所有Ceph MON都在分布式存储[uuid：{0}]中断开连接

# at: src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:89
# args: 
cannot\ find\ any\ connected\ host\ to\ perform\ the\ storage\ migration\ operation = 为了执行存储迁移操作，未找到连接的物理机

# at: src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:194
# args: imageUuid
both\ image\ %s\ and\ its\ cache\ is\ missing = 缺少镜像{0}及其缓存

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:203
# args: 
'resourceUuid'\ and\ 'resourceType'\ must\ be\ set\ both\ or\ neither! = “ resourceUuid ”和“ resourceType ”必须同时设置或都不设置！

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:92
# args: 
zoneUuids,\ clusterUuids,\ primaryStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids、clusterUuids、primaryStorageUuids中必须至少有一个不为空列表，除非将字段 all 设为 true

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:114
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ cluster[uuid\:%s]\ yet = 主存储[uuid:{0}]还未加载到集群[uuid:{1}]上

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:131
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ been\ attached\ to\ cluster[uuid\:%s] = 主存储[uuid:{0}]已被加载到集群[uuid:{1}]上

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:146
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ and\ cluster[uuid\:%s]\ are\ not\ in\ the\ same\ zone = 主存储[uuid:{0}]和集群[uuid:{1}]不在同一个区域内

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:168
# args: url
url[%s]\ has\ been\ occupied,\ it\ cannot\ be\ duplicate\ in\ same\ cluster = url[{0}]已经被占用，在相同的集群里它不能再次使用

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:220
# args: psUuids
primary\ storage(s)\ [uuid\:\ %s]\ where\ volume(s)\ locate\ is\ not\ Enabled\ or\ Connected = 卷所在的主存储[uuid：{0}]未启用或未连接

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java:50
# args: spec.getAvoidPrimaryStorageUuids()
after\ removing\ primary\ storage%s\ to\ avoid,\ there\ is\ no\ candidate\ primary\ storage\ anymore.\ please\ check\ primary\ storage\ status\ and\ state\ in\ the\ cluster. = 把主存储{0}移到排除列表后，就没有可用的主存储了，请确认集群中主存储的状态

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:239
# args: self.getUuid()
cannot\ attach\ ISO\ to\ a\ primary\ storage[uuid\:%s]\ which\ is\ disabled = 无法将ISO附加到已禁用的主存储[uuid：{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:769
# args: bsUuid,self.getZoneUuid(),self.getUuid()
backup\ storage[uuid\:%s]\ is\ not\ attached\ to\ zone[uuid\:%s]\ the\ primary\ storage[uuid\:%s]\ belongs\ to = 镜像服务器[uuid:{0}]没有加载到主存储[uuid:{2}]所在的区域[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:789
# args: volUuid,vmState
volume[uuid\:%s]\ has\ been\ attached\ a\ %s\ VM.\ VM\ should\ be\ Stopped. = 卷[uuid：{0}]已连接到{1}云主机。应停止云主机。

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1602
# args: self.getUuid(),clusterUuidsString
primary\ storage[uuid\:%s]\ cannot\ be\ deleted\ for\ still\ being\ attached\ to\ cluster[uuid\:%s]. = 不能删除主存储[uuid:{0}]，因为它还被加载在集群[uuid:{1}]上

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1749
# args: volumeUuid
cannot\ attach\ volume[uuid\:%s]\ whose\ primary\ storage\ is\ Maintenance = 无法挂载云盘[uuid:{0}]，其主存储处于维护模式

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java:283
# args: size,capacityVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ primary\ storage[uuid\:%s],\ it's\ short\ of\ available\ capacity = 无法在主存储[uuid:{1}]上保留{0}字节，可用容量不足

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageDeleteBitGC.java:45
# args: ps.getUuid(),ps.getStatus().toString()
the\ primary\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = 主存储[uuid:{0}]的状态不是已连接，当前的状态是{1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageMainAllocatorFlow.java:225
# args: spec.getImageUuid()
no\ way\ to\ get\ image\ size\ of\ %s,\ report\ exception. = 无法获取{0}的镜像大小，报告异常。

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:106
# args: systemTag,uuid
%s\ is\ invalid.\ %s\ is\ not\ a\ valid\ zstack\ uuid = {0}是无效的，{1}不是一个有效的ZStack uuid

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:110
# args: resourceUuid
no\ primary\ storage[uuid\:%s]\ found = 找不到主存储[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:138
# args: msg.getUuid()
primaryStorage[uuid\=%s]\ does\ not\ exist = PrimaryStorage[uuid={0}]不存在

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:492
# args: 
please\ specify\ the\ purpose\ before\ allocating\ space = 请在分配空间之前指定用途

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:614
# args: errs
cannot\ find\ any\ qualified\ primary\ storage,\ errors\ are\ %s = 找不到可用的主存储，错误为:{0}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:833
# args: cidr
cidr[%s]\ Input\ Format\ Error = CIDR[{0}]输入格式错误

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:829
# args: cidrCount
only\ one\ primaryStorage\ cidr\ system\ tag\ is\ allowed,\ but\ %d\ got = 只允许一个PrimaryStorage CIDR系统标记，但{0}获得了

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:1186
# args: clusterUuid,msg.getClusterUuid()
clusterUuid\ conflict,\ the\ cluster\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ cluster\ specified\ in\ the\ creation\ parameter\ is\ %s = Clusteruuid冲突，实例产品指定的集群为{0}，创建参数中指定的集群为{1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:1201
# args: psUuid,msg.getPrimaryStorageUuidForRootVolume()
primaryStorageUuid\ conflict,\ the\ primary\ storage\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ primary\ storage\ specified\ in\ the\ creation\ parameter\ is\ %s = PrimaryStorageuuid冲突，实例产品指定的主存储为{0}，而创建参数中指定的主存储为{1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:127
# args: uuid
cannot\ find\ primary\ storage[uuid\:%s],\ the\ uuid\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = 找不到由计算规格或云盘规格指定的主存储[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:167
# args: tag
cannot\ find\ primary\ storage\ having\ user\ tag[%s].\ The\ user\ tag\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = 找不到带有指定用户标签的主存储[uuid:{0}]，该标签由计算规格或者云盘规格指定

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java:85
# args: extp.getClass().getName()
PrimaryStorageTagAllocatorExtensionPoint[%s]\ returns\ zero\ primary\ storage\ candidate = 主存储标签分配插件[{0}]找不到可用的主存储

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1825
# args: 
not\ support = 不是支持

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:471
# args: bsType
cannot\ find\ any\ BackupStorageKvmFactory\ for\ the\ type[%s] = 找不到类型[{0}]的任何BackupStorageKVMFactory

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:670
# args: self.getUuid(),self.getName()
the\ block\ primary\ storage[uuid\:%s,\ name\:%s]\ can\ not\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = 块主存储[uuid：{0}，名称：{1}]在连接的群集中找不到任何可用于实例化卷的物理机

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1242
# args: msg.getVolumeInventory().getUuid()
fail\ to\ find\ a\ host\ to\ map\ for\ volume\ %s = 找不到要为卷{0}映射的物理机

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1491
# args: 
host\ uuid\ is\ mandatory = 物理机uuid是必需的

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1612
# args: msg.getDestHostUuid()
Fail\ to\ get\ host\ initiator\ ref,\ please\ reconnect\ this\ host\:%s = 无法获取物理机启动器引用，请重新连接此物理机：{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:2608
# args: msg.getPrimaryStorageUuid()
fail\ to\ find\ cluster\ for\ commit\ volume\ on\ ps\:%s = 在PS：{0}上找不到提交卷的群集

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:2617
# args: msg.getVolumeUuid()
fail\ to\ find\ host\ for\ commit\ volume\:%s = 找不到提交卷的物理机：{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:1132
# args: 
not\ support\ take\ volumes\ snapshots\ on\ multiple\ ps\ when\ including\ ceph = 包含Ceph时，不支持在多个PS上拍摄卷快照

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:370
# args: context.getInventory().getUuid(),priUuid,reply.getError()
KVM\ host[uuid\:\ %s]\ fails\ to\ be\ added\ into\ local\ primary\ storage[uuid\:\ %s],\ %s = 本地存储[uuid:{1}]添加物理机[uuid:{0}]失败，{2}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:669
# args: volume.getUuid()
fail\ to\ find\ block\ scsi\ lun\ for\ volume\:\ %s = 找不到卷{0}的块SCSI Lun

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:967
# args: e.getCause().toString()
fail\ to\ exchange\ block\ scsi\ lun\ info\:%s = 无法交换块SCSI Lun信息：{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:1560
# args: 
currently\ block\ storage\ only\ support\ full\ mode\ backup = 当前，数据块存储仅支持完整模式备份

# at: src/main/java/org/zstack/storage/primary/block/ImageStoreBackupStorageBlockKvmDownloader.java:143
# args: bsPath,greply.getHostname(),pinv.getUuid(),psPath,rsp.getError()
failed\ to\ download[%s]\ from\ BackupStorage[hostname\:%s]\ to\ block\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = 无法将[{0}]从备份存储[物理机名：{1}]下载到块主存储[uuid：{2}，路径：{3}]，{4}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:875
# args: accessZoneRsp.getDetail_err_msg()
fail\ to\ sync\ access\ zones\ because\ %s = 无法同步访问分区，因为{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:881
# args: queryAccessZoneSubnetRsp.getDetail_err_msg()
fail\ to\ get\ access\ zone's\ subnet\ because\ %s = 无法获取访问区域的子网，因为{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:893
# args: queryHostRsp.getDetail_err_msg()
fail\ to\ query\ all\ hosts,\ because\ of\ %s = 由于{0}，无法查询所有物理机

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:908
# args: ids.toString(),queryHostRsp.getDetail_err_msg()
fail\ to\ query\ hosts\ %s,\ because\ of\ %s = 由于{1}，无法查询物理机{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:927
# args: String.valueOf(hostId),String.valueOf(hostGroupId),addHostRsp.getDetail_err_msg()
fail\ to\ add\ host\ %s\ into\ hostGroup\ %s,\ because\ of\ %s = 由于{2}，无法将物理机{0}添加到物理机组{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:962
# args: String.valueOf(initiatorId)
host\ id\ is\ mandatory\ but\ get\:%s = 物理机ID是必需的，但获取：{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:943
# args: String.valueOf(hostId),rsp.getDetail_err_msg()
fail\ to\ delete\ host\ %s,\ because\ of\ %s = 由于{1}，无法删除物理机{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:955
# args: String.valueOf(hostGroupId),rsp.getDetail_err_msg()
fail\ to\ delete\ host\ group\ %s,\ because\ of\ %s = 由于{1}，无法删除物理机组{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:967
# args: String.valueOf(initiatorId),rsp.getDetail_err_msg()
fail\ to\ delete\ initiator\ %s,\ because\ of\ %s = 由于{1}，无法删除发起程序{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:975
# args: queryHostGroupRsp.getDetail_err_msg()
fail\ to\ query\ host\ group,\ because\ of\ %s = 由于{0}，无法查询物理机组

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:993
# args: name,addHostGroupRsp.getDetail_err_msg()
fail\ to\ add\ host\ group\:\ %s,\ error\ message\:%s\  = 无法添加物理机组：{0}，错误消息：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1011
# args: ids.toString(),queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ \:\ %s,\ error\ message\:%s\  = 无法查询Lun：{0}，错误消息：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1050
# args: queryPath,queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ by\ path\:\ %s,\ error\ message\:%s\  = 无法按路径查询Lun：{0}，错误消息：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1067
# args: name,serverCommonRsp.getDetail_err_msg()
fail\ to\ update\ lun\ name\:\ %s,\ error\ message\:%s\  = 无法更新Lun名称：{0}，错误消息：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1178
# args: blockScsiLunVO.getName(),serverRsp.getDetail_err_msg()
fail\ to\ create\ lun\ name\:\ %s,\ error\ message\:%s\  = 无法创建Lun名称：{0}，错误消息：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1115
# args: blockScsiLunVO.getName(),serverRsp.getDetail_err_msg()
fail\ to\ get\ created\ lun[name\:\ %s],\ error\ message\:%s\  = 无法获取已创建的Lun[名称：{0}]，错误消息：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1129
# args: blockScsiLunVO.getName()
fail\ to\ create\ lun\ name\:\ %s,\ can\ not\ find\ root\ cause = 无法创建Lun名称：{0}，找不到根本原因

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1188
# args: String.valueOf(lunId),queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ %s,\ because\ of\ %s = 由于{1}，无法查询Lun{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1204
# args: String.valueOf(lunId),String.valueOf(hostGroupId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ query\ lun\ map\ for\ lun\ %s\ and\ host\ group\ %s,\ because\ of\ %s = 由于{2}，无法查询Lun{0}和物理机组{1}的Lun映射

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1225
# args: String.valueOf(hostGroupId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ query\ lun\ map\ for\ host\ group\ %s,\ because\ of\ %s = 由于{1}，无法查询物理机组{0}的Lun映射

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1236
# args: clusterOverviewRsp.getDetail_err_msg()
fail\ to\ get\ cluster\ info,\ because\ of\ %s = 由于{0}，无法获取群集信息

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1259
# args: String.valueOf(lunId),String.valueOf(hostGroupId),serverRsp.getDetail_err_msg()
fail\ to\ map\ lun\ %s\ to\ host\ group\ %s,\ because\ of\ %s = 由于{2}，无法将Lun{0}映射到物理机组{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1267
# args: String.valueOf(lunMapId)
lun\ map\ id\ is\ mandatory\ but\ get\:%s = Lun映射ID是必需的，但获取：{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1273
# args: String.valueOf(lunMapId),serverRsp.getDetail_err_msg()
fail\ to\ delete\ lun\ map\ %s,\ because\ of\ %s = 由于{1}，无法删除Lun映射{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1279
# args: String.valueOf(lunId)
lun\ id\ is\ mandatory\ but\ get\:%s = Lun ID是必需的，但获取：{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1285
# args: String.valueOf(lunId),serverRsp.getDetail_err_msg()
fail\ to\ delete\ lun\ %s,\ because\ of\ %s = 由于{1}，无法删除Lun{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1295
# args: String.valueOf(id),storagePoolRsp.getDetail_err_msg()
fail\ to\ get\ storage\ pool\ %s,\ because\ of\ %s = 由于{1}，无法获取存储池{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1308
# args: JSONObjectUtil.toJsonString(blockScsiLunVO),rsp.getDetail_err_msg()
fail\ to\ create\ snapshot\ for\ lun\ %s,\ because\ of\ %s = 由于{1}，无法为Lun{0}创建快照

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1330
# args: ids.toString(),rsp.getDetail_err_msg()
fail\ to\ query\ snapshots\ %s,\ because\ of\ %s = 由于{1}，无法查询快照{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1337
# args: String.valueOf(snapshotId)
snapshot\ id\ is\ mandatory\ but\ get\:%s = 快照ID是必需的，但获取：{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1344
# args: String.valueOf(snapshotId),rsp.getDetail_err_msg()
fail\ to\ delete\ snapshot\ %s,\ because\ of\ %s = 由于{1}，无法删除快照{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1355
# args: String.valueOf(snapshotId),serverRsp.getDetail_err_msg()
fail\ to\ revert\ snapshot\:%s,\ because\ of\:\ %s = 无法恢复快照：{0}，因为：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1364
# args: String.valueOf(lunId),getLunSessionRsp.getDetail_err_msg()
fail\ to\ check\ lun\ %s\ session\ state\ ,\ because\ of\:\ %s = 无法检查Lun{0}会话状态，原因是：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1380
# args: String.valueOf(lunId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ get\ lun\ %s\ maps,\ because\ of\:\ %s = 无法获取Lun{0}映射，因为：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1402
# args: String.valueOf(lunId),lunQuantityInfoRsp.getDetail_err_msg()
fail\ to\ get\ lun\ %s\ remain\ created\ lun\ number,\ because\ of\:\ %s = 无法获取Lun{0}保持创建状态的Lun编号，原因是：{1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:161
# args: 
lun\ map\ id\ is\ mandatory\ can\ not\ be\ null,\ neither\ 0 = Lun映射ID是必需的，不能为空，也不能为0

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:194
# args: 
lun\ id\ is\ illegal = Lun ID非法

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:527
# args: clusterOverview.getCluster_data_state(),clusterOverview.getCluster_healthy_state(),clusterOverview.getCluster_running_state()
XStor\ cluster\ is\ unhealthy,\ cluster\ info[cluster_\ data_\ state\:\ %s,\ cluster_\ healthy_\ state\:\ %s,\ cluster_\ running_\ state\:\ %s] = xstor群集运行不正常，群集信息[群集_数据_状态：{0}，群集_运行正常_状态：{1}，群集_运行_状态：{2}]

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:555
# args: 
illegal\ lun\ id = 非法Lun ID

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:647
# args: 
fail\ to\ get\ image\ cache\ lun\ info = 无法获取镜像缓存Lun信息

# at: src/main/java/org/zstack/storage/primary/ceph/CephHostHeartbeatChecker.java:204
# args: targetHostUuid
host\ %s's\ heartbeat\ is\ not\ updated = 物理机{0}的检测信号未更新

# at: src/main/java/org/zstack/storage/primary/filesystem/AbstractFileSystemHostHeartbeatChecker.java:116
# args: cmd.targetHostUuid
host[uuid\:%s]'s\ heartbeat\ is\ not\ updated = 物理机[uuid：{0}]的检测信号未更新

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:120
# args: vo.getUuid()
all\ ceph\ mons\ of\ primary\ storage[uuid\:%s]\ are\ not\ in\ Connected\ state = 分布式存储[uuid:{0}]所有的监控节点都不是已连接状态

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:164
# args: param.getPrimaryStorageUuid()
CephPrimaryStorage[%s]\ not\ existed! = Ceph镜像服务器监控节点[{0}]不存在

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:201
# args: licMgr.getLicenseType().toString()
current\ license[%s]\ is\ not\ valid\ license\ while\ download\ from\ imagestore\ backupstorage = 当从ImageStore镜像服务器进行下载操作，当前证书[{0}]是无效的证书

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:229
# args: 
System\ can't\ find\ imagestore\ backup\ Storage.\ Please\ do\ not\ set\ imagestore\ backup\ Storage\ server\ IP\ to\ localhost(127.*.*.*), = 系统找不到镜像仓库镜像服务器。请不要设置镜像服务器IP为localhost(127.*.*.*)

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:232
# args: operationSuggestion,greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
%s\ failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = {0}从镜像仓库镜像服务器[hostname:{1}, path: {2}]到本地主存储[uuid:{3}, path: {4}]下载失败，{5}

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:293
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = 无法从本地存储[uuid:{0}, path:{1}]上传数据到镜像仓库[物理机名:{2}]，因为{3}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:238
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ nfs\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = 无法从ImageStore镜像服务器[hostname:{0}, path: {1}]下载数据到NFS主存储[uuid:{2}, path: {3}]，错误细节: {4}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:300
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ NFS[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = 无法从NFS主存储[uuid:{0}, path:{1}]上传数据到镜像仓库[物理机名:{2}]，因为{3}

# at: src/main/java/org/zstack/storage/primary/imagestore/smp/KvmAgentCommandDispatcher.java:70
# args: this.primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ mount\ point\ storage[uuid\:%s]\ are\ disconnected = 找不到任何Connected的物理机去执行操作，看起来加载到shared mount point存储的集群上所有物理机都处于Disconnected状态

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:52
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ no\ MonIP\ available = 无法获取PrimaryStorage[{0}]许可证信息，因为没有可用的monIP

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:62
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ no\ data\ returned = 无法获取PrimaryStorage[{0}]许可证信息，因为未返回任何数据

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:87
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ the\ returned\ data\ does\ not\ have\ an\ active\ license = 无法获取PrimaryStorage[{0}]许可证信息，因为返回的数据没有活动许可证

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:70
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ expired_time\ is\ null = 无法获取PrimaryStorage[{0}]许可证信息，因为过期_时间为空

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:76
# args: license.getExpired_time(),primaryStorageUuid
failed\ to\ parse\ the\ date\ format[%s]\ of\ the\ primaryStorage[%s]\ license\ info = 无法分析PrimaryStorage[{1}]许可证信息的日期格式[{0}]

# at: src/main/java/org/zstack/storage/primary/local/AllocatePrimaryStorageForVmMigrationFlow.java:85
# args: volumeSize,spec.getVmInstance().getUuid()
no\ hosts\ can\ provide\ %s\ bytes\ for\ all\ volumes\ of\ the\ vm[uuid\:%s] = 没有物理机可以为VM[uuid：{1}]的所有卷提供{0}字节

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:336
# args: 
localstorage\ allocator\ failed = localstorage类型的主存储过滤失败

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:356
# args: 
invalid\ uri,\ correct\ example\ is\ file\://$URL;hostUuid\://$HOSTuuid\ or\ volume\://$VOLUMEuuid\  = URI无效，正确示例为file：//$URL；HOSTuuid：//$HOSTuuid或VOLUME：//$VOLUMEuuid

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:369
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = 要在本地主存储上创建卷，必须使用系统标记[{0}]指定要创建卷的物理机

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:88
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ on\ any\ local\ primary\ storage = 云盘[uuid:{0}]不在任一本地主存储上

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:93
# args: msg.getVolumeUuid(),msg.getDestHostUuid()
the\ volume[uuid\:%s]\ is\ already\ on\ the\ host[uuid\:%s] = 云盘[uuid:{0}]已经在物理机[uuid:{1}]上

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:99
# args: msg.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ not\ found = 主存储[uuid:{0}]未找到

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:103
# args: ref.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ disabled\ or\ maintenance\ cold\ migrate\ is\ not\ allowed = 主存储[uuid:{0}]为Disabled或维护状态时不允许冷迁移

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:112
# args: msg.getDestHostUuid(),ref.getPrimaryStorageUuid(),msg.getVolumeUuid()
the\ dest\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s]\ where\ the\ volume[uuid\:%s]\ locates = 目标物理机[uuid:{0}]不在云盘[uuid:{2}]位于的本地主存储[uuid:{1}]上

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:118
# args: msg.getDestHostUuid(),msg.getPrimaryStorageUuid(),physicalThreshold,refVO.getAvailablePhysicalCapacity()
the\ dest\ host[uuid\:%s]\ doesn't\ have\ enough\ physical\ capacity\ due\ to\ the\ threshold\ of\ primary\ storage[uuid\:%s]\ is\ %f\ but\ available\ physical\ capacity\ is\ %d = 目标物理机[uuid:{0}]没有足够的物理容量，因为设置的主存储[uuid:{1}]可用阈值为{2}，但实际可用物理容量是{3}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:125
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ Ready,\ cannot\ migrate\ it = 云盘[uuid:{0}]的状态不是Ready，不能迁移

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:138
# args: vol.getUuid(),vol.getVmInstanceUuid(),vmstate
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ is\ in\ state\ of\ %s,\ please\ stop\ it\ before\ migration = 云盘[uuid:{0}]是云主机[uuid:{1}]的云盘。当前云主机的状态为{2}，请停止后再迁移

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:146
# args: vol.getUuid(),vol.getVmInstanceUuid(),count
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ %s\ data\ volumes\ attached,\ please\ detach\ them\ before\ migration = 云盘[uuid:{0}]是云主机[uuid:{1}]的云盘。当前云主机仍有已挂载的云盘，请卸载后再迁移

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:151
# args: vol.getUuid(),vol.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ ISO\ attached,\ please\ detach\ it\ before\ migration = 卷[uuid：{0}]是云主机[uuid：{1}]的根卷。当前云主机仍连接有ISO，请在迁移前将其分离

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:176
# args: originClusterUuid,clusterUuid,vol.getVmInstanceUuid()
The\ two\ clusters[uuid\:%s,uuid\:%s]\ cannot\ access\ each\ other\ in\ l2\ network\ \ when\ migrate\ the\ vm[uuid\:%s]\ to\ another\ cluster = 两个集群[uuid:{0},uuid:{1}]无法在二层网络中互相访问对方，当迁移云主机[uuid:{2}]从其中一个集群到另一个集群时

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:130
# args: vol.getUuid(),vol.getName(),vol.getVmInstanceUuid()
the\ data\ volume[uuid\:%s,\ name\:\ %s]\ is\ still\ attached\ to\ the\ VM[uuid\:%s].\ Please\ detach\ it\ before\ migration = 云盘[uuid:{0}, 名称: {1}]仍然挂载在云主机[uuid:{2}]上，请在迁移前卸载

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:190
# args: msg.getUrl()
the\ url[%s]\ is\ not\ an\ absolute\ path\ starting\ with\ '/' = url[{0}]不是一个以'/'开头的绝对路径

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:262
# args: msg.getPrimaryStorageUuid()
The\ primary\ storage[uuid\:%s]\ is\ disabled\ cold\ migrate\ is\ not\ allowed = 主存储[uuid:{0}]Disabled时不允许冷迁移

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:540
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ not\ on\ the\ local\ storage\ anymore,it\ may\ have\ been\ deleted = 云盘[uuid:{0}]已经不在本地存储上，可能已经被删除

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1168
# args: msg.getImage().getUuid(),self.getUuid(),JSONObjectUtil.toJsonString(ret.errorCodes)
failed\ to\ download\ image[uuid\:%s]\ to\ all\ hosts\ in\ the\ local\ storage[uuid\:%s].\ %s = 在所有属于本地存储[uuid:{1}]的物理机上，均无法下载镜像[uuid:{0}]。{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:2326
# args: msg.getVolumeUuid(),self.getUuid()
unable\ to\ create\ the\ data\ volume[uuid\:\ %s]\ on\ a\ local\ primary\ storage[uuid\:%s],\ because\ the\ hostUuid\ is\ not\ specified. = 不能在本地主存储[uuid:{1}]上创建云盘[uuid:{0}]，因为物理机uuid没有指定

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:2887
# args: 
No\ Host\ state\ is\ Enabled,\ Please\ check\ the\ availability\ of\ the\ host = 未启用物理机状态，请检查物理机的可用性

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3018
# args: hostUuid,self.getUuid()
host[uuid\:%s]\ cannot\ access\ local\ storage[uuid\:%s],\ maybe\ it\ is\ detached = 物理机[uuid：{0}]无法访问本地存储[uuid：{1}]，它可能已分离

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3042
# args: resUuid,resourceType,self.getUuid()
resource[uuid\:%s,\ type\:\ %s]\ is\ not\ on\ the\ local\ primary\ storage[uuid\:%s] = 资源[uuid：{0}，类型：{1}]不在本地主存储[uuid：{2}]上

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3047
# args: resUuid,resourceType,self.getUuid(),ret
resource[uuid\:%s,\ type\:\ %s]\ on\ the\ local\ primary\ storage[uuid\:%s]\ maps\ to\ multiple\ hypervisor%s = 本地主存储[uuid：{2}]上的资源[uuid：{0}，类型：{1}]映射到多个云主机管理程序{3}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:100
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,clusterUuid
There\ is\ no\ LocalStorage\ primary\ storage[state\=%s,status\=%s]\ on\ the\ cluster[%s],\ when\ the\ cluster\ mounts\ multiple\ primary\ storage,\ the\ system\ uses\ the\ local\ primary\ storage\ by\ default.\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = 在集群[{2}]里没有LocalStorage主存储[state={0},status={1}]，当集群挂载了多个主存储的时候，系统默认的是local主存储。检查主存储的状态并确定是否连接了集群

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:119
# args: psUuid
the\ type\ of\ primary\ storage[uuid\:%s]\ chosen\ is\ not\ local\ storage,\ check\ if\ the\ resource\ can\ be\ created\ on\ other\ storage\ when\ cluster\ has\ attached\ local\ primary\ storage = 被选择的主存储[uuid:{0}]的类型不是本地存储，检查该资源能否在其他存储上被创建当集群已经挂载了本地存储

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:187
# args: requiredPrimaryStorageUuidForDataVolume.getUuid(),requiredPrimaryStorageUuidForDataVolume.getType(),LocalStorageConstants.LOCAL_STORAGE_TYPE
The\ cluster\ mounts\ multiple\ primary\ storage[%s(%s),\ other\ non-LocalStorage\ primary\ storage],\ primaryStorageUuidForDataVolume\ cannot\ be\ specified\ %s = 集群绑定了多个主存储[{0}({1}), 其他的非LocalStorage主存储]，主存储云盘未进行指定{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:126
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ root\ disk\ is\ located = 集群[uuid={0}]绑定了多个主存储[LocalStorage, 其他非LocalStorage主存储]，需要检验下云盘所在的主存储

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:132
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ data\ disk\ is\ located = 集群[uuid={0}]绑定了多个主存储[LocalStorage, 其他非LocalStorage主存储]，需要检验下云盘所在的主存储。

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:404
# args: imageUuid,cachedHostUuids
creation\ rely\ on\ image\ cache[uuid\:%s,\ locate\ host\ uuids\:\ [%s]],\ cannot\ create\ other\ places. = 创建依赖于镜像缓存[uuid：{0}，定位物理机uuid：[{1}]]，无法创建其他位置。

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:462
# args: spec.getVmInventory().getHypervisorType()
local\ storage\ doesn't\ support\ live\ migration\ for\ hypervisor[%s] = 本地存储不支持对虚拟化类型[{0}]进行热迁移

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:678
# args: volume.getUuid(),vm.getUuid(),vm.getRootVolumeUuid(),rootHost,volume.getUuid(),dataHost
cannot\ attach\ the\ data\ volume[uuid\:%s]\ to\ the\ vm[uuid\:%s].\ Both\ vm's\ root\ volume\ and\ the\ data\ volume\ are\ on\ local\ primary\ storage,\ but\ they\ are\ on\ different\ hosts.\ The\ root\ volume[uuid\:%s]\ is\ on\ the\ host[uuid\:%s]\ but\ the\ data\ volume[uuid\:\ %s]\ is\ on\ the\ host[uuid\:\ %s] = 不能加载云盘[uuid:{0}]到云主机[uuid:{1}]。云盘和云盘都在本地主存储上，但他们属于不同的物理机。云盘[uuid:{2}]在物理机[uuid:{3}]上，但云盘[uuid:{4}]在物理机[uuid:{5}]上

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:896
# args: vol.getName(),vol.getUuid(),vol.getPrimaryStorageUuid()
the\ data\ volume[name\:%s,\ uuid\:%s]\ is\ on\ the\ local\ storage[uuid\:%s];\ however,the\ host\ on\ which\ the\ data\ volume\ is\ has\ been\ deleted.\ Unable\ to\ recover\ this\ volume = 云盘[name:{0}, uuid:{1}]在本地存储[uuid:{2}]上；然而物理机内的云盘已经被删除了

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:938
# args: vm.getUuid(),vm.getName(),psuuid
unable\ to\ recover\ the\ vm[uuid\:%s,\ name\:%s].\ The\ vm's\ root\ volume\ is\ on\ the\ local\ storage[uuid\:%s];\ however,\ the\ host\ on\ which\ the\ root\ volume\ is\ has\ been\ deleted = 不能恢复云主机[uuid:{0}, name:{1}]。云主机的云盘在本地存储[uuid:{2}]上；然而物理机内的云盘已经被删除了

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:972
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ data\ volumes\ on\ local\ storage.\ Need\ detach\ all\ data\ volumes\ first. = 无法在本地存储上热迁移挂载了云盘的云主机[uuid:{0}]。需要先手动卸载所有云盘

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:977
# args: vm.getUuid(),vm.getPlatform()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ local\ storage.\ Only\ linux\ guest\ is\ supported.\ Current\ platform\ is\ [%s] = 无法在本地存储上热迁移云主机[uuid:{0}]。只有Linux类型的云主机支持该操作。当前类型为: [{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:982
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ ISO\ on\ local\ storage.\ Need\ detach\ all\ ISO\ first. = 无法在本地存储上实时迁移带有ISO的VM[uuid：{0}]。需要先分离所有ISO。

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:1058
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ data\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ data\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = 要在本地主存储上创建云盘，必须用系统标签[{0}]指定创建云盘的物理机

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:1068
# args: hostUuid,msg.getPrimaryStorageUuid()
the\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s] = 物理机[uuid:{0}] 不属于本地主存储[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:2083
# args: 
root\ image\ has\ been\ deleted,\ cannot\ reimage\ now = 系统镜像已经被删除，无法重制云主机

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3676
# args: makeInitializedFilePath(),hostUuid
cannot\ find\ flag\ file\ [%s]\ on\ host\ [%s],\ it\ might\ not\ mount\ correct\ path = 在物理机[{1}]上找不到标记文件[{0}]，可能是装载路径不正确

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3684
# args: makeInitializedFilePath(),hostUuid,errorCode.getCause().getDetails()
cannot\ find\ flag\ file\ [%s]\ on\ host\ [%s],\ because\:\ %s = 找不到标记文件[{0}]（在物理机[{1}]上），因为：{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3705
# args: makeInitializedFilePath(),hostUuid,errorCode.getCause().getDetails()
cannot\ create\ flag\ file\ [%s]\ on\ host\ [%s],\ because\:\ %s = 无法在物理机[{1}]上创建标志文件[{0}]，因为：{2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmMigrateVmFlow.java:1192
# args: p.volume.getUuid(),p.volume.getName(),dstHostUuid
unable\ to\ create\ an\ empty\ volume[uuid\:%s,\ name\:%s]\ on\ the\ kvm\ host[uuid\:%s] = 不能在物理机[uuid:{2}]上创建空云盘[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:204
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = 从SFTP镜像服务器[hostname:{0}, path: {1}] 下载到本地存储[uuid:{2}, path: {3}]失败，{4}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:253
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:%s],\ %s = 从本地存储[uuid:{0}, path: {1}]上传到SFTP镜像服务器[hostname:{2}, path:{3}]失败, {4}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:159
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
no\ local\ primary\ storage\ can\ satisfy\ conditions[state\:\ %s,\ status\:\ %s]\ or\ contain\ hosts\ satisfying\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = 本地主存储不能满足条件[状态：{0}，状态：{1}]或包含满足条件[状态：{2}，状态：{3}，大小>{4}字节]的物理机

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:134
# args: spec.getRequiredZoneUuid(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
no\ local\ primary\ storage\ in\ zone[uuid\:%s]\ can\ satisfy\ conditions[state\:\ %s,\ status\:\ %s]\ or\ contain\ hosts\ satisfying\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = 区域[uuid：{0}]中的本地主存储不能满足条件[状态：{1}，状态：{2}]，也不包含满足条件[状态：{3}，状态：[4}，大小>{5}字节]的物理机

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:107
# args: spec.getRequiredHostUuid(),HostState.Enabled,HostStatus.Connected,spec.getSize(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected
the\ required\ host[uuid\:%s]\ cannot\ satisfy\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes],\ or\ doesn't\ belong\ to\ a\ local\ primary\ storage\ satisfying\ conditions[state\:\ %s,\ status\:\ %s],\ or\ its\ cluster\ doesn't\ attach\ to\ any\ local\ primary\ storage = 所需的物理机[uuid：{0}]无法满足条件[状态：{1}，状态：{2}，大小>{3}字节]，或者不属于满足条件[状态：{4}，状态：{5}]的本地主存储，或者其群集未连接到任何本地主存储

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:79
# args: spec.getRequiredPrimaryStorageUuid(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
required\ local\ primary\ storage[uuid\:%s]\ cannot\ satisfy\ conditions[state\:\ %s,\ status\:\ %s],\ or\ hosts\ providing\ the\ primary\ storage\ don't\ satisfy\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = 所需的本地主存储[uuid：{0}]无法满足条件[状态：{1}，状态：{2}]，或者提供主存储的物理机不满足条件[状态：{3}，状态：[4}，大小>{5}字节]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:201
# args: ref.getHostUuid(),physicalCapacityMgr.getRatio(ref.getPrimaryStorageUuid())
{the\ physical\ capacity\ usage\ of\ the\ host[uuid\:%s]\ has\ exceeded\ the\ threshold[%s]} = '{物理机[uuid：{0}']的物理容量使用率已超过阈值[{1}]}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:207
# args: 
failed\ allocate\ localstorage = 分配localStorage失败

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:205
# args: resUuid,uuid
Resource[uuid\:%s]\ can\ only\ be\ operated\ on\ host[uuid\:%s],\ but\ the\ host\ has\ been\ deleted = 资源[uuid:{0}]只能在物理机[uuid:{0}]上对其操作，但是该物理机已经被删除了

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:202
# args: resUuid
cannot\ find\ any\ host\ which\ has\ resource[uuid\:%s] = 找不到任何拥有资源[uuid:{0}]的物理机

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:135
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ local\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = 主存储[uuid:{1}]上的物理机[uuid:{0}]没有足够的容量[现在: {2} bytes, 需要: {3}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:82
# args: msg.getResourceUuid()
Invalid\ resourceUuid\ %s = 资源uuid{0}无效

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:88
# args: 
primary\ storage\ uuid\ cannot\ be\ null. = 主存储uuid不能为空。

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:105
# args: volume.getUuid(),runningVmUuids.toString()
volume[uuid\:%s]\ has\ been\ attached\ some\ VM(s)[uuid\:%s]\ which\ are\ not\ Stopped\ and\ not\ running\ on\ the\ specific\ host. = 卷[uuid：{0}]已连接到某些未停止且未在特定物理机上运行的云主机[uuid：{1}]。

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:124
# args: msg.getResourceUuid()
VM[uuid\:%s]\ are\ not\ Stopped\ and\ not\ running\ on\ the\ specific\ host. = 云主机[uuid：{0}]未停止，也未在特定物理机上运行。

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:191
# args: task,hostUuids
Fail\ to\ %s,\ because\ host(s)[uuid\:%s]\ are\ not\ enable\ and\ not\ in\ connected\ status. = {0}失败，因为物理机[uuid：{1}]未启用且未处于连接状态。

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1549
# args: self.getUuid(),hostUuid
cannot\ reserve\ enough\ space\ for\ primary\ storage[uuid\:\ %s]\ on\ host[uuid\:\ %s],\ not\ enough\ physical\ capacity = 无法为物理机[uuid：{1}]上的主存储[uuid：{0}]保留足够的空间，物理容量不足

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1449
# args: 
not\ supported = 不支持

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:216
# args: msg.getResourceType()
ResourceType\ [%s]\ of\ APIRecoverResourceSplitBrainMsg\ is\ invalid. = ApiRecoverResourceSplitBrainMsg的ResourceType[{0}]无效。

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:360
# args: self.getUuid(),self.getName()
the\ mini\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = 小型存储[uuid：{0}，名称：{1}]在连接的群集中找不到任何可用于实例化卷的物理机

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:673
# args: 
can\ not\ determine\ which\ host = 无法确定是哪个物理机

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1364
# args: 
no\ connected\ host\ found,\ mini\ storage\ failed = 未找到连接的物理机，小型存储失败

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1563
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ mini\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = 物理机[uuid：{0}]（属于小型主存储[uuid：{1}]）的容量不足[当前：{2}字节，需要：{3}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageDeactivateVolumeGC.java:75
# args: hostUuid
the\ host[uuid\:%s]\ is\ not\ connected = 物理机[uuid:{0}]不是Connected状态

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageFactory.java:173
# args: hvType,bsType
no\ LocalStorageBackupStorageMediator\ supporting\ hypervisor[%s]\ and\ backup\ storage\ type[%s]\  = 没有LocalStorageBackupStorageMediator支持hypervisor[{0}]和镜像服务器类型[{1}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java:332
# args: volume.getRootImageUuid(),volume.getUuid()
no\ backup\ storage\ can\ get\ image[uuid\:%s]\ of\ volume[uuid\:%s] = 没有备份存储可以获取镜像[uuid：{0}]（属于卷[uuid：{1}]）

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java:343
# args: image.getUuid(),cache.backupStorage.getUuid()
image[uuid\:\ %s]\ has\ no\ image\ ref\ with\ backup\ storage[uuid\:\ %s] = 镜像[uuid：{0}]没有备份存储[uuid：{1}]的镜像引用

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:832
# args: volume.getUuid(),volume.getPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ resize\ volume[uuid\:\ %s]\ on\ mini\ storage[uuid\:\ %s] = 找不到任何可用于调整小型存储[uuid：{1}]上卷[uuid：{0}]大小的物理机

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:925
# args: volumeUuid
volume[uuid\:%s]\ replication\ is\ syncing\ data,\ please\ wait\ until\ it\ is\ finished. = 卷[uuid：{0}]复制正在同步数据，请等待其完成。

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:938
# args: volumeUuid
replication\ network\ status\ of\ volume[uuid\:%s]\ run\ into\ StandAlone,\ but\ host\ are\ all\ Connected,\ please\ recover\ it\ first. = 卷[uuid：{0}]的复制网络状态变为独立运行，但物理机均已连接，请先将其恢复。

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java:73
# args: dir
Invalid\ path\ string\ %s = 路径字符串{0}无效

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java:80
# args: resourceUuid
Still\ cache\ volume\ exists\ on\ ps[uuid\:%s]\ can\ not\ update\ cache\ volume\ url = PS[uuid：{0}]上仍然存在缓存卷，无法更新缓存卷URL

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePathManagerImpl.java:115
# args: resourceUuid,hostUuid
can\ not\ find\ replication\ of\ volume\ %s\ on\ host\ %s = 在物理机{1}上找不到卷{0}的复制

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:141
# args: clusterUuid,msg.getPrimaryStorageUuid(),volume.getUuid()
required\ cluster\ %s\ not\ attached\ to\ primary\ storage\ %s\ for\ volume\ %s\ create = 创建卷{2}所需的群集{0}未连接到主存储{1}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:148
# args: clusterUuid,volume.getUuid()
can\ not\ find\ avaliable\ host\ on\ required\ cluster\ %s\ for\ volume\ %s\ create = 在创建卷{1}所需的群集{0}上找不到可用物理机

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:445
# args: primaryStorageUuid
cannot\ find\ an\ available\ host\ to\ execute\ command\ for\ primary\ storage[uuid\:\ %s] = 找不到可用于执行主存储[uuid：{0}]命令的物理机

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:476
# args: hostUuid
can\ not\ allocate\ storage\ sync\ port\ on\ host\ %s\:\ %s = 无法在物理机{0}上分配存储同步端口：{1}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:622
# args: hostUuids,finalHostUuids
expect\ operate\ on\ hosts[%s]\ but\ only\ host\ %s\ are\ connected\ and\ enabled = 预期在物理机[{0}]上运行，但只有物理机{1}已连接并启用

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniToZBoxBackupStorageMediator.java:91
# args: msg.getPrimaryStorageUuid()
mini\ storage[uuid\:%s]\ has\ to\ be\ empty\ before\ restoring\ bits\ from\ zbox.\ please\ clean\ it\ up. = 从ZBox还原位之前，小型存储[uuid：{0}]必须为空。请把它清理干净。

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:46
# args: url,zoneUuid
there\ has\ been\ a\ nfs\ primary\ storage\ having\ url\ as\ %s\ in\ zone[uuid\:%s] = 区域[uuid:{1}]内已经存在 url 为 {0} 的 NFS 主存储

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:65
# args: 
found\ multiple\ CIDR = 返现多个CIDR

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:78
# args: cidr
invalid\ CIDR\:\ %s = 无效CIDR: {0}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:82
# args: ipAddr,cidr
IP\ address[%s]\ is\ not\ in\ CIDR[%s] = IP地址[{0}]没有在CIDR[{1}]内

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:96
# args: vms.size(),StringUtils.join(vms, "\n")
there\ are\ %s\ running\ VMs\ on\ the\ NFS\ primary\ storage,\ please\ stop\ them\ and\ try\ again\:\n%s\n = 在NFS主存储上有{0}个运行中的VM，请先手动关闭再尝试: \n{1}\n

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:694
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state\ is\ %s = 云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是{1}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:303
# args: 
cannot\ find\ usable\ backend = 无法找到可用的NFS主存储后端

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:362
# args: 
no\ usable\ backend\ found = 无法找到可用的NFS主存储后端

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:520
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getSnapshot().getUuid(),msg.getSnapshot().getName()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s,\ name\:%s] = 没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到快照[uuid:{3}, name:{4}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:551
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getRootImageUuid()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s] = 没有找到挂载到NFS主存储[uuid:{0}, name:{1}]且处于Connected状态的物理机，无法回退云盘[uuid:{2}]到镜像[uuid:{3}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:737
# args: self.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ attach\ to\ any\ cluster = 主存储[uuid:{0}]没有挂载到任何集群

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:968
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ usable\ host\ to\ create\ the\ data\ volume[uuid\:%s,\ name\:%s] = NFS主存储[uuid:{0}, name:{1}]无法找到任何可用的物理机以创建云盘[uuid:{2}, name:{3}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1889
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ hosts\ in\ attached\ clusters\ to\ perform\ the\ operation = NFS主存储[uuid:{0}, name:{1}]不能找到物理机挂载到集群，执行此操作

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1726
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = NFS主存储[uuid:{0}, name:{1}] 没有挂载到任何一个集群，或者挂载到集群的物理机均无法连接

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:115
# args: psUuid,vmUuid,volumeUuid
the\ NFS\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = NFS主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除VM[uuid:{2}]的云盘[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:281
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = 对nfs主存储[uuid:{0}]来说不能发现一个可连接的物理机执行命令

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:272
# args: pri.getUuid()
cannot\ find\ a\ connected\ host\ in\ cluster\ which\ ps\ [uuid\:\ %s]\ attached = 在PS[uuid：{0}]连接的集群中找不到已连接的物理机

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:300
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-NFS\ connection\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = 找不到一个和NFS主存储[uuid:{0}]处于已连接状态的物理机为其执行命令

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:804
# args: msg.getVolume().getUuid()
cannot\ get\ root\ image\ of\ volume[uuid\:%s],\ may\ be\ it\ create\ from\ iso = 无法获取卷[uuid：{0}]的根镜像，它可能是从ISO创建的

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:248
# args: inv.getUuid(),inv.getName(),clusterUuid,versionInCluster,otherVersion,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage[uuid\:%s,\ name\:%s]\ to\ cluster[uuid\:%s].\ Kvm\ host\ in\ the\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ another\ cluster\ that\ has\ kvm\ host\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = 不能挂载主存储[uuid:{0}, name:{1}]到集群[uuid:{2}].集群中的物理机存在[{3}]版本qemu-img；但是主存储已经挂载到另一个物理机拥有[{4}]版本qemu-img的集群。版本大于{5}的qemu-img不兼容版本小于{6}，这将会造成云盘快照操作失败。为了防止qemu-img版本不兼容，请避免挂载主存储到物理机装有不同linux版本的集群

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:323
# args: cmd.getInstallUrl(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ folder[installUrl\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = 无法在KVM物理机[uuid：{1}，IP：{2}]上创建文件夹[InstallUrl：{0}]，原因是{3}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:401
# args: inv.getUuid()
no\ host\ in\ is\ Connected\ or\ primary\ storage[uuid\:%s]\ attach\ no\ cluster = 没有物理机处于Connected状态，或主存储[uuid:{0}]没有挂载到任何集群

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:440
# args: psInv.getUuid(),huuid,reply.isSuccess() ? rsp.getError() : reply.getError()
failed\ to\ ping\ nfs\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = 从物理机[uuid:{1}]Ping NFS主存储[uuid:{0}]失败，原因: {2}。断开该 物理机-主存储 连接

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:879
# args: msg.getHostUuid()
The\ chosen\ host[uuid\:%s]\ to\ perform\ storage\ migration\ is\ lost = 准备存储迁移的物理机[uuid:{0}]失联了

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1017
# args: installPath,inv.getUuid(),rsp.getError()
failed\ to\ check\ existence\ of\ %s\ on\ nfs\ primary\ storage[uuid\:%s],\ %s = 检查nfs主存储中是否存在{0}失败

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1131
# args: volume.getUuid(),volume.getName(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ empty\ volume[uuid\:%s,\ \ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = 不能在物理机[uuid:{2}, ip:{3}]上创建空云盘[uuid:{0},  name:{1}]，因为{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1240
# args: installPath,pinv.getUuid(),rsp.getError()
failed\ to\ delete\ bits[%s]\ on\ nfs\ primary\ storage[uuid\:%s],\ %s,\ will\ clean\ up\ installPath,\ pinv.getUuid(),\ rsp.getError() = 无法删除NFS主存储[uuid：{1}]上的位[{0}]，{2}，将清除InstallPath、PINV.Getuuid（）、RSP.GetError（）

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1302
# args: vol.getUuid(),sinv.getUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = 回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到快照[uuid:{1}]的状态失败，{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1339
# args: vol.getUuid(),vol.getRootImageUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = 回滚在物理机[uuid:{2}, ip:{3}]上的云盘[uuid:{0}]到镜像[uuid:{1}]，{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1383
# args: volume.getUuid(),imageCache.getImageUuid(),rsp.getError()
fails\ to\ create\ root\ volume[uuid\:%s]\ from\ cached\ image[path\:%s]\ because\ %s = 从镜像[path:{1}]创建云盘失败，因为{2}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1541
# args: clusterUuid
no\ hosts\ in\ the\ cluster[uuid\:%s]\ are\ connected = 集群[uuid：{0}]中没有连接任何物理机

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:109
# args: backupStorageInstallPath,greply.getHostname(),pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download[%s]\ from\ SftpBackupStorage[hostname\:%s]\ to\ nfs\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = 从Sftp镜像服务器[hostname:{1}] 下载[{0}]到nfs主存储[uuid:{2}, path:{3}]失败，{4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:165
# args: pinv.getUuid(),primaryStorageInstallPath,hostname,backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ nfs\ primary\ storage[uuid\:%s,\ path\:%s]\ to\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s],\ %s = 从nfs主存储[uuid:{0}, path:{1}]上传数据到STFP镜像服务器[hostname:{2}, path: {3}]失败，{4}

# at: src/main/java/org/zstack/storage/primary/shareblock/ShareBlockHostHeartbeatChecker.java:135
# args: cmd.hostUuid,sentinelHostUuid
shareblock\ says\ host\ %s\ is\ offline\ on\ %s = ShareBlock显示物理机{0}在{1}上处于脱机状态

# at: src/main/java/org/zstack/storage/primary/sharedblock/HaSanlockHostChecker.java:141
# args: cmd.hostIds,sentinelHostUuid
sanlock\ says\ host\ %s\ is\ offline\ on\ %s = SANlock指出物理机{0}在{1}上处于脱机状态

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:110
# args: primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = 找不到任何可以执行操作的已连接状态的物理机，所有的共享存储[uuid:{0}]挂载的集群下的物理机都处于已失联状态

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:80
# args: 
can\ not\ find\ volume\ need\ to\ operate\ shared\ block\ group\ primary\ storage = 找不到能进行共享块存储操作的云盘

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:88
# args: volumeInventory.getUuid(),primaryStorageUuid
KVM\ host\ which\ volume[uuid%s]\ attached\ disconnected\ with\ the\ shared\ block\ group\ storage[uuid\:%s] = 云盘[uuid:{0}]所处的挂载了共享块存储[uuid:{1}]物理机均处于已失联状态

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:98
# args: psUuid
can\ not\ find\ qualified\ kvm\ host\ for\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = 无法找到满足条件的物理机来对共享块存储[uuid: {0}]进行操作

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:81
# args: sharedBlockVO.getSharedBlockGroupUuid(),scsiLunVO.getWwid()
primary\ storage[uuid\:\ %s]\ has\ attached\ the\ scsi\ lun[wwid\:\ %s] = 主存储[uuid：{0}]已连接SCSI Lun[WWID：{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:105
# args: msg.getVmInstanceUuid()
the\ vm[uuid\:\ %s]\ does\ not\ has\ additional\ qmp\ socket,\ it\ may\ because\ of\ the\ vm\ start\ without\ the\ global\ config[vm.additionalQmp]\ enabled,\ please\ make\ sure\ it\ enabled\ and\ reboot\ vm\ in\ zstack = VM[uuid：{0}]没有其他QMP套接字，这可能是因为VM在未启用全局配置[VM.AdditionalQMP]的情况下启动，请确保其已启用并在ZStack中重新启动VM

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:130
# args: 
must\ specify\ at\ least\ one\ disk\ when\ add\ shared\ block\ group\ primary\ storage = 添加共享块存储时必须指定至少一个云盘

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:142
# args: vo.getUuid(),vo.getDiskUuid(),vo.getDescription(),vo.getSharedBlockGroupUuid()
shared\ block[uuid\:%s,\ diskUuid\:%s,\ description\:%s]\ already\ added\ to\ shared\ block\ group[uuid\:%s]in\ new\ shared\ block\ group = 共享块[uuid:{0}, diskUuid:{1}, 描述:{2}]，已经添加到共享块组[uuid:{3}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:165
# args: msg.getUuid()
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ can\ not\ resize = SharedBlock主存储上的共享云盘[uuid: {0}]暂时不支持扩容

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:234
# args: volumeUuid,notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = SharedBlock存储上的共享云盘[uuid: {0}]加载到了不是停止状态的云主机[uuid: {1}]，请先从云主机卸载或将云主机停止

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1665
# args: psUuid,imageFormat
cannot\ find\ proper\ hypervisorType\ for\ primary\ storage[uuid\:%s]\ to\ handle\ image\ format\ or\ volume\ format[%s] = 对主存储[uuid:{0}]来说不能发现合适的管理程序类型来处理镜像格式或云盘格式[{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:344
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = 共享挂载点主存储[uuid:{0}, name:{1}]在挂载的集群中找不到任何可用的物理机来实例化云盘

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:697
# args: getSelfInventory().getUuid()
can\ not\ found\ any\ cluster\ attached\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %S] = 找不到任何挂载了共享块主存储[uuid: %S]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1100
# args: self.getUuid(),self.getName()
the\ shared\ block\ group\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = SharedBlock主存储[uuid:{0}, name:{1}] 没有挂载到任何一个集群，或者挂载到集群的物理机均无法连接

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1179
# args: self.getUuid(),self.getName()
the\ SharedBlock\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = SharedBlock主存储[uuid：{0}，名称：{1}]尚未连接到任何集群，或者已连接的集群中没有物理机

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1369
# args: 
empty\ migrateVolumeStructs\ in\ migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg! = MigrateEvoluesBetweenSharedBlockGroupPrimaryStorageMsg中的MigrateEvolumeStructs为空！

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1375
# args: 
no\ volume\ in\ migrateVolumeStructs\ in\ migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg! = MigrateEvolumesBetweenSharedBlockGroupPrimaryStorageMsg中的MigrateEvolmeStructs中没有卷！

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:112
# args: newValue
the\ value[%s]\ is\ not\ power\ of\ 2 = 输入值[{0}]不是2的幂次

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:444
# args: pri.getUuid()
cannot\ find\ an\ available\ host\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = 找不到加载了共享块存储的[uuid:{0}]可用的物理机

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:468
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ connected\ shared\ block\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = 找不到处于连接状态的加载了共享块存储[uuid:{0}]物理机执行命令

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:515
# args: vmvo.getHostUuid(),volumeInventory.getUuid(),volumeInventory.getPrimaryStorageUuid()
the\ host[uuid\:\ %s]\ running\ on\ is\ not\ available\ to\ resize\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = 共享块存储[uuid: {2}]上的云盘[uuid : {1}]运行在物理机[uuid : {0}]上，但状态无法执行扩容操作

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:524
# args: psUuid
primary\ storage[uuid\:%s]\ not\ found = 找不到主存储[uuid：{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:541
# args: volUuid
volume[uuid\:%s]\ not\ found = 未找到卷[uuid：{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockImageStoreBackend.java:81
# args: volumeUuid
can\ not\ get\ cluster\ uuid\ of\ volume\ %s = 无法获取卷{0}的群集uuid

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1413
# args: img.getUuid(),img.getName(),self.getZoneUuid()
the\ image[uuid\:%s,\ name\:\ %s]\ is\ not\ available\ to\ download\ on\ any\ backup\ storage\:\n1.\ check\ if\ image\ is\ in\ status\ of\ Deleted\n2.\ check\ if\ the\ backup\ storage\ on\ which\ the\ image\ is\ shown\ as\ Ready\ is\ attached\ to\ the\ zone[uuid\:%s] = 不能从镜像服务器中下载镜像[uuid:%s, name: %s]\n1.检查镜像是否处于被删除状态\n2.检查镜像处于就绪状态的镜像服务器是否挂载到区域[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1251
# args: volume.getUuid(),volume.getVmInstanceUuid(),state
the\ volume[uuid;%s]\ is\ attached\ to\ a\ VM[uuid\:%s]\ which\ is\ in\ state\ of\ %s,\ cannot\ do\ the\ snapshot\ merge = 云盘[uuid;{0}] 挂载到处于{2}状态的云主机，不能合并快照

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1907
# args: clusterUuid
no\ connected\ host\ found\ in\ the\ cluster[uuid\:%s] = cluster[uuid:{0}]不存在已连接的物理机

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5893
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state[%s] = 云主机[uuid:{0}]不是运行中、已暂停或者已停止状态，现在的状态是[{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2798
# args: backupStorageUuid
cannot\ find\ backup\ storage[uuid\:%s] = 找不到镜像服务器[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2260
# args: msg.getVolumeUuid()
can\ not\ find\ volume[uuid\:\ %s] = 找不到云盘[uuid: {0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:773
# args: 
shared\ volume\ not\ support\ thin\ provisioning = 共享云盘不支持精简配置

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1340
# args: volume.getUuid()
not\ support\ online\ merge\ snapshot\ for\ shareable\ volume[uuid\:\ %s]\ on\ sharedblock = 不支持对共享块存储上的共享云盘[uuid: {1}]做在线合并快照，请关机或卸载后操作

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1429
# args: img.getUuid(),img.getName()
the\ image[uuid\:\ %s,\ name\:%s]\ is\ not\ found\ on\ any\ backup\ storage = 在任何备份存储上都找不到镜像[uuid：{0}，名称：{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2043
# args: ret.firstAccessHosts.stream().map( h -> h.hostUuid).collect(Collectors.toList())
hosts[uuid\:%s]\ have\ the\ disk\ uuid\ of\ shared\ block,\ but\ actually\ different\ storage. = 物理机[uuid:{0}]已经加载了相同uuid的共享块，但实际上是不同的存储

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2400
# args: 
not\ support\ convert\ thin\ volume\ to\ thick\ volume\ yet = 尚不支持将精简卷转换为密集卷

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2453
# args: 
expected\ status\ is\ %s\ and\ current\ status = 预期状态为{0}，当前状态为

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3409
# args: spec.getVmInventory().getUuid(),String.join(",", psUuids)
VM[uuid\:%s]\ has\ multiple\ ISOs\ from\ different\ primary\ storage\:\ %s = VM[uuid:{0}]挂载了来自不同主存储:{1}的ISO

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3584
# args: volume.getUuid()
QCow2\ shared\ volume[uuid\:%s]\ is\ not\ supported = 不支持QCOW2共享云盘[uuid：{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4650
# args: msg.getVolumeUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ take\ snapshot\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = 无法找到合适的物理机来对共享块存储[uuid : {1}]上的云盘[uuid: {0}]执行快照操作

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4708
# args: msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ hosts\ both\ connect\ to\ primary\ storage[uuid\:\ %s]\ and\ primary\ storage[uuid\:\ %s] = 无法找到同时连接主存储[uuid: {0}]和主存储[uuid: {1}]的物理机

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4663
# args: 
only\ support\ full = 共享块存储目前只支持全量快照

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4691
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ volume[uuid\:\ %s]\ between\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = 无法找到合适的物理机来将云盘[uuid: {0}]在共享块存储[uuid : {1}]和共享块存储[uuid: {2}]之间迁移

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4700
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getTargetPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = 无法找到合适的物理机来将云盘[uuid: {0}]在共享块存储[uuid : {1}]和共享块存储[uuid: {2}]之间迁移

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4753
# args: msg.getPrimaryStorageUuid()
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = 无法找到任何已连接的物理机来执行操作，所有连接共享块存储[uuid: {1}]的物理机均处于失联状态

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4971
# args: snapshotVO.getUuid(),volumeVO.getUuid()
cannot\ shrink\ snapshot\ %s,\ because\ volume\ %s\ not\ ready = 无法收缩快照{0}，因为卷{1}未就绪

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5147
# args: snapshotVO.getUuid(),instanceVO.getUuid()
cannot\ shrink\ snapshot\ %s,\ beacuse\ vm\ %s\ not\ in\ Running/Stopped\ state = 无法收缩快照{0}，因为VM{1}未处于正在运行/已停止状态

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5394
# args: vmVolumesStruct.vmInstanceVO.getUuid()
get\ null\ install\ path\ in\ snapshot\ for\ vm\ %s = 在云主机{0}的快照中获取Null安装路径

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5707
# args: msg.getDstPath(),msg.getVolume().getUuid()
dest\ path\ %s\ not\ belong\ to\ volume\ %s\ any\ snapshot = 目标路径{0}不属于任何快照的卷{1}

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkCancelMigrateVolumeFlow.java:33
# args: 
migrate\ volume\ without\ snapshot\ on\ shared\ block\ is\ not\ support\ to\ cancel. = 不支持取消在共享数据块上迁移不带快照的卷。

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:131
# args: reply1.getTrashId(),dstPsUuid,dstVolumeFolderPath,reply1.getResourceUuid()
found\ trashId(%s)\ in\ PrimaryStorage\ [%s]\ for\ the\ migrate\ installPath[%s].\ Please\ clean\ it\ first\ by\ 'APICleanUpTrashOnPrimaryStorageMsg'\ if\ you\ insist\ to\ migrate\ the\ volume[%s] = 在主存储[{1}]的回收数据({0})中己存在要迁移的目标路径[{2}]，如果要继续迁移云盘[{3}]，请先调用'APICleanUpTrashOnPrimaryStorageMsg'来手动清理该回收数据

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:271
# args: volumeUuid,volumeVO.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = 对云盘[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量，但现在只有{2}的空余容量

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:202
# args: imageUuid,zoneUuid,zoneUuid
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ whether\ the\ backup\ storage\ is\ attached\ to\ the\ zone[uuid\:%s]\n2.\ whether\ the\ backup\ storage\ is\ in\ connected\ status;\ try\ to\ reconnect\ it\ if\ not = 在所有的已连接区域[uuid:{1}]的镜像服务器未找到镜像[uuid:{0}]。建议进行如下检查: \n1.镜像服务器是否连接到区域[uuid:{2}]\n2.镜像服务器是否是已连接状态，如果不是尝试重新连接

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:225
# args: image.getUuid(),volumeUuid,image.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ image[uuid\:\ %s]\ download\ while\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = 对云盘[uuid: {0}]存储迁移需要目标主存储具有至少{1}的空余容量来下载镜像cache，但现在只有{2}的空余容量

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkRollbackMigrateVolumeFlow.java:70
# args: srcPsUuid
data\ on\ source\ ps[uuid\:\ %s]\ has\ been\ discarded,\ not\ support\ rollback = 源主存储[uuid:{0}]上的数据已经被清理，无法回滚

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2415
# args: cmd.volumeUuid,msg.getVolume().getInstallPath(),cmd.srcDir
why\ volume[uuid\:%s,\ installPath\:%s]\ not\ in\ directory\ %s = 为什么卷[uuid：{0}，InstallPath：{1}]不在目录{2}中

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2184
# args: ret.firstAccessHostUuids
hosts[uuid\:%s]\ have\ the\ same\ mount\ path,\ but\ actually\ mount\ different\ storage. = 物理机[uuid:{0}]有相同挂载路径，但是实际上挂载在不同的存储上

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2372
# args: msg.getHostUuid(),msg.getPrimaryStorageUuid()
host[uuid\:%s]\ might\ mount\ storage\ which\ is\ different\ from\ SMP[uuid\:%s],\ please\ check\ it = 物理机[uuid：{0}]可能装载与SMP[uuid：{1}]不同的存储，请检查

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:1139
# args: volumeUuid,infos.toString()
volume[uuid\:%s]\ has\ reference\ volume[%s],\ can\ not\ change\ volume\ type\ before\ flatten\ them\ and\ their\ descendants = 卷[uuid：{0}]具有引用卷[{1}]，在展平它们及其后代之前无法更改卷类型

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:597
# args: 
not\ supported\ operation = 不支持的操作

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:109
# args: psUuid,vmUuid,volumeUuid
the\ SMP\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = SMP主存储[uuid:{0}]没有挂载到任何集群，无法彻底删除云主机[uuid:{2}]的云盘[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:303
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = 找不到一个已连接状态的物理机为SMP主存储[uuid:{0}]执行命令

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:323
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-SMP\ connection\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = 找不到一个和SMP主存储[uuid:{0}]处于已连接状态的物理机为其执行命令

# at: src/main/java/org/zstack/storage/primary/smp/SharedMountPointApiInterceptor.java:25
# args: 
\ the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = URL包含了一个无效的目录[/dev or /proc or /sys]

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:96
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ not\ exists. = 无法取消删除作业。卷[uuid：{0}]不存在。

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:100
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ not\ attached\ to\ any\ vm,\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = 无法取消删除作业。卷[uuid：{0}]未连接到任何VM，脱机快照删除不支持取消。

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:106
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ attached\ vm\ not\ exists,\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = 无法取消删除作业。卷[uuid：{0}]连接的VM不存在，脱机快照删除不支持取消。

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:111
# args: VmInstanceState.Running
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ attached\ vm\ not\ in\ state\ %s\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = 无法取消删除作业。卷[uuid：{0}]连接的VM未处于状态{1}脱机快照删除不支持取消。

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:100
# args: disabledSnapshotUuids
volume\ snapshot[uuids\:%s]\ is\ in\ state\ Disabled,\ cannot\ revert\ volume\ to\ it = 卷快照[uuid：{0}]处于禁用状态，无法将卷恢复为该状态

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:121
# args: VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Can\ not\ take\ memory\ snapshot,\ expected\ vm\ states\ are\ [%s,\ %s] = 无法获取内存快照，预期的VM状态为[{0}，{1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:188
# args: msg.getUuid(),state
volume\ snapshot[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = 云盘快照[uuid:{0}]出于状态{1}，不能恢复云盘到该快照状态

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:193
# args: msg.getUuid()
original\ volume\ for\ snapshot[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = 快照[uuid:{0}]的原版云盘已经被删除，不能恢复云盘到该快照

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:211
# args: msg.getVolumeUuid(),snapshotVO.getVolumeUuid()
not\ support\ delete\ snapshots\ on\ different\ volumes[uuid\:\ %s,\ %s] = 不支持删除不同卷上的快照[uuid：{0}，{1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:215
# args: msg.getUuids()
can\ not\ find\ volume\ uuid\ for\ snapshosts[uuid\:\ %s] = 找不到快照物理机[uuid：{0}]的卷uuid

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:834
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),volumeSize
after\ subtracting\ reserved\ capacity[%s],\ there\ is\ no\ primary\ storage\ having\ required\ size[%s\ bytes],\ may\ be\ the\ threshold\ of\ primary\ storage\ physical\ capacity\ setting\ is\ lower = 减去保留容量[{0}]后，没有具有所需大小[{1}字节]的主存储，可能是主存储物理容量设置的阈值较低

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:617
# args: maxIncrementalSnapshotNum,vo.getVolumeUuid()
Unsupported\ maximum\ snapshot\ number\ (%d)\ for\ volume\ [uuid\:%s] = 不支持卷[uuid：{1}]的最大快照数（{0}）

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1044
# args: primaryStorageUuid,vol.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ support\ volume\ snapshot;\ cannot\ create\ snapshot\ for\ volume[uuid\:%s] = 主存储[uuid:{0}]不能支持云盘快照，不能为云盘[uuid:{1}]创建快照

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1010
# args: vol.getPrimaryStorageUuid()
cannot\ find\ type\ for\ primaryStorage\ [%s] = 找不到PrimaryStorage[{0}]的类型

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1107
# args: uuid
cannot\ find\ snapshot\:\ %s = 找不到快照：{0}

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1176
# args: msg.getResourceType()
this\ resource\ type\ %s\ does\ not\ support\ querying\ memory\ snapshot\ references = 此资源类型{0}不支持查询内存快照引用

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:162
# args: currentRoot.getUuid(),currentRoot.getName()
cannot\ find\ volume\ snapshot[uuid\:%s,\ name\:%s],\ it\ may\ have\ been\ deleted\ by\ previous\ operation = 不能创建云盘快照[uuid:{0}, name:{1}]，该快照可能已经被以前的操作删除

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:418
# args: refVolUuids
snapshot\ or\ its\ desendant\ has\ reference\ volume[uuids\:%s] = 快照或其目标具有引用卷[uuid：{0}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1004
# args: failSnapshot.getUuid(),failSnapshot.getName(),evt
failed\ to\ change\ status\ of\ volume\ snapshot[uuid\:%s,\ name\:%s]\ by\ status\ event[%s] = 通过状态事件[{2}]改变云盘快照[uuid:{0}, name:{1}]失败

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1847
# args: volumeInventory.getUuid(),currentRoot.getUuid(),vmUuid,state
unable\ to\ reset\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s],\ the\ vm[uuid\:%s]\ volume\ attached\ to\ is\ not\ in\ Stopped\ state,\ current\ state\ is\ %s = 不能重置云盘[uuid:{0}]到快照[uuid:{1}]状态，云盘的云主机[uuid:{2}]未处于停止状态，当前状态是{3}

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:2228
# args: currentRoot.getUuid()
current\ snapshot\:%s\ is\ not\ latest\ snapshot,\ cannot\ mark\ as\ volume = 当前快照：{0}不是最新的快照，无法标记为卷

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupBase.java:282
# args: ext.getArchiveBundleCanonicalName()
no\ bundle\ found\ for\ type\:%s = 未找到类型为{0}的包

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:89
# args: String.join(", ", deletedSnapshotInfos)
snapshot(s)\ %s\ in\ the\ group\ has\ been\ deleted,\ can\ only\ revert\ one\ by\ one. = 快照组里的快照{0}已经被删除了，仅能单盘恢复。

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:93
# args: String.join(", ", detachedVolInfos)
volume(s)\ %s\ is\ no\ longer\ attached,\ can\ only\ revert\ one\ by\ one.\ If\ you\ need\ to\ group\ revert,\ please\ re-attach\ it. = 云盘{0}已被卸载，仅能单盘恢复；如果需要整组恢复，请重新加载再执行操作

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:101
# args: volInfos
new\ volume(s)\ %s\ attached\ after\ snapshot\ point,\ can\ only\ revert\ one\ by\ one.\ If\ you\ need\ to\ group\ revert,\ please\ detach\ it. = 在快照点之后加载了新的云盘{0}，仅能单盘恢复；如果需要整组恢复，请先卸载再执行操作

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:292
# args: 
Can't\ attach\ volume\ to\ VM,\ no\ qualified\ cluster = 不能加载云盘到云主机上，没有可用集群

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:407
# args: psUuid,msg.getPrimaryStorageUuid()
primaryStorageUuid\ conflict,\ the\ primary\ storage\ specified\ by\ the\ disk\ offering\ is\ %s,\ and\ the\ primary\ storage\ specified\ in\ the\ creation\ parameter\ is\ %s = PrimaryStorageuuid冲突，磁盘产品指定的主存储为{0}，而创建参数中指定的主存储为{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:156
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ current\ is\ %s,\ can't\ create\ snapshot = 云盘[uuid:{0}]未出于就绪状态，当前是{1}，不能创建快照

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:126
# args: msg.getVolumeUuid(),type
volume[uuid\:%s,\ type\:%s],\ can't\ create\ snapshot = 卷[uuid：{0}，类型：{1}]，无法创建快照

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:131
# args: msg.getVolumeUuid(),state
volume[uuid\:%s]\ is\ not\ in\ state\ Enabled,\ current\ is\ %s,\ can't\ create\ snapshot = 卷[uuid：{0}]未处于启用状态，当前为{1}，无法创建快照

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:150
# args: vmvo.getState().toString(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Can\ not\ take\ memory\ snapshot,\ vm\ current\ state[%s],\ but\ expect\ state\ are\ [%s,\ %s] = 无法获取内存快照，VM当前状态为[{0}]，但预期状态为[{1}，{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:183
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ deleted.\ This\ is\ operation\ is\ to\ recover\ a\ deleted\ data\ volume = 云盘[uuid:{0}]未处于删除状态。此操作将覆盖一个被删除的云盘

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:319
# args: vol.getUuid()
the\ volume[uuid\:%s]\ is\ in\ status\ of\ deleted,\ cannot\ do\ the\ operation = 云盘[uuid:{0}]已经被删除，不能执行此操作

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:201
# args: msg.getImageUuid(),ImageMediaType.DataVolumeTemplate,type
image[uuid\:%s]\ is\ not\ %s,\ it's\ %s = 镜像[uuid:{0}]不是{1}，而是{2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:205
# args: img.getUuid(),img.getState()
image[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = 镜像不能启用，此镜像是{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:209
# args: img.getUuid(),img.getStatus()
image[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = 镜像未准备就绪，此镜像是{1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:221
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ Root\ volume,\ can\ not\ be\ attach\ to\ vm = 云盘[uuid:{0}]是一个云盘，不能被手动挂载到其他云主机

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:228
# args: msg.getVolumeUuid(),state,VolumeState.Enabled
volume[uuid\:%s]\ is\ in\ state[%s],\ data\ volume\ can\ only\ be\ attached\ when\ state\ is\ %s = 云盘[uuid:{0}]处于[{1}]状态，云盘只能在处于{2}状态的时候挂载

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:233
# args: msg.getVolumeUuid(),status,VolumeStatus.Ready,VolumeStatus.NotInstantiated
volume[uuid\:%s]\ is\ in\ status[%s],\ data\ volume\ can\ only\ be\ attached\ when\ status\ is\ %s\ or\ %S = 云盘[uuid:{0}]处于[{1}]，云盘只能在处于{2}或%S状态的时候挂载

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:240
# args: msg.getVolumeUuid()
data\ volume[uuid\:%s]\ is\ not\ attached\ to\ any\ vm,\ can't\ detach = 云盘没有被挂载到任何云主机上，不能卸载

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:244
# args: msg.getVolumeUuid()
to\ detach\ shareable\ data\ volume[uuid\:%s],\ vm\ uuid\ is\ needed. = 卸载共享云盘[uuid:{0}]需要云主机的uuid

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:249
# args: vol.getUuid(),vol.getName(),vol.getType()
the\ volume[uuid\:%s,\ name\:%s,\ type\:%s]\ can't\ detach\ it = 卷[uuid：{0}，名称：{1}，类型：{2}]无法将其分离

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:305
# args: msg.getVmInstanceUuid(),msg.getVolumeUuid()
the\ vm[uuid\:%s]\ doesn't\ support\ to\ online\ attach\ volume[%s]\ on\ the\ basis\ of\ that\ the\ image\ platform\ type\ of\ the\ vm\ is\ other\  = 云主机[uuid:{0}]不支持在线挂载云盘[{1}]。因为这台云主机的基础镜像平台类型为“其他”

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:310
# args: vol.getUuid(),vol.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ Root\ Volume,\ can't\ attach\ it = 不能挂载云盘[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:315
# args: vol.getUuid()
data\ volume[uuid\:%s]\ is\ Disabled,\ can't\ attach = 云盘已被禁用，不能挂载

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:323
# args: vol.getUuid()
data\ volume[uuid\:%s]\ has\ been\ attached\ to\ some\ vm,\ can't\ attach\ again = 云盘[uuid:{0}]已经被加载上云主机了，不能再次加载

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:328
# args: VolumeStatus.Ready,VolumeStatus.NotInstantiated,vol.getStatus()
data\ volume\ can\ only\ be\ attached\ when\ status\ is\ [%s,\ %s],\ current\ is\ %s = 云盘仅能当处于[{0}, {1}]状态挂载，当前状态是{2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:336
# args: vol.getUuid(),vol.getFormat(),hvTypes,msg.getVmInstanceUuid(),hvType
data\ volume[uuid\:%s]\ has\ format[%s]\ that\ can\ only\ be\ attached\ to\ hypervisor[%s],\ but\ vm[uuid\:%s]\ has\ hypervisor\ type[%s].\ Can't\ attach = 只有[{1}]格式的云盘[uuid:{0}]才能被挂载到管理程序[{2}]，但是云主机是[{4}]类型的管理程序，云盘不能挂载到该云主机

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:349
# args: hvType,maxDataVolumeNum,count,msg.getVmInstanceUuid()
hypervisor[%s]\ only\ allows\ max\ %s\ data\ volumes\ to\ be\ attached\ to\ a\ single\ vm;\ there\ have\ been\ %s\ data\ volumes\ attached\ to\ vm[uuid\:%s] = [{0}]管理程序仅允许最大不超过{1}云盘挂载到单个云主机。{2} data volumes已经挂载到云主机[uuid:{3}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:367
# args: hostUuid,vol.getPrimaryStorageUuid()
Can\ not\ attach\ volume\ to\ vm\ runs\ on\ host[uuid\:\ %s]\ which\ is\ disconnected\ with\ volume's\ storage[uuid\:\ %s] = 无法将卷附加到物理机[uuid：{0}]上运行的VM，该物理机已与卷的存储[uuid：{1}]断开连接

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:378
# args: msg.getUuid()
it's\ not\ allowed\ to\ backup\ root\ volume,\ uuid\:%s = 备份云盘不被允许，uuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:387
# args: 
unexpected\ disk\ size\ settings = 意外的磁盘大小设置

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:427
# args: msg.getVolumeUuid(),type
volume[uuid\:%s,\ type\:%s]\ can't\ be\ deleted = 无法删除卷[uuid：{0}，类型：{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:432
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ already\ in\ status\ of\ deleted = 云盘[uuid:{0}]早已处于被删除状态

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:438
# args: msg.getVolumeUuid(),hostUuid
can\ not\ delete\ volume[%s],\ because\ volume\ attach\ to\ host[%s] = 无法删除卷[{0}]，因为卷连接到物理机[{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:453
# args: msg.getUuid()
it's\ not\ allowed\ to\ change\ state\ of\ root\ volume,\ uuid\:%s = 不能改变云盘状态，uuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:461
# args: msg.getVolumeUuid(),hostUuid
can\ not\ change\ volume[%s]\ state,\ because\ volume\ attach\ to\ host[%s] = 无法更改卷[{0}]状态，因为卷连接到物理机[{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:469
# args: msg.getVolumeUuid(),msg.getHostUuid(),hostStatus
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ host[status\:%s]\ is\ not\ connected = 无法将云盘[{0}]挂载到物理机[{1}]，因为物理机[status:{2}]未连接

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:474
# args: 
mount\ path\ must\ be\ absolute\ path = 装载路径必须是绝对路径

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:491
# args: msg.getVolumeUuid(),msg.getHostUuid(),hostUuid
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ volume\ is\ attaching\ to\ host[%s] = 无法将云盘[{0}]挂载到物理机[{1}]，因为云盘正在挂载到物理机[{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:495
# args: msg.getVolumeUuid(),msg.getHostUuid(),msg.getVolumeUuid(),mountPath,hostUuid
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ the\ volume[%s]\ occupies\ the\ mount\ path[%s]\ on\ host[%s] = 无法将云盘[{0}]挂载到物理机[{1}]，因为云盘[{2}]在物理机[{4}]上占用了挂载路径[{3}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:505
# args: msg.getVolumeUuid(),msg.getHostUuid(),msg.getMountPath()
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ the\ another\ volume\ occupies\ the\ mount\ path[%s] = 无法将云盘[{0}]挂载到物理机[{1}]，因为另一个云盘占用了挂载路径[{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:512
# args: msg.getVolumeUuid()
can\ not\ detach\ volume[%s]\ from\ host.\ it\ may\ have\ been\ detached = 无法从物理机分离卷[{0}]。它可能已经分离了。

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:520
# args: msg.getVolumeUuid()
cannot\ flatten\ a\ shareable\ volume[uuid\:%s] = 无法平整可共享的卷[uuid：{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:531
# args: msg.getUuid()
can\ not\ found\ in\ used\ snapshot\ tree\ of\ volume[uuid\:\ %s] = 在卷[uuid：{0}]的已使用快照树中找不到

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:541
# args: 
cannot\ undo\ not\ latest\ snapshot = 无法撤消不是最新的快照

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:200
# args: self.getRootImageUuid()
cannot\ find\ image\ cache[imageUuid\:\ %s]\ for\ reinit\ volume = 找不到重新初始化卷的镜像缓存[imageUuid：{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:843
# args: self.getUuid(),self.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ yet,\ can't\ expunge\ it = 云盘[uuid:{0}, name:{1}]仍未被删除，不能清除该云盘

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:1780
# args: 
volume[uuid%s]\ should\ be\ attached. = 应附加卷[uuid{0}]。

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:1866
# args: 
only\ support\ detached\ volume,\ use\ SetVmBootVolumeMsg\ instead. = 仅支持分离卷，请改用SetVMBootVolumeMsg。

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:166
# args: msg.getPrimaryStorageUuid()
get\ primaryStorage\ %s\ type\ failed = 获取PrimaryStorage{0}类型失败

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:170
# args: psType
primaryStorage\ type\ [%s]\ not\ support\ shared\ volume\ yet = 主存储类型[{0}]尚不支持共享云盘

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:296
# args: template.getUuid(),template.getName()
the\ image[uuid\:%s,\ name\:%s]\ has\ been\ deleted\ on\ all\ backup\ storage = 镜像[uuid:{0}, name:{1}]已经从所有的镜像服务器中删除

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:313
# args: template.getUuid(),msg.getPrimaryStorageUuid()
cannot\ find\ a\ backup\ storage\ on\ which\ the\ image[uuid\:%s]\ is\ that\ satisfies\ all\ conditions\ of\:\ 1.\ has\ state\ Enabled\ 2.\ has\ status\ Connected.\ 3\ has\ attached\ to\ zone\ in\ which\ primary\ storage[uuid\:%s]\ is = 无法找到一个镜像[uuid:{0}]所在的镜像服务器符合全部的下列条件: 状态启动[state:Enabled]，已连接[status:Connected]，被挂载到主存储[uuid:{1}]所在的区域中

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:868
# args: 
target\ volume\ is\ expunged\ during\ volume\ creation = 目标卷在卷创建过程中被删除

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:1106
# args: VolumeFactory.class.getSimpleName()
there\ should\ not\ be\ more\ than\ one\ %s\ implementation. = 不允许超过一种实现

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:231
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ root\ volume = 云盘[uuid:{0}]不是云盘

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:95
# args: IOTHREAD_QEMU_VERSION,qemuVersion,finalHostUuid
iothread\ need\ qemu\ version\ >\=\ %s,\ but\ %s\ on\ host[%s]. = IOThread需要QEMU版本>={0}，但物理机[{2}]上需要{1}。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:103
# args: IOTHREAD_LIBVIRT_VERSION,libvirtVersion,finalHostUuid
iothread\ need\ libvirt\ version\ >\=\ %s,\ but\ %s\ on\ host[%s]. = IOThread需要libvirt版本>={0}，但物理机[{2}]上需要{1}。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:108
# args: msg.getVolumeUuid()
root\ volume[%s]\ cannot\ set\ iothreadpin. = 根卷[{0}]无法设置ioThreadPin。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:115
# args: msg.getIoThreadId(),msg.getVolumeUuid(),pinInfo[0]
current\ iothread\ id[%s]\ is\ not\ the\ same\ as\ attached\ vol[%s]\ iothread[%s]. = 当前ioThread ID[{0}]与附加的卷[{1}]ioThread[{2}]不同。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:131
# args: msg.getUuid()
snapshot\ validation\ is\ unsupported\ for\ volume[uuid\:\ %s].\ Volume\ should\ be\ attached\ to\ vm = 卷[uuid：{0}]不支持快照验证。卷应连接到云主机

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:139
# args: msg.getUuid(),VmInstanceState.Running,VmInstanceState.Paused
snapshot\ validation\ is\ unsupported\ for\ volume[uuid\:\ %s].\ Attached\ vm\ is\ not\ in\ state\ of\ [%s,\ %s] = 卷[uuid：{0}]不支持快照验证。连接的云主机未处于[{1}，{2}]状态

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:149
# args: volumeUuid
volume[uuid\:%s]\ can\ not\ found = 未找到卷[uuid：{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:156
# args: volumeUuid,volumeVOS.get(0).getUuid(),volumeVO.getVmInstanceUuid(),volumeVOS.get(0).getVmInstanceUuid()
not\ support\ take\ snapshots\ volume[uuid\:%s,\ uuid\:%s]\ on\ different\ vms[uuid\:%s,\ uuid\:%s] = 不支持在不同的云主机[uuid：{2}，uuid：{3}]上拍摄卷[UUId：{0}，UUId：{1}]的快照

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:163
# args: volumeUuid
volume[uuid\:%s]\ is\ not\ ready = 卷[uuid：{0}]未就绪

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:178
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
state\ of\ vm[uuid\:\ %s]\ is\ %s,\ not\ allowed\ to\ take\ snapshots = VM[uuid：{0}]的状态为{1}，不允许拍摄快照

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:188
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ data\ volume = 云盘[uuid:{0}]不是云盘

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:198
# args: msg.getVolumeUuid()
can\ not\ resize\ volume[%s],\ because\ volume\ state\ is\ Disabled = 无法调整卷[{0}]的大小，因为卷状态已禁用

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:212
# args: 
At\ least\ one\ of\ vmInstanceUuid\ or\ uuid\ should\ be\ set = 至少应设置VMInstanceuuid或uuid中的一个

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:227
# args: msg.getUuid(),msg.getVmInstanceUuid()
no\ volume[uuid\:%s,\ vmInstanceUuid\:%s]\ can\ be\ found = 找不到卷[uuid：{0}，VMInstanceuuid：{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:245
# args: 
SharedVolume\ cannot\ be\ set\ bandwidth. = 共享云盘不允许设置带宽

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:254
# args: 
Cannot\ set\ legacy\ params\ and\ new\ params\ at\ the\ same\ time. = 不能同时设置旧参数和新参数。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:259
# args: 
Cannot\ set\ the\ read/write\ and\ the\ total\ IOPS\ limits\ at\ the\ same\ time. = 无法同时设置读/写和总IOPS限制。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:264
# args: 
Cannot\ set\ the\ read/write\ and\ the\ total\ bandwidth\ limits\ at\ the\ same\ time. = 无法同时设置读/写和总带宽限制。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:273
# args: 
The\ volume\ bandwidth\ cannot\ be\ null,\ must\ give\ a\ volume\ bandwidth\ value. = 卷带宽不能为空，必须提供卷带宽值。

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:284
# args: vo.getType(),vo.getUuid()
Cannot\ shrink\ [%s]\ volume[uuid\:%s]'s\ size = 不能缩小云盘[uuid:{1}]的大小

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:291
# args: 
Minimum\ increase\ size\ should\ be\ larger\ than\ 4MB = 最小扩容量需要大于4MB

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:315
# args: 
Expansion\ operation\ not\ allowed\ at\ all\ host\ disable = 扩展操作不被允许在所有不可用的物理机上进行

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:302
# args: 
Expansion\ operation\ not\ allowed\ at\ host\ disable = 扩展操作不被允许在不可用的物理机上进行

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:341
# args: vo.getUuid(),notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = 共享云盘[uuid：{0}]已连接到未停止的云主机实例[uuid：{1}]

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:79
# args: msg.getResourceType()
no\ resource\ type[%s]\ found\ in\ tag\ system = 标签系统中不存在[{0}]资源类型

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:102
# args: msg.getUuid()
tag[uuid\:%s]\ is\ an\ inherent\ system\ tag,\ can\ not\ be\ removed = 固有系统标签[uuid:{0}]禁止移除

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:128
# args: 
The\ argument\ \:'resourceType'\ doesn't\ match\ uuid = 参数: 资源类型（resourceType）与uuid不匹配

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:239
# args: tag,type,resourceType,resourceUuid
Duplicated\ Tag[tag\:%s,\ type\:%s,\ resourceType\:%s,\ resourceUuid\:%s] = 标签[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]重复

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:755
# args: tag,resourceType
no\ system\ tag\ matches[%s]\ for\ resourceType[%s] = 没有系统标签[{0}]与资源类型[{1}]匹配

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:761
# args: tag,resourceType
validate\ system\ tag\ [%s]\ for\ resourceType[%s]\ failed = 验证ResourceType[{1}]的系统标记[{0}]失败

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:944
# args: tag
no\ system\ tag\ matches\ %s = 没有找到匹配{0}的系统标签

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:979
# args: tag
tag[%s]\ is\ only\ for\ admin = 标记[{0}]仅适用于管理员

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:162
# args: invalidUuids,expectAccountUuid
resource[uuids\:%s]\ is\ not\ owned\ by\ account[uuid\:%s] = 资源[uuid：{0}]不归帐户[uuid：{1}]所有

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:85
# args: 
cannot\ update\ simple\ tag\ pattern\ format = 无法更新简单标记模式格式

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:83
# args: 
you\ can\ only\ update\ token\ name = 您只能更新令牌名称

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:95
# args: 
simple\ tag\ pattern\ has\ no\ tokens = 简单标记模式没有标记

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:122
# args: sub
illegal\ tag\ uuids\ %s,\ tag\ type\ must\ be\ simple, = 标记uuid{0}非法，标记类型必须简单。

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:133
# args: color
Invalid\ color\ specification[%s],\ must\ like\ #FF00FF = 颜色规范[{0}]无效，必须类似于#FF00FF

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:139
# args: format
Get\ format[%s],\ format\ must\ like\ that\ name\:\:{tokenName1}\:\:{tokenName2}\ ...\ \:\:{tokenNameN}\ or\ {tokenName1}\:\:{tokenName2}\ ...\ \:\:{tokenNameN}\ Name\ cannot\ contain\ '{}\:' = 获取格式[{0}]，格式必须类似于名称：'{TokenName1}'：'{TokenName2}'.：'{TOKENNAMEn}'或'{TOKENNAME1}'：？TokenNAME2}.：？TokENNAMEn}名称不能包含“'{}'：”

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:151
# args: formatTokens
all\ tokens\ %s\ must\ be\ specify = 必须指定所有令牌{0}

# at: src/main/java/org/zstack/tag2/TagPatternBase.java:185
# args: resourceUuid,attachedCount
resource[uuid\:%s]\ has\ been\ attached\ %d\ tags,\ cannot\ attach\ any\ more = 资源[uuid：{0}]已附加{1}个标记，无法再附加

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:79
# args: msg.getTemplateUuid()
unable\ to\ find\ any\ TemplateConfigs\:\ [templateUuid\:\ %s] = 找不到任何TemplateConfigs：[templateUuid：{0}]

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:151
# args: msg.getTemplateUuid()
Unable\ to\ find\ any\ TemplateConfigs\:\ [templateUuid\:\ %s] = 找不到任何TemplateConfigs：[templateUuid：{0}]

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:128
# args: msg.getCategory(),msg.getName(),msg.getTemplateUuid()
Unable\ to\ find\ TemplateConfig[category\:\ %s,\ name\:\ %s,\ templateUuid\:\ %s] = 找不到TemplateConfig[类别：{0}，名称：{1}，Templateuuid：{2}]

# at: src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java:123
# args: algType
illegal\ argument\ %s = 非法参数{0}

# at: src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java:136
# args: 
failed\ to\ decrypt\ data = 无法解密数据

# at: src/main/java/org/zstack/testlib/premium/crypto/SecurityMachineSimulator.java:399
# args: e.getMessage(),cipherText
failed\ to\ parse\ MS\ envelope\:\ %s,\ %s = 无法分析MS信封：{0}，{1}

# at: src/main/java/org/zstack/ticket/TicketBase.java:235
# args: self.getUuid(),self.getName(),self.getStatus()
ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ updated\ after\ being\ cancelled,\ current\ status\ is\ %s = 工单[uuid:{0}, name:{1}]当前状态为{2}，不支持更新操作

# at: src/main/java/org/zstack/ticket/TicketBase.java:299
# args: operator.operatorUuid
operation\ denied.\ the\ operator\ needs\ to\ be\ done\ by\ account/virtual\ ID[uuid\:%s] = 操作无效，需要account/virtual ID[uuid:{0}]才能完成操作

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:97
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ invalid,\ contact\ admin\ to\ correct\ it = 当前工单流程[uuid:{0}]失效，请联系admin修复

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:102
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ disable,\ can\ not\ be\ used = 工单流程[uuid:{0}]处于禁用状态，无法被使用

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:68
# args: msg.getAccountSystemType()
no\ accountSystemType[%s]\ defined\ in\ system = 未定义的accountSystemType[{0}]类型

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:74
# args: 
not\ matched\ ticket\ type\ found = 未找到匹配的票证类型

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:90
# args: msg.getFlowCollectionUuid(),ticketTypeUuid
Ticket\ flow\ collection[uuid\:%s]\ not\ matches\ ticket\ type[uuid\:%s] = 票证流集合[uuid：{0}]与票证类型[uuid：{1}]不匹配

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:83
# args: 
no\ matched\ ticket\ flow\ collection\ or\ no\ default\ ticket\ flow\ collection\ found,\ you\ must\ specify\ the\ flowCollectionUuid\ or\ create\ a\ default\ ticket\ flow\ collection\ in\ system = 找不到匹配的票证流集合或找不到默认的票证流集合，必须指定FlowCollectionuuid或在系统中创建默认的票证流集合

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:110
# args: req.apiName
invalid\ request.\ no\ API[%s]\ found = 无效的请求。找不到API[{0}]

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:118
# args: clz,e.getMessage()
invalid\ request,\ cannot\ create\ API[%s]\ from\ apiBody,\ %s = 无效的请求，无法通过apiBody创建API[{0}]，{1}

# at: src/main/java/org/zstack/ticket/entity/TicketStatus.java:48
# args: this,event
operation\ denied.\ the\ ticket\ is\ in\ status\ of\ %s,\ cannot\ do\ the\ operation[%s] = 操作无效。当前工单状态为{0}，无法进行操作[{0}]

# at: src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java:43
# args: request.apiName
No\ api\ class[name\:%s]\ is\ found = 找不到API类[名称：{0}]

# at: src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java:70
# args: exception.getMessage()
failed\ to\ get\ value\ from\ event\:\ %s = 无法从事件中获取值：{0}

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:44
# args: ctx.getVirtualIDUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ ticket\ submitter[uuid\:%s]\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = 操作无效。因为工单的提交者[uuid:{0}]已经被删除，工单[uuid:{1}, name:{2}]仅支持删除操作

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:49
# args: ctx.getProjectUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ project[uuid\:%s]\ of\ the\ ticket\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = 操作无效。因为工单所属的项目[uuid:{0}]已经被删除，工单[uuid:{1}, name:{2}]仅支持删除操作

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:61
# args: 
operation\ denied\ because\ flow\ collection[uuid\:%s]\ it\ not\ belong\ the\ project[uuid\:%s] = 操作无效，因为流程[uuid:{0}]不属于项目[uuid:{1}]

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:73
# args: msg.getSession().getUserUuid(),self.getUuid(),self.getName()
the\ virtual\ ID[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ ticket[uuid\:%s,\ name\:%s] = virtual ID[uuid:{0}]不是工单[uuid:{1}, name:{2}]的所有者

# at: src/main/java/org/zstack/ticket/iam2/IAM2TicketManager.java:194
# args: 
approver\ is\ removed\ from\ project\ or\ deleted,\ flow\ collection\ changed\ to\ invalid,\ reject\ this\ ticket = 审批人已经离开项目或者被删除，流程失效，因此驳回当前工单

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:117
# args: 
at\ least\ one\ flow\ is\ needed\ for\ create\ flow\ collection = 创建流程时需要至少一个步骤

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:124
# args: flow.approverTitle,approveTitles
wrong\ approver\ title\ %s,\ valid\ value\ is\ %s = 错误的审批人职位{0}, 有效输入为{1}

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:140
# args: flow.approverUuid
can\ not\ find\ IAM2VirtualIDVO[uuid\:%s] = 找不到对应的IAM2VirtualIDVO[uuid:{0}]

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:62
# args: 
name\ is\ needed\ when\ create\ a\ flow = 创建步骤时需要填写名称

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:79
# args: 
one\ ticket\ type\ can\ only\ have\ one\ matches\ flow\ collection = 一个票证类型只能有一个匹配流集合

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:102
# args: 
admin\ or\ iam2\ operation\ is\ required\ as\ approver\ of\ the\ last\ flow = 需要管理员或IAM2操作作为最后一个流的批准人

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:128
# args: 
name\ cannot\ be\ null = 名称不能为空

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:132
# args: 
approverUuid\ cannot\ be\ null = Approveruuid不能为空

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:147
# args: flow.approverUuid,projectUuid
virtual\ id[uuid\:%s]\ not\ belong\ to\ project[uuid\:%s] = virtual id[uuid:{0}]不属于项目[uuid:{1}]

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationIAM2Backend.java:42
# args: loginType
Unsupported\ AccountType：%s = 不支持的帐户类型：{0}

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:124
# args: 
two\ factor\ authenticator\ is\ not\ enabled = 双因子认证未启用

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:484
# args: 
two\ factor\ authentication\ failed\ because\ there\ is\ no\ system\ tags\ in\ msg = 双因素身份验证失败，因为MSG中没有系统标记

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:490
# args: 
two\ factor\ authentication\ failed\ because\ there\ is\ no\ token\ in\ msg\ system\ tag = 双因素身份验证失败，因为MSG系统标记中没有令牌

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:497
# args: loginContext.getLoginBackendType(),info.getUserUuid()
two\ factor\ authentication\ failed\ because\ there\ is\ no\ secret\ for\ %s\:%s = 双因素身份验证失败，因为{0}没有密码：{1}

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:507
# args: 
failed\ to\ verify\ two\ factor\ authentication\ code = 验证双因素身份验证代码失败

# at: src/main/java/org/zstack/upgrade/UpgradeManagerImpl.java:148
# args: msg.getClass().getName()
Operation\ [%s]\ is\ forbidden\ during\ grayscale\ upgrade = 灰度升级期间禁止操作[{0}]

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:267
# args: usbInv.getHostUuid()
host[%s]\ has\ started\ more\ than\ 64\ usb\ redirect\ port = 物理机[{0}]已启动64个以上的USB重定向端口

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:272
# args: host.getUuid()
unable\ to\ start\ usb\ server\ on\ host[%s],\ because\ host\ is\ not\ connected = 无法启动物理机[{0}]上的USB服务器，因为物理机未连接

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:294
# args: usbInv.getHostUuid()
failed\ to\ start\ usbredirect\ server\ from\ host[uuid\:%s] = 无法从物理机[uuid：{0}]启动USBDirect服务器

# at: src/main/java/org/zstack/usbDevice/UsbDeviceAllocatorFactory.java:83
# args: 
no\ candidate\ host\ with\ the\ usb\ device\ have\ enough\ cpu\ /\ memory\ or\ Enabled/Connected\ status = usb设备所在的物理机都不满足cpu / memory或状态的条件

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:60
# args: msg.getClass().getSimpleName()
%s\ can\ only\ be\ called\ by\ admin\ account = {0}只能被admin账户调用

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:98
# args: UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 1.0\ devices\ to\ one\ vm\ instance. = 最多可以绑定{0}个USB 1.0设备到一个云主机上

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:107
# args: UsbDeviceConstants.MAX_USB_2_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 2.0\ devices\ to\ one\ vm\ instance. = 最多可以绑定{0}个USB 2.0设备到一个云主机上

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:116
# args: UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 3.0\ devices\ to\ one\ vm\ instance. = 最多可以绑定{0}个USB 3.0设备到一个云主机上

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:127
# args: msg.getUsbDeviceUuid(),usb.getVmInstanceUuid()
the\ usb\ device[uuid\:%s]\ has\ already\ been\ attached\ to\ another\ vm[uuid\:%s] = USB设备[uuid:{0}]已经被绑定在其他的云主机[uuid:{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:134
# args: msg.getUsbDeviceUuid(),UsbDeviceState.Enabled
the\ usb\ device[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s = USB设备[uuid:{0}]不处于可绑定的状态[{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:142
# args: msg.getVmInstanceUuid(),allowedVmInstanceAttachableState
the\ vm\ instance[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = 云主机[uuid:{0}]不能绑定{1}状态的USB设备

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:152
# args: usb.getHostUuid(),msg.getUsbDeviceUuid(),HostState.Enabled,HostStatus.Connected
the\ host\ that\ the\ usb\ device[uuid\:%s]\ pluged\ in\ is\ not\ in\ valid\ state[%s]\ or\ status[%s] = 插上USB设备的物理机没有处于一种有效的状态[{1}、{2}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:165
# args: usb.getUuid(),vm.getUuid()
the\ usb\ device[uuid\:%s]\ has\ different\ hostUuid\ than\ devices\ that\ already\ attached\ to\ the\ vm\ instance[uuid\:%s] = 与已经绑定云主机实例相比，USB设备[uuid:{0}]有不同的物理机uuid

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:177
# args: usb.getUuid()
the\ usb\ device[uuid\:%s]\ is\ not\ attached\ to\ any\ vm\ instance. = USB设备[uuid:{0}]不能绑定任何云主机实例

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:185
# args: usb.getUuid(),allowedVmInstanceDetachableState
the\ vm\ instance\ that\ the\ usb\ device[uuid\:%s]\ is\ attached\ to\ is\ not\ in\ detachable\ state\ of\ %s = 绑定了USB设备[uuid:{0}]的云主机实例处于一种不能解绑的状态{1}

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:195
# args: vm.getUuid(),allowedVmInstanceAttachableState
vm\ instance[uuid\:%s]\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = 云主机实例[uuid:{0}]对于USB设备没有处于一种可绑定的状态{1}

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:206
# args: msg.getUuid()
cannot\ disable\ usb\ device[uuid\:%s]\ when\ it's\ attached\ to\ a\ vm\ instance = 当USB设备绑定到云主机上时不能禁用该USB设备

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:218
# args: VmInstanceUuid
please\ umount\ all\ usb\ devices\ of\ the\ vm[%s]\ and\ try\ again = 请卸载云主机[{0}]的所有USB设备，然后重试

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:795
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = 云主机[uuid:{0}]加载了pci设备无法迁移

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:164
# args: msg.getUsbDeviceUuid(),usb.getVmInstanceUuid()
the\ usb\ device[uuid\:%s]\ has\ already\ been\ attached\ to\ vm[uuid\:%s] = USB设备[uuid：{0}]已连接到云主机[uuid：{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:181
# args: 
PassThrough\ only\ support\ use\ on\ vm\ running\ host = 直通仅支持在运行物理机的云主机上使用

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:198
# args: msg.getUsbDeviceUuid(),msg.getVmInstanceUuid()
cannot\ attach\ the\ usb\ device[uuid\:%s]\ to\ vm[uuid\:%s],\ possibly\ reasons\ include\:\ the\ device\ is\ not\ enabled\ or\ had\ been\ attached\ to\ a\ vm,\ or\ the\ device\ and\ the\ vm\ are\ not\ on\ same\ host. = 无法将USB设备[uuid：{0}]连接到VM[uuid：{1}]，原因可能包括：设备未启用或已连接到VM，或者设备和VM不在同一物理机上。

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:558
# args: deviceVO.getVmInstanceUuid()
usb\ is\ already\ bound\ to\ vm[uuid\:%s]\ and\ cannot\ be\ bound\ to\ other\ vm = USB已绑定到VM[uuid：{0}]，无法绑定到其他VM

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:731
# args: msg.getVmInstanceUuid()
vm[%s]\ cannot\ start\ because\ usb\ redirect\ host\ is\ not\ connected = 云主机[{0}]无法启动，因为未连接USB重定向物理机

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:744
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached\ by\ passthrough = 不能迁移云主机[uuid:{0}]，因为云主机通过直连的方式绑定了USB设备

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:777
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached = 不能迁移云盘[uuid:{0}]，因为USB设备已经被绑定

# at: src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:43
# args: 
not\ the\ time\ to\ clean = 不是打扫的时候。

# at: src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:48
# args: conversionHost.getUuid(),conversionHost.getHostUuid()
conversionHost[uuid\:%s,\ hostUuid\:%s]\ is\ not\ Connected = ConversionHost[uuid：{0}，Hostuuid：{1}]未连接

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:91
# args: hostUuid,psUuid
waiting\ host[uuid\:%s]\ and\ primaryStorage[uuid\:%s]\ Connected... = 正在等待的物理机[uuid：{0}]和主存储[uuid：{1}]已连接..

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:149
# args: hostUuid
host[uuid\:%s]\ is\ not\ Connected = 物理机[uuid：{0}]未连接

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:153
# args: primaryStorageUuid
primaryStorage[uuid%s]\ is\ not\ Connected = 主存储[uuid{0}]未连接

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:186
# args: duplicateMac.get()
Not\ allowed\ same\ mac\ [%s] = 不允许存在相同的MAC地址[{0}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:205
# args: duplicateElements.get(0)
Can't\ add\ same\ uuid\ in\ the\ l3Network,uuid\:\ %s = 不能添加相同的uuid{0}在三层网络中

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:217
# args: l3Uuid
l3Network[uuid\:%s]\ is\ Disabled,\ can\ not\ create\ vm\ on\ it = 三层网络[uuid:{0}]没有被启用，不能从这个三层网络创建云主机

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:220
# args: l3Uuid
l3Network[uuid\:%s]\ is\ system\ network,\ can\ not\ create\ user\ vm\ on\ it = 三层网络[uuid:{0}]是系统网络，不能在这上面创建云主机

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:252
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = 区域[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:262
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = 集群[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:273
# args: msg.getHostUuid()
host[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = 物理机[uuid:{0}]虽然被指定了但是处于未启用状态，不能从这上面创建云主机

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:278
# args: msg.getHostUuid(),connectionState
host[uuid\:%s]\ is\ specified\ but\ it's\ connection\ status\ is\ %s,\ can\ not\ create\ vm\ from\ it = 物理机[uuid:{0}]虽然被指定了但是它的连接状态是{1}，不能从这上面创建云主机

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:234
# args: msg.getDefaultL3NetworkUuid(),msg.getL3NetworkUuids()
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids%s = 默认三层网络的uuid是[uuid:{0}]，不在三层网络uuid们中{1}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:230
# args: 
there\ are\ more\ than\ one\ L3\ network\ specified\ in\ l3NetworkUuids,\ but\ defaultL3NetworkUuid\ is\ null = 在三层网络uuid们中有很多三层网络被指定了，但是默认三层网络的uuid是空的

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:84
# args: msg.getHostUuid()
the\ status\ of\ host[uuid\:%s]\ must\ be\ Connected = 物理机[uuid：{0}]的状态必须为已连接

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:97
# args: 
v2v\ conversion\ host\ storage\ path\ must\ be\ absolute\ path = V2V转换物理机存储路径必须为绝对路径

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:120
# args: msg.getUrl()
invalid\ v2v\ url\:\ %s = 无效的V2V URL：{0}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:131
# args: srcVmUuid
vm\ instance[uuid\:%s]\ does\ not\ exist\ or\ is\ not\ a\ vmware\ vm = 云主机实例[uuid：{0}]不存在或不是VMware云主机

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:138
# args: 
conversionHostUuid\ should\ not\ be\ null = ConversionHostuuid不应为空

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:148
# args: msg.getConversionHostUuid()
underlying\ host\ of\ conversion\ host[uuid\:%s]\ should\ be\ Connected = 迁移服务器[uuid:{0}]所关联的物理机应处于己连接状态

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:164
# args: msg.getConversionHostUuid(),msg.getPrimaryStorageUuid()
conversion\ host[uuid\:%s]\ cannot\ connect\ to\ primary\ storage[uuid\:%s] = 转换物理机[uuid：{0}]无法连接到主存储[uuid：{1}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:197
# args: duplicateMacs
Duplicate\ mac\ address\ %s = 重复的MAC地址{0}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:289
# args: msg.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ is\ not\ supported\ for\ v2v = V2V不支持主存储[uuid：{0}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:292
# args: msg.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ is\ neither\ Enabled\ nor\ Connected = 主存储[uuid：{0}]既未启用也未连接

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:302
# args: msg.getVolumeUuid(),msg.getHostUuid()
there\ are\ some\ v2v\ jobs\ in\ progress.\ can\ not\ attach\ volume[%s]\ to\ host[%s] = 有一些V2V作业正在进行中。无法将卷[{0}]附加到物理机[{1}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:313
# args: msg.getVolumeUuid(),msg.getHostUuid()
there\ are\ some\ v2v\ jobs\ in\ progress.\ can\ not\ detach\ volume[%s]\ from\ host[%s] = 有一些V2V作业正在进行中。无法从物理机[{1}]分离卷[{0}]

# at: src/main/java/org/zstack/v2v/V2VConversionHostCapacityUpdater.java:98
# args: reserveSize,conversionHostVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ conversion\ host[uuid\:%s],\ it's\ short\ of\ available\ capacity = 无法在转换物理机[uuid：{1}]上保留{0}字节，可用容量不足

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:597
# args: l3Uuid
Unable\ to\ find\ L3Network[uuid\:%s]\ to\ start\ the\ current\ vm,\ it\ may\ have\ been\ deleted,\ Operation\ suggestion\:\ delete\ this\ vm,\ recreate\ a\ new\ vm = 找不到启动当前云主机的L3Network[uuid：{0}]，该云主机可能已被删除，操作建议：删除该云主机，重新创建新的云主机

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1207
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ is\ not\ a\ number = 错误的网络带宽[{0}]，这不是数字

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1204
# args: 
networkInboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = 超过下行网络带宽超过最大值32G bps

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:661
# args: msg.getUrl(),msg.getType()
can\ not\ find\ factory\ for\ src\ vm[url\:%s,\ v2vType\:%s] = 找不到SRC VM[URL：{0}，v2vType：{1}]的工厂

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:921
# args: msg.getHostUuid()
there\ has\ been\ a\ v2v\ conversion\ host\ with\ hostUuid\ %s = 已存在Hostuuid为{0}的V2V转换物理机

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1196
# args: 
invalid\ v2v\ qos\ systemtag = V2V QoS系统标记无效

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1202
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ or\ equal\ to\ 1048576 = 网络带宽[{0}]无效，它必须大于或等于1048576

# at: src/main/java/org/zstack/v2v/V2VMsgTranslator.java:118
# args: srcVmUrl
can\ not\ find\ type\ for\ src\ vm[url\:%s] = 找不到SRC VM[URL：{0}]的类型

# at: src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java:890
# args: 
missing\ VM\ uuid\ in\ 'srcVmUrl' = “ srcvmurl ”中缺少VM uuid

# at: src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java:956
# args: srcVmUuid
No\ root\ volume\ found\ for\ VM\:\ %s = 找不到VM的根卷：{0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1575
# args: cidr,hostUuid
there\ is\ no\ available\ ip\ found\ in\ cidr\ %s\ on\ host\ %s,\ try\ reconnect\ host\ to\ refresh\ ips = 在物理机{1}上的CIDR{0}中找不到可用的IP，请尝试重新连接物理机以刷新IP

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:190
# args: job.getUuid()
v2v\ job[uuid\:%s]\ is\ running = V2V迁移任务[uuid:{0}]正在运行

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:808
# args: srcVmUrl
failed\ to\ get\ virt-v2v\ uri\ for\ %s = 无法获取{0}的virt-v2v URI

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1007
# args: urlBuilder.toString()
Failed\ to\ parse\ url\ %s = 无法分析URL{0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1288
# args: NOT_SUPPORTED_SPECIAL_CHARACTER
Target\ vm\ name\ can\ not\ contain\ those\ characters\ %s = 目标VM名称不能包含这些字符{0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java:120
# args: jobUuid,msg.getUrl()
There\ is\ already\ a\ long\ job[uuid\:%s]\ convert\ vm\ from\ %s = 已有长作业[uuid：{0}]从{1}转换VM

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java:145
# args: 
Failed\ to\ update\ conversion\ host\ dependency = 无法更新转换物理机依赖关系

# at: src/main/java/org/zstack/vmware/ESXHost.java:155
# args: 
host\ is\ not\ connected = 物理机未连接

# at: src/main/java/org/zstack/vmware/ESXHost.java:244
# args: self.getvCenterUuid()
Syncing\ with\ VCenter[uuid\:%s],\ please\ try\ again\ later. = 正在与vCenter[uuid：{0}]同步，请稍后重试。

# at: src/main/java/org/zstack/vmware/ESXHost.java:359
# args: vmUuid,self.getUuid()
vmUuid\ [%s]\ not\ found\ in\ ESX\ host\ [%s] = 在ESX物理机[{1}]中找不到VMuuid[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:709
# args: vmUuid
VM\ not\ found\:\ %s = 找不到VM：{0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:635
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ suspend\ VM\ [%s]\:\ %s = 无法挂起云主机[{0}]：{1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:631
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ suspend\ VM,\ task\ status\:\ %s = 无法挂起云主机，任务状态：{0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:670
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ resume\ VM\ [%s]\:\ %s = 无法恢复VM[{0}]：{1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:666
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ resume\ VM,\ task\ status\:\ %s = 无法恢复VM，任务状态：{0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:740
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ shutdown\ guest\:\ %s,\ %s = 无法关闭来宾：{0}，{1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:1370
# args: vmInv.getInstanceOfferingUuid()
instance\ uuid\ [%s]\ not\ found = 未找到实例uuid[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:1380
# args: vmInv.getImageUuid()
Image\ [%s]\ not\ found = 未找到镜像[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:1479
# args: vmUuid
VM\ [%s]\ not\ found\ in\ vCenter = 在vCenter中找不到云主机[{0}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:1654
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ power\ on\ VM,\ task\ status\:\ %s = 无法启动云主机，任务状态：{0}

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:122
# args: msg.getDriverType()
Nic\ driver\ %s\ not\ support\ yet = NIC驱动程序{0}尚不支持

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:67
# args: msg.getUuid(),vCenterVersion
console\ password\ is\ not\ supported\ by\ vm[uuid\:%s]\ on\ vCenter[version\:%s] = vCenter[版本：{1}]上的VM[uuid：{0}]不支持控制台密码

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:73
# args: 
vCenter\ login\ name\ expected. = vCenter登录名称为空

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:77
# args: msg.getDomainName()
domainName[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = 域名[{0}]不是一个IPv4地址或有效的物理机名

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:83
# args: msg.getDomainName()
vCenter\ [domainName\:%s]\ has\ been\ added = vCenter[domainName:{0}]已经被添加

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:139
# args: clusterUuid,l2uuid
Cluster[uuid\:%s]\ and\ L2[uuid\:%s]\ belongs\ to\ different\ DCs = 集群[uuid:{0}]和二层网络[uuid:{1}]属于不同的DC

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:151
# args: clusterUuid
No\ hosts\ found\ within\ cluster\:\ %s = 在集群{0}中未发现物理机

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:184
# args: phyinf,phyinf
vSwitch/dvSwitch\ not\ found\:\ %s,\ or\ vSwitch\:\ %s\ on\ different\ ESX\ host\ doesn't\ has\ same\ portgroup = vSwitch/dvSwitch未找到: {0}, 或者vSwitch: {1}在不同的ESX Host上的portgroup配置不同

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:198
# args: l2uuid,vcvo.getUuid(),clusterUuid
L2[uuid\:%s]\ doesn't\ belong\ to\ vCenter[uuid\:%s]\ cluster[uuid\:%s] = 二层网络[uuid:{0}]不属于vCenter[uuid:{1}]集群[uuid:{2}]

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:68
# args: bsUuid
No\ data-store\ attached\ to\ %s = 没有附加到{0}的主存储

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:73
# args: bsUuid
Data-store\ not\ found\ for\ %s = 找不到{0}的主存储

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:103
# args: url.getProtocol()
unexpected\ protocol\:\ %s = 不支持的协议类型：{0}

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:109
# args: iinv.getName()
%s\ already\ exists = {0}已存在

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:153
# args: 
vcenter\ backup\ storage\ do\ not\ support\ to\ cancel\ download\ image = vCenter备份存储不支持取消下载镜像

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:203
# args: 
image\ not\ found\ in\ BS = 在镜像服务器上未找到目标镜像

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:215
# args: 
not\ supported\ yet = 尚不支持

# at: src/main/java/org/zstack/vmware/VCenterHostAllocatorFilterExtensionPoint.java:368
# args: 
no\ candidate\ host\ for\ vcenter\ vm = 找不到VCenter的物理机去启动vm

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:1040
# args: nNic.getMac(),nVm.getUuid(),nVm.getName(),eVm.getUuid(),eVm.getName(),VCENTER_MAC_CONFLICT_STRATEGY_STRICT
Duplicated\ mac\ address[%s]\ on\ VM[uuid\:\ %s,\ name\:\ %s]\ and\ VM[uuid\:\ %s,\ name\:\ %s],\ and\ current\ mac\ address\ conflicting\ strategy\ is\:\ %s. = 云主机[uuid：{1}，名称：{2}]和云主机 [uuid：{3}，名称：{4}]中存在重复的mac地址[{0}]，当前的 MAC 地址冲突策略是：{5}。

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:2040
# args: 
can't\ sync\ before\ datastores\ are\ separated = 在分离主存储之前无法同步

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3044
# args: vcvo.getUuid()
There\ are\ tasks\ running\ on\ the\ VCenter[uuid\:%s],\ please\ try\ again\ later. = vCenter[uuid：{0}]上正在运行任务，请稍后重试。

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3134
# args: msg.getVCenterUuid()
VCenter[uuid\:%s]\ not\ found\:\  = VCenter[uuid:{0}]不存在

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3252
# args: 
Login\ failed,\ please\ check\ your\ login\ parameters. = 登录失败，请检查用户名密码是否正确

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3256
# args: msg.getDomainName(),ex.getMessage()
connect\ %s\ failed\:\ %s = 连接{0}失败:{1}

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3262
# args: msg.getDomainName(),msg.getUsername()
Login\ to\ vCenter\ [%s]\ failed\ with\ user\ [%s],please\ check\ your\ network\ connection\ and\ credential. = 用户[{1}]登录vCenter[{0}]失败，请检查您的网络连接和凭据

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3269
# args: msg.getDomainName(),msg.getPort() == null ? 443 : msg.getPort()
Parse\ response\ failed\ from\ vCenter\ [%s],please\ check\ the\ port\ number[%d]. = 解析vCenter[{0}]响应失败，请检查端口号[{1}]

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3277
# args: msg.getDomainName()
SSL\ handshake\ failed\ with\ vCenter\ [%s],because\ insecure\ TLS\ 1.0\ is\ used.\ Manually\ enabled\ TLS\ 1.0\ in\ jdk\ configuration\ if\ needed. = 与vCenter[{0}]的SSL握手失败，因为使用了不安全的TLS 1.0。如果需要，在JDK配置中手动启用TLS 1.0。

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3283
# args: msg.getDomainName(),msg.getPort() == null ? 443 : msg.getPort()
SSL\ handshake\ failed\ with\ vCenter\ [%s],please\ check\ the\ port\ number[%d]. = 与vCenter[{0}]的SSL握手失败，请检查端口号[{1}]。

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3359
# args: 
No\ clustered\ compute\ resource\ found = 未找到集群资源

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3363
# args: 
No\ dvSwitch\ or\ qualified\ vSwitch\ found = 未找到可使用的dvSwitch/vSwitch

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3546
# args: dsMorVal,vcUuid
Datastore\ %s\ not\ found\ for\ vCenter\ %s = vCenter{1}中未找到Datastore{0}

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3936
# args: 
Missing\ host\ uuid\ in\ message = 消息中缺失物理机uuid

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4035
# args: 
Missing\ destination\ host\ uuid. = 缺少目标物理机的uuid

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4040
# args: 
Destination\ host\ is\ not\ ESX\ host. = 目标物理机不是Esx类型物理机

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4079
# args: vm.getConfig().getName(),hvo.getManagementIp()
Checking\ compatibility\ with\ vm\ %s\ failed\ on\ host\ %s = 检查物理机{1}与云主机{0}的兼容性失败

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4075
# args: 
HOST\ CPU/software\ NOT\ compatible = 物理机的CPU/software不兼容

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4137
# args: 
Can't\ detach\ nic\ because\ the\ nic\ not\ supported\ to\ hot\ plugin\ in\ vcenter = 无法卸载网络，因为该网卡不支持热拔插

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:228
# args: 
No\ virtual\ disk\ manager = 无虚拟磁盘管理器

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:235
# args: 
No\ file\ manager = 没有文件管理器

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:244
# args: 
No\ file\ Datacenter = 无文件数据中心

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:350
# args: vm.getName()
failed\ to\ get\ VM[%s]\ root\ disk\ usage = 获取VM[{0}]根盘使用率失败

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:346
# args: installPath
failed\ to\ get\ VM\ from\ installPath\:\ %s = 在路径{0}下未找到云主机

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:258
# args: 
VCenter\ not\ found = 找不到vCenter

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:262
# args: vcvo.getUuid(),vcvo.getStatus()
VCenter[%s]\ is\ not\ in\ operation\ status,\ current\ status\:\ %s = vCenter[{0}]未处于操作状态，当前状态：{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:328
# args: vCenterUrl,ex.getMessage()
failed\ to\ connect\ to\ vCenter\:\ %s\:\ %s = 无法连接到vCenter：{0}：{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:460
# args: installPath
vdisk\ not\ found\:\ %s = 未找到虚拟磁盘：{0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:536
# args: getVcDomainName(si)
list\ storage\ failed\ for\ %s = {0}的列表存储失败

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:556
# args: vm.getName()
No\ datastore\ found\ for\ VM\:\ %s = 找不到云主机{0}的主存储区

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:610
# args: info.getName(),info.getInstanceUuid(),ex.getMessage()
failed\ to\ set\ ESX\ VM\ uuid\ [%s\:%s],\ because[%s] = 无法设置ESX VM uuid[{0}：{1}]，因为[{2}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:709
# args: zsImageUuid
template\ [%s]\ not\ found = 未找到模板[{0}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:786
# args: host.getName()
failed\ to\ search\ resource\ pool\ for\ host\ %s = 搜索物理机{0}资源池失败

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:782
# args: host.getName()
No\ resource\ pool\ found\ for\ host\ %s = 在物理机{0}上未找到资源池

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2415
# args: installPath
No\ unit\ number\ available\ for\ data\ disk\ %s = 没有可用于数据磁盘{0}的单元号

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1546
# args: vm.getName()
guest\ tools\ not\ installed\ or\ running\ for\ VM\:\ %s = 云主机{0}上未安装或运行guest tools

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1581
# args: vm.getName()
upload\ file\ failed\ for\ VM\:\ %s = 云主机{0}上传文件失败

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1670
# args: vcvo.getName()
list\ dvSwitch\ failed\ for\ %s = 为{0}列出dvSwitch失败

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1936
# args: clusterUuid
get\ vCenter\ cluster[%s]\ name\ failed = 获取vCenter群集[{0}]名称失败

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2045
# args: dvSwitch
dvSwitch\ name\ [%s]\ not\ unique = dvSwitch名称[{0}]不唯一

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2103
# args: hvo.getName()
create\ portgroup\ failed\ for\ host\ %s = 物理机{0}创建端口组失败

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2100
# args: hvo.getName(),((OperationFailureException) ex).getErrorCode().getDetails()
create\ portgroup\ failed\ for\ host\ %s\:\ because\ %s = 物理机{0}创建端口组失败，因为{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2067
# args: hvo.getName(),hvo.getUuid()
Host[%s\:%s]\ not\ found\ on\ vCenter = vCenter上未找到物理机[{0}:{1}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2079
# args: pgLabel,hvo.getName(),vlanId
portgroup[%s]\ already\ exists\ on\ host[%s]\ but\ with\ different\ vlanId(%d) = 端口组[{0}]已存在于物理机[{1}]上，但具有不同的VlanID（{2}）

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2083
# args: pgLabel,hvo.getName()
portgroup[%s]\ already\ exists\ on\ host[%s],please\ create\ again\ with\ other\ name\ or\ delete\ portgroup\ manually\ and\ attach\ to\ cluster\ again = 端口组[{0}]已经存在于物理机[{1}]，请重新使用另外的名字创建或者手动删除端口组然后重新加载到集群

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2142
# args: vcvo.getName()
create\ dvPortGroup\ failed\ for\ %s = 为{0}创建DVPortGroup失败

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2137
# args: dvSwitchName,vcvo.getName()
dvSwitch\ [%s]\ not\ found\ on\ vCenter\ [%s] = 在vCenter[{1}]上找不到dvSwitch[{0}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2335
# args: ds.getName()
no\ dataCenter\ found\ for\ datastore = 找不到主存储的区域

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2340
# args: 
virtual\ disk\ manager\ unavailable = 虚拟磁盘管理器不可用

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2351
# args: installPath,mf.getLocalizedMessage()
delete\ vdisk[%s]\ failed\:\ %s = 删除虚拟磁盘[{0}]失败：{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2481
# args: dvSwitch.getName(),task.getTaskInfo().getError().getLocalizedMessage()
create\ dvPortGroup\ failed\ for\ dvSwitch\ [%s],\ %s = 为dvSwitch[{0}]创建dvPortGroup失败，{1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2593
# args: me.getName(),mor.val,ex.getMessage()
failed\ to\ set\ ZStack\ uuid\ to\ VCenter\ ManagedEntity\ [name\:%s,\ mor\:%s]\ because\ %s = 在VCenter ManagedEntity [name：{0}，mor：{1}]上设置ZStack uuid失败，因为{2}

# at: src/main/java/org/zstack/vmware/VncPortAllocatorImpl.java:165
# args: 
No\ VNC\ ports\ available = 未找到可用的VNC端口

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:450
# args: msg.getDns()
dns[%s]\ is\ not\ a\ IP\ address = dns地址[{0}]不是有效的IP地址

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:338
# args: l3NetworkVO.getUuid()
no\ ip\ ranges\ attached\ with\ l3\ network[uuid\:%s] = 在三层网络[uuid:{0}]上没有IP范围被绑定

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:178
# args: 
management\ network\ can\ not\ be\ detached = 管理网络无法分离

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:182
# args: 
default\ route\ network\ can\ not\ be\ detached = 无法分离默认路由网络

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:186
# args: 
original\ public\ network\ can\ not\ be\ detached = 原有公网不能脱离

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:190
# args: vpc.getUuid()
could\ not\ detach\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ its\ state\ is\ not\ running\ or\ stopped = 无法将三层网络与VPC路由器[uuid：{0}]分离，因为其状态未运行或已停止

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:198
# args: vpc.getUuid()
could\ not\ detach\ l3\ network\ to\ vpc\ router[uuid\:%s]\ becaus\ the\ states\ of\ the\ master\ and\ slave\ are\ inconsistent = 无法将三层网络与VPC路由器[uuid：{0}]分离，因为主设备和从设备的状态不一致

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:231
# args: l3NetworkVO.getUuid(),vmInstanceVO.getUuid(),vipPeerVOs.stream().map(VipPeerL3NetworkRefVO::getVipUuid).collect(Collectors.toList())
l3\ network[uuid\:%s]\ can\ not\ detach\ from\ vpc\ vrouter[uuid\:%s]\ since\ network\ services\ attached\ vips[%s]\ still\ used\ in\ l3 = 三层网络[uuid：{0}]无法与VPC虚拟路由器[uuid：{1}]分离，因为网络服务附加的VIP[{2}]仍在L3中使用

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:247
# args: l3NetworkVO.getUuid(),vmInstanceVO.getUuid(),vmNicVOS.stream().map(ResourceVO::getUuid).collect(Collectors.toList())
vpc\ l3\ network[uuid\:%s]\ can\ not\ detach\ from\ vpc\ vrouter[uuid\:%s]\ since\ vm\ nics[%s]\ still\ used\ in\ l3 = vpc三层网络[uuid:{0}]无法从vpc路由器[uuid:{1}]卸载, 三层网络还在使用以下云主机网卡[{2}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:257
# args: msg.getVirtualRouterOfferingUuid()
virtual\ router\ offering[uuid\:\ %s]\ is\ not\ enabled = 云路由规格[uuid: {0}]是不可用的

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:284
# args: 
only\ vpc\ l3\ network\ can\ attach\ to\ vpc\ vrouter = 只有VPC三层网络可以绑定到VPC云路由

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:292
# args: msg.getL3NetworkUuid(),vmNics.get(0).getVmInstanceUuid()
Vpc\ network\ [uuid\:%s]\ already\ attached\ to\ vpc\ router\ [uuid\:%s] = VPC网络[uuid：{0}]已连接到VPC路由器[uuid：{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:329
# args: msg.getVmInstanceUuid()
could\ not\ attached\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ both\ its\ state\ and\ it\ peer\ state\ is\ not\ running\ or\ stopped = 无法将三层网络连接到VPC路由器[uuid：{0}]，因为其状态和对等状态均未运行或已停止

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:312
# args: msg.getVmInstanceUuid()
could\ not\ attached\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ its\ state\ is\ not\ running\ or\ stopped = 无法将三层网络连接到VPC路由器[uuid：{0}]，因为其状态未运行或已停止

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:362
# args: vip.getL3NetworkUuid(),vip.getUuid(),vip.getIp(),msg.getL3NetworkUuid(),vmInstanceVO.getUuid()
public\ network[uuid\:\ %s]\ vip[uuid\:\ %s,\ ip\:\ %s]\ peer\ with\ l3network[uuid\:\ %s]\ not\ on\ vpc\ vr[uuid\:\ %s] = 在VPC云路由[uuid: {4}]上，三层网络[uuid: {3}]没有和公有网络[uuid: {0}]虚拟IP[uuid: {1}, ip: {2}]同阶

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:383
# args: gateways,msg.getL3NetworkUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied = 三层网络[uuid:{1}]的网关[uuid:{0}]已经被占用

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:428
# args: msg.getStaticIp(),gateways,l3NetworkVO.getUuid()
the\ static\ ip[%s]\ specified\ in\ message\ not\ equals\ to\ gateway\ ips[%s]\ of\ l3\ network[uuid\:%s] = 消息中指定的静态IP[{0}]不等于三层网络[uuid：{2}]的网关IP[{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:440
# args: vipL3Uuid
l3\ network\ [uuid\:%s]\ must\ be\ attached\ first,\ because\ there\ is\ vip\ on\ that\ l3\ network = 必须首先连接三层网络[uuid：{0}]，因为该三层网络上存在VIP

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:457
# args: msg.getDns(),msg.getUuid()
dns\ address\ [%s]\ is\ not\ added\ to\ vpc\ router\ [uuid\:%s] = dns地址[{0}]未添加到vpc路由[uuid:{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:488
# args: ipr.getL3NetworkUuid(),ipRangeVO.getNetworkCidr(),uuid
could\ not\ add\ ipv6\ range\ to\ l3\ network[uuid\:%s],\ because\ it's\ overlap\ with\ cidr\ [%s]\ of\ vRouter\ [uuid\:%s] = 无法将IPv6范围添加到三层网络[uuid：{0}]，因为它与VRouter[uuid：{2}]的CIDR[{1}]重叠

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:483
# args: ipr.getL3NetworkUuid(),ipRangeVO.getNetworkCidr(),uuid
could\ not\ add\ ip\ range\ to\ l3\ network[uuid\:%s],\ because\ it's\ overlap\ with\ cidr\ [%s]\ of\ vRouter\ [uuid\:%s] = 无法将IP范围添加到三层网络[uuid：{0}]，因为它与VRouter[uuid：{2}]的CIDR[{1}]重叠

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:859
# args: rsp.getError()
operation\ error,\ because\:%s = 操作错误，因为{0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:558
# args: msg.getUuid()
can\ not\ get\ connections\ of\ distributed\ routing\ to\ virtual\ router\ %s = 不能获取分布式路由到云路由的连接

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:596
# args: vrinv.getUuid()
can\ not\ set\ state\ of\ distributed\ routing\ to\ virtual\ router\ %s = 不能设置分布式路由到云路由的状态

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:720
# args: msg.getNetworkService(),msg.getUuid()
not\ support\ to\ get\ the\ service\ %s\ state\ to\ virtual\ router\ %s = 路由器 {1} 不支持网络功能{0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:855
# args: vrinv.getUuid()
can\ not\ get\ state\ of\ distributed\ routing\ to\ virtual\ router\ %s = 获取路由器 {0} 分布式路由的状态失败

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:934
# args: msg.getNetworkService(),msg.getUuid()
not\ support\ to\ update\ the\ service\ %s\ state\ to\ virtual\ router\ %s = 路由器 {1} 不支持更新网络功能{0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:1336
# args: 
vpc\ l3\ network\ must\ attach\ a\ vpc\ vrouter\ first\ before\ do\ anything\ related\ to\ vrouter(like\ start/stop\ vm,\ create\ lb,\ etc.) = 在做设置云路由的任何操作（如启动/停止云主机、创建负载均衡等），VPC三层网络必须首先绑定三层路由

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:1594
# args: msg.getDns(),msg.getVpcRouterUuid()
dns\ address\ [%s]\ has\ bean\ added\ to\ vpc\ router\ [uuid\:%s] = 在路由器[uuid:{1}]上已经存在一个DNS[{0}]

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:166
# args: vpcUuid
can\ not\ detach\ nic\ from\ vpc\ vr[uuid\:%s] = 不能从VPC云路由[uuid:{0}]解绑网卡

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:473
# args: l3.getUuid()
there\ is\ no\ ip\ range\ for\ l3\ network[uuid\:%s] = 三层网络[uuid：{0}]没有IP范围

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:501
# args: ip.getGateway(),l3.getUuid(),vm.getUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied\ on\ vpc\ vr[uuid\:\ %s] = 在VPC的云路由[uuid: {2}]上，三层网络[uuid:{1}]的网关[uuid:{0}]已经被占用

# at: src/main/java/org/zstack/vpc/VpcVyosDeployZsnAgentFlow.java:133
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ vpc\ router[%s],\ the\ ssh\ port\ seems\ not\ open = 无法通过SSH连接到VPC路由器[{0}]，SSH端口似乎未打开

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:217
# args: msg.getVmInstanceUuid()
there\ is\ no\ master\ router\ of\ router\ [uuid\:%s] = 路由器[uuid:{0}]的高可用组没有主路由器

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:130
# args: msg.getVirtualRouterUuid()
Could\ not\ update\ this\ network\ service,\ due\ to\ vpc\ [uuid\:%s]\ is\ not\ support\ update\ network\ service\ version = 无法更新此网络服务，因为VPC[uuid：{0}]不支持更新网络服务版本

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:137
# args: msg.getVirtualRouterUuid(),vo.getKernelVersion()
Could\ not\ update\ this\ network\ service,\ due\ to\ vpc\ [uuid\:%s]\ used\ old\ kernel\ version\:[%s] = 无法更新此网络服务，因为VPC[uuid：{0}]使用了旧内核版本：[{1}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:144
# args: 
Could\ not\ apply\ snat\ with\ non-default\ public\ network,\ due\ to\ multi\ snat\ feature\ is\ disabled = 无法使用非默认公用网络应用SNAT，因为多SNAT功能已禁用

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:147
# args: msg.getL3NetworkUuid()
Could\ not\ apply\ snat\ with\ this\ L3Network,\ due\ to\ l3\ network\ [uuid\:%s]\ is\ not\ public\ network = 无法对此三层网络应用SNAT，因为三层网络[uuid：{0}]不是公共网络

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:150
# args: msg.getL3NetworkUuid()
Could\ not\ apply\ snat\ with\ this\ L3Network,\ due\ to\ l3\ network\ [uuid\:%s]\ is\ not\ attached\ to\ vpc\ router = 无法对此三层网络应用SNAT，因为三层网络[uuid：{0}]未连接到VPC路由器

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:168
# args: ip
invalid\ monitor\ ip\ address\ [%s] = 仲裁地址[{0}]错误

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:205
# args: vpcVo.getUuid()
vpcHaRouter\ [uuid\:%s]\ is\ deleted = 高可用组[uuid:{0}]被删除了

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:235
# args: haUuid
there\ are\ more\ than\ 2\ vpc\ routers\ attached\ to\ haGroup\ [uuid\:%s] = 高可用组[uuid:{0}]的路由器数量已经超过2

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:266
# args: l3Uuids,offeringL3Uuids
ha\ group\ management\ l3\ and\ public\ l3\ networks[uuid\:%s]\ are\ different\ from\ offering\ l3\ networks\ [uuid\:%s] = 高可用组的管理网，公网组合[uuid:{0}]和云路由规格的三层网络[uuid:{1}]不同

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:322
# args: vpcL3Uuids,vpcHaGroupL3Uuids
vpc\ router\ l3\ networks\ [uuid\:%s]\ are\ different\ from\ ha\ group\ l3\ networks\ [uuid\:%s],\ !!!\ please\ delete\ this\ router\ and\ recreate\ it = vpc路由器的三层网路[uuid:{0}]和高可用组的三层网络[uuid:{1}]不同

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:330
# args: oldHaUuid
vpc\ router\ has\ been\ attached\ to\ ha\ group\ [uuid\:%s] = vpc路由器不在高可用组[uuid:{0}]中

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:334
# args: haUuid
vpc\ ha\ group\ [uuid\:%s]\ is\ not\ existed = 高可用组[uuid:{0}]不存在

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:339
# args: haUuid
there\ are\ more\ than\ 1\ vpc\ routers\ attached\ to\ haGroup\ [uuid\:%s] = 高可用组[uuid:{0}]的路由器数量已经超过1

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:344
# args: haUuid
vpc\ router\ [uuid\:%s]\ can\ not\ be\ upgraded\ to\ ha\ router\ because\ it\ public\ network\ is\ same\ to\ management\ network = vpc路由器[uuid:{0}]不能升级高可用路由器因为它的管理网和公网相同

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java:611
# args: ha.getName()
create\ affinityGroup\ for\ ha\ group\ [uuid\:%s]\ failed = 高可用组[uuid:{0}]创建亲和组失败

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java:785
# args: vrName,vrUuid,vpcHaGroupName,vpcHaGroupUuid,old,status
virtualrouter\ %s\ [uuid\:\ %s\ ]\ of\ VPC\ HA\ group\ %s\ [uuid\:\ %s]\ haStatus\ changed\ from\ %s\ to\ %s = VPC高可用性组{2}[uuid：{3}]的VirtualRouter{0}[uuid：{1}]的高可用性状态已从{4}更改为{5}

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupVpcVrImpl.java:694
# args: 
ha\ group\ uuid\ nil = 高可用性组uuid无

# at: src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java:85
# args: struct.getVmInstanceUuid()
VR[uuid\:\ %s]\ not\ running = VR[uuid：{0}]未运行

# at: src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java:90
# args: struct.getVmInstanceUuid()
VR[uuid\:\ %s]\ not\ connected = VR[uuid：{0}]未连接

# at: src/main/java/org/zstack/vpc/ha/vyos/vyosVpcHaRouterBackendManagerImpl.java:140
# args: vrUuid,ret.getError()
failed\ to\ enable\ ha\ on\ virtual\ router[uuid\:%s],\ %s = 路由器[uuid:{0}]打开高可用功能失败，{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:373
# args: 
only\ tcp\ or\ udp\ protocol\ can\ use\ port = 只有TCP或UDP协议可以使用端口

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:150
# args: msg.getUuid()
can\ not\ delete\ ruleSet[%s]\ because\ it\ still\ attached\ to\ nic = 无法删除规则集[{0}]，因为它仍连接到NIC

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:129
# args: 
can\ not\ detach\ system\ default\ ruleSet = 无法分离系统默认规则集

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:142
# args: 
only\ system\ ruleSet\ can\ change\ action\ type = 只有系统规则集才能更改操作类型

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:154
# args: 
can\ not\ delete\ system\ default\ ruleSet = 无法删除系统默认规则集

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:160
# args: 
can\ not\ delete\ system\ default\ rule = 无法删除系统默认规则

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:170
# args: vRouteUuid
the\ router\ [uuid\:%s]\ does\ not\ has\ a\ master\ router = 路由器[uuid：{0}]没有主路由器

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:188
# args: msg.getVpcUuid()
the\ VPC\ Router[uuid\:%s]\ already\ has\ a\ firewall. = VPC路由器[uuid：{0}]已有防火墙。

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:378
# args: 
only\ tcp\ protocol\ can\ use\ tcp\ flag = 只有TCP协议才能使用TCP标志

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:382
# args: 
only\ icmp\ protocol\ can\ use\ icmp\ type = 只有ICMP协议才能使用ICMP类型

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:239
# args: msg.getName(),msg.getRuleNumber()
already\ has\ a\ rule\ template\ with\ name\ %s = 已有名为{0}的规则模板

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:338
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
the\ ruleSet[%s]\ already\ has\ a\ rule\ with\ rule\ number\ %s. = 规则集[{0}]已具有规则编号为{1}的规则。

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:343
# args: msg.getUuid()
can\ not\ update\ default\ rule[%s] = 无法更新默认规则[{0}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:407
# args: msg.getUuid()
the\ rule\ [%s]\ number\ is\ invalid = 规则[{0}]编号无效

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:416
# args: 
can\ not\ attach\ the\ default\ ruleSet\ to\ other\ nic = 无法将默认规则集附加到其他NIC

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:431
# args: msg.getRuleSetUuid(),msg.getL3Uuid()
ruleSet[%s]\ already\ has\ a\ l3[%s] = 规则集[{0}]已具有L3[{1}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:450
# args: duplicateRuleNumbers
already\ has\ a\ rule\ with\ the\ number[%s] = 已具有编号为[{0}]的规则

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:748
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
the\ ruleSet[%s]\ already\ has\ a\ rule\ with\ the\ rule\ number\ %s. = 规则集[{0}]已具有规则编号为{1}的规则。

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:779
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ only\ tcp\ or\ udp\ protocol\ can\ use\ port = 无法添加防火墙规则[{0}]只有TCP或UDP协议可以使用端口

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:785
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ only\ tcp\ protocol\ can\ use\ tcp\ flag = 无法添加防火墙规则[{0}]只有TCP协议可以使用TCP标志

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:790
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ icmp\ protocol\ can\ use\ icmp\ type = 无法添加防火墙规则[{0}]，因为只有ICMP协议可以使用ICMP类型

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:801
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ tcp\ or\ udp\ protocol\ can\ use\ port = 无法添加防火墙规则[{0}]，因为只有TCP或UDP协议可以使用端口

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:824
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ tcp\ protocol\ can\ use\ tcp\ flag = 无法添加防火墙规则[{0}]，因为只有TCP协议可以使用TCP标志

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:832
# args: msg.getRuleNumber(),error
could\ not\ add\ firewall\ rule[%d]\ because\ %s = 无法添加防火墙规则[{0}]，因为{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:846
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ ruleNo\ %d\ is\ invalid = 无法添加防火墙规则，因为RuleNo{0}无效

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:853
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ there\ is\ no\ action\ for\ ruleNo\:%d = 无法添加防火墙规则，因为没有针对RuleNo的操作：{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:867
# args: vo.getSourceIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ source\ IP\ length\:\ %s\ is\ not\ valid\ for\ ruleNo\:%d = 无法添加防火墙规则，因为源IP长度{0}对RuleNo{1}无效

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:874
# args: vo.getDestIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ destination\ IP\ length\:\ %s\ is\ not\ valid\ for\ ruleNo\:%d = 无法添加防火墙规则，因为目标IP长度{0}对RuleNo{1}无效

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:885
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ there\ is\ no\ state\ for\ ruleNo\:%d = 无法添加防火墙规则，因为RuleNo没有状态：{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:892
# args: vo.getDestIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ description\ length\ %s\ is\ not\ valid\ for\ ruleNo\:%d = 无法添加防火墙规则，因为描述长度{0}对RuleNo无效：{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:942
# args: 
the\ configuration\ file\ has\ format\ error = 配置文件有格式错误

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:948
# args: errorInfo
the\ firewall\ rules\ in\ the\ configuration\ file\ have\ syntax\ errors\:\ %s = 配置文件中的防火墙规则有语法错误：{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:272
# args: rsp.getError()
sync\ firewall\ config\ failed,because\ %s = 同步防火墙配置失败，因为{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:459
# args: rsp.getError()
update\ firewall\ ruleSet\ action\ failed,\ because\ %s = 更新防火墙规则集操作失败，因为{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:492
# args: l3Uuid,vRouterUuid
Can\ not\ find\ l3[%]\ related\ mac\ on\ vRouter[%s] = 在VRouter[{0}]上找不到与L3[%]相关的MAC

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:557
# args: cmd.getRef().getRuleSetInfo().getRules().get(0).getRuleNumber(),rsp.getError()
create\ firewall\ rule[%s]\ failed,\ because\ %s = 创建防火墙规则[{0}]失败，原因是{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:645
# args: vRouterUuid,re.getError().getCause()
delete\ firewall\ on\ vRouter[%s],because\ %s = 删除VRouter[{0}]上的防火墙，因为{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:851
# args: vRouterUuid,rsp.getError()
delete\ firewall\ rule\ failed\ on\ vRouter[%s],\ because\ %s = 在VRouter[{0}]上删除防火墙规则失败，因为{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:784
# args: cmd.getRuleSet().getName(),re.getError().getCause()
create\ firewall\ ruleSet[%s]\ failed,\ because\ %s = 创建防火墙规则集[{0}]失败，原因是{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:936
# args: vRouterUuid,rsp.getError()
change\ firewall\ rule\ state\ on\ vRouter[%s]\ failed,\ because\ %s = 更改VRouter[{0}]上的防火墙规则状态失败，原因是{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1032
# args: struct.getRuleSetUuid(),re.getError()
attach\ firewall\ ruleSet[%s]\ failed,\ because\ %s = 附加防火墙规则集[{0}]失败，原因是{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1063
# args: 
detach\ ruleSet\ failed,\ maybe\ it\ has\ been\ deleted = 分离规则集失败，它可能已被删除

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1129
# args: struct.getRuleSetUuid(),re.getError().getCause()
detach\ firewall\ ruleSet[%s]\ failed,because\ %s = 分离防火墙规则集[{0}]失败，原因是{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:114
# args: msg.getVpcFirewallUuid()
cannot\ find\ vpcFirewall[uuid\:%s]\ related\ vRouter = 找不到与vpcFirewall[uuid：{0}]相关的虚拟路由器

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:109
# args: msg.getVpcFirewallUuid()
cannot\ find\ vpcFirewall[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到vpcFirewall[uuid：{0}]，它可能已被删除

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:125
# args: msg.getRuleSetUuid()
cannot\ find\ vpcFirewallRuleSet[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到VpcFirewallRuleSet[uuid：{0}]，它可能已被删除

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:301
# args: msg.getUuid()
cannot\ find\ vpcFirewallIpSetTemplate[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到VpcFireWallipSetTemplate[uuid：{0}]，它可能已被删除

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:396
# args: msg.getRuleSetUuid(),msg.getL3Uuid(),errorCode.getCause()
attach\ firewall\ ruleSet[%s]\ to\ l3[%s]\ failed,because\ %s = 将防火墙规则集[{0}]附加到L3[{1}]失败，原因是{2}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:424
# args: msg.getL3Uuid(),errorCode.getCause()
detach\ firewall\ ruleSet\ from\ l3[%s]\ failed,because\ %s = 从L3[{0}]分离防火墙规则集失败，原因是{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:475
# args: duplicateRuleNumber.get(),ref.getVpcFirewallUuid(),ref.getL3NetworkUuid(),ref.getPacketsForwardType()
find\ duplicate\ rule\ numbers\ %s\ on\ firewall[%s],l3[%s],forward[%s] = 在防火墙[{1}]、L3[{2}]、转发[{3}]上查找重复的规则编号{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:483
# args: self.getUuid()
no\ changes\ in\ ruleset\ %s = 规则集{0}中没有更改

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:515
# args: firewall.get()
firewall\ %s\ related\ vpc\ not\ in\ running\ state = 防火墙{0}相关的VPC未处于运行状态

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:753
# args: self.getUuid(),refVOs.size()
default\ ruleset\ %s\ can\ only\ attached\ to\ one\ interface\ forward,\ but\ find\ %s\ related\ interface = 默认规则集{0}只能转发到一个接口，但找到{1}个相关接口

# at: src/main/java/org/zstack/vrouterRoute/VRouterRouteApiInterceptor.java:115
# args: 
destination[%s]\ can\ not\ has\ blackHole\ route\ and\ static\ route\ at\ same\ time = 目标[{0}]不能同时具有黑洞路由和静态路由

# at: src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java:469
# args: msg.getUuid()
cannot\ find\ the\ route\ table\ [uuid\:%s] = 找不到路由表[uuid:{0}]

# at: src/main/java/org/zstack/xdragon/XDragonFilterExtensionPoint.java:30
# args: 
xdragon\ host\ not\ support\ create\ vm\ using\ an\ iso\ image. = 神龙服务器不支持使用ISO镜像创建云主机。

# at: src/main/java/org/zstack/xdragon/XDragonHostFactory.java:34
# args: msg.getClusterUuid(),XDragonConstant.HYPERVISOR_TYPE
cluster[uuid\:%s]\ hypervisorType\ is\ not\ %s = 群集[uuid：{0}]管理程序类型不是{1}

# at: src/main/java/org/zstack/yunshan/util/YunshanClient.java:46
# args: 
the\ url\ is\ null,\ please\ config\ the\ YunShan\ NSP. = URL为空，请配置云山NSP。

# at: src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java:55
# args: msg.getUsbDeviceUuid(),inventory.getVmInstanceUuid()
usb\ device[uuid\:%s]\ has\ been\ attached\ VM[uuid\:%s],\ cannot\ be\ add\ to\ zbox = USB设备[uuid：{0}]已连接到云主机[uuid：{1}]，无法添加到ZBox

# at: src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java:72
# args: zbox.getName(),zbox.getStatus()
zbox[name\:%s]\ status\ is\ not\ Ready,\ current\ status\ is\ %s = ZBox[名称：{0}]状态未就绪，当前状态为{1}

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:122
# args: msg.getZBoxUuid()
zbox[uuid\:%s]\ is\ still\ in\ use,\ cannot\ eject\ it = ZBox[uuid：{0}]仍在使用，无法将其弹出

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:151
# args: msg.getZBoxUuid()
zbox[uuid\:%s]\ is\ not\ Ready,\ cannot\ sync\ capacity. = ZBox[uuid：{0}]未就绪，无法同步容量。

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:219
# args: self.getMountPath(),msg.getInstallPath()
only\ file\ on\ zbox[mountPath\:%s]\ can\ be\ deleted.\ but\ pass\ [%s] = 只能删除ZBox[mountPath：{0}]上的文件。但传递[{1}]

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:285
# args: self.getName(),self.getStatus()
zbox[name\:%s]\ state\ is\ not\ Ready,\ current\ state\ is\ %s = ZBox[名称：{0}]状态未就绪，当前状态为{1}

# at: src/main/java/org/zstack/zbox/ZBoxFactory.java:57
# args: zbox.getUuid()
zbox[uuid\:\ %s]\ seems\ like\ removed = ZBox[uuid：{0}]似乎已删除

# at: src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java:140
# args: apiStr
output\ from\ [%s]\ is\ empty = [{0}]的输出为空

# at: src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java:159
# args: apiName,JSONObjectUtil.toJsonString(ob)
call\ action[%s]\ failed,\ cause\:\ %s = 调用操作[{0}]失败，原因：{1}

# at: src/main/java/org/zstack/zql/ast/visitors/OrderByExprVistor.java:14
# args: node.getDirection()
invalid\ order\ by\ clause,\ expect\ direction[asc,desc]\ but\ got\ %s = ORDER BY子句无效，应为方向[ASC，DESC]，但得到{0}

# at: src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java:22
# args: m.simpleInventoryName(),f
invalid\ order\ by\ clause,\ inventory[%s]\ doesn't\ have\ field[%s] = ORDER BY子句无效，库存[{0}]没有字段[{1}]

# at: src/main/java/org/zstack/zql/ast/visitors/plugin/SumPlugin.java:31
# args: 
the\ field\ to\ sum\ must\ be\ specified = 必须指定要汇总的字段

# at: src/main/java/org/zstack/zsv/ZsvManagerImpl.java:95
# args: volume.getUuid(),volume.getLastVmInstanceUuid()
volume\ %s\ still\ have\ snapshot\ group\ on\ vm\ %s,\ cannot\ attach\ to\ other\ vm = 卷{0}在云主机{1}上仍具有快照组，无法连接到其他云主机

# at: src/main/java/org/zstack/zsv/ZsvManagerImpl.java:127
# args: volume.getUuid()
volume\ %s\ still\ have\ snapshot\ group,\ cannot\ delete\ it = 卷{0}仍具有快照组，无法将其删除

# at: src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:241
# args: paramName,normalizedExpr
unknown\ parameter[%s]\ in\ zwatch\ return\ with\ clause,\ %s = ZWatch Return WITH子句中的未知参数[{0}]，{1}

# at: src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:250
# args: expr,e.getMessage()
invalid\ zwatch\ return\ with\ clause\:\ %s,\ %s = 无效的ZWatch返回WITH子句：{0}，{1}

# at: src/main/java/org/zstack/zwatch/ZWatchManagerImpl.java:1188
# args: 
Some\ messages\ have\ expired.\ The\ expired\ messages\ are\ not\ allowed\ to\ be\ modified.\ The\ system\ will\ automatically\ clean\ up\ the\ expired\ messages.\ Please\ operate\ later = 部分消息已过期，过期消息不允许修改。系统会自动清理过期消息，请稍后再操作

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:162
# args: msg.getKey()
event\ doesn't\ have\ label[%s] = 报警事件没有标签[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:167
# args: msg.getKey()
the\ event\ subscription\ already\ has\ the\ label[%s] = 事件订阅已经有标签[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:138
# args: msg.getActionUuid(),msg.getSubscriptionUuid()
the\ action[uuid\:%s]\ already\ attached\ to\ the\ event\ subscription[uuid\:%s] = 报警动作[uuid:{0}]已经被加载到报警时间订阅[uuid:{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:213
# args: msg.getNamespace()
namespace[%s]\ not\ found = 找不到命名空间[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:187
# args: ns.getName(),msg.getEventName()
namespace[%s]\ doesn't\ have\ the\ event[%s] = 命名空间[{0}]中没有事件[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:195
# args: msg.getEventName(),l.getKey()
event[%s]\ doesn't\ have\ the\ label[%s] = 事件[{0}]不存在标签[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:361
# args: k,l
duplicate\ key[%s]\ with\ values%s = 重复的键[{0}]和键值{1}

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:222
# args: msg.getMetricName()
Period\ field\ is\ not\ supported\ for\ metric\ [name\:%s] = 度量[名称：{0}]不支持期间字段

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:219
# args: msg.getMetricName()
Period\ field\ can\ not\ be\ null\ for\ metric\ [name\:%s] = 度量[名称：{0}]的期间字段不能为Null

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:401
# args: msg.getNamespace(),metricName
namespace[%s]\ doesn't\ have\ the\ metric[%s] = 命名空间[{0}]不包含时序数据[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:405
# args: metric
the\ metric[%s]\ is\ admin\ only,\ not\ available\ for\ current\ user = 指标[{0}]仅供管理员使用，不可用于当前用户

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:350
# args: templateVO.getMetricName(),l.getKey()
the\ metric[%s]\ doesn't\ have\ the\ label[%s] = 时序数据[{0}]没有标签[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:273
# args: actionType
invalid\ action\ type[%s] = 无效的报警动作类型[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:278
# args: actionUuid,actionType
action[uuid\:%s,\ type\:%s]\ not\ found = 找不到报警动作[uuid:{0}, 类型:{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:286
# args: msg.getActionUuid(),msg.getActionType(),msg.getAlarmUuid()
duplicated\ action[uuid\:%s,\ type\:%s]\ for\ the\ alarm[uuid\:%s] = 报警器[uuid:{2}]已经存在报警动作[uuid:{0}, 类型:{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:296
# args: msg.getKey(),msg.getOperator(),msg.getValue(),msg.getAlarmUuid()
duplicate\ label[key\:%s,\ operator\:%s,\ value\:%s]\ for\ the\ alarm[uuid\:%s] = 报警器[uuid:{2}]已经存在标签[key:{0}, operator:{1}, value:{2}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:390
# args: msg.getNamespace()
namespace[%s]\ not\ support = 不支持命名空间[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:110
# args: msg.getSubscriptionUuid()
cannot\ find\ the\ event\ subscription[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到事件订阅[uuid:{0}]，它可能已经被删除

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:119
# args: msg.getAlarmUuid()
cannot\ find\ the\ alarm[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到报警器[uuid:{0}]，它可能已经被删除

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:525
# args: alarmVO.getMetricName()
the\ metric[%s]\ repeatInterval\ value\ cannot\ be\ less\ than\ 1h = 时序数据[{0}]的报警间隔时间不能低于1h

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:16
# args: 
InsufficientData = 数据不足

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:14
# args: 
Alarm = 已触发

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:12
# args: 
OK = 监控中

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:55
# args: actionUuid
cannot\ find\ the\ topic[uuid\:%s] = 找不到主题[uuid:{0}]

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:96
# args: msg.getAlarmTextTemplateUuid()
cannot\ find\ SNSTextTemplate[uuid\:%s],\ it\ may\ have\ been\ deleted = 找不到报警文本模板[uuid:{0}], 它可能已经被删除

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:198
# args: vo.getApplicationPlatformType()
invalid\ application\ platform\ type[%s] = 无效的平台类型[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:212
# args: String.join(",\n", errorRecoverParams),String.join(",\n", AbstractTextTemplate.defaultSupportedParams.get(vo.getType()))
parameters\:\n\ %s\ are\ not\ supported\ by\ ZStack,\ available\ values\ are\:\n\ %s = 参数：\n{0}不受ZStack支持，可用值为：\n{1}

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:203
# args: vo.getApplicationPlatformType()
application\ platform/endpoint\ [%s]\ doesn't\ support\ user-defined\ template = 应用平台/终端[{0}]不支持用户定义模板

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:107
# args: sign,sign.length()
The\ length\ of\ aliyun\ sms\ sign\ should\ between\ 2\ to\ 12\ characters.\ Got\ sign\:\ [%s]\ with\ [%d]\ characters. = 阿里云短信标识的长度应在2-12个字符之间。获得符号：[{0}]，包含[{1}]个字符。

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:112
# args: alarmTemplateCode,alarmTemplateCode.length()
Sms\ template\ code\ is\ a\ string\ with\ 13\ characters.\ Got\ alarm\ template\ code\:\ [%s]\ with\ [%d]\ characters. = 短信模板代码是一个13个字符的字符串。获取报警模板代码：[{0}]，包含[{1}]个字符。

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:117
# args: eventTemplateCode,eventTemplateCode.length()
Sms\ template\ code\ is\ a\ string\ with\ 13\ characters.\ Got\ event\ template\ code\:\ [%s]\ with\ [%d]\ characters. = 短信模板代码是一个13个字符的字符串。获取事件模板代码：[{0}]，包含[{1}]个字符。

# at: src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java:31
# args: type
no\ template\ of\ this\ type：%s,\  = 没有此类型的模板：{0}，

# at: src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java:43
# args: e.getMessage()
template\ error：%s = 模板错误：{0}

# at: src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:1471
# args: DATA_DIR_CAPACITY_ALARM_uuid
alarm[uuid\:%s]\ is\ a\ system\ alarm\ which\ cannot\ be\ deleted = 报警器[uuid:{0}]是一个系统报警器，不能被删除

# at: src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:1482
# args: SNSSystemAlarmTopicManager.SYSTEM_ALARM_TOPIC_uuid,DATA_DIR_CAPACITY_ALARM_uuid
removing\ system\ topic[uuid\:%s]\ from\ system\ alarm[uuid\:%s]\ is\ forbidden = 禁止从系统报警器[uuid:{1}]移除系统主题[uuid:{0}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:270
# args: l.getKey(),AuditDataV2.queryableLoginLabels
invalid\ label[%s],\ valid\ queryable\ labels\ are\ %s = 无效的标签[{0}]，有效的可查询标签是{1}

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:487
# args: startTime,endTime
startTime[%s]\ is\ greater\ than\ endTime[%s] = 开始时间[{0}]大于结束时间[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:162
# args: 
dataUuid\ cannot\ be\ missed = 不能缺少数据用户ID

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:168
# args: 
dataStartTime\ and\ dataEndTime\ cannot\ be\ missed = DataStartTime和DataEndTime不能丢失

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:172
# args: msg.getDataStartTime(),msg.getDataEndTime()
dataStartTime[%s]\ is\ greater\ than\ dataEndTime[%s] = DataStartTime[{0}]大于DataEndTime[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:190
# args: Namespace.ZSTACK_NAMESPACE_PREFIX
namespace\ name\ cannot\ start\ with\ %s\ that\ is\ reserved = 名字空间(namespace)不能以{0}开头

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:396
# args: end,msg.getEndTime(),start,msg.getStartTime()
endTime[%s,\ %sms]\ must\ not\ be\ before\ startTime[%s,\ %sms] = 停止时间(endTime)[{0}, {1}ms]不能在开始时间(startTime)[{2}, {3}ms]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:211
# args: MAX_QUERY_PERIOD
query\ period\ cannot\ exceed\ %s = 查询期间不能超过{0}

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:355
# args: msg.getNamespace()
cannot\ find\ namespace[%s] = 名字空间(namespace[{0}]不存在

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:228
# args: msg.getMetricName(),msg.getNamespace()
cannot\ find\ metric[%s]\ in\ namespace[%s] = 名字空间(namespace[{1}]中找不到时序数据[{0}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:378
# args: msg.getMetricName(),labels,label.getKey()
metric[%s]'s\ labels[%s]\ does\ not\ include\ [%s] = 时序数据[{0}]的标签列表[{1}]没有指定的标签[{2}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:253
# args: msg.getMetricName(),l.getValue()
metric[%s]\ does\ not\ has\ filter[%s] = 时序数据[{0}]不包含过滤条件[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:324
# args: msg.getSession().getAccountUuid(),opt.get().getValue()
account[uuid\:\ %s]\ has\ no\ access\ to\ the\ resource[uuid\:\ %s] = 帐户[uuid：{0}]无权访问资源[uuid：{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:346
# args: 
if\ namespace\ is\ all,\ not\ support\ specify\ metric\ and\ labels = 如果命名空间为ALL，则不支持指定规格和标签

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:440
# args: msg.getNamespace()
no\ namespace[%s]\ defined\ in\ the\ system = 系统中未定义名字空间(namespace[{0}])

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:443
# args: msg.getNamespace(),msg.getMetricName()
the\ namespace[%s]\ has\ no\ metric[%s] = 名字空间(namespace[{0}])不包含时序数据[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:433
# args: 
The\ url\ format\ is\ invalid,\ the\ beginning\ is\ not\ http = URL格式无效，开头不是HTTP

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:449
# args: 
Illegal\ json\ string,\ labelsJsonStr\ format\ is\ invalid = 非法的JSON字符串，labelsjsonstr格式无效

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:477
# args: url
platform[url\=%s]\ already\ exists = 平台[URL={0}]已存在

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:498
# args: msg.getAlertDataUuid()
alert\ acknowledgement\ record\ does\ not\ exist = 警报确认记录不存在

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:516
# args: tableName
invalid\ table[%s] = 表[{0}]无效

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:522
# args: endTime,startTime
endTime[%s]\ must\ not\ be\ before\ startTime[%s] = EndTime[{0}]不能早于StartTime[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:527
# args: maxDurationDay
the\ time\ interval\ exceeds\ %\ days = 时间间隔超过%天

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:19
# args: 
Normal = 提示

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:17
# args: 
Important = 严重

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:15
# args: 
Emergent = 紧急

# at: src/main/java/org/zstack/zwatch/datatype/Function.java:106
# args: expr,e.getMessage()
invalid\ function\:\ %s,\ %s = 无效的方法: {0}, {1}

# at: src/main/java/org/zstack/zwatch/datatype/Function.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ function\ found = 无效的表达式: {0}，找不到对应的方法

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:58
# args: str
the\ label\ string[%s]\ contains\ no\ valid\ operator = 标签中[{0}]未包含有效的比较符号(operator)

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:79
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'key'\ field\ cannot\ be\ null.\ %s = 无效的标签"key"不能为空。{0}

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:82
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'op'\ field\ is\ null\ or\ something\ another\ than\ Regex\ and\ Equal.\ %s = 无效的标签，'op'为空或者是其它的非正则或者等于符号。{0}

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:85
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'value'\ field\ cannot\ be\ null.\ %s = 无效的标签"value"不能为空。{0}

# at: src/main/java/org/zstack/zwatch/datatype/ValueCondition.java:73
# args: str
the\ ValueCondition\ string[%s]\ require\ 'value'\ as\ key\  = ValueCondition字符串[{0}]需要“ value ”作为键

# at: src/main/java/org/zstack/zwatch/function/ArgumentChecker.java:30
# args: value,name
invalid\ value[%s]\ of\ the\ argument[%s] = 参数[{1}]值(value)[{0}]无效

# at: src/main/java/org/zstack/zwatch/function/ExtremumFunction.java:24
# args: 
unknown\ arguments = 未知参数

# at: src/main/java/org/zstack/zwatch/function/ExtremumFunction.java:30
# args: 
missing\ required\ argument = 缺少必需的参数

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:88
# args: name
missing\ required\ argument[%s] = 缺少参数[{0}]

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:101
# args: k
duplicate\ argument[%s] = 重复的参数[{0}]

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:116
# args: func.getName()
unknown\ function[%s] = 未知方法[{0}]

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:32
# args: v
value[%s]\ is\ not\ a\ Integer\ number = 值(value)[{0}]不是一个整数

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:19
# args: v
invalid\ argument[limit\:%s],\ it\ can't\ be\ a\ negative\ number = 无效的参数[limit:{0}]，不能是负数

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:29
# args: v
invalid\ argument[start\:%s],\ it\ can't\ be\ a\ negative\ number = 参数[开始：{0}]无效，它不能是负数

# at: src/main/java/org/zstack/zwatch/function/SortFunction.java:42
# args: arg.name
unknown\ argument[%s] = 未知参数[{0}]

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:62
# args: ret.getError()
unable\ to\ query\ influxdb,\ %s = 无法查询InfluxDB，{0}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:106
# args: JSONObjectUtil.toJsonString(ret)
invalid\ influxdb\ response\:\ %s,\ no\ name\ found\ in\ columns = InfluxDB响应无效：{0}，在列中找不到名称

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:92
# args: retention,res.getError()
failed\ to\ create\ influxdb\ retention\ '%s',\ %s = 无法创建InfluxDB保留“{0}”，{1}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:85
# args: retention,res.getError()
failed\ to\ alter\ influxdb\ retention\ '%s',\ %s = 无法更改InfluxDB保留“{0}”，{1}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:124
# args: defaultUserName,res.getError()
failed\ to\ create\ influxdb\ default\ user\ '%s',\ %s = 无法创建InfluxDB默认用户“{0}”，{1}

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:806
# args: name
cannot\ find\ EventFamily[name\:%s] = 找不到事件族[name:{0}]

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:797
# args: name,namespace
cannot\ find\ EventFamily[name\:%s,\ namespace\:%s] = 找不到事件族[name:{0}, namespace:{1}]

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:726
# args: label.getKey(),nameSpaceLabelList
invalid\ query\ label[%s].\ Allowed\ label\ names\ are\ %s = 无效的查询标签[{0}]。允许标签名是 {1}

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:627
# args: name.getValue(),InfluxEventDataV2.FIELD_NAMESPACE
there\ are\ multiple\ EventFamily\ with\ the\ name[%s],\ you\ must\ specify\ the\ label[%s] = 存在多个名为[{0}]的事件族，你必须指定标签[{1}]

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:55
# args: msg.getInstanceUuid()
the\ instance[%s]\ is\ already\ in\ the\ group = 实例[{0}]已在组中

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:66
# args: msg.getInstanceUuid()
instance[%s]\ is\ not\ in\ the\ group = 实例[{0}]不在组中

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:76
# args: msg.getGroupUuid()
The\ monitorGroup[%s]\ does\ not\ have\ an\ monitorTemplate\ applied = MonitorGroup[{0}]未应用MonitorTemplate

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupBase.java:333
# args: 
The\ instance\ in\ the\ group\ has\ reached\ the\ maximum\ limit = 组中的实例已达到最大限制

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupManagerImpl.java:607
# args: 
The\ rule\ in\ the\ template\ has\ reached\ the\ maximum\ limit = 模板中的规则已达到最大限制

# at: src/main/java/org/zstack/zwatch/mysql/MysqlDatabaseDriver.java:51
# args: qo.getNamespaceName()
no\ mysql\ namespace[%s]\ found = 未找到MySQL命名空间[{0}]

# at: src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:48
# args: getName(),queryObject.getMetricName()
namespace[%s]\ has\ no\ metric[%s] = 名字空间(namespace)[{0}]没有任何时序数据(metric)[{1}]

# at: src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:54
# args: m.getName(),getName(),l.getKey()
metric[%s]\ of\ the\ namespace[%s]\ has\ no\ label\ named\ %s = 名字空间(namespace)[{1}]的时序数据(metric)[{0}]没有名为{2}的标签

# at: src/main/java/org/zstack/zwatch/namespace/NamespaceEventManagerImpl.java:437
# args: 
error\ happened\ but\ reason\ not\ specified = 发生了意想不到的错误

# at: src/main/java/org/zstack/zwatch/namespace/SystemNamespace.java:32
# args: d,Platform.getManagementServerIp()
folder[%s]\ not\ found\ on\ the\ management\ server[%s] = 在管理服务器[{1}]上找不到对应的文件夹[{0}]

# at: src/main/java/org/zstack/zwatch/prometheus/KvmHostScrape.java:165
# args: rsp.getError()
%s = {0}

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:35
# args: 
LessThanOrEqualTo = 小于等于

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:33
# args: 
LessThan = 小于

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:31
# args: 
GreaterThan = 大于

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:29
# args: 
GreaterThanOrEqualTo = 大于等于

# at: src/main/java/org/zstack/zwatch/utils/ResourceVOToNamespaceMappingUtils.java:78
# args: voClassSimpleName
resource[%s]\ doesn't\ support\ zwatch\ return\ with\ clause = 资源[{0}]不支持ZWatch Return WITH子句

# at: src/test/java/org/zstack/test/TestSafeWhile.java:80
# args: 
on\ purpose = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:56
# args: item
on\ purpose\ %d = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:39
# args: item
I\ should\ not\ be\ in\ error\ list\ %d = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:40
# args: item
I\ should\ not\ be\ in\ error\ list\ either\ %d = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:63
# args: 
done,\ on\ purpose = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:81
# args: 
I\ should\ not\ be\ errs\ list = 

# at: src/test/java/org/zstack/test/TestSafeWhile.java:82
# args: 
I\ should\ not\ be\ errs\ list\ either. = 

# at: src/test/java/org/zstack/test/aop/ManInTheMiddleService.java:40
# args: 
unit\ test\ asks\ it\ to\ fail = 

# at: src/test/java/org/zstack/test/compute/hostallocator/HostAllocateExtension.java:22
# args: 
On\ purpose = 

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:67
# args: 
on\ purpose\ 3 = 

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:75
# args: 
on\ purpose\ 1 = 

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:83
# args: 
on\ purpose\ 2 = 