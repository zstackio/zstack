# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:43
# args: accountUuid,userUuid
no\ pemission\ to\ do\ the\ operation\ for\ [accountUuid\:%s,\ userUuid\:%s] = no pemission to do the operation for [accountUuid:{0}, userUuid:{1}]

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:50
# args: 
If\ a\ specified\ Accesskey\ is\ expected,\ the\ AccesskeyId\ and\ the\ AccesskeySecret\ must\ be\ provided\ at\ the\ same\ time. = If a specified Accesskey is expected, the AccesskeyId and the AccesskeySecret must be provided at the same time.

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:72
# args: msg.getAccountUuid(),msg.getUserUuid()
[accountId\:\ %s,\ userID\:\ %s]\ is\ not\ valid\ account\ or\ iam2\ porject/user = [accountId: {0}, userID: {1}] is not valid account or iam2 porject/user

# at: src/main/java/org/zstack/accessKey/AccessKeyApiInterceptor.java:91
# args: msg.getAccountUuid(),msg.getUserUuid()
accessKey\ number\ for\ [accountId\:\ %s,\ userID\:\ %s]exceeds\ the\ max = accessKey number for [accountId: {0}, userID: {1}]exceeds the max

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:92
# args: ipVer
not\ support\ the\ ip\ version\ %d = not support the ip version {0}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:98
# args: ips,acl.getUuid()
%s\ duplicate/overlap\ ip\ entry\ with\ access-control-list\ group\:%s = {0} duplicate/overlap ip entry with access-control-list group:{1}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:105
# args: ips
ip\ format\ only\ supports\ ip/iprange/cidr,\ but\ find\ %s = ip format only supports ip/iprange/cidr, but find {0}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:109
# args: startIp,endIp,NetworkUtils.longToIpv4String(r.lowerEndpoint()),NetworkUtils.longToIpv4String(r.upperEndpoint()),acl.getUuid()
ip\ range[%s,\ %s]\ is\ overlap\ with\ [%s,\ %s]\ in\ access-control-list\ group\:%s = ip range[{0}, {1}] is overlap with [{2}, {3}] in access-control-list group:{4}

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:127
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ redirect\ rule,\ can\ not\ add\ IP\ Entry = the access-control-list groups[{0}] already own redirect rule, can not add IP Entry

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:133
# args: acl.getUuid(),AccessControlListConstants.MAX_ENTRY_COUNT_PER_GROUP
the\ access-control-list\ groups[%s]\ can't\ be\ added\ more\ than\ %d\ ip\ entries = the access-control-list groups[{0}] can't be added more than {1} ip entries

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:138
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ redirect\ rule,\ can\ not\ add\ ip\ entry = the access-control-list groups[{0}] already own redirect rule, can not add ip entry

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:154
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ ip\ entry,\ can\ not\ add\ redirect\ rule = the access-control-list groups[{0}] already own ip entry, can not add redirect rule

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:158
# args: acl.getUuid()
the\ access-control-list\ groups[%s]\ already\ own\ one\ redirect\ rule,\ can\ not\ add\ redirect\ rule = the access-control-list groups[{0}] already own one redirect rule, can not add redirect rule

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:162
# args: 
domain\ and\ url\ can\ not\ both\ empty = domain and url can not both empty

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:178
# args: msg.getUrl()
url[%s]\ is\ not\ validate\ url = url[{0}] is not validate url

# at: src/main/java/org/zstack/acl/AccessControlListApiInterceptor.java:167
# args: msg.getDomain()
domain[%s]\ is\ not\ validate\ domain = domain[{0}] is not validate domain

# at: src/main/java/org/zstack/aliyun/account/AliyunAccountBase.java:348
# args: builder.deleteCharAt(builder.length() - 1),timeout
cannot\ connect\ to\ [%s]\ in\ %d\ milliseconds,\ so\ aliyun\ openapi\ is\ unreachable. = cannot connect to [{0}] in {1} milliseconds, so aliyun openapi is unreachable.

# at: src/main/java/org/zstack/aliyun/backup/BackupToAliyunBase.java:466
# args: 
no\ bucket\ found\ for\ backup = no bucket found for backup

# at: src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java:28
# args: 
accessKey\ and\ keySecret\ must\ be\ set = accessKey and keySecret must be set

# at: src/main/java/org/zstack/aliyun/core/AliyunEbsClient.java:73
# args: 
ocean\ api\ endpoint\ must\ not\ be\ null = ocean api endpoint must not be null

# at: src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:33
# args: 
accessKey\ and\ keySecret\ must\ be\ set! = accessKey and keySecret must be set!

# at: src/main/java/org/zstack/aliyun/core/AliyunNasClient.java:40
# args: 
regionId\ must\ be\ set! = regionId must be set!

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2162
# args: AliyunConstant.DEFAULT_ENTRY_WAIT_STATUS_TIMEOUT
entry\ is\ still\ existed\ after\ %s\ ms = entry is still existed after {0} ms

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2648
# args: request.getInstanceIds()
cannot\ find\ EcsInstance[%s],\ please\ check\ if\ it\ exists\ in\ Aliyun\ console = cannot find EcsInstance[{0}], please check if it exists in Aliyun console

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:2708
# args: 
image\ already\ existed\ remote,\ please\ use\ sync\ first. = image already existed remote, please use sync first.

# at: src/main/java/org/zstack/aliyun/core/AliyunSdkImpl.java:3015
# args: request.getRegionId()
regionId[%s]\ is\ invalid\ by\ aliyun! = regionId[{0}] is invalid by aliyun!

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:61
# args: 
Not\ a\ valid\ message! = Not a valid message!

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:177
# args: action,result.ErrorCode,result.ErrorMessage
%s\ failed,\ ErrorCode\:\ %s,\ ErrorMessage\:\ %s = {0} failed, ErrorCode: {1}, ErrorMessage: {2}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:301
# args: 15000
Device\ Not\ Ready\ in\ %d\ milli\ seconds = Device Not Ready in {0} milli seconds

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:497
# args: result.Content.TaskStatus
snapshot\ task\ status\ is\ finished\ %s = snapshot task status is finished {0}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:493
# args: msg.getTimeout(),result.Content.Progress,result.Content.TaskStatus
snapshot\ task\ cannot\ finished\ in\ %d\ milliseconds,\ now\ progress\ is\ %d,\ status\ is\ %s = snapshot task cannot finished in {0} milliseconds, now progress is {1}, status is {2}

# at: src/main/java/org/zstack/aliyun/core/AliyunStorageSdkIml.java:898
# args: 
not\ supported\ HybridClient = not supported HybridClient

# at: src/main/java/org/zstack/aliyun/core/AliyunUtils.java:259
# args: e.getMessage()
add\ endpoint\ to\ sdk\ failed,\ due\ to\:\ %s = add endpoint to sdk failed, due to: {0}

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:86
# args: 
cannot\ find\ key\ /\ secret\ from\ msg = cannot find key / secret from msg

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:410
# args: 
cannot\ input\ 0-length\ file\ as\ vm\ images! = cannot input 0-length file as vm images!

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:499
# args: e.getMessage()
Permission\ denied\ for\:\ %s = Permission denied for: {0}

# at: src/main/java/org/zstack/aliyun/core/OssSdkImpl.java:588
# args: e.getRequestId()
Bucket\ name\ is\ already\ existed\ (maybe\ created\ by\ other\ user),\ Please\ select\ a\ different\ name\ and\ try\ again.(aliyun\ request-id\:\ %s) = Bucket name is already existed (maybe created by other user), Please select a different name and try again.(aliyun request-id: {0})

# at: src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java:277
# args: HybridType.AliyunEBS.toString()
arg\ 'endpoint'\ must\ be\ set\ in\ %s\ type = arg 'endpoint' must be set in {0} type

# at: src/main/java/org/zstack/aliyun/core/datacenter/AliyunPrivateDataCenterBase.java:332
# args: type.toString()
not\ supported\ datacenter\ [%s]\ type\ here! = not supported datacenter [{0}] type here!

# at: src/main/java/org/zstack/aliyun/core/identityzone/AliyunPrivateIdentityZoneBase.java:175
# args: 
must\ indicate\ zoneId\ in\ private\ aliyun. = must indicate zoneId in private aliyun.

# at: src/main/java/org/zstack/aliyun/ebs/storage/OceanApi.java:87
# args: e.getMessage()
make\ ocean\ api\ signature\ string\ failed\:\ %s = make ocean api signature string failed: {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageApiInterceptor.java:30
# args: 
url(ocean\ endpoint)\ must\ be\ set\ for\ aliyun\ ebs\ backupstorage = url(ocean endpoint) must be set for aliyun ebs backupstorage

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java:376
# args: 
aliyun\ ebs\ backup\ storage\ do\ not\ support\ to\ cancel\ download\ image = aliyun ebs backup storage do not support to cancel download image

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageBase.java:620
# args: objectFile,ovo.getBucketName()
no\ such\ object\ %s\ found\ in\ bucket\ %s = no such object {0} found in bucket {1}

# at: src/main/java/org/zstack/aliyun/ebs/storage/backup/AliyunEbsBackupStorageCascadeExtenstion.java:46
# args: oss.getUuid(),evo.getUuid()
cannot\ delete\ oss\ bucket\ [%s],\ Aliyun\ Ebs\ BackupStorage\ [%s]\ still\ existed,\ please\ delete\ it\ first. = cannot delete oss bucket [{0}], Aliyun Ebs BackupStorage [{1}] still existed, please delete it first.

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:147
# args: vol.getUuid()
cannot\ find\ device\ path\ from\ volume\:\ %s = cannot find device path from volume: {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:490
# args: 
aliyun\ ebs\ not\ support\ resize\ on\ running\ vm\ now. = aliyun ebs not support resize on running vm now.

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsKvmFactory.java:612
# args: isoUuid
iso\ [%s]\ has\ been\ attached,\ we\ can\ not\ attach\ it\ until\ detach\ it = iso [{0}] has been attached, we can not attach it until detach it

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:39
# args: msg.getUrl()
url\ must\ starts\ with\ http\://\ or\ https\://,\ but\ got\ %s = url must starts with http:// or https://, but got {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:35
# args: 
url(ocean\ endpoint)\ must\ be\ set\ for\ aliyun\ ebs\ primarystorage = url(ocean endpoint) must be set for aliyun ebs primarystorage

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:43
# args: 
panguPartitionUuid\ or\ identityZoneUuid\ must\ be\ set. = panguPartitionUuid or identityZoneUuid must be set.

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageApiInterceptor.java:49
# args: msg.getPanguPartitionUuid(),msg.getIdentityZoneUuid()
panguPartitionUuid\ [%s]\ not\ be\ matched\ with\ identityZoneUuid\ [%s] = panguPartitionUuid [{0}] not be matched with identityZoneUuid [{1}]

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:669
# args: self.getUuid(),self.getName()
the\ aliyun\ ebs\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = the aliyun ebs primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:2888
# args: reply1.getProgress()
create\ snapshot\ timeout,\ progress\ is\ %d = create snapshot timeout, progress is {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:1971
# args: msg.getVolume().getRootImageUuid()
cannot\ find\ snapshot\ from\ image\:\ %s,\ maybe\ the\ image\ has\ been\ deleted = cannot find snapshot from image: {0}, maybe the image has been deleted

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:2746
# args: 
ebs\ primarystorage\ cannot\ support\ decrease\ size\ now = ebs primarystorage cannot support decrease size now

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageBase.java:3134
# args: bsvo.getType()
aliyun\ ebs\ primarystorage\ only\ support\ aliyun\ ebs\ bs,\ actually\ get\ type\:\ %s = aliyun ebs primarystorage only support aliyun ebs bs, actually get type: {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStorageCascadeExtension.java:46
# args: iz.getUuid(),evo.getUuid()
cannot\ delete\ identity\ zone\ [%s],\ Aliyun\ Ebs\ PrimaryStorage\ [%s]\ still\ existed,\ please\ delete\ it\ first. = cannot delete identity zone [{0}], Aliyun Ebs PrimaryStorage [{1}] still existed, please delete it first.

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:113
# args: installPath
invalid\ install\ path\:\ %s = invalid install path: {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:24
# args: volumeId,url
append\ volumeId\:\ %s,\ but\ another\ volumeId\ existed\ in\ url\:\ %s = append volumeId: {0}, but another volumeId existed in url: {1}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:79
# args: url
invalid\ install\ url\:\ %s = invalid install url: {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:35
# args: hostUuid,url
hostUuid\ [%s]\ already\ existed\ in\ url\:\ %s = hostUuid [{0}] already existed in url: {1}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:83
# args: hostUuid
cannot\ find\ devicePath\ on\ host\:\ %s = cannot find devicePath on host: {0}

# at: src/main/java/org/zstack/aliyun/ebs/storage/primary/AliyunEbsPrimaryStoragePathMaker.java:128
# args: installPath
invalid\ snapshot\ install\ path\:\ %s = invalid snapshot install path: {0}

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:79
# args: eivo.getUuid(),eivo.getName(),eivo.getCreateDate()
ecs\ image\ existed\ remote\ and\ local,\ ecs\ image\ uuid\:\ %s,\ name\:\ %s,\ created\ time\:\ %s = ecs image existed remote and local, ecs image uuid: {0}, name: {1}, created time: {2}

# at: src/main/java/org/zstack/aliyun/ecs/CheckEcsImageExistPublicFlow.java:107
# args: msg.getName(),new SimpleDateFormat("yyyy/MM/dd HH:mm:ss").format(HybridUtilsForAliyun.fmtTime(rpl.getCreateDate()))
ecs\ image\ existed\ remote,\ name\:\ %s,\ created\ time\:\ %s = ecs image existed remote, name: {0}, created time: {1}

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:184
# args: 
No\ Available\ instance\ types\ now. = No Available instance types now.

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:253
# args: regionId,data1.get("type")
This\ region\ [%s]\ cannot\ produce\ instance\ type\ [%s]\ now,\ please\ select\ another\ instance\ type\ or\ another\ region = This region [{0}] cannot produce instance type [{1}] now, please select another instance type or another region

# at: src/main/java/org/zstack/aliyun/ecs/CreateEcsInstancePublicFlow.java:344
# args: ecs.getUuid(),ecs.getEcsInstanceId()
no\ system\ disk\ found\ for\ ecs\:\ [%s],\ ecs\ id\ is\:\ [%s] = no system disk found for ecs: [{0}], ecs id is: [{1}]

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:65
# args: evo.getEcsStatus().toString()
Only\ delete\ ecs\ which\ status\ is\ running\ or\ stopped,\ now\ is\ %s = Only delete ecs which status is running or stopped, now is {0}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:70
# args: evo.getChargeType().toString()
Only\ postpaid\ ecs\ support\ delete\ remote,\ the\ indicate\ ecs\ charge\ type\ is\:\ %s = Only postpaid ecs support delete remote, the indicate ecs charge type is: {0}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:84
# args: 
Only\ admin\ can\ set\ parameter\ [onlyZstack]\ \=\ false = Only admin can set parameter [onlyZstack] = false

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:93
# args: evo.getAvailableIpAddressCount()
vSwitch\ availableIpAddress\ is\ not\ enough,\ now\ is\ (%d) = vSwitch availableIpAddress is not enough, now is ({0})

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:97
# args: privateIp,cidr
%s\ is\ not\ in\ cidr\ range\:\ %s = {0} is not in cidr range: {1}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:103
# args: vSwitchUuid,ecs.getUuid()
private\ ip\ is\ existed\ in\ vswitch\:\ %s,\ allocated\ to\ ecs\:\ %s = private ip is existed in vswitch: {0}, allocated to ecs: {1}

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:137
# args: 
bandwidth\ must\ be\ set\ while\ allocate\ publicIp = bandwidth must be set while allocate publicIp

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:140
# args: msg.getPrivateIpAddress()
%s\ is\ not\ ipv4\ address = {0} is not ipv4 address

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:143
# args: msg.getEcsRootVolumeType(),EcsInstanceConstant.validVolumeCategory.toString()
%s\ is\ not\ valid\ volume\ type,\ valid\ types\ are\ [%s] = {0} is not valid volume type, valid types are [{1}]

# at: src/main/java/org/zstack/aliyun/ecs/EcsApiInterceptor.java:147
# args: 
instanceOffering\ or\ instanceType\ must\ be\ set! = instanceOffering or instanceType must be set!

# at: src/main/java/org/zstack/aliyun/ecs/EcsInstanceManagerImpl.java:517
# args: rly1.getVncUrl()
decode\ url\ failed\:\ %s = decode url failed: {0}

# at: src/main/java/org/zstack/aliyun/ecs/ExportImageFromBSFlow.java:52
# args: 
image\ has\ been\ deleted! = image has been deleted!

# at: src/main/java/org/zstack/aliyun/identityzone/AliyunIdentityZoneBase.java:187
# args: 
no\ identity\ found = no identity found

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:71
# args: 
the\ operation\ only\ custom\ image = the operation only custom image

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:80
# args: 
Only\ system\ disks\ can\ create\ mirrors = Only system disks can create mirrors

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:131
# args: 
can\ not\ delete\ ecs\ system\ image\ remote = can not delete ecs system image remote

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:142
# args: 
Only\ support\ ImageStoreBackupStorage = Only support ImageStoreBackupStorage

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:145
# args: 
image\ name\ cannot\ starts\ with\ http\://\ or\ https\:// = image name cannot starts with http:// or https://

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:158
# args: imageUuid
no\ backup\ storage\ found\ for\ imageUuid\:\ %s = no backup storage found for imageUuid: {0}

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:162
# args: imageUuid
exceeded\ backup\ storage\ found\ for\ the\ imageUuid\:\ %s,\ please\ indicate\ it\ manually = exceeded backup storage found for the imageUuid: {0}, please indicate it manually

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:173
# args: platform,EcsImageConstant.ECS_IMAGE_PLATFORM.getValid()
valid\ platform\:[%s]\ for\ aliyun\ image\ import,\ valid\ value\ are\:\ [%s] = valid platform:[{0}] for aliyun image import, valid value are: [{1}]

# at: src/main/java/org/zstack/aliyun/image/EcsImageApiInterceptor.java:178
# args: ivo.getUuid()
image\ [%s]\ is\ not\ enable\ now = image [{0}] is not enable now

# at: src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:306
# args: msg.getDataCenterUuid()
no\ ossbucket\ attached\ to\ the\ datacenter\:\ %s = no ossbucket attached to the datacenter: {0}

# at: src/main/java/org/zstack/aliyun/image/EcsImageManagerImpl.java:361
# args: msg.getImageUuid(),msg.getDataCenterUuid()
the\ indicated\ image\ [%s]\ is\ importing\ to\ datacenter\ [%s]\ now... = the indicated image [{0}] is importing to datacenter [{1}] now...

# at: src/main/java/org/zstack/aliyun/nas/core/AliyunNasApiInterceptor.java:44
# args: psUuids.toString()
PrimaryStorage\ [%s]\ still\ running,\ can\ not\ delete\ access\ group = PrimaryStorage [{0}] still running, can not delete access group

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:194
# args: msg.getSourceCidrIp(),msg.getAccessGroupUuid()
access\ group\ rule\ [%s]\ already\ existed\ in\ access\ group\ [%s] = access group rule [{0}] already existed in access group [{1}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasBase.java:849
# args: msg.getName(),msg.getDataCenterUuid()
access\ group\ [%s]\ already\ existed\ in\ datacenter\ [%s] = access group [{0}] already existed in datacenter [{1}]

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:150
# args: self.getFileSystemId(),regionId
no\ filesystem\ [%s]\ found\ in\ region\:\ %s = no filesystem [{0}] found in region: {1}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:203
# args: msg.getDataCenterUuid()
nas\ filesystem\ existed\ in\ datacenter\:\ %s = nas filesystem existed in datacenter: {0}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasFileSystemBase.java:304
# args: refs.toString()
some\ primary\ storage\ [%s]\ used\ this\ nas,\ can\ not\ delete\ it\ until\ delete\ the\ primary\ storage. = some primary storage [{0}] used this nas, can not delete it until delete the primary storage.

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:314
# args: cmsg.getWait()
mount\ domain\ not\ valid\ after\ %d\ milliseconds,\ delete\ it... = mount domain not valid after {0} milliseconds, delete it...

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:422
# args: 
there\ are\ no\ nas\ access\ group\ existed,\ please\ create\ at\ least\ one = there are no nas access group existed, please create at least one

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:404
# args: self.getMountDomain(),self.getNasFileSystemUuid()
no\ such\ mount\ target\ [%s]\ in\ nas\:\ %s = no such mount target [{0}] in nas: {1}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:472
# args: msg.getMountDomain(),msg.getNasFSUuid()
nas\ mount\ target\ [%s]\ existed\ in\ filesystem\:\ %s = nas mount target [{0}] existed in filesystem: {1}

# at: src/main/java/org/zstack/aliyun/nas/filesystem/AliyunNasMountTargetBase.java:512
# args: self.getAccessGroupUuid()
the\ access\ group\ attached\ is\ already\:\ %s = the access group attached is already: {0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2907
# args: imageVO.getUuid()
image\ [uuid\:%s]\ has\ been\ deleted = image [uuid:{0}] has been deleted

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:535
# args: vSwitchUuid
EcsVSwitchVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = EcsVSwitchVO[{0}] is not existed, may be it has been deleted!

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:528
# args: accessGroupUuid
AliyunNasAccessGroupVO[%s]\ is\ not\ existed,\ may\ be\ it\ has\ been\ deleted! = AliyunNasAccessGroupVO[{0}] is not existed, may be it has been deleted!

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:827
# args: self.getUuid()
cannot\ find\ an\ available\ host\ to\ operation\ in\ primary\ storage\:\ %s = cannot find an available host to operation in primary storage: {0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:906
# args: self.getUuid(),hostUuid,rsp.error
failed\ to\ ping\ aliyun\ nas\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = failed to ping aliyun nas primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:1394
# args: 
nas\ primary\ storage\ not\ mounted,\ please\ init\ it\ first! = nas primary storage not mounted, please init it first!

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2004
# args: vol.getUuid()
cannot\ find\ host\ to\ operate\ volume\:\ [%s] = cannot find host to operate volume: [{0}]

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2241
# args: self.getUuid()
cannot\ find\ and\ host\ to\ sync\ volume\ size\ in\ primary\:\ %s = cannot find and host to sync volume size in primary: {0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2268
# args: 
image\ [%s]\ has\ been\ deleted,\ cannot\ reinit\ root\ volume\ from\ it = image [{0}] has been deleted, cannot reinit root volume from it

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2423
# args: 
no\ available\ host\ could\ check\ mountPath! = no available host could check mountPath!

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2653
# args: String.join(",", msg.getBackupStorageUuids()),errorCodes.getCauses().get(0).getDetails()
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids\:\ %s,\ becasue\:\ %s = unable to allocate backup storage specified by uuids: {0}, becasue: {1}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmBackend.java:2795
# args: bsvo.getType()
aliyun\ nas\ primarystorage\ only\ support\ imagestore\ bs,\ actually\ get\ type\:\ %s = aliyun nas primarystorage only support imagestore bs, actually get type: {0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:161
# args: context.getInventory().getUuid(),context.getInventory().getName(),mine,e.getKey(),version,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage\ to\ cluster.\ Kvm\ host[uuid\:%s,\ name\:%s]\ in\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ a\ cluster\ that\ has\ kvm\ host[uuid\:%s],\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = unable to attach a primary storage to cluster. Kvm host[uuid:{0}, name:{1}] in cluster has qemu-img with version[{2}]; but the primary storage has attached to a cluster that has kvm host[uuid:{3}], which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunKvmFactory.java:344
# args: 
no\ available\ host\ could\ download\ imagecache! = no available host could download imagecache!

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:1147
# args: msg.getResourceUuid()
resource[uuid\:\ %s]\ cannot\ found = resource[uuid: {0}] cannot found

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:75
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:208
# args: self.getUuid(),self.getName()
the\ aliyun\ nas\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ delete\ bits\ on\ primarystorage = the aliyun nas primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for delete bits on primarystorage

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:619
# args: self.getUuid(),self.getName()
the\ Aliyun\ Nas\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = the Aliyun Nas primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:936
# args: hostUuid
failed\ to\ check\ mount\ path\ on\ host\:\ %s = failed to check mount path on host: {0}

# at: src/main/java/org/zstack/aliyun/nas/storage/primary/AliyunNasPrimaryStorageBase.java:1023
# args: 
cannot\ find\ a\ host\ to\ cleanup\ image\ cache. = cannot find a host to cleanup image cache.

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:533
# args: eipVo.getAllocateResourceUuid()
ecs\ instance[%s]\ isn't\ existed,\ please\ check\ it. = ecs instance[{0}] isn't existed, please check it.

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:537
# args: ecsVo.getUuid(),ecsVo.getEcsStatus()
Only\ ecs\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ detach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = Only ecs instances that are in the running and stopped status can detach the eip , but the ecs [{0}] status is [{1}] now 

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:2860
# args: msg.getUuid()
virtual\ border\:\ %s\ has\ been\ deleted = virtual border: {0} has been deleted

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3389
# args: tupleCidr,msg.getNextHopUuid()
destination\ cidr\ [%s]\ is\ existed\ and\ point\ to\ another\ instance-id\ [%s],\ please\ check\ or\ delete\ it\ first = destination cidr [{0}] is existed and point to another instance-id [{1}], please check or delete it first

# at: src/main/java/org/zstack/aliyun/network/AliyunNetworkServiceBase.java:3902
# args: evo.getUuid(),evo.getEcsStatus()
Only\ esc\ instances\ that\ are\ in\ the\ running\ and\ stopped\ status\ can\ attach\ the\ eip\ ,\ but\ the\ ecs\ [%s]\ status\ is\ [%s]\ now\  = Only esc instances that are in the running and stopped status can attach the eip , but the ecs [{0}] status is [{1}] now 

# at: src/main/java/org/zstack/aliyun/network/connection/AliyunConnectionManagerImpl.java:585
# args: msg.getVbrUuid()
Vbr\:\ [%s]\ is\ in\ create\ connection\ progress,\ please\ wait... = Vbr: [{0}] is in create connection progress, please wait...

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVbrRouteEntryFlow.java:80
# args: tuple.get(0, String.class),msg.getVbrUuid(),vpcCidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vbr\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = custom cidr [{0}] is already existed in vbr [{1}], it is overlapped with target cidr [{2}], please check and delete it first.

# at: src/main/java/org/zstack/aliyun/network/connection/CreateVpcRouteEntryFlow.java:71
# args: tuple.get(0, String.class),vRouterUuid,cidr
custom\ cidr\ [%s]\ is\ already\ existed\ in\ vrouter\ [%s],\ it\ is\ overlapped\ with\ target\ cidr\ [%s],\ please\ check\ and\ delete\ it\ first. = custom cidr [{0}] is already existed in vrouter [{1}], it is overlapped with target cidr [{2}], please check and delete it first.

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:51
# args: msg.getL3networkUuid()
No\ Such\ Cidr\ found\ for\ l3network\:\ %s = No Such Cidr found for l3network: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/GetCidrsFlow.java:42
# args: msg.getL3networkUuid()
No\ Such\ VRouter\ nic\ found\ for\ l3network\:\ %s = No Such VRouter nic found for l3network: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:43
# args: msg.getUuid()
no\ such\ vpc\ found\ for\:\ %s = no such vpc found for: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:48
# args: msg.getUuid()
no\ such\ vm\ found\ for\:\ %s = no such vm found for: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:53
# args: msg.getUuid()
no\ such\ vbr\ found\ for\:\ %s = no such vbr found for: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:58
# args: msg.getUuid()
no\ such\ l3network\ found\ for\:\ %s = no such l3network found for: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:62
# args: msg.getResourceType()
not\ a\ supported\ resource\ type\:\ %s = not a supported resource type: {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:68
# args: 
Only\ admin\ can\ create\ connections = Only admin can create connections

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:72
# args: msg.getCpeIp()
CpeIp\ must\ be\ ipv4\ address,\ but\ now\ is\ %s = CpeIp must be ipv4 address, but now is {0}

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:76
# args: 
cpeIp\ must\ be\ ipv4\ address = cpeIp must be ipv4 address

# at: src/main/java/org/zstack/aliyun/network/connection/VpcConnectionApiInterceptor.java:82
# args: msg.getL3networkUuid(),msg.getVpcUuid()
l3network\ %s\ and\ vpc\ %s\ already\ connected,\ please\ check\ it = l3network {0} and vpc {1} already connected, please check it

# at: src/main/java/org/zstack/aliyun/network/vpn/AliyunVpcVpnBase.java:955
# args: 
vpn\ gateway\ and\ user\ gateway\ are\ not\ in\ the\ same\ dataCenterUuid! = vpn gateway and user gateway are not in the same dataCenterUuid!

# at: src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:33
# args: msg.getBucketName(),msg.getDataCenterUuid()
ossBucket\ [%s]\ is\ already\ added\ in\ dataCenter\ [%s] = ossBucket [{0}] is already added in dataCenter [{1}]

# at: src/main/java/org/zstack/aliyun/oss/EcsOssApiInterceptor.java:41
# args: ovo.getUuid()
OssBucket[%s]\ is\ not\ attached. = OssBucket[{0}] is not attached.

# at: src/main/java/org/zstack/aliyun/oss/EcsOssManagerImpl.java:114
# args: 
domain,\ key,\ secret\ must\ be\ set\ all = domain, key, secret must be set all

# at: src/main/java/org/zstack/aliyun/oss/OssBucketCascadeExtension.java:107
# args: 
oss\ bucket\ is\ not\ empty! = oss bucket is not empty!

# at: src/main/java/org/zstack/aliyun/pangu/AliyunPanguApiInterceptor.java:39
# args: appName,partitionName,vo.getIdentityZoneUuid()
appName\:\ %s,\ partitionName\:\ %s\ is\ existed\ in\ identityZone\:\ %s = appName: {0}, partitionName: {1} is existed in identityZone: {2}

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:62
# args: 
Root\ volume\ cannot\ be\ deleted = Root volume cannot be deleted

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:83
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ cloud\ and\ portable\ property\ is\ false = Cannot set the disk's deleteWithInstance property to false when the category property of the disk is cloud and portable property is false

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:78
# args: 
Cannot\ set\ the\ disk's\ deleteWithInstance\ property\ to\ false\ when\ the\ category\ property\ of\ the\ disk\ is\ ephemeral = Cannot set the disk's deleteWithInstance property to false when the category property of the disk is ephemeral

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:95
# args: msg.getUuid()
The\ disk\ [%s]\ is\ not\ attach\ on\ any\ instance\  = The disk [{0}] is not attach on any instance 

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:121
# args: msg.getEcsUuid()
The\ state\ of\ the\ ecs\ [%s]\ instance\ must\ be\ running\ or\ stopped = The state of the ecs [{0}] instance must be running or stopped

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:105
# args: 
Only\ data\ disk\ can\ be\ mounted\ on\ ecs = Only data disk can be mounted on ecs

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:109
# args: 
The\ disk\ not\ be\ attach\ on\ any\ ecs = The disk not be attach on any ecs

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:143
# args: 
Non-independent\ disk\ can\ only\ be\ destroyed\ with\ instances = Non-independent disk can only be destroyed with instances

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:126
# args: 
Disk\ and\ ecs\ instances\ must\ be\ in\ the\ same\ zone = Disk and ecs instances must be in the same zone

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:130
# args: msg.getDiskUuid(),msg.getEcsUuid()
The\ disk\ [%s]\ is\ already\ mounted\ on\ the\ instance\ [%s] = The disk [{0}] is already mounted on the instance [{1}]

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:135
# args: 
Only\ data\ disk\ can\ attach\ to\ ecs = Only data disk can attach to ecs

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:139
# args: 
Cannot\ attach\ disk\ when\ in\ use = Cannot attach disk when in use

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:154
# args: 
The\ size\ and\ snapshot\ id\ in\ the\ request\ parameter\ must\ select\ one\ of\ the\ items\ to\ specify\ the\ size\ of\ the\ disk\ or\ create\ a\ disk\ using\ the\ snapshot. = The size and snapshot id in the request parameter must select one of the items to specify the size of the disk or create a disk using the snapshot.

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:167
# args: 
Not\ allowed\ create\ disk\ on\ root\ volume\ snapshot = Not allowed create disk on root volume snapshot

# at: src/main/java/org/zstack/aliyun/storage/disk/AliyunDiskApiInterceptor.java:176
# args: 
the\ disk\ name\ or\ description\ cannot\ set\ start\ with\ 'http\://'\ or\ 'https\://'\  = the disk name or description cannot set start with 'http://' or 'https://' 

# at: src/main/java/org/zstack/aliyun/storage/snapshot/AliyunSnapshotApiInterceptor.java:41
# args: 
The\ operation\ allows\ only\ when\ ecs\ state\ of\ the\ ecs\ instance\ status\ be\ running\ or\ stopped = The operation allows only when ecs state of the ecs instance status be running or stopped

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:60
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ a\ SftpBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = More than one BackupStorage on the same host identified by hostname. There has been a SftpBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. 

# at: src/main/java/org/zstack/apimediator/ApiValidator.java:68
# args: hostname,newBS
More\ than\ one\ BackupStorage\ on\ the\ same\ host\ identified\ by\ hostname.\ There\ has\ been\ an\ ImageStoreBackupStorage\ [hostname\:%s]\ existing.\ The\ BackupStorage\ type\ to\ be\ added\ is\ %s.\  = More than one BackupStorage on the same host identified by hostname. There has been an ImageStoreBackupStorage [hostname:{0}] existing. The BackupStorage type to be added is {1}. 

# at: src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java:486
# args: msg.getAppUuid()
PublishAppVO[uuid\:\ %s]\ is\ not\ existed = PublishAppVO[uuid: {0}] is not existed

# at: src/main/java/org/zstack/appcenter/AppCenterManagerImpl.java:588
# args: 
[appcenter]\ filterName\ must\ be\ appcenter\:true\ or\ appcenter\:false = [appcenter] filterName must be appcenter:true or appcenter:false

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:127
# args: struct.getParamName()
%s\ is\ in\ preParameters,\ but\ not\ be\ set = {0} is in preParameters, but not be set

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:131
# args: 
%s\ need\ Number\ value,\ but\ got\ wrong\ type = {0} need Number value, but got wrong type

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:136
# args: 
%s\ need\ Boolean\ value,\ but\ got\ wrong\ type = {0} need Boolean value, but got wrong type

# at: src/main/java/org/zstack/appcenter/ZStackAppCenterBase.java:141
# args: 
%s\ need\ String\ value,\ but\ got\ wrong\ type = {0} need String value, but got wrong type

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:389
# args: msg.getBuildSystemUuid()
cannot\ find\ build\ system\ [%s] = cannot find build system [{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:339
# args: msg.getBuildSystemUuid(),msg.getZoneUuid()
build\ system[uuid\:\ %s]\ has\ been\ attached\ to\ zone[uuid\:\ %s] = build system[uuid: {0}] has been attached to zone[uuid: {1}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:396
# args: msg.getBuildSystemUuid(),msg.getZoneUuid()
build\ system[uuid\:\ %s]\ has\ not\ been\ attached\ to\ zone[uuid\:\ %s] = build system[uuid: {0}] has not been attached to zone[uuid: {1}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:620
# args: appUuid
cannot\ find\ build\ application\:\ [%s] = cannot find build application: [{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:989
# args: 
imageStore\ is\ not\ Enabled = imageStore is not Enabled

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:993
# args: 
imageStore\ is\ not\ Connected = imageStore is not Connected

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:1147
# args: p.getDefaultValue()
cannot\ find\ imageUuid\ for\ image[%s] = cannot find imageUuid for image[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemImpl.java:1159
# args: msg.getUuid()
cannot\ find\ build-app[uuid\:\ %s],\ or\ it\ was\ in\ Deleting\ status = cannot find build-app[uuid: {0}], or it was in Deleting status

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:50
# args: msg.getUuid()
build-app[%s]\ is\ exported\ or\ is\ exporting,\ please\ delete\ it\ first = build-app[{0}] is exported or is exporting, please delete it first

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:63
# args: build.getUuid(),build.getName(),build.getHostname(),build.getUrl()
another\ build\ system[uuid\:\ %s,\ name\:\ %s]\ in\ this\ host[%s]\ used\ the\ url[%s] = another build system[uuid: {0}, name: {1}] in this host[{2}] used the url[{3}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:74
# args: msg.getDataPath()
dataPath\ must\ start\ with\ '/',\ actually\ got\ [%s] = dataPath must start with '/', actually got [{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:88
# args: 
both\ backupStorageUuid\ and\ hostname\ are\ null = both backupStorageUuid and hostname are null

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:95
# args: msg.getHostname()
cannot\ find\ imageStore\ which\ hostname\ is\ \:%s = cannot find imageStore which hostname is :{0}

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:98
# args: msg.getHostname()
find\ more\ than\ one\ imageStore\ which\ hostname\ is\:\ %s,\ please\ use\ backupStorageUuid\ instead = find more than one imageStore which hostname is: {0}, please use backupStorageUuid instead

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:102
# args: 
both\ backupStorageUuid\ and\ hostname\ are\ set,\ but\ they\ are\ not\ the\ same\ host = both backupStorageUuid and hostname are set, but they are not the same host

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:116
# args: 
buildAppUuid\ and\ exportId\ cannot\ both\ be\ null = buildAppUuid and exportId cannot both be null

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:120
# args: 
buildAppUuid\ and\ buildSystemUuid\ cannot\ both\ be\ null = buildAppUuid and buildSystemUuid cannot both be null

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:126
# args: 
no\ such\ exportId\ in\ build\ export\ history = no such exportId in build export history

# at: src/main/java/org/zstack/appcenter/buildsystem/AppBuildSystemInterceptor.java:130
# args: 
both\ exportId\ and\ buildAppUuid\ are\ set\ but\ they\ are\ not\ equal = both exportId and buildAppUuid are set but they are not equal

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:108
# args: self.getStatus()
unable\ to\ do\ the\ operation\ because\ the\ build\ system\ is\ in\ status\ of\ %s = unable to do the operation because the build system is in status of {0}

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:121
# args: msg.getBuildAppUuid()
cannot\ find\ the\ build\ app\ by\ uuid[%s] = cannot find the build app by uuid[{0}]

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:126
# args: status.toString()
build\ app\ is\ in\ %s\ status,\ which\ can\ not\ support\ the\ current\ operation. = build app is in {0} status, which can not support the current operation.

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:156
# args: buildUrl(path),rsp.error
rest\ call\ %s\ failed,\ because\:\ %s = rest call {0} failed, because: {1}

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:353
# args: 
build\ application\ is\ disabled\ because\ build\ system\ is\ in\ 'Disabled'\ state = build application is disabled because build system is in 'Disabled' state

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:506
# args: meta.getAppId(),meta.getVersion().getVersion()
create\ BuildApp\ failed,\ because\ appId[%s\:\ %s]\ is\ duplicated\ by\ another\ BuildApp = create BuildApp failed, because appId[{0}: {1}] is duplicated by another BuildApp

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:659
# args: buildUrl(CONNECT_BUILDSYSTEM_PATH),errorCode
unable\ to\ connect\ to\ localstorage\ build\ system[url\:%s],\ because\ %s = unable to connect to localstorage build system[url:{0}], because {1}

# at: src/main/java/org/zstack/appcenter/buildsystem/LocalStorageBuildSystemBase.java:762
# args: struct.getAppId(),struct.getVersion().getVersion()
add\ BuildApp\ failed,\ because\ appId[%s\:%s]\ is\ duplicated\ by\ another\ BuildApp = add BuildApp failed, because appId[{0}:{1}] is duplicated by another BuildApp

# at: src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java:48
# args: file
cannot\ find\ raw-template\ json\ file\ at\:\ %s = cannot find raw-template json file at: {0}

# at: src/main/java/org/zstack/appcenter/utils/AppCenterUtils.java:61
# args: e
Unable\ to\ create\ json\ template = Unable to create json template

# at: src/main/java/org/zstack/appliancevm/ApplianceVmAllocateNicFlow.java:108
# args: l2NetworkVO.getUuid()
there\ is\ no\ available\ nicType\ on\ L2\ network\ [%s] = there is no available nicType on L2 network [{0}]

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:136
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
appliance\ vm[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = appliance vm[uuid:{0}] is in status of {1} that cannot make http call to {2}

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:430
# args: getSelf().getUuid()
appliance\ vm\ %s\ stopped = appliance vm {0} stopped

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:709
# args: getSelf().getUuid()
appliance\ vm\ %s\ reboot = appliance vm {0} reboot

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:719
# args: getSelf().getUuid()
appliance\ vm\ %s\ reboot\ failed = appliance vm {0} reboot failed

# at: src/main/java/org/zstack/appliancevm/ApplianceVmBase.java:781
# args: getSelf().getUuid()
appliance\ vm\ %s\ start\ failed = appliance vm {0} start failed

# at: src/main/java/org/zstack/appliancevm/ApplianceVmKvmBootstrapFlow.java:64
# args: rsp.getError()
set\ appliance\ bootstrapinfo\ error,\ because\:%s = set appliance bootstrapinfo error, because:{0}

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:120
# args: msg.getUuid(),uuid
listener[uuid\:%s]\ are\ being\ used\ by\ the\ autoScalingVmTemplate[%s]\ and\ cannot\ be\ deleted = listener[uuid:{0}] are being used by the autoScalingVmTemplate[{1}] and cannot be deleted

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:131
# args: msg.getInstanceUuid(),msg.getGroupUuid()
The\ instance[%s]\ does\ not\ exist\ in\ the\ scaling\ group[%s] = The instance[{0}] does not exist in the scaling group[{1}]

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:163
# args: msg.getAlarmUuid(),ruleVO.getScalingGroupUuid()
alarm[uuid\:%s]\ are\ being\ used\ by\ the\ autoScalingGroup[%s]\ which\ cannot\ be\ deleted = alarm[uuid:{0}] are being used by the autoScalingGroup[{1}] which cannot be deleted

# at: src/main/java/org/zstack/autoscaling/AutoScalingInterceptor.java:173
# args: msg.getUuid()
rule[%s]\ state\ is\ Disabled = rule[{0}] state is Disabled

# at: src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java:386
# args: l3Uuids,uuid
invalid\ l3\ network\ uuids[%s]\ for\ listener\ that\ belongs\ lb[%s],\ all\ the\ networks\ must\ be\ attached\ the\ LB\ service\ and\ be\ attached\ with\ the\ same\ vRouter\ with\ LB = invalid l3 network uuids[{0}] for listener that belongs lb[{1}], all the networks must be attached the LB service and be attached with the same vRouter with LB

# at: src/main/java/org/zstack/autoscaling/AutoScalingManagerImpl.java:744
# args: msg.getTemplateUuid(),JSONObjectUtil.toJsonString(errors)
detach\ autoScalingTemplate[%s]\ from\ AutoScalingGroup\ failed,\ errors\ are\ %s = detach autoScalingTemplate[{0}] from AutoScalingGroup failed, errors are {1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:890
# args: imageVO.getUuid(),imageVO.getMediaType()
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ and\ ISO\ can\ be\ used\ to\ create\ vm = image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate and ISO can be used to create vm

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:893
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ image\ mediaType\ is\ ISO = rootDiskOfferingUuid cannot be null when image mediaType is ISO

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:367
# args: 
Only\ one\ scaling\ activity\ can\ be\ executed\ in\ the\ same\ scaling\ group\ at\ the\ same\ time. = Only one scaling activity can be executed in the same scaling group at the same time.

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1317
# args: 
The\ number\ of\ instances\ exceeds\ the\ limit = The number of instances exceeds the limit

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:645
# args: loadBalancerListenerUuidListStr
add\ vm\ nic\ to\ loadBalancer\ failed,\ No\ loadBalancer[uuids\=%s]\ can\ be\ found. = add vm nic to loadBalancer failed, No loadBalancer[uuids={0}] can be found.

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:684
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToLoadBalancerErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ loadBalancer\ failed\ completely,\ errors\ are\ %s = autoScalingGroup[{0}] add newly created vm to loadBalancer failed completely, errors are {1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:719
# args: securityGroupUuid
add\ vm\ nic\ to\ securityGroup\ failed,\ No\ securityGroup[uuid\=%s]\ can\ be\ found. = add vm nic to securityGroup failed, No securityGroup[uuid={0}] can be found.

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:755
# args: msg.getAutoScalingGroupUuid(),JSONObjectUtil.toJsonString(addVmNicToSecurityGroupErrorCodes)
autoScalingGroup[%s]\ add\ newly\ created\ vm\ to\ securityGroup\ failed\ completely,\ errors\ are\ %s = autoScalingGroup[{0}] add newly created vm to securityGroup failed completely, errors are {1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:865
# args: templateGroupRefVO.getTemplateUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:AutoScalingVmTemplateVO]\ not\ found = A resource can not be found, details: resource[uuid:{0}, type:AutoScalingVmTemplateVO] not found

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:870
# args: vmTemplateVO.getVmInstanceOfferingUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:InstanceOfferingVO]\ not\ found = A resource can not be found, details: resource[uuid:{0}, type:InstanceOfferingVO] not found

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:881
# args: vmTemplateVO.getImageUuid()
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:ImageVO]\ not\ found = A resource can not be found, details: resource[uuid:{0}, type:ImageVO] not found

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:905
# args: diskOffering
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:DiskOfferingVO]\ not\ found = A resource can not be found, details: resource[uuid:{0}, type:DiskOfferingVO] not found

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:918
# args: l3Uuid
A\ resource\ can\ not\ be\ found,\ details\:\ resource[uuid\:%s,\ type\:L3NetworkVO]\ not\ found = A resource can not be found, details: resource[uuid:{0}, type:L3NetworkVO] not found

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:934
# args: vmTemplateVO.getDefaultL3NetworkUuid(),l3Uuids
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids\ %s = defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids {1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1018
# args: self.getUuid(),AutoScalingGroupState.Enabled.toString()
the\ auto\ scaling\ group[%s]\ state\ error,\ expected\:\ %s\ state = the auto scaling group[{0}] state error, expected: {1} state

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1055
# args: self.getUuid()
The\ autoScalingGroup[%s]\ not\ attach\ any\ vm\ template = The autoScalingGroup[{0}] not attach any vm template

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1123
# args: self.getUuid(),vmInstanceUuids,JSONObjectUtil.toJsonString(errors)
autoScalingGroup[%s]\ destroy\ vms[%s]\ failed\ completely,\ errors\ are\ %s = autoScalingGroup[{0}] destroy vms[{1}] failed completely, errors are {2}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1330
# args: 
Cannot\ find\ deleted\ target\ instance\ list = Cannot find deleted target instance list

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1569
# args: 
need\ skip\ autoScalingGroup\ activity = need skip autoScalingGroup activity

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:1835
# args: ruleUuid,JSONObjectUtil.toJsonString(errors)
delete\ autoScalingRule[%s]\ triggers\ failed,\ errors\ are\ %s = delete autoScalingRule[{0}] triggers failed, errors are {1}

# at: src/main/java/org/zstack/autoscaling/group/AutoScalingGroupBase.java:2452
# args: removalPolicy.toString()
Unsupported\ RemovalPolicy[%s]\ type = Unsupported RemovalPolicy[{0}] type

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:183
# args: triggerVO.getUuid(),triggerVO.getState()
AutoScalingRuleSchedulerJobTriggerVO[uuid\:%s]\ is\ %s,\ state\ change\ is\ not\ allowed = AutoScalingRuleSchedulerJobTriggerVO[uuid:{0}] is {1}, state change is not allowed

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:192
# args: ruleUuid
AutoScalingRuleSchedulerJobTriggerVO[uuid\:%s]\ is\ be\ in\ cooldownDate = AutoScalingRuleSchedulerJobTriggerVO[uuid:{0}] is be in cooldownDate

# at: src/main/java/org/zstack/autoscaling/group/rule/AutoScalingRuleManagerImpl.java:250
# args: ruleUuid,AutoScalingRuleState.Disabled.toString()
AutoScalingRuleVO[uuid\:%s]\ is\ %s,\ state\ change\ is\ not\ allowed = AutoScalingRuleVO[uuid:{0}] is {1}, state change is not allowed

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:64
# args: 
Failed\ to\ reach\ the\ bare-metal\ chassis,\ please\ make\ sure\:\ 1.\ the\ IPMI\ connection\ is\ active;\ 2.\ the\ IPMI\ Address,\ Port,\ Username\ and\ Password\ are\ correct;\ 3.\ IPMI\ Over\ LAN\ is\ enabled\ in\ BIOS. = Failed to reach the bare-metal chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:111
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ a\ baremetal\ cluster. = Cluster[uuid:{0}] is not a baremetal cluster.

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:155
# args: address,port
IPMI\ Address\ and\ Port\ %s\:%d\ already\ exists. = IPMI Address and Port {0}:{1} already exists.

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisApiInterceptor.java:220
# args: clusterUuid
no\ usable\ baremetal\ pxeserver\ attached\ to\ cluster[uuid\:%s] = no usable baremetal pxeserver attached to cluster[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:175
# args: chassis.getUuid(),chassis.getPxeServerUuid(),cmd.content
baremetal\ chassis[uuid\:%s]\ is\ supposed\ to\ using\ pxeserver[uuid\:%s],\ but\ it\ was\ pxeserver[uuid\:%s]\ that\ actually\ handled\ the\ DHCP\ request = baremetal chassis[uuid:{0}] is supposed to using pxeserver[uuid:{1}], but it was pxeserver[uuid:{2}] that actually handled the DHCP request

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:671
# args: msg.getUuid()
failed\ to\ delete\ baremetal\ chassis\ %s = failed to delete baremetal chassis {0}

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:737
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ on\ baremetal\ chassis[uuid\:%s] = Failed to remotely power on baremetal chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:753
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ reset\ baremetal\ chassis[uuid\:%s] = Failed to remotely power reset baremetal chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:764
# args: bmc.getUuid()
Failed\ to\ remotely\ pxe\ boot\ chassis[uuid\:%s] = Failed to remotely pxe boot chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:924
# args: bmc.getUuid()
failed\ to\ connect\ to\ chassis\ [uuid\:%s],\ please\ check\ ipmi\ connection. = failed to connect to chassis [uuid:{0}], please check ipmi connection.

# at: src/main/java/org/zstack/baremetal/chassis/BaremetalChassisManagerImpl.java:1010
# args: e.getMessage()
fail\ to\ load\ chassis\ info\ from\ file,\ because\:\ %s = fail to load chassis info from file, because: {0}

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:59
# args: msg.getChassisUuid()
Baremetal\ chassis[uuid\:%s]\ does\ not\ exist = Baremetal chassis[uuid:{0}] does not exist

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:65
# args: chassis.getUuid()
Baremetal\ chassis[uuid\:%s]\ is\ not\ Enabled\ or\ Available,\ please\ choose\ another\ one. = Baremetal chassis[uuid:{0}] is not Enabled or Available, please choose another one.

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:71
# args: chassis.getUuid()
no\ corresponding\ pxeserver,\ please\ inspect\ baremetal\ chassis[uuid\:%s]\ again = no corresponding pxeserver, please inspect baremetal chassis[uuid:{0}] again

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:84
# args: chassis.getUuid()
No\ hardware\ info\ found\ for\ baremetal\ chassis[uuid\:%s],\ please\ choose\ another\ one. = No hardware info found for baremetal chassis[uuid:{0}], please choose another one.

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:95
# args: chassis.getPxeServerUuid()
baremetal\ pxeserver[uuid\:%s]\ is\ neither\ Enabled\ nor\ Connected,\ please\ check = baremetal pxeserver[uuid:{0}] is neither Enabled nor Connected, please check

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:112
# args: mac
Mac\ address\ %s\ is\ invalid.\ It\ should\ be\ like\ 6c\:b3\:11\:1b\:0b\:1e = Mac address {0} is invalid. It should be like 6c:b3:11:1b:0b:1e

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:118
# args: chassis.getUuid(),mac
Baremetal\ chassis[uuid\:%s]\ doesn't\ have\ nic\ with\ mac\ address\ %s = Baremetal chassis[uuid:{0}] doesn't have nic with mac address {1}

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:136
# args: 
duplicated\ bm\ bonding\ uuid\ detacted = duplicated bm bonding uuid detacted

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:140
# args: 
Baremetal\ Bonding\ does\ not\ exist = Baremetal Bonding does not exist

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:148
# args: 
duplicated\ l3\ network\ uuid\ detacted = duplicated l3 network uuid detacted

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:152
# args: 
the\ selected\ l3\ network\ doesn't\ exist = the selected l3 network doesn't exist

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:165
# args: chassis.getUuid()
the\ selected\ l3\ network\ cannot\ be\ assigned\ to\ chassis[uuid\:%s] = the selected l3 network cannot be assigned to chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:177
# args: 
only\ iso\ image\ is\ supported\ in\ zstack\ baremetal\ service = only iso image is supported in zstack baremetal service

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:186
# args: 
only\ ImageStoreBackupStorage\ is\ supported\ in\ zstack\ baremetal\ service = only ImageStoreBackupStorage is supported in zstack baremetal service

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:200
# args: 
cannot\ recover\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = cannot recover baremetal instance that's not in Destroyed state

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceApiInterceptor.java:212
# args: 
cannot\ expunge\ baremetal\ instance\ that's\ not\ in\ Destroyed\ state = cannot expunge baremetal instance that's not in Destroyed state

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:461
# args: bmc.getUuid()
Failed\ to\ remotely\ power\ off\ baremetal\ chassis[uuid\:%s] = Failed to remotely power off baremetal chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:266
# args: self.getClusterUuid()
failed\ to\ allocate\ baremetal\ pxeserver,\ make\ sure\ there\ is\ a\ pxeserver\ with\ enough\ available\ capacity\ attached\ on\ cluster[uuid\:%s] = failed to allocate baremetal pxeserver, make sure there is a pxeserver with enough available capacity attached on cluster[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceBase.java:453
# args: reboot ? "reset" : "on",bmc.getUuid()
Failed\ to\ remotely\ power\ %s\ baremetal\ chassis[uuid\:%s] = Failed to remotely power {0} baremetal chassis[uuid:{1}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1141
# args: msg.getL2NetworkUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ l2[uuid\:%s] = there are bm instances using ip address allocated from l2[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1149
# args: msg.getL3NetworkUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ l3[uuid\:%s] = there are bm instances using ip address allocated from l3[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/instance/BaremetalInstanceManagerImpl.java:1169
# args: msg.getIpRangeUuid()
there\ are\ bm\ instances\ using\ ip\ address\ allocated\ from\ ip\ range[uuid\:%s] = there are bm instances using ip address allocated from ip range[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:39
# args: 
creating\ bm\ bonding\ is\ only\ allowed\ before\ creating\ bm\ instance = creating bm bonding is only allowed before creating bm instance

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:48
# args: msg.getName()
bond\ name\ %s\ already\ exists = bond name {0} already exists

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:73
# args: slave
Slave\ address\ %s\ is\ invalid.\ It\ should\ be\ like\ 6c\:b3\:11\:1b\:0b\:1e,6c\:b3\:11\:1b\:0b\:1f = Slave address {0} is invalid. It should be like 6c:b3:11:1b:0b:1e,6c:b3:11:1b:0b:1f

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:79
# args: slave,msg.getChassisUuid()
mac\ address\ %s\ does\ not\ belong\ to\ chassis[uuid\:%s] = mac address {0} does not belong to chassis[uuid:{1}]

# at: src/main/java/org/zstack/baremetal/network/BaremetalNetworkApiInterceptor.java:85
# args: slave
mac\ address\ %s\ is\ already\ a\ bond\ slave = mac address {0} is already a bond slave

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:43
# args: 
cannot\ update\ predefined\ preconfiguration\ templates = cannot update predefined preconfiguration templates

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:55
# args: 
cannot\ delete\ predefined\ preconfiguration\ templates = cannot delete predefined preconfiguration templates

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationApiInterceptor.java:63
# args: 
cannot\ change\ state\ of\ predefined\ preconfiguration\ templates = cannot change state of predefined preconfiguration templates

# at: src/main/java/org/zstack/baremetal/preconfiguration/PreconfigurationManagerImpl.java:66
# args: msg.getTemplateUuid()
cannot\ find\ PreconfigurationTemplateVO[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find PreconfigurationTemplateVO[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:69
# args: netmask
PXE\ Server\ DHCP\ Range\ Netmask\ %s\ is\ invalid. = PXE Server DHCP Range Netmask {0} is invalid.

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:75
# args: begin,end
PXE\ Server\ DHCP\ Range\ Start\ %s\ and\ Range\ Stop\ %s\ do\ not\ belong\ to\ the\ same\ subnet. = PXE Server DHCP Range Start {0} and Range Stop {1} do not belong to the same subnet.

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:92
# args: msg.getHostname()
PXE\ Server\ with\ hostname\ %s\ already\ exists. = PXE Server with hostname {0} already exists.

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:103
# args: msg.getHostname()
there\ is\ already\ a\ baremetal2\ gateway\ with\ management\ ip\ %s,\ do\ not\ use\ it\ to\ create\ baremetal\ pxe\ server = there is already a baremetal2 gateway with management ip {0}, do not use it to create baremetal pxe server

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:110
# args: 
storagePath\ should\ be\ an\ absolute\ path = storagePath should be an absolute path

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:126
# args: msg.getHostname()
failed\ to\ connect\ to\ %s,\ please\ check\ network\ connection\ between\ zstack\ management\ node\ and\ baremetal\ pxeserver = failed to connect to {0}, please check network connection between zstack management node and baremetal pxeserver

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:136
# args: msg.getHostname()
no\ local\ repo\ found\ under\ /opt/zstack-dvd\ of\ %s,\ please\ download\ zstack\ iso\ and\ create\ local\ repo\ first = no local repo found under /opt/zstack-dvd of {0}, please download zstack iso and create local repo first

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:146
# args: msg.getDhcpInterface()
PXE\ Server\ DHCP\ Interface\ %s\ does\ not\ exists,\ or\ it\ does\ not\ have\ an\ IP\ address. = PXE Server DHCP Interface {0} does not exists, or it does not have an IP address.

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:155
# args: msg.getDhcpRangeBegin(),msg.getDhcpRangeEnd(),msg.getDhcpInterface()
%s\ ~\ %s\ cannot\ connect\ to\ dhcp\ interface\ %s = {0} ~ {1} cannot connect to dhcp interface {2}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:192
# args: msg.getClusterUuid(),msg.getPxeServerUuid()
cluster[uuid\:%s]\ and\ pxeserver[uuid\:%s]\ don't\ belong\ to\ one\ zone = cluster[uuid:{0}] and pxeserver[uuid:{1}] don't belong to one zone

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:201
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ baremetal\ cluster = cluster[uuid:{0}] is not baremetal cluster

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:212
# args: msg.getPxeServerUuid(),msg.getClusterUuid()
baremetal\ pxeserver[uuid\:%s]\ already\ attached\ to\ cluster[uuid\:%s] = baremetal pxeserver[uuid:{0}] already attached to cluster[uuid:{1}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:238
# args: msg.getPxeServerUuid(),msg.getClusterUuid(),ip,begin,end
baremetal\ pxeserver[uuid\:%s]\ is\ not\ compatible\ with\ baremetal\ instances\ in\ cluster[uuid\:%s],\ existing\ nic\ ip\ %s\ is\ out\ of\ pxeserver\ dhcp\ range\ %s\ ~\ %s. = baremetal pxeserver[uuid:{0}] is not compatible with baremetal instances in cluster[uuid:{1}], existing nic ip {2} is out of pxeserver dhcp range {3} ~ {4}.

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerApiInterceptor.java:255
# args: msg.getPxeServerUuid(),msg.getClusterUuid()
baremetal\ pxeserver[uuid\:\ %s]\ not\ attached\ to\ cluster[uuid\:\ %s] = baremetal pxeserver[uuid: {0}] not attached to cluster[uuid: {1}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:295
# args: self.getUuid()
failed\ to\ init\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = failed to init configs on baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:432
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = failed to create bm instance configs on baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:463
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ configs\ on\ baremetal\ pxeserver[uuid\:%s] = failed to delete bm instance configs on baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:494
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ novnc\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = failed to create bm instance novnc proxy on baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:525
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ novnc\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = failed to delete bm instance novnc proxy on baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:558
# args: self.getUuid()
failed\ to\ create\ bm\ instance\ nginx\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = failed to create bm instance nginx proxy on baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:589
# args: self.getUuid()
failed\ to\ delete\ bm\ instance\ nginx\ proxy\ on\ baremetal\ pxeserver[uuid\:%s] = failed to delete bm instance nginx proxy on baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:620
# args: self.getUuid()
failed\ to\ start\ baremetal\ pxeserver[uuid\:%s] = failed to start baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:653
# args: self.getUuid()
failed\ to\ stop\ baremetal\ pxeserver[uuid\:%s] = failed to stop baremetal pxeserver[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:968
# args: msg.getChassisUuid(),self.getUuid()
failed\ to\ create\ dhcp\ config\ of\ chassis[uuid\:%s]\ on\ pxeserver[uuid\:%s] = failed to create dhcp config of chassis[uuid:{0}] on pxeserver[uuid:{1}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:997
# args: msg.getChassisUuid(),self.getUuid()
failed\ to\ delete\ dhcp\ config\ of\ chassis[uuid\:%s]\ on\ pxeserver[uuid\:%s] = failed to delete dhcp config of chassis[uuid:{0}] on pxeserver[uuid:{1}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1055
# args: self.getUuid(),ret.uuid
the\ uuid\ of\ baremtal\ pxeserver\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = the uuid of baremtal pxeserver agent changed[expected:{0}, actual:{1}], it's most likely the agent was manually restarted. Issue a reconnect to sync the status

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1270
# args: url,rsp.error
unable\ to\ connect\ to\ baremetal\ pxeserver[url\:%s],\ because\ %s = unable to connect to baremetal pxeserver[url:{0}], because {1}

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1362
# args: cache.getImageUuid()
failed\ to\ mount\ baremetal\ cache\ of\ image[uuid\:%s] = failed to mount baremetal cache of image[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1467
# args: msg.getImageUuid()
no\ enough\ space\ left\ in\ baremetal\ image\ cache\ for\ image[uuid\:%s] = no enough space left in baremetal image cache for image[uuid:{0}]

# at: src/main/java/org/zstack/baremetal/pxeserver/BaremetalPxeServerBase.java:1563
# args: 
unsupported\ backup\ storage\ type\ for\ baremetal = unsupported backup storage type for baremetal

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:59
# args: msg.getName()
bond\ name\ %s\ has\ been\ existed = bond name {0} has been existed

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:71
# args: mac
nic\ with\ mac\:%s\ has\ been\ bonded = nic with mac:{0} has been bonded

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:98
# args: chassisUuid
cannot\ find\ the\ cluster\ of\ baremetal2\ chassis[uuid\:%s],\ maybe\ it\ doesn't\ exist = cannot find the cluster of baremetal2 chassis[uuid:{0}], maybe it doesn't exist

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:107
# args: clusterUuid
there\ is\ no\ baremetal2\ gateway\ found\ in\ cluster[uuid\:%s] = there is no baremetal2 gateway found in cluster[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:116
# args: clusterUuid
there\ is\ no\ usable\ baremetal2\ gateway\ found\ in\ cluster[uuid\:%s] = there is no usable baremetal2 gateway found in cluster[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:124
# args: clusterUuid
there\ is\ no\ baremetal2\ provision\ network\ found\ in\ cluster[uuid\:%s] = there is no baremetal2 provision network found in cluster[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisApiInterceptor.java:132
# args: provisionNetworkUuid
baremetal2\ provision\ network[uuid\:%s]\ is\ not\ usable,\ make\ sure\ it's\ Enabled = baremetal2 provision network[uuid:{0}] is not usable, make sure it's Enabled

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:78
# args: hardwareInfo
wrong\ baremetal2\ chassis\ hardware\ info\ format\:\ %s = wrong baremetal2 chassis hardware info format: {0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:87
# args: info.architecture,clusterArchitecture
the\ cpu\ architecture\ of\ the\ chassis[arch\:%s]\ and\ the\ cluster[arch\:%s]\ don't\ match = the cpu architecture of the chassis[arch:{0}] and the cluster[arch:{1}] don't match

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:97
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ baremetal2\ chassis\ with\ boot\ mode\ %s\ is\ supported = only baremetal2 chassis with boot mode {0} is supported

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:108
# args: hardwareInfo
wrong\ baremetal2\ chassis\ nic\ hardware\ info\ format\:\ %s = wrong baremetal2 chassis nic hardware info format: {0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:114
# args: 
there\ must\ be\ one\ and\ only\ one\ provision\ nic\ in\ a\ baremetal2\ chassis = there must be one and only one provision nic in a baremetal2 chassis

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:124
# args: hardwareInfo
wrong\ baremetal2\ chassis\ disk\ hardware\ info\ format\:\ %s = wrong baremetal2 chassis disk hardware info format: {0}

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisHardwareInfoSyncer.java:167
# args: 
other\ chassis\ has\ nics\ with\ the\ same\ mac\ address,\ which\ is\ impossible = other chassis has nics with the same mac address, which is impossible

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:372
# args: msg.getClusterUuid()
BareMetal2\ Chassis[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled = BareMetal2 Chassis[uuid:{0}] doesn't exist or is disabled

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:438
# args: msg.getRequiredClusterUuids()
no\ available\ baremetal2\ chassis\ found\ in\ baremetal2\ clusters[uuids\:%s] = no available baremetal2 chassis found in baremetal2 clusters[uuids:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/BareMetal2ChassisManagerImpl.java:430
# args: 
no\ available\ baremetal2\ chassis\ found = no available baremetal2 chassis found

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:82
# args: address
IPMI\ Address\ %s\ is\ not\ valid = IPMI Address {0} is not valid

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:121
# args: address,port
Baremetal\ Chassis\ of\ IPMI\ address\ %s\ and\ IPMI\ port\ %d\ has\ already\ been\ created. = Baremetal Chassis of IPMI address {0} and IPMI port {1} has already been created.

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:111
# args: address,port
BareMetal2\ Chassis\ of\ IPMI\ address\ %s\ and\ IPMI\ port\ %d\ has\ already\ been\ created. = BareMetal2 Chassis of IPMI address {0} and IPMI port {1} has already been created.

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:133
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ does\ not\ exists. = Cluster[uuid:{0}] does not exists.

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:146
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ Enabled. = Cluster[uuid:{0}] is not Enabled.

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:74
# args: address,port
Bare\ Metal\ IPMI\ 2\ Chassis\ %s\:%d\ already\ exists = Bare Metal IPMI 2 Chassis {0}:{1} already exists

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:93
# args: 
Failed\ to\ reach\ the\ baremetal2\ chassis,\ please\ make\ sure\:\ 1.\ the\ IPMI\ connection\ is\ active;\ 2.\ the\ IPMI\ Address,\ Port,\ Username\ and\ Password\ are\ correct;\ 3.\ IPMI\ Over\ LAN\ is\ enabled\ in\ BIOS. = Failed to reach the baremetal2 chassis, please make sure: 1. the IPMI connection is active; 2. the IPMI Address, Port, Username and Password are correct; 3. IPMI Over LAN is enabled in BIOS.

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:140
# args: msg.getClusterUuid()
Cluster[uuid\:%s]\ is\ not\ a\ BareMetal2\ Cluster. = Cluster[uuid:{0}] is not a BareMetal2 Cluster.

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisApiInterceptor.java:178
# args: clusterUuid
no\ usable\ baremetal2\ gateway\ in\ cluster[uuid\:%s] = no usable baremetal2 gateway in cluster[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:134
# args: self.getUuid()
failed\ to\ power\ on\ baremetal2\ ipmi\ chassis[uuid\:%s] = failed to power on baremetal2 ipmi chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:206
# args: self.getUuid()
failed\ to\ power\ off\ baremetal2\ ipmi\ chassis[uuid\:%s] = failed to power off baremetal2 ipmi chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:249
# args: self.getUuid()
failed\ to\ power\ reset\ baremetal2\ ipmi\ chassis[uuid\:%s] = failed to power reset baremetal2 ipmi chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisBase.java:340
# args: self.getUuid()
Failed\ to\ remotely\ ipxe\ boot\ chassis[uuid\:%s] = Failed to remotely ipxe boot chassis[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:76
# args: e.getMessage()
fail\ to\ load\ baremetal2\ ipmi\ chassis\ info\ from\ file,\ because\:\ %s = fail to load baremetal2 ipmi chassis info from file, because: {0}

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:94
# args: 
the\ api\ message's\ chassis\ type\ is\ ipmi,\ but\ it's\ not\ an\ APICreateBareMetal2ChassisHardwareInfoMsg = the api message's chassis type is ipmi, but it's not an APICreateBareMetal2ChassisHardwareInfoMsg

# at: src/main/java/org/zstack/baremetal2/chassis/ipmi/BareMetal2IpmiChassisFactory.java:104
# args: imsg.getIpmiAddress(),imsg.getIpmiPort()
received\ hardware\ info\ for\ unknown\ baremetal2\ chassis[ipmi_addr\:%s,\ ipmi_port\:%d] = received hardware info for unknown baremetal2 chassis[ipmi_addr:{0}, ipmi_port:{1}]

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:84
# args: 
cluster\ type\ and\ hypervisor\ type\ should\ all\ be\ baremetal2\ or\ all\ not = cluster type and hypervisor type should all be baremetal2 or all not

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:90
# args: 
the\ architecture\ must\ be\ set\ when\ create\ new\ baremetal2\ clusters = the architecture must be set when create new baremetal2 clusters

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:101
# args: 
do\ not\ add\ host\ into\ baremetal2\ cluster = do not add host into baremetal2 cluster

# at: src/main/java/org/zstack/baremetal2/cluster/BareMetal2ClusterFactory.java:123
# args: 
l2\ network\ should\ not\ have\ the\ same\ interface\ name\ with\ provision\ network\ that's\ already\ attached\ to\ the\ cluster = l2 network should not have the same interface name with provision network that's already attached to the cluster

# at: src/main/java/org/zstack/baremetal2/cluster/CephStorageAttachBm2ClusterMetric.java:29
# args: 
Can\ not\ attach\ third-party\ ceph\ with\ token\ into\ aarch64\ cluster. = Can not attach third-party ceph with token into aarch64 cluster.

# at: src/main/java/org/zstack/baremetal2/cluster/LocalStorageAttachBm2ClusterMetric.java:12
# args: 
Can\ not\ attach\ local\ storage\ into\ baremetal2\ cluster. = Can not attach local storage into baremetal2 cluster.

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1328
# args: msg.getInstanceUuid()
no\ provision\ nic\ found\ for\ baremetal2\ instance[uuid\:%s] = no provision nic found for baremetal2 instance[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:269
# args: self.getUuid(),msg.getInstanceUuid()
failed\ to\ delete\ convert\ volume\ to\ chassis\ local\ disk\ configurations\ in\ gateway[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s] = failed to delete convert volume to chassis local disk configurations in gateway[uuid:{0}] for baremetal2 instance[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1342
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ create\ provision\ configurations\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = failed to create provision configurations for baremetal2 instance[uuid:{0}] in gateway[uuid:{1}], because {2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:418
# args: chassis.getUuid()
chassis\:%s\ disk\ does\ not\ have\ wwn\ info,\ please\ inspect\ chassis\ and\ try\ again = chassis:{0} disk does not have wwn info, please inspect chassis and try again

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1809
# args: chassis.getUuid()
failed\ to\ power\ on\ baremetal2\ chassis[uuid\:%s]\ using\ ipmitool = failed to power on baremetal2 chassis[uuid:{0}] using ipmitool

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:567
# args: 
convert\ image\ data\ to\ local\ disk\ failed = convert image data to local disk failed

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:576
# args: instanceVO.getUuid(),chassis.getUuid(),BareMetal2GlobalConfig.CONVERT_VOLUME_TO_LOCAL_DISK_TIMEOUT.value(Integer.class)
baremetal2\ instance[uuid\:%s]\ convert\ volume\ failed\ on\ baremetal2\ chassis[uuid\:%s]\ ,\ timeout\ after\ %s\ minutes\  = baremetal2 instance[uuid:{0}] convert volume failed on baremetal2 chassis[uuid:{1}] , timeout after {2} minutes 

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1235
# args: self.getUuid(),ret.getError()
failed\ to\ prepare\ provision\ network\ in\ gateway[uuid\:%s],\ because\ %s = failed to prepare provision network in gateway[uuid:{0}], because {1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1304
# args: self.getUuid(),ret.getError()
failed\ to\ destroy\ provision\ network\ in\ gateway[uuid\:%s],\ because\ %s = failed to destroy provision network in gateway[uuid:{0}], because {1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1391
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ delete\ provision\ configurations\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = failed to delete provision configurations for baremetal2 instance[uuid:{0}] in gateway[uuid:{1}], because {2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1435
# args: msg.getInstanceUuid(),self.getUuid(),ret.getError()
failed\ to\ create\ console\ proxy\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = failed to create console proxy for baremetal2 instance[uuid:{0}] in gateway[uuid:{1}], because {2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1492
# args: msg.getOldDefaultL3Uuid(),msg.getNewDefaultL3Uuid(),msg.getInstanceUuid(),ret.getError()
failed\ to\ change\ default\ network\ from\ l3[uuid\:%s]\ to\ l3[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s],\ because\ %s = failed to change default network from l3[uuid:{0}] to l3[uuid:{1}] for baremetal2 instance[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1531
# args: msg.getInstanceUuid(),msg.getGatewayUuid(),ret.getError()
failed\ to\ ping\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = failed to ping baremetal2 instance[uuid:{0}] through gateway[uuid:{1}], because {2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1578
# args: msg.getInstanceUuid(),msg.getGatewayUuid(),ret.getError()
failed\ to\ change\ the\ password\ of\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = failed to change the password of baremetal2 instance[uuid:{0}] through gateway[uuid:{1}], because {2}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1677
# args: 
third\ party\ ceph\ with\ token\ not\ support\ local\ disk\ yet = third party ceph with token not support local disk yet

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1838
# args: chassis.getUuid()
failed\ to\ power\ off\ baremetal2\ chassis[uuid\:%s]\ using\ ipmitool = failed to power off baremetal2 chassis[uuid:{0}] using ipmitool

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1923
# args: chassis.getUuid(),timeout
baremetal2\ chassis[uuid\:%s]\ is\ still\ not\ POWER_OFF\ %d\ seconds\ later = baremetal2 chassis[uuid:{0}] is still not POWER_OFF {1} seconds later

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:1896
# args: bm.getUuid(),ret.getError()
failed\ to\ power\ off\ baremetal2\ instance[uuid\:%s]\ by\ bm\ agent,\ because\ %s = failed to power off baremetal2 instance[uuid:{0}] by bm agent, because {1}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2103
# args: 
vmInstanceUuids\ is\ empty = vmInstanceUuids is empty

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2109
# args: self.getUuid(),self.getStatus()
the\ baremetal2\ gateway[uuid\:%s,\ status\:%s]\ is\ not\ Connected = the baremetal2 gateway[uuid:{0}, status:{1}] is not Connected

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2186
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ not\ connected,\ cannot\ attach\ nic\ to\ it = baremetal2 instance[uuid:{0}] not connected, cannot attach nic to it

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2209
# args: nicUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ attach\ nic[uuid\:%s]\ to\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = failed to attach nic[uuid:{0}] to baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2252
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ is\ not\ connected,\ cannot\ detach\ nic\ from\ it = baremetal2 instance[uuid:{0}] is not connected, cannot detach nic from it

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2275
# args: nicUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ detach\ nic[uuid\:%s]\ from\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = failed to detach nic[uuid:{0}] from baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2441
# args: bmUuid
baremetal2\ instance[uuid\:%s]\ is\ not\ connected,\ cannot\ attach\ volume\ to\ it = baremetal2 instance[uuid:{0}] is not connected, cannot attach volume to it

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2338
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ prepare\ volume[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = failed to prepare volume[uuid:{0}] for baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2399
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ attach\ volume[uuid\:%s]\ to\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = failed to attach volume[uuid:{0}] to baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2480
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ get\ volume[uuid\:%s]\ lunid\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = failed to get volume[uuid:{0}] lunid for baremetal2 instance[uuid:{1}] in gateway[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2535
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ detach\ volume[uuid\:%s]\ from\ baremetal2\ instance[uuid\:%s]\ through\ gateway[uuid\:%s],\ because\ %s = failed to detach volume[uuid:{0}] from baremetal2 instance[uuid:{1}] through gateway[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2Gateway.java:2570
# args: volumeUuid,bmUuid,gatewayUuid,ret.getError()
failed\ to\ destroy\ volume[uuid\:%s]\ for\ baremetal2\ instance[uuid\:%s]\ in\ gateway[uuid\:%s],\ because\ %s = failed to destroy volume[uuid:{0}] for baremetal2 instance[uuid:{1}] in gateway[uuid:{2}], because {3}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:100
# args: msg.getManagementIp()
there\ has\ been\ a\ baremetal2\ gateway\ having\ management\ ip\ %s = there has been a baremetal2 gateway having management ip {0}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:66
# args: msg.getManagementIp()
there\ is\ already\ a\ baremetal\ pxe\ server\ with\ management\ ip\ %s,\ do\ not\ use\ it\ to\ create\ baremetal2\ gateway = there is already a baremetal pxe server with management ip {0}, do not use it to create baremetal2 gateway

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:107
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ management\ ip\ %s = there has been a host having management ip {0}

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:80
# args: msg.getManagementIp()
management\ ip[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = management ip[{0}] is neither an IPv4 address nor a valid hostname

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:90
# args: msg.getClusterUuid()
cannot\ add\ baremetal2\ gateway\ in\ non-baremetal2\ cluster[uuid\:%s] = cannot add baremetal2 gateway in non-baremetal2 cluster[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:120
# args: msg.getGatewayUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ gateway[uuid\:%s]\ to\ non-baremetal2\ cluster[uuid\:%s] = cannot attach baremetal2 gateway[uuid:{0}] to non-baremetal2 cluster[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:131
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ already\ attached\ to\ cluster[uuid\:%s] = baremetal2 gateway[uuid:{0}] already attached to cluster[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:140
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ can\ only\ attach\ to\ one\ cluster = baremetal2 gateway[uuid:{0}] can only attach to one cluster

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:151
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ not\ attached\ to\ cluster[uuid\:%s],\ no\ need\ to\ detach = baremetal2 gateway[uuid:{0}] not attached to cluster[uuid:{1}], no need to detach

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:156
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ attached\ to\ only\ one\ cluster\ now,\ do\ not\ detach\ it = baremetal2 gateway[uuid:{0}] is attached to only one cluster now, do not detach it

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:164
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ does\ not\ exist = cluster[uuid:{0}] does not exist

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:168
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ a\ baremetal2\ cluster = cluster[uuid:{0}] is not a baremetal2 cluster

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:173
# args: msg.getGatewayUuid()
gateway[uuid\:%s]\ does\ not\ exist = gateway[uuid:{0}] does not exist

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:177
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ already\ in\ cluster[uuid\:%s] = baremetal2 gateway[uuid:{0}] is already in cluster[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:181
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ the\ same\ zone\ as\ cluster[uuid\:%s] = baremetal2 gateway[uuid:{0}] is not in the same zone as cluster[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayApiInterceptor.java:191
# args: msg.getGatewayUuid()
cannot\ change\ the\ cluster\ of\ baremetal2\ gateway[uuid\:%s]\ when\ there\ are\ running\ instances\ depending\ on\ it = cannot change the cluster of baremetal2 gateway[uuid:{0}] when there are running instances depending on it

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java:45
# args: 
baremetal2\ instance[uuid\:%s]\ doesn't\ exist,\ cannot\ generate\ its\ console\ url = baremetal2 instance[uuid:{0}] doesn't exist, cannot generate its console url

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayConsoleHypervisorBackend.java:54
# args: bm.getGatewayUuid(),bm.getUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Connected,\ cannot\ generate\ console\ url\ for\ instance[uuid\:%s] = baremetal2 gateway[uuid:{0}] is not Connected, cannot generate console url for instance[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/gateway/BareMetal2GatewayManagerImpl.java:258
# args: resourceUuid
cluster[%s]\ is\ not\ baremetal2\ type = cluster[{0}] is not baremetal2 type

# at: src/main/java/org/zstack/baremetal2/gateway/allocator/AbstractGatewayAllocatorStrategy.java:102
# args: 
failed\ to\ allocate\ baremetal2\ gateway = failed to allocate baremetal2 gateway

# at: src/main/java/org/zstack/baremetal2/gateway/allocator/BareMetal2GatewayMainAllocatorFlow.java:62
# args: 
no\ available\ baremetal2\ gateway\ found = no available baremetal2 gateway found

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:166
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ baremetal2\ image\ with\ boot\ mode\ %s\ is\ supported = only baremetal2 image with boot mode {0} is supported

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:138
# args: bm2ImageCount
only\ one\ baremetal2\ system\ tag\ is\ allowed,\ but\ %d\ was\ got = only one baremetal2 system tag is allowed, but {0} was got

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:158
# args: 
only\ root\ volume\ template\ of\ format\ raw/qcow2\ can\ be\ tagged\ with\ baremetal2 = only root volume template of format raw/qcow2 can be tagged with baremetal2

# at: src/main/java/org/zstack/baremetal2/image/BareMetal2ImageManagerImpl.java:162
# args: 
the\ bootMode\ tag\ is\ mandatory\ for\ baremetal2\ images = the bootMode tag is mandatory for baremetal2 images

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java:76
# args: spec.getRequiredChassisDiskUuid(),chassis.getUuid()
required\ chassis\ disk[%s]\ not\ belong\ to\ chassis[%s] = required chassis disk[{0}] not belong to chassis[{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateChassisFlow.java:88
# args: chassis.getUuid(),spec.getImageSpec().getInventory().getUuid()
chassis\ not\ have\ engouh\ capacity\ for\ image[%s] = chassis not have engouh capacity for image[{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:85
# args: 
not\ enough\ information\ to\ determine\ which\ baremetal2\ cluster\ should\ be\ used = not enough information to determine which baremetal2 cluster should be used

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:100
# args: 
no\ baremetal2\ cluster\ found = no baremetal2 cluster found

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:217
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ primary\ storage\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = failed to allocate primary storage in clusters[uuids:{0}] for baremetal2 instance[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:224
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ gateway\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = failed to allocate gateway in clusters[uuids:{0}] for baremetal2 instance[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:231
# args: spec.getRequiredClusterUuids(),spec.getVmInventory().getUuid()
failed\ to\ allocate\ chassis\ in\ clusters[uuids\:%s]\ for\ baremetal2\ instance[uuid\:%s] = failed to allocate chassis in clusters[uuids:{0}] for baremetal2 instance[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:262
# args: clusterUuids
only\ baremetal2\ clusters[uuid\:%s]\ meet\ the\ needs\ for\ chassis\ and\ gateway,\ but\ they\ have\ no\ provision\ network\ attached = only baremetal2 clusters[uuid:{0}] meet the needs for chassis and gateway, but they have no provision network attached

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceAllocateClusterFlow.java:253
# args: spec.getRequiredClusterUuids()
no\ baremetal2\ cluster\ found\ in\ clusters[uuid\:%s] = no baremetal2 cluster found in clusters[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:881
# args: msg.getPrimaryStorageUuidForRootVolume(),msg.getPrimaryStorageUuidForDataVolume()
the\ primary\ storage[%s]\ of\ the\ root\ volume\ and\ the\ primary\ storage[%s]\ of\ the\ data\ volume\ are\ not\ in\ the\ same\ cluster = the primary storage[{0}] of the root volume and the primary storage[{1}] of the data volume are not in the same cluster

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:244
# args: networkUuid
make\ sure\ all\ baremetal2\ gateways\ on\ provision\ network[uuid\:%s]\ are\ Connected = make sure all baremetal2 gateways on provision network[uuid:{0}] are Connected

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:707
# args: 
neither\ chassisUuid\ nor\ chassisOfferingUuid\ is\ set\ when\ create\ baremetal2\ instance = neither chassisUuid nor chassisOfferingUuid is set when create baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:169
# args: 
only\ support\ vpc\ network\ support\ attach\ eip\ on\ baremetal2\ instance = only support vpc network support attach eip on baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:179
# args: 
bare\ metal\ instance\ not\ allowed\ to\ change\ vm\ nic\ network = bare metal instance not allowed to change vm nic network

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:190
# args: 
current\ operation\ is\ not\ supported\ on\ local\ baremetal\ instance = current operation is not supported on local baremetal instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:201
# args: 
not\ supported\ by\ baremetal2\ instance = not supported by baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:207
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ Connected = baremetal2 instance[uuid:{0}] is not Connected

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:215
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ stopped = baremetal2 instance[uuid:{0}] is not stopped

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:221
# args: bm.getUuid()
baremetal2\ instance[uuid\:%s]\ is\ running\ but\ its\ agent\ is\ not\ Connected = baremetal2 instance[uuid:{0}] is running but its agent is not Connected

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:607
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ does\ not\ exist = baremetal2 chassis offering[uuid:{0}] does not exist

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:318
# args: msg.getInstanceUuid()
baremetal2\ instance[uuid\:%s]\ is\ not\ stopped\ can\ not\ change\ its\ chassis\ offering = baremetal2 instance[uuid:{0}] is not stopped can not change its chassis offering

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:337
# args: msg.getVmInstanceUuid()
baremetal2\ instance[uuid\:%s]\ has\ not\ been\ allocated\ a\ chassis,\ start\ the\ instance\ and\ try\ again = baremetal2 instance[uuid:{0}] has not been allocated a chassis, start the instance and try again

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:343
# args: ipVersion
only\ l3\ network\ with\ ip\ version\ %d\ is\ supported\ by\ baremetal2\ instance = only l3 network with ip version {0} is supported by baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:349
# args: l2Type
l2\ network\ type\ %s\ not\ supported\ by\ baremetal2\ instance = l2 network type {0} not supported by baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:355
# args: 
customMac\ is\ mandatory\ when\ attaching\ l3\ network\ to\ baremetal2\ instance = customMac is mandatory when attaching l3 network to baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:359
# args: msg.getCustomMac()
%s\ is\ not\ valid\ mac\ address = {0} is not valid mac address

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:364
# args: msg.getCustomMac()
duplicated\ mac\ address\ %s = duplicated mac address {0}

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:373
# args: bm.getUuid(),bm.getChassisUuid(),msg.getCustomMac()
baremetal2\ instance[uuid\:%s]\ running\ on\ chassis[uuid\:%s],\ which\ doesn't\ have\ non-provisioning\ nic\ with\ mac\ address\ %s = baremetal2 instance[uuid:{0}] running on chassis[uuid:{1}], which doesn't have non-provisioning nic with mac address {2}

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:382
# args: msg.getCustomMac()
mac\ address\ %s\ has\ already\ been\ used,\ try\ another\ one = mac address {0} has already been used, try another one

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:399
# args: msg.getCustomMac()
nic\ with\ mac\:%s\ cannot\ be\ attached\ l3Network,\ because\ it\ has\ been\ bonded = nic with mac:{0} cannot be attached l3Network, because it has been bonded

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:448
# args: 
third\ party\ ceph\ cannot\ mixed\ with\ other\ primary\ storage = third party ceph cannot mixed with other primary storage

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:571
# args: msg.getClusterUuid(),msg.getUuid()
cluster[uuid\:%s]\ is\ not\ an\ Enabled\ baremetal2\ cluster,\ cannot\ start\ instance[uuid\:%s]\ in\ it = cluster[uuid:{0}] is not an Enabled baremetal2 cluster, cannot start instance[uuid:{1}] in it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:583
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ does\ not\ exist\ or\ is\ not\ Enabled\ or\ Connected = baremetal2 gateway[uuid:{0}] does not exist or is not Enabled or Connected

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:594
# args: msg.getGatewayUuid(),msg.getClusterUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ cluster\ [uuid\:%s] = baremetal2 gateway[uuid:{0}] is not in cluster [uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:600
# args: msg.getUuid()
please\ specify\ chassis\ uuid\ or\ chassis\ offering\ uuid\ to\ start\ baremetal2\ instance[uuid\:%s] = please specify chassis uuid or chassis offering uuid to start baremetal2 instance[uuid:{0}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:611
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ is\ not\ Enabled = baremetal2 chassis offering[uuid:{0}] is not Enabled

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:711
# args: 
do\ not\ set\ chassisUuid\ and\ chassisOfferingUuid\ at\ the\ same\ time = do not set chassisUuid and chassisOfferingUuid at the same time

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:619
# args: 
no\ need\ to\ set\ chassisOfferingUuid\ because\ the\ instance\ has\ been\ assigned\ an\ chassis\ already = no need to set chassisOfferingUuid because the instance has been assigned an chassis already

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:623
# args: 
no\ need\ to\ set\ chassisOfferingUuid\ because\ the\ instance\ has\ been\ assigned\ an\ chassis\ offering\ already = no need to set chassisOfferingUuid because the instance has been assigned an chassis offering already

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:631
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ does\ not\ exist = baremetal2 chassis[uuid:{0}] does not exist

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:636
# args: msg.getChassisUuid(),bm.getChassisOfferingUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ belonging\ to\ chassis\ offering[uuid\:%s] = baremetal2 chassis[uuid:{0}] is not belonging to chassis offering[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:641
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Enabled = baremetal2 chassis[uuid:{0}] is not Enabled

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:645
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ has\ already\ been\ allocated = baremetal2 chassis[uuid:{0}] has already been allocated

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:763
# args: msg.getGatewayUuid(),msg.getChassisUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ in\ the\ same\ cluster\ with\ chassis[uuid\:%s] = baremetal2 gateway[uuid:{0}] is not in the same cluster with chassis[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:685
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ not\ Enabled,\ can\ not\ create\ baremetal2\ instance\ from\ it = zone[uuid:{0}] is specified but it's not Enabled, can not create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:699
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ not\ an\ Enabled\ baremetal2\ cluster,\ can\ not\ create\ baremetal2\ instance\ from\ it = cluster[uuid:{0}] is specified but it's not an Enabled baremetal2 cluster, can not create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:717
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = baremetal2 chassis[uuid:{0}] is not Enabled, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:722
# args: msg.getChassisUuid()
baremetal2\ chassis[uuid\:%s]\ is\ not\ Available,\ can't\ create\ baremetal2\ instance\ from\ it = baremetal2 chassis[uuid:{0}] is not Available, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:732
# args: msg.getChassisOfferingUuid()
baremetal2\ chassis\ offering[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = baremetal2 chassis offering[uuid:{0}] is not Enabled, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:743
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = baremetal2 gateway[uuid:{0}] is not Enabled, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:748
# args: msg.getGatewayUuid()
baremetal2\ gateway[uuid\:%s]\ is\ not\ Connected,\ can't\ create\ baremetal2\ instance\ from\ it = baremetal2 gateway[uuid:{0}] is not Connected, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:780
# args: 
image\ cannot\ be\ empty\ unless\ chassis\ is\ in\ direct\ mode = image cannot be empty unless chassis is in direct mode

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:787
# args: 
direct\ mode\ not\ support\ choose\ image = direct mode not support choose image

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:794
# args: msg.getImageUuid()
image[uuid\:%s]\ does\ not\ exist = image[uuid:{0}] does not exist

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:800
# args: disk.getUuid(),image.getUuid()
Chassis\ disk[%s]\ not\ have\ enough\ capacity\ for\ image[%s] = Chassis disk[{0}] not have enough capacity for image[{1}]

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:805
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ Enabled,\ can't\ create\ baremetal2\ instance\ from\ it = image[uuid:{0}] is not Enabled, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:810
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ Ready,\ can't\ create\ baremetal2\ instance\ from\ it = image[uuid:{0}] is not Ready, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:815
# args: msg.getImageUuid(),image.getMediaType()
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ can\ be\ used\ to\ create\ baremetal2\ instance = image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate can be used to create baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:820
# args: image.getFormat(),BareMetal2InstanceConstant.IMAGE_FORMAT_FOR_BM
image[uuid\:%s]\ is\ of\ format\:\ %s,\ only\ %s\ can\ be\ used\ to\ create\ baremetal2\ instance = image[uuid:{0}] is of format: {1}, only {2} can be used to create baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:826
# args: image.getUuid()
image[uuid\:%s]\ is\ not\ baremetal2\ image,\ can't\ create\ baremetal2\ instance\ from\ it = image[uuid:{0}] is not baremetal2 image, can't create baremetal2 instance from it

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:832
# args: BareMetal2GlobalProperty.BAREMETAL2_SUPPORTED_BOOT_MODE
only\ image\ with\ boot\ mode\ %s\ is\ supported\ to\ create\ baremetal2\ instance = only image with boot mode {0} is supported to create baremetal2 instance

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:841
# args: 
different\ boot\ mode\ between\ the\ image\ and\ chassis/offering = different boot mode between the image and chassis/offering

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:851
# args: clusterArchitecture,image.getArchitecture()
the\ architecture\ of\ baremetal2\ cluster[arch\:%s]\ and\ image[arch\:%s]\ don't\ match = the architecture of baremetal2 cluster[arch:{0}] and image[arch:{1}] don't match

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:863
# args: msg.getDataDiskOfferingUuids()
not\ all\ disk\ offerings[uuids\:%s]\ are\ Enabled,\ can\ not\ create\ baremetal2\ instance\ from\ them = not all disk offerings[uuids:{0}] are Enabled, can not create baremetal2 instance from them

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceApiInterceptor.java:890
# args: 
cannot\ decide\ which\ zone\ the\ baremetal2\ instance\ should\ be\ created\ in = cannot decide which zone the baremetal2 instance should be created in

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceBase.java:476
# args: 
baremetal2\ instance[uuid\:%s]\ is\ either\ not\ exist\ or\ not\ Connected,\ cannot\ change\ its\ password = baremetal2 instance[uuid:{0}] is either not exist or not Connected, cannot change its password

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java:386
# args: releaseTag
%s\ can\ only\ be\ created\ or\ deleted = {0} can only be created or deleted

# at: src/main/java/org/zstack/baremetal2/instance/BareMetal2InstanceManagerImpl.java:397
# args: releaseTag
%s\ can\ only\ be\ created\ or\ deleted\ when\ the\ baremetal2\ instance\ is\ Running = {0} can only be created or deleted when the baremetal2 instance is Running

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:112
# args: dhcpInterface,dhcpRangeStartIp,dhcpRangeEndIp,dhcpRangeNetmask,dhcpRangeGateway
there\ already\ exists\ a\ baremetal2\ provision\ network\ with\ dhcpInterface\ \=\ %s,\ dhcpRangeStartIp\ \=\ %s,\ dhcpRangeEndIp\ \=\ %s,\ dhcpRangeNetmask\ \=\ %s,\ dhcpRangeGateway\ \=\ %s = there already exists a baremetal2 provision network with dhcpInterface = {0}, dhcpRangeStartIp = {1}, dhcpRangeEndIp = {2}, dhcpRangeNetmask = {3}, dhcpRangeGateway = {4}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:123
# args: msg.getNetworkUuid()
cannot\ update\ baremetal2\ provision\ network[uuid\:%s]\ dhcp\ configuration\ when\ there\ are\ instances\ depending\ on\ it = cannot update baremetal2 provision network[uuid:{0}] dhcp configuration when there are instances depending on it

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:141
# args: netmask
baremetal2\ provision\ network\ dhcp\ range\ netmask\ %s\ is\ invalid = baremetal2 provision network dhcp range netmask {0} is invalid

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:147
# args: begin,end
baremetal2\ provision\ network\ start\ ip\ %s\ and\ stop\ ip\ %s\ do\ not\ belong\ to\ the\ same\ subnet = baremetal2 provision network start ip {0} and stop ip {1} do not belong to the same subnet

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:157
# args: msg.getNetworkUuid()
cannot\ delete\ baremetal2\ provision\ network[uuid\:%s]\ when\ there\ are\ instances\ depending\ on\ it = cannot delete baremetal2 provision network[uuid:{0}] when there are instances depending on it

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:171
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ non-baremetal2\ cluster[uuid\:%s] = cannot attach baremetal2 provision network[uuid:{0}] to non-baremetal2 cluster[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:182
# args: msg.getNetworkUuid(),msg.getClusterUuid()
baremetal2\ provision\ network[uuid\:%s]\ is\ already\ attached\ to\ cluster[uuid\:%s] = baremetal2 provision network[uuid:{0}] is already attached to cluster[uuid:{1}]

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:188
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s]\ because\ the\ cluster\ already\ have\ one = cannot attach baremetal2 provision network[uuid:{0}] to cluster[uuid:{1}] because the cluster already have one

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:198
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s]\ because\ they\ are\ not\ in\ the\ same\ zone = cannot attach baremetal2 provision network[uuid:{0}] to cluster[uuid:{1}] because they are not in the same zone

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:219
# args: msg.getNetworkUuid(),msg.getClusterUuid()
cannot\ attach\ baremetal2\ provision\ network[uuid\:%s]\ to\ cluster[uuid\:%s],\ because\ we\ need\ to\ make\ sure\ that\ every\ gateway\ attached\ to\ the\ clusters\ that\ have\ the\ same\ provision\ network\ attached = cannot attach baremetal2 provision network[uuid:{0}] to cluster[uuid:{1}], because we need to make sure that every gateway attached to the clusters that have the same provision network attached

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:241
# args: 
provision\ network\ should\ not\ have\ the\ same\ interface\ name\ with\ l2\ networks\ that\ are\ already\ attached\ to\ the\ cluster = provision network should not have the same interface name with l2 networks that are already attached to the cluster

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:251
# args: msg.getNetworkUuid()
cannot\ detach\ baremetal2\ provision\ network[uuid\:%s]\ when\ there\ are\ running\ instances\ depending\ on\ it = cannot detach baremetal2 provision network[uuid:{0}] when there are running instances depending on it

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:258
# args: 
networkUuids\ is\ empty = networkUuids is empty

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkApiInterceptor.java:265
# args: msg.getNetworkUuids()
not\ all\ baremetal2\ provision\ networks\ exist\ in\ %s = not all baremetal2 provision networks exist in {0}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:496
# args: networkUuid,gatewayUuid,reply.getError()
failed\ to\ prepare\ provision\ network[uuid\:%s]\ in\ gateway[uuid\:%s]\:\ %s = failed to prepare provision network[uuid:{0}] in gateway[uuid:{1}]: {2}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:308
# args: networkUuid,gatewayUuid,reply.getError()
failed\ to\ update\ provision\ network[uuid\:%s]\ in\ gateway[uuid\:%s]\:\ %s = failed to update provision network[uuid:{0}] in gateway[uuid:{1}]: {2}

# at: src/main/java/org/zstack/baremetal2/provisionnetwork/BareMetal2ProvisionNetworkBase.java:650
# args: msg.getNetworkUuid()
failed\ to\ allocate\ ip\ from\ baremetal2\ provision\ network[uuid\:%s] = failed to allocate ip from baremetal2 provision network[uuid:{0}]

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:73
# args: 
billing\ is\ disabled = billing is disabled

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:120
# args: 
the\ start\ date\ must\ be\ greater\ than\ the\ end\ date = the start date must be greater than the end date

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:124
# args: 
resourceType\ and\ resourceUuid\ cannot\ be\ empty\ at\ the\ same\ time = resourceType and resourceUuid cannot be empty at the same time

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:244
# args: 
the\ minimal\ resource\ unit\ is\ megabyte,\ cannot\ be\ byte = the minimal resource unit is megabyte, cannot be byte

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:252
# args: 
price\ must\ be\ 0\ and\ 999999999.99 = price must be 0 and 999999999.99

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:259
# args: 
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ empty = gpu price must be bound to gpu uuid empty

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:266
# args: price.getSystemTags()
gpu\ price\ must\ be\ bound\ to\ gpu\ uuid\ %s = gpu price must be bound to gpu uuid {0}

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:226
# args: resourceName
resourceName[%s]\ is\ invalid = resourceName[{0}] is invalid

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:278
# args: msg.getAccountUuid()
The\ account[uuid\=%s]\ has\ attach\ price\ table = The account[uuid={0}] has attach price table

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:284
# args: msg.getUuid()
This\ priceTable[uuid\=%s]\ is\ not\ allowed\ to\ delete = This priceTable[uuid={0}] is not allowed to delete

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:298
# args: 
accountUuid/tableUuid\ only\ one\ of\ them\ is\ allowed\ to\ be\ set = accountUuid/tableUuid only one of them is allowed to be set

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:304
# args: 
endDateInLong\ is\ not\ allowed\ to\ be\ negative = endDateInLong is not allowed to be negative

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:308
# args: 
endDateInLong\ and\ setEndDateInLongBaseOnCurrentTime\ are\ not\ allowed\ to\ set\ at\ the\ same\ time = endDateInLong and setEndDateInLongBaseOnCurrentTime are not allowed to set at the same time

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:321
# args: 
endDateInLong\ is\ set,\ no\ modification\ allowed = endDateInLong is set, no modification allowed

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:329
# args: 
endDateInLong\ cannot\ be\ earlier\ than\ dateInLong = endDateInLong cannot be earlier than dateInLong

# at: src/main/java/org/zstack/billing/BillingApiInterceptor.java:336
# args: 
billing\ is\ enable,\ This\ operation\ is\ only\ allowed\ in\ the\ disabled\ state = billing is enable, This operation is only allowed in the disabled state

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:451
# args: 
priceKeyName\ is\ null = priceKeyName is null

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:1084
# args: currentPriceVO.getDateInLong()
dateInLong\ is\ less\ than\ %s = dateInLong is less than {0}

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:3090
# args: 
please\ set\ the\ correct\ priceUserConfig,\ for\ example\:\ priceUserConfig\:{\nrootVolume\:{\npriceKeyName\:\"priceKeyName\"}} = please set the correct priceUserConfig, for example: priceUserConfig:'{\nrootVolume:{\npriceKeyName:\"priceKeyName\"}'}

# at: src/main/java/org/zstack/billing/BillingManagerImpl.java:3105
# args: 
please\ set\ the\ correct\ priceUserConfig,\ for\ example\:\ priceUserConfig\:{\nvolume\:{\npriceKeyName\:\"priceKeyName\"}} = please set the correct priceUserConfig, for example: priceUserConfig:'{\nvolume:{\npriceKeyName:\"priceKeyName\"}'}

# at: src/main/java/org/zstack/billing/ResourceSpendingHelper.java:49
# args: resourceType
unsupported\ billing\ resource\ type\ [%s] = unsupported billing resource type [{0}]

# at: src/main/java/org/zstack/cas/CasInterceptor.java:31
# args: type
there\ is\ no\ such\ type[%s]\ in\ CAS = there is no such type[{0}] in CAS

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:76
# args: loginContext.getUsername()
wrong\ virtual\ ID[name\:%s],\ not\ existing\ or\ wrong\ password = wrong virtual ID[name:{0}], not existing or wrong password

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:57
# args: 
missing\ property\ of\ cas\ driver = missing property of cas driver

# at: src/main/java/org/zstack/cas/CasLoginBackend.java:64
# args: casDriverType
Unsupported\ cas\ driver\:\ %s = Unsupported cas driver: {0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:63
# args: msg.getUuid()
cannot\ find\ such\ ResourceStackVO\ by\ uuid\ [%s] = cannot find such ResourceStackVO by uuid [{0}]

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:67
# args: validStatus
restart\ resource\ stack\ only\ support\ %s\ status! = restart resource stack only support {0} status!

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:173
# args: 
templateContent\ and\ uuid\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = templateContent and uuid mustn't both be empty or both be set!

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:98
# args: validStatus
expect\ %s\ status! = expect {0} status!

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:118
# args: 
templateContent\ and\ templateUuid\ mustn't\ both\ be\ empty! = templateContent and templateUuid mustn't both be empty!

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:129
# args: 
templateContent\ and\ url\ mustn't\ both\ be\ empty\ or\ both\ be\ set! = templateContent and url mustn't both be empty or both be set!

# at: src/main/java/org/zstack/cloudformation/CloudFormationInterceptor.java:145
# args: 
only\ admin\ could\ enable/disable\ system\ StackTemplate = only admin could enable/disable system StackTemplate

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1032
# args: vo.getName()
cannot\ delete\ or\ update\ system\ template\:\ %s = cannot delete or update system template: {0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:322
# args: msg.getVmInstanceUuid()
no\ stackUuid\ found\ for\ the\ vmInstance[%s] = no stackUuid found for the vmInstance[{0}]

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:612
# args: msg.getUuid()
ResourceStackVO\:\ [%s]\ has\ been\ deleted... = ResourceStackVO: [{0}] has been deleted...

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:642
# args: uuid
ResourceStackVO\ [%s]\ already\ been\ deleted! = ResourceStackVO [{0}] already been deleted!

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:871
# args: 
templateContent\ must\ be\ set! = templateContent must be set!

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:865
# args: template.getUuid()
template\ [%s]\ chosen\ is\ disabled = template [{0}] chosen is disabled

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:955
# args: p.getParamName(),p.getResourceType()
cannot\ find\ parameters\ for\ %s,\ which\ is\ %s\ type,\ please\ check\ parameters = cannot find parameters for {0}, which is {1} type, please check parameters

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1025
# args: 
StackTemplateVO\ has\ been\ deleted... = StackTemplateVO has been deleted...

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1048
# args: 
content\ must\ be\ set\ by\ templateContent\ or\ url! = content must be set by templateContent or url!

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1066
# args: 
get\ null\ content\ input = get null content input

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1073
# args: result.getTemplateVersion()
invalid\ cloudformation\ template\ version\:\ %s = invalid cloudformation template version: {0}

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1087
# args: msg.getUuid()
StackTemplateVO\:\ [%s]\ has\ been\ deleted... = StackTemplateVO: [{0}] has been deleted...

# at: src/main/java/org/zstack/cloudformation/CloudFormationManagerImpl.java:1385
# args: 
[cloudformation]\ filterName\ must\ be\ cloudformation\:true\ or\ cloudformation\:false = [cloudformation] filterName must be cloudformation:true or cloudformation:false

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:31
# args: 
get\ null\ element\ in\ template\ content = get null element in template content

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:35
# args: 
template\ must\ contain\ [ZStackTemplateFormatVersion] = template must contain [ZStackTemplateFormatVersion]

# at: src/main/java/org/zstack/cloudformation/CloudFormationUtils.java:38
# args: result.getTemplateVersion(),CloudFormationConstant.version
invalid\ ZStackTemplateFormatVersion\:\ [%s,\ expected\:\ %s] = invalid ZStackTemplateFormatVersion: [{0}, expected: {1}]

# at: src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java:124
# args: l2Uuid
cannot\ find\ l2_bridge_name\ of\ l2[%s]\ from\ systemTag = cannot find l2_bridge_name of l2[{0}] from systemTag

# at: src/main/java/org/zstack/cloudformation/VmPortMonitorTask.java:135
# args: vm.getUuid()
cannot\ find\ default\ ip\ on\ vm[%s] = cannot find default ip on vm[{0}]

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:97
# args: 
cannot\ find\ resource\ of\ properties\ set\ before! = cannot find resource of properties set before!

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:152
# args: value
invalid\ dynamic\ variables,\ which\ must\ contained\ ${\:\ %s = invalid dynamic variables, which must contained $'{: {0}'

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:174
# args: 
verb\ must\ contain\ '\:\:'! = verb must contain '::'!

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:218
# args: t[0],last.getClass().getName()
need\ List\ for\ resource\ [%s]\ output\ here,\ but\ got\ %s. = need List for resource [{0}] output here, but got {1}.

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationCreator.java:380
# args: 
Some\ actions\ are\ invalid = Some actions are invalid

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:253
# args: 
no\ root\ element\ found,\ please\ check\ your\ cfn\ formation! = no root element found, please check your cfn formation!

# at: src/main/java/org/zstack/cloudformation/template/CloudFormationDecoder.java:432
# args: e.getMessage()
Wrong\ json\ format,\ causes\:\ %s = Wrong json format, causes: {0}

# at: src/main/java/org/zstack/cloudformation/template/decoder/AbstractCfnRootDecoder.java:14
# args: 
CfnRootDecoder's\ weight\ must\ between\ 0-100,\ 0\ means\ decode\ first,\ default\ is\ 50 = CfnRootDecoder's weight must between 0-100, 0 means decode first, default is 50

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:45
# args: 
Condition\ body\ cannot\ support\ json\ null\ or\ array! = Condition body cannot support json null or array!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:41
# args: 
Only\ support\ ZStack\ Template\ Functions\ in\ 'Condition'\ field! = Only support ZStack Template Functions in 'Condition' field!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:37
# args: 
Value\ must\ be\ boolean\ in\ 'Condition'\ field = Value must be boolean in 'Condition' field

# at: src/main/java/org/zstack/cloudformation/template/decoder/ConditionDecoder.java:30
# args: key,es.size()
Condition\ key\:\ %s\ only\ support\ 1\ element\ in\ the\ json\ object\ of\ value,\ but\ got\ %d\ elements! = Condition key: {0} only support 1 element in the json object of value, but got {1} elements!

# at: src/main/java/org/zstack/cloudformation/template/decoder/DecoderUtils.java:91
# args: msg
cannot\ find\ such\ msg\:\ %s\ for\ create = cannot find such msg: {0} for create

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:56
# args: 
Mapping\ value\ body\ cannot\ support\ null! = Mapping value body cannot support null!

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:54
# args: 
Mapping\ value\ body\ cannot\ support\ json\ array! = Mapping value body cannot support json array!

# at: src/main/java/org/zstack/cloudformation/template/decoder/MappingDecoder.java:66
# args: 
mappingName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = mappingName must be found in result, or it is invalid cfn json.

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:84
# args: 
Mapping\ body\ cannot\ support\ json\ null! = Mapping body cannot support json null!

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:82
# args: 
Mapping\ body\ cannot\ support\ non\ map\ value! = Mapping body cannot support non map value!

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:57
# args: 
Output\ body\ cannot\ support\ json\ null! = Output body cannot support json null!

# at: src/main/java/org/zstack/cloudformation/template/decoder/OutputDecoder.java:70
# args: 
Description\ in\ Outputs\ must\ be\ String\ type! = Description in Outputs must be String type!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ParameterDecoder.java:59
# args: 
paramName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = paramName must be found in result, or it is invalid cfn json.

# at: src/main/java/org/zstack/cloudformation/template/decoder/PreParameterDecoder.java:53
# args: 
Parameters\ root\ body\ must\ be\ json\ object! = Parameters root body must be json object!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:145
# args: 
Mappings\ root\ body\ must\ be\ json\ object! = Mappings root body must be json object!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:112
# args: 
resourceName\ must\ be\ found\ in\ result,\ or\ it\ is\ invalid\ cfn\ json. = resourceName must be found in result, or it is invalid cfn json.

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:123
# args: 
Parameters\ body\ cannot\ support\ null! = Parameters body cannot support null!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:68
# args: 
Resource\ value\ body\ cannot\ support\ null! = Resource value body cannot support null!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:48
# args: resource.getResourceName(),e.getKey(),resource.getResourceName()
Resource\ %s\ cannot\ depends\ on\ itself,\ please\ check\ %s\ in\ Resource\ [%s] = Resource {0} cannot depends on itself, please check {1} in Resource [{2}]

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:254
# args: 
Resource\ root\ body\ must\ be\ json\ object! = Resource root body must be json object!

# at: src/main/java/org/zstack/cloudformation/template/decoder/ResourceDecoder.java:216
# args: 
Resource\ Type\ must\ be\ String! = Resource Type must be String!

# at: src/main/java/org/zstack/cloudformation/template/function/IfTemplateFunction.java:42
# args: cond
cannot\ find\ condition[%s]\ in\ 'Conditions' = cannot find condition[{0}] in 'Conditions'

# at: src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java:42
# args: e.getAsString()
expect\ 'true',\ 'false'\ for\ the\ object,\ but\ got\ %s = expect 'true', 'false' for the object, but got {0}

# at: src/main/java/org/zstack/cloudformation/template/function/OrTemplateFunction.java:35
# args: keys,e.getAsString()
expect\ 'true',\ 'false'\ or\ an\ other\ Condition,\ current\ Conditions\ include\:\ %s,\ but\ got\ %s = expect 'true', 'false' or an other Condition, current Conditions include: {0}, but got {1}

# at: src/main/java/org/zstack/cloudformation/template/function/SelectTemplateFunction.java:83
# args: 
Fn\:\:Select\ out\ of\ range,\ please\ check\ your\ json\ file! = Fn::Select out of range, please check your json file!

# at: src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:75
# args: e.getKey()
only\ functions\ can\ in\ Function,\ but\ found\ %s = only functions can in Function, but found {0}

# at: src/main/java/org/zstack/cloudformation/template/function/TemplateFunctionUtils.java:90
# args: 
element\ is\ null! = element is null!

# at: src/main/java/org/zstack/compute/VmNicUtils.java:26
# args: 
duplicate\ nic\ params = duplicate nic params

# at: src/main/java/org/zstack/compute/VmNicUtils.java:32
# args: 
l3NetworkUuid\ of\ vm\ nic\ can\ not\ be\ null = l3NetworkUuid of vm nic can not be null

# at: src/main/java/org/zstack/compute/VmNicUtils.java:35
# args: l3Uuids
l3NetworkUuid\ of\ vm\ nic\ is\ not\ in\ l3[%s] = l3NetworkUuid of vm nic is not in l3[{0}]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:40
# args: nic.getOutboundBandwidth()
outbound\ bandwidth[%d]\ of\ vm\ nic\ is\ out\ of\ [8192,\ 32212254720] = outbound bandwidth[{0}] of vm nic is out of [8192, 32212254720]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:46
# args: nic.getInboundBandwidth()
inbound\ bandwidth[%d]\ of\ vm\ nic\ is\ out\ of\ [8192,\ 32212254720] = inbound bandwidth[{0}] of vm nic is out of [8192, 32212254720]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:52
# args: nic.getMultiQueueNum()
multi\ queue\ num[%d]\ of\ vm\ nic\ is\ out\ of\ [1,256] = multi queue num[{0}] of vm nic is out of [1,256]

# at: src/main/java/org/zstack/compute/VmNicUtils.java:58
# args: nic.getL3NetworkUuid(),nic.getState(),VmNicState.enable.toString(),VmNicState.disable.toString()
vm\ nic\ of\ l3[uuid\:%s]\ state[%s]\ is\ not\ %s\ or\ %s\  = vm nic of l3[uuid:{0}] state[{1}] is not {2} or {3} 

# at: src/main/java/org/zstack/compute/VmNicUtils.java:64
# args: driverType
vm\ nic\ driver\ %s\ not\ support\ yet = vm nic driver {0} not support yet

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:420
# args: resourceUuid,affinityGroupUuid
VM\ [uuid\:\ %s]\ has\ already\ been\ added\ to\ affinityGroup\ [uuid\:\ %s] = VM [uuid: {0}] has already been added to affinityGroup [uuid: {1}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:437
# args: hostUuid,affinityGroupUuid
There\ are\ other\ VMs\ on\ this\ host\ [uuid\:\ %s]\ belonging\ to\ same\ affinityGroup\ [%s] = There are other VMs on this host [uuid: {0}] belonging to same affinityGroup [{1}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:468
# args: self.getUuid(),host.getUuid(),vmUuid
affinityGroup\ [uuid\:%s]\ reserve\ host\ [uuid\:%s]\ for\ vm\ [uuid\:\ %s]\ failed = affinityGroup [uuid:{0}] reserve host [uuid:{1}] for vm [uuid: {2}] failed

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupBase.java:538
# args: inv.getResourceUuid(),self.getUuid()
vm\ [uuid\:%s]\ doesn't\ satisfy\ the\ affinityGroup\ [uuid\:%s] = vm [uuid:{0}] doesn't satisfy the affinityGroup [uuid:{1}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupFilterFlow.java:139
# args: 
can\ not\ satisfied\ affinity\ group\ conditions = can not satisfied affinity group conditions

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:42
# args: VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString(),state.toString()
Vm\ can\ change\ its\ affinityGroup\ only\ in\ state\ [%s,%s],\ but\ vm\ is\ in\ state\ [%s] = Vm can change its affinityGroup only in state [{0},{1}], but vm is in state [{2}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:52
# args: msg.getUuid(),agUuid
Vm\ [uuid\:\ %s]\ is\ already\ added\ to\ affinityGroup\ [uuid\:\ %s] = Vm [uuid: {0}] is already added to affinityGroup [uuid: {1}]

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:77
# args: affinityGroupUuid
AffinityGroup\ [uuid\:\ %s]\ does\ not\ existed = AffinityGroup [uuid: {0}] does not existed

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:81
# args: 
Can\ not\ operate\ on\ affinity\ group\ created\ by\ system = Can not operate on affinity group created by system

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupInterceptor.java:88
# args: affinityGroupUuid
Can\ not\ operate\ on\ affinityGroup\ [uuid\:\ %s]\ which\ is\ not\ enabled = Can not operate on affinityGroup [uuid: {0}] which is not enabled

# at: src/main/java/org/zstack/compute/affinityGroup/AffinityGroupManagerImpl.java:219
# args: msg.getAffinityGroupUuid()
cannot\ find\ the\ affinity\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the affinity group[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/compute/allocator/AttachedL2NetworkAllocatorFlow.java:118
# args: spec.getL3NetworkUuids()
no\ host\ found\ in\ clusters\ that\ has\ attached\ to\ L2Networks\ which\ have\ L3Networks%s = no host found in clusters that has attached to L2Networks which have L3Networks{0}

# at: src/main/java/org/zstack/compute/allocator/AttachedPrimaryStorageAllocatorFlow.java:79
# args: psuuids
no\ host\ found\ in\ clusters\ that\ have\ attached\ to\ primary\ storage\ %s = no host found in clusters that have attached to primary storage {0}

# at: src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java:41
# args: vm.getUuid()
cannot\ find\ root\ volume\ of\ vm[uuid\:%s] = cannot find root volume of vm[uuid:{0}]

# at: src/main/java/org/zstack/compute/allocator/AttachedVolumePrimaryStorageAllocatorFlow.java:84
# args: requiredPsUuids,vm.getUuid()
no\ host\ found\ in\ clusters\ which\ have\ attached\ to\ all\ primary\ storage\ %s\ where\ vm[uuid\:%s]'s\ volumes\ locate = no host found in clusters which have attached to all primary storage {0} where vm[uuid:{1}]'s volumes locate

# at: src/main/java/org/zstack/compute/allocator/AvoidHostAllocatorFlow.java:30
# args: spec.getAvoidHostUuids()
after\ rule\ out\ avoided\ host%s,\ there\ is\ no\ host\ left\ in\ candidates = after rule out avoided host{0}, there is no host left in candidates

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:87
# args: spec.getRequiredBackupStorageUuid(),bsType
the\ backup\ storage[uuid\:%s,\ type\:%s]\ requires\ bound\ primary\ storage,\ however,\ the\ primary\ storage\ has\ not\ been\ added = the backup storage[uuid:{0}, type:{1}] requires bound primary storage, however, the primary storage has not been added

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:80
# args: spec.getImage().getUuid(),spec.getRequiredBackupStorageUuid(),type,psUuids
The\ image[uuid\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[uuids\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = The image[uuid:{0}] is on the backup storage[uuid:{1}, type:{2}] that requires to work with primary storage[uuids:{3}],however, no host found suitable to work with those primary storage

# at: src/main/java/org/zstack/compute/allocator/BackupStorageSelectPrimaryStorageAllocatorFlow.java:71
# args: spec.getImage().getUuid(),name,spec.getRequiredBackupStorageUuid(),spec.getImage().getType(),possiblePrimaryStorageTypes
The\ image[uuid\:%s,\ name\:%s]\ is\ on\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ that\ requires\ to\ work\ with\ primary\ storage[types\:%s],however,\ no\ host\ found\ suitable\ to\ work\ with\ those\ primary\ storage = The image[uuid:{0}, name:{1}] is on the backup storage[uuid:{2}, type:{3}] that requires to work with primary storage[types:{4}],however, no host found suitable to work with those primary storage

# at: src/main/java/org/zstack/compute/allocator/DesignatedHostAllocatorFlow.java:107
# args: args
No\ host\ with\ %s\ found = No host with {0} found

# at: src/main/java/org/zstack/compute/allocator/FilterFlow.java:39
# args: filter.getClass().getSimpleName(),filter.filterErrorReason()
after\ filtering,\ HostAllocatorFilterExtensionPoint[%s]\ returns\ zero\ candidate\ host,\ it\ means\:\ %s = after filtering, HostAllocatorFilterExtensionPoint[{0}] returns zero candidate host, it means: {1}

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:56
# args: 
either\ volumeUuid\ or\ volumeSnapshotUuid\ must\ be\ set = either volumeUuid or volumeSnapshotUuid must be set

# at: src/main/java/org/zstack/compute/allocator/HostAllocatorApiInterceptor.java:75
# args: 
zoneUuids,\ clusterUuids,\ hostUuids\ must\ at\ least\ have\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, clusterUuids, hostUuids must at least have one be none-empty list, or all is set to true

# at: src/main/java/org/zstack/compute/allocator/HostCapacityAllocatorFlow.java:69
# args: spec.getCpuCapacity(),spec.getMemoryCapacity()
no\ host\ having\ cpu[%s],\ memory[%s\ bytes]\ found = no host having cpu[{0}], memory[{1} bytes] found

# at: src/main/java/org/zstack/compute/allocator/HostOsVersionAllocatorFlow.java:52
# args: currentHostOs
no\ candidate\ host\ has\ version[%s] = no candidate host has version[{0}]

# at: src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java:248
# args: PrimaryStorageState.Enabled,PrimaryStorageState.Disabled,PrimaryStorageStatus.Connected
cannot\ find\ available\ primary\ storage[state\:\ %s\ or\ %s,\ status\:\ %s].\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = cannot find available primary storage[state: {0} or {1}, status: {2}]. Check the state/status of primary storage and make sure they have been attached to clusters

# at: src/main/java/org/zstack/compute/allocator/HostPrimaryStorageAllocatorFlow.java:244
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,spec.getDiskSize()
cannot\ find\ available\ primary\ storage[state\:\ %s,\ status\:\ %s,\ available\ capacity\ %s\ bytes].\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = cannot find available primary storage[state: {0}, status: {1}, available capacity {2} bytes]. Check the state/status of primary storage and make sure they have been attached to clusters

# at: src/main/java/org/zstack/compute/allocator/HostSortorChain.java:130
# args: e.getMessage(),host.getUuid(),e.getMessage()
[Host\ Allocation]\:\ %s\ on\ host[uuid\:%s].\ try\ next\ one.\ %s = [Host Allocation]: {0} on host[uuid:{1}]. try next one. {2}

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:97
# args: spec.getHypervisorType()
no\ host\ having\ state\=Enabled\ status\=Connected\ hypervisorType\=%s\ found = no host having state=Enabled status=Connected hypervisorType={0} found

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:99
# args: 
no\ host\ having\ state\=Enabled\ status\=Connected\ found = no host having state=Enabled status=Connected found

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:94
# args: candidates.size(),spec.getHypervisorType()
no\ Enabled\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts\ having\ the\ hypervisor\ type\ [%s] = no Enabled hosts found in the [{0}] candidate hosts having the hypervisor type [{1}]

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:92
# args: candidates.size()
no\ Enabled\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts = no Enabled hosts found in the [{0}] candidate hosts

# at: src/main/java/org/zstack/compute/allocator/HostStateAndHypervisorAllocatorFlow.java:90
# args: candidates.size()
no\ Connected\ hosts\ found\ in\ the\ [%s]\ candidate\ hosts = no Connected hosts found in the [{0}] candidate hosts

# at: src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:110
# args: spec.getImage().getUuid(),spec.getImage().getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ deleted\ on\ all\ backup\ storage = the image[uuid:{0}, name:{1}] is deleted on all backup storage

# at: src/main/java/org/zstack/compute/allocator/ImageBackupStorageAllocatorFlow.java:144
# args: zoneUuids,spec.getImage().getUuid()
no\ host\ found\ in\ zones[uuids\:%s]\ that\ attaches\ to\ backup\ storage\ where\ image[%s]\ is\ on = no host found in zones[uuids:{0}] that attaches to backup storage where image[{1}] is on

# at: src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java:114
# args: entry.getKey()
resource\ binding\ not\ support\ type\ %s\ yet = resource binding not support type {0} yet

# at: src/main/java/org/zstack/compute/allocator/ResourceBindingAllocatorFlow.java:133
# args: resources
no\ available\ host\ found\ with\ binded\ resource\ %s = no available host found with binded resource {0}

# at: src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java:68
# args: extp.getClass().getName()
InstanceOfferingTagAllocatorExtensionPoint[%s]\ return\ zero\ candidate\ host = InstanceOfferingTagAllocatorExtensionPoint[{0}] return zero candidate host

# at: src/main/java/org/zstack/compute/allocator/TagAllocatorFlow.java:104
# args: extp.getClass().getName()
DiskOfferingTagAllocatorExtensionPoint[%s]\ return\ zero\ candidate\ host = DiskOfferingTagAllocatorExtensionPoint[{0}] return zero candidate host

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:108
# args: 
cannot\ bind\ with\ interface\ configured\ with\ vtep\ ip = cannot bind with interface configured with vtep ip

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:64
# args: bondingName,HostNetworkBondingConstant.BONDING_NAME_MAX
invalid\ bonding\ name[%s],\ it\ must\ be\ shorter\ than\ [%s]\ characters = invalid bonding name[{0}], it must be shorter than [{1}] characters

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:68
# args: bondingName
invalid\ bonding\ name[%s],\ it\ must\ only\ contains\ letters,\ numbers\ and\ underscores = invalid bonding name[{0}], it must only contains letters, numbers and underscores

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:77
# args: bondingName,hostUuid
bonding\ card\ can\ not\ have\ occupied\ bondingName\:[%s],\ which\ was\ already\ been\ used\ by\ host[%s]. = bonding card can not have occupied bondingName:[{0}], which was already been used by host[{1}].

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:103
# args: 
cannot\ bind\ with\ interface\ corresponding\ to\ the\ management\ network = cannot bind with interface corresponding to the management network

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:115
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ which\ is\ not\ on\ the\ same\ host[%s]. = bonding card can not have interfaces which is not on the same host[{0}].

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:120
# args: hostUuid
bonding\ card\ can\ not\ have\ occupied\ interfaces,\ which\ was\ already\ been\ used\ by\ host[%s]. = bonding card can not have occupied interfaces, which was already been used by host[{0}].

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:125
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ that\ has\ been\ used\ as\ a\ network\ bridge,\ which\ was\ already\ been\ used\ by\ host[%s]. = bonding card can not have interfaces that has been used as a network bridge, which was already been used by host[{0}].

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:152
# args: interfaceVO.getUuid()
bonding\ card\ can\ not\ have\ interface[%s]\ which\ have\ been\ sriov\ virtualized. = bonding card can not have interface[{0}] which have been sriov virtualized.

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:161
# args: hostUuid
bonding\ card\ can\ not\ have\ interfaces\ with\ different\ speed,\ which\ is\ on\ the\ host[%s]. = bonding card can not have interfaces with different speed, which is on the host[{0}].

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:168
# args: mode,xmitHashPolicy
[%s]\ bonding\ card\ can\ not\ designate\ [%s],\ Only\ mode\ 802.3ad\ support\ specifying\ different\ xmit_hash_policys = [{0}] bonding card can not designate [{1}], Only mode 802.3ad support specifying different xmit_hash_policys

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:181
# args: mode,size
[%s]\ bonding\ can\ not\ have\ [%s]\ interfaces,\ it\ must\ be\ the\ number\ between[1~2]. = [{0}] bonding can not have [{1}] interfaces, it must be the number between[1~2].

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:177
# args: mode,size
[%s]\ bonding\ card\ can\ not\ have\ [%s]\ interfaces,\ it\ must\ be\ the\ number\ between[1~8]. = [{0}] bonding card can not have [{1}] interfaces, it must be the number between[1~8].

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:214
# args: msg.getType()
invalid\ bonding\ type[%s] = invalid bonding type[{0}]

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:242
# args: 
cannot\ delete\ bonding\ corresponding\ to\ the\ management\ network = cannot delete bonding corresponding to the management network

# at: src/main/java/org/zstack/compute/bonding/HostNetworkBondingApiInterceptor.java:247
# args: 
cannot\ delete\ bonding\ configured\ with\ vtep\ ip = cannot delete bonding configured with vtep ip

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:58
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ add\ linux\ bonding\ to\ host[uuid\:%s]\ \:\ %s = failed to add linux bonding to host[uuid:{0}] : {1}

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:97
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ update\ linux\ bonding\ on\ host[uuid\:%s]\ \:\ %s = failed to update linux bonding on host[uuid:{0}] : {1}

# at: src/main/java/org/zstack/compute/bonding/HostNetworkLinuxBondingFactory.java:132
# args: bondingInv.getHostUuid(),reply.getError()
failed\ to\ remove\ linux\ bonding\ from\ host[uuid\:%s]\ \:\ %s = failed to remove linux bonding from host[uuid:{0}] : {1}

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:55
# args: 
if\ cluster\ type\ is\ baremetal,\ then\ hypervisorType\ must\ be\ baremetal\ too,\ or\ vice\ versa = if cluster type is baremetal, then hypervisorType must be baremetal too, or vice versa

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:71
# args: 
only\ kvm\ hosts'\ operating\ system\ can\ be\ updated,\ for\ now = only kvm hosts' operating system can be updated, for now

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:82
# args: msg.getUuid()
there\ are\ hosts\ in\ cluster[uuid\:%s]\ in\ the\ PreMaintenance\ state,\ cannot\ update\ cluster\ os\ right\ now = there are hosts in cluster[uuid:{0}] in the PreMaintenance state, cannot update cluster os right now

# at: src/main/java/org/zstack/compute/cluster/ClusterApiInterceptor.java:94
# args: msg.getUuid()
not\ all\ hosts\ in\ cluster[uuid\:%s]\ are\ in\ the\ Connected\ status,\ cannot\ update\ cluster\ os\ right\ now = not all hosts in cluster[uuid:{0}] are in the Connected status, cannot update cluster os right now

# at: src/main/java/org/zstack/compute/cpuPinning/CpuPinningBasicFactory.java:45
# args: r
invalid\ cpu\ pinning\ ref[%s].\ correct\ example\ is\ [1,3\:3-6,^5] = invalid cpu pinning ref[{0}]. correct example is [1,3:3-6,^5]

# at: src/main/java/org/zstack/compute/cpuPinning/CpuRangeSet.java:58
# args: word
Invalid\ cpuset\ [%s] = Invalid cpuset [{0}]

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java:53
# args: pCpuNum
the\ host\ vm\ located\ only\ have\ %\ CPUs = the host vm located only have % CPUs

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningBasicFactory.java:46
# args: 
incorrect\ input\ format,\ only\ accept\ '^[0-9,]+$' = incorrect input format, only accept '^[0-9,]+$'

# at: src/main/java/org/zstack/compute/emulatorpinning/EmulatorPinningFilterFlow.java:37
# args: 
vcpu\ pinning\ pcpu\ id\ >\ host\ cores = vcpu pinning pcpu id > host cores

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:81
# args: 
webssh\ server\ is\ not\ running. = webssh server is not running.

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:105
# args: msg.getManagementIp()
managementIp[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = managementIp[{0}] is neither an IPv4 address nor a valid hostname

# at: src/main/java/org/zstack/compute/host/HostApiInterceptor.java:115
# args: msg.getHostUuid(),hostStatus
can\ not\ maintain\ host[uuid\:%s,\ status\:%s]which\ is\ not\ Connected = can not maintain host[uuid:{0}, status:{1}]which is not Connected

# at: src/main/java/org/zstack/compute/host/HostBase.java:272
# args: msg.getHostUuid()
host[%s]\ does\ not\ have\ ipmi\ device\ or\ ipmi\ does\ not\ have\ address.After\ config\ ipmi\ address,\ please\ reconnect\ host\ to\ refresh\ host\ ipmi\ information = host[{0}] does not have ipmi device or ipmi does not have address.After config ipmi address, please reconnect host to refresh host ipmi information

# at: src/main/java/org/zstack/compute/host/HostBase.java:435
# args: vmFailedToMigrate.keySet(),self.getUuid(),self.getName(),self.getManagementIp()
failed\ to\ migrate\ vm[uuids\:%s]\ on\ host[uuid\:%s,\ name\:%s,\ ip\:%s],\ will\ try\ stopping\ it. = failed to migrate vm[uuids:{0}] on host[uuid:{1}, name:{2}, ip:{3}], will try stopping it.

# at: src/main/java/org/zstack/compute/host/HostBase.java:841
# args: 
host\ is\ connecting,\ ping\ failed = host is connecting, ping failed

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:63
# args: host.getUuid()
mock\ power\ off\ host[%s]\ by\ ipmi\ failed. = mock power off host[{0}] by ipmi failed.

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:79
# args: host.getUuid()
power\ off\ host[%s]\ by\ ipmi\ failed. = power off host[{0}] by ipmi failed.

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:121
# args: host.getUuid()
mock\ power\ on\ host[%s]\ by\ ipmi\ failed. = mock power on host[{0}] by ipmi failed.

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:131
# args: host.getUuid()
power\ on\ host[%s]\ by\ ipmi\ failed. = power on host[{0}] by ipmi failed.

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:161
# args: host.getUuid()
mock\ power\ reset\ host[%s]\ by\ ipmi\ failed. = mock power reset host[{0}] by ipmi failed.

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:171
# args: host.getUuid()
power\ reset\ host[%s]\ by\ ipmi\ failed. = power reset host[{0}] by ipmi failed.

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:192
# args: 
ipmi\ information\ is\ not\ complete. = ipmi information is not complete.

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:205
# args: ipmi.getUuid(),rst.getStderr()
host[%s]\ can\ not\ connect\ ipmi[%s],\ because\:%s = host[{0}] can not connect ipmi[{1}], because:{2}

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:202
# args: ipmi.getUuid()
host[%s]\ got\ unexpected\ return\ value = host[{0}] got unexpected return value

# at: src/main/java/org/zstack/compute/host/HostIpmiPowerExecutor.java:222
# args: ipmi.getIpmiAddress(),rst.getStderr()
host\ ipmi[%s]\ is\ not\ reachable.because\ %s = host ipmi[{0}] is not reachable.because {1}

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:264
# args: msg.getManagementIp()
there\ has\ been\ a\ host\ having\ managementIp[%s] = there has been a host having managementIp[{0}]

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:270
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ not\ existing = cluster[uuid:{0}] is not existing

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:364
# args: vo.getName(),vo.getManagementIp()
after\ connecting,\ host[name\:%s,\ ip\:%s]\ returns\ a\ null\ architecture = after connecting, host[name:{0}, ip:{1}] returns a null architecture

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:379
# args: vo.getClusterUuid(),cluster.getArchitecture(),vo.getName(),vo.getManagementIp(),arch
cluster[uuid\:%s]'s\ architecture\ is\ %s,\ not\ match\ the\ host[name\:%s,\ ip\:%s]\ architecture\ %s = cluster[uuid:{0}]'s architecture is {1}, not match the host[name:{2}, ip:{3}] architecture {4}

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:515
# args: msg.getCancellationApiId()
no\ running\ api[%s]\ task\ on\ hosts = no running api[{0}] task on hosts

# at: src/main/java/org/zstack/compute/host/HostManagerImpl.java:733
# args: d.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ becomes\ disconnected,\ the\ host\ has\ no\ connected\ primary\ storage\ attached = primary storage[uuid:{0}] becomes disconnected, the host has no connected primary storage attached

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:59
# args: nameips.stream().map( it -> it.get(1, String.class) + "/" + it.get(0, String.class)).collect(Collectors.joining(", "))
host(s)\ [%s]\ is\ not\ Connected,\ not\ support\ to\ power\ off = host(s) [{0}] is not Connected, not support to power off

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:67
# args: ipAddress
invalid\ ip\ address\ format[%s] = invalid ip address format[{0}]

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:71
# args: netmask
invalid\ netmask\ format[%s] = invalid netmask format[{0}]

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:75
# args: 
invalid\ ip\ set,\ it\ must\ be\ set\ with\ netmask = invalid ip set, it must be set with netmask

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:91
# args: 
cannot\ set\ ip\ on\ interface\ corresponding\ to\ the\ management\ network = cannot set ip on interface corresponding to the management network

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:192
# args: 
cannot\ set\ ip\ which\ has\ been\ set\ on\ the\ other\ interfaces = cannot set ip which has been set on the other interfaces

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:126
# args: 
cannot\ set\ ip\ on\ bonding\ slaves = cannot set ip on bonding slaves

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:203
# args: 
cannot\ set\ ip\ on\ bridge\ slaves = cannot set ip on bridge slaves

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:151
# args: msg.getInterfaceUuid()
invalid\ interface\ uuid = invalid interface uuid

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:168
# args: 
cannot\ set\ ip\ on\ bonding\ corresponding\ to\ the\ management\ network = cannot set ip on bonding corresponding to the management network

# at: src/main/java/org/zstack/compute/host/HostMevocoApiInterceptor.java:213
# args: msg.getBondingUuid()
invalid\ bonding\ uuid = invalid bonding uuid

# at: src/main/java/org/zstack/compute/host/HostNetworkInterfaceStateAllocatorFlow.java:141
# args: 
no\ available\ network\ interface\ on\ the\ host\ to\ start\ the\ vm = no available network interface on the host to start the vm

# at: src/main/java/org/zstack/compute/host/HostSecurityLevelAllocatorFilterExtensionPoint.java:68
# args: 
vm\ security\ level\ not\ consistent\ with\ vms\ running\ on\ host = vm security level not consistent with vms running on host

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:280
# args: host.getUuid(),host.getName(),host.getState()
host[uuid\:%s,\ name\:%s]\ is\ in\ state[%s],\ cannot\ perform\ required\ operation = host[uuid:{0}, name:{1}] is in state[{2}], cannot perform required operation

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:917
# args: ret.getError()
operation\ error,\ because\ %s = operation error, because {0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:370
# args: l3Uuid,msg.getHostUuid()
failed\ to\ allocate\ pci\ device\ for\ l3[uuid\:%s]\ on\ host[uuid\:%s] = failed to allocate pci device for l3[uuid:{0}] on host[uuid:{1}]

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:622
# args: msg.getNetworkInterfaceName(),msg.getHostUuid()
networkInterface[name\:%s]\ of\ host[uuid\:%s]\ can\ not\ find = networkInterface[name:{0}] of host[uuid:{1}] can not find

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:805
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
only\ support\ do\ live\ snapshot\ on\ vm\ state[%s],\ but\ vm\ is\ on\ [%s]\ state = only support do live snapshot on vm state[{0}], but vm is on [{1}] state

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:1389
# args: ret.getError()
sync\ vm\ port\ config\ failed\:\ %s = sync vm port config failed: {0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBase.java:1423
# args: ret.getError()
set\ vm\ hostname\ failed\:\ %s = set vm hostname failed: {0}

# at: src/main/java/org/zstack/compute/host/MevocoHostBaseFactory.java:84
# args: huuid,cidr
host[uuid\:%s]\ has\ multi\ ips\ in\ cidr[%s] = host[uuid:{0}] has multi ips in cidr[{1}]

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:1058
# args: msg.getHostUuid()
host[uuid\:%s]\ can\ not\ find = host[uuid:{0}] can not find

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:408
# args: rsp.getError()
failed\ to\ update\ interface\ ip,\ because\ %s = failed to update interface ip, because {0}

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:510
# args: rsp.getError()
failed\ to\ update\ bonding\ ip,\ because\ %s = failed to update bonding ip, because {0}

# at: src/main/java/org/zstack/compute/host/MevocoHostManagerImpl.java:1024
# args: clusterUuids,hypervisorType
cluster[uuids\:%s,\ hypervisorType\:%s]\ are\ not\ exist! = cluster[uuids:{0}, hypervisorType:{1}] are not exist!

# at: src/main/java/org/zstack/compute/ovs/VSwitchOvsManagerImpl.java:72
# args: newValue
ovs\ cpu\ pinning\ resource\ config\:[%s]\ format\ error. = ovs cpu pinning resource config:[{0}] format error.

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:136
# args: msg.getVmNicUuid()
vm\ nic[uuid\:%s]\ doesn't\ exist = vm nic[uuid:{0}] doesn't exist

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:77
# args: VmVfNicConstant.SRIOVABLE_L2_NETWORK_TYPES
only\ %s\ support\ sriov = only {0} support sriov

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:83
# args: L2NetworkConstant.VSWITCH_TYPE_OVS_DPDK
%s\ don't\ support\ sriov = {0} don't support sriov

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:93
# args: l3Uuid
L3\ Network\ [uuid\:%s]\ doesn't\ exist = L3 Network [uuid:{0}] doesn't exist

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:97
# args: l2Uuid,l3Uuid
related\ l2\ network[uuid\:%s]\ of\ l3\ network[uuid\:%s]\ is\ not\ sriov\ enabled = related l2 network[uuid:{0}] of l3 network[uuid:{1}] is not sriov enabled

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:140
# args: msg.getVmNicUuid(),msg.getVmNicType()
vm\ nic[uuid\:%s]\ is\ already\ of\ type\ %s,\ no\ need\ to\ change = vm nic[uuid:{0}] is already of type {1}, no need to change

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:146
# args: 
change\ vm\ nic\ type\ only\ when\ the\ vm\ is\ stopped = change vm nic type only when the vm is stopped

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:190
# args: 
cant\ not\ change\ vf\ nic\ to\ normal\ type = cant not change vf nic to normal type

# at: src/main/java/org/zstack/compute/sriov/VmVfNicApiInterceptor.java:197
# args: 
cant\ not\ change\ nic\ to\ vf\ type = cant not change nic to vf type

# at: src/main/java/org/zstack/compute/sriov/VmVfNicFilterFlow.java:89
# args: 
no\ candidate\ host\ with\ enough\ vf\ nic\ pci\ devices = no candidate host with enough vf nic pci devices

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:275
# args: vmType
enableSRIOV\ tag\ is\ not\ supported\ for\ vm\ type\ [%s] = enableSRIOV tag is not supported for vm type [{0}]

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:476
# args: vmUuid
vm[uuid\:%s]\ needs\ to\ be\ running\ when\ attach\ vf\ nics,\ but\ no\ hostUuid\ found = vm[uuid:{0}] needs to be running when attach vf nics, but no hostUuid found

# at: src/main/java/org/zstack/compute/sriov/VmVfNicManagerImpl.java:499
# args: hostUuid,l3Uuid
cannot\ find\ available\ vf\ nic\ pci\ device\ on\ host[uuid\:%s]\ for\ l3[uuid\:%s] = cannot find available vf nic pci device on host[uuid:{0}] for l3[uuid:{1}]

# at: src/main/java/org/zstack/compute/sriov/VmVfNicReserveFlow.java:88
# args: hostUuid,vmUuid
reserve\ pci\ address\ for\ on\ host[uuid]\ for\ vm\ [uuid\:%s]\ failed, = reserve pci address for on host[uuid] for vm [uuid:{0}] failed,

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java:49
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ delete\ vHost\ User\ Client\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = failed to delete vHost User Client in host[uuid:{0}] for vm[uuid:{1}] : {2}

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicKvmBackend.java:85
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ generate\ vHost\ User\ Client\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = failed to generate vHost User Client in host[uuid:{0}] for vm[uuid:{1}] : {2}

# at: src/main/java/org/zstack/compute/vHostUser/VmVHostUserNicManagerImpl.java:309
# args: inv.getUuid(),destHostUuid
cannot\ generate\ vhost\ user\ client\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = cannot generate vhost user client for vm[uuid:{0}] on the destination host[uuid:{1}]

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:66
# args: VmVdpaNicConstant.VDPA_L2_NETWORK_TYPES
only\ %s\ support\ vdpa = only {0} support vdpa

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:106
# args: l2Vo.getvSwitchType(),l2Vo.getPhysicalInterface()
can\ not\ create\ %s\ with\ physical\ interface\:[%s]\ which\ was\ already\ been\ used\ by\ another\ vSwitch\ type. = can not create {0} with physical interface:[{1}] which was already been used by another vSwitch type.

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:131
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ do\ not\ support\ ovs-dpdk = cluster[uuid:{0}] do not support ovs-dpdk

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicApiInterceptor.java:147
# args: l2NicName,hostUuid,l2NicName
physical\ interface[%s]\ in\ host[uuid\:%s]\ is\ not\ sriov\ virtualized,\ please\ perform\ sriov\ cutting\ operation\ on\ physical\ interface[%s]. = physical interface[{0}] in host[uuid:{1}] is not sriov virtualized, please perform sriov cutting operation on physical interface[{2}].

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java:49
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ delete\ vdpas\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = failed to delete vdpas in host[uuid:{0}] for vm[uuid:{1}] : {2}

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicKvmBackend.java:86
# args: hostUuid,vmUuid,reply.getError()
failed\ to\ generate\ vdpas\ in\ host[uuid\:%s]\ for\ vm[uuid\:%s]\ \:\ %s = failed to generate vdpas in host[uuid:{0}] for vm[uuid:{1}] : {2}

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:650
# args: hostUuid,l3Uuid
cannot\ find\ available\ vdpa\ nic\ pci\ device\ on\ host[uuid\:%s]\ for\ l3[uuid\:%s] = cannot find available vdpa nic pci device on host[uuid:{0}] for l3[uuid:{1}]

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:263
# args: vmUuid
vm[uuid\:%s]\ needs\ to\ be\ running\ when\ attach\ vdpa\ nics,\ but\ no\ hostUuid\ found = vm[uuid:{0}] needs to be running when attach vdpa nics, but no hostUuid found

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:688
# args: inv.getUuid(),destHostUuid
cannot\ generate\ vdpa\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = cannot generate vdpa for vm[uuid:{0}] on the destination host[uuid:{1}]

# at: src/main/java/org/zstack/compute/vdpa/VmVdpaNicManagerImpl.java:835
# args: 
no\ candidate\ host\ with\ enough\ vdpa\ resource = no candidate host with enough vdpa resource

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:63
# args: 
not\ dest\ host\ found\ in\ db,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = not dest host found in db, can't send change password cmd to the host!

# at: src/main/java/org/zstack/compute/vm/ChangeVmPasswordFlow.java:64
# args: 
not\ account\ preference\ found,\ \ send\ change\ password\ cmd\ to\ the\ host! = not account preference found,  send change password cmd to the host!

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:160
# args: srcPath,getManagementServerId()
fail\ to\ attach\ virtio\ driver\ because\ read\ md5\ of\ file[%s]\ fail\ in\ mn[uuid\:%s]\:\ file\ not\ found\ on\ classpath = fail to attach virtio driver because read md5 of file[{0}] fail in mn[uuid:{1}]: file not found on classpath

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:172
# args: srcPath,getManagementServerId(),e.getMessage()
fail\ to\ attach\ virtio\ driver\ because\ read\ md5\ of\ file[%s]\ fail\ in\ mn[uuid\:%s]\:\ %s = fail to attach virtio driver because read md5 of file[{0}] fail in mn[uuid:{1}]: {2}

# at: src/main/java/org/zstack/compute/vm/CheckAndSendVirtIODriverFlow.java:167
# args: srcPath,getManagementServerId()
fail\ to\ attach\ virtio\ driver\ because\ of\ invalid\ md5\ of\ file[%s]\ in\ mn[uuid\:%s] = fail to attach virtio driver because of invalid md5 of file[{0}] in mn[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/CheckIfCreateTemporaryTemplateFlow.java:105
# args: spec.getDataVolumeRequiredHostUuids()
only\ host(s)[uuid(s)\:\ %s]\ can\ access\ data\ volume. = only host(s)[uuid(s): {0}] can access data volume.

# at: src/main/java/org/zstack/compute/vm/CpuTopology.java:71
# args: cpuNum,cpuSockets,cpuCores,cpuThreads,socketNum,coreNum,threadNum
cpu\ topology\ is\ not\ correct,\ cpuNum[%s],\ configured\ cpuSockets[%s],\ cpuCores[%s],\ cpuThreads[%s];\ Calculated\ cpuSockets[%s],\ cpuCores[%s],\ cpuThreads[%s] = cpu topology is not correct, cpuNum[{0}], configured cpuSockets[{1}], cpuCores[{2}], cpuThreads[{3}]; Calculated cpuSockets[{4}], cpuCores[{5}], cpuThreads[{6}]

# at: src/main/java/org/zstack/compute/vm/IsoOperator.java:40
# args: vmUuid,isoUuid
VM[uuid\:%s]\ has\ attached\ ISO[uuid\:%s] = VM[uuid:{0}] has attached ISO[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/IsoOperator.java:48
# args: vmUuid
All\ vm[uuid\:%s]\ CD-ROMs\ have\ mounted\ ISO = All vm[uuid:{0}] CD-ROMs have mounted ISO

# at: src/main/java/org/zstack/compute/vm/KvmUserVmVirtIODriverExtension.java:142
# args: driverFormat
invalid\ virtio\ driver\ device\ format\:\ %s = invalid virtio driver device format: {0}

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:77
# args: mac
This\ is\ not\ a\ valid\ MAC\ address\ [%s] = This is not a valid MAC address [{0}]

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:87
# args: mac
Not\ a\ valid\ MAC\ address\ [%s] = Not a valid MAC address [{0}]

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:90
# args: 
Disallowed\ address = Disallowed address

# at: src/main/java/org/zstack/compute/vm/MacOperator.java:93
# args: mac
Expected\ unicast\ mac\ address,\ found\ multicast\ MAC\ address\ [%s] = Expected unicast mac address, found multicast MAC address [{0}]

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:251
# args: 
state\ of\ vm[uuid\:%s]\ is\ not\ in\ Running\ state,\ can\ not\ sync\ clock = state of vm[uuid:{0}] is not in Running state, can not sync clock

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:442
# args: 
hot\ plug\ is\ not\ turned\ off,can\ not\ open\ vm\ numa = hot plug is not turned off,can not open vm numa

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:609
# args: self.getUuid()
vm[uuid\:\ %s]'s\ state\ is\ not\ Stopped\ now,\ cannot\ operate\ 'changevmimage'\ action = vm[uuid: {0}]'s state is not Stopped now, cannot operate 'changevmimage' action

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:662
# args: self.getUuid()
vm[uuid\:%s]\ cluster\ uuid\ is\ null,\ cannot\ change\ image\ for\ it = vm[uuid:{0}] cluster uuid is null, cannot change image for it

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:675
# args: self.getUuid(),self.getClusterUuid()
vm[uuid\:%s]\ is\ in\ cluster[uuid\:%s],\ but\ there\ is\ no\ available\ host\ in\ the\ cluster,\ cannot\ change\ image\ for\ the\ vm = vm[uuid:{0}] is in cluster[uuid:{1}], but there is no available host in the cluster, cannot change image for the vm

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:967
# args: vivo.getRootVolumeUuid(),vivo.getRootVolume().getPrimaryStorageUuid(),msg.getPrimaryStorageUuidForRootVolume()
cannot\ find\ backupStorage\ for\ volume[uuid\:\ %s,\ psUuid\:\ %s],\ required\ primary\ storage\ uuid\:%s = cannot find backupStorage for volume[uuid: {0}, psUuid: {1}], required primary storage uuid:{2}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:1152
# args: vol.getPrimaryStorageUuid(),requiredPsUuid
can\ not\ find\ backup\ storage,\ unable\ to\ commit\ volume\ snapshot[psUuid\:%s]\ as\ image,\ destination\ required\ PS\ uuid\:%s = can not find backup storage, unable to commit volume snapshot[psUuid:{0}] as image, destination required PS uuid:{1}

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2052
# args: 
direction\ must\ be\ set\ to\ in\ or\ out = direction must be set to in or out

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2132
# args: struct.inboundBandwidthUpthreshold
inboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = inboundBandwidth must be set no more than {0}.

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2142
# args: struct.outboundBandwidthUpthreshold
outboundBandwidth\ must\ be\ set\ no\ more\ than\ %s. = outboundBandwidth must be set no more than {0}.

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2199
# args: self.getUuid()
vm\ [%s]'\ state\ must\ be\ Running\ or\ Paused\ to\ sync\ nic\ qos = vm [{0}]' state must be Running or Paused to sync nic qos

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2204
# args: 
vm\ [%s]'s\ HostUuid\ is\ null,\ cannot\ sync\ nic\ qos = vm [{0}]'s HostUuid is null, cannot sync nic qos

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2661
# args: amsg.getVmInstanceUuid()
not\ dest\ host\ found\ in\ db\ by\ uuid\:\ %s,\ can't\ send\ change\ password\ cmd\ to\ the\ host! = not dest host found in db by uuid: {0}, can't send change password cmd to the host!

# at: src/main/java/org/zstack/compute/vm/MevocoVmInstanceBase.java:2691
# args: 
state\ is\ not\ correct\ while\ change\ password. = state is not correct while change password.

# at: src/main/java/org/zstack/compute/vm/VmAllocateCdRomFlow.java:56
# args: spec.getVmInventory().getUuid()
vm[uuid\:%s]\ cdRom\ deviceId\ repetition = vm[uuid:{0}] cdRom deviceId repetition

# at: src/main/java/org/zstack/compute/vm/VmAllocateHostAndPrimaryStorageFlow.java:69
# args: imageUuid,cachedPsUuids
creation\ rely\ on\ image\ cache[uuid\:%s,\ locate\ ps\ uuids\:\ [%s]],\ cannot\ create\ other\ places. = creation rely on image cache[uuid:{0}, locate ps uuids: [{1}]], cannot create other places.

# at: src/main/java/org/zstack/compute/vm/VmAllocateNicIpFlow.java:83
# args: v.getL3Invs().get(0).getUuid()
there\ is\ no\ available\ ipRange\ on\ L3\ network\ [%s] = there is no available ipRange on L3 network [{0}]

# at: src/main/java/org/zstack/compute/vm/VmAllocatePrimaryStorageForAttachingDiskFlow.java:50
# args: spec.getVmInventory().getUuid()
\ Can\ not\ find\ the\ vm's\ host,\ please\ start\ the\ vm[%s],\ then\ mount\ the\ disk =  Can not find the vm's host, please start the vm[{0}], then mount the disk

# at: src/main/java/org/zstack/compute/vm/VmDownloadIsoFlow.java:68
# args: iso.getUuid(),host.getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ iso[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ running\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = cannot find the iso[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is running\n2. if the backup storage is in connected status, if not, try reconnecting it

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:713
# args: msg.getVmInstanceUuid(),msg.getIsoUuid()
VM[uuid\:%s]\ already\ has\ an\ ISO[uuid\:%s]\ attached = VM[uuid:{0}] already has an ISO[uuid:{1}] attached

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:169
# args: 
either\ l3NetworkUuids\ or\ backupStorageUuid\ must\ be\ set = either l3NetworkUuids or backupStorageUuid must be set

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:205
# args: msg.getVmInstanceUuid(),state
unable\ to\ change\ to\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = unable to change to L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:211
# args: msg.getDestL3NetworkUuid()
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ doesn't\ has\ have\ ip\ range = unable to change to L3 network. The L3 network[uuid:{0}] doesn't has have ip range

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:221
# args: newAddedL3Uuids,l2Uuids
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ different\ l2\ networks\ [uuids\:%s] = unable to change to L3 network. The L3 network[uuid:{0}] are belonged to different l2 networks [uuids:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:228
# args: newAddedL3Uuids,l2Uuids
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ l2\ networks\ [uuids\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = unable to change to L3 network. The L3 network[uuid:{0}] are belonged to l2 networks [uuids:{1}] that have not been attached to any cluster

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:240
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = unable to change to L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:247
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ change\ to\ a\ non-guest\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = unable to change to a non-guest L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:255
# args: l3Uuid
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = unable to change to L3 network. The L3 network[uuid:{0}] is disabled

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:258
# args: l3Uuid
unable\ to\ change\ to\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = unable to change to L3 network. The L3 network[uuid:{0}] is a system network and vm is a user vm

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:942
# args: staticIp,l3Uuid
the\ static\ IP[%s]\ is\ not\ in\ any\ IP\ range\ of\ the\ L3\ network[uuid\:%s] = the static IP[{0}] is not in any IP range of the L3 network[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:949
# args: staticIp,l3Uuid
the\ static\ IP[%s]\ has\ been\ occupied\ on\ the\ L3\ network[uuid\:%s] = the static IP[{0}] has been occupied on the L3 network[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:912
# args: e.getKey(),newAddedL3Uuids
static\ ip\ l3\ uuid[%s]\ is\ not\ included\ in\ nic\ l3\ [%s] = static ip l3 uuid[{0}] is not included in nic l3 [{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:373
# args: image.getName(),image.getUuid()
the\ image[name\:%s,\ uuid\:%s]\ is\ an\ ISO,\ rootDiskSize\ must\ be\ set = the image[name:{0}, uuid:{1}] is an ISO, rootDiskSize must be set

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:383
# args: msg.getVmInstanceUuid(),vo.getState().toString()
Can\ not\ create\ CD-ROM\ for\ vm[uuid\:%s]\ which\ is\ in\ state[%s]\  = Can not create CD-ROM for vm[uuid:{0}] which is in state[{1}] 

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:391
# args: vo.getPlatform()
Current\ platform\ %s\ not\ support\ update\ nic\ driver\ yet = Current platform {0} not support update nic driver yet

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:407
# args: 
rootDiskSize\ is\ needed\ when\ image\ media\ type\ is\ ISO = rootDiskSize is needed when image media type is ISO

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:419
# args: msg.getVmInstanceUuid(),msg.getHostUuid()
the\ vm[uuid\:%s]\ is\ already\ on\ host[uuid\:%s] = the vm[uuid:{0}] is already on host[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:436
# args: 
the\ VM\ cannot\ do\ online\ cpu/memory\ update\ because\ of\ disabling\ Instance\ Offering\ Online\ Modification.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu/memory\ update\ again = the VM cannot do online cpu/memory update because of disabling Instance Offering Online Modification. Please stop the VM then do the cpu/memory update again

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:495
# args: vo.getUuid(),vo.getState(),StringUtils.join(list(VmInstanceState.Running, VmInstanceState.Stopped), ",")
The\ state\ of\ vm[uuid\:%s]\ is\ %s.\ Only\ these\ state[%s]\ is\ allowed\ to\ update\ cpu\ or\ memory. = The state of vm[uuid:{0}] is {1}. Only these state[{2}] is allowed to update cpu or memory.

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:452
# args: vo.getUuid()
can't\ decrease\ capacity\ when\ vm[uuid\:%s]\ is\ running = can't decrease capacity when vm[uuid:{0}] is running

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:482
# args: 
the\ VM\ cannot\ do\ cpu\ hot\ plug\ because\ of\ disabling\ cpu\ hot\ plug.\ Please\ stop\ the\ VM\ then\ do\ the\ cpu\ hot\ plug\ again = the VM cannot do cpu hot plug because of disabling cpu hot plug. Please stop the VM then do the cpu hot plug again

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:488
# args: 
the\ VM\ cannot\ do\ memory\ hot\ plug\ because\ of\ disabling\ memory\ hot\ plug.\ Please\ stop\ the\ VM\ then\ do\ the\ memory\ hot\ plug\ again = the VM cannot do memory hot plug because of disabling memory hot plug. Please stop the VM then do the memory hot plug again

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:506
# args: vo.getUuid()
can't\ decrease\ cpu\ of\ vm[uuid\:%s]\ when\ it\ is\ running = can't decrease cpu of vm[uuid:{0}] when it is running

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:512
# args: vo.getUuid()
can't\ decrease\ memory\ size\ of\ vm[uuid\:%s]\ when\ it\ is\ running = can't decrease memory size of vm[uuid:{0}] when it is running

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:523
# args: 
either\ l3NetworkUuids\ or\ imageUuid\ must\ be\ set = either l3NetworkUuids or imageUuid must be set

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:538
# args: ip
%s\ is\ not\ a\ valid\ IPv4\ address = {0} is not a valid IPv4 address

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:576
# args: ip,vmNicVO.getUuid()
ip\ address\ [%s]\ already\ set\ to\ vmNic\ [uuid\:%s] = ip address [{0}] already set to vmNic [uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:557
# args: ip,rangeVO.getNetworkCidr()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [%s] = ip address [{0}] is not in ip range [{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:566
# args: ip
%s\ is\ not\ a\ valid\ IPv6\ address = {0} is not a valid IPv6 address

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:584
# args: ip,rangeVO.getStartIp(),rangeVO.getEndIp()
ip\ address\ [%s]\ is\ not\ in\ ip\ range\ [startIp\ %s,\ endIp\ %s] = ip address [{0}] is not in ip range [startIp {1}, endIp {2}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:595
# args: 
could\ not\ set\ ip\ address,\ due\ to\ no\ ip\ address\ is\ specified = could not set ip address, due to no ip address is specified

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:610
# args: msg.getIp()
static\ ip\ [%s]\ format\ error = static ip [{0}] format error

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:622
# args: 
ipv4\ address\ need\ a\ netmask = ipv4 address need a netmask

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:640
# args: msg.getIp6()
ip\ address\ [%s]\ already\ set\ to\ vmNic = ip address [{0}] already set to vmNic

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:634
# args: 
ipv6\ address\ need\ a\ prefix = ipv6 address need a prefix

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:654
# args: msg.getVmInstanceUuid(),msg.getL3NetworkUuid()
the\ VM[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = the VM[uuid:{0}] has no nic on the L3 network[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:661
# args: msg.getStaticIp(),msg.getVmInstanceUuid()
could\ not\ delete\ static\ ip\ [%s]\ for\ vm\ [uuid\:%s]\ because\ it\ doesn't\ existed = could not delete static ip [{0}] for vm [uuid:{1}] because it doesn't existed

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:673
# args: o,msg.getBootOrder()
invalid\ boot\ device[%s]\ in\ boot\ order%s = invalid boot device[{0}] in boot order{1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:696
# args: 
boot\ volume\ cannot\ be\ shareable. = boot volume cannot be shareable.

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:700
# args: msg.getVolumeUuid(),msg.getVmInstanceUuid()
volume[uuid\:%s]\ must\ be\ attached\ to\ vm[uuid\:%s] = volume[uuid:{0}] must be attached to vm[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:705
# args: msg.getVmInstanceUuid()
the\ vm\ %s\ with\ memory\ snapshots\ do\ not\ support\ setting\ boot\ volume = the vm {0} with memory snapshots do not support setting boot volume

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:718
# args: type
Unsupported\ Image\ Media\ Type\:\ [%s]\  = Unsupported Image Media Type: [{0}] 

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:733
# args: cdRomUuid
The\ cdRom[uuid\:%s]\ does\ not\ exist = The cdRom[uuid:{0}] does not exist

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:737
# args: msg.getVmInstanceUuid(),cdRomUuid
VM[uuid\:%s]\ cdRom[uuid\:%s]\ has\ mounted\ the\ ISO = VM[uuid:{0}] cdRom[uuid:{1}] has mounted the ISO

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:755
# args: msg.getVmInstanceUuid()
VM[uuid\:%s]\ has\ multiple\ ISOs\ attached,\ specify\ the\ isoUuid\ when\ detaching = VM[uuid:{0}] has multiple ISOs attached, specify the isoUuid when detaching

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:863
# args: l3Uuid
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ disabled = unable to attach a L3 network. The L3 network[uuid:{0}] is disabled

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:813
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = unable to attach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:819
# args: msg.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ doesn't\ has\ have\ ip\ range = unable to attach a L3 network. The L3 network[uuid:{0}] doesn't has have ip range

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:829
# args: newAddedL3Uuids,l2Uuids
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ different\ l2\ networks\ [uuids\:%s] = unable to attach a L3 network. The L3 network[uuid:{0}] are belonged to different l2 networks [uuids:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:836
# args: newAddedL3Uuids,l2Uuids
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ are\ belonged\ to\ l2\ networks\ [uuids\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = unable to attach a L3 network. The L3 network[uuid:{0}] are belonged to l2 networks [uuids:{1}] that have not been attached to any cluster

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:848
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = unable to attach a L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:855
# args: attachedL3Uuids,msg.getVmInstanceUuid()
unable\ to\ attach\ a\ non-guest\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = unable to attach a non-guest L3 network. The L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:866
# args: l3Uuid
unable\ to\ attach\ a\ L3\ network.\ The\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = unable to attach a L3 network. The L3 network[uuid:{0}] is a system network and vm is a user vm

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1300
# args: e.getMessage()
invalid\ json\ format,\ causes\:\ %s = invalid json format, causes: {0}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:986
# args: msg.getVmInstanceUuid(),state
unable\ to\ attach\ the\ nic.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = unable to attach the nic. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:993
# args: vmNicVO.getVmInstanceUuid()
unable\ to\ attach\ the\ nic.\ The\ nic\ has\ been\ attached\ with\ vm[uuid\:\ %s] = unable to attach the nic. The nic has been attached with vm[uuid: {0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1004
# args: vmNicVO.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = unable to attach the nic. Its L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1009
# args: vmNicVO.getL3NetworkUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ the\ nic\ with\ a\ non-guest\ L3\ network.\ Its\ L3\ network[uuid\:%s]\ is\ already\ attached\ to\ the\ vm[uuid\:\ %s] = unable to attach the nic with a non-guest L3 network. Its L3 network[uuid:{0}] is already attached to the vm[uuid: {1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1018
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ disabled = unable to attach the nic. Its L3 network[uuid:{0}] is disabled

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1021
# args: l3NetworkVO.getUuid()
unable\ to\ attach\ the\ nic.\ Its\ L3\ network[uuid\:%s]\ is\ a\ system\ network\ and\ vm\ is\ a\ user\ vm = unable to attach the nic. Its L3 network[uuid:{0}] is a system network and vm is a user vm

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1028
# args: l3NetworkVO.getL2NetworkUuid()
unable\ to\ attach\ the\ nic.\ Its\ l2\ network\ [uuid\:%s]\ that\ have\ not\ been\ attached\ to\ any\ cluster = unable to attach the nic. Its l2 network [uuid:{0}] that have not been attached to any cluster

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1037
# args: msg.getVmNicUuid(),nicVO.getType()
could\ not\ update\ nic[uuid\:\ %s]\ state,\ due\ to\ nic\ type[%s]\ not\ support = could not update nic[uuid: {0}] state, due to nic type[{1}] not support

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1043
# args: msg.getVmNicUuid()
could\ not\ update\ nic[uuid\:\ %s]\ state,\ due\ to\ vm\ not\ support = could not update nic[uuid: {0}] state, due to vm not support

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1060
# args: vmUuid,state
unable\ to\ detach\ a\ L3\ network.\ The\ vm[uuid\:\ %s]\ is\ not\ Running\ or\ Stopped;\ the\ current\ state\ is\ %s = unable to detach a L3 network. The vm[uuid: {0}] is not Running or Stopped; the current state is {1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1075
# args: msg.getVmInstanceUuid(),state
vm[uuid\:%s]\ can\ only\ attach\ volume\ when\ state\ is\ Running\ or\ Stopped,\ current\ state\ is\ %s = vm[uuid:{0}] can only attach volume when state is Running or Stopped, current state is {1}

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1083
# args: 
image\ mediaType\ is\ ISO\ but\ missing\ root\ disk\ settings = image mediaType is ISO but missing root disk settings

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1087
# args: 
Unexpected\ root\ disk\ settings = Unexpected root disk settings

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1154
# args: 
Unexpected\ data\ disk\ settings.\ dataDiskSizes\ need\ to\ be\ greater\ than\ 0 = Unexpected data disk settings. dataDiskSizes need to be greater than 0

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1206
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ platform\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = at least one of field platform in msg or image[uuid:{0}] should be set

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1210
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ guestOsType\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = at least one of field guestOsType in msg or image[uuid:{0}] should be set

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1214
# args: msg.getImageUuid()
at\ least\ one\ of\ field\ architecture\ in\ msg\ or\ image[uuid\:%s]\ should\ be\ set = at least one of field architecture in msg or image[uuid:{0}] should be set

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1249
# args: 
cannot\ create\ vm\ instance\ from\ a\ shareable\ volume. = cannot create vm instance from a shareable volume.

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1253
# args: 
could\ not\ create\ vm\ instance\ from\ a\ attached\ volume. = could not create vm instance from a attached volume.

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1257
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ could\ not\ satisfy\ conditions[state\:Enabled\ status\:Ready] = volume[uuid:{0}] could not satisfy conditions[state:Enabled status:Ready]

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1293
# args: 
l3NetworkUuids\ and\ vmNicInventories\ mustn't\ both\ be\ empty\ or\ both\ be\ set = l3NetworkUuids and vmNicInventories mustn't both be empty or both be set

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1415
# args: cdRomIsoUuid
The\ image[uuid\=%s]\ does\ not\ exist = The image[uuid={0}] does not exist

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1420
# args: 
Do\ not\ allow\ to\ mount\ duplicate\ ISO = Do not allow to mount duplicate ISO

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1435
# args: 
The\ console\ password\ cannot\ start\ with\ 'password'\ which\ may\ trigger\ a\ VNC\ security\ issue = The console password cannot start with 'password' which may trigger a VNC security issue

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1440
# args: 
can\ not\ call\ this\ api\ because\ it's\ Deprecated = can not call this api because it's Deprecated

# at: src/main/java/org/zstack/compute/vm/VmInstanceApiInterceptor.java:1457
# args: vmCdRomVO.getUuid()
The\ CdRom[%s]\ Already\ the\ default = The CdRom[{0}] Already the default

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:271
# args: vo.getUuid(),vo.getName()
vm[uuid\:%s,\ name\:%s]\ has\ been\ deleted = vm[uuid:{0}, name:{1}] has been deleted

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:595
# args: vmInv.getUuid(),vmInv.getHostUuid(),reply.getError()
failed\ to\ check\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s],\ %s = failed to check state of the vm[uuid:{0}] on the host[uuid:{1}], {2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:602
# args: vmInv.getUuid(),vmInv.getHostUuid()
got\ an\ unrecognized\ state\ of\ the\ vm[uuid\:%s]\ on\ the\ host[uuid\:%s] = got an unrecognized state of the vm[uuid:{0}] on the host[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:984
# args: self.getUuid(),l3Uuid
the\ vm[uuid\:%s]\ has\ no\ nic\ on\ the\ L3\ network[uuid\:%s] = the vm[uuid:{0}] has no nic on the L3 network[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:1382
# args: 
the\ vm\ has\ been\ deleted = the vm has been deleted

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:3758
# args: msg.getUuid()
VM[uuid\:%s]\ state\ is\ not\ Running. = VM[uuid:{0}] state is not Running.

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:4837
# args: isoUuid,psUuid,self.getName(),self.getUuid()
the\ ISO[uuid\:%s]\ is\ on\ backup\ storage\ that\ is\ not\ compatible\ of\ the\ primary\ storage[uuid\:%s]\ where\ the\ VM[name\:%s,\ uuid\:%s]\ is\ on = the ISO[uuid:{0}] is on backup storage that is not compatible of the primary storage[uuid:{1}] where the VM[name:{2}, uuid:{3}] is on

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:5325
# args: self.getHostUuid(),cpuNum - oldCpuNum,struct.alignedMemory - oldMemorySize
host[uuid\:%s]\ capacity\ is\ not\ enough\ to\ offer\ cpu[%s],\ memory[%s\ bytes] = host[uuid:{0}] capacity is not enough to offer cpu[{1}], memory[{2} bytes]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:5633
# args: isoUuid,self.getUuid()
ISO[uuid\:%s]\ is\ not\ attached\ to\ VM[uuid\:%s] = ISO[uuid:{0}] is not attached to VM[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:7168
# args: cdRomSpecs.size(),max
One\ vm\ cannot\ create\ %s\ CDROMs,\ vm\ can\ only\ add\ %s\ CDROMs = One vm cannot create {0} CDROMs, vm can only add {1} CDROMs

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:8150
# args: msg.getVmInstanceUuid(),max
VM[uuid\:%s]\ can\ only\ add\ %s\ CDROMs = VM[uuid:{0}] can only add {1} CDROMs

# at: src/main/java/org/zstack/compute/vm/VmInstanceBase.java:8219
# args: self.getUuid(),msg.getPriority(),reply.getError()
update\ vm[%s]\ priority\ to\ [%s]\ failed,because\ %s = update vm[{0}] priority to [{1}] failed,because {2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:65
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartNewCreatedVmExtensionPoint[%s]\ refuses\ to\ create\ vm[uuid\:%s]\ because\ %s = VmInstanceStartNewCreatedVmExtensionPoint[{0}] refuses to create vm[uuid:{1}] because {2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:192
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceRebootExtensionPoint[%s]\ refuses\ to\ reboot\ vm[uuid\:%s]\ because\ %s = VmInstanceRebootExtensionPoint[{0}] refuses to reboot vm[uuid:{1}] because {2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:234
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceDestroyVmExtensionPoint[%s]\ refuses\ to\ destroy\ vm[uuid\:%s]\ because\ %s = VmInstanceDestroyVmExtensionPoint[{0}] refuses to destroy vm[uuid:{1}] because {2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceExtensionPointEmitter.java:284
# args: ext.getClass().getName(),inv.getUuid(),err
VmInstanceStartExtensionPoint[%s]\ refuses\ to\ start\ vm[uuid\:%s]\ because\ %s = VmInstanceStartExtensionPoint[{0}] refuses to start vm[uuid:{1}] because {2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1136
# args: msg.getName()
could\ not\ create\ vm,\ a\ vm\ with\ the\ name\ [%s]\ already\ exists = could not create vm, a vm with the name [{0}] already exists

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2245
# args: 
rootDiskOfferingUuid\ cannot\ be\ null\ when\ create\ vm\ without\ image = rootDiskOfferingUuid cannot be null when create vm without image

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:308
# args: 
Spice\ certificate\ does\ not\ exist,\ Please\ check\ if\ spice\ tls\ is\ enabled = Spice certificate does not exist, Please check if spice tls is enabled

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:492
# args: msg.getImageUuid(),msg.getZoneUuid()
the\ image[uuid\:%s]\ is\ not\ on\ any\ backup\ storage\ that\ has\ been\ attached\ to\ the\ zone[uuid\:%s] = the image[uuid:{0}] is not on any backup storage that has been attached to the zone[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:565
# args: bss.get(0).getUuid(),bss.get(0).getType()
no\ primary\ storage\ accessible\ to\ the\ backup\ storage[uuid\:%s,\ type\:%s]\ is\ found = no primary storage accessible to the backup storage[uuid:{0}, type:{1}] is found

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:586
# args: psUuids,zoneUuid
the\ primary\ storages[uuids\:%s]\ has\ not\ attached\ any\ cluster\ on\ the\ zone[uuid\:%s] = the primary storages[uuids:{0}] has not attached any cluster on the zone[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:605
# args: psUuids
no\ l2Networks\ found\ in\ clusters\ that\ have\ attached\ to\ primary\ storages[uuids\:%s] = no l2Networks found in clusters that have attached to primary storages[uuids:{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:672
# args: image.getName(),image.getUuid()
zoneUuid\ must\ be\ set\ because\ the\ image[name\:%s,\ uuid\:%s]\ is\ on\ multiple\ backup\ storage = zoneUuid must be set because the image[name:{0}, uuid:{1}] is on multiple backup storage

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1067
# args: 
CreateVmInstanceMsg\ cannot\ be\ null = CreateVmInstanceMsg cannot be null

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1158
# args: StringUtils.join(errorCodes.stream().map(ErrorCode::getDescription).collect(Collectors.toList()), ", ")
handle\ system\ tag\ fail\ when\ creating\ vm\ because\ [%s] = handle system tag fail when creating vm because [{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1589
# args: tuple.get(0, String.class),tuple.get(1, String.class)
unable\ to\ enable\ this\ function.\ There\ are\ multi\ nics\ of\ L3\ network[uuid\:%s]\ in\ the\ vm[uuid\:\ %s] = unable to enable this function. There are multi nics of L3 network[uuid:{0}] in the vm[uuid: {1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1623
# args: hostname,tag
hostname[%s]\ specified\ in\ system\ tag[%s]\ is\ not\ a\ valid\ domain\ name = hostname[{0}] specified in system tag[{1}] is not a valid domain name

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1635
# args: hostnameCount
only\ one\ hostname\ system\ tag\ is\ allowed,\ but\ %s\ got = only one hostname system tag is allowed, but {0} got

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1660
# args: ip,sysTag
%s\ is\ not\ a\ valid\ ip\ address.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = {0} is not a valid ip address. Please correct your system tag[{1}] of static IP

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1666
# args: ip,l3Uuid,sysTag
IP[%s]\ is\ already\ used\ on\ the\ L3\ network[uuid\:%s].\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = IP[{0}] is already used on the L3 network[uuid:{1}]. Please correct your system tag[{2}] of static IP

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1683
# args: ip,l3Uuid,cr.getReason()
IP[%s]\ is\ not\ available\ on\ the\ L3\ network[uuid\:%s]\ because\:\ %s = IP[{0}] is not available on the L3 network[uuid:{1}] because: {2}

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1706
# args: tag,sameTag.getResourceUuid(),hostname,l3Uuid
conflict\ hostname\ in\ system\ tag[%s];\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = conflict hostname in system tag[{0}]; there has been a VM[uuid:{1}] having hostname[{2}] on L3 network[uuid:{3}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1737
# args: o,order
invalid\ boot\ device[%s]\ in\ boot\ order[%s] = invalid boot device[{0}] in boot order[{1}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1753
# args: 
cpuSockets\ must\ be\ an\ integer = cpuSockets must be an integer

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1762
# args: 
cpuCores\ must\ be\ an\ integer = cpuCores must be an integer

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1771
# args: 
cpuThreads\ must\ be\ an\ integer = cpuThreads must be an integer

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1782
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ vm[uuid\:\ %s]. = Already have one userdata systemTag for vm[uuid: {0}].

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1808
# args: 
Shouldn't\ be\ more\ than\ one\ userdata\ systemTag\ for\ one\ vm. = Shouldn't be more than one userdata systemTag for one vm.

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1932
# args: type
vm\ machine\ type\ requires\ [q35,\ pc,\ virt],\ but\ get\ [%s] = vm machine type requires [q35, pc, virt], but get [{0}]

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1992
# args: systemTag,SecurityElementEnableTokenByTag
invalid\ securityElementEnable[%s],\ %s\ is\ not\ securityElementEnable\ tag = invalid securityElementEnable[{0}], {1} is not securityElementEnable tag

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:1995
# args: systemTag,SecurityElementEnableTokenByTag
invalid\ securityElementEnable[%s],\ %s\ is\ not\ boolean\ class = invalid securityElementEnable[{0}], {1} is not boolean class

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2022
# args: systemTag,usbRedirectTokenByTag
invalid\ usbRedirect[%s],\ %s\ is\ not\ usbRedirect\ tag = invalid usbRedirect[{0}], {1} is not usbRedirect tag

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2025
# args: systemTag,usbRedirectTokenByTag
invalid\ usbRedirect[%s],\ %s\ is\ not\ boolean\ class = invalid usbRedirect[{0}], {1} is not boolean class

# at: src/main/java/org/zstack/compute/vm/VmInstanceManagerImpl.java:2561
# args: ref.getResourceUuid()
the\ resource[uuid\:%s]\ is\ a\ ROOT\ volume,\ you\ cannot\ change\ its\ owner,\ instead,change\ the\ owner\ of\ the\ VM\ the\ root\ volume\ belongs\ to = the resource[uuid:{0}] is a ROOT volume, you cannot change its owner, instead,change the owner of the VM the root volume belongs to

# at: src/main/java/org/zstack/compute/vm/VmInstantiateAttachingVolumeFlow.java:54
# args: spec.getDestHost().getUuid(),pinv.getUuid()
Failed\ to\ instantiate\ volume.\ Because\ vm's\ host[uuid\:\ %s]\ and\ allocated\ primary\ storage[uuid\:\ %s]\ is\ not\ connected. = Failed to instantiate volume. Because vm's host[uuid: {0}] and allocated primary storage[uuid: {1}] is not connected.

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:211
# args: msg.getMac()
Duplicate\ mac\ address\ [%s] = Duplicate mac address [{0}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:221
# args: vmType
clean\ traffic\ is\ not\ supported\ for\ vm\ type\ [%s] = clean traffic is not supported for vm type [{0}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:100
# args: KVMGlobalConfig.MAX_DATA_VOLUME_NUM.value(int.class)
The\ number\ of\ data\ volumes\ exceeds\ the\ limit[num\:\ %s],\ please\ reduce\ the\ number\ of\ data\ volumes\ during\ vm\ creation. = The number of data volumes exceeds the limit[num: {0}], please reduce the number of data volumes during vm creation.

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:130
# args: VmInstanceState.Stopped,msg.getVmInstanceUuid()
Can\ not\ set\ security\ level\ to\ not\ %s\ vm\ [uuid\:%s] = Can not set security level to not {0} vm [uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:147
# args: 
The\ operation\ only\ allows\ on\ user\ vm = The operation only allows on user vm

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:177
# args: msg.getVmInstanceUuid(),volumeVOS.stream().map(VolumeVO::getUuid).collect(Collectors.toList()),primaryStorageUuid,(totalCapacity - snapshotsCapacity) * msg.getNames().size(),primaryStorageVO.getCapacity().getAvailableCapacity()
there\ are\ not\ enough\ capacity\ for\ full\ vm\ clone\ to\ vm[uuid\:\ %s],\ volumes[uuid\:\ %s]\ on\ primary\ storage[uuid\:\ %s]\ required\:\ %s\ bytes,\ current\ available\ capacity\ is\ %s\ bytes = there are not enough capacity for full vm clone to vm[uuid: {0}], volumes[uuid: {1}] on primary storage[uuid: {2}] required: {3} bytes, current available capacity is {4} bytes

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:191
# args: msg.getVmNicUuid()
The\ nic\ [%s%s]\ is\ not\ mounted\ on\ the\ VM = The nic [{0}{1}] is not mounted on the VM

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:197
# args: 
The\ operation\ only\ allows\ on\ user\ vm\  = The operation only allows on user vm 

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:202
# args: vmInstanceVO.getUuid()
The\ operation\ only\ allows\ when\ vm\ [%s]\ state\ is\ stopped\  = The operation only allows when vm [{0}] state is stopped 

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:231
# args: msg.getVmInstanceUuid()
user\ has\ no\ privilege\ to\ change\ image\ of\ vm\ %s = user has no privilege to change image of vm {0}

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:243
# args: 
do\ not\ change\ vm\ image\ when\ it's\ not\ stopped = do not change vm image when it's not stopped

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:260
# args: msg.getVmInstanceUuid()
make\ sure\ the\ primary\ storage\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = make sure the primary storage vm[uuid:{0}] was on is Enabled and Connected

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:275
# args: msg.getVmInstanceUuid()
make\ sure\ the\ last\ host\ vm[uuid\:%s]\ was\ on\ is\ Enabled\ and\ Connected = make sure the last host vm[uuid:{0}] was on is Enabled and Connected

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:285
# args: msg.getVmInstanceUuid()
vm[uuid\:%s]\ has\ no\ default\ l3,\ cannot\ change\ image\ for\ it = vm[uuid:{0}] has no default l3, cannot change image for it

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:305
# args: msg.getVmInstanceUuid(),msg.getImageUuid()
instance[uuid\:%s]\ cannot\ be\ changed\ image\ to\ image[uuid\:%s] = instance[uuid:{0}] cannot be changed image to image[uuid:{1}]

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:314
# args: 
either\ uuid\ or\ account\ or\ password\ must\ be\ set = either uuid or account or password must be set

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:327
# args: msg.getDirection()
direction\ must\ be\ set\ in\ (in,\ out),\ but\ was\ %s = direction must be set in (in, out), but was {0}

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:333
# args: 
Monitor\ number\ must\ be\ 1\ or\ 2\ or\ 4. = Monitor number must be 1 or 2 or 4.

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:341
# args: 
outboundBandwidth\ and\ inboundBandwidth\ must\ be\ set\ at\ lease\ one. = outboundBandwidth and inboundBandwidth must be set at lease one.

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:350
# args: 
the\ nic\ can't\ apply\ Qos\ with\ the\ port\ mirror\ service\ at\ same\ time. = the nic can't apply Qos with the port mirror service at same time.

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:359
# args: msg.getUuid()
nic\ id\:\ %s\ does\ not\ exist... = nic id: {0} does not exist...

# at: src/main/java/org/zstack/compute/vm/VmMevocoApiInterceptor.java:370
# args: 
The\ 'uuids'\ parameter\ must\ belong\ to\ the\ VmInstanceVO\ or\ HostVO = The 'uuids' parameter must belong to the VmInstanceVO or HostVO

# at: src/main/java/org/zstack/compute/vm/VmNicManagerImpl.java:261
# args: state,VmInstanceState.Stopped
vm\ current\ state[%s],\ modify\ virtio\ requires\ the\ vm\ state[%s] = vm current state[{0}], modify virtio requires the vm state[{1}]

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:111
# args: 
wrong\ format\ of\ password\ strength\ config = wrong format of password strength config

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:114
# args: 
minimum\ can\ not\ be\ larger\ than\ maximum = minimum can not be larger than maximum

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:74
# args: minimum,maximum
password\ length\ must\ be\ [%s-%s] = password length must be [{0}-{1}]

# at: src/main/java/org/zstack/compute/vm/VmPasswordStrengthConfig.java:93
# args: 
password\ does\ not\ match\ numbers,\ uppercase\ and\ lowercase,\ and\ special\ character\ combinations = password does not match numbers, uppercase and lowercase, and special character combinations

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:117
# args: resourceUuid,vmInstanceUuid
missing\ parameter,\ resourceUuid\:\ %s,\ vmInstanceUuid\:\ %s\ is\ requested = missing parameter, resourceUuid: {0}, vmInstanceUuid: {1} is requested

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:153
# args: vmInstanceUuid
missing\ parameter,\ vmInstanceUuid\:\ %s\ is\ requested = missing parameter, vmInstanceUuid: {0} is requested

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:334
# args: vmInstanceUuid
cannot\ find\ vm\ with\ uuid\:\ %s = cannot find vm with uuid: {0}

# at: src/main/java/org/zstack/compute/vm/devices/VmInstanceDeviceManagerImpl.java:338
# args: resourceUuid
cannot\ find\ vm\ device\ with\ uuid\:\ %s = cannot find vm device with uuid: {0}

# at: src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java:38
# args: vmUuid,hostUuid
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\ host[%s]\ not\ have\ numa\ node = vm[{0}] start fail,because numa is enable but host[{1}] not have numa node

# at: src/main/java/org/zstack/compute/vm/numa/CommonVmNumaBasicFactory.java:41
# args: vmUuid
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\ cpu\ not\ pin = vm[{0}] start fail,because numa is enable but cpu not pin

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:45
# args: 
hot\ plug\ not\ close = hot plug not close

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:49
# args: 
vm\ cpu\ not\ all\ pinning = vm cpu not all pinning

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:53
# args: entry.getKey().toString()
cpu[%s]\ not\ pin\ in\ a\ same\ host\ numa\ node = cpu[{0}] not pin in a same host numa node

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaCpuPinInventory.java:57
# args: vmUuid,String.join(VmNumaConstant.RULES_SEPARATOR, errors)
vm[%s]\ start\ fail,because\ numa\ is\ enable\ but\:\ %s = vm[{0}] start fail,because numa is enable but: {1}

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaFilterFlow.java:52
# args: 
No\ host\ is\ available\ to\ create\ vm\ Instance.Because\ vNuma\ vms\ need\ to\ be\ created\ on\ hosts\ with\ same\ numa,\ but\ no\ hosts\ is\ available\ after\ filter\ primary\ vm's\ host = No host is available to create vm Instance.Because vNuma vms need to be created on hosts with same numa, but no hosts is available after filter primary vm's host

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaManagerImpl.java:92
# args: 
fail\ to\ set\ vm\ numa,\ incorrect\ input\ format,only\ accept\ true\ or\ false = fail to set vm numa, incorrect input format,only accept true or false

# at: src/main/java/org/zstack/compute/vm/numa/VmNumaUtils.java:46
# args: word
invalid\ cpu\ set\ [%s] = invalid cpu set [{0}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:98
# args: msg.getHostUuid(),refVO.getHostGroupUuid()
the\ host[uuid\:%s]\ already\ attached\ to\ host\ scheduling\ group[uuid\:%s] = the host[uuid:{0}] already attached to host scheduling group[uuid:{1}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:107
# args: 
host\ clusterUuid\ is\ null = host clusterUuid is null

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:111
# args: 
hosts\ that\ you\ can\ add\ to\ a\ host\ scheduling\ group\ must\ be\ enabled\ and\ connected\ to\ the\ MN. = hosts that you can add to a host scheduling group must be enabled and connected to the MN.

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:117
# args: hostVO.getUuid(),hostVO.getZoneUuid(),hostGroup.getUuid(),hostGroup.getZoneUuid()
unmatched\ zone\ detected,\ host[uuid\:\ %s,\ zone\ uuid\:\ %s]'s\ zone\ is\ different\ from\ host\ sheduling\ rule\ group[uuid\:\ %s,\ zone\ uuid\:\ %s] = unmatched zone detected, host[uuid: {0}, zone uuid: {1}]'s zone is different from host sheduling rule group[uuid: {2}, zone uuid: {3}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:132
# args: msg.getVmUuid(),refVO.getVmGroupUuid()
vm[uuid\:%s]\ already\ attached\ to\ vm\ scheduling\ group[uuid\:%s] = vm[uuid:{0}] already attached to vm scheduling group[uuid:{1}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:145
# args: vm.getUuid(),vm.getZoneUuid(),groupVO.getUuid(),groupVO.getZoneUuid()
unmatched\ zone\ detected,\ vm[uuid\:\ %s,\ zone\ uuid\:\ %s]'s\ zone\ is\ different\ from\ vm\ sheduling\ rule\ group[uuid\:\ %s,\ zone\ uuid\:\ %s] = unmatched zone detected, vm[uuid: {0}, zone uuid: {1}]'s zone is different from vm sheduling rule group[uuid: {2}, zone uuid: {3}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:161
# args: VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString(),vm.getState().toString()
vm\ can\ change\ its\ vm\ scheduling\ group\ only\ in\ state\ [%s,%s],\ but\ vm\ is\ in\ state\ [%s] = vm can change its vm scheduling group only in state [{0},{1}], but vm is in state [{2}]

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:171
# args: 
cannot\ operate\ vpc\ vm\ scheduling\ group = cannot operate vpc vm scheduling group

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:209
# args: 
zoneUuid\ is\ not\ null = zoneUuid is not null

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleApiInterceptor.java:399
# args: 
the\ vm\ scheduling\ group[uuid\:%s]\ has\ already\ had\ a\ executed\ exclusive\ vm\ or\ affinitive\ vm\ scheduling\ policy\ attached.\ you\ cannot\ attach\ either\ of\ the\ two\ scheduling\ policies\ that\ require\ execution\ to\ the\ group\ again = the vm scheduling group[uuid:{0}] has already had a executed exclusive vm or affinitive vm scheduling policy attached. you cannot attach either of the two scheduling policies that require execution to the group again

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleFilterFlow.java:132
# args: 
can\ not\ satisfied\ vm\ scheduling\ rule\ group\ conditions = can not satisfied vm scheduling rule group conditions

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:158
# args: self.getUuid(),host.getUuid(),vmUuid
vm\ scheduling\ group[uuid\:%s]\ reserve\ host\ [uuid\:%s]\ for\ vm\ [uuid\:\ %s]\ failed = vm scheduling group[uuid:{0}] reserve host [uuid:{1}] for vm [uuid: {2}] failed

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:392
# args: vmInv.getUuid(),hostUuid,refVO.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],which\ does\ not\ comply\ with\ the\ scheduling\ rule\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = vm[uuid:{0}] is now running on host[uuid:{1}],which does not comply with the scheduling rule associated with vm scheduling group[uuid:{2}].

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:402
# args: msg.getVmGroupUuid()
hostGroup[uuid\:%s]\ is\ no\ host = hostGroup[uuid:{0}] is no host

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:407
# args: msg.getVmUuid(),hostUuid,VMSchedulingRuleType.AFFINITY.toString(),msg.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],\ which\ does\ not\ comply\ with\ the\ scheduling\ rule[%s]\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = vm[uuid:{0}] is now running on host[uuid:{1}], which does not comply with the scheduling rule[{2}] associated with vm scheduling group[uuid:{3}].

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleGroupBase.java:414
# args: msg.getVmUuid(),hostUuid,VMSchedulingRuleType.ANTIAFFINITY.toString(),msg.getVmGroupUuid()
vm[uuid\:%s]\ is\ now\ running\ on\ host[uuid\:%s],which\ does\ not\ comply\ with\ the\ scheduling\ rule[%s]\ associated\ with\ vm\ scheduling\ group[uuid\:%s]. = vm[uuid:{0}] is now running on host[uuid:{1}],which does not comply with the scheduling rule[{2}] associated with vm scheduling group[uuid:{3}].

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:82
# args: msg.getHostGroupUuid()
cannot\ find\ the\ host\ scheduling\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the host scheduling group[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:95
# args: msg.getVmSchedulingRuleUuid()
cannot\ find\ the\ vm\ scheduling\ rule[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the vm scheduling rule[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/compute/vmscheduling/VmSchedulingRuleManagerImpl.java:108
# args: msg.getVmSchedulingRuleGroupUuid()
cannot\ find\ the\ vm\ scheduling\ group[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the vm scheduling group[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:86
# args: msg.getAllocatorStrategy()
unsupported\ host\ allocation\ strategy[%s] = unsupported host allocation strategy[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:72
# args: msg.getType()
unsupported\ instance\ offering\ type[%s] = unsupported instance offering type[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:76
# args: msg.getCpuNum()
cpu\ num[%s]\ is\ less\ than\ 1 = cpu num[{0}] is less than 1

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:80
# args: msg.getMemorySize()
memory\ size[%s\ bytes]\ is\ less\ than\ 16M,\ no\ modern\ operating\ system\ is\ likely\ able\ to\ boot\ with\ such\ small\ memory\ size = memory size[{0} bytes] is less than 16M, no modern operating system is likely able to boot with such small memory size

# at: src/main/java/org/zstack/configuration/ConfigurationApiInterceptor.java:92
# args: msg.getAllocationStrategy()
unsupported\ primary\ storage\ allocation\ strategy[%s] = unsupported primary storage allocation strategy[{0}]

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1043
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ instanceOffering[uuid\:\ %s]. = Already have one userdata systemTag for instanceOffering[uuid: {0}].

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1108
# args: 
Shouldn't\ be\ more\ than\ one\ systemTag\ for\ one\ instanceOffering. = Shouldn't be more than one systemTag for one instanceOffering.

# at: src/main/java/org/zstack/configuration/ConfigurationManagerImpl.java:1085
# args: resourceUuid
Already\ have\ one\ userdata\ systemTag\ for\ diskOffering[uuid\:\ %s]. = Already have one userdata systemTag for diskOffering[uuid: {0}].

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:104
# args: 
the\ console\ agent\ is\ not\ connected;\ it's\ mostly\ like\ the\ management\ node\ just\ starts,\ please\ wait\ for\ the\ console\ agent\ connected,\ or\ you\ can\ reconnect\ it\ manually\ if\ disconnected\ for\ a\ long\ time. = the console agent is not connected; it's mostly like the management node just starts, please wait for the console agent connected, or you can reconnect it manually if disconnected for a long time.

# at: src/main/java/org/zstack/console/AbstractConsoleProxyBackend.java:125
# args: vm.getUuid()
cannot\ find\ host\ IP\ of\ the\ vm[uuid\:%s],\ is\ the\ vm\ running??? = cannot find host IP of the vm[uuid:{0}], is the vm running???

# at: src/main/java/org/zstack/console/ConsoleApiInterceptor.java:49
# args: msg.getVmInstanceUuid(),state
Console\ is\ only\ available\ when\ the\ VM[uuid\:%s]\ is\ Running\ or\ Crashed,\ but\ the\ current\ state\ is\ %s = Console is only available when the VM[uuid:{0}] is Running or Crashed, but the current state is {1}

# at: src/main/java/org/zstack/console/ConsoleProxyBase.java:133
# args: uri.toString()
establish\ VNC\:\ unexpected\ uri\:\ %s = establish VNC: unexpected uri: {0}

# at: src/main/java/org/zstack/console/ConsoleProxyBase.java:198
# args: ret.getError()
unable\ to\ check\ console\ proxy\ availability,\ because\ %s = unable to check console proxy availability, because {0}

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:189
# args: 
Ansible\ private\ key\ not\ found. = Ansible private key not found.

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:387
# args: uuid
invalid\ management\ node\ uuid[%s] = invalid management node uuid[{0}]

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:520
# args: 
failed\ to\ configure\ consoleProxyOverriddenIp[code\:%d]\ or\ consoleProxyPort[code\:%d] = failed to configure consoleProxyOverriddenIp[code:{0}] or consoleProxyPort[code:{1}]

# at: src/main/java/org/zstack/console/ManagementServerConsoleProxyBackend.java:543
# args: 
failed\ to\ reconnect\ console\ proxy = failed to reconnect console proxy

# at: src/main/java/org/zstack/core/ansible/AnsibleRunner.java:426
# args: 
User\ name\ or\ password\ or\ port\ number\ may\ be\ problematic = User name or password or port number may be problematic

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:106
# args: srcFolder,srcRes.getStdout(),srcRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s].\nstdout\:%s\nstderr\:%s = cannot check md5sum of files in the folder[{0}].\nstdout:{1}\nstderr:{2}

# at: src/main/java/org/zstack/core/ansible/SshFolderMd5Checker.java:121
# args: dstFolder,hostname,dstRes.getStdout(),dstRes.getStderr()
cannot\ check\ md5sum\ of\ files\ in\ the\ folder[%s]\ on\ the\ host[ip\:%s].\nstdout\:%s\nstderr\:%s = cannot check md5sum of files in the folder[{0}] on the host[ip:{1}].\nstdout:{2}\nstderr:{3}

# at: src/main/java/org/zstack/core/cloudbus/CloudBusImpl2.java:684
# args: errMsg
message\ is\ not\ in\ corrected\ JSON\ mediaType,\ %s = message is not in corrected JSON mediaType, {0}

# at: src/main/java/org/zstack/core/cloudbus/EventFacadeImpl.java:69
# args: EventFacade.WEBHOOK_TYPE
for\ webhooks\ with\ type[%s],\ the\ field\ opaque\ cannot\ be\ null = for webhooks with type[{0}], the field opaque cannot be null

# at: src/main/java/org/zstack/core/config/GlobalConfig.java:430
# args: 
do\ not\ allow\ skip\ verification = do not allow skip verification

# at: src/main/java/org/zstack/core/config/GlobalConfigFacadeImpl.java:118
# args: msg.getCategory(),msg.getName()
Unable\ to\ find\ GlobalConfig[category\:\ %s,\ name\:\ %s] = Unable to find GlobalConfig[category: {0}, name: {1}]

# at: src/main/java/org/zstack/core/debug/DebugManagerImpl.java:93
# args: 
taskInfo\ was\ not\ found = taskInfo was not found

# at: src/main/java/org/zstack/core/encrypt/EncryptFacadeImpl.java:204
# args: encrypt.error
Encryption\ error\ \:\ %s = Encryption error : {0}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:71
# args: 
non\ file\ or\ jsoncontent\ input = non file or jsoncontent input

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:76
# args: 
file\ or\ jsoncontent\ cannot\ both\ nonempty = file or jsoncontent cannot both nonempty

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:108
# args: e.getMessage()
Unable\ to\ scan\ folder\:\ %s = Unable to scan folder: {0}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:112
# args: filename
%s\ is\ not\ existed\ or\ is\ empty\ folder = {0} is not existed or is empty folder

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:249
# args: 
elaboration\ code\ must\ be\ number! = elaboration code must be number!

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:318
# args: returnValue.get(0).getContent(),returnValue.get(0).getReason()
%s\:\ %s = {0}: {1}

# at: src/main/java/org/zstack/core/errorcode/ElaborationManagerImpl.java:415
# args: 
input\ args\ 'regex'\ or\ 'category'\ must\ be\ set = input args 'regex' or 'category' must be set

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:32
# args: service.getName()
service[%s]\ has\ been\ registered = service[{0}] has been registered

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:93
# args: msg.getName()
service[%s]\ is\ not\ registered = service[{0}] is not registered

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:99
# args: msg.getName()
service[%s]\ does\ not\ support\ reload\ config = service[{0}] does not support reload config

# at: src/main/java/org/zstack/core/externalservice/ExternalServiceManagerImpl.java:105
# args: msg.getName()
service[%s]\ is\ not\ running = service[{0}] is not running

# at: src/main/java/org/zstack/core/gc/GarbageCollectorManagerImpl.java:315
# args: vo.getUuid(),vo.getName()
cannot\ trigger\ a\ finished\ GC\ job[uuid\:%s,\ name\:%s] = cannot trigger a finished GC job[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/core/progress/ProgressApiInterceptor.java:38
# args: msg.getApiId()
parameter\ apiId[%s]\ is\ not\ a\ valid\ uuid. = parameter apiId[{0}] is not a valid uuid.

# at: src/main/java/org/zstack/core/rest/RESTFacadeImpl.java:656
# args: url,finalTimeout
unable\ to\ echo\ %s\ in\ %sms = unable to echo {0} in {1}ms

# at: src/main/java/org/zstack/core/retry/Retry.java:103
# args: __name__,times,interval
an\ operation[%s]\ fails\ after\ retrying\ %s\ times\ with\ the\ interval\ %s\ seconds = an operation[{0}] fails after retrying {1} times with the interval {2} seconds

# at: src/main/java/org/zstack/core/salt/SaltRunner.java:297
# args: stateName,targetIp,retry
failed\ to\ run\ salt\ state[%s]\ on\ system[%s],\ failed\ after\ %s\ retries = failed to run salt state[{0}] on system[{1}], failed after {2} retries

# at: src/main/java/org/zstack/core/salt/SaltSetupMinionJob.java:84
# args: targetIp
scp\ is\ not\ found\ on\ system[%s],\ unable\ to\ setup\ salt = scp is not found on system[{0}], unable to setup salt

# at: src/main/java/org/zstack/core/timeout/ApiTimeoutManagerImpl.java:76
# args: ApiTimeoutGlobalProperty.MINIMAL_TIMEOUT
api\ timeout\ cannot\ be\ set\ smaller\ than\ %s = api timeout cannot be set smaller than {0}

# at: src/main/java/org/zstack/core/webhook/WebhookApiInterceptor.java:28
# args: url
Invalid\ url[%s] = Invalid url[{0}]

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:72
# args: 
the\ identity\ authentication\ does\ not\ specify\ the\ resource\ pool\ to\ provide\ the\ service = the identity authentication does not specify the resource pool to provide the service

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:83
# args: setting.resourcePoolType,model
wrong\ secret\ resource\ pool\ model,\ expect\ %s,\ actual\ %s = wrong secret resource pool model, expect {0}, actual {1}

# at: src/main/java/org/zstack/crypto/auth/AbstractCryptoAuthenticationFacade.java:81
# args: resourceUuid
failed\ to\ find\ model\ for\ secretResourcePool\ [%s] = failed to find model for secretResourcePool [{0}]

# at: src/main/java/org/zstack/crypto/auth/CryptoAuthenticationHelper.java:121
# args: 
failed\ to\ find\ certificate\ info = failed to find certificate info

# at: src/main/java/org/zstack/crypto/auth/CryptoEncryptionParamParser.java:57
# args: plainText,e.getMessage()
failed\ to\ parse\ plain\ text\ in\ encryption\ param\ to\ json\ object\:\ %s,\ %s = failed to parse plain text in encryption param to json object: {0}, {1}

# at: src/main/java/org/zstack/crypto/auth/UKeyCryptoAuthenticationFacade.java:73
# args: 
operation\ not\ supported = operation not supported

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java:200
# args: userUuid
user[uuid\=%s]\ not\ found = user[uuid={0}] not found

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateInterceptor.java:204
# args: 
certificate\ uuid\ is\ empty\ and\ UKey\ system\ tag\ does\ not\ exist = certificate uuid is empty and UKey system tag does not exist

# at: src/main/java/org/zstack/crypto/ccs/CCSCertificateManagerImpl.java:217
# args: msg.getCertificateUuid()
certificate[uuid\=%s]\ not\ found = certificate[uuid={0}] not found

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:47
# args: msg.getResourceType()
check\ batch\ data\ integrity\ fail,\ unsupported\ resourceType\:\ %s = check batch data integrity fail, unsupported resourceType: {0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:57
# args: msg.getResourceType()
add\ integrity\ resource\ fail,\ unsupported\ resourceType\:\ %s = add integrity resource fail, unsupported resourceType: {0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoInterceptor.java:65
# args: msg.getEncryptType()
start\ data\ protection\ encryptType[%s]\ is\ error = start data protection encryptType[{0}] is error

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:240
# args: inventory.getUuid()
the\ snapshot[uuid\:%s]\ is\ not\ encrypted = the snapshot[uuid:{0}] is not encrypted

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:249
# args: inventory.getUuid()
verify\ volume\ snapshot[%s]\ consistency\ failed = verify volume snapshot[{0}] consistency failed

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:311
# args: inventory.getId(),exception.getMessage()
encryption\ image\ cache[id\:%s]\ error\:\ %s = encryption image cache[id:{0}] error: {1}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:375
# args: inventory.getId()
the\ image\ cache[id\:%s]\ is\ not\ encrypted = the image cache[id:{0}] is not encrypted

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:388
# args: inventory.getId()
verify\ image\ cache[%s]\ consistency\ failed = verify image cache[{0}] consistency failed

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:668
# args: msg.getNodeType(),msg.getPath()
nodeType\ %s\ integrity\ file[path\:%s]\ already\ exists = nodeType {0} integrity file[path:{1}] already exists

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:682
# args: msg.getNodeType()
invalid\ nodeType[%s] = invalid nodeType[{0}]

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:694
# args: msg.getNodeType(),msg.getPath()
filed\ to\ add\ integrity\ file[%s.%s],\ it's\ a\ directory\ now. = filed to add integrity file[{0}.{1}], it's a directory now.

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:699
# args: msg.getNodeType(),msg.getPath()
integrity\ file[%s.%s]\ is\ not\ exists = integrity file[{0}.{1}] is not exists

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:716
# args: msg.getNodeUuid()
host\ %s\ is\ not\ exists = host {0} is not exists

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:724
# args: res.getStderr()
Shell\ fail,\ because\ %s = Shell fail, because {0}

# at: src/main/java/org/zstack/crypto/datacrypto/CryptoManagerImpl.java:747
# args: msg.getNodeType(),msg.getPath(),exception.getMessage()
add\ integrity\ file[%s.%s]\ fail,\ because\ %s = add integrity file[{0}.{1}] fail, because {2}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/EncryptColumnIntegrityFactory.java:141
# args: 
unsupported\ operation\ for\ EncryptColumnIntegrityFactory = unsupported operation for EncryptColumnIntegrityFactory

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:138
# args: encrypt.error
virtualID\ attribute\ encryption\ error,\ because\:%s = virtualID attribute encryption error, because:{0}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:187
# args: resourceUuid
IAM2VirtualIDAttributeVO\ %s\ does\ not\ exists = IAM2VirtualIDAttributeVO {0} does not exists

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/IAM2VirtualIDAttributeIntegrityFactory.java:194
# args: encrypt.error
virtualID\ attribute\ check\ error,\ because\:%s = virtualID attribute check error, because:{0}

# at: src/main/java/org/zstack/crypto/datacrypto/integrity/RolePolicyIntegrityFactory.java:115
# args: encrypt.error
rolePolicy\ encryption\ error,\ because\:%s = rolePolicy encryption error, because:{0}

# at: src/main/java/org/zstack/crypto/datacrypto/smp/SMPCryptoBase.java:40
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters = the shared mount point primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters

# at: src/main/java/org/zstack/crypto/securitymachine/AttachVerifyPair.java:26
# args: 
originText\ or\ certificateText\ can\ not\ be\ null = originText or certificateText can not be null

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:60
# args: msg.getSecurityMachineUuid()
the\ security\ machine\ [%s]\ does\ not\ exist = the security machine [{0}] does not exist

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:86
# args: msg.getManagementIp()
managementIp[%s]\ is\ not\ in\ IPV4\ format = managementIp[{0}] is not in IPV4 format

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:92
# args: msg.getName(),msg.getManagementIp(),error
failed\ to\ connect\ to\ the\ security\ machine\ %s[%s],\ because\ %s = failed to connect to the security machine {0}[{1}], because {2}

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:112
# args: msg.getSecurityMachineUuid()
after\ the\ crypto\ function\ is\ enabled,\ at\ least\ one\ security\ machine\ should\ be\ reserved\ in\ the\ corresponding\ resource\ pool = after the crypto function is enabled, at least one security machine should be reserved in the corresponding resource pool

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:123
# args: msg.getAlgType(),StringUtils.join(EncryptType.values(), ',')
invalid\ algType\ %s,\ supported\ types\:\ %s. = invalid algType {0}, supported types: {1}.

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineApiInterceptor.java:127
# args: poolForProtect
the\ resource\ pool[%s]\ specified\ by\ data\ protection\ does\ not\ exist = the resource pool[{0}] specified by data protection does not exist

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:145
# args: 
cannot\ be\ deleted.\ after\ the\ encryption\ function\ is\ enabled,\ the\ number\ of\ synced\ security\ machines\ in\ the\ resource\ pool\ that\ provides\ the\ service\ is\ at\ least\ 1 = cannot be deleted. after the encryption function is enabled, the number of synced security machines in the resource pool that provides the service is at least 1

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:444
# args: 
securityMachine\ is\ disabled,\ failed\ to\ detect\ heartbeat = securityMachine is disabled, failed to detect heartbeat

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineBase.java:584
# args: 
an\ other\ connect\ security\ machine\ task\ is\ running,\ cancel\ the\ new\ task\ and\ wait\ return = an other connect security machine task is running, cancel the new task and wait return

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:183
# args: data,algType
encrypt\ data[%s]\ or\ algType[%s]\ is\ null = encrypt data[{0}] or algType[{1}] is null

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:165
# args: resourceUuid
cannot\ find\ model\ for\ secretResourcePool\ [%s] = cannot find model for secretResourcePool [{0}]

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:105
# args: poolForAuth
the\ crypto\ function\ is\ enabled\ but\ the\ resource\ pool[%s]\ for\ auto\ login\ is\ not\ set. = the crypto function is enabled but the resource pool[{0}] for auto login is not set.

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:113
# args: poolForProtect
the\ crypto\ function\ is\ enabled\ but\ the\ resource\ pool[%s]\ for\ data\ protect\ is\ not\ set. = the crypto function is enabled but the resource pool[{0}] for data protect is not set.

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:122
# args: state.toString()
the\ current\ state[%s]\ does\ not\ allow\ manual\ modification\ of\ the\ state = the current state[{0}] does not allow manual modification of the state

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:149
# args: 
cannot\ disable\ all\ security\ machines\ when\ the\ crypto\ function\ is\ enabled = cannot disable all security machines when the crypto function is enabled

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:159
# args: 
check\ whether\ the\ resource\ pool\ uuid\ is\ set\ for\ authentication = check whether the resource pool uuid is set for authentication

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:202
# args: algType
unknown\ encryptType[%s] = unknown encryptType[{0}]

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:216
# args: data,algType
decrypt\ data[%s]\ or\ algType[%s]\ is\ null = decrypt data[{0}] or algType[{1}] is null

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineHelper.java:225
# args: algType
invalid\ decrypt\ algType\:\ %s = invalid decrypt algType: {0}

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:280
# args: msg.getManagementIp()
there\ has\ been\ a\ security\ machine\ having\ managementIp[%s] = there has been a security machine having managementIp[{0}]

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:82
# args: securityMachineType
no\ client\ for\ security\ machine[type\=%s] = no client for security machine[type={0}]

# at: src/main/java/org/zstack/crypto/securitymachine/SecurityMachineManagerImpl.java:101
# args: securityMachineType
no\ security\ machine\ client\ factory\ for\ security\ machine[type\=%s] = no security machine client factory for security machine[type={0}]

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:50
# args: 
there\ is\ no\ security\ machine\ that\ can\ be\ activated = there is no security machine that can be activated

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:54
# args: msg.getType(),StringUtils.join(SecurityMachineKeyType.values(), ',')
invalid\ token\ type\ %s,\ only\ supports\ %s. = invalid token type {0}, only supports {1}.

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:68
# args: msg.getSecretResourcePoolUuid()
the\ identity\ authentication\ function\ is\ enabled\ but\ the\ corresponding\ resource\ pool\ is\ not\ set,\ please\ re-enable\ the\ function\ and\ try\ again = the identity authentication function is enabled but the corresponding resource pool is not set, please re-enable the function and try again

# at: src/main/java/org/zstack/crypto/securitymachine/secretresourcepool/SecretResourcePoolApiInterceptor.java:72
# args: msg.getSecretResourcePoolUuid()
cannot\ delete\ the\ resource\ pool\ %s\ when\ in\ use = cannot delete the resource pool {0} when in use

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:237
# args: 
generate\ certificate\ failed = generate certificate failed

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:134
# args: rsp.getData()
flkSec\ securityMachine\ unhealthy\:\ %s = flkSec securityMachine unhealthy: {0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecClient.java:161
# args: keyLabel,sm4EncryptResponse.result
keyLabel\ %s\ and\ encryptResult\ %s\ are\ inconsistent = keyLabel {0} and encryptResult {1} are inconsistent

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:168
# args: vo.getUuid(),response.error
the\ connection\ to\ the\ security\ machine\ %s\ failed\ during\ the\ process\ of\ generating\ the\ test\ key\ because\ %s = the connection to the security machine {0} failed during the process of generating the test key because {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:185
# args: vo.getUuid(),dataProtectTokenRes.error
failed\ to\ generate\ dataProtect\ token\ for\ the\ security\ machine\ %s\ because\ %s = failed to generate dataProtect token for the security machine {0} because {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:196
# args: vo.getUuid(),hmacTokenTokenRes.error
failed\ to\ generate\ hmac\ token\ for\ the\ security\ machine\ %s\ because\ %s = failed to generate hmac token for the security machine {0} because {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecretResourcePoolBase.java:208
# args: vo.getUuid(),encryptRes.error
failed\ to\ get\ encrypt\ result\ for\ the\ security\ machine\ %s\ because\ %s = failed to get encrypt result for the security machine {0} because {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineBase.java:123
# args: self.getManagementIp()
the\ security\ machine\ [%s]\ failed\ to\ manually\ detect\ synchronization,\ please\ confirm\ whether\ the\ security\ machine\ has\ synchronized\ the\ key! = the security machine [{0}] failed to manually detect synchronization, please confirm whether the security machine has synchronized the key!

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/flkSec/FlkSecSecurityMachineFactory.java:32
# args: msg.getName(),vo.getModel()
security\ machine[uuid\:%s]\ model\ is\ not\ %s = security machine[uuid:{0}] model is not {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolApiInterceptor.java:52
# args: msg.getModel()
currently\ does\ not\ support\ the\ creation\ of\ %s\ resource\ pools = currently does not support the creation of {0} resource pools

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/haitai/HaiTaiSecretResourcePoolFactory.java:33
# args: msg.getResourceUuid(),vo.getModel()
secretResourcePool[uuid\:%s]\ model\ is\ not\ %s = secretResourcePool[uuid:{0}] model is not {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:409
# args: agentBasic.INSMGetReturnCode(),agentBasic.INSMGetErrMsg()
large\ file\ hmac\ encrypt\ failed,\ code\:\ %s,\ detail\:\ %s = large file hmac encrypt failed, code: {0}, detail: {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:457
# args: 
failed\ to\ find\ secret\ key = failed to find secret key

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:465
# args: e.getMessage()
failed\ to\ parse\ secret\ key,\ error\:\ %s = failed to parse secret key, error: {0}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:500
# args: 
cipherText\ can\ not\ be\ null = cipherText can not be null

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:503
# args: 
encryptSubjectDN\ can\ not\ be\ null = encryptSubjectDN can not be null

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:508
# args: 
failed\ to\ parse\ MS\ Envelope = failed to parse MS Envelope

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:533
# args: 
failed\ to\ export\ secret\ key = failed to export secret key

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecClient.java:550
# args: 
import\ secret\ key\ fail = import secret key fail

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:196
# args: vo.getUuid(),activateTokenRes.error
failed\ to\ generate\ activated\ token\ for\ the\ security\ machine\ %s\ because\ %s = failed to generate activated token for the security machine {0} because {1}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:206
# args: dataProtectTokenName,vo.getUuid(),dataProtectTokenRes.error
failed\ to\ generate\ dataProtect\ token\ %s\ for\ the\ security\ machine\ %s\ because\ %s = failed to generate dataProtect token {0} for the security machine {1} because {2}

# at: src/main/java/org/zstack/crypto/securitymachine/thirdparty/infoSec/InfoSecSecretResourcePoolBase.java:216
# args: hmacTokenName,vo.getUuid(),hmacTokenTokenRes.error
failed\ to\ generate\ hmac\ token\ %s\ for\ the\ security\ machine\ %s\ because\ %s = failed to generate hmac token {0} for the security machine {1} because {2}

# at: src/main/java/org/zstack/cube/CubeManagerImpl.java:505
# args: cmd.host,cmd.detail
host[uuid\:\ %s]\ memory\ ecc\ triggered,\ detail\:\ %s = host[uuid: {0}] memory ecc triggered, detail: {1}

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:99
# args: 
parameters\ [accountUuid]\ only\ can\ be\ used\ by\ admin\ user! = parameters [accountUuid] only can be used by admin user!

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:54
# args: msg.getExpirePolicy()
expire\ policy\:\ %s\ is\ not\ valid = expire policy: {0} is not valid

# at: src/main/java/org/zstack/daho/core/DahoApiInterceptor.java:57
# args: msg.getVlan()
vlanId[%s]\ has\ been\ existed! = vlanId[{0}] has been existed!

# at: src/main/java/org/zstack/daho/core/DahoSdkImpl.java:128
# args: 
create\ daho\ vll\ task\ failed! = create daho vll task failed!

# at: src/main/java/org/zstack/daho/core/DahoSdkImpl.java:169
# args: msg.getAccountUuid()
no\ aliyun\ account\ found\ for\ accountUuid\:\ %s = no aliyun account found for accountUuid: {0}

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:105
# args: list,msg.getDirectoryUuid()
resources\ %s\ has\ already\ been\ bound\ to\ directory\ uuid[%s]\ ,\ multiple\ paths\ are\ not\ supported = resources {0} has already been bound to directory uuid[{1}] , multiple paths are not supported

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:112
# args: list,ALLOW_RESOURCE_TYPES
resource\ types\ %s\ are\ not\ supported\ by\ directory,\ allowed\ types\ are\ %s = resource types {0} are not supported by directory, allowed types are {1}

# at: src/main/java/org/zstack/directory/DirectoryApiInterceptor.java:129
# args: 
name\ contains\ unsupported\ characters,\ name\ can\ only\ contain\ Chinese\ characters,\ English\ letters,\ numbers,\ spaces,\ and\ the\ following\ characters\:\ ()（）【】@._-+\  = name contains unsupported characters, name can only contain Chinese characters, English letters, numbers, spaces, and the following characters: ()（）【】@._-+ 

# at: src/main/java/org/zstack/directory/DirectoryBase.java:356
# args: msg.getDirectoryUuid(),msg.getTargetParentUuid()
circular\ dependency\ detected,\ directory\ %s\ and\ directory\ %s\ will\ cause\ circular\ dependency = circular dependency detected, directory {0} and directory {1} will cause circular dependency

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:147
# args: list.get(0).getUuid(),msg.getName()
duplicate\ directory\ name,\ directory[uuid\:\ %s]\ with\ name\ %s\ already\ exists = duplicate directory name, directory[uuid: {0}] with name {1} already exists

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:154
# args: 
fail\ to\ create\ directory,\ directories\ are\ up\ to\ four\ levels = fail to create directory, directories are up to four levels

# at: src/main/java/org/zstack/directory/DirectoryManagerImpl.java:158
# args: msg.getType(),DIRECTORY_TYPES
the\ type\ of\ directory\ %s\ is\ not\ supported,\ the\ supported\ directory\ types\ are\ %s = the type of directory {0} is not supported, the supported directory types are {1}

# at: src/main/java/org/zstack/directory/VmDirectoryChecker.java:27
# args: vo.getZoneUuid()
all\ resources\ zoneUuid\ must\ be\ consistent\ with\ the\ directory\ zoneUuid[%s] = all resources zoneUuid must be consistent with the directory zoneUuid[{0}]

# at: src/main/java/org/zstack/drs/DRSBase.java:216
# args: 
Advice\ not\ allowed\ while\ scheduling = Advice not allowed while scheduling

# at: src/main/java/org/zstack/drs/DRSBase.java:277
# args: 
delete\ DRS\ is\ not\ allowed\ while\ the\ vm\ is\ being\ migrated = delete DRS is not allowed while the vm is being migrated

# at: src/main/java/org/zstack/drs/DRSBase.java:370
# args: 
Scheduling\ is\ not\ allowed\ while\ the\ vm\ is\ being\ migrated = Scheduling is not allowed while the vm is being migrated

# at: src/main/java/org/zstack/drs/DRSBase.java:481
# args: 
Lack\ of\ host\ CPU,\ memory\ monitoring\ data = Lack of host CPU, memory monitoring data

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:55
# args: msg.getClusterUuid()
The\ cluster[%s]\ has\ created\ DRS = The cluster[{0}] has created DRS

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:59
# args: 
DRS\ is\ disabled = DRS is disabled

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:64
# args: 
thresholds\ can\ not\ be\ empty = thresholds can not be empty

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:73
# args: threshold.getThresholdName()
illegal\ thresholdName[%s] = illegal thresholdName[{0}]

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:77
# args: threshold.getOperator()
illegal\ threshold\ operator[%s] = illegal threshold operator[{0}]

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:81
# args: 
thresholdValue\ can\ not\ be\ empty = thresholdValue can not be empty

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:86
# args: 
illegal\ thresholdValue,\ valid\ range\:\ (0,\ 100] = illegal thresholdValue, valid range: (0, 100]

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:103
# args: 
GlobalConfig\ ENABLE_DRS\ is\ closed = GlobalConfig ENABLE_DRS is closed

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:107
# args: msg.getUuid(),vo.getState().toString()
The\ DRS[%s]\ state\ is\ %s = The DRS[{0}] state is {1}

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:122
# args: adviceVO.getDrsUuid()
The\ DRS[%s]\ automation\ level\ is\ not\ manual = The DRS[{0}] automation level is not manual

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:136
# args: msg.getAdviceUuid()
advice[%s]\ has\ expired = advice[{0}] has expired

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:145
# args: 
Successfully\ executed,\ no\ repeated\ executions\ allowed = Successfully executed, no repeated executions allowed

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:152
# args: adviceVO.getVmUuid()
The\ vm[%s]\ has\ been\ deleted = The vm[{0}] has been deleted

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:155
# args: adviceVO.getVmUuid()
The\ vm[%s]\ state\ is\ not\ running = The vm[{0}] state is not running

# at: src/main/java/org/zstack/drs/DRSInterceptor.java:158
# args: adviceVO.getVmUuid(),adviceVO.getVmSourceHostUuid()
The\ vm[%s]\ is\ no\ longer\ on\ the\ source\ host[%s] = The vm[{0}] is no longer on the source host[{1}]

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:273
# args: msg.getClusterUuid()
The\ cluster[%s]\ does\ not\ support\ DRS. = The cluster[{0}] does not support DRS.

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:290
# args: reasons
Can\ not\ create\ DRS,\ %s = Can not create DRS, {0}

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:323
# args: 
hostUuids\ is\ empty = hostUuids is empty

# at: src/main/java/org/zstack/drs/DRSManagerImpl.java:330
# args: 
query\ hosts\ utilization\ data\ failed = query hosts utilization data failed

# at: src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java:83
# args: bundle.getEncryptionType()
failed\ to\ parse\ API\ message\:\ can\ not\ parse\ encryption\ param\ with\ type\ %s = failed to parse API message: can not parse encryption param with type {0}

# at: src/main/java/org/zstack/encrypt/EncryptionParamApiInterceptor.java:128
# args: matchTags.size()
failed\ to\ parse\ API\ message\:\ found\ %d\ encryption\ param\ system\ tags,\ expect\ 1 = failed to parse API message: found {0} encryption param system tags, expect 1

# at: src/main/java/org/zstack/externalbackup/zbox/HostZBoxBackupRecoverGC.java:142
# args: volumeUuids
some\ volume[uuids\:%s]\ recover\ failed.\ you\ can\ trigger\ it\ again\ by\ reconnect\ it. = some volume[uuids:{0}] recover failed. you can trigger it again by reconnect it.

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java:34
# args: externalBackupUuid
there\ is\ another\ external\ backup[uuid\:\ %s]\ recovering = there is another external backup[uuid: {0}] recovering

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupApiInterceptor.java:38
# args: 
both\ hostUuids\ and\ backupStorageUuids\ are\ empty.\ you\ must\ specify\ one\ or\ both\ of\ them. = both hostUuids and backupStorageUuids are empty. you must specify one or both of them.

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:691
# args: 
please\ insert\ zbox\ to\ management\ node. = please insert zbox to management node.

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:219
# args: 
cannot\ find\ recover.conf\ under\ zbox\ backup\ install\ dir. = cannot find recover.conf under zbox backup install dir.

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:741
# args: result.getExecutionLog()
fail\ to\ backup\ database\:\ %s = fail to backup database: {0}

# at: src/main/java/org/zstack/externalbackup/zbox/ZBoxBackupBase.java:591
# args: 
zbox\ should\ be\ inserted\ to\ a\ host\ first. = zbox should be inserted to a host first.

# at: src/main/java/org/zstack/externalservice/cronjob/CronJobImpl.java:81
# args: 
crond\ is\ not\ running = crond is not running

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:485
# args: 
Missing\ CPU/memory\ settings = Missing CPU/memory settings

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:489
# args: 
Unexpected\ CPU/memory\ settings = Unexpected CPU/memory settings

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:498
# args: instanceOfferingUuid
instance\ offering[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = instance offering[uuid:{0}] is Disabled, can't create vm from it

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:502
# args: instanceOfferingUuid,ivo.getType()
instance\ offering[uuid\:%s,\ type\:%s]\ is\ not\ UserVm\ type,\ can't\ create\ vm\ from\ it = instance offering[uuid:{0}, type:{1}] is not UserVm type, can't create vm from it

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:539
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ Disabled,\ can't\ create\ vm\ from\ it = image[uuid:{0}] is Disabled, can't create vm from it

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:544
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ not\ ready\ yet,\ can't\ create\ vm\ from\ it = image[uuid:{0}] is not ready yet, can't create vm from it

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:559
# args: msg.getImageUuid()
image[uuid\:%s]\ is\ system\ image,\ can't\ be\ used\ to\ create\ user\ vm = image[uuid:{0}] is system image, can't be used to create user vm

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:575
# args: diskUuids
disk\ offerings[uuids\:%s]\ are\ Disabled,\ can\ not\ create\ vm\ from\ it = disk offerings[uuids:{0}] are Disabled, can not create vm from it

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:450
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ secondary\ vm[uuid\:%s] = current operation is not supported on ft secondary vm[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:126
# args: group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
pvm[uuid\:%s]\ and\ svm[uuid\:%s]\ volume\ number\ not\ matches,\ do\ not\ allowed\ to\ start = pvm[uuid:{0}] and svm[uuid:{1}] volume number not matches, do not allowed to start

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:135
# args: i,group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
volume\ with\ index\:\ %d,\ of\ pvm[uuid\:%s]\ and\ svm[uuid\:%s]\ have\ different\ size,\ do\ not\ allowed\ to\ start = volume with index: {0}, of pvm[uuid:{1}] and svm[uuid:{2}] have different size, do not allowed to start

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:146
# args: i,group.getPrimaryVmInstanceUuid(),group.getSecondaryVmInstanceUuid()
volume\ with\ index\:\ %d,\ of\ pvm[uuid\:%s]\ and\ svm[uuid\:%s]'s\ cache\ volume\ have\ different\ size,\ do\ not\ allowed\ to\ start = volume with index: {0}, of pvm[uuid:{1}] and svm[uuid:{2}]'s cache volume have different size, do not allowed to start

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:169
# args: msg.getUuid(),faultToleranceVmGroupUuid
image[uuid\:%s]\ is\ still\ used\ by\ fault\ tolerance\ vm[uuid\:%s] = image[uuid:{0}] is still used by fault tolerance vm[uuid:{1}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:212
# args: msg.getL3NetworkUuid(),String.join(",", vmInstanceUuids),VmInstanceState.Paused,VmInstanceState.Running
could\ not\ delete\ l3\ network[uuid\:%s].\ Fault\ tolerance\ vm[%s]\ in\ states[%s,\ %s]\ still\ using\ it.\ Stop\ related\ fault\ tolerance\ vms\ before\ delete\ l3\ network = could not delete l3 network[uuid:{0}]. Fault tolerance vm[{1}] in states[{2}, {3}] still using it. Stop related fault tolerance vms before delete l3 network

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:266
# args: msg.getFaultToleranceVmUuid()
Can\ not\ fail-over\ vm[uuid\:%s],\ please\ enable\ ft\ in\ GlobalConfig = Can not fail-over vm[uuid:{0}], please enable ft in GlobalConfig

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:270
# args: msg.getFaultToleranceVmUuid()
Can\ not\ fail-over\ vm[uuid\:%s],\ please\ confirm\ it\ is\ a\ fault\ tolerance\ vm\ group = Can not fail-over vm[uuid:{0}], please confirm it is a fault tolerance vm group

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:276
# args: msg.getFaultToleranceVmUuid(),FaultToleranceStatus.Protected,FaultToleranceStatus.Unknown
Can\ not\ fail-over\ vm[uuid\:%s],\ because\ fault\ tolerance\ vm\ group\ is\ not\ in\ status\ of\ [%s,\ %s] = Can not fail-over vm[uuid:{0}], because fault tolerance vm group is not in status of [{1}, {2}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:301
# args: Joiner.on(",").join(vmUuids)
Can\ not\ maintain\ host,\ because\ ft\ vms[%s]\ are\ under\ recovering = Can not maintain host, because ft vms[{0}] are under recovering

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:319
# args: msg.getClass(),msg.getVmInstanceUuid(),state
current\ operation[api\:%s]\ is\ not\ supported\ when\ ft\ vm[uuid\:%s,\ state\:%s]\ is\ not\ stopped = current operation[api:{0}] is not supported when ft vm[uuid:{1}, state:{2}] is not stopped

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:367
# args: VmHaLevel.FaultTolerance.toString()
Can\ not\ set\ vm\ level\ to\ %s,\ please\ enable\ ft\ in\ GlobalConfig = Can not set vm level to {0}, please enable ft in GlobalConfig

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:515
# args: 
Ft\ network\ is\ not\ set = Ft network is not set

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:423
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ cpu\ number,\ need\ to\ stop\ both\ of\ the\ vms = can not update ft vm[uuid:{0}] cpu number, need to stop both of the vms

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:427
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ memory\ size,\ need\ to\ stop\ both\ of\ the\ vms = can not update ft vm[uuid:{0}] memory size, need to stop both of the vms

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:431
# args: msg.getVmInstanceUuid()
can\ not\ update\ ft\ vm[uuid\:%s]\ platform,\ need\ to\ stop\ both\ of\ the\ vms = can not update ft vm[uuid:{0}] platform, need to stop both of the vms

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:442
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ group\ vm[uuid\:%s] = current operation is not supported on ft group vm[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:446
# args: vmInstanceUuid
current\ operation\ is\ not\ supported\ on\ ft\ primary\ vm[uuid\:%s] = current operation is not supported on ft primary vm[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:466
# args: msg.getVmInstanceUuid()
current\ operation\ is\ not\ supported\ on\ secondary\ vm[uuid\:%s] = current operation is not supported on secondary vm[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:472
# args: 
can\ not\ migrate\ FT\ primary\ vm = can not migrate FT primary vm

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:476
# args: 
can\ not\ migrate\ FT\ secondary\ vm = can not migrate FT secondary vm

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:511
# args: 
Failed\ to\ create\ ft\ vm,\ please\ enable\ ft\ in\ GlobalConfig = Failed to create ft vm, please enable ft in GlobalConfig

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:549
# args: msg.getImageUuid(),imgFormat
image[uuid\:%s]\ is\ of\ mediaType\:\ %s,\ only\ RootVolumeTemplate\ can\ be\ used\ to\ create\ vm = image[uuid:{0}] is of mediaType: {1}, only RootVolumeTemplate can be used to create vm

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceApiInterceptor.java:554
# args: msg.getImageUuid(),imageFileFmt,ImageConstant.QCOW2_FORMAT_STRING
image[uuid\:%s]\ is\ of\ format\:\ %s,\ only\ %s\ can\ be\ used\ to\ create\ vm = image[uuid:{0}] is of format: {1}, only {2} can be used to create vm

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:364
# args: hostUuid
failed\ to\ allocate\ port\ on\ host[uuid\:\ %s] = failed to allocate port on host[uuid: {0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:369
# args: hostUuid
allocated\ port\ num\ less\ than\ requested\ on\ host[uuid\:\ %s] = allocated port num less than requested on host[uuid: {0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:524
# args: smsg.getPrimaryVmInstanceUuid()
could\ not\ get\ hostUuid\ of\ primary\ vm[uuid\:%s] = could not get hostUuid of primary vm[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:892
# args: 
can\ not\ start\ secondary\ vm,\ because\ primary\ vm\ is\ still\ stopped = can not start secondary vm, because primary vm is still stopped

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:1322
# args: vm.getUuid()
Can\ not\ migrate\ ft\ secondary\ vm[uuid\:%s] = Can not migrate ft secondary vm[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmFactory.java:1327
# args: vm.getUuid()
Can\ not\ migrate\ ft\ primary\ vm[uuid\:%s] = Can not migrate ft primary vm[uuid:{0}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java:546
# args: 
Current\ ft\ vm\ is\ in\ unknown\ status,\ can\ not\ stop\ it,\ please\ try\ to\ fail-over\ it\ manually = Current ft vm is in unknown status, can not stop it, please try to fail-over it manually

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceGroupVmInstanceBase.java:596
# args: self.getUuid()
unable\ to\ start\ the\ vm[uuid\:%s].\ It\ doesn't\ have\ any\ nic,\ please\ attach\ a\ nic\ and\ try\ again = unable to start the vm[uuid:{0}]. It doesn't have any nic, please attach a nic and try again

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3110
# args: nicUuid,pvm.getHostUuid()
failed\ to\ allocate\ port\ of\ nic[uuid\:\ %s]\ on\ host[uuid\:\ %s] = failed to allocate port of nic[uuid: {0}] on host[uuid: {1}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3115
# args: nicUuid,pvm.getHostUuid()
allocated\ port\ num\ less\ than\ requested\ of\ nic[uuid\:\ %s]\ on\ host[uuid\:\ %s] = allocated port num less than requested of nic[uuid: {0}] on host[uuid: {1}]

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:727
# args: 
can\ not\ create\ secondary\ vm,\ because\ primary\ vm\ is\ stopped = can not create secondary vm, because primary vm is stopped

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:641
# args: 
an\ other\ fault\ tolerance\ gc\ task\ is\ running,\ cancel\ the\ new\ task\ and\ wait\ return = an other fault tolerance gc task is running, cancel the new task and wait return

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:2256
# args: 
can\ not\ start\ secondary\ vm,\ because\ primary\ vm\ is\ stopped = can not start secondary vm, because primary vm is stopped

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1212
# args: 
created\ svm\ found,\ report\ error\ for\ this\ start\ secondary\ vm\ request = created svm found, report error for this start secondary vm request

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1468
# args: vmInstanceUuid
could\ not\ failover\ vm[uuid\:%s].\ Related\ fault\ tolerance\ vm\ group\ not\ exists = could not failover vm[uuid:{0}]. Related fault tolerance vm group not exists

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1484
# args: group.getPrimaryVmInstanceUuid()
pvm[uuid\:%s]\ not\ exists = pvm[uuid:{0}] not exists

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1596
# args: 
unexpected\ exception = unexpected exception

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1556
# args: 
could\ not\ failover.\ Secondary\ vm\ is\ unknown\ but\ no\ fault\ tolerance\ network\ address\ available = could not failover. Secondary vm is unknown but no fault tolerance network address available

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1495
# args: 
could\ not\ failover.\ Primary\ vm\ is\ unknown\ but\ no\ fault\ tolerance\ network\ address\ available = could not failover. Primary vm is unknown but no fault tolerance network address available

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:1669
# args: hostUuid
cannot\ found\ available\ ip\ from\ current\ ft\ network.\ Check\ whether\ global\ config[category\:ft\ name\:fault.tolerance.network.cidr]\ is\ correctly\ set,\ and\ confirm\ that\ host[uuid\:%s]\ own\ ip\ address\ in\ the\ CIDR = cannot found available ip from current ft network. Check whether global config[category:ft name:fault.tolerance.network.cidr] is correctly set, and confirm that host[uuid:{0}] own ip address in the CIDR

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceManagerImpl.java:3009
# args: 
not\ fault\ tolerance\ vm\ port\ found = not fault tolerance vm port found

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:95
# args: imageUuid,spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage.\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = cannot find the image[uuid:{0}] in any connected backup storage. check below:\n1. if the backup storage is attached to the zone where the VM[name: {1}, uuid:{2}] is in\n2. if the backup storage is in connected status, if not, try reconnecting it

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:89
# args: imageUuid,spec.getVmInventory().getZoneUuid(),spec.getVmInventory().getName(),spec.getVmInventory().getUuid()
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ if\ the\ backup\ storage\ is\ attached\ to\ the\ zone\ where\ the\ VM[name\:\ %s,\ uuid\:%s]\ is\ in\n2.\ if\ the\ backup\ storage\ is\ in\ connected\ status,\ if\ not,\ try\ reconnecting\ it = cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. if the backup storage is attached to the zone where the VM[name: {2}, uuid:{3}] is in\n2. if the backup storage is in connected status, if not, try reconnecting it

# at: src/main/java/org/zstack/faulttolerance/FaultToleranceVmImageSelectBackupStorageFlow.java:117
# args: zoneUuid,isoImageUuid
no\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s]\ contains\ the\ ISO[uuid\:%s] = no backup storage attached to the zone[uuid:{0}] contains the ISO[uuid:{1}]

# at: src/main/java/org/zstack/faulttolerance/ShadowVmCloneTagsFlow.java:63
# args: 
missing\ fault\ tolerance\ vm\ group = missing fault tolerance vm group

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:63
# args: vo.getL3NetworkUuid(),vo.getFlowMeterUuid()
The\ network[%s]\ have\ been\ added\ into\ the\ flow\ meter[%s] = The network[{0}] have been added into the flow meter[{1}]

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:71
# args: 
The\ virtual\ router\ have\ been\ added\ into\ other\ flow\ meter = The virtual router have been added into other flow meter

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:77
# args: msg.getVersion(),FlowMeterConstants.TYPE.NetFlow.toString()
invalid\ type\ parameter\ is\ %s\ and\ should\ be\ in\ %s = invalid type parameter is {0} and should be in {1}

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:154
# args: msg.getServer()
[%s]\ is\ not\ formatted\ as\ IP\ address = [{0}] is not formatted as IP address

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:143
# args: collector.getUuid()
Collector\ duplicate\ with\ %s = Collector duplicate with {0}

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:164
# args: collectorVO.getFlowMeterUuid()
FlowMeter[%s]\ doesn't\ exist = FlowMeter[{0}] doesn't exist

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:168
# args: collectorVO.getFlowMeterUuid(),vo.getVersion().toString()
FlowMeter[%s]\ IPv6\ doesn't\ support\ version[%s] = FlowMeter[{0}] IPv6 doesn't support version[{1}]

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:150
# args: 
no\ specify\ parameter = no specify parameter

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:159
# args: msg.getUuid()
Flow\ collector[%s]\ doesn't\ exist = Flow collector[{0}] doesn't exist

# at: src/main/java/org/zstack/flowMeter/FlowMeterApiInterceptor.java:183
# args: server,port,collector.getUuid()
Collector\ [%s\ %d]\ duplicate\ with\ %s = Collector [{0} {1}] duplicate with {2}

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:88
# args: vmUuid
unable\ to\ set\ vm\ hostname.\ the\ vm[uuid\:%s]\ do\ not\ have\ default\ L3\ network = unable to set vm hostname. the vm[uuid:{0}] do not have default L3 network

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:103
# args: sameTag.getResourceUuid(),hostname,defaultL3uuid
conflict\ hostname,\ there\ has\ been\ a\ VM[uuid\:%s]\ having\ hostname[%s]\ on\ L3\ network[uuid\:%s] = conflict hostname, there has been a VM[uuid:{0}] having hostname[{1}] on L3 network[uuid:{2}]

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:111
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ vm\ not\ running. = update vm[uuid:{0}] network config failed, because vm not running.

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:116
# args: msg.getVmInstanceUuid(),vm.getType()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ the\ vm\ type\ %s\ is\ not\ supported. = update vm[uuid:{0}] network config failed, because the vm type {1} is not supported.

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:129
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ guesttools\ not\ running. = update vm[uuid:{0}] network config failed, because guesttools not running.

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:125
# args: msg.getVmInstanceUuid()
update\ vm[uuid\:%s]\ network\ config\ failed,\ because\ the\ guesttools\ version\ is\ too\ low\ for\ this\ feature. = update vm[uuid:{0}] network config failed, because the guesttools version is too low for this feature.

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:136
# args: nic.getUuid()
sync\ nic[uuid\:%s]\ network\ config\ failed,\ the\ current\ qga\ tools\ only\ support\ manual\ ipv6\ configuration\ and\ do\ not\ support\ automatic\ sync = sync nic[uuid:{0}] network config failed, the current qga tools only support manual ipv6 configuration and do not support automatic sync

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:147
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ hypervisor\ type\ is\ not\ supported = cannot attach guest-tools iso to vm[uuid:{0}] because it's hypervisor type is not supported

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:154
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ not\ running = cannot attach guest-tools iso to vm[uuid:{0}] because it's not running

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:161
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = cannot attach guest-tools iso to vm[uuid:{0}] because it's not user vm

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:168
# args: msg.getUuid()
cannot\ attach\ guest-tools\ iso\ to\ vm[uuid\:%s]\ because\ it\ has\ no\ cdrom = cannot attach guest-tools iso to vm[uuid:{0}] because it has no cdrom

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:191
# args: vmUuid
cannot\ get\ guest-tools\ info\ from\ vm[uuid\:%s]\ because\ it's\ not\ running = cannot get guest-tools info from vm[uuid:{0}] because it's not running

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:197
# args: vmUuid
cannot\ get\ guest-tools\ info\ from\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = cannot get guest-tools info from vm[uuid:{0}] because it's not user vm

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:219
# args: invalidSet
invalid\ debug\ parameter\:\ %s = invalid debug parameter: {0}

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:227
# args: msg.getVmInstanceUuid()
can\ not\ update\ guest\ tools\ state\ for\ vm\ [uuid\:%s]\ because\ vm\ is\ deleted = can not update guest tools state for vm [uuid:{0}] because vm is deleted

# at: src/main/java/org/zstack/guesttools/GuestToolsApiInterceptor.java:232
# args: msg.getVmInstanceUuid()
can\ not\ update\ guest\ tools\ state\ for\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = can not update guest tools state for vm[uuid:{0}] because it's not user vm

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:704
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ hypervisor\ type\ is\ not\ supported = cannot get latest guest-tools for vm[uuid:{0}] because it's hypervisor type is not supported

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:713
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ not\ running\ or\ volume\ recovering. = cannot get latest guest-tools for vm[uuid:{0}] because it's not running or volume recovering.

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:722
# args: msg.getUuid()
cannot\ get\ latest\ guest-tools\ for\ vm[uuid\:%s]\ because\ it's\ not\ user\ vm = cannot get latest guest-tools for vm[uuid:{0}] because it's not user vm

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:1067
# args: Platform.getManagementServerId(),msg.getHostUuid()
no\ proper\ guest\ tools\ iso\ found\ in\ management\ node[uuid\:%s]\ for\ host[uuid\:%s] = no proper guest tools iso found in management node[uuid:{0}] for host[uuid:{1}]

# at: src/main/java/org/zstack/guesttools/GuestToolsManagerImpl.java:2042
# args: vm.getUuid(),vm.getName()
failed\ to\ set\ vm[uuid\:\ %s,\ name\:\ %s]\ hostname,\ because\ qga\ state\ is\ not\ running\ and\ there\ is\ no\ dhcp\ service = failed to set vm[uuid: {0}, name: {1}] hostname, because qga state is not running and there is no dhcp service

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:144
# args: vmUuid,rsp.getError()
failed\ to\ get\ guest\ tools\ info\ from\ vm[uuid\:%s],\ because\:%s = failed to get guest tools info from vm[uuid:{0}], because:{1}

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:244
# args: host.getUuid()
failed\ to\ download\ guest\ tools\ iso\ because\ no\ kvm\ host[uuid\:%s]\ found = failed to download guest tools iso because no kvm host[uuid:{0}] found

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:313
# args: vm.getUuid(),rsp.getError()
failed\ to\ attach\ guest\ tools\ iso\ to\ vm[uuid\:%s],\ because\:%s = failed to attach guest tools iso to vm[uuid:{0}], because:{1}

# at: src/main/java/org/zstack/guesttools/kvm/GuestToolsOnKvmBackend.java:358
# args: vm.getUuid(),rsp.getError()
failed\ to\ detach\ guest\ tools\ iso\ from\ vm[uuid\:%s],\ because\:%s = failed to detach guest tools iso from vm[uuid:{0}], because:{1}

# at: src/main/java/org/zstack/guesttools/pvpanic/PVPanicCrashStrategyManagerImpl.java:200
# args: errCode
can\ not\ be\ here = can not be here

# at: src/main/java/org/zstack/ha/HaInterceptor.java:90
# args: vm.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ it\ is\ not\ stopped = can not set FT on vm[uuid:{0}] because it is not stopped

# at: src/main/java/org/zstack/ha/HaInterceptor.java:94
# args: vm.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ some\ data\ volume\ is\ still\ attached = can not set FT on vm[uuid:{0}] because some data volume is still attached

# at: src/main/java/org/zstack/ha/HaInterceptor.java:102
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ since\ pci\ device\ attached = can not set FT on vm[uuid:{0}] since pci device attached

# at: src/main/java/org/zstack/ha/HaInterceptor.java:108
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vm[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached\ by\ passthrough = can not set FT on vm[uuid:{0}] because there are usb devices attached by passthrough

# at: src/main/java/org/zstack/ha/HaInterceptor.java:119
# args: msg.getUuid()
can\ not\ set\ FT\ on\ vmm[uuid\:%s]\ since\ mdev\ device\ attached = can not set FT on vmm[uuid:{0}] since mdev device attached

# at: src/main/java/org/zstack/ha/HaKvmHostSiblingChecker.java:237
# args: struct.getHostUuid(),struct.getHostIp(),errors
hosts\ failed\ to\ port\ scan\ the\ failure\ host[uuid\:%s,\ ip\:%s],\ errors\ are\ %s = hosts failed to port scan the failure host[uuid:{0}, ip:{1}], errors are {2}

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:96
# args: checkers.indexOf(checker) + 1,checkers.size(),checker.getClass().getSimpleName(),s.getSuccessTimes() * s.getSuccessInterval()
(%d/%d)\ start\ HaHostChecker\ %s\:\ predict\ time\ is\ [%d]\ seconds = ({0}/{1}) start HaHostChecker {2}: predict time is [{3}] seconds

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:160
# args: self.getName(),self.getUuid()
cannot\ find\ the\ host\ of\ the\ vm[name\:%s,\ uuid\:%s],\ hostUuid\ is\ null = cannot find the host of the vm[name:{0}, uuid:{1}], hostUuid is null

# at: src/main/java/org/zstack/ha/HaKvmWorker.java:167
# args: 
no\ HaHostChecker\ found,\ cannot\ do\ HA = no HaHostChecker found, cannot do HA

# at: src/main/java/org/zstack/ha/HaManagementNodeChecker.java:102
# args: 
the\ management\ node\ fails\ to\ scan\ the\ host = the management node fails to scan the host

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1873
# args: vmUuid
the\ VM[uuid\:%s]\ volume\ stored\ location\ primary\ storage\ is\ in\ a\ state\ of\ maintenance = the VM[uuid:{0}] volume stored location primary storage is in a state of maintenance

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1615
# args: 
VM\ is\ started\ successfully = VM is started successfully

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1618
# args: 
Failed\ to\ start\ the\ NeverStop\ VM = Failed to start the NeverStop VM

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:394
# args: newValue
the\ value[%s]\ is\ lesser\ than\ 0\ or\ greater\ than\ 1\  = the value[{0}] is lesser than 0 or greater than 1 

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:699
# args: HaGlobalConfig.NEVER_STOP_VM_FAILURE_RETRY_DELAY.value(Long.class)
A\ GC\ job\ is\ submitted\ to\ HA\ the\ VM[retry\ delay\:\ %s\ seconds] = A GC job is submitted to HA the VM[retry delay: {0} seconds]

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1301
# args: 
HA\ is\ successfully\ completed = HA is successfully completed

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1309
# args: 
Failed\ to\ HA\ the\ VM = Failed to HA the VM

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1195
# args: 
vm\ stopped\ unexpectedly,\ double\ check\ state = vm stopped unexpectedly, double check state

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1204
# args: vmUuid,hostUuid
cannot\ determine\ VM[%s]\ status\ on\ host[%s],\ try\ to\ start\ it = cannot determine VM[{0}] status on host[{1}], try to start it

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1601
# args: 
vm\ state\ is\ stopped,\ try\ to\ start\ it = vm state is stopped, try to start it

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1227
# args: vmUuid,hostUuid
VM[%s]\ is\ running\ on\ host[%s] = VM[{0}] is running on host[{1}]

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1240
# args: vmUuid,hostUuid
VM[%s]\ is\ paused\ on\ host[%s] = VM[{0}] is paused on host[{1}]

# at: src/main/java/org/zstack/ha/HaManagerImpl.java:1268
# args: vm.getHypervisorType()
the\ hypervisor[%s]\ does\ not\ support\ VM\ HA = the hypervisor[{0}] does not support VM HA

# at: src/main/java/org/zstack/ha/HostCheckResult.java:59
# args: ratio,threshold,hostUuid,errors
[HA\ Worker]\:\ the\ success\ ratio[%s]\ below\ the\ threshold[%s],\ the\ host[uuid\:%s]\ is\ judged\ as\ dead,\ errors\ are\ %s.\ Start\ HA\ all\ the\ vms\ on\ this\ host\ before = [HA Worker]: the success ratio[{0}] below the threshold[{1}], the host[uuid:{2}] is judged as dead, errors are {3}. Start HA all the vms on this host before

# at: src/main/java/org/zstack/ha/HostCheckResult.java:56
# args: ratio,threshold
[HA\ worker]\:\ all\ host\ checkers\ are\ finished\ and\ the\ success\ ratio\ is\ %s\ that\ is\ greater\ than\ the\ threshold[%s];\ no\ HA\ need\ for\ the\ vms\ on\ this\ host\ before.\ Please\ wait\ for\ the\ host\ reconnected = [HA worker]: all host checkers are finished and the success ratio is {0} that is greater than the threshold[{1}]; no HA need for the vms on this host before. Please wait for the host reconnected

# at: src/main/java/org/zstack/ha/NeverStopVmGC.java:102
# args: 
VM\ state\ is\ not\ running,\ try\ to\ start\ it = VM state is not running, try to start it

# at: src/main/java/org/zstack/header/backup/NonBackupInfo.java:14
# args: 
enter\ the\ new\ value\ here,\ empty\ means\ no\ change. = enter the new value here, empty means no change.

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:44
# args: type
keyType\ not\ supported\ type\ [%s] = keyType not supported type [{0}]

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:60
# args: msg.getKey(),msg.getType(),accountUuid
key\:\ [%s]\ with\ type\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = key: [{0}] with type: [{1}] already existed by accountUuid: [{2}]

# at: src/main/java/org/zstack/hybrid/account/HybridAccountApiInterceptor.java:84
# args: msg.getKey(),accountUuid
key\:\ [%s]\ already\ existed\ by\ accountUuid\:\ [%s] = key: [{0}] already existed by accountUuid: [{1}]

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java:63
# args: msg.getRegionId(),ak
regionId\ [%s]\ already\ created\ by\ ak\ [%s] = regionId [{0}] already created by ak [{1}]

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterApiInterceptor.java:46
# args: type
dcType\ not\ supported\ type\ [%s] = dcType not supported type [{0}]

# at: src/main/java/org/zstack/hybrid/datacenter/DataCenterManagerImpl.java:96
# args: msg.getUuid()
DataCenter\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = DataCenter [{0}] is still in sync progress, please wait.

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:55
# args: msg.getZoneId(),izo.getUuid()
identity\ zone\ [%s]\ already\ existed,\ uuid\ is\:\ %s = identity zone [{0}] already existed, uuid is: {1}

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:72
# args: type,dvo.getDcType().toString()
type\ [%s]\ is\ not\ matched\ datacenter\ type\ [%s] = type [{0}] is not matched datacenter type [{1}]

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneApiInterceptor.java:82
# args: 
either\ dataCenterUuid\ or\ regionId\ should\ be\ set,\ please\ check\ the\ parameters. = either dataCenterUuid or regionId should be set, please check the parameters.

# at: src/main/java/org/zstack/hybrid/identityzone/IdentityZoneManagerImpl.java:111
# args: msg.getUuid()
IdentityZone\ [%s]\ is\ still\ in\ sync\ progress,\ please\ wait. = IdentityZone [{0}] is still in sync progress, please wait.

# at: src/main/java/org/zstack/hybrid/network/HybridEipCascadeExtension.java:88
# args: 
EcsInstance\ must\ be\ running\ or\ stopped\ while\ deleting\ eip\  = EcsInstance must be running or stopped while deleting eip 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:83
# args: vbri.getUuid(),vbri.getDataCenterUuid(),vrouteri.getUuid(),vrouteri.getDataCenterUuid()
router\ interface\ must\ be\ in\ the\ same\ datacenter,\ but\ ri[%s]\ is\ in\ dc[%s]\ and\ ri[%s]\ is\ in\ dc[%s] = router interface must be in the same datacenter, but ri[{0}] is in dc[{1}] and ri[{2}] is in dc[{3}]

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:93
# args: vrouteri.getUuid(),vrouteri.getStatus()
router\ interface[%s]\ status\ is\ not\ idle,\ it\ is\ %s = router interface[{0}] status is not idle, it is {1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:101
# args: vrouteri.getUuid(),vrouteri.getOppositeInterfaceUuid()
router\ interface[%s]\ already\ has\ a\ connection,\ it\ is\ %s = router interface[{0}] already has a connection, it is {1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:109
# args: 
accessPointUuid\ cannot\ be\ null\ if\ the\ router\ interface\ on\ VBR\ type\ router = accessPointUuid cannot be null if the router interface on VBR type router

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:183
# args: 
cannot\ delete\ system\ entry = cannot delete system entry

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:189
# args: 
only\ support\ intranet\ rule\ in\ vpc = only support intranet rule in vpc

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:194
# args: msg.getCidr()
%s\ is\ not\ a\ valid\ cidr = {0} is not a valid cidr

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:204
# args: 
security\ group\ rule\ already\ existed = security group rule already existed

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:210
# args: msg.getDstCidrBlock()
dstCidrBlock[%s]\ is\ not\ a\ valid\ cidr = dstCidrBlock[{0}] is not a valid cidr

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:239
# args: msg.getNextHopType()
next\ hop\ type\ [%s]\ not\ supported\ create\ route\ entry\ now! = next hop type [{0}] not supported create route entry now!

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:235
# args: msg.getNextHopUuid()
no\ such\ vpn\ gateway\:\ %s = no such vpn gateway: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:224
# args: rivo.getvRouterType().toString(),msg.getvRouterType()
nexthop\ routerInterface\ belongs\ to\ %s,\ but\ the\ entry\ belongs\ to\ %s = nexthop routerInterface belongs to {0}, but the entry belongs to {1}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:217
# args: msg.getNextHopUuid()
no\ such\ ecs\ instance\:\ %s = no such ecs instance: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:249
# args: 
virtual\ border\ router\ only\ support\ routerinterface\ as\ next\ hop\ type = virtual border router only support routerinterface as next hop type

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:269
# args: msg.getCidrBlock(),vpcCidr
vswitch's\ cidr\ [%s]\ not\ in\ the\ vpc's\ [%s] = vswitch's cidr [{0}] not in the vpc's [{1}]

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:276
# args: old.getUuid()
cidr\ is\ overlap\ by\ another\ vswitch\:\ %s = cidr is overlap by another vswitch: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:289
# args: msg.getCidrBlock()
invalid\ CidrBlock\:\ %s,\ which\ must\ subnet\ in\ '10.0.0.0/8',\ '172.16.0.0/12',\ '192.168.0.0/16' = invalid CidrBlock: {0}, which must subnet in '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16'

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:305
# args: msg.getvRouterUuid()
no\ such\ virtual\ router\:\ %s = no such virtual router: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:300
# args: msg.getvRouterUuid()
no\ such\ virtual\ border\ router\:\ %s = no such virtual border router: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:312
# args: msg.getLocalGatewayIp()
localGateway\ is\ not\ IPv4\:\ %s = localGateway is not IPv4: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:315
# args: msg.getPeerGatewayIp()
peerGateway\ is\ not\ IPv4\:\ %s = peerGateway is not IPv4: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:318
# args: msg.getPeeringSubnetMask()
peerGateway\ is\ not\ subnet\ mask\:\ %s = peerGateway is not subnet mask: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:322
# args: msg.getVlanId()
vlanId\ is\ not\ number\:\ %s = vlanId is not number: {0}

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:332
# args: msg.getEcsUuid(),msg.getEipUuid(),hevo.getAllocateResourceUuid()
couldn't\ attach\ eip\ to\ ecs\:\ [%s]\ ,\ eip\ \:[%s]\ already\ attached\ ecs\:[%s]\  = couldn't attach eip to ecs: [{0}] , eip :[{1}] already attached ecs:[{2}] 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:337
# args: msg.getEcsUuid()
ecs\ [%s]\ already\ has\ public\ ip\ now = ecs [{0}] already has public ip now

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:343
# args: msg.getEipUuid(),msg.getEcsUuid()
couldn't\ attach\ eip\ [%s]\ to\ ecs\:\ [%s]\ ,\ ecs\ is\ already\ attached = couldn't attach eip [{0}] to ecs: [{1}] , ecs is already attached

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:350
# args: msg.getEipUuid(),msg.getEcsUuid()
eip[%s]\ and\ ecs[%s]\ should\ be\ in\ the\ same\ dataCenter\  = eip[{0}] and ecs[{1}] should be in the same dataCenter 

# at: src/main/java/org/zstack/hybrid/network/HybridNetworkApiInterceptor.java:359
# args: msg.getEipUuid()
couldn't\ detach\ eip\ \:[%s],\ it\ is\ not\ attached\ on\ any\ instance\  = couldn't detach eip :[{0}], it is not attached on any instance 

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:45
# args: msg.getId()
%s\ is\ not\ a\ valid\ ipv4\ address = {0} is not a valid ipv4 address

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:51
# args: 
localCidr\ must\ be\ Cidr! = localCidr must be Cidr!

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:55
# args: 
remoteCidr\ must\ be\ Cidr! = remoteCidr must be Cidr!

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnApiInterceptor.java:62
# args: 
localCidr\ and\ remoteCidr\ must\ be\ Cidr! = localCidr and remoteCidr must be Cidr!

# at: src/main/java/org/zstack/hybrid/network/vpn/VpcVpnGatewayCascadeExtension.java:80
# args: gateways.get(0).getUuid()
vpngateway\ [%s]\ existed,\ cannot\ delete\ remote = vpngateway [{0}] existed, cannot delete remote

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:343
# args: oldSession.getUserUuid()
The\ user[%s]\ is\ not\ a\ platform\ user = The user[{0}] is not a platform user

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:994
# args: results.size()
There\ are\ %d\ problems\ with\ the\ file.\  = There are {0} problems with the file. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1011
# args: e.getMessage()
fail\ to\ load\ VirtualID\ info\ from\ file.\ because\n%s = fail to load VirtualID info from file. because\n{0}

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1022
# args: 
name\ cannot\ be\ empty.\  = name cannot be empty. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1030
# args: cmsg.getUsername()
userName[%s]\ is\ repeated.\  = userName[{0}] is repeated. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1028
# args: cmsg.username.length()
name\ exceeds\ max\ length\ of\ string.\ expected\ was\ <\=\ 255,\ actual\ was\ %s.\  = name exceeds max length of string. expected was <= 255, actual was {0}. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1026
# args: 
username\ cannot\ be\ empty.\  = username cannot be empty. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1036
# args: cmsg.password.length()
Incorrect\ password\ length.\ expected\ was\ >\=\ 6\ and\ <\=\ 255,\ actual\ was\ %s.\  = Incorrect password length. expected was >= 6 and <= 255, actual was {0}. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1034
# args: 
password\ cannot\ be\ empty.\  = password cannot be empty. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1044
# args: 
email\ format\ does\ not\ match.\  = email format does not match. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1100
# args: noMatchNames
organization[%s]\ is\ not\ exist.\  = organization[{0}] is not exist. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1108
# args: repeatNames
organization[%s]\ in\ line\ is\ repeated.\  = organization[{0}] in line is repeated. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1116
# args: repeatNames
organization[%s]\ is\ repeated.\  = organization[{0}] is repeated. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1146
# args: noMatchName
project[%s]\ is\ not\ exist.\  = project[{0}] is not exist. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1340
# args: 
fail\ to\ build\ VirtualID\ info\ from\ file.\  = fail to build VirtualID info from file. 

# at: src/main/java/org/zstack/iam2/IAM2ManagerImpl.java:1469
# args: resourceUuid,projectUuid
virtualID[uuid\:%s]\ not\ in\ project[uuid\:%s] = virtualID[uuid:{0}] not in project[uuid:{1}]

# at: src/main/java/org/zstack/iam2/IAM2OrganizationBase.java:144
# args: self.getUuid()
Can\ not\ do\ operations,\ because\ current\ organization[uuid\:%s]\ is\ staled,\ please\ enable\ it = Can not do operations, because current organization[uuid:{0}] is staled, please enable it

# at: src/main/java/org/zstack/iam2/IAM2OrganizationBase.java:688
# args: puuid,self.getUuid()
organization[uuid\:%s]\ is\ parent\ of\ the\ organization[uuid\:%s],\ cannot\ set\ it\ as\ a\ child\ organization = organization[uuid:{0}] is parent of the organization[uuid:{1}], cannot set it as a child organization

# at: src/main/java/org/zstack/iam2/IAM2ProjectBase.java:130
# args: self.getUuid(),self.getName(),self.getState(),msg.getClass()
the\ project[uuid\:\ %s,\ name\:%s]\ is\ in\ state\ of\ %s\ which\ disallows\ the\ operation[%s] = the project[uuid: {0}, name:{1}] is in state of {2} which disallows the operation[{3}]

# at: src/main/java/org/zstack/iam2/IAM2ProjectBase.java:910
# args: 
can\ not\ parse\ the\ cron\ expression = can not parse the cron expression

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:43
# args: loginContext.getUsername()
project[name\:%s]\ not\ existing = project[name:{0}] not existing

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:51
# args: puuid,loginContext.getUsername()
no\ account\ found\ for\ project[uuid\:%s,\ name\:%s] = no account found for project[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:57
# args: loginContext.getOperatorSession().getUserUuid()
wrong\ virtual\ ID[uuid\:%s],\ not\ existing\ or\ wrong\ password = wrong virtual ID[uuid:{0}], not existing or wrong password

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:62
# args: vid.getName()
virtual\ ID[name\:%s]\ is\ disabled = virtual ID[name:{0}] is disabled

# at: src/main/java/org/zstack/iam2/IAM2ProjectLoginBackend.java:72
# args: vid.getName(),loginContext.getUsername()
virtual\ ID[name\:%s]\ not\ belonging\ to\ the\ project[name\:%s] = virtual ID[name:{0}] not belonging to the project[name:{1}]

# at: src/main/java/org/zstack/iam2/IAM2QuotaUpdateChecker.java:75
# args: quota.getName(),quota.getIdentityUuid(),updatedValue,organizationUuid
the\ quota[name\:%s]\ of\ Account[uuid\:%s]\ can\ not\ be\ %d,\ otherwise\ it\ will\ exceeds\ the\ quota\ of\ organization[uuid\:%s] = the quota[name:{0}] of Account[uuid:{1}] can not be {2}, otherwise it will exceeds the quota of organization[uuid:{3}]

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:256
# args: self.getUuid()
Can\ not\ do\ operations,\ because\ Current\ virtualID[uuid\:%s]\ is\ staled,\ please\ enable\ it = Can not do operations, because Current virtualID[uuid:{0}] is staled, please enable it

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:649
# args: 
only\ admin\ and\ the\ virtual\ ID\ itself\ can\ do\ the\ update = only admin and the virtual ID itself can do the update

# at: src/main/java/org/zstack/iam2/IAM2VirtualIDBase.java:653
# args: msg.getVirtualIDUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ virtual\ ID[uuid\:%s] = old password is not equal to the original password, cannot update the password of virtual ID[uuid:{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:50
# args: attr.getValue()
attribute\ name\ cannot\ be\ null,\ value[%s] = attribute name cannot be null, value[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:54
# args: attr.getName()
attribute\ name[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = attribute name[{0}] exceed the max length of 2048 chars

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:57
# args: attr.getName(),attr.getValue()
attribute[name\:%s]\ value[%s]\ exceed\ the\ max\ length\ of\ 2048\ chars = attribute[name:{0}] value[{1}] exceed the max length of 2048 chars

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:173
# args: msg.getOrganizationUuid(),msg.getName(),projectUsed,msg.getValue()
The\ Organization[uuid\:\ %s]\ used\ [name\:\ %s,\ usedValue\:\ %s]\ exceeds\ Request\:%s. = The Organization[uuid: {0}] used [name: {1}, usedValue: {2}] exceeds Request:{3}.

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:186
# args: msg.getLoginExpired()
%s\ is\ not\ a\ valid\ value.\ Valid\ values\ are\ \ allow/rejection\ \ xxx\ to\ xxx = {0} is not a valid value. Valid values are  allow/rejection  xxx to xxx

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:192
# args: msg.getUuid()
The\ default\ organization[%s]\ cannot\ be\ deleted = The default organization[{0}] cannot be deleted

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:201
# args: msg.getName()
duplicate\ template\ name[%s] = duplicate template name[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:652
# args: IAM2RolePolicyStatementHelper.PROJECT_ADMIN_ROLE_NAME
illegal\ operation,\ cannot\ add\ Role[%s] = illegal operation, cannot add Role[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:265
# args: 
admin\ is\ a\ reserved\ name,\ please\ use\ another\ name = admin is a reserved name, please use another name

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:273
# args: msg.getName()
invalid\ name[%s],\ there\ has\ been\ a\ project\ or\ account\ with\ the\ same\ name = invalid name[{0}], there has been a project or account with the same name

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:281
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ group = attribute[uuid:{0}] is not for any group

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:289
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ organization = attribute[uuid:{0}] is not for any organization

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:297
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ project = attribute[uuid:{0}] is not for any project

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:305
# args: msg.getUuid()
attribute[uuid\:%s]\ is\ not\ for\ any\ virtual\ ID = attribute[uuid:{0}] is not for any virtual ID

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:325
# args: 
retire\ policy\ must\ be\ deleted\ before\ pull\ the\ project\ out\ of\ Retired\ state = retire policy must be deleted before pull the project out of Retired state

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:337
# args: state
login\ is\ prohibited\ because\ the\ project\ is\ in\ state\ of\ %s = login is prohibited because the project is in state of {0}

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:347
# args: name
no\ quota[name\:%s]\ found = no quota[name:{0}] found

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:371
# args: msg.getUuid()
organization[uuid\:%s]\ is\ a\ Company\ that\ cannot\ have\ parent\ organization = organization[uuid:{0}] is a Company that cannot have parent organization

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:381
# args: msg.getUuid(),msg.getParentUuid()
parent\ organization[uuid\:%s]\ cannot\ be\ a\ child\ organization[uuid\:%s]\ of\ a\ childOrganization = parent organization[uuid:{0}] cannot be a child organization[uuid:{1}] of a childOrganization

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:400
# args: msg.getName()
duplicate\ virtualID\ name[%s] = duplicate virtualID name[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:418
# args: msg.getName()
duplicate\ project\ name[%s] = duplicate project name[{0}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:426
# args: msg.getName()
invalid\ project\ name[%s],\ an\ account\ or\ project\ with\ the\ same\ name\ exists = invalid project name[{0}], an account or project with the same name exists

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:432
# args: msg.getOrganizationUuid()
IAM2OrganizationVO[uuid\:%s]\ is\ not\ exists = IAM2OrganizationVO[uuid:{0}] is not exists

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:515
# args: refVO.getProjectUuid(),refVO.getOrganizationUuid()
The\ project[uuid\=%s]\ has\ been\ attached\ to\ the\ organization[uuid\=%s] = The project[uuid={0}] has been attached to the organization[uuid={1}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:557
# args: msg.getProjectUuid()
The\ project[uuid\=%s]\ is\ not\ attached = The project[uuid={0}] is not attached

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:568
# args: uuids
organizations%s\ are\ company\ that\ cannot\ be\ children\ of\ other\ organization = organizations{0} are company that cannot be children of other organization

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:582
# args: msg.getVirtualIDUuid(),msg.getProjectUuid()
virtual\ id[uuid\:\ %s]\ is\ not\ in\ project[uuid\:\ %s] = virtual id[uuid: {0}] is not in project[uuid: {1}]

# at: src/main/java/org/zstack/iam2/api/IAM2ApiInterceptor.java:679
# args: staleVirtualIDs
can\ not\ operate\ stale\ virtual\ ids\:\ %s = can not operate stale virtual ids: {0}

# at: src/main/java/org/zstack/iam2/attribute/SystemAttributes.java:69
# args: 
attribute[name\:%s]\ is\ a\ system\ attribute\ that\ cannot\ be\ updated = attribute[name:{0}] is a system attribute that cannot be updated

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:38
# args: inv.getValue()
virtual\ ID[uuid\:%s]\ not\ existing = virtual ID[uuid:{0}] not existing

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:45
# args: inv.getValue(),((IAM2OrganizationAttributeInventory) inv).getOrganizationUuid()
virtual\ ID[uuid\:%s]\ not\ in\ organization[uuid\:%s] = virtual ID[uuid:{0}] not in organization[uuid:{1}]

# at: src/main/java/org/zstack/iam2/attribute/organization/OrganizationSupervisor.java:50
# args: oinv.getOrganizationUuid()
organization[uuid\:%s]\ already\ has\ a\ supervisor = organization[uuid:{0}] already has a supervisor

# at: src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java:58
# args: pinv.getUuid(),pinv.getName()
the\ project[uuid\:%s,\ name\:%s]\ already\ has\ a\ login\ expired\ strategy = the project[uuid:{0}, name:{1}] already has a login expired strategy

# at: src/main/java/org/zstack/iam2/attribute/project/LoginExpired.java:109
# args: projectUuid,ProjectState.Enabled.toString()
IAM2ProjectVO[uuid\:%s]\ is\ not\ %s,\ state\ change\ is\ not\ allowed = IAM2ProjectVO[uuid:{0}] is not {1}, state change is not allowed

# at: src/main/java/org/zstack/iam2/attribute/project/Retire.java:65
# args: pinv.getUuid(),pinv.getName()
the\ project[uuid\:%s,\ name\:%s]\ already\ has\ a\ retire\ policy = the project[uuid:{0}, name:{1}] already has a retire policy

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:53
# args: 
invalid\ value,\ no\ 'at',\ 'after'\ or\ 'exceed'\ found = invalid value, no 'at', 'after' or 'exceed' found

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:58
# args: value
invalid\ value,\ %s = invalid value, {0}

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:64
# args: ss[0],Arrays.asList(Means.values()).toString()
invalid\ means[%s],\ allowed\ means\ are\ %s = invalid means[{0}], allowed means are {1}

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:100
# args: policyValue
invalid\ spending\ value[%s],\ it\ should\ be\ in\ format\ of\ for\ example\ 10.001 = invalid spending value[{0}], it should be in format of for example 10.001

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:94
# args: policyValue,Double.MAX_VALUE
invalid\ spending\ value[%s],\ spending\ value\ should\ between\ 0\ and\ %f = invalid spending value[{0}], spending value should between 0 and {1}

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:87
# args: policyValue
invalid\ time[%s],\ it\ should\ be\ in\ format\ of\ for\ example\ 10m,\ 1h,\ 2d = invalid time[{0}], it should be in format of for example 10m, 1h, 2d

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:78
# args: policyValue
invalid\ date[%s],\ it\ should\ be\ in\ format\ of\ yyyy-MM-dd\ HH\:mm\:ss = invalid date[{0}], it should be in format of yyyy-MM-dd HH:mm:ss

# at: src/main/java/org/zstack/iam2/attribute/project/RetirePolicy.java:107
# args: policyValue,dateFormat.format(new Timestamp(System.currentTimeMillis()))
invalid\ date\ or\ time[%s],\ it\ cannot\ be\ before\ current\ time[%s] = invalid date or time[{0}], it cannot be before current time[{1}]

# at: src/main/java/org/zstack/iam2/attribute/virtualid/AbstractAdminAttribute.java:17
# args: vid,attributeName
virtual\ ID[uuid\:%s]\ already\ has\ admin\ related\ attributes,\ can\ not\ add\ %s = virtual ID[uuid:{0}] already has admin related attributes, can not add {1}

# at: src/main/java/org/zstack/iam2/attribute/virtualid/IAM2OrganizationOperator.java:29
# args: inv.getValue(),IAM2_ORGANIZATION_OPERATION.getName()
organiztion\ ID[uuid\:%s]\ already\ has\ opoeration\ attributes,\ can\ not\ add\ %s = organiztion ID[uuid:{0}] already has opoeration attributes, can not add {1}

# at: src/main/java/org/zstack/iam2/attribute/virtualid/IAM2ProjectOperator.java:35
# args: idinv.getVirtualIDUuid()
virtual\ id[uuid\:%s]\ already\ has\ a\ project\ operator\ attribute = virtual id[uuid:{0}] already has a project operator attribute

# at: src/main/java/org/zstack/iam2/attribute/virtualid/PlatformAdminZoneRelation.java:36
# args: inv.getValue()
cannot\ find\ zone[uuid\:%s] = cannot find zone[uuid:{0}]

# at: src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:71
# args: inv.getValue()
project[uuid\:%s]\ already\ has\ a\ project\ admin = project[uuid:{0}] already has a project admin

# at: src/main/java/org/zstack/iam2/attribute/virtualid/ProjectAdmin.java:83
# args: inv.getValue()
project[uuid\:%s]\ not\ existing = project[uuid:{0}] not existing

# at: src/main/java/org/zstack/iam2/rbac/IAM2AuthorizationBackend.java:133
# args: deniedApis
the\ operations[%s]\ is\ denied = the operations[{0}] is denied

# at: src/main/java/org/zstack/iam2/rbac/IAM2OperationTargetAPIRequestChecker.java:114
# args: 
since\ the\ project\ starts\ the\ force\ securityGroup,\ systemtag\ is\ required\ for\ VM\ operation = since the project starts the force securityGroup, systemtag is required for VM operation

# at: src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java:28
# args: session.getAccountUuid()
project\ of\ account[uuid\:%s]\ not\ exists = project of account[uuid:{0}] not exists

# at: src/main/java/org/zstack/iam2/rbac/IAM2SessionAPIRequestChecker.java:37
# args: projectUuid
project[uuid\:%s]\ is\ retired,\ reject\ all\ operations = project[uuid:{0}] is retired, reject all operations

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:107
# args: 
system\ tag\ requested.\ need\ specify\ default\ security\ group\ for\ vm\ nic\ by\ system\ tag\ L3_NETWORK_SECURITY_GROUP_uuidS_REF\ with\ format\ l3\:\:{%s}\:\:SecurityGroupUuids\:\:{%s},\ because\ force\ security\ group\ is\ enabled = system tag requested. need specify default security group for vm nic by system tag L3_NETWORK_SECURITY_GROUP_uuidS_REF with format l3::'{{0}'}::SecurityGroupUuids::'{{1}'}, because force security group is enabled

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:114
# args: l3Uuid,msg.getL3NetworkUuid()
the\ l3Uuid[%s]\ in\ the\ label\ is\ inconsistent\ with\ the\ l3Uuid[%s]\ in\ the\ parameter = the l3Uuid[{0}] in the label is inconsistent with the l3Uuid[{1}] in the parameter

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:124
# args: projectUuid
since\ force\ security\ group\ is\ enabled,\ securityGroupUuid\ in\ the\ tag\ must\ be\ in\ the\ project[%s] = since force security group is enabled, securityGroupUuid in the tag must be in the project[{0}]

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:145
# args: msg.getL3NetworkUuid(),msg.getSecurityGroupUuid()
nics\ on\ the\ l3Network[uuid\:%s]\ are\ attached\ to\ the\ securityGroup.\ before\ you\ can\ detach\ the\ l3Network\ from\ the\ securityGroup,\ you\ need\ to\ detach\ the\ nics\ from\ the\ securityGroup. = nics on the l3Network[uuid:{0}] are attached to the securityGroup. before you can detach the l3Network from the securityGroup, you need to detach the nics from the securityGroup.

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:161
# args: msg.getUuid()
the\ default\ security\ group\ %s\ cannot\ be\ deleted\ by\ enabling\ the\ enforced\ security\ group\ function = the default security group {0} cannot be deleted by enabling the enforced security group function

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:165
# args: msg.getUuid()
this\ security\ group\ %s\ is\ bound\ to\ vm,\ please\ try\ again\ after\ unbinding = this security group {0} is bound to vm, please try again after unbinding

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:175
# args: sessionInventory.getAccountUuid(),securityGroupUuid
account[%s]\ cannot\ operation\ the\ default\ securityGroup[%s] = account[{0}] cannot operation the default securityGroup[{1}]

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:187
# args: msg.getSession().getAccountUuid()
account[%s]\ not\ allowed\ to\ operate\ on\ default\ securityGroup = account[{0}] not allowed to operate on default securityGroup

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupApiInterceptor.java:241
# args: refVOS.stream().map(VmNicSecurityGroupRefVO::getVmNicUuid).collect(Collectors.joining(",")),msg.getSecurityGroupUuid()
vm's\ nic[uuid\:%s]\ only\ has\ one\ security\ group,\ can\ not\ delete\ the\ nic\ from\ security\ group[uuid\:%s] = vm's nic[uuid:{0}] only has one security group, can not delete the nic from security group[uuid:{1}]

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java:60
# args: projectUuid
can't\ find\ the\ quota\ for\ the\ security\ group\ for\ the\ corresponding\ project\ %s = can't find the quota for the security group for the corresponding project {0}

# at: src/main/java/org/zstack/iam2/securitygroup/IAM2ProjectSecurityGroupFactory.java:64
# args: 
security\ group\ quota\ cannot\ less\ than\ 1 = security group quota cannot less than 1

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:35
# args: 
The\ iam2\ script\ function\ is\ not\ enabled. = The iam2 script function is not enabled.

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:39
# args: 
Script\ doesn't\ have\ any\ content. = Script doesn't have any content.

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:45
# args: 
The\ amount\ of\ params\ exceeds\ the\ limit. = The amount of params exceeds the limit.

# at: src/main/java/org/zstack/iam2script/IAM2ScriptInterceptor.java:61
# args: 
Specified\ script\ executor\ are\ not\ supported. = Specified script executor are not supported.

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:139
# args: 
Decode\ script\ content\ failed. = Decode script content failed.

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:147
# args: 
Script\ content\ is\ blank. = Script content is blank.

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:179
# args: 
Run\ iam2\ script\ failed. = Run iam2 script failed.

# at: src/main/java/org/zstack/iam2script/IAM2ScriptManagerImpl.java:244
# args: 
Cannot\ read\ the\ result\ of\ the\ script\ running. = Cannot read the result of the script running.

# at: src/main/java/org/zstack/identity/AccountBase.java:327
# args: group.getUuid(),msg.getAccountUuid()
the\ user\ group[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = the user group[uuid:{0}] does not belong to the account[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:528
# args: self.getUuid(),ruuid
the\ account[uuid\:\ %s]\ doesn't\ have\ a\ resource[uuid\:\ %s] = the account[uuid: {0}] doesn't have a resource[uuid: {1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:590
# args: user.getUuid(),msg.getAccountUuid()
the\ user[uuid\:%s]\ does\ not\ belong\ to\ the\ account[uuid\:%s] = the user[uuid:{0}] does not belong to the account[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountBase.java:595
# args: user.getUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ user[uuid\:%s] = old password is not equal to the original password, cannot update the password of user[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountInterceptor.java:55
# args: 
wrong\ password = wrong password

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1660
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ effect\ field.\ Invalid\ statement[%s] = a statement must have effect field. Invalid statement[{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1663
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ action\ field.\ Invalid\ statement[%s] = a statement must have action field. Invalid statement[{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1666
# args: JSONObjectUtil.toJsonString(s)
a\ statement\ must\ have\ a\ non-empty\ action\ field.\ Invalid\ statement[%s] = a statement must have a non-empty action field. Invalid statement[{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:175
# args: resourceUuid
cannot\ find\ the\ resource[uuid\:%s];\ wrong\ resourceUuid\ or\ the\ resource\ is\ admin\ resource = cannot find the resource[uuid:{0}]; wrong resourceUuid or the resource is admin resource

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:405
# args: msg.getUserUuid()
the\ user\ specified\ by\ the\ userUuid[%s]\ does\ not\ belong\ to\ the\ current\ account,\ and\ the\ current\ account\ is\ not\ an\ admin\ account,\ so\ it\ has\ no\ permission\ to\ check\ the\ user'spermissions = the user specified by the userUuid[{0}] does not belong to the current account, and the current account is not an admin account, so it has no permission to check the user'spermissions

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1055
# args: accountUuid
cannot\ find\ the\ account[uuid\:%s] = cannot find the account[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1495
# args: 
accountName\ and\ accountUuid\ cannot\ both\ be\ null,\ you\ must\ specify\ at\ least\ one = accountName and accountUuid cannot both be null, you must specify at least one

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1506
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ group.\ A\ group\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = unable to create a group. A group called {0} is already under the account[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1516
# args: msg.getName(),msg.getAccountUuid()
unable\ to\ create\ a\ user.\ A\ user\ called\ %s\ is\ already\ under\ the\ account[uuid\:%s] = unable to create a user. A user called {0} is already under the account[uuid:{1}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1525
# args: msg.getName()
unable\ to\ create\ an\ account.\ An\ account\ already\ called\ %s = unable to create an account. An account already called {0}

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1532
# args: 
account\ cannot\ delete\ itself = account cannot delete itself

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1538
# args: 
cannot\ delete\ builtin\ admin\ account. = cannot delete builtin admin account.

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1544
# args: 
Only\ admin\ can\ delete\ account. = Only admin can delete account.

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1552
# args: 
the\ current\ session\ is\ an\ account\ session.\ You\ need\ to\ specify\ the\ field\ 'uuid'\ of\ the\ user\ you\ want\ to\ update = the current session is an account session. You need to specify the field 'uuid' of the user you want to update

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1567
# args: msg.getUuid()
your\ are\ login\ as\ a\ user,\ you\ cannot\ another\ user[uuid\:%s] = your are login as a user, you cannot another user[uuid:{0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1575
# args: 
all\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = all is set to false, accountUuids cannot be null or empty

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1583
# args: 
toPublic\ is\ set\ to\ false,\ accountUuids\ cannot\ be\ null\ or\ empty = toPublic is set to false, accountUuids cannot be null or empty

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1632
# args: policy.getName(),policy.getUuid(),msg.getSession().getAccountUuid()
policy[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = policy[name: {0}, uuid: {1}] doesn't belong to the account[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1646
# args: user.getName(),user.getUuid(),msg.getSession().getAccountUuid()
user[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = user[name: {0}, uuid: {1}] doesn't belong to the account[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1650
# args: group.getName(),group.getUuid(),msg.getSession().getAccountUuid()
group[name\:\ %s,\ uuid\:\ %s]\ doesn't\ belong\ to\ the\ account[uuid\:\ %s] = group[name: {0}, uuid: {1}] doesn't belong to the account[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1691
# args: msg.getName()
unable\ to\ update\ name.\ An\ account\ already\ called\ %s = unable to update name. An account already called {0}

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1702
# args: msg.getUuid()
old\ password\ is\ not\ equal\ to\ the\ original\ password,\ cannot\ update\ the\ password\ of\ account[uuid\:\ %s] = old password is not equal to the original password, cannot update the password of account[uuid: {0}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1707
# args: 
the\ name\ of\ admin\ account\ cannot\ be\ updated = the name of admin account cannot be updated

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1713
# args: 
only\ admin\ account\ can\ update\ it's\ password = only admin account can update it's password

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1720
# args: account.getUuid(),account.getName(),msg.getUuid()
account[uuid\:\ %s,\ name\:\ %s]\ is\ a\ normal\ account,\ it\ cannot\ reset\ the\ password\ of\ another\ account[uuid\:\ %s] = account[uuid: {0}, name: {1}] is a normal account, it cannot reset the password of another account[uuid: {2}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1731
# args: msg.getName(),msg.getIdentityUuid()
cannot\ find\ Quota[name\:\ %s]\ for\ the\ account[uuid\:\ %s] = cannot find Quota[name: {0}] for the account[uuid: {1}]

# at: src/main/java/org/zstack/identity/AccountManagerImpl.java:1738
# args: quota.getIdentityUuid(),quota.getIdentityType()
can\ not\ find\ quota\ update\ checker\ for\ quota[uuid\:%s,\ type\:%s] = can not find quota update checker for quota[uuid:{0}, type:{1}]

# at: src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java:32
# args: quota.getName(),quota.getIdentityUuid(),updatedValue
the\ quota[name\:%s]\ of\ account[uuid\:%s]\ can\ not\ be\ %d = the quota[name:{0}] of account[uuid:{1}] can not be {2}

# at: src/main/java/org/zstack/identity/AccountQuotaUpdateChecker.java:54
# args: accountUuid,quotaName,used,updatedValue
the\ account[uuid\:%s]\ used\ [name\:%s,\ usedValue\:%s]\ exceeds\ request\ quota\:\ %d = the account[uuid:{0}] used [name:{1}, usedValue:{2}] exceeds request quota: {3}

# at: src/main/java/org/zstack/identity/login/LoginManagerImpl.java:46
# args: loginType
unsupported\ login\ type\ %s = unsupported login type {0}

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:180
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),uuid,resourceType.getSimpleName()
permission\ denied,\ the\ account[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ resource[uuid\:%s,\ type\:%s] = permission denied, the account[uuid:{0}] is not the owner of the resource[uuid:{1}, type:{2}]

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:228
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),uuid,type
permission\ denied,\ the\ account[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ tagged\ resource[uuid\:%s,\ type\:%s] = permission denied, the account[uuid:{0}] is not the owner of the tagged resource[uuid:{1}, type:{2}]

# at: src/main/java/org/zstack/identity/rbac/OperationTargetAPIRequestChecker.java:251
# args: rbacEntity.getApiMessage().getSession().getAccountUuid(),resourceWithNoAccess,resourceType.getSimpleName()
the\ account[uuid\:%s]\ has\ no\ access\ to\ the\ resources[uuid\:%s,\ type\:%s] = the account[uuid:{0}] has no access to the resources[uuid:{1}, type:{2}]

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:80
# args: rbacEntity.getApiMessage().getClass().getName()
operation[API\:%s]\ is\ denied\ by\ default,\ please\ contact\ admin\ to\ correct\ it = operation[API:{0}] is denied by default, please contact admin to correct it

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:187
# args: p.getName(),p.getUuid()
the\ operation\ is\ denied\ by\ the\ policy[name\:%s\ uuid\:%s] = the operation is denied by the policy[name:{0} uuid:{1}]

# at: src/main/java/org/zstack/identity/rbac/RBACAPIRequestChecker.java:200
# args: p.getName(),p.getUuid(),fname
the\ operation\ is\ denied\ by\ the\ policy[name\:%s,\ uuid\:%s],\ field[%s]\ is\ not\ permitted\ to\ set = the operation is denied by the policy[name:{0}, uuid:{1}], field[{2}] is not permitted to set

# at: src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java:92
# args: 
cannot\ update\ a\ system\ or\ predefined\ role = cannot update a system or predefined role

# at: src/main/java/org/zstack/identity/rbac/RBACApiInterceptor.java:108
# args: 
cannot\ delete\ a\ system\ or\ predefined\ role = cannot delete a system or predefined role

# at: src/main/java/org/zstack/image/AddImageLongJob.java:187
# args: 
Failed\ because\ management\ node\ restarted. = Failed because management node restarted.

# at: src/main/java/org/zstack/image/BackupStorageDeleteBitGC.java:35
# args: backupStorageUuid,bsStatus
the\ backup\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = the backup storage[uuid:{0}] is not in status of Connected, current status is {1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:101
# args: 
The\ aarch64\ architecture\ does\ not\ support\ legacy. = The aarch64 architecture does not support legacy.

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:108
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = volume[uuid:{0}] is not Ready, it's {1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:112
# args: vol.getUuid(),vol.getState()
volume[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = volume[uuid:{0}] is not Enabled, it's {1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:119
# args: vsvo.getUuid(),vsvo.getStatus()
volume\ snapshot[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = volume snapshot[uuid:{0}] is not Ready, it's {1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:123
# args: vsvo.getUuid(),vsvo.getState()
volume\ snapshot[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = volume snapshot[uuid:{0}] is not Enabled, it's {1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:142
# args: 
ISO\ cannot\ be\ used\ as\ system\ image = ISO cannot be used as system image

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:148
# args: msg.getFormat()
unknown\ format[%s] = unknown format[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:152
# args: msg.getType()
unsupported\ image\ type[%s] = unsupported image type[{0}]

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:169
# args: msg.getBackupStorageUuids(),BackupStorageStatus.Connected,BackupStorageState.Enabled
no\ backup\ storage\ specified\ in\ uuids%s\ is\ available\ for\ adding\ this\ image;\ they\ are\ not\ in\ status\ %s\ or\ not\ in\ state\ %s,\ or\ the\ uuid\ is\ invalid\ backup\ storage\ uuid = no backup storage specified in uuids{0} is available for adding this image; they are not in status {1} or not in state {2}, or the uuid is invalid backup storage uuid

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:180
# args: 
url\ must\ starts\ with\ 'file\:///',\ 'http\://',\ 'https\://'，\ 'ftp\://',\ 'sftp\://'\ or\ '/' = url must starts with 'file:///', 'http://', 'https://'， 'ftp://', 'sftp://' or '/'

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:191
# args: path
absolute\ path\ must\ be\ used = absolute path must be used

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:214
# args: path,blackList.value()
image\ path\ [%s]\ is\ in\ black\ list\ %s = image path [{0}] is in black list {1}

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:223
# args: 
all\ images\ on\ this\ server\ cannot\ be\ used = all images on this server cannot be used

# at: src/main/java/org/zstack/image/ImageApiInterceptor.java:228
# args: whiteList.value()
image\ path\ is\ not\ in\ white\ list\:\ %s = image path is not in white list: {0}

# at: src/main/java/org/zstack/image/ImageBase.java:214
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ any\ backup\ storage = the image[uuid:{0}, name:{1}] is not on any backup storage

# at: src/main/java/org/zstack/image/ImageBase.java:224
# args: self.getUuid(),self.getName()
No\ connected\ backup\ storage\ found\ for\ image[uuid\:%s,\ name\:%s] = No connected backup storage found for image[uuid:{0}, name:{1}]

# at: src/main/java/org/zstack/image/ImageBase.java:416
# args: msg.getImageUuid(),JSONObjectUtil.toJsonString(errors)
detach\ iso[uuid\=%s]\ from\ vm\ failed,\ errors\ are\ %s = detach iso[uuid={0}] from vm failed, errors are {1}

# at: src/main/java/org/zstack/image/ImageBase.java:782
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ on\ the\ backup\ storage[uuid\:%s] = the image[uuid:{0}, name:{1}] is not on the backup storage[uuid:{2}]

# at: src/main/java/org/zstack/image/ImageBase.java:724
# args: self.getUuid(),self.getName(),ref.getStatus(),bsUuid
the\ image[uuid\:%s,\ name\:%s]'s\ status[%s]\ is\ not\ Deleted\ on\ the\ backup\ storage[uuid\:%s] = the image[uuid:{0}, name:{1}]'s status[{2}] is not Deleted on the backup storage[uuid:{3}]

# at: src/main/java/org/zstack/image/ImageBase.java:766
# args: self.getUuid(),self.getName()
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ any\ backup\ storage = the image[uuid:{0}, name:{1}] is not deleted on any backup storage

# at: src/main/java/org/zstack/image/ImageBase.java:787
# args: self.getUuid(),self.getName(),bsUuid
the\ image[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ on\ the\ backup\ storage[uuid\:%s] = the image[uuid:{0}, name:{1}] is not deleted on the backup storage[uuid:{2}]

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:812
# args: bootModeCount
only\ one\ bootMode\ system\ tag\ is\ allowed,\ but\ %d\ got = only one bootMode system tag is allowed, but {0} got

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:830
# args: bootMode,systemTag
[%s]\ specified\ in\ system\ tag\ [%s]\ is\ not\ a\ valid\ boot\ mode = [{0}] specified in system tag [{1}] is not a valid boot mode

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1455
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
unable\ to\ allocate\ backup\ storage\ specified\ by\ uuids%s,\ list\ errors\ are\:\ %s = unable to allocate backup storage specified by uuids{0}, list errors are: {1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1581
# args: rootVolumeUuid
failed\ to\ create\ image\ from\ root\ volume[uuid\:%s]\ on\ all\ backup\ storage,\ see\ cause\ for\ one\ of\ errors = failed to create image from root volume[uuid:{0}] on all backup storage, see cause for one of errors

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1809
# args: msgData.getBackupStorageUuids(),JSONObjectUtil.toJsonString(errs)
failed\ to\ allocate\ all\ backup\ storage[uuid\:%s],\ a\ list\ of\ error\:\ %s = failed to allocate all backup storage[uuid:{0}], a list of error: {1}

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1779
# args: 
cannot\ find\ proper\ backup\ storage = cannot find proper backup storage

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1922
# args: volumeUuid,msgData.getBackupStorageUuids()
failed\ to\ create\ data\ volume\ template\ from\ volume[uuid\:%s]\ on\ all\ backup\ storage%s.\ See\ cause\ for\ one\ of\ errors = failed to create data volume template from volume[uuid:{0}] on all backup storage{1}. See cause for one of errors

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:1999
# args: imageUuid
image[uuid\:%s]\ is\ not\ on\ creating,\ please\ wait\ for\ it\ to\ cancel\ itself. = image[uuid:{0}] is not on creating, please wait for it to cancel itself.

# at: src/main/java/org/zstack/image/ImageManagerImpl.java:2005
# args: volumeUuid
volume[uuid\:%s]\ has\ been\ deleted.\ no\ need\ to\ cancel = volume[uuid:{0}] has been deleted. no need to cancel

# at: src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java:48
# args: 
Failed\ to\ set\ security\ level,\ because\ security\ level\ is\ disabled. = Failed to set security level, because security level is disabled.

# at: src/main/java/org/zstack/image/ImageMevocoApiInterceptor.java:58
# args: msg.getSecurityLevel(),Arrays.stream(SecurityLevel.values()).map(SecurityLevel::getCode).collect(Collectors.toList())
Unknown\ security\ level\ code[%s],\ supported\ values\ are\ %s = Unknown security level code[{0}], supported values are {1}

# at: src/main/java/org/zstack/image/UploadImageTracker.java:197
# args: 
upload\ session\ expired = upload session expired

# at: src/main/java/org/zstack/imagereplicator/ImageReplicatorImpl.java:366
# args: targetBsUuid
target\ backup\ storage[uuid\:%s]\ became\ unavailable = target backup storage[uuid:{0}] became unavailable

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:30
# args: String.join(",", msg.getBackupStorageUuids()),msg.getReplicationGroupUuid()
One\ or\ more\ backup\ storage[uuids\:%s]\ has\ been\ added\ to\ replication\ group[uuid\:%s] = One or more backup storage[uuids:{0}] has been added to replication group[uuid:{1}]

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:41
# args: bsUuid
Backup\ storage[uuids\:%s]\ is\ not\ of\ type\ ImageStore = Backup storage[uuids:{0}] is not of type ImageStore

# at: src/main/java/org/zstack/imagereplicator/ReplicationGroupApiInterceptor.java:51
# args: bsUuid
Backup\ storage[uuids\:%s]\ is\ not\ attached\ to\ any\ Zone = Backup storage[uuids:{0}] is not attached to any Zone

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:65
# args: l3NetworkUuid
Network\ [uuid\:\ %s]\ does't\ not\ have\ IPsec\ service = Network [uuid: {0}] does't not have IPsec service

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:74
# args: rcidr
the\ remote\ CIDR[%s]\ is\ same\ to\ existed\ cidrs = the remote CIDR[{0}] is same to existed cidrs

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:86
# args: rcidr,tempCidr
the\ remote\ CIDR[%s]\ and\ remote\ CIDR[%s]\ are\ overlaped = the remote CIDR[{0}] and remote CIDR[{1}] are overlaped

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:109
# args: lcidr,tempCidr
the\ CIDR[%s]\ of\ local\ router\ and\ remote\ CIDR[%s]\ are\ overlaped = the CIDR[{0}] of local router and remote CIDR[{1}] are overlaped

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:122
# args: 
all\ networks\ in\ same\ IPsecConnection\ should\ be\ same\ type = all networks in same IPsecConnection should be same type

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:128
# args: L3NetworkConstant.L3_BASIC_NETWORK_TYPE
IPsecConnection\ can\ ONLY\ have\ 1\ network\ for\ %s = IPsecConnection can ONLY have 1 network for {0}

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:140
# args: l3Uuid
L3Network\ [uuid\:\ %s]\ has\ not\ been\ attached\ to\ vpc\ router = L3Network [uuid: {0}] has not been attached to vpc router

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:162
# args: vrUuids.toArray()[0]
there\ is\ no\ master\ vpc\ for\ ha\ group\ %s = there is no master vpc for ha group {0}

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:159
# args: 
all\ networks\ in\ same\ IPsecConnection\ must\ be\ attached\ to\ same\ VPC\ router = all networks in same IPsecConnection must be attached to same VPC router

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:172
# args: masterUuid
there\ is\ a\ vpc[%s]\ using\ old\ ipsec\ plugin,\ upgrade\ it\ to\ create\ ipsec = there is a vpc[{0}] using old ipsec plugin, upgrade it to create ipsec

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:185
# args: tuples.get(0).get(0, String.class),tuples.get(0).get(1, String.class)
there\ already\ have\ ipsec\ connection[uuid\:%s,\ name\:%s]\ with\ the\ same\ vrouter\ and\ peerAddress = there already have ipsec connection[uuid:{0}, name:{1}] with the same vrouter and peerAddress

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:209
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ has\ been\ used\ for\ %s = the vip[uuid:{0}] has been used for {1}

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:214
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ cannot\ be\ the\ same\ to\ the\ VIP\ address = the peerAddress[{0}] cannot be the same to the VIP address

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:218
# args: msg.getPeerAddress()
the\ peerAddress[%s]\ is\ not\ an\ IPv4\ address = the peerAddress[{0}] is not an IPv4 address

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:230
# args: 
the\ authKey\ cannot\ contain\ white\ space\ and\ special\ characters\ of\ '\"`\\ = the authKey cannot contain white space and special characters of '\"`\\

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:249
# args: vipVO.getIp()
Ipsec\ VIP\ [%s]\ cannot\ be\ the\ first\ or\ the\ last\ IP\ of\ the\ CIDR\ with\ the\ public\ address\ pool\ type = Ipsec VIP [{0}] cannot be the first or the last IP of the CIDR with the public address pool type

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:281
# args: 
must\ include\ l3\ networks\ in\ APIAttachL3NetworksToIPsecConnectionMsg = must include l3 networks in APIAttachL3NetworksToIPsecConnectionMsg

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:288
# args: l3NetworkUuid
L3\ network\ [%s]\ is\ not\ vpc\ network,\ can\ not\ be\ attached\ or\ detached\ to\ ipsec = L3 network [{0}] is not vpc network, can not be attached or detached to ipsec

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:269
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ can\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s]twice = L3 network [{0}] can not be attached to ipsec [uuid :{1}]twice

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:292
# args: l3NetworkUuid,msg.getIPsecConnectionUuid()
L3\ network\ [%s]\ is\ not\ be\ attached\ to\ ipsec\ [uuid\ \:%s] = L3 network [{0}] is not be attached to ipsec [uuid :{1}]

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:302
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ already\ in\ the\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = Cidr [{0}] is already in the Cidrs of ipsec [uuid :{1}]

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:316
# args: cidr,msg.getIPsecConnectionUuid()
Cidr\ [%s]\ is\ not\ in\ Cidrs\ of\ ipsec\ [uuid\ \:%s] = Cidr [{0}] is not in Cidrs of ipsec [uuid :{1}]

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:324
# args: msg.getUuid()
can\ not\ change\ state\ because\ ipsec\ [uuid\:%s]\ status\ is\ not\ ready = can not change state because ipsec [uuid:{0}] status is not ready

# at: src/main/java/org/zstack/ipsec/IPsecApiInterceptor.java:330
# args: msg.getUuid()
could\ not\ reconnect\ this\ ipsec\ [uuid\:%s],\ please\ upgrade\ ipsec\ version = could not reconnect this ipsec [uuid:{0}], please upgrade ipsec version

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:133
# args: msg.getIPsecConnectionUuid()
cannot\ find\ the\ IPsecconnection[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the IPsecconnection[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:466
# args: Long.toString(range2.getStart()),Long.toString(range2.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),msg.getVipUuid()
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ UDP = Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: UDP

# at: src/main/java/org/zstack/ipsec/IPsecManagerImpl.java:504
# args: cidr,l3Inv.getUuid(),uuid,rCidr
cidr[%s]\ of\ attached\ L3Network\ [uuid\:%s]\ is\ overlapped\ with\ ipsec\ [uuid\:%s]\ remote\ cidr[%s] = cidr[{0}] of attached L3Network [uuid:{1}] is overlapped with ipsec [uuid:{2}] remote cidr[{3}]

# at: src/main/java/org/zstack/ipsec/vyos/VyosCreateIPsecFlow.java:69
# args: errorCode.getDescription()
create\ ipsec\ to\ ha\ route\ failed,\ because\ %s = create ipsec to ha route failed, because {0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosDeleteIPsecFlow.java:55
# args: errorCode.getDescription()
delete\ ipsec\ from\ ha\ group\ failed\ because\ %s = delete ipsec from ha group failed because {0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:178
# args: rcidr,cidr
the\ remoteCidr[%s]\ is\ overlaped\ with\ VirtualRouter\ interface\ cidr[%s] = the remoteCidr[{0}] is overlaped with VirtualRouter interface cidr[{1}]

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:293
# args: 
vyos\ doesn't\ support\ aes-192\ as\ IkeEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos doesn't support aes-192 as IkeEncryptionAlgorithm, available options aes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:299
# args: 
vyos\ doesn't\ support\ aes-192\ as\ PolicyEncryptionAlgorithm,\ available\ options\ aes-128,\ aes-256,\ 3des = vyos doesn't support aes-192 as PolicyEncryptionAlgorithm, available options aes-128, aes-256, 3des

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:305
# args: msg.getIkeDhGroup()
vyos\ doesn't\ support\ %d\ as\ Ike\ DhGroup\  = vyos doesn't support {0} as Ike DhGroup 

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:788
# args: errorCode.getDescription()
sync\ to\ ha\ group\ failed,\ because\:%s = sync to ha group failed, because:{0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:675
# args: errorCode.getDescription()
apply\ to\ ha\ group\ failed,\ because\ %s = apply to ha group failed, because {0}

# at: src/main/java/org/zstack/ipsec/vyos/VyosIPsecBackend.java:768
# args: vrUuid
update\ ipsec\ version\ failed,\ because\:vpc[%s]\ not\ exist = update ipsec version failed, because:vpc[{0}] not exist

# at: src/main/java/org/zstack/kvm/KVMApiInterceptor.java:46
# args: msg.getManagementIp()
there\ has\ been\ a\ kvm\ host\ having\ management\ ip[%s] = there has been a kvm host having management ip[{0}]

# at: src/main/java/org/zstack/kvm/KVMConsoleHypervisorBackend.java:70
# args: rsp.getPort(),vm.getUuid()
unexpected\ VNC\ port\ number[%d]\ for\ VM\ [uuid\:%s] = unexpected VNC port number[{0}] for VM [uuid:{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:465
# args: self.getUuid()
host[uuid\:%s]\ has\ been\ deleted = host[uuid:{0}] has been deleted

# at: src/main/java/org/zstack/kvm/KVMHost.java:2499
# args: msg.getVmUuid(),vmState
vm[uuid\:%s]\ is\ not\ Running\ or\ Stopped,\ current\ state[%s] = vm[uuid:{0}] is not Running or Stopped, current state[{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:745
# args: ret.getNewVolumeInstallPath()
after\ block\ commit,\ new\ volume\ path\ still\ use\ %s = after block commit, new volume path still use {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:877
# args: host.getUuid(),webSsh.status
create\ connection\ to\ host[%s]\ failed,\ because\ %s = create connection to host[{0}] failed, because {1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1326
# args: reply.getError()
check\ host\ capacity\ failed,\ because\:%s = check host capacity failed, because:{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1337
# args: msg.getHostUuid(),rsp.getTotalMemory(),reservedSize
The\ host[uuid\:%s]'s\ available\ memory\ capacity[%s]\ is\ lower\ than\ the\ reserved\ capacity[%s] = The host[uuid:{0}]'s available memory capacity[{1}] is lower than the reserved capacity[{2}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:1392
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ register\ colo\ heartbeat\ for\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = unable to register colo heartbeat for vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1448
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ start\ colo\ sync\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = unable to start colo sync vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1503
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ config\ secondary\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = unable to config secondary vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1535
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ config\ primary\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = unable to config primary vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1576
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
unable\ to\ get\ first\ boot\ dev\ of\ vm[uuid\:%s]\ on\ kvm\ host\ [uuid\:%s,\ ip\:%s],\ because\ %s = unable to get first boot dev of vm[uuid:{0}] on kvm host [uuid:{1}, ip:{2}], because {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1625
# args: msg.getVmInstanceUuid(),rsp.getError()
failed\ to\ get\ vm[uuid\:%s]\ device\ address,\ because\:%s = failed to get vm[uuid:{0}] device address, because:{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1680
# args: msg.getHostUuid(),rsp.getError()
failed\ to\ get\ host[uuid\:%s]\ virtualizer\ info,\ because\:%s = failed to get host[uuid:{0}] virtualizer info, because:{1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1762
# args: ret.getError()
failed\ to\ increase\ vm\ cpu,\ error\ details\:\ %s = failed to increase vm cpu, error details: {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1860
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),result.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2} ] to do DNS check, please check if username/password is wrong; {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:1942
# args: self.getUuid(),self.getStatus()
the\ host[uuid\:%s,\ status\:%s]\ is\ not\ Connected = the host[uuid:{0}, status:{1}] is not Connected

# at: src/main/java/org/zstack/kvm/KVMHost.java:2280
# args: volume.getUuid(),state
cannot\ do\ volume\ snapshot\ merge\ when\ vm[uuid\:%s]\ is\ in\ state\ of\ %s.\ The\ operation\ is\ only\ allowed\ when\ vm\ is\ Running\ or\ Stopped = cannot do volume snapshot merge when vm[uuid:{0}] is in state of {1}. The operation is only allowed when vm is Running or Stopped

# at: src/main/java/org/zstack/kvm/KVMHost.java:2287
# args: KVMConstant.MIN_LIBVIRT_LIVE_BLOCK_COMMIT_VERSION,libvirtVersion
live\ volume\ snapshot\ merge\ needs\ libvirt\ version\ greater\ than\ %s,\ current\ libvirt\ version\ is\ %s.\ Please\ stop\ vm\ and\ redo\ the\ operation\ or\ detach\ the\ volume\ if\ it's\ data\ volume = live volume snapshot merge needs libvirt version greater than {0}, current libvirt version is {1}. Please stop vm and redo the operation or detach the volume if it's data volume

# at: src/main/java/org/zstack/kvm/KVMHost.java:2911
# args: msg.getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ update\ nic[vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = failed to update nic[vm:{0}] on kvm host[uuid:{1}, ip:{2}],because {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2963
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s = failed to attach nic[uuid:{0}, vm:{1}] on kvm host[uuid:{2}, ip:{3}],because {4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:2959
# args: msg.getNicInventory().getUuid(),msg.getNicInventory().getVmInstanceUuid(),self.getUuid(),self.getManagementIp(),ret.getError(),msg.getNicInventory().getInternalName()
failed\ to\ attach\ nic[uuid\:%s,\ vm\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],because\ %s,\ please\ try\ again\ or\ delete\ device[%s]\ by\ yourself = failed to attach nic[uuid:{0}, vm:{1}] on kvm host[uuid:{2}, ip:{3}],because {4}, please try again or delete device[{5}] by yourself

# at: src/main/java/org/zstack/kvm/KVMHost.java:3018
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ detach\ data\ volume[uuid\:%s,\ installPath\:%s]\ from\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to detach data volume[uuid:{0}, installPath:{1}] from vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3105
# args: vol.getUuid(),vol.getInstallPath(),vm.getUuid(),vm.getName(),getSelf().getUuid(),getSelf().getManagementIp(),ret.getError()
failed\ to\ attach\ data\ volume[uuid\:%s,\ installPath\:%s]\ to\ vm[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to attach data volume[uuid:{0}, installPath:{1}] to vm[uuid:{2}, name:{3}] on kvm host[uuid:{4}, ip:{5}], because {6}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3149
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ destroy\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to destroy vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3281
# args: vminv.getUuid(),vminv.getName(),self.getUuid(),self.getManagementIp(),e.getMessage()
failed\ to\ stop\ vm[uuid\:%s\ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = failed to stop vm[uuid:{0} name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3386
# args: msg.getHostUuid(),ret.getError()
Host[%s]\ update\ spice\ channel\ config\ faild,\ because\ %s = Host[{0}] update spice channel config faild, because {1}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3505
# args: total
when\ the\ vm\ platform\ is\ Other,\ the\ number\ of\ dataVolumes\ and\ cdroms\ cannot\ exceed\ 3,\ currently\ %s = when the vm platform is Other, the number of dataVolumes and cdroms cannot exceed 3, currently {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:3997
# args: msg.getPhysicalInterface(),context.getInventory().getUuid(),context.getInventory().getManagementIp()
failed\ to\ check\ physical\ network\ interfaces[names\ \:\ %s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s] = failed to check physical network interfaces[names : {0}] on kvm host[uuid:{1}, ip:{2}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4128
# args: self.getUuid(),ret.getHostUuid(),dbf.getDbVersion(),ret.getVersion()
detected\ abnormal\ status[host\ uuid\ change,\ expected\:\ %s\ but\:\ %s\ or\ agent\ version\ change,\ expected\:\ %s\ but\:\ %s]\ of\ kvmagent,it's\ mainly\ caused\ by\ kvmagent\ restarts\ behind\ zstack\ management\ server.\ Report\ this\ to\ ping\ task,\ it\ will\ issue\ a\ reconnect\ soon = detected abnormal status[host uuid change, expected: {0} but: {1} or agent version change, expected: {2} but: {3}] of kvmagent,it's mainly caused by kvmagent restarts behind zstack management server. Report this to ping task, it will issue a reconnect soon

# at: src/main/java/org/zstack/kvm/KVMHost.java:4283
# args: self.getUuid(),self.getManagementIp(),connectPath,rsp.getError()
unable\ to\ connect\ to\ kvm\ host[uuid\:%s,\ ip\:%s,\ url\:%s],\ because\ %s = unable to connect to kvm host[uuid:{0}, ip:{1}, url:{2}], because {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4342
# args: errorCodeList != null && StringUtils.isNotEmpty(errorCodeList.getReadableDetails()) ? errorCodeList.getReadableDetails() : "please check network"
host\ can\ not\ access\ any\ primary\ storage,\ %s = host can not access any primary storage, {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4482
# args: getSelf().getManagementIp(),getSelf().getPort(),TimeUnit.MILLISECONDS.toSeconds(sshTimeout)
the\ host[%s]\ ssh\ port[%s]\ not\ open\ after\ %s\ seconds,\ connect\ timeout = the host[{0}] ssh port[{1}] not open after {2} seconds, connect timeout

# at: src/main/java/org/zstack/kvm/KVMHost.java:4542
# args: checkList
failed\ to\ ping\ all\ DNS/IP\ in\ %s;\ please\ check\ /etc/resolv.conf\ to\ make\ sure\ your\ host\ is\ able\ to\ reach\ public\ internet = failed to ping all DNS/IP in {0}; please check /etc/resolv.conf to make sure your host is able to reach public internet

# at: src/main/java/org/zstack/kvm/KVMHost.java:4540
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:\ %d,\ ]\ to\ do\ DNS\ check,\ please\ check\ if\ username/password\ is\ wrong;\ %s = unable to connect to KVM[ip:{0}, username:{1}, sshPort: {2}, ] to do DNS check, please check if username/password is wrong; {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4585
# args: self.getManagementIp(),restf.getHostName(),ret.getStderr(),ret.getExitErrorMessage()
the\ KVM\ host[ip\:%s]\ cannot\ access\ the\ management\ node's\ callback\ url.\ It\ seems\ that\ the\ KVM\ host\ cannot\ reach\ the\ management\ IP[%s].\ %s\ %s = the KVM host[ip:{0}] cannot access the management node's callback url. It seems that the KVM host cannot reach the management IP[{1}]. {2} {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4582
# args: self.getManagementIp(),getSelf().getUsername(),getSelf().getPort(),ret.getExitErrorMessage()
unable\ to\ connect\ to\ KVM[ip\:%s,\ username\:%s,\ sshPort\:%d]\ to\ check\ the\ management\ node\ connectivity,please\ check\ if\ username/password\ is\ wrong;\ %s = unable to connect to KVM[ip:{0}, username:{1}, sshPort:{2}] to check the management node connectivity,please check if username/password is wrong; {3}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4611
# args: hostRet.getExitErrorMessage()
unable\ to\ Check\ whether\ the\ host\ is\ taken\ over,\ \ because\ %s = unable to Check whether the host is taken over,  because {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4625
# args: timeRet.getExitErrorMessage()
Unable\ to\ get\ the\ timestamp\ of\ the\ flag,\ \ because\ %s = Unable to get the timestamp of the flag,  because {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4634
# args: self.getManagementIp(),hostOutput,diff,HostGlobalConfig.PING_HOST_INTERVAL.value(int.class)
the\ host[ip\:%s]\ has\ been\ taken\ over,\ because\ the\ takeover\ flag[HostUuid\:%s]\ already\ exists\ and\ utime[%d]\ has\ not\ exceeded\ host\ ping\ interval[%d] = the host[ip:{0}] has been taken over, because the takeover flag[HostUuid:{1}] already exists and utime[{2}] has not exceeded host ping interval[{3}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4643
# args: self.getManagementIp(),lastHostInv.getUuid()
the\ host[ip\:%s]\ has\ been\ taken\ over,\ because\ flag[HostUuid\:%s]\ exists\ in\ the\ database = the host[ip:{0}] has been taken over, because flag[HostUuid:{1}] exists in the database

# at: src/main/java/org/zstack/kvm/KVMHost.java:4666
# args: ret.getExitErrorMessage()
unable\ to\ get\ host\ cpu\ architecture,\ please\ check\ if\ username/password\ is\ wrong;\ %s = unable to get host cpu architecture, please check if username/password is wrong; {0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:4693
# args: hostArchitecture,cluster.getArchitecture()
host\ cpu\ architecture[%s]\ is\ not\ matched\ the\ cluster[%s] = host cpu architecture[{0}] is not matched the cluster[{1}]

# at: src/main/java/org/zstack/kvm/KVMHost.java:4997
# args: 
cannot\ find\ either\ 'vmx'\ or\ 'svm'\ in\ /proc/cpuinfo,\ please\ make\ sure\ you\ have\ enabled\ virtualization\ in\ your\ BIOS\ setting = cannot find either 'vmx' or 'svm' in /proc/cpuinfo, please make sure you have enabled virtualization in your BIOS setting

# at: src/main/java/org/zstack/kvm/KVMHost.java:5064
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ qemu/libvirt\ version\ does\ not\ match = host [uuid:{0}] cannot be added to cluster [uuid:{1}] because qemu/libvirt version does not match

# at: src/main/java/org/zstack/kvm/KVMHost.java:5084
# args: self.getUuid(),self.getClusterUuid()
host\ [uuid\:%s]\ cannot\ be\ added\ to\ cluster\ [uuid\:%s]\ because\ cpu\ model\ name\ does\ not\ match = host [uuid:{0}] cannot be added to cluster [uuid:{1}] because cpu model name does not match

# at: src/main/java/org/zstack/kvm/KVMHost.java:5217
# args: msg.getHostUuid(),ctimeout
host[%s]\ not\ shutdown\ in\ %d\ seconds = host[{0}] not shutdown in {1} seconds

# at: src/main/java/org/zstack/kvm/KVMHost.java:5374
# args: 
host\ is\ not\ in\ the\ connected\ status,\ cannot\ update\ os = host is not in the connected status, cannot update os

# at: src/main/java/org/zstack/kvm/KVMHost.java:5372
# args: 
host\ is\ in\ the\ premaintenance\ state,\ cannot\ update\ os = host is in the premaintenance state, cannot update os

# at: src/main/java/org/zstack/kvm/KVMHost.java:5666
# args: rsp.getError()
failed\ to\ attach\ volume\ to\ host,\ because\:%s = failed to attach volume to host, because:{0}

# at: src/main/java/org/zstack/kvm/KVMHost.java:5727
# args: rsp.getError()
failed\ to\ detach\ volume\ from\ host,\ because\:%s = failed to detach volume from host, because:{0}

# at: src/main/java/org/zstack/kvm/KVMHostAllocatorFilterExtensionPoint.java:201
# args: 
cannot\ adapt\ version\ for\ the\ bellow\ rpm\:\ libvirt\ /\ qemu\ /\ cpumodel = cannot adapt version for the bellow rpm: libvirt / qemu / cpumodel

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:164
# args: e.getMessage()
fail\ to\ load\ host\ info\ from\ file.\ because\n%s = fail to load host info from file. because\n{0}

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:290
# args: os,vo.getName(),vo.getManagementIp()
the\ operation\ system[%s]\ of\ host[name\:%s,\ ip\:%s]\ is\ invalid = the operation system[{0}] of host[name:{1}, ip:{2}] is invalid

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:316
# args: vo.getClusterUuid(),otherOs,vo.getName(),vo.getManagementIp(),os
cluster[uuid\:%s]\ already\ has\ host\ with\ os\ version[%s],\ but\ new\ added\ host[name\:%s\ ip\:%s]\ has\ different\ host\ os\ version[%s] = cluster[uuid:{0}] already has host with os version[{1}], but new added host[name:{2} ip:{3}] has different host os version[{4}]

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:461
# args: cmd.vmUuid
vm[uuid\:%s]\ crashes\ due\ to\ kernel\ error = vm[uuid:{0}] crashes due to kernel error

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:500
# args: str.toString()
there\ are\ still\ hosts\ not\ have\ the\ same\ cpu\ model,\ details\:\ %s = there are still hosts not have the same cpu model, details: {0}

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:514
# args: KVMSystemTags.VM_PREDEFINED_PCI_BRIDGE_NUM_TOKEN
pci\ bridge\ need\ a\ value\ greater\ than\ 0\ and\ lower\ than\ 32 = pci bridge need a value greater than 0 and lower than 32

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:557
# args: vm.getState(),VmInstanceState.Stopped
vm\ current\ state[%s],\ modify\ virtioSCSI\ requires\ the\ vm\ state[%s] = vm current state[{0}], modify virtioSCSI requires the vm state[{1}]

# at: src/main/java/org/zstack/kvm/KVMHostFactory.java:759
# args: hostUuid
host[uuid\:%s]\ does\ not\ have\ cpu\ model\ information,\ you\ can\ reconnect\ the\ host\ to\ fix\ it = host[uuid:{0}] does not have cpu model information, you can reconnect the host to fix it

# at: src/main/java/org/zstack/kvm/KVMHostUtils.java:35
# args: format
invalid\ format\ string\ %s = invalid format string {0}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:70
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}] on kvm host[uuid:{3}], because {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:129
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2NoVlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = failed to check bridge[{0}] for l2NoVlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid: {3}], {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2NoVlanNetworkBackend.java:211
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to delete bridge[{0}] for l2Network[uuid:{1}, type:{2}] on kvm host[uuid:{3}], because {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:82
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:142
# args: cmd.getBridgeName(),l2vlan.getUuid(),l2vlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ l2VlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = failed to check bridge[{0}] for l2VlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}

# at: src/main/java/org/zstack/kvm/KVMRealizeL2VlanNetworkBackend.java:239
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vlan.getVlan(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to delete bridge[{0}] for l2Network[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}

# at: src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:109
# args: hto.getHostUuid(),rsp.getError()
failed\ to\ apply\ rules\ of\ security\ group\ rules\ to\ kvm\ host[uuid\:%s],\ because\ %s = failed to apply rules of security group rules to kvm host[uuid:{0}], because {1}

# at: src/main/java/org/zstack/kvm/KVMSecurityGroupBackend.java:152
# args: hostUuid,rsp.getError()
failed\ to\ check\ default\ rules\ of\ security\ group\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to check default rules of security group on kvm host[uuid:{0}], because {1}

# at: src/main/java/org/zstack/kvm/KvmVmHardwareVerifyExtensionPoint.java:31
# args: 
Failed\ to\ start\ vm,\ because\ can\ not\ disable\ vm.cpu.hypervisor.feature\ with\ vm.cpuMode\ none = Failed to start vm, because can not disable vm.cpu.hypervisor.feature with vm.cpuMode none

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:95
# args: msg.getMessageName()
cannot\ get\ vmUuid\ from\ msg\ %s = cannot get vmUuid from msg {0}

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:258
# args: host.getUuid(),host.getManagementIp(),ret.getError()
unable\ to\ do\ vm\ sync\ on\ host[uuid\:%s,\ ip\:%s]\ because\ %s = unable to do vm sync on host[uuid:{0}, ip:{1}] because {2}

# at: src/main/java/org/zstack/kvm/KvmVmSyncPingTask.java:287
# args: vmUuid
The\ vm[%s]\ state\ is\ in\ shutdown\ for\ a\ long\ time,\ check\ whether\ the\ vm\ is\ normal = The vm[{0}] state is in shutdown for a long time, check whether the vm is normal

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:67
# args: 
unsupported\ LDAP/AD\ server\ scope = unsupported LDAP/AD server scope

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:128
# args: type,LdapConstant.OpenLdap.TYPE,LdapConstant.WindowsAD.TYPE
Wrong\ LdapServerType[%s],\ valid\ values\:\ [%,%s] = Wrong LdapServerType[{0}], valid values: [%,{1}]

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:153
# args: 
Cannot\ connect\ to\ LDAP/AD\ server,\ Invalid\ Credentials,\ please\ checkout\ User\ DN\ and\ password = Cannot connect to LDAP/AD server, Invalid Credentials, please checkout User DN and password

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:156
# args: 
Cannot\ connect\ to\ LDAP/AD\ server,\ communication\ false,\ please\ checkout\ IP,\ port\ and\ Base\ DN = Cannot connect to LDAP/AD server, communication false, please checkout IP, port and Base DN

# at: src/main/java/org/zstack/ldap/LdapApiInterceptor.java:159
# args: e.toString()
Cannot\ connect\ to\ LDAP/AD\ server,\ %s = Cannot connect to LDAP/AD server, {0}

# at: src/main/java/org/zstack/ldap/LdapManagerImpl.java:560
# args: vo.getAccountUuid()
Account[uuid\:%s]\ Not\ Found!!! = Account[uuid:{0}] Not Found!!!

# at: src/main/java/org/zstack/ldap/LdapUtil.java:581
# args: filter,errorMessage
query\ ldap\ entry[filter\:\ %s]\ fail,\ because\ %s = query ldap entry[filter: {0}] fail, because {1}

# at: src/main/java/org/zstack/ldap/externalSearch/AggregateSearch.java:52
# args: e.toString()
query\ ldap\ entry\ fail,\ %s = query ldap entry fail, {0}

# at: src/main/java/org/zstack/license/LicenseChecker.java:167
# args: 
Parse\ license\ error,\n1.\ check\ your\ private\ key\ and\ application\ code\ is\ correct\n2.\ check\ your\ license\ is\ not\ corrupted\n3.\ use\ zstack-ctl\ clear_license\ to\ clear\ your\ licenses\ and\ try\ to\ reinstall\n = Parse license error,\n1. check your private key and application code is correct\n2. check your license is not corrupted\n3. use zstack-ctl clear_license to clear your licenses and try to reinstall\n

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:229
# args: 
the\ licenseRequestCode\ is\ illegal = the licenseRequestCode is illegal

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:242
# args: e.getMessage()
Decode\ fail\ because\ %s = Decode fail because {0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:239
# args: bytes.length
Unexpected\ decoded\ license\ file\ length\:\ %d = Unexpected decoded license file length: {0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:791
# args: 
Licensed\ VM\ number\ overrun = Licensed VM number overrun

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:857
# args: 
unexpected\ host\ vendor\ for\ MINI = unexpected host vendor for MINI

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1216
# args: info.getUuid()
not\ supported\:\ delete\ license[%s]\ from\ USB-key = not supported: delete license[{0}] from USB-key

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1271
# args: System.getProperty("os.arch")
UKey\ not\ supported\ (arch\:\ %s) = UKey not supported (arch: {0})

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1351
# args: ex.getLocalizedMessage()
update\ local\ ukey\ license\:\ %s = update local ukey license: {0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1347
# args: 
No\ local\ ukey\ license\ updated = No local ukey license updated

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1377
# args: 
No\ node\ available\ to\ update\ UKey = No node available to update UKey

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1519
# args: Platform.getManagementServerIp()
Multiple\ MN\ exists\ but\ only\ supplied\ licenses\ for\ %s = Multiple MN exists but only supplied licenses for {0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1493
# args: mnUuid,reply.getError().getDetails()
MN[uuid\:%s]\:\ %s = MN[uuid:{0}]: {1}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1521
# args: msg.getManagementUuids()
MN\ HA\ environment,\ but\ only\ updated\ license\ for\ %s = MN HA environment, but only updated license for {0}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:1724
# args: newLicenseInfo.getUuid(),newLicenseInfo.getLicenseType().toString(),path
can\ not\ find\ license[uuid\:%s,\ type\:%s]\ file\ on\ path\ %s = can not find license[uuid:{0}, type:{1}] file on path {2}

# at: src/main/java/org/zstack/license/LicenseManagerImpl.java:2263
# args: 
License\ expired = License expired

# at: src/main/java/org/zstack/license/cube/CubeLicenseFactory.java:50
# args: sdsInfoPath
%s\ is\ not\ existed = {0} is not existed

# at: src/main/java/org/zstack/license/cube/XmsCli.java:61
# args: 
context\ cannot\ be\ null\ in\ license = context cannot be null in license

# at: src/main/java/org/zstack/log/LogConfigurationManagerImpl.java:247
# args: struct.getType()
No\ factory\ found\ for\ type\:%s = No factory found for type:{0}

# at: src/main/java/org/zstack/log/LogConfigurationManagerImpl.java:462
# args: msg.getType()
Unknown\ log\ configuration\ type\ %s = Unknown log configuration type {0}

# at: src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java:60
# args: lstruct.getAppenderType()
No\ factory\ found\ for\ log4j2\ appender\ type\:%s. = No factory found for log4j2 appender type:{0}.

# at: src/main/java/org/zstack/log4j2/Log4j2LogConfigurationFactory.java:134
# args: lstruct.getAppenderType()
Unknown\ log4j2\ appender\ type\ %s = Unknown log4j2 appender type {0}

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:33
# args: 
facility\ can\ not\ be\ null = facility can not be null

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:37
# args: configuration.facility
invalid\ facility\ %s = invalid facility {0}

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:41
# args: 
hostname\ can\ not\ be\ null = hostname can not be null

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:45
# args: 
port\ can\ not\ be\ null = port can not be null

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:49
# args: 
protocol\ can\ not\ be\ null = protocol can not be null

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:55
# args: configuration.protocol
unsupported\ protocol\ %s = unsupported protocol {0}

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:69
# args: configuration.hostname,configuration.port
syslog\ server[address\:\ %s\:%s]\ is\ not\ available = syslog server[address: {0}:{1}] is not available

# at: src/main/java/org/zstack/log4j2/appender/syslog/SyslogAppenderProxyFactory.java:61
# args: configuration.hostname
syslog\ server[address\:\ %s]\ is\ not\ available = syslog server[address: {0}] is not available

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:74
# args: 
There\ is\ no\ LDAP/AD\ server\ in\ the\ system,\ Please\ add\ a\ LDAP/AD\ server\ first. = There is no LDAP/AD server in the system, Please add a LDAP/AD server first.

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:68
# args: msg.getLdapUid(),msg.getVirtualIDUuid()
Can\ not\ bind\ this\ ldap\ uid\ %s\ to\ virtual\ id\ [uuid\:%s] = Can not bind this ldap uid {0} to virtual id [uuid:{1}]

# at: src/main/java/org/zstack/login/LdapLoginInterceptor.java:82
# args: 
This\ uid\ is\ already\ used = This uid is already used

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:228
# args: 
ZStack\ is\ loading\ ldap\ organizations\ from\ DB\ now,\ can\ not\ execute\ sync\ operation = ZStack is loading ldap organizations from DB now, can not execute sync operation

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:390
# args: e.getMessage()
Failed\ to\ sync\ ldap\ entry[],\ because\ %s = Failed to sync ldap entry[], because {0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1021
# args: reply.getError().getReadableDetails()
Failed\ to\ sync\ organizations,\ because\ %s = Failed to sync organizations, because {0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:969
# args: 
Failed\ to\ transform\ ldap\ entry\ to\ organization\ ndoe = Failed to transform ldap entry to organization ndoe

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:958
# args: 
failed\ to\ sync\ ldap\ organization = failed to sync ldap organization

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1441
# args: scope.toString()
Can\ not\ sync\ LDAP/AD\ server\ whose\ scope\ is\ not\ %s = Can not sync LDAP/AD server whose scope is not {0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1575
# args: uid
Failed\ to\ validate\ uid[%s],\ maybe\ it\ has\ been\ deleted = Failed to validate uid[{0}], maybe it has been deleted

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1616
# args: uid,reply.getError().getReadableDetails()
Failed\ to\ create\ iam2\ virtual\ id\ for\ uid[%s],\ because\ %s = Failed to create iam2 virtual id for uid[{0}], because {1}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:1751
# args: ldapUid
Failed\ to\ validate\ dn\ [%s],\ maybe\ it\ has\ been\ deleted = Failed to validate dn [{0}], maybe it has been deleted

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2195
# args: 
invalid\ json\ format = invalid json format

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2206
# args: 
name\ is\ mandatory\ field\ % = name is mandatory field %

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2210
# args: 
attribute\ is\ mandatory\ field\ % = attribute is mandatory field %

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2214
# args: 
type\ is\ mandatory\ field\ % = type is mandatory field %

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2218
# args: 
optional\ is\ mandatory\ field\ % = optional is mandatory field %

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2222
# args: fieldNames
name\ should\ use\ values\ in\ %s = name should use values in {0}

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2254
# args: rule.getAttribute()
Invalid\ attribute.\ Attribute[%s]\ is\ required,\ but\ found\ there\ are\ some\ record\ not\ matched = Invalid attribute. Attribute[{0}] is required, but found there are some record not matched

# at: src/main/java/org/zstack/login/LdapLoginManagerImpl.java:2199
# args: 
strategy\ is\ mandatory\ field\ % = strategy is mandatory field %

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:54
# args: 
missing\ loginPluginName = missing loginPluginName

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:59
# args: loginContext.getLoginPluginName()
no\ login\ plugin\ named\ %s = no login plugin named {0}

# at: src/main/java/org/zstack/login/plugin/LoginPluginBackend.java:64
# args: loginContext.getLoginPluginName()
missing\ LoginUserInfo\ when\ use\ plugin\ login = missing LoginUserInfo when use plugin login

# at: src/main/java/org/zstack/loginControl/LoginControlApiInterceptor.java:40
# args: e.getMessage()
Invalid\ rule\ expression,\ add\ access\ control\ rule\ fail\ because\:\ %s = Invalid rule expression, add access control rule fail because: {0}

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:107
# args: key
unrecognized\ key\:\ %s = unrecognized key: {0}

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:113
# args: opt.get()
missing\ key\:value\ of\ %s = missing key:value of {0}

# at: src/main/java/org/zstack/loginControl/LoginControlManagerImpl.java:291
# args: msg.getResourceName(),msg.getLoginType()
No\ available\ user\ with\ name\:\ %s,\ type\:\ %s = No available user with name: {0}, type: {1}

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:90
# args: msg.getJobName()
%s\ is\ not\ an\ API = {0} is not an API

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:152
# args: 
cannot\ cancel\ longjob\ that\ is\ succeeded = cannot cancel longjob that is succeeded

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:155
# args: 
cannot\ cancel\ longjob\ that\ is\ failed = cannot cancel longjob that is failed

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:166
# args: 
delete\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = delete longjob only when it's succeeded, canceled, or failed

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:177
# args: 
rerun\ longjob\ only\ when\ it's\ succeeded,\ canceled,\ or\ failed = rerun longjob only when it's succeeded, canceled, or failed

# at: src/main/java/org/zstack/longjob/LongJobApiInterceptor.java:206
# args: 
can\ only\ resume\ longjob\ that\ is\ Suspended = can only resume longjob that is Suspended

# at: src/main/java/org/zstack/longjob/LongJobFactoryImpl.java:39
# args: jobName
%s\ has\ no\ corresponding\ longjob = {0} has no corresponding longjob

# at: src/main/java/org/zstack/mediator/ApiValidator.java:123
# args: l3NetworkUuid,vmNicVO.getL3NetworkUuid()
unable\ to\ attach\ a\ L3\ network.\ The\ cidr\ of\ l3[%s]\ to\ attach\ overlapped\ with\ l3[%s]\ already\ attached\ to\ vm = unable to attach a L3 network. The cidr of l3[{0}] to attach overlapped with l3[{1}] already attached to vm

# at: src/main/java/org/zstack/mediator/ApiValidator.java:155
# args: vm.getName(),vm.getUuid(),StringUtils.join(pfStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ port\ forwarding\ rules%s\ attached = the vm[name:{0}, uuid:{1}] already has some port forwarding rules{2} attached

# at: src/main/java/org/zstack/mediator/ApiValidator.java:176
# args: vm.getName(),vm.getUuid(),StringUtils.join(eipStr, ",")
the\ vm[name\:%s,\ uuid\:%s]\ already\ has\ some\ EIPs%s\ attached = the vm[name:{0}, uuid:{1}] already has some EIPs{2} attached

# at: src/main/java/org/zstack/mediator/ApiValidator.java:191
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ already\ has\ bound\ to\ other\ service[%s] = the vip[uuid:{0}] already has bound to other service[{1}]

# at: src/main/java/org/zstack/mediator/ApiValidator.java:231
# args: Long.toString(range.getStart()),Long.toString(range.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),vipUuid,protocol
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ used\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ %s\  = Current port range[{0}, {1}] is conflicted with used port range [{2}, {3}] with vip[uuid: {4}] protocol: {5} 

# at: src/main/java/org/zstack/mediator/ApiValidator.java:228
# args: Long.toString(range.getStart()),Long.toString(range.getEnd()),Long.toString(cur.getStart()),Long.toString(cur.getEnd()),vipUuid,protocol
Current\ port\ range[%s,\ %s]\ is\ conflicted\ with\ system\ service\ port\ range\ [%s,\ %s]\ with\ vip[uuid\:\ %s]\ protocol\:\ %s\  = Current port range[{0}, {1}] is conflicted with system service port range [{2}, {3}] with vip[uuid: {4}] protocol: {5} 

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:851
# args: l3Uuid,systemTag
L3\ network[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ static\ IP = L3 network[uuid:{0}] not found. Please correct your system tag[{1}] of static IP

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:327
# args: supportSharedVolumePrimaryStorage,psType
for\ shareable\ volume,\ the\ only\ supported\ primary\ storage\ type\ is\ %s,\ current\ is\ %s = for shareable volume, the only supported primary storage type is {0}, current is {1}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:795
# args: bandwidth,Long.MAX_VALUE
invalid\ volume\ bandwidth[%s]\ is\ larger\ than\ %d = invalid volume bandwidth[{0}] is larger than {1}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:745
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ or\ equal\ to\ 8192 = invalid network bandwidth[{0}], it must be greater than or equal to 8192

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:793
# args: bandwidth
invalid\ volume\ bandwidth[%s]\ is\ not\ a\ number = invalid volume bandwidth[{0}] is not a number

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:790
# args: bandwidth
invalid\ volume\ bandwidth[%s],\ it\ must\ be\ greater\ than\ 1024\ (include\ 1024) = invalid volume bandwidth[{0}], it must be greater than 1024 (include 1024)

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:832
# args: iops
invalid\ volume\ IOPS[%s]\ is\ not\ a\ number = invalid volume IOPS[{0}] is not a number

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:834
# args: iops,Long.MAX_VALUE
invalid\ volume\ IOPS[%s]\ is\ larger\ than\ %d = invalid volume IOPS[{0}] is larger than {1}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:829
# args: iops
invalid\ volume\ IOPS[%s],\ it\ must\ be\ greater\ than\ 1\ (include\ 1) = invalid volume IOPS[{0}], it must be greater than 1 (include 1)

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:865
# args: 
\ usb\ device\ can\ only\ be\ called\ by\ admin\ account =  usb device can only be called by admin account

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:901
# args: level
Unknown\ code[%s]\ of\ Security\ Level = Unknown code[{0}] of Security Level

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:918
# args: cidr
[%s]\ is\ not\ a\ standard\ cidr = [{0}] is not a standard cidr

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:939
# args: hostUuid,os.distribution,os.version
the\ host[uuid\:%s]'s\ operating\ system\ %s\ %s\ is\ too\ old,\ the\ QEMU\ doesn't\ support\ QoS\ of\ network\ or\ disk\ IO.\ Please\ choose\ another\ instance\ offering\ with\ no\ QoS\ configuration = the host[uuid:{0}]'s operating system {1} {2} is too old, the QEMU doesn't support QoS of network or disk IO. Please choose another instance offering with no QoS configuration

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1186
# args: newValue
invalid\ value[%s],\ it's\ not\ a\ double = invalid value[{0}], it's not a double

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1154
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ greater\ than\ 0 = invalid value[{0}], it must be a double greater than 0

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1183
# args: newValue
invalid\ value[%s],\ it\ must\ be\ a\ double\ between\ (0,\ 1] = invalid value[{0}], it must be a double between (0, 1]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1197
# args: newValue
invalid\ value[%s],\ ZStack\ doesn't\ have\ such\ host\ allocator\ type = invalid value[{0}], ZStack doesn't have such host allocator type

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1219
# args: MevocoGlobalConfig.AIO_NATIVE.getCanonicalName(),MevocoGlobalConfig.AIO_NATIVE.value(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.getCanonicalName(),KVMGlobalConfig.LIBVIRT_CACHE_MODE.value()
%s\ value\ is[%s],\ which\ is\ conflict\ with\ %s\ value\ [%s] = {0} value is[{1}], which is conflict with {2} value [{3}]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:1489
# args: 
obj\ is\ not\ instanceof\ NicQos! = obj is not instanceof NicQos!

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2054
# args: String.join(",", ips)
unexpected\ host\ management\ IPs\:\ [%s] = unexpected host management IPs: [{0}]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2190
# args: 
can\ not\ set\ local\ and\ configure\ at\ same\ time = can not set local and configure at same time

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2242
# args: 
can\ not\ find\ node\ A\ config\ info = can not find node A config info

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2252
# args: 
can\ not\ find\ node\ A\ address\ info\ from\ bootstrap\ agent = can not find node A address info from bootstrap agent

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2314
# args: s.getJobUuid()
can\ not\ get\ bootstrap\ job\ %s\ result\ after\ 900s = can not get bootstrap job {0} result after 900s

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2322
# args: ret.getRetCode(),ret.getStdout(),ret.getStderr()
curl\ bootstrap\ agent\ finished,\ return\ code\:\ %s,\ stdout\:\ %s,\ stderr\:\ %s = curl bootstrap agent finished, return code: {0}, stdout: {1}, stderr: {2}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2686
# args: errorOfNodeA.getCauses().get(0)
node\ A\ update\ factory\ mode\ failed,\ details\:\ %s = node A update factory mode failed, details: {0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2684
# args: errorCodeList.getCauses().get(0)
all\ management\ node\ update\ factory\ mode\ failed,\ details\:\ %s = all management node update factory mode failed, details: {0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2790
# args: ManagementNodeState.RUNNING
management\ node\ status\ is\ not\ %s = management node status is not {0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2720
# args: r.getStdout()
some\ node\ on\ factory\ mode\ exists,\ detail\ of\ arping\:\ %s = some node on factory mode exists, detail of arping: {0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2741
# args: 
set\ address\ on\ node\ A\ failed = set address on node A failed

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2738
# args: 
this\ node\ is\ not\ node\ A = this node is not node A

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2875
# args: bandwidth
networkInboundBandwidth\ format\ error\ %s = networkInboundBandwidth format error {0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2887
# args: bandwidth
networkOutboundBandwidth\ format\ error\ %s = networkOutboundBandwidth format error {0}

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:2884
# args: 
networkOutboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = networkOutboundBandwidth execeds the max value 32G bps

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3060
# args: volume.getUuid(),vm.getUuid()
Shareable\ Volume[uuid\:%s]\ has\ already\ been\ attached\ to\ VM[uuid\:%s] = Shareable Volume[uuid:{0}] has already been attached to VM[uuid:{1}]

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3078
# args: 
shareable\ disk\ only\ support\ virtio-scsi\ type\ for\ now = shareable disk only support virtio-scsi type for now

# at: src/main/java/org/zstack/mevoco/MevocoManagerImpl.java:3213
# args: sharedVolUuids
shareable\ volume(s)[uuid\:\ %s]\ attached,\ not\ support\ to\ group\ snapshot. = shareable volume(s)[uuid: {0}] attached, not support to group snapshot.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1811
# args: msg.getMode()
invalid\ volume\ qos\ mode\:\ %s = invalid volume qos mode: {0}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:284
# args: msg.getIoThreadId(),msg.getPin(),vm.getUuid(),rsp.getError()
Failed\ set\ iothread[%d]\ pin[%s]\ on\ vm[%s]\:\ %s. = Failed set iothread[{0}] pin[{1}] on vm[{2}]: {3}.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:339
# args: msg.getUuid()
can\ not\ found\ in\ used\ snapshot\ tree\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = can not found in used snapshot tree of volume[uuid: {0}]. Maybe no snapshot chain need to validate.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:352
# args: currentTreeUuid,msg.getUuid()
can\ not\ found\ latest\ snapshot\ from\ tree[uuid\:\ %s]\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = can not found latest snapshot from tree[uuid: {0}] of volume[uuid: {1}]. Maybe no snapshot chain need to validate.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:368
# args: currentTreeUuid,msg.getUuid()
can\ not\ found\ snapshots\ from\ tree[uuid\:\ %s]\ of\ volume[uuid\:\ %s].\ Maybe\ no\ snapshot\ chain\ need\ to\ validate. = can not found snapshots from tree[uuid: {0}] of volume[uuid: {1}]. Maybe no snapshot chain need to validate.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:678
# args: vmInstanceVO.getUuid()
How\ can\ a\ Running\ VM[uuid\:%s]\ has\ no\ hostUuid? = How can a Running VM[uuid:{0}] has no hostUuid?

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:676
# args: vmInstanceVO.getUuid()
Unexpectedly,\ VM[uuid\:%s]\ is\ not\ running\ any\ more,\ please\ try\ again\ later = Unexpectedly, VM[uuid:{0}] is not running any more, please try again later

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:842
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),errorInfoMap.keySet(),errorInfoMap.values()
after\ subtracting\ reserved\ capacity[%s],\ primary\ storage[%s]\ don't\ have\ required\ size[%s\ bytes],\ may\ be\ the\ threshold\ of\ primary\ storage\ physical\ capacity\ setting\ is\ lower = after subtracting reserved capacity[{0}], primary storage[{1}] don't have required size[{2} bytes], may be the threshold of primary storage physical capacity setting is lower

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1231
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ not\ attached = can not take snapshot for volumes[{0}] while volume[uuid: {1}] not attached

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1237
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ while\ volume[uuid\:\ %s]\ appears\ twice = can not take snapshot for volumes[{0}] while volume[uuid: {1}] appears twice

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1244
# args: msg.getVolumeSnapshotJobs().stream().map(CreateVolumesSnapshotsJobStruct::getVolumeUuid).collect(Collectors.toList()),job.getVolumeUuid(),volumeVOS.get(0).getVmInstanceUuid()
can\ not\ take\ snapshot\ for\ volumes[%s]\ attached\ multiple\ vms[%s,\ %s] = can not take snapshot for volumes[{0}] attached multiple vms[{1}, {2}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1251
# args: 
no\ volumes\ found = no volumes found

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1516
# args: SizeUnit.BYTE.toGigaByte((double) resize)
this\ snapshot\ recording\ the\ volume\ state\ before\ resize\ to\ %fG\ is\ created\ automatically = this snapshot recording the volume state before resize to {0}G is created automatically

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1823
# args: msg.getUuid()
DeleteVolumeQos\ [%s]\ ignore\ because\ of\ account\ privilege. = DeleteVolumeQos [{0}] ignore because of account privilege.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:1891
# args: ivo.getHostUuid(),ivo.getState(),VmInstanceState.Running.toString(),VmInstanceState.Stopped.toString()
Cannot\ delete\ vm's\ volume\ qos\ on\ host\ %s,\ because\ the\ current\ vm\ is\ in\ state\ of\ %s,\ but\ support\ expect\ states\ are\ [%s,\ %s] = Cannot delete vm's volume qos on host {0}, because the current vm is in state of {1}, but support expect states are [{2}, {3}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2039
# args: VolumeQos.getVolumeQosByMode(self.getVolumeQos(), mode)
non\ admin\ account\ cannot\ set\ bandwidth\ more\ than\ %s = non admin account cannot set bandwidth more than {0}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2051
# args: 
unknown\ message\ version. = unknown message version.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2068
# args: 
unknown\ qos\ limit\ type. = unknown qos limit type.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2082
# args: limitType
Non-admin\ account\ is\ only\ allowed\ to\ set\ the\ total\ %s\ limit. = Non-admin account is only allowed to set the total {0} limit.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2091
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ total\ %s\ limits\ as\ unlimited. = Non-admin account cannot set the total {0} limits as unlimited.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2095
# args: limitType.getType(),totalLimit
Non-admin\ account\ cannot\ set\ the\ total\ %s\ limit\ greater\ than\:\ %s = Non-admin account cannot set the total {0} limit greater than: {1}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2102
# args: limitType.getType()
Non-admin\ account\ is\ only\ allowed\ to\ set\ the\ read/write\ %s\ limits. = Non-admin account is only allowed to set the read/write {0} limits.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2108
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ read\ %s\ limits\ as\ unlimited. = Non-admin account cannot set the read {0} limits as unlimited.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2119
# args: limitType.getType()
Non-admin\ account\ cannot\ set\ the\ write\ %s\ limits\ as\ unlimited. = Non-admin account cannot set the write {0} limits as unlimited.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2128
# args: limitType.getType(),readLimit,writeLimit
Non-admin\ account\ cannot\ set\ the\ read/write\ %s\ limits\ greater\ than\:\ %s/%s = Non-admin account cannot set the read/write {0} limits greater than: {1}/{2}

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2215
# args: self.getUuid()
volume\ [%s]\ isn't\ attached\ to\ any\ vm,\ cannot\ get\ qos\ by\ forceSync = volume [{0}] isn't attached to any vm, cannot get qos by forceSync

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2221
# args: self.getUuid()
volume\ [%s]\ isn't\ attached\ to\ any\ vm\ (or\ vm\ is\ not\ existed\ now),\ cannot\ sync\ volume\ qos = volume [{0}] isn't attached to any vm (or vm is not existed now), cannot sync volume qos

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2226
# args: vm.getUuid()
vm\ [%s]'\ state\ must\ be\ Running\ or\ Paused\ to\ sync\ volume\ qos = vm [{0}]' state must be Running or Paused to sync volume qos

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2231
# args: 
vm\ [%s]'s\ HostUuid\ is\ null,\ cannot\ sync\ volume\ qos = vm [{0}]'s HostUuid is null, cannot sync volume qos

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2377
# args: msg.getVolume().getUuid(),msg.getVmInstanceUuid()
failed\ to\ detach\ shareable\ volume[uuid\:%s]\ from\ VmInstance[uuid\:%s] = failed to detach shareable volume[uuid:{0}] from VmInstance[uuid:{1}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeBase.java:2389
# args: StringUtils.join(errors, "\n\n")
failed\ to\ detach\ shareable\ volume\ from\ VmInstance\:[\n%s] = failed to detach shareable volume from VmInstance because:[\n{0}]

# at: src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java:89
# args: resourceUuid
unsupported\ operation\ for\ setting\ root\ volume[%s]\ multiQueues. = unsupported operation for setting root volume[{0}] multiQueues.

# at: src/main/java/org/zstack/mevoco/MevocoVolumeFactoryImpl.java:93
# args: resourceUuid
unsupported\ operation\ for\ setting\ virtio-scsi\ volume[%s]\ multiQueues. = unsupported operation for setting virtio-scsi volume[{0}] multiQueues.

# at: src/main/java/org/zstack/mevoco/PauseWorldApiInterceptor.java:46
# args: MevocoSystemTags.CONFIRM_CALL_API.getTagFormat()
ZStack\ has\ been\ paused,\ reject\ all\ API\ which\ are\ not\ read\ only.\ If\ you\ really\ want\ to\ call\ it\ and\ known\ the\ consequence,\ add\ '%s'\ into\ systemTags. = ZStack has been paused, reject all API which are not read only. If you really want to call it and known the consequence, add '{0}' into systemTags.

# at: src/main/java/org/zstack/mevoco/PremiumGlobalConfig.java:27
# args: getName()
the\ current\ version\ of\ license\ does\ not\ support\ modifying\ this\ global\ config\ [name\:%s] = the current version of license does not support modifying this global config [name:{0}]

# at: src/main/java/org/zstack/mevoco/PremiumResourceConfig.java:22
# args: globalConfig.getName()
the\ current\ version\ of\ license\ does\ not\ support\ modifying\ this\ resource\ config\ [name\:%s] = the current version of license does not support modifying this resource config [name:{0}]

# at: src/main/java/org/zstack/mevoco/VolumeQos.java:331
# args: 
cannot\ find\ mode\ from\ null\ VolumeQos = cannot find mode from null VolumeQos

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:190
# args: msg.getMonitorTriggerUuid()
cannot\ find\ monitor\ trigger[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find monitor trigger[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:199
# args: msg.getMonitorTriggerActionUuid()
cannot\ find\ monitor\ trigger\ action[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find monitor trigger action[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:243
# args: msg.getResourceType()
the\ resource[type\:%s]\ doesn't\ have\ any\ monitoring\ items = the resource[type:{0}] doesn't have any monitoring items

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:335
# args: msg.getTargetResourceUuid(),msg.getSession().getAccountUuid()
the\ resource[uuid\:%s]\ doesn't\ belong\ to\ the\ account[uuid\:%s] = the resource[uuid:{0}] doesn't belong to the account[uuid:{1}]

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:386
# args: resourceUuid
cannot\ find\ type\ for\ the\ resource[uuid\:%s] = cannot find type for the resource[uuid:{0}]

# at: src/main/java/org/zstack/monitoring/MonitorManagerImpl.java:391
# args: resourceType,triggerExpression.getItem()
no\ monitoring\ item\ found\ for\ the\ resourceType[%s]\ and\ item[%s] = no monitoring item found for the resourceType[{0}] and item[{1}]

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:50
# args: args
A\ resource[name\:{resourceName},\ uuid\:{resourceUuid},\ type\:{resourceType}]'s\ monitoring\ trigger[uuid\:{triggerUuid}]\ changes\ status\ to\ {triggerStatus} = A resource[name:'{resourceName}', uuid:'{resourceUuid}', type:'{resourceType}']'s monitoring trigger[uuid:'{triggerUuid}'] changes status to '{triggerStatus}'

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:55
# args: 
\n\=\=\=\ BELOW\ ARE\ DETAILS\ OF\ THE\ PREVIOUS\ ALERT\ \=\=\= = \n=== BELOW ARE DETAILS OF THE PREVIOUS ALERT ===

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:58
# args: 
\nalert\ details\: = \nalert details:

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:59
# args: args
\ncondition\:\ {itemName}\ {operator}\ {threshold} = \ncondition: '{itemName}' '{operator}' '{threshold}'

# at: src/main/java/org/zstack/monitoring/items/AlertText.java:60
# args: args
\ncurrent\ value\:\ {value} = \ncurrent value: '{value}'

# at: src/main/java/org/zstack/monitoring/items/host/HostCpuUtilItem.java:31
# args: 
Host\ CPU\ utilization = Host CPU utilization

# at: src/main/java/org/zstack/monitoring/items/vm/VmCpuUtilItem.java:29
# args: 
VM\ CPU\ utilization = VM CPU utilization

# at: src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java:98
# args: ruleFile
fail\ to\ create\ new\ File[%s] = fail to create new File[{0}]

# at: src/main/java/org/zstack/monitoring/prometheus/AlertRuleWriter.java:143
# args: rb.name,r
conflict\ alert\ rule[%s],\ there\ has\ been\ a\ rule[%s]\ with\ the\ same\ name = conflict alert rule[{0}], there has been a rule[{1}] with the same name

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusAlert.java:79
# args: resourceName,resourceUuid,toI18nString(resourceType),itemName,toI18nString(expression.getOperator()),expression.getConstant(),value,tvo.getDuration()
ALERT\:\n\ resource[name\:\ %s,\ uuid\:\ %s,\ type\:\ %s]\nevent\:\ %s\ %s\ %s\ncurrent\ value\:\ %s\nduration\:\ %s\ seconds\n = ALERT:\n resource[name: {0}, uuid: {1}, type: {2}]\nevent: {3} {4} {5}\ncurrent value: {6}\nduration: {7} seconds\n

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:40
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it\ must\ be\ in\ format\ of,\ for\ example,\ 10s,\ 1h = the relativeTime[{0}] is invalid, it must be in format of, for example, 10s, 1h

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusApiInterceptor.java:44
# args: msg.getRelativeTime()
the\ relativeTime[%s]\ is\ invalid,\ it's\ too\ big = the relativeTime[{0}] is invalid, it's too big

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilAlertWriter.java:95
# args: 
CPU\ number = CPU number

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostCpuUtilItem.java:70
# args: cpu,trigger.getTargetResourceUuid(),cpuNum
invalid\ cpu[%s],\ the\ host[uuid\:%s]\ doesn't\ have\ a\ CPU\ numbered\ by\ %s = invalid cpu[{0}], the host[uuid:{1}] doesn't have a CPU numbered by {2}

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:92
# args: 
Host\ Disk\ Capacity = Host Disk Capacity

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:98
# args: 
Host\ Disk\ Capacity\ type = Host Disk Capacity type

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostDiskCapacityAlertWriter.java:100
# args: 
Host\ devices = Host devices

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusHostNetworkIOAlertWriter.java:77
# args: 
Host = Host

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusMonitorProviderFactory.java:124
# args: ret.get("errorType"),ret.get("error")
query\ failure,\ errorType\:%s,\ error\:\ %s = query failure, errorType:{0}, error: {1}

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:81
# args: 
CPU\ Utilization = CPU Utilization

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmCpuUtilAlertWriter.java:84
# args: 
CPU\ utilization\ type = CPU utilization type

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:86
# args: 
Disk\ IO = Disk IO

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:92
# args: 
Disk\ IO\ direction = Disk IO direction

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOAlertWriter.java:93
# args: 
Disk\ IO\ type = Disk IO type

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmDiskIOItem.java:19
# args: type,ALLOWED_TYPES
invalid\ type[%s],\ only\ %s\ are\ allowed = invalid type[{0}], only {1} are allowed

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilAlertWriter.java:77
# args: 
Memory\ Utilization = Memory Utilization

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:57
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ float\ or\ double\ number = invalid right value[{0}], it must be a float or double number

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:53
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ float\ or\ double\ number\ greater\ than\ zero\ and\ lesser\ than\ one = invalid right value[{0}], it must be float or double number greater than zero and lesser than one

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmMemUtilItem.java:47
# args: expression.getArguments().keySet()
invalid\ arguments\ %s,\ no\ argument\ is\ allowed = invalid arguments {0}, no argument is allowed

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:84
# args: 
Network\ IO = Network IO

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:89
# args: 
Network\ IO\ direction = Network IO direction

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOAlertWriter.java:77
# args: 
Virtual\ Machine = Virtual Machine

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:22
# args: expression.getConstant()
invalid\ right\ value[%s],\ it\ must\ be\ a\ number(int,\ long,\ float,\ double) = invalid right value[{0}], it must be a number(int, long, float, double)

# at: src/main/java/org/zstack/monitoring/prometheus/PrometheusVmNetworkIOItem.java:18
# args: dir,ALLOWED_DIRECTION
invalid\ direction[%s],\ only\ %s\ are\ allowed = invalid direction[{0}], only {1} are allowed

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:106
# args: expr,e.getMessage()
invalid\ expression\:\ %s,\ %s = invalid expression: {0}, {1}

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ expression\ found = invalid expression: {0}, no expression found

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:127
# args: key
missing\ parameter\ '%s'\ in\ the\ expression = missing parameter '{0}' in the expression

# at: src/main/java/org/zstack/monitoring/trigger/expression/TriggerExpression.java:131
# args: key,clz,value.getClass()
wrong\ type\ of\ parameter\ '%s'\ in\ the\ expression,\ it\ must\ be\ type\ of\ %s,\ but\ got\ %s = wrong type of parameter '{0}' in the expression, it must be type of {1}, but got {2}

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:58
# args: partNum
The\ number[value\:%s]\ is\ not\ a\ valid\ part\ number. = The number[value:{0}] is not a valid part number.

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:69
# args: mttyDeviceUuid,accu
The\ quantity\ exceeded.\ The\ device[uuid\:\ %s]\ required\ se\ devices\ number\ exceeds\ a\ quantiry[value\:\ %s]. = The quantity exceeded. The device[uuid: {0}] required se devices number exceeds a quantiry[value: {1}].

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:93
# args: rsp.getError()
failed\ to\ generate\ se\ devices,\ because\:%s = failed to generate se devices, because:{0}

# at: src/main/java/org/zstack/mttyDevice/KvmMttyDeviceBackend/MttyDeviceKvmBackend.java:152
# args: rsp.getError()
failed\ to\ ungenerate\ se\ devices,\ because\:%s = failed to ungenerate se devices, because:{0}

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:41
# args: msg.getMttyDeviceUuid()
mtty\ device[uuid\:%s]\ is\ not\ virtualized\ into\ mdevs = mtty device[uuid:{0}] is not virtualized into mdevs

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:58
# args: msg.getMttyDeviceUuid()
mdev\ devices\ generated\ from\ mtty\ device[uuid\:%s]\ still\ attached\ to\ vm = mdev devices generated from mtty device[uuid:{0}] still attached to vm

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:87
# args: mtty.getHostUuid(),mtty.getUuid()
the\ host[uuid\:%s]\ that\ mtty\ device[uuid\:%s]\ in\ is\ not\ Connected = the host[uuid:{0}] that mtty device[uuid:{1}] in is not Connected

# at: src/main/java/org/zstack/mttyDevice/MttyDeviceApiInterceptor.java:78
# args: msg.getMttyDeviceUuid()
mtty\ device[uuid\:%s]\ cannot\ be\ virtualized\ into\ mdevs = mtty device[uuid:{0}] cannot be virtualized into mdevs

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:59
# args: rpAddress
Rendezvous\ Point\ [%s]\ is\ not\ a\ unicast\ address = Rendezvous Point [{0}] is not a unicast address

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:63
# args: multicastGroup
group\ address\ [%s]\ is\ not\ a\ multicast\ address = group address [{0}] is not a multicast address

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:75
# args: msg.getRpAddress(),msg.getGroupAddress(),msg.getUuid()
rp\ address\ pair\ [%s\:\ %s]\ already\ existed\ for\ multicast\ router\ [uuid\:%s] = rp address pair [{0}: {1}] already existed for multicast router [uuid:{2}]

# at: src/main/java/org/zstack/multicast/router/MulticastRouterApiInterceptor.java:89
# args: msg.getRpAddress(),msg.getGroupAddress(),msg.getUuid()
rp\ address\ tuple\ [%s\ \:\ %s]\ is\ not\ existed\ for\ multicast\ router\ [uuid\:%s] = rp address tuple [{0} : {1}] is not existed for multicast router [uuid:{2}]

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:98
# args: msg.getUuid()
multicastRouter[uuid\:%s]\ has\ not\ been\ attached\ to\ vpc\ router = multicastRouter[uuid:{0}] has not been attached to vpc router

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:124
# args: msg.getVpcRouterVmUuid()
multicast\ already\ enabled\ on\ vpc\ router\ uuid[\:%s] = multicast already enabled on vpc router uuid[:{0}]

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:317
# args: msg.getUuid()
vpc\ router\ for\ multicast\ router\ [uuid\:%s]\ has\ been\ deleted = vpc router for multicast router [uuid:{0}] has been deleted

# at: src/main/java/org/zstack/multicast/router/MulticastRouterManagerImpl.java:760
# args: msg.getUuid()
multicast\ router\ [uuid\:%s]\ is\ not\ attached\ to\ Vpc\ Router = multicast router [uuid:{0}] is not attached to Vpc Router

# at: src/main/java/org/zstack/multicast/router/backend/MulticastRouterVyosBackendImpl.java:95
# args: vrUuid
multicast\ router\ [uuid\:%s]\ has\ been\ delete\ during\ enable\ multilcast\ on\ backend = multicast router [uuid:{0}] has been delete during enable multilcast on backend

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:91
# args: msg.getNasFileSystemUuid()
nas\ file\ system\ [%s]\ is\ not\ existed\ yet = nas file system [{0}] is not existed yet

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:139
# args: type
cannot\ find\ nas\ factory\ for\ type\:\ %s = cannot find nas factory for type: {0}

# at: src/main/java/org/zstack/nas/NasFileSystemManagerImpl.java:164
# args: f.getClass().getSimpleName(),old.getClass().getSimpleName(),f.getNasFileSystemType()
duplicate\ NasFileSystemFactory[%s,\ %s]\ for\ type[%s] = duplicate NasFileSystemFactory[{0}, {1}] for type[{2}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:63
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ attached\ to\ cluster[uuid\:%s],\ can't\ attach\ again = l2Network[uuid:{0}] has attached to cluster[uuid:{1}], can't attach again

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:75
# args: otherL2s.get(0),l2.getPhysicalInterface()
could\ not\ attach\ l2\ network,\ because\ there\ is\ another\ network\ [uuid\:%]\ on\ physical\ interface\ [%s]\ with\ different\ vswitch\ type = could not attach l2 network, because there is another network [uuid:%] on physical interface [{0}] with different vswitch type

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:87
# args: msg.getL2NetworkUuid(),msg.getClusterUuid()
l2Network[uuid\:%s]\ has\ not\ attached\ to\ cluster[uuid\:%s] = l2Network[uuid:{0}] has not attached to cluster[uuid:{1}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:101
# args: msg.getType()
unsupported\ l2Network\ type[%s] = unsupported l2Network type[{0}]

# at: src/main/java/org/zstack/network/l2/L2NetworkApiInterceptor.java:105
# args: msg.getvSwitchType()
unsupported\ vSwitch\ type[%s] = unsupported vSwitch type[{0}]

# at: src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:626
# args: vl2.getUuid(),vl2.getName(),msg.getClusterUuid(),vl2.getPhysicalInterface(),vl2.getVlan(),tl2.getUuid()
There\ has\ been\ a\ L2VlanNetwork[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s],\ vlan[%s].\ Failed\ to\ attach\ L2VlanNetwork[uuid\:%s] = There has been a L2VlanNetwork[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}], vlan[{4}]. Failed to attach L2VlanNetwork[uuid:{5}]

# at: src/main/java/org/zstack/network/l2/L2NoVlanNetwork.java:608
# args: l2.getUuid(),l2.getName(),msg.getClusterUuid(),l2.getPhysicalInterface(),tl2.getUuid()
There\ has\ been\ a\ l2Network[uuid\:%s,\ name\:%s]\ attached\ to\ cluster[uuid\:%s]\ that\ has\ physical\ interface[%s].\ Failed\ to\ attach\ l2Network[uuid\:%s] = There has been a l2Network[uuid:{0}, name:{1}] attached to cluster[uuid:{2}] that has physical interface[{3}]. Failed to attach l2Network[uuid:{4}]

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:84
# args: msg.getvSwitchUuid(),msg.getVlan()
could\ not\ create\ L2PortGroupNetwork,\ because\ L2VirtualSwitchNetwork[uuid\:%s]\ already\ has\ L2PortGroupNetworks\ with\ the\ same\ vlanId[%s] = could not create L2PortGroupNetwork, because L2VirtualSwitchNetwork[uuid:{0}] already has L2PortGroupNetworks with the same vlanId[{1}]

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:106
# args: vswitchVO.getPhysicalInterface(),msg.getClusterUuid()
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ interface[%s]\ in\ cluster[uuid\:%s]\ is\ already\ used\ for\ another\ L2VirtualSwitchNetwork = could not attach L2VirtualSwitchNetwork, because interface[{0}] in cluster[uuid:{1}] is already used for another L2VirtualSwitchNetwork

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:113
# args: msg.getClusterUuid()
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ there\ are\ no\ hosts\ in\ cluster[uuid\:%s] = could not attach L2VirtualSwitchNetwork, because there are no hosts in cluster[uuid:{0}]

# at: src/main/java/org/zstack/network/l2/virtualSwitch/VirtualSwitchApiInterceptor.java:126
# args: vswitchVO.getPhysicalInterface(),hostUuid
could\ not\ attach\ L2VirtualSwitchNetwork,\ because\ interface[%s]\ should\ be\ created\ on\ host[uuid\:%s] = could not attach L2VirtualSwitchNetwork, because interface[{0}] should be created on host[uuid:{1}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetwork/VxlanNetworkFactory.java:231
# args: inv.getUuid(),destHostUuid
cannot\ configure\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = cannot configure vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:77
# args: vtepIps,hostUuid
find\ multiple\ vtep\ ips[%s]\ for\ one\ host[uuid\:%s],\ need\ to\ delete\ host\ and\ add\ again = find multiple vtep ips[{0}] for one host[uuid:{1}], need to delete host and add again

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:82
# args: hostUuid,l2vxlan.getPoolUuid()
failed\ to\ find\ vtep\ on\ host[uuid\:\ %s],\ please\ re-attach\ vxlanpool[uuid\:\ %s]\ to\ cluster. = failed to find vtep on host[uuid: {0}], please re-attach vxlanpool[uuid: {1}] to cluster.

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:133
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to create bridge[{0}] for l2Network[uuid:{1}, type:{2}, vni:{3}] on kvm host[uuid:{4}], because {5}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:197
# args: cmd.getCidr(),l2vxlan.getUuid(),l2vxlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetwork[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = failed to check cidr[{0}] for l2VxlanNetwork[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkBackend.java:474
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),l2vxlan.getVni(),hostUuid,rsp.getError()
failed\ to\ delete\ bridge[%s]\ for\ l2Network[uuid\:%s,\ type\:%s,\ vni\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to delete bridge[{0}] for l2Network[uuid:{1}, type:{2}, vni:{3}] on kvm host[uuid:{4}], because {5}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:261
# args: l2Network.getUuid(),l2Network.getType(),hostUuid,rsp.getError()
failed\ to\ realize\ vxlan\ network\ pool[uuid\:%s,\ type\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to realize vxlan network pool[uuid:{0}, type:{1}] on kvm host[uuid:{2}], because {3}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/KVMRealizeL2VxlanNetworkPoolBackend.java:111
# args: cmd.getCidr(),vxlanPool.getUuid(),vxlanPool.getName(),hostUuid,rsp.getError()
failed\ to\ check\ cidr[%s]\ for\ l2VxlanNetworkPool[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = failed to check cidr[{0}] for l2VxlanNetworkPool[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:37
# args: VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()
need\ to\ input\ one\ system\ tag\ like\ \:\ [%s] = need to input one system tag like : [{0}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:49
# args: tag,VxlanSystemTags.VXLAN_POOL_CLUSTER_VTEP_CIDR.getTagFormat()
wrong\ system\ tag\ [%s],\ should\ be\ like\ \:\ [%s] = wrong system tag [{0}], should be like : [{1}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:55
# args: tag
wrong\ cidr\ format\ in\ system\ tag\ [%s] = wrong cidr format in system tag [{0}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:64
# args: inv.getType(),overlappedPool
overlap\ vni\ range\ with\ %s\ [%s] = overlap vni range with {0} [{1}]

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanNetworkCheckerImpl.java:99
# args: 
vxlan\ network\ pool\ doesn't\ support\ create\ l3\ network = vxlan network pool doesn't support create l3 network

# at: src/main/java/org/zstack/network/l2/vxlan/vxlanNetworkPool/VxlanPoolApiInterceptor.java:56
# args: msg.getHostUuid(),msg.getPoolUuid()
vxlan\ vtep\ address\ for\ host\ [uuid\ \:\ %s]\ and\ pool\ [uuid\ \:\ %s]\ pair\ already\ existed = vxlan vtep address for host [uuid : {0}] and pool [uuid : {1}] pair already existed

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:27
# args: 
it\ is\ used = it is used

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:25
# args: 
it\ is\ not\ in\ this\ range = it is not in this range

# at: src/main/java/org/zstack/network/l3/IpNotAvailabilityReason.java:23
# args: 
it\ is\ gateway = it is gateway

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:159
# args: l2VO.getUuid(),msg.getL3NetworkUuid()
could\ not\ set\ mtu\ because\ l2\ network[uuid\:%s]\ of\ l3\ network\ [uuid\:%s]\ mtu\ can\ not\ be\ bigger\ than\ the\ novlan\ network = could not set mtu because l2 network[uuid:{0}] of l3 network [uuid:{1}] mtu can not be bigger than the novlan network

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:175
# args: 
can\ not\ delete\ the\ last\ normal\ ip\ range\ because\ there\ is\ still\ has\ address\ pool = can not delete the last normal ip range because there is still has address pool

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:190
# args: 
you\ must\ update\ system\ and\ category\ both = you must update system and category both

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:474
# args: L3NetworkCategory.validCombination
not\ valid\ combination\ of\ system\ and\ category,only\ %s\ are\ valid = not valid combination of system and category,only {0} are valid

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:237
# args: msg.getIp()
invalid\ IP[%s] = invalid IP[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:221
# args: msg.getL3NetworkUuid()
no\ ip\ range\ in\ l3[%s] = no ip range in l3[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:225
# args: msg.getRouterInterfaceIp(),ipr.getUuid(),ipr.getNetworkCidr(),msg.getL3NetworkUuid()
ip[%s]\ is\ not\ in\ the\ cidr\ of\ ip\ range[uuid\:%s,\ cidr\:%s]\ which\ l3\ network[%s]\ attached = ip[{0}] is not in the cidr of ip range[uuid:{1}, cidr:{2}] which l3 network[{3}] attached

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:229
# args: msg.getRouterInterfaceIp(),ipr.getUuid(),ipr.getStartIp(),ipr.getEndIp(),msg.getL3NetworkUuid()
ip[%s]\ in\ ip\ range[uuid\:%s,\ startIp\:%s,\ endIp\:%s]\ which\ l3\ network[%s]\ attached,\ this\ is\ not\ allowed = ip[{0}] in ip range[uuid:{1}, startIp:{2}, endIp:{3}] which l3 network[{4}] attached, this is not allowed

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:243
# args: 
ipRangeUuid\ and\ l3NetworkUuid\ cannot\ both\ be\ null;\ you\ must\ set\ either\ one. = ipRangeUuid and l3NetworkUuid cannot both be null; you must set either one.

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:276
# args: msg.getStart(),msg.getStart()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ start[ip\:%s]\ is\ not\ a\ correct\ ipv6\ address = could not get free ip with start[ip:{0}],because start[ip:{1}] is not a correct ipv6 address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:274
# args: msg.getStart(),msg.getStart()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ start[ip\:%s]\ is\ not\ a\ correct\ ipv4\ address = could not get free ip with start[ip:{0}],because start[ip:{1}] is not a correct ipv4 address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:272
# args: msg.getStart(),msg.getL3NetworkUuid()
could\ not\ get\ free\ ip\ with\ start[ip\:%s],because\ l3Network[uuid\:%s]\ is\ dual\ stack = could not get free ip with start[ip:{0}],because l3Network[uuid:{1}] is dual stack

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:408
# args: msg.getNetworkCidr()
%s\ is\ not\ a\ valid\ network\ cidr = {0} is not a valid network cidr

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:304
# args: msg.getGateway()
%s\ is\ not\ a\ valid\ ipv6\ address = {0} is not a valid ipv6 address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:308
# args: msg.getStartIp(),msg.getEndIp(),msg.getPrefixLen(),msg.getGateway()
[startIp\ %s,\ endIp\ %s,\ prefixLen\ %d,\ gateway\ %s]\ is\ not\ a\ valid\ ipv6\ range = [startIp {0}, endIp {1}, prefixLen {2}, gateway {3}] is not a valid ipv6 range

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:633
# args: 
adding\ normal\ ip\ range\ must\ specify\ gateway\ ip\ address = adding normal ip range must specify gateway ip address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:324
# args: 
can\ not\ add\ ip\ range,\ because\ ipv6\ address\ pool\ is\ not\ supported = can not add ip range, because ipv6 address pool is not supported

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:335
# args: IPv6Constants.IPV6_PREFIX_LEN_MIN,IPv6Constants.IPV6_PREFIX_LEN_MAX
ip\ range\ prefix\ length\ is\ out\ of\ range\ [%d\ -\ %d]\  = ip range prefix length is out of range [{0} - {1}] 

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:342
# args: 
can\ not\ add\ ip\ range,\ because\ system\ network\ doesn't\ support\ ipv6\ yet = can not add ip range, because system network doesn't support ipv6 yet

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:348
# args: ipr.getAddressMode(),rangeVOS.get(0).getAddressMode()
addressMode[%s]\ is\ different\ from\ L3Netowork\ address\ mode[%s] = addressMode[{0}] is different from L3Netowork address mode[{1}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:354
# args: IPv6Constants.IPV6_STATELESS_PREFIX_LEN
ipv6\ prefix\ length\ must\ be\ %d\ for\ Stateless-DHCP\ or\ SLAAC = ipv6 prefix length must be {0} for Stateless-DHCP or SLAAC

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:364
# args: ipr.getStartIp(),ipr.getEndIp(),r.getStartIp(),r.getEndIp()
new\ ip\ range\ [startip\ \:%s,\ endip\ \:%s]\ is\ overlaped\ with\ old\ ip\ range[startip\ \:%s,\ endip\ \:%s] = new ip range [startip :{0}, endip :{1}] is overlaped with old ip range[startip :{2}, endip :{3}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:374
# args: r.getNetworkCidr(),ipr.getNetworkCidr()
new\ network\ CIDR\ [%s]\ is\ different\ from\ old\ network\ cidr\ [%s] = new network CIDR [{0}] is different from old network cidr [{1}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:618
# args: ipr.getGateway(),r.getGateway()
new\ add\ ip\ range\ gateway\ %s\ is\ different\ from\ old\ gateway\ %s = new add ip range gateway {0} is different from old gateway {1}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:611
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getEndIp()
gateway[%s]\ can\ not\ be\ part\ of\ range[%s,\ %s] = gateway[{0}] can not be part of range[{1}, {2}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:401
# args: msg.getNetworkCidr()
%s\ is\ not\ an\ allowed\ network\ cidr,\ because\ it\ doesn't\ have\ usable\ ip\ range = {0} is not an allowed network cidr, because it doesn't have usable ip range

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:405
# args: msg.getGateway(),msg.getNetworkCidr()
%s\ is\ not\ the\ first\ or\ last\ address\ of\ the\ cidr\ %s = {0} is not the first or last address of the cidr {1}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:432
# args: 
ipRangeUuids,\ L3NetworkUuids,\ zoneUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = ipRangeUuids, L3NetworkUuids, zoneUuids must have at least one be none-empty list, or all is set to true

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:453
# args: msg.getType()
unsupported\ l3network\ type[%s] = unsupported l3network type[{0}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:459
# args: msg.getDnsDomain()
%s\ is\ not\ a\ valid\ domain\ name = {0} is not a valid domain name

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:580
# args: r.getUuid(),r.getStartIp(),r.getEndIp()
overlap\ with\ ip\ range[uuid\:%s,\ start\ ip\:%s,\ end\ ip\:\ %s] = overlap with ip range[uuid:{0}, start ip:{1}, end ip: {2}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:523
# args: l3Vo.getUuid(),l3Vo.getName()
l3\ network\ [uuid\ %s\:\ name\ %s]\ is\ not\ a\ public\ network,\ address\ pool\ range\ can\ not\ be\ added = l3 network [uuid {0}: name {1}] is not a public network, address pool range can not be added

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:527
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ D\ class\ addresses\ which\ are\ for\ multicast = the IP range[{0} ~ {1}] contains D class addresses which are for multicast

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:531
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ E\ class\ addresses\ which\ are\ reserved = the IP range[{0} ~ {1}] contains E class addresses which are reserved

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:535
# args: ipr.getStartIp(),ipr.getEndIp()
the\ IP\ range[%s\ ~\ %s]\ contains\ link\ local\ addresses\ which\ are\ reserved = the IP range[{0} ~ {1}] contains link local addresses which are reserved

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:541
# args: ipr.getGateway(),ipr.getStartIp(),ipr.getNetmask()
the\ gateway[%s]\ is\ not\ in\ the\ subnet\ %s/%s = the gateway[{0}] is not in the subnet {1}/{2}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:545
# args: 
ip\ allocation\ can\ not\ contain\ network\ address\ or\ broadcast\ address = ip allocation can not contain network address or broadcast address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:551
# args: ipr.getStartIp()
start\ ip[%s]\ is\ not\ a\ IPv4\ address = start ip[{0}] is not a IPv4 address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:555
# args: ipr.getEndIp()
end\ ip[%s]\ is\ not\ a\ IPv4\ address = end ip[{0}] is not a IPv4 address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:559
# args: ipr.getGateway()
gateway[%s]\ is\ not\ a\ IPv4\ address = gateway[{0}] is not a IPv4 address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:563
# args: ipr.getNetmask()
netmask[%s]\ is\ not\ a\ netmask,\ and\ the\ IP\ range\ netmask\ cannot\ be\ 0.0.0.0 = netmask[{0}] is not a netmask, and the IP range netmask cannot be 0.0.0.0

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:569
# args: ipr.getStartIp(),ipr.getEndIp()
start\ ip[%s]\ is\ behind\ end\ ip[%s] = start ip[{0}] is behind end ip[{1}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:596
# args: r.getUuid(),rcidr,cidr
multiple\ CIDR\ on\ the\ same\ L3\ network\ is\ not\ allowed.\ There\ has\ been\ a\ IP\ range[uuid\:%s,\ CIDR\:%s],\ the\ new\ IP\ range[CIDR\:%s]\ is\ not\ in\ the\ CIDR\ with\ the\ existing\ one = multiple CIDR on the same L3 network is not allowed. There has been a IP range[uuid:{0}, CIDR:{1}], the new IP range[CIDR:{2}] is not in the CIDR with the existing one

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:606
# args: ipr.getEndIp(),ipr.getStartIp(),ipr.getNetmask()
the\ endip[%s]\ is\ not\ in\ the\ subnet\ %s/%s = the endip[{0}] is not in the subnet {1}/{2}

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:659
# args: msg.getDns(),msg.getL3NetworkUuid()
there\ has\ been\ a\ DNS[%s]\ on\ L3\ network[uuid\:%s] = there has been a DNS[{0}] on L3 network[uuid:{1}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:692
# args: msg.getL3NetworkUuid()
prefix\ [%s]\ is\ not\ a\ IPv4\ network\ cidr = prefix [{0}] is not a IPv4 network cidr

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:679
# args: msg.getNexthop()
nexthop[%s]\ is\ not\ a\ IPv4\ address = nexthop[{0}] is not a IPv4 address

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:686
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ has\ been\ a\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = there has been a hostroute for prefix[{0}] on L3 network[uuid:{1}]

# at: src/main/java/org/zstack/network/l3/L3NetworkApiInterceptor.java:699
# args: msg.getPrefix(),msg.getL3NetworkUuid()
there\ is\ no\ hostroute\ for\ prefix[%s]\ on\ L3\ network[uuid\:%s] = there is no hostroute for prefix[{0}] on L3 network[uuid:{1}]

# at: src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java:286
# args: rsp.getError()
apply\ gratuitous\ arp\ error,\ because\:%s = apply gratuitous arp error, because:{0}

# at: src/main/java/org/zstack/network/plugin/FlatGratuitousARPBackend.java:329
# args: rsp.getError()
release\ gratuitous\ arp\ error,\ because\:%s = release gratuitous arp error, because:{0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:248
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ vm\ nic[uuid\:%s]\ not\ found = could no set vm nic security group, because vm nic[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:254
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ the\ vm\ nic[uuid\:%s]\ not\ attached\ to\ any\ security\ group = could no set vm nic security group, because the vm nic[uuid:{0}] not attached to any security group

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:261
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ not\ found = could no set vm nic security group, because security group[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:266
# args: priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ cannot\ be\ less\ than\ 1 = could no set vm nic security group, because invalid priority, priority[{0}] cannot be less than 1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:270
# args: aoMap.get(priority),ao.getSecurityGroupUuid(),priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ priority,\ both\ security\ group\ %s\ and\ %s\ have\ priority[%d] = could no set vm nic security group, because duplicate priority, both security group {0} and {1} have priority[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:273
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ security\ group[uuid\:%s] = could no set vm nic security group, because duplicate security group[uuid:{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:285
# args: priorities[0]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority\ expects\ to\ start\ at\ 1,\ but\ [%d] = could no set vm nic security group, because invalid priority, priority expects to start at 1, but [{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:289
# args: priorities[i],priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ and\ priority[%d]\ expected\ to\ be\ consecutive = could no set vm nic security group, because invalid priority, priority[{0}] and priority[{1}] expected to be consecutive

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:301
# args: ref.getSecurityGroupUuid(),sgOwnerAccountUuid
could\ no\ set\ vm\ nic\ security\ Group,\ because\ securityGroup[uuid\:%s]\ is\ already\ attached\ on\ this\ nic\ by\ account[uuid\:%s],\ current\ user\ does\ not\ have\ permission\ to\ delete = could no set vm nic security Group, because securityGroup[uuid:{0}] is already attached on this nic by account[uuid:{1}], current user does not have permission to delete

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:310
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ ruleUuids\ is\ empty = could no change security group rule state, because ruleUuids is empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:314
# args: msg.getSecurityGroupUuid()
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group[uuid\:%s]\ not\ found = could no change security group rule state, because security group[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:322
# args: r
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group\ rule[uuid\:%s]\ not\ found = could no change security group rule state, because security group rule[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:331
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ no\ security\ group\ rule\ state\ need\ to\ change = could no change security group rule state, because no security group rule state need to change

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:339
# args: 
could\ no\ change\ vm\ nic\ security\ policy,\ because\ ingress\ policy\ and\ egress\ policy\ cannot\ be\ both\ null = could no change vm nic security policy, because ingress policy and egress policy cannot be both null

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:342
# args: msg.getIngressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ ingress\ policy[%s] = could no change vm nic security policy, because invalid ingress policy[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:346
# args: msg.getEgressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ egress\ policy[%s] = could no change vm nic security policy, because invalid egress policy[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:350
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ not\ found = could no change vm nic security policy, because vm nic[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:355
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ has\ no\ security\ policy = could no change vm nic security policy, because vm nic[uuid:{0}] has no security policy

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:369
# args: msg.getType()
could\ not\ update\ security\ group\ rule\ priority,\ because\ invalid\ type[%s] = could not update security group rule priority, because invalid type[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:374
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ is\ not\ exist = could not update security group rule priority, because security group[uuid:{0}] is not exist

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:378
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rules\ is\ empty = could not update security group rule priority, because rules is empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:388
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ rules\ size\ not\ match = could not update security group rule priority, because security group[uuid:{0}] rules size not match

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:393
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ priority[%d]\ is\ invalid = could not update security group rule priority, because rule priority[{0}] is invalid

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:396
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ has\ duplicate = could not update security group rule priority, because priority[{0}] has duplicate

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:402
# args: ao.getRuleUuid(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule[uuid\:%s]\ not\ in\ security\ group[uuid\:%s] = could not update security group rule priority, because rule[uuid:{0}] not in security group[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:405
# args: ao.getPriority(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ not\ in\ security\ group[uuid\:%s] = could not update security group rule priority, because priority[{0}] not in security group[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:410
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ uuid\ duplicate = could not update security group rule priority, because rule uuid duplicate

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:417
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule\ uuid[%s]\ is\ not\ exist = could not change security group rule, because security group rule uuid[{0}] is not exist

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:423
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ is\ default\ rule,\ only\ the\ description\ and\ status\ can\ be\ set = could not change security group rule, because security group rule[{0}] is default rule, only the description and status can be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:429
# args: msg.getUuid(),SecurityGroupConstant.DEFAULT_RULE_PRIORITY
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ priority\ cannot\ be\ set\ to\ default\ rule\ priority[%d] = could not change security group rule, because security group rule[{0}] priority cannot be set to default rule priority[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:438
# args: vo.getType(),count.intValue(),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = could not change security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:441
# args: vo.getType().toString(),count.intValue()
could\ not\ change\ security\ group\ rule,\ because\ the\ maximum\ priority\ of\ %s\ rule\ is\ [%d] = could not change security group rule, because the maximum priority of {0} rule is [{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:450
# args: msg.getState()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ state[%s] = could not change security group rule, because invalid state[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:458
# args: msg.getAction()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ action[%s] = could not change security group rule, because invalid action[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:466
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ protocol[%s] = could not change security group rule, because invalid protocol[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:498
# args: msg.getUuid(),msg.getSrcIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Egress,\ srcIpRange[%s]\ cannot\ be\ set = could not change security group rule, because security group rule[{0}] type is Egress, srcIpRange[{1}] cannot be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:495
# args: msg.getUuid(),msg.getDstIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Ingress,\ dstIpRange[%s]\ cannot\ be\ set = could not change security group rule, because security group rule[{0}] type is Ingress, dstIpRange[{1}] cannot be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:488
# args: msg.getSrcIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ srcIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = could not change security group rule, because srcIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:501
# args: msg.getDstIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ dstIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = could not change security group rule, because dstIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:508
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ not\ found = could not change security group rule, because remote security group[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:511
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ is\ set,\ srcIpRange\ and\ dstIpRange\ must\ be\ empty = could not change security group rule, because remote security group[uuid:{0}] is set, srcIpRange and dstIpRange must be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:564
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ must\ be\ set = could not change security group rule, because rule protocol is [{0}], dstPortRange must be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:556
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ empty = could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:551
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ set = could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:595
# args: JSONObjectUtil.toJsonString(sao),o.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = could not change security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:721
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ not\ attached\ to\ l3Network[uuid\:%s],\ can't\ detach = security group[uuid:{0}] has not attached to l3Network[uuid:{1}], can't detach

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:757
# args: 
can't\ delete\ rules\ of\ different\ security\ group = can't delete rules of different security group

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:760
# args: vo.getUuid()
can't\ delete\ default\ rule[uuid\:%s] = can't delete default rule[uuid:{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:780
# args: msg.getSecurityGroupUuid(),msg.getL3NetworkUuid()
security\ group[uuid\:%s]\ has\ attached\ to\ l3Network[uuid\:%s],\ can't\ attach\ again = security group[uuid:{0}] has attached to l3Network[uuid:{1}], can't attach again

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:788
# args: msg.getL3NetworkUuid(),SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE
the\ L3\ network[uuid\:%s]\ doesn't\ have\ the\ network\ service\ type[%s]\ enabled = the L3 network[uuid:{0}] doesn't have the network service type[{1}] enabled

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:850
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = VM nics[uuids:{0}] are not on L3 networks that have been attached to the security group[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:886
# args: uuid
could\ not\ add\ security\ group\ rule,\ because\ security\ group[uuid\:%s]\ does\ not\ exist = could not add security group rule, because security group[uuid:{0}] does not exist

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:875
# args: SecurityGroupConstant.ONE_API_RULES_MAX_NUM
could\ not\ add\ security\ group\ rule,\ because\ the\ rules\ cannot\ be\ empty\ or\ exceed\ the\ max\ number\ %d = could not add security group rule, because the rules cannot be empty or exceed the max number {0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:880
# args: msg.getRemoteSecurityGroupUuids()
could\ not\ add\ security\ group\ rule,\ because\ duplicate\ uuid\ in\ remoteSecurityGroupUuids\:\ %s = could not add security group rule, because duplicate uuid in remoteSecurityGroupUuids: {0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:891
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ remote\ security\ group\ uuid\ is\ conflict = could not add security group rule, because the remote security group uuid is conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:927
# args: SecurityGroupConstant.DEFAULT_RULE_PRIORITY,SecurityGroupConstant.LOWEST_RULE_PRIORITY
could\ not\ add\ security\ group\ rule,\ because\ rule\ priority\ must\ greater\ than\ %d\ or\ equals\ %d = could not add security group rule, because rule priority must greater than {0} or equals {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:935
# args: ao.getType(),SecurityGroupRuleType.getAllType()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ type[%s],\ valid\ types\ are\ %s = could not add security group rule, because invalid rule type[{0}], valid types are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:942
# args: ao.getState(),SecurityGroupRuleState.getAllState()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ state[%s],\ valid\ states\ are\ %s = could not add security group rule, because invalid rule state[{0}], valid states are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:947
# args: ao.getProtocol(),SecurityGroupRuleProtocolType.getAllProtocol()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ protocol[%s],\ valid\ protocols\ are\ %s = could not add security group rule, because invalid rule protocol[{0}], valid protocols are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:954
# args: ao.getAction(),SecurityGroupRuleAction.getAllAction()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ action[%s],\ valid\ actions\ are\ %s = could not add security group rule, because invalid rule action[{0}], valid actions are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:962
# args: ao.getIpVersion(),IPv6Constants.IPv4,IPv6Constants.IPv6
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ ipVersion[%d],\ valid\ ipVersions\ are\ %d/%d = could not add security group rule, because invalid rule ipVersion[{0}], valid ipVersions are {1}/{2}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:990
# args: ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ dstIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ ingress\ rule = could not add security group rule, because the dstIpRange[{0}] is not allowed to set for ingress rule

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:995
# args: ao.getAllowedCidr(),ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ srcIpRange[%s]\ are\ in\ conflict = could not add security group rule, because the allowedCidr[{0}] and srcIpRange[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:984
# args: ao.getDstIpRange(),ao.getRemoteSecurityGroupUuid()
could\ not\ add\ security\ group\ rule,\ because\ the\ ip\ range[%s]\ and\ remoteSecurityGroupUuid[%s]\ are\ in\ conflict = could not add security group rule, because the ip range[{0}] and remoteSecurityGroupUuid[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:972
# args: ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ srcIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ egress\ rule = could not add security group rule, because the srcIpRange[{0}] is not allowed to set for egress rule

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:977
# args: ao.getAllowedCidr(),ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ dstIpRange[%s]\ are\ in\ conflict = could not add security group rule, because the allowedCidr[{0}] and dstIpRange[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1026
# args: ao.getEndPort(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ endPort[%d],\ endPort\ must\ be\ greater\ than\ or\ equal\ to\ startPort[%d] = could not add security group rule, because invalid rule endPort[{0}], endPort must be greater than or equal to startPort[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1029
# args: ao.getDstPortRange(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ dstPortRange[%s]\ and\ starPort[%s]\ are\ in\ conflict = could not add security group rule, because dstPortRange[{0}] and starPort[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1040
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ TCP/UDP\ must\ set\ dstPortRange = could not add security group rule, because the protocol type TCP/UDP must set dstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1018
# args: ao.getDstPortRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ dstPortRange[%s] = could not add security group rule, because the protocol type ALL or ICMP cant not set dstPortRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1021
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ startPort\ or\ endPort = could not add security group rule, because the protocol type ALL or ICMP cant not set startPort or endPort

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1050
# args: JSONObjectUtil.toJsonString(newRules.get(i)),JSONObjectUtil.toJsonString(newRules.get(j))
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ and\ rule[%s]\ are\ dupilicated = could not add security group rule, because rule[{0}] and rule[{1}] are dupilicated

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1074
# args: JSONObjectUtil.toJsonString(sao),vo.getUuid()
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = could not add security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1089
# args: SecurityGroupRuleType.Egress,SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ has\ reached\ the\ maximum\ limit[%d] = could not add security group rule, because security group {0} rules has reached the maximum limit[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1097
# args: SecurityGroupRuleType.Egress,(egressRuleCount + toCreateEgressRuleCount),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = could not add security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1101
# args: msg.getPriority(),ingressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ ingress\ rule\ maximum\ priority\ is\ [%d] = could not add security group rule, because priority[{0}] must be consecutive, the ingress rule maximum priority is [{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1104
# args: msg.getPriority(),egressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ egress\ rule\ maximum\ priority\ is\ [%d] = could not add security group rule, because priority[{0}] must be consecutive, the egress rule maximum priority is [{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1908
# args: ref.getVmNicUuid(),msg.getSecurityGroupUuid()
vm\ nic[uuid\:%s]\ has\ been\ attach\ to\ security\ group[uuid\:%s] = vm nic[uuid:{0}] has been attach to security group[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1917
# args: SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE,nic.getL3NetworkUuid(),nic.getUuid()
the\ netwotk\ service[type\:%s]\ not\ enabled\ on\ the\ l3Network[uuid\:%s]\ of\ nic[uuid\:%s] = the netwotk service[type:{0}] not enabled on the l3Network[uuid:{1}] of nic[uuid:{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:153
# args: SecurityGroupConstant.SECURITY_GROUP_NETWORK_SERVICE_TYPE,l3Uuid
the\ netwotk\ service[type\:%s]\ not\ enabled\ on\ the\ l3Network[uuid\:%s] = the netwotk service[type:{0}] not enabled on the l3Network[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupManagerImpl.java:1051
# args: ao.getRuleUuid()
failed\ to\ chenge\ rule[uuid\:%s]\ priority,\ beacuse\ it's\ not\ found = failed to chenge rule[uuid:{0}] priority, beacuse it's not found

# at: src/main/java/org/zstack/network/service/HostRouteExtension.java:88
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ provide\ type\ null = L3Network [uuid: {0}] provide type null

# at: src/main/java/org/zstack/network/service/HostRouteExtension.java:113
# args: msg.getL3NetworkUuid()
L3Network\ [uuid\:\ %s]\ does\ not\ have\ host\ route\ service = L3Network [uuid: {0}] does not have host route service

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:107
# args: 
networkServices\ cannot\ be\ empty = networkServices cannot be empty

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:68
# args: puuid
network\ service\ for\ provider[uuid\:%s]\ must\ be\ specified = network service for provider[uuid:{0}] must be specified

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:73
# args: puuid
cannot\ find\ network\ service\ provider[uuid\:%s]\ or\ it\ provides\ no\ services = cannot find network service provider[uuid:{0}] or it provides no services

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:87
# args: puuid,notSupported
network\ service\ provider[uuid\:%s]\ doesn't\ provide\ services%s = network service provider[uuid:{0}] doesn't provide services{1}

# at: src/main/java/org/zstack/network/service/NetworkServiceApiInterceptor.java:99
# args: type,msg.getL3NetworkUuid()
there\ has\ been\ a\ network\ service[%s]\ attached\ to\ L3\ network[uuid\:%s] = there has been a network service[{0}] attached to L3 network[uuid:{1}]

# at: src/main/java/org/zstack/network/service/NetworkServiceManagerImpl.java:332
# args: l3NetworkUuid,serviceType
L3Network[uuid\:%s]\ doesn't\ have\ network\ service[type\:%s]\ enabled\ or\ no\ provider\ provides\ this\ network\ service = L3Network[uuid:{0}] doesn't have network service[type:{1}] enabled or no provider provides this network service

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:87
# args: msg.getVmNicUuid()
vmNic[uuid\:%s]\ is\ not\ attached\ to\ vmInstance,\ cannot\ get\ attachable\ eips = vmNic[uuid:{0}] is not attached to vmInstance, cannot get attachable eips

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:93
# args: 
either\ eipUuid\ or\ vipUuid\ must\ be\ set = either eipUuid or vipUuid must be set

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:99
# args: msg.getEipUuid()
eip[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ cannot\ get\ attachable\ vm\ nic = eip[uuid:{0}] is not in state of Enabled, cannot get attachable vm nic

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:137
# args: guestIpUuid,vmNicUuid
ip\ [uuid\:%s]\ is\ attached\ to\ vm\ nic\ [%s] = ip [uuid:{0}] is attached to vm nic [{1}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:148
# args: msg.getEipUuid(),vmNicUuid
eip[uuid\:%s]\ has\ attached\ to\ another\ vm\ nic[uuid\:%s],\ can't\ attach\ again = eip[uuid:{0}] has attached to another vm nic[uuid:{1}], can't attach again

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:154
# args: msg.getEipUuid(),EipState.Enabled,state
eip[uuid\:\ %s]\ can\ only\ be\ attached\ when\ state\ is\ %s,\ current\ state\ is\ %s = eip[uuid: {0}] can only be attached when state is {1}, current state is {2}

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:184
# args: msg.getVmNicUuid(),msg.getEipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ EIP[uuid\:%s]\ are\ the\ same\ network = guest l3Network of vm nic[uuid:{0}] and vip l3Network of EIP[uuid:{1}] are the same network

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:203
# args: msg.getEipUuid(),msg.getVmNicUuid()
Ip\ address\ [uuid\:%s]\ is\ not\ belonged\ to\ nic\ [uuid\:%s] = Ip address [uuid:{0}] is not belonged to nic [uuid:{1}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:216
# args: msg.getUuid()
eip[uuid\:%s]\ has\ not\ attached\ to\ any\ vm\ nic = eip[uuid:{0}] has not attached to any vm nic

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:239
# args: vipIp.getIpVersion(),guestIp.getIpVersion()
vip\ ipVersion\ [%d]\ is\ different\ from\ guestIp\ ipVersion\ [%d]. = vip ipVersion [{0}] is different from guestIp ipVersion [{1}].

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:246
# args: vipIp.getIp(),guestRange.getStartIp(),guestRange.getEndIp()
Vip[%s]\ is\ in\ the\ guest\ ip\ range\ [%s,\ %s] = Vip[{0}] is in the guest ip range [{1}, {2}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:266
# args: vmUuid,vip.getL3NetworkUuid(),vip.getUuid(),vip.getName(),vip.getIp()
the\ vm[uuid\:%s]\ that\ the\ EIP\ is\ about\ to\ attach\ is\ already\ on\ the\ public\ network[uuid\:%s]\ from\ which\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:%s]\ comes = the vm[uuid:{0}] that the EIP is about to attach is already on the public network[uuid:{1}] from which the vip[uuid:{2}, name:{3}, ip:{4}] comes

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:277
# args: msg.getVipUuid(),useForList.toString()
vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = vip[uuid:{0}] has been occupied other network service entity[{1}]

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:282
# args: 
eip\ can\ not\ be\ created\ on\ system\ vip = eip can not be created on system vip

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:286
# args: msg.getVipUuid(),VipState.Enabled,vip.getState()
vip[uuid\:%s]\ is\ not\ in\ state[%s],\ current\ state\ is\ %s = vip[uuid:{0}] is not in state[{1}], current state is {2}

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:323
# args: state.toString()
vm\ state[%s]\ is\ not\ allowed\ to\ operate\ eip,\ maybe\ you\ should\ wait\ the\ vm\ process\ complete = vm state[{0}] is not allowed to operate eip, maybe you should wait the vm process complete

# at: src/main/java/org/zstack/network/service/eip/EipApiInterceptor.java:337
# args: vmNicUuid
vmNic\ uuid[%s]\ is\ not\ allowed\ add\ eip,\ because\ vmNic\ exist\ portForwarding\ with\ allowedCidr\ rule = vmNic uuid[{0}] is not allowed add eip, because vmNic exist portForwarding with allowedCidr rule

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1463
# args: struct.getEip().getUuid()
eip\ [uuid\:%s]\ is\ deleted = eip [uuid:{0}] is deleted

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1316
# args: eip.getGuestIp(),nicIps
cannot\ find\ Eip\ guest\ ip\:\ %s\ in\ vmNic\ ips\ \:%s = cannot find Eip guest ip: {0} in vmNic ips :{1}

# at: src/main/java/org/zstack/network/service/eip/EipManagerImpl.java:1622
# args: l3.getUuid(),l3.getName(),vm.getUuid(),vm.getName()
unable\ to\ attach\ the\ L3\ network[uuid\:%s,\ name\:%s]\ to\ the\ vm[uuid\:%s,\ name\:%s],\ because\ the\ L3\ network\ is\ providing\ EIP\ to\ one\ of\ the\ vm's\ nic = unable to attach the L3 network[uuid:{0}, name:{1}] to the vm[uuid:{2}, name:{3}], because the L3 network is providing EIP to one of the vm's nic

# at: src/main/java/org/zstack/network/service/flat/DhcpApply.java:73
# args: msg.getL3NetworkUuid()
could\ not\ get\ dhcp4\ server\ ip\ for\ l3\ network\ [uuid\:%s] = could not get dhcp4 server ip for l3 network [uuid:{0}]

# at: src/main/java/org/zstack/network/service/flat/DhcpApply.java:77
# args: msg.getL3NetworkUuid()
could\ not\ get\ dhcp6\ server\ ip\ for\ l3\ network\ [uuid\:%s] = could not get dhcp6 server ip for l3 network [uuid:{0}]

# at: src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java:39
# args: 
Session/account\ uuid\ is\ not\ valid. = Session/account uuid is not valid.

# at: src/main/java/org/zstack/network/service/flat/FlatApiInterceptor.java:43
# args: accountUuid,msg.getL3NetworkUuid()
the\ account[uuid\:%s]\ has\ no\ access\ to\ the\ resource[uuid\:%s,\ type\:L3NetworkVO] = the account[uuid:{0}] has no access to the resource[uuid:{1}, type:L3NetworkVO]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:647
# args: 
l3\ network\ uuid\ cannot\ be\ null = l3 network uuid cannot be null

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:654
# args: msg.getL3NetworkUuid()
Cannot\ find\ DhcpIp\ for\ l3\ network[uuid\:%s] = Cannot find DhcpIp for l3 network[uuid:{0}]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:998
# args: inv.getUuid(),destHostUuid
cannot\ configure\ DHCP\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = cannot configure DHCP for vm[uuid:{0}] on the destination host[uuid:{1}]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1751
# args: IPv6Constants.IPV6_PREFIX_LEN_MIN_DNSMASQ
minimum\ ip\ range\ prefix\ length\ of\ flat\ network\ is\ %d = minimum ip range prefix length of flat network is {0}

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1780
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ is\ not\ a\ IPv6\ address = DHCP server ip [{0}] is not a IPv6 address

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1776
# args: dhcpServerIp,inv.getNetworkCidr()
DHCP\ server\ ip\ [%s]\ is\ not\ in\ the\ cidr\ [%s] = DHCP server ip [{0}] is not in the cidr [{1}]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1772
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ is\ not\ a\ IPv4\ address = DHCP server ip [{0}] is not a IPv4 address

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1791
# args: entry.getKey(),inv.getL3NetworkUuid()
DHCP\ server\ ip\ [%s]\ is\ already\ existed\ in\ l3\ network\ [%s] = DHCP server ip [{0}] is already existed in l3 network [{1}]

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1796
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ can\ not\ be\ equaled\ to\ gateway\ ip = DHCP server ip [{0}] can not be equaled to gateway ip

# at: src/main/java/org/zstack/network/service/flat/FlatDhcpBackend.java:1802
# args: dhcpServerIp
DHCP\ server\ ip\ [%s]\ can\ not\ be\ configured\ to\ system\ l3 = DHCP server ip [{0}] can not be configured to system l3

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:80
# args: 
could\ not\ attach\ eip\ because\ ipv6\ eip\ can\ ONLY\ be\ attached\ to\ flat\ network = could not attach eip because ipv6 eip can ONLY be attached to flat network

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:109
# args: vmNicUuid
L2Network\ where\ vip's\ L3Network\ based\ hasn't\ attached\ the\ cluster\ where\ vmNic[uuid\:%s]\ located = L2Network where vip's L3Network based hasn't attached the cluster where vmNic[uuid:{0}] located

# at: src/main/java/org/zstack/network/service/flat/FlatEipApiInterceptor.java:134
# args: version,vmNicUuid
can\ not\ bound\ more\ than\ 1\ %s\ eip\ to\ a\ vm\ nic[uuid\:%s]\ of\ flat\  = can not bound more than 1 {0} eip to a vm nic[uuid:{1}] of flat 

# at: src/main/java/org/zstack/network/service/flat/FlatEipBackend.java:614
# args: vmUuid,vm.getState()
unable\ to\ apply\ the\ EIP\ operation\ for\ the\ the\ vm[uuid\:%s,\ state\:%s],\ because\ cannot\ find\ the\ VM's\ hostUUid = unable to apply the EIP operation for the the vm[uuid:{0}, state:{1}], because cannot find the VM's hostUUid

# at: src/main/java/org/zstack/network/service/flat/FlatUserdataBackend.java:374
# args: struct.getHostUuid()
host[uuid\:%s]\ is\ not\ connected = host[uuid:{0}] is not connected

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:306
# args: e.getMessage()
Invalid\ rule\ expression,\ the\ detail\:\ %s = Invalid rule expression, the detail: {0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:180
# args: 
could\ not\ get\ candidate\ vmnic,\ because\ both\ load\ balancer\ uuid\ and\ server\ group\ uuid\ are\ not\ specified = could not get candidate vmnic, because both load balancer uuid and server group uuid are not specified

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:198
# args: 
could\ not\ get\ candidate\ l3\ network,\ because\ both\ load\ balancer\ uuid\ and\ server\ group\ uuid\ are\ not\ specified = could not get candidate l3 network, because both load balancer uuid and server group uuid are not specified

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:222
# args: msg.getListenerUuid()
could\ not\ detach\ vm\ nic\ to\ load\ balancer\ listener[uuid\:%s],\ because\ default\ server\ group\ for\ listener\ has\ been\ deleted = could not detach vm nic to load balancer listener[uuid:{0}], because default server group for listener has been deleted

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:251
# args: vipVO.getIp()
Load\ balancer\ VIP\ [%s]\ cannot\ be\ the\ first\ or\ the\ last\ IP\ of\ the\ CIDR\ with\ the\ public\ address\ pool\ type = Load balancer VIP [{0}] cannot be the first or the last IP of the CIDR with the public address pool type

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:282
# args: ipVer
operation\ failure,\ not\ support\ the\ ip\ version\ %d = operation failure, not support the ip version {0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:288
# args: ips,acl.getUuid()
operation\ failure,\ duplicate/overlap\ ip\ entry\ in\ %s\ of\ accesscontrol\ list\ group\:%s = operation failure, duplicate/overlap ip entry in {0} of accesscontrol list group:{1}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:295
# args: ips
operation\ failure,\ ip\ format\ only\ supports\ ip/iprange/cidr,\ but\ find\ %s = operation failure, ip format only supports ip/iprange/cidr, but find {0}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:299
# args: startIp,endIp,NetworkUtils.longToIpv4String(r.lowerEndpoint()),NetworkUtils.longToIpv4String(r.upperEndpoint()),acl.getUuid()
ip\ range[%s,\ %s]\ is\ overlap\ with\ start\ ip\:%s,\ end\ ip\:\ %s\ of\ access-control-list\ group\:%s = ip range[{0}, {1}] is overlap with start ip:{2}, end ip: {3} of access-control-list group:{4}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:321
# args: aclUuids,lbUuid
Can't\ attach\ the\ type\ access-control-list\ group[%s]\ whose\ ip\ version\ is\ different\ with\ LoadBalancer[%s] = Can't attach the type access-control-list group[{0}] whose ip version is different with LoadBalancer[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:396
# args: aclEntry.getDomain(),aclEntry.getUrl(),acl.getUuid()
domian[%s],\ url[%s]\ duplicate/overlap\ redirect\ rule\ with\ access-control-list\ group\:%s = domian[{0}], url[{1}] duplicate/overlap redirect rule with access-control-list group:{2}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:506
# args: msg.getAclType(),msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ use\ to\ %s,\ but\ there\ some\ access-control-list\ not\ has\ ip\ entry\ but\ redirect\ rule = access-control-list groups[uuid:{0}] use to {1}, but there some access-control-list not has ip entry but redirect rule

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:515
# args: existingAcls,msg.getListenerUuid()
the\ access-control-list\ groups[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ listener[uuid\:%s] = the access-control-list groups[uuid:{0}] are already on the load balancer listener[uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:521
# args: msg.getListenerUuid(),type.toString()
the\ load\ balancer\ listener[uuid\:%s]\ just\ only\ attach\ the\ %s\ type\ access-control-list\ group = the load balancer listener[uuid:{0}] just only attach the {1} type access-control-list group

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:526
# args: msg.getListenerUuid(),LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)
the\ load\ balancer\ listener[uuid\:%s]\ can't\ \ attach\ more\ than\ %d\ access-control-list\ groups = the load balancer listener[uuid:{0}] can't  attach more than {1} access-control-list groups

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:414
# args: msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ use\ to\ redirect,\ but\ there\ some\ access-control-list\ not\ has\ redirect\ rule\ but\ ip\ entry = access-control-list groups[uuid:{0}] use to redirect, but there some access-control-list not has redirect rule but ip entry

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:419
# args: msg.getAclUuids()
redirect\ access-control-list\ groups[uuid\:%s]\ cannot\ only\ attach\ to\ load\ balancer\ listener,\ must\ assign\ server\ group = redirect access-control-list groups[uuid:{0}] cannot only attach to load balancer listener, must assign server group

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:424
# args: msg.getAclUuids(),msg.getListenerUuid()
access-control-list\ groups[uuid\:%s]\ attach\ to\ load\ balancer\ listener[uuid\:%s]\ not\ https\ or\ http = access-control-list groups[uuid:{0}] attach to load balancer listener[uuid:{1}] not https or http

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:547
# args: msg.getServerGroupUuids(),msg.getListenerUuid()
server\ group[%s]\ not\ attach\ to\ load\ balancer\ listener[%s] = server group[{0}] not attach to load balancer listener[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:443
# args: msg.getAclUuids()
access-control-list\ groups[uuid\:%s]\ has\ no\ redirect\ rule = access-control-list groups[uuid:{0}] has no redirect rule

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:456
# args: msg.getAclUuids(),msg.getListenerUuid()
access-control-list\ groups[uuid\:%s]\ has\ attach\ to\ another\ load\ balancer\ listener[uuid\:%s] = access-control-list groups[uuid:{0}] has attach to another load balancer listener[uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:468
# args: msg.getListenerUuid(),LoadBalancerGlobalConfig.ACL_REDIRECT_MAX_COUNT.value(Long.class)
the\ load\ balancer\ listener[uuid\:%s]\ can't\ \ attach\ more\ than\ %d\ redirect\ rule\ access-control-list\ groups = the load balancer listener[uuid:{0}] can't  attach more than {1} redirect rule access-control-list groups

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:494
# args: msg.getListenerUuid(),redireRuleExistAclUuid
load\ balancer\ listener\ [uuid\:%s]\ had\ redirect\ rule\ of\ access-control-list\ groups[uuid\:%s] = load balancer listener [uuid:{0}] had redirect rule of access-control-list groups[uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:555
# args: msg.getAclUuid(),msg.getListenerUuid()
acl[%s]\ not\ attach\ to\ load\ balancer\ listener[%s] = acl[{0}] not attach to load balancer listener[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1294
# args: l3Uuids,LoadBalancerConstants.LB_NETWORK_SERVICE_TYPE_STRING
L3\ networks[uuids\:%s]\ of\ the\ vm\ nics\ has\ no\ network\ service[%s]\ enabled = L3 networks[uuids:{0}] of the vm nics has no network service[{1}] enabled

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:587
# args: nicUuid,groupVO.getUuid()
could\ not\ attach\ vm\ nic\ to\ load\ balancer\ listener,\ because\ the\ vm\ nic[uuid\:%s]\ are\ already\ on\ the\ default\ server\ group\ [uuid\:%s] = could not attach vm nic to load balancer listener, because the vm nic[uuid:{0}] are already on the default server group [uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1176
# args: listenerVO.getProtocol(),msg.getHealthCheckProtocol()
the\ listener\ with\ protocol\ [%s]\ doesn't\ support\ this\ health\ check\:[%s] = the listener with protocol [{0}] doesn't support this health check:[{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1145
# args: 
the\ http\ health\ check\ protocol\ must\ be\ specified\ its\ healthy\ checking\ parameter\ healthCheckURI = the http health check protocol must be specified its healthy checking parameter healthCheckURI

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1152
# args: msg.getHealthCheckHttpCode()
the\ http\ health\ check\ protocol's\ expecting\ code\ [%s]\ is\ invalidate = the http health check protocol's expecting code [{0}] is invalidate

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:697
# args: LoadBalancerGlobalConfig.ACL_MAX_COUNT.value(Long.class)
Can't\ attach\ more\ than\ %d\ access-control-list\ groups\ to\ a\ listener = Can't attach more than {0} access-control-list groups to a listener

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:787
# args: msg.getProtocol(),msg.getName()
l4[%s]\ loadBalancer\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ state = l4[{0}] loadBalancer listener[{1}] doesn't support assigning session persistence state

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:808
# args: msg.getLoadBalancerUuid(),msg.getName(),algorithm
loadBalancer[%s]\ listener[%s]\ %s\ algorithm\ doesn't\ support\ assigning\ session\ persistence\ state\ except\ assigning\ disable\ explicitly = loadBalancer[{0}] listener[{1}] {2} algorithm doesn't support assigning session persistence state except assigning disable explicitly

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:823
# args: msg.getLoadBalancerUuid(),msg.getName(),algorithm
loadBalancer[%s]\ listener[%s]\ %s\ algorithm\ doesn't\ support\ assigning\ session\ persistence\ state\ except\ assigning\ iphash\ explicitly = loadBalancer[{0}] listener[{1}] {2} algorithm doesn't support assigning session persistence state except assigning iphash explicitly

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:849
# args: enableSession,Arrays.toString(LoadBalancerSessionPersistence.values())
invalid\ session\ persistence\ type[%s],\ it\ only\ support\ %s = invalid session persistence type[{0}], it only support {1}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:856
# args: timeout,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX
invalid\ session\ idle\ timeout[%s],\ it\ must\ be\ the\ number\ between[%s~%s]\  = invalid session idle timeout[{0}], it must be the number between[{1}~{2}] 

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:863
# args: cookieName,COOKIE_NAME_MAX
invalid\ session\ cookie\ name[%s],\ it\ must\ be\ shorter\ than\ [%s]\ characters = invalid session cookie name[{0}], it must be shorter than [{1}] characters

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:866
# args: cookieName
invalid\ session\ cookie\ name[%s],\ it\ must\ only\ contains\ letters,\ numbers\ and\ underscores = invalid session cookie name[{0}], it must only contains letters, numbers and underscores

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:870
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name\ at\ the\ same\ time = loadBalancer[{0}] listener[{1}] doesn't support assigning idle timeout and cookie name at the same time

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:876
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name,\ it\ must\ specify\ session\ persistence = loadBalancer[{0}] listener[{1}] doesn't support assigning idle timeout and cookie name, it must specify session persistence

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:880
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ idle\ timeout\ and\ cookie\ name\ when\ the\ session\ persistence\ is\ disabled = loadBalancer[{0}] listener[{1}] doesn't support assigning idle timeout and cookie name when the session persistence is disabled

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:894
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ rewrite\ without\ assigning\ cookie\ name = loadBalancer[{0}] listener[{1}] doesn't support assigning session persistence rewrite without assigning cookie name

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:899
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ idle\ timeout\ without\ assigning\ rewrite\ mode = loadBalancer[{0}] listener[{1}] doesn't support assigning session persistence idle timeout without assigning rewrite mode

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:904
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ cookieName\ without\ assigning\ insert\ mode = loadBalancer[{0}] listener[{1}] doesn't support assigning session persistence cookieName without assigning insert mode

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:909
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ rewrite\ when\ the\ http\ mode\ is\ http-tunnel = loadBalancer[{0}] listener[{1}] doesn't support assigning session persistence rewrite when the http mode is http-tunnel

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:920
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ other\ session\ persistence\ when\ the\ source\ balancer\ algorithm\ is\ source = loadBalancer[{0}] listener[{1}] doesn't support assigning other session persistence when the source balancer algorithm is source

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:932
# args: msg.getLoadBalancerUuid(),msg.getName()
loadBalancer[%s]\ listener[%s]\ doesn't\ support\ assigning\ session\ persistence\ iphash = loadBalancer[{0}] listener[{1}] doesn't support assigning session persistence iphash

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:950
# args: tag,s,LoadBalancerConstants.MAX_CONNECTION_LIMIT
invalid\ max\ connection[%s],\ %s\ is\ larger\ than\ upper\ threshold\ %d = invalid max connection[{0}], {1} is larger than upper threshold {2}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:972
# args: msg.getLoadBalancerPort(),luuid
conflict\ loadBalancerPort[%s],\ a\ listener[uuid\:%s]\ has\ used\ that\ port = conflict loadBalancerPort[{0}], a listener[uuid:{1}] has used that port

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1161
# args: listenerVO.getProtocol(),msg.getHealthCheckProtocol()
the\ listener\ with\ protocol\ [%s]\ doesn't\ support\ select\ security\ policy = the listener with protocol [{0}] doesn't support select security policy

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1005
# args: vo.getProtocol()
loadbalancer\ listener\ with\ type\ %s\ does\ not\ need\ certificate = loadbalancer listener with type {0} does not need certificate

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1009
# args: msg.getListenerUuid(),msg.getCertificateUuid()
loadbalancer\ listener\ [uuid\:%s]\ already\ had\ certificate[uuid\:%s] = loadbalancer listener [uuid:{0}] already had certificate[uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1019
# args: msg.getCertificateUuid(),msg.getListenerUuid()
certificate\ [uuid\:%s]\ is\ not\ added\ to\ loadbalancer\ listener\ [uuid\:%s] = certificate [uuid:{0}] is not added to loadbalancer listener [uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1034
# args: target
healthCheck\ target\ [%s]\ error,\ it\ must\ be\ 'default'\ or\ number\ between[1~65535]\  = healthCheck target [{0}] error, it must be 'default' or number between[1~65535] 

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1050
# args: listener.getProtocol(),listener.getName()
l4[%s]\ loadBalancer\ listener[%s]\ doesn't\ support\ modifying\ session\ persistence\ state = l4[{0}] loadBalancer listener[{1}] doesn't support modifying session persistence state

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1064
# args: msg.getUuid()
listener[%s]\ can\ not\ modifying\ session\ persistence\ rewrite\ when\ the\ http\ mode\ is\ http-tunnel = listener[{0}] can not modifying session persistence rewrite when the http mode is http-tunnel

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1072
# args: msg.getUuid()
listener[%s]\ can\ not\ modifying\ httpMode\ http-tunnel\ when\ the\ session\ persistence\ is\ rewrite = listener[{0}] can not modifying httpMode http-tunnel when the session persistence is rewrite

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1079
# args: msg.getUuid()
listener[%s]\ changes\ session\ persistence\ to\ iphash,\ it\ must\ specify\ source\ balancer\ algorithm = listener[{0}] changes session persistence to iphash, it must specify source balancer algorithm

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1084
# args: msg.getUuid()
listener[%s]\ modifies\ session\ persistence,\ it\ must\ specify\ balancer\ algorithm = listener[{0}] modifies session persistence, it must specify balancer algorithm

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1090
# args: msg.getUuid(),msg.getBalancerAlgorithm()
listener[%s]\ %s\ algorithm\ doesn't\ support\ modifying\ session\ persistence\ except\ assigning\ iphash\ explicitly = listener[{0}] {1} algorithm doesn't support modifying session persistence except assigning iphash explicitly

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1098
# args: msg.getUuid(),msg.getBalancerAlgorithm()
listener[%s]\ %s\ algorithm\ doesn't\ support\ modifying\ session\ persistence\ except\ assigning\ disable\ explicitly = listener[{0}] {1} algorithm doesn't support modifying session persistence except assigning disable explicitly

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1106
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ idle\ timeout\ and\ cookie\ name,\ it\ must\ specify\ session\ persistence = listener[{0}] doesn't support modifying idle timeout and cookie name, it must specify session persistence

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1110
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ idle\ timeout\ when\ the\ session\ persistence\ is\ not\ insert = listener[{0}] doesn't support modifying idle timeout when the session persistence is not insert

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1114
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ cookie\ name\ when\ the\ session\ persistence\ is\ not\ rewrite = listener[{0}] doesn't support modifying cookie name when the session persistence is not rewrite

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1118
# args: msg.getUuid()
listener[%s]\ doesn't\ support\ modifying\ session\ rewrite\ without\ modifying\ cookie\ name = listener[{0}] doesn't support modifying session rewrite without modifying cookie name

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1132
# args: timeout,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MIN,LoadBalancerConstants.SESSION_IDLE_TIMEOUT_MAX
invalid\ session\ idle\ timeout[%s],\ it\ must\ be\ the\ number\ between[%s~%s] = invalid session idle timeout[{0}], it must be the number between[{1}~{2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1181
# args: 
the\ http\ health\ check\ protocol\ must\ be\ specified\ its\ healthy\ checking\ parameters\ including\ healthCheckMethod\ and\ healthCheckURI = the http health check protocol must be specified its healthy checking parameters including healthCheckMethod and healthCheckURI

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1204
# args: msg.getUuid()
could\ not\ allow\ to\ delete\ default\ serverGroup[uuid\:%s] = could not allow to delete default serverGroup[uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1429
# args: msg.getServerGroupUuid()
loadbalacerServerGroup\ [%s]\ is\ non-existent = loadbalacerServerGroup [{0}] is non-existent

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1263
# args: vmNic.get("uuid"),msg.getServerGroupUuid()
could\ not\ add\ backend\ server\ vmnic[uuid\:%s]\ to\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ not\ exist = could not add backend server vmnic[uuid:{0}] to serverGroup[uuid:{1}],because vmnic uuid is not exist

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1274
# args: vmNic.get("weight")
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = could not add backend server vmnic to serverGroup[uuid:{0}] ,because vmnic weight[{1}] not a correct number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1552
# args: vmNic.get("uuid"),vmNicWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[vimNic\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = invalid balancer weight[vimNic:{0},weight:{1}], weight is not in the range [{2}, {3}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1304
# args: existingNics,msg.getServerGroupUuid()
the\ vm\ nics[uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ servegroup\ [uuid\:%s] = the vm nics[uuid:{0}] are already on the load balancer servegroup [uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1313
# args: msg.getServerGroupUuid(),vmNicIps
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup\ [uuid\:%s],\ because\ vmnic\ ip\ [ipAddress\:%s]\ is\ repeated = could not add backend server vmnic to serverGroup [uuid:{0}], because vmnic ip [ipAddress:{1}] is repeated

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1325
# args: vmNicUuids,msg.getServerGroupUuid(),listenerVO.getUuid()
could\ not\ add\ vm\ nic\ [uuid\:%s]\ to\ server\ group\ [uuid\:%s]\ because\ listener\ [uuid\:%s]\ attached\ this\ server\ group\ already\ the\ nic\ to\ be\ added = could not add vm nic [uuid:{0}] to server group [uuid:{1}] because listener [uuid:{2}] attached this server group already the nic to be added

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1606
# args: msg.getServerGroupUuid(),serverIps
could\ not\ add\ backend\ server\ ip\ to\ serverGroup\ [uuid\:%s],\ because\ ip\ [ipAddress\:%s]\ is\ invalid = could not add backend server ip to serverGroup [uuid:{0}], because ip [ipAddress:{1}] is invalid

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1341
# args: msg.getServerGroupUuid(),server.get("ipAddress")
could\ not\ add\ backend\ server\ ip\ to\ serverGroup\ [uuid\:%s],\ because\ ip\ [ipAddress\:%s]\ is\ repeated = could not add backend server ip to serverGroup [uuid:{0}], because ip [ipAddress:{1}] is repeated

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1599
# args: server.get("weight")
could\ not\ add\ backend\ server\ ip\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = could not add backend server ip to serverGroup[uuid:{0}] ,because vmnic weight[{1}] not a correct number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1352
# args: server.get("ipAddress"),serverIpWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ \ weight[serverIp\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = invalid  weight[serverIp:{0},weight:{1}], weight is not in the range [{2}, {3}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1367
# args: existingServerIps,msg.getServerGroupUuid()
the\ server\ ips\ [uuid\:%s]\ are\ already\ on\ the\ load\ balancer\ servegroup\ [uuid\:%s] = the server ips [uuid:{0}] are already on the load balancer servegroup [uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1611
# args: 
could\ not\ add\ server\ ip\ to\ share\ load\ balancer\ server\ group = could not add server ip to share load balancer server group

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1433
# args: 
vmnic\ or\ ip\ is\ null = vmnic or ip is null

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1397
# args: msg.getServerGroupUuid()
vmnics\ are\ all\ not\ in\ servergroup\ [%s] = vmnics are all not in servergroup [{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1414
# args: msg.getServerGroupUuid()
serverips\ are\ all\ not\ in\ servergroup\ [%s] = serverips are all not in servergroup [{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1444
# args: msg.getServerGroupUuid(),msg.getlistenerUuid()
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ it\ is\ already\ added\  = could not add server group[uuid:{0}} to listener [uuid:{1}] because it is already added 

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1461
# args: msg.getServerGroupUuid(),msg.getlistenerUuid(),nicUuid
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ nic\ [uuid\:%s]\ is\ already\ added = could not add server group[uuid:{0}} to listener [uuid:{1}] because nic [uuid:{2}] is already added

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1476
# args: msg.getServerGroupUuid(),msg.getlistenerUuid(),ipAddress
could\ not\ add\ server\ group[uuid\:%s}\ to\ listener\ [uuid\:%s]\ because\ server\ ip\ [%s]\ is\ already\ added = could not add server group[uuid:{0}} to listener [uuid:{1}] because server ip [{2}] is already added

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1496
# args: msg.getServerGroupUuid(),msg.getListenerUuid()
could\ not\ remove\ server\ group[uuid\:%s}\ from\ listener\ [uuid\:%s]\ because\ it\ is\ not\ added = could not remove server group[uuid:{0}} from listener [uuid:{1}] because it is not added

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1511
# args: loadBalancerUuid
loadbalacerUuid\ [%s]\ is\ non-existent = loadbalacerUuid [{0}] is non-existent

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1526
# args: msg.getServerGroupUuid()
could\ not\ find\ loadBalancer\ with\ serverGroup\ [uuid\:%s] = could not find loadBalancer with serverGroup [uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1567
# args: msg.getServerGroupUuid()
could\ not\ update\ backend\ server\ vmnic\ of\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ null = could not update backend server vmnic of serverGroup[uuid:{0}],because vmnic uuid is null

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1542
# args: msg.getServerGroupUuid(),vmNic.containsKey("uuid")
could\ not\ update\ backend\ server\ vmnic\ of\ serverGroup,because\ serverGroup[uuid\:%s]\ don\ not\ have\ vmnic\ [uuid\:%s]\  = could not update backend server vmnic of serverGroup,because serverGroup[uuid:{0}] don not have vmnic [uuid:{1}] 

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1564
# args: vmNic.get("uuid")
invalid\ balancer\ weight[vimNic\:%s],\ weight\ is\ null = invalid balancer weight[vimNic:{0}], weight is null

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1559
# args: vmNic.get("weight")
could\ not\ change\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s]\ ,because\ vmnic\ weight[%s]\ not\ a\ correct\ number = could not change backend server vmnic to serverGroup[uuid:{0}] ,because vmnic weight[{1}] not a correct number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1583
# args: msg.getServerGroupUuid(),ipAddress
could\ not\ update\ backend\ server\ ip\ of\ serverGroup,because\ serverGroup[uuid\:%s]\ don\ not\ have\ ip\ [ipAddress\:%s]\  = could not update backend server ip of serverGroup,because serverGroup[uuid:{0}] don not have ip [ipAddress:{1}] 

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1602
# args: server.get("ipAddress")
invalid\ balancer\ weight[serverIp\:%s],\ weight\ is\ null = invalid balancer weight[serverIp:{0}], weight is null

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1592
# args: server.get("ipAddress"),serverIpWeight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[serverIp\:%s,weight\:%s],\ weight\ is\ not\ in\ the\ range\ [%d,\ %d] = invalid balancer weight[serverIp:{0},weight:{1}], weight is not in the range [{2}, {3}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerApiInterceptor.java:1618
# args: 
could\ not\ change\ backendserver,\ beacause\ vmincs\ and\ serverips\ is\ null = could not change backendserver, beacause vmincs and serverips is null

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1355
# args: struct.listenerUuid
can\ not\ get\ service\ providerType\ for\ load\ balancer\ listener\ [uuid\:%s] = can not get service providerType for load balancer listener [uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1384
# args: self.getUuid(),self.getProviderType(),providerType
service\ provider\ type\ mismatching.\ The\ load\ balancer[uuid\:%s]\ is\ provided\ by\ the\ service\ provider[type\:%s],\ but\ new\ service\ provider\ is\ [type\:\ %s] = service provider type mismatching. The load balancer[uuid:{0}] is provided by the service provider[type:{1}], but new service provider is [type: {2}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:1486
# args: msg.getLoadBalancerPort(),msg.getLoadBalancerUuid()
there\ is\ listener\ with\ same\ port\ [%s]\ and\ same\ load\ balancer\ [uuid\:%s] = there is listener with same port [{0}] and same load balancer [uuid:{1}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerBase.java:2011
# args: param
invalid\ health\ checking\ parameters[%s],\ the\ format\ is\ method\:URI\:code,\ for\ example,\ GET\:/index.html\:http_2xx = invalid health checking parameters[{0}], the format is method:URI:code, for example, GET:/index.html:http_2xx

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:699
# args: systemTag
invalid\ health\ target[%s],\ the\ format\ is\ targetCheckProtocol\:port,\ for\ example,\ tcp\:default = invalid health target[{0}], the format is targetCheckProtocol:port, for example, tcp:default

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:100
# args: msg.getLoadBalancerUuid()
cannot\ find\ the\ load\ balancer[uuid\:%s] = cannot find the load balancer[uuid:{0}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:483
# args: tag.getTag()
cannot\ delete\ the\ system\ tag[%s].\ The\ load\ balancer\ plugin\ relies\ on\ it,\ you\ can\ only\ update\ it = cannot delete the system tag[{0}]. The load balancer plugin relies on it, you can only update it

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:502
# args: nicUuid,systemTag
nic[uuid\:%s]\ not\ found.\ Please\ correct\ your\ system\ tag[%s]\ of\ loadbalancer = nic[uuid:{0}] not found. Please correct your system tag[{1}] of loadbalancer

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:514
# args: systemTag,s
invalid\ balancer\ weight[%s],\ %s\ is\ not\ a\ number = invalid balancer weight[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:510
# args: systemTag,s,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight[%s],\ %s\ is\ not\ in\ the\ range\ [%d,\ %d] = invalid balancer weight[{0}], {1} is not in the range [{2}, {3}]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:526
# args: algorithm,LoadBalancerConstants.BALANCE_ALGORITHMS
invalid\ balance\ algorithm[%s],\ valid\ algorithms\ are\ %s = invalid balance algorithm[{0}], valid algorithms are {1}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:602
# args: systemTag,s
invalid\ unhealthy\ threshold[%s],\ %s\ is\ not\ a\ number = invalid unhealthy threshold[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:616
# args: systemTag,s
invalid\ healthy\ threshold[%s],\ %s\ is\ not\ a\ number = invalid healthy threshold[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:630
# args: systemTag,s
invalid\ healthy\ timeout[%s],\ %s\ is\ not\ a\ number = invalid healthy timeout[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:644
# args: systemTag,s
invalid\ connection\ idle\ timeout[%s],\ %s\ is\ not\ a\ number = invalid connection idle timeout[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:658
# args: systemTag,s
invalid\ health\ check\ interval[%s],\ %s\ is\ not\ a\ number = invalid health check interval[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:672
# args: systemTag,s
invalid\ max\ connection[%s],\ %s\ is\ not\ a\ number = invalid max connection[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:686
# args: systemTag,s
invalid\ process\ number[%s],\ %s\ is\ not\ a\ number = invalid process number[{0}], {1} is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:704
# args: systemTag,protocol,LoadBalancerConstants.HEALTH_CHECK_TARGET_PROTOCOLS
invalid\ health\ target[%s],\ the\ target\ checking\ protocol[%s]\ is\ invalid,\ valid\ protocols\ are\ %s = invalid health target[{0}], the target checking protocol[{1}] is invalid, valid protocols are {2}

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:716
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ a\ number = invalid invalid health target[{0}], port[{1}] is not a number

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerManagerImpl.java:713
# args: systemTag,port
invalid\ invalid\ health\ target[%s],\ port[%s]\ is\ not\ in\ the\ range\ of\ [1,\ 65535] = invalid invalid health target[{0}], port[{1}] is not in the range of [1, 65535]

# at: src/main/java/org/zstack/network/service/lb/LoadBalancerWeightOperator.java:89
# args: nicUuid,weight,LoadBalancerConstants.BALANCER_WEIGHT_MIN,LoadBalancerConstants.BALANCER_WEIGHT_MAX
invalid\ balancer\ weight\ for\ nic\:%s,\ %d\ is\ not\ in\ the\ range\ [%d,\ %d] = invalid balancer weight for nic:{0}, {1} is not in the range [{2}, {3}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:226
# args: msg.getVmNicUuid(),msg.getVipUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ vip[uuid\:\ %s]\ are\ the\ same\ network = guest l3Network of vm nic[uuid:{0}] and vip l3Network of vip[uuid: {1}] are the same network

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:201
# args: msg.getVipUuid(),useForList.toString()
the\ vip[uuid\:%s]\ has\ been\ occupied\ other\ network\ service\ entity[%s] = the vip[uuid:{0}] has been occupied other network service entity[{1}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:68
# args: msg.getRuleUuid(),state
Port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ current\ state\ is\ %s = Port forwarding rule[uuid:{0}] is not in state of Enabled, current state is {1}

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:83
# args: msg.getUuid()
port\ forwarding\ rule\ rule[uuid\:%s]\ has\ not\ been\ attached\ to\ any\ vm\ nic,\ can't\ detach = port forwarding rule rule[uuid:{0}] has not been attached to any vm nic, can't detach

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:99
# args: msg.getRuleUuid(),vmNicUuid
port\ forwarding\ rule[uuid\:%s]\ has\ been\ attached\ to\ vm\ nic[uuid\:%s],\ can't\ attach\ again = port forwarding rule[uuid:{0}] has been attached to vm nic[uuid:{1}], can't attach again

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:104
# args: msg.getRuleUuid(),state
port\ forwarding\ rule[uuid\:%s]\ is\ not\ in\ state\ of\ Enabled,\ \ current\ state\ is\ %s.\ A\ rule\ can\ only\ be\ attached\ when\ its\ state\ is\ Enabled = port forwarding rule[uuid:{0}] is not in state of Enabled,  current state is {1}. A rule can only be attached when its state is Enabled

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:123
# args: msg.getVmNicUuid(),msg.getRuleUuid()
guest\ l3Network\ of\ vm\ nic[uuid\:%s]\ and\ vip\ l3Network\ of\ port\ forwarding\ rule[uuid\:%s]\ are\ the\ same\ network = guest l3Network of vm nic[uuid:{0}] and vip l3Network of port forwarding rule[uuid:{1}] are the same network

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:167
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
could\ not\ create\ port\ forwarding\ rule,\ because\ vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ is\ incompatible\ with\ private\ port\ range[privateStartPort\:%s,\ privateEndPort\:%s] = could not create port forwarding rule, because vip port range[vipStartPort:{0}, vipEndPort:{1}] is incompatible with private port range[privateStartPort:{2}, privateEndPort:{3}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:184
# args: msg.getVipPortStart(),msg.getVipPortEnd(),msg.getPrivatePortStart(),msg.getPrivatePortEnd()
for\ range\ port\ forwarding,\ the\ port\ range\ size\ must\ match;\ vip\ range[%s,\ %s]'s\ size\ doesn't\ match\ range[%s,\ %s]'s\ size = for range port forwarding, the port range size must match; vip range[{0}, {1}]'s size doesn't match range[{2}, {3}]'s size

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:193
# args: msg.getAllowedCidr()
invalid\ CIDR[%s],\ only\ ipv4\ is\ supported = invalid CIDR[{0}], only ipv4 is supported

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:191
# args: msg.getAllowedCidr()
invalid\ CIDR[%s] = invalid CIDR[{0}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:211
# args: vipStart,vipEnd,vo.getUuid(),vo.getVipPortStart(),vo.getVipPortEnd()
vip\ port\ range[vipStartPort\:%s,\ vipEndPort\:%s]\ overlaps\ with\ rule[uuid\:%s,\ vipStartPort\:%s,\ vipEndPort\:%s] = vip port range[vipStartPort:{0}, vipEndPort:{1}] overlaps with rule[uuid:{2}, vipStartPort:{3}, vipEndPort:{4}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:269
# args: vm.getName(),vm.getUuid(),vipUuid
the\ VM[name\:%s\ uuid\:%s]\ already\ has\ port\ forwarding\ rules\ that\ have\ different\ VIPs\ than\ the\ one[uuid\:%s] = the VM[name:{0} uuid:{1}] already has port forwarding rules that have different VIPs than the one[uuid:{2}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:282
# args: vmNicUuid
vmNic\ uuid[%s]\ is\ not\ allowed\ add\ portForwarding\ with\ allowedCidr\ rule,\ because\ vmNic\ exist\ eip = vmNic uuid[{0}] is not allowed add portForwarding with allowedCidr rule, because vmNic exist eip

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:316
# args: vmNicUuid,privatePortStart,privatePortEnd,protocolType
could\ not\ attach\ port\ forwarding\ rule,\ because\ vmNic[uuid\:%s]\ already\ has\ a\ rule\ that\ overlaps\ the\ target\ private\ port\ ranges[%s,\ %s],\ has\ the\ same\ protocol\ type[%s]\ and\ has\ AllowedCidr = could not attach port forwarding rule, because vmNic[uuid:{0}] already has a rule that overlaps the target private port ranges[{1}, {2}], has the same protocol type[{3}] and has AllowedCidr

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingApiInterceptor.java:306
# args: vmNicUuid,privatePortStart,privatePortEnd,protocolType
could\ not\ attach\ port\ forwarding\ rule\ with\ allowedCidr,\ because\ vmNic[uuid\:%s]\ already\ has\ rules\ that\ overlap\ the\ target\ private\ port\ ranges[%s,\ %s]\ and\ have\ the\ same\ protocol\ type[%s] = could not attach port forwarding rule with allowedCidr, because vmNic[uuid:{0}] already has rules that overlap the target private port ranges[{1}, {2}] and have the same protocol type[{3}]

# at: src/main/java/org/zstack/network/service/portforwarding/PortForwardingManagerImpl.java:1222
# args: struct.getRule().getUuid()
port\ forwarding\ rule\ [uuid\:%s]\ is\ deleted = port forwarding rule [uuid:{0}] is deleted

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:375
# args: msg.getServerGroupUuid()
could\ not\ add\ backend\ server\ vmnic\ to\ serverGroup[uuid\:%s],because\ vmnic\ uuid\ is\ null = could not add backend server vmnic to serverGroup[uuid:{0}],because vmnic uuid is null

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:88
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ there\ is\ no\ load\ balancer\ slb\ group\ [uuid\:%s] = could not create slb instance because there is no load balancer slb group [uuid:{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:93
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ there\ is\ no\ slb\ offering\ configured\ for\ slb\ group\ [uuid\:%s] = could not create slb instance because there is no slb offering configured for slb group [uuid:{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:99
# args: msg.getSlbGroupUuid()
could\ not\ create\ slb\ instance\ because\ image\ uuid\ of\ slb\ offering\ [uuid\:%s]\ is\ null = could not create slb instance because image uuid of slb offering [uuid:{0}] is null

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:104
# args: slbOfferingVO.getImageUuid()
could\ not\ create\ slb\ instance\ because\ image\ [uuid\:%s]\ is\ deleted = could not create slb instance because image [uuid:{0}] is deleted

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:112
# args: frontL3.getCategory()
could\ not\ create\ slb\ group\ because\ invalid\ front\ l3\ network\ type\ %s = could not create slb group because invalid front l3 network type {0}

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:127
# args: 
could\ not\ create\ slb\ group,\ because\ front\ network\ doesn't\ support\ ipv6\ yet = could not create slb group, because front network doesn't support ipv6 yet

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:142
# args: 
could\ not\ create\ slb\ group,\ because\ backend\ network\ doesn't\ support\ ipv6\ yet = could not create slb group, because backend network doesn't support ipv6 yet

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:143
# args: msg.getResourceUuid()
could\ not\ change\ resource\ owner,\ because\ the\ resource[uuid\:%s,\ type\:VmInstance]\ has\ already\ attached\ security\ group = could not change resource owner, because the resource[uuid:{0}, type:VmInstance] has already attached security group

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:250
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ vm\ nic[uuid\:%s]\ not\ found = could no set vm nic security group, because vm nic[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:256
# args: msg.getVmNicUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ the\ vm\ nic[uuid\:%s]\ not\ attached\ to\ any\ security\ group = could no set vm nic security group, because the vm nic[uuid:{0}] not attached to any security group

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:266
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ not\ found = could no set vm nic security group, because security group[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:271
# args: priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ cannot\ be\ less\ than\ 1 = could no set vm nic security group, because invalid priority, priority[{0}] cannot be less than 1

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:275
# args: aoMap.get(priority),ao.getSecurityGroupUuid(),priority
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ priority,\ both\ security\ group\ %s\ and\ %s\ have\ priority[%d] = could no set vm nic security group, because duplicate priority, both security group {0} and {1} have priority[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:278
# args: ao.getSecurityGroupUuid()
could\ no\ set\ vm\ nic\ security\ group,\ because\ duplicate\ security\ group[uuid\:%s] = could no set vm nic security group, because duplicate security group[uuid:{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:288
# args: ao.getSecurityGroupUuid(),vmAccountUuid
could\ no\ set\ vm\ nic\ security\ group,\ because\ security\ group[uuid\:%s]\ is\ not\ owned\ by\ account[uuid\:%s]\ or\ admin = could no set vm nic security group, because security group[uuid:{0}] is not owned by account[uuid:{1}] or admin

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:298
# args: priorities[0]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority\ expects\ to\ start\ at\ 1,\ but\ [%d] = could no set vm nic security group, because invalid priority, priority expects to start at 1, but [{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:302
# args: priorities[i],priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ invalid\ priority,\ priority[%d]\ and\ priority[%d]\ expected\ to\ be\ consecutive = could no set vm nic security group, because invalid priority, priority[{0}] and priority[{1}] expected to be consecutive

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:348
# args: priorities[i + 1]
could\ no\ set\ vm\ nic\ security\ group,\ because\ admin\ security\ group\ priority[%d]\ must\ be\ higher\ than\ users = could no set vm nic security group, because admin security group priority[{0}] must be higher than users

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:357
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ ruleUuids\ is\ empty = could no change security group rule state, because ruleUuids is empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:361
# args: msg.getSecurityGroupUuid()
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group[uuid\:%s]\ not\ found = could no change security group rule state, because security group[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:369
# args: r
could\ no\ change\ security\ group\ rule\ state,\ because\ security\ group\ rule[uuid\:%s]\ not\ found = could no change security group rule state, because security group rule[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:378
# args: 
could\ no\ change\ security\ group\ rule\ state,\ because\ no\ security\ group\ rule\ state\ need\ to\ change = could no change security group rule state, because no security group rule state need to change

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:386
# args: 
could\ no\ change\ vm\ nic\ security\ policy,\ because\ ingress\ policy\ and\ egress\ policy\ cannot\ be\ both\ null = could no change vm nic security policy, because ingress policy and egress policy cannot be both null

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:389
# args: msg.getIngressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ ingress\ policy[%s] = could no change vm nic security policy, because invalid ingress policy[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:393
# args: msg.getEgressPolicy()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ invalid\ egress\ policy[%s] = could no change vm nic security policy, because invalid egress policy[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:397
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ not\ found = could no change vm nic security policy, because vm nic[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:402
# args: msg.getVmNicUuid()
could\ no\ change\ vm\ nic\ security\ policy,\ because\ vm\ nic[uuid\:%s]\ has\ no\ security\ policy = could no change vm nic security policy, because vm nic[uuid:{0}] has no security policy

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:416
# args: msg.getType()
could\ not\ update\ security\ group\ rule\ priority,\ because\ invalid\ type[%s] = could not update security group rule priority, because invalid type[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:421
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ is\ not\ exist = could not update security group rule priority, because security group[uuid:{0}] is not exist

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:425
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rules\ is\ empty = could not update security group rule priority, because rules is empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:435
# args: msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ security\ group[uuid\:%s]\ rules\ size\ not\ match = could not update security group rule priority, because security group[uuid:{0}] rules size not match

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:440
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ priority[%d]\ is\ invalid = could not update security group rule priority, because rule priority[{0}] is invalid

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:443
# args: ao.getPriority()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ has\ duplicate = could not update security group rule priority, because priority[{0}] has duplicate

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:449
# args: ao.getRuleUuid(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule[uuid\:%s]\ not\ in\ security\ group[uuid\:%s] = could not update security group rule priority, because rule[uuid:{0}] not in security group[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:452
# args: ao.getPriority(),msg.getSecurityGroupUuid()
could\ not\ update\ security\ group\ rule\ priority,\ because\ priority[%d]\ not\ in\ security\ group[uuid\:%s] = could not update security group rule priority, because priority[{0}] not in security group[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:457
# args: 
could\ not\ update\ security\ group\ rule\ priority,\ because\ rule\ uuid\ duplicate = could not update security group rule priority, because rule uuid duplicate

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:464
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule\ uuid[%s]\ is\ not\ exist = could not change security group rule, because security group rule uuid[{0}] is not exist

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:470
# args: msg.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ is\ default\ rule,\ only\ the\ description\ and\ status\ can\ be\ set = could not change security group rule, because security group rule[{0}] is default rule, only the description and status can be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:476
# args: msg.getUuid(),SecurityGroupConstant.DEFAULT_RULE_PRIORITY
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ priority\ cannot\ be\ set\ to\ default\ rule\ priority[%d] = could not change security group rule, because security group rule[{0}] priority cannot be set to default rule priority[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:485
# args: vo.getType(),count.intValue(),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = could not change security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:488
# args: vo.getType().toString(),count.intValue()
could\ not\ change\ security\ group\ rule,\ because\ the\ maximum\ priority\ of\ %s\ rule\ is\ [%d] = could not change security group rule, because the maximum priority of {0} rule is [{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:497
# args: msg.getState()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ state[%s] = could not change security group rule, because invalid state[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:505
# args: msg.getAction()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ action[%s] = could not change security group rule, because invalid action[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:513
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ invalid\ protocol[%s] = could not change security group rule, because invalid protocol[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:545
# args: msg.getUuid(),msg.getSrcIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Egress,\ srcIpRange[%s]\ cannot\ be\ set = could not change security group rule, because security group rule[{0}] type is Egress, srcIpRange[{1}] cannot be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:542
# args: msg.getUuid(),msg.getDstIpRange()
could\ not\ change\ security\ group\ rule,\ because\ security\ group\ rule[%s]\ type\ is\ Ingress,\ dstIpRange[%s]\ cannot\ be\ set = could not change security group rule, because security group rule[{0}] type is Ingress, dstIpRange[{1}] cannot be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:535
# args: msg.getSrcIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ srcIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = could not change security group rule, because srcIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:548
# args: msg.getDstIpRange(),msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ dstIpRange[%s]\ is\ set,\ remoteSecurityGroupUuid[%s]\ must\ be\ empty = could not change security group rule, because dstIpRange[{0}] is set, remoteSecurityGroupUuid[{1}] must be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:555
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ not\ found = could not change security group rule, because remote security group[uuid:{0}] not found

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:558
# args: msg.getRemoteSecurityGroupUuid()
could\ not\ change\ security\ group\ rule,\ because\ remote\ security\ group[uuid\:%s]\ is\ set,\ srcIpRange\ and\ dstIpRange\ must\ be\ empty = could not change security group rule, because remote security group[uuid:{0}] is set, srcIpRange and dstIpRange must be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:611
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ must\ be\ set = could not change security group rule, because rule protocol is [{0}], dstPortRange must be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:603
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ empty = could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be empty

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:598
# args: msg.getProtocol()
could\ not\ change\ security\ group\ rule,\ because\ rule\ protocol\ is\ [%s],\ dstPortRange\ cannot\ be\ set = could not change security group rule, because rule protocol is [{0}], dstPortRange cannot be set

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:642
# args: JSONObjectUtil.toJsonString(sao),o.getUuid()
could\ not\ change\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = could not change security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:145
# args: uuid,backendL3Cidr,frontL3Uuid,frontL3Cidr
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ cidr\ [%s]\ is\ overlapped\ with\ frond\ l3\ network[uuid\:%s]\ cidr\ [%s] = could not execute the api operation. backend network [uuid:{0}] cidr [{1}] is overlapped with frond l3 network[uuid:{2}] cidr [{3}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:768
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ can\ not\ be\ vpc\ network\ because\ other\ backend\ network\ is\ not\ vpc\ network = could not execute the api operation. backend network [uuid:{0}] can not be vpc network because other backend network is not vpc network

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:804
# args: 
can't\ delete\ rules\ of\ different\ security\ group = can't delete rules of different security group

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:807
# args: vo.getUuid()
can't\ delete\ default\ rule[uuid\:%s] = can't delete default rule[uuid:{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:170
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ not\ connected\ vpc\ router = could not execute the api operation. backend network [uuid:{0}] is not connected vpc router

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:835
# args: backendL3Uuids.get(0),firstBackendVrUuids.get(0),frontL3Uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ which\ is\ not\ connect\ to\ front\ network[uuid\:%s] = could not execute the api operation. backend network [uuid:{0}] is connected vpc router [uuid:{1}] which is not connect to front network[uuid:{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:897
# args: wrongUuids,securityGroupUuid
VM\ nics[uuids\:%s]\ are\ not\ on\ L3\ networks\ that\ have\ been\ attached\ to\ the\ security\ group[uuid\:%s] = VM nics[uuids:{0}] are not on L3 networks that have been attached to the security group[uuid:{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:933
# args: uuid
could\ not\ add\ security\ group\ rule,\ because\ security\ group[uuid\:%s]\ does\ not\ exist = could not add security group rule, because security group[uuid:{0}] does not exist

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:922
# args: SecurityGroupConstant.ONE_API_RULES_MAX_NUM
could\ not\ add\ security\ group\ rule,\ because\ the\ rules\ cannot\ be\ empty\ or\ exceed\ the\ max\ number\ %d = could not add security group rule, because the rules cannot be empty or exceed the max number {0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:927
# args: msg.getRemoteSecurityGroupUuids()
could\ not\ add\ security\ group\ rule,\ because\ duplicate\ uuid\ in\ remoteSecurityGroupUuids\:\ %s = could not add security group rule, because duplicate uuid in remoteSecurityGroupUuids: {0}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:938
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ remote\ security\ group\ uuid\ is\ conflict = could not add security group rule, because the remote security group uuid is conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:974
# args: SecurityGroupConstant.DEFAULT_RULE_PRIORITY,SecurityGroupConstant.LOWEST_RULE_PRIORITY
could\ not\ add\ security\ group\ rule,\ because\ rule\ priority\ must\ greater\ than\ %d\ or\ equals\ %d = could not add security group rule, because rule priority must greater than {0} or equals {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:982
# args: ao.getType(),SecurityGroupRuleType.getAllType()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ type[%s],\ valid\ types\ are\ %s = could not add security group rule, because invalid rule type[{0}], valid types are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:989
# args: ao.getState(),SecurityGroupRuleState.getAllState()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ state[%s],\ valid\ states\ are\ %s = could not add security group rule, because invalid rule state[{0}], valid states are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:994
# args: ao.getProtocol(),SecurityGroupRuleProtocolType.getAllProtocol()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ protocol[%s],\ valid\ protocols\ are\ %s = could not add security group rule, because invalid rule protocol[{0}], valid protocols are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1001
# args: ao.getAction(),SecurityGroupRuleAction.getAllAction()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ action[%s],\ valid\ actions\ are\ %s = could not add security group rule, because invalid rule action[{0}], valid actions are {1}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1009
# args: ao.getIpVersion(),IPv6Constants.IPv4,IPv6Constants.IPv6
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ ipVersion[%d],\ valid\ ipVersions\ are\ %d/%d = could not add security group rule, because invalid rule ipVersion[{0}], valid ipVersions are {1}/{2}

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1037
# args: ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ dstIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ ingress\ rule = could not add security group rule, because the dstIpRange[{0}] is not allowed to set for ingress rule

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1042
# args: ao.getAllowedCidr(),ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ srcIpRange[%s]\ are\ in\ conflict = could not add security group rule, because the allowedCidr[{0}] and srcIpRange[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1031
# args: ao.getDstIpRange(),ao.getRemoteSecurityGroupUuid()
could\ not\ add\ security\ group\ rule,\ because\ the\ ip\ range[%s]\ and\ remoteSecurityGroupUuid[%s]\ are\ in\ conflict = could not add security group rule, because the ip range[{0}] and remoteSecurityGroupUuid[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1019
# args: ao.getSrcIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ srcIpRange[%s]\ is\ not\ allowed\ to\ set\ for\ egress\ rule = could not add security group rule, because the srcIpRange[{0}] is not allowed to set for egress rule

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1024
# args: ao.getAllowedCidr(),ao.getDstIpRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ allowedCidr[%s]\ and\ dstIpRange[%s]\ are\ in\ conflict = could not add security group rule, because the allowedCidr[{0}] and dstIpRange[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1073
# args: ao.getEndPort(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ invalid\ rule\ endPort[%d],\ endPort\ must\ be\ greater\ than\ or\ equal\ to\ startPort[%d] = could not add security group rule, because invalid rule endPort[{0}], endPort must be greater than or equal to startPort[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1076
# args: ao.getDstPortRange(),ao.getStartPort()
could\ not\ add\ security\ group\ rule,\ because\ dstPortRange[%s]\ and\ starPort[%s]\ are\ in\ conflict = could not add security group rule, because dstPortRange[{0}] and starPort[{1}] are in conflict

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1087
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ TCP/UDP\ must\ set\ dstPortRange = could not add security group rule, because the protocol type TCP/UDP must set dstPortRange

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1065
# args: ao.getDstPortRange()
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ dstPortRange[%s] = could not add security group rule, because the protocol type ALL or ICMP cant not set dstPortRange[{0}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1068
# args: 
could\ not\ add\ security\ group\ rule,\ because\ the\ protocol\ type\ ALL\ or\ ICMP\ cant\ not\ set\ startPort\ or\ endPort = could not add security group rule, because the protocol type ALL or ICMP cant not set startPort or endPort

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1097
# args: JSONObjectUtil.toJsonString(newRules.get(i)),JSONObjectUtil.toJsonString(newRules.get(j))
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ and\ rule[%s]\ are\ dupilicated = could not add security group rule, because rule[{0}] and rule[{1}] are dupilicated

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1121
# args: JSONObjectUtil.toJsonString(sao),vo.getUuid()
could\ not\ add\ security\ group\ rule,\ because\ rule[%s]\ is\ duplicated\ to\ rule[uuid\:%s]\ in\ datebase = could not add security group rule, because rule[{0}] is duplicated to rule[uuid:{1}] in datebase

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1136
# args: SecurityGroupRuleType.Egress,SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ has\ reached\ the\ maximum\ limit[%d] = could not add security group rule, because security group {0} rules has reached the maximum limit[{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1144
# args: SecurityGroupRuleType.Egress,(egressRuleCount + toCreateEgressRuleCount),SecurityGroupGlobalConfig.SECURITY_GROUP_RULES_NUM_LIMIT.value(Integer.class)
could\ not\ add\ security\ group\ rule,\ because\ security\ group\ %s\ rules\ number[%d]\ is\ out\ of\ max\ limit[%d] = could not add security group rule, because security group {0} rules number[{1}] is out of max limit[{2}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1148
# args: msg.getPriority(),ingressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ ingress\ rule\ maximum\ priority\ is\ [%d] = could not add security group rule, because priority[{0}] must be consecutive, the ingress rule maximum priority is [{1}]

# at: src/main/java/org/zstack/network/securitygroup/SecurityGroupApiInterceptor.java:1151
# args: msg.getPriority(),egressRuleCount
could\ not\ add\ security\ group\ rule,\ because\ priority[%d]\ must\ be\ consecutive,\ the\ egress\ rule\ maximum\ priority\ is\ [%d] = could not add security group rule, because priority[{0}] must be consecutive, the egress rule maximum priority is [{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:217
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ vpc\ network\ because\ other\ backend\ network\ is\ vpc\ network = could not execute the api operation. backend network [uuid:{0}] must be vpc network because other backend network is vpc network

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:228
# args: uuid,bVrUuids.get(0),firstBackendVrUuids.get(0)
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ while\ other\ backend\ network\ is\ connected\ to\ vpc\ router[uuid\:%s] = could not execute the api operation. backend network [uuid:{0}] is connected vpc router [uuid:{1}] while other backend network is connected to vpc router[uuid:{2}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:186
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ private\ flat\ network\ because\ frond\ l3\ network\ is\ private\ flat\ network = could not execute the api operation. backend network [uuid:{0}] must be private flat network because frond l3 network is private flat network

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:156
# args: frontL3.getUuid()
could\ not\ execute\ the\ api\ operation.\ frontend\ network\ [uuid\:%s]\ is\ not\ connected\ vpc\ router = could not execute the api operation. frontend network [uuid:{0}] is not connected vpc router

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:164
# args: uuid
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ must\ be\ vpc\ network\ because\ frond\ l3\ network\ is\ vpc\ network = could not execute the api operation. backend network [uuid:{0}] must be vpc network because frond l3 network is vpc network

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:175
# args: uuid,backendVrUuids.get(0),frontVrUuids.get(0)
could\ not\ execute\ the\ api\ operation.\ backend\ network\ [uuid\:%s]\ is\ connected\ vpc\ router\ [uuid\:%s]\ while\ front\ network\ is\ connected\ to\ vpc\ router[uuid\:%s] = could not execute the api operation. backend network [uuid:{0}] is connected vpc router [uuid:{1}] while front network is connected to vpc router[uuid:{2}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:254
# args: msg.getDeployType()
could\ not\ create\ slb\ group\ because\ invalid\ deploy\ type\ %s = could not create slb group because invalid deploy type {0}

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:263
# args: msg.getBackendType()
could\ not\ create\ slb\ group\ because\ invalid\ backend\ type\ %s = could not create slb group because invalid backend type {0}

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:298
# args: frontL3Uuid,slbVO.getUuid()
can\ not\ detach\ front\ end\ l3\ network\ [uuid\:%s]\ from\ SLB\ instance = can not detach front end l3 network [uuid:{0}] from SLB instance

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:303
# args: slbVO.getManagementNetworkUuid(),slbVO.getUuid()
can\ not\ detach\ management\ l3\ network\ [uuid\:%s]\ from\ SLB\ instance = can not detach management l3 network [uuid:{0}] from SLB instance

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:315
# args: msg.getVmNicUuid()
can\ not\ detach\ nic\ [uuid\:%s]\ from\ SLB\ instance,\ because\ it\ is\ the\ last\ backend\ l3\ network\ nic = can not detach nic [uuid:{0}] from SLB instance, because it is the last backend l3 network nic

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:343
# args: msg.getVipUuid(),vipVO.getServicesTypes()
can\ not\ create\ load\ balancer\ because\ vip\ [uuid\:%s]\ has\ attached\ other\ network\ service\ [%s] = can not create load balancer because vip [uuid:{0}] has attached other network service [{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:350
# args: msg.getVipUuid(),vrUuids
can\ not\ create\ load\ balancer\ because\ vip\ [uuid\:%s]\ has\ attached\ to\ vpc\ router\ [%s] = can not create load balancer because vip [uuid:{0}] has attached to vpc router [{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:356
# args: slbGroupUuid
can\ not\ create\ load\ balancer\ because\ invalid\ slb\ group\ [uuid\:%s] = can not create load balancer because invalid slb group [uuid:{0}]

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:407
# args: 
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network\ is\ not\ connected\ slb\ instance = could not add vmnic to load balancer server  group because l3 network is not connected slb instance

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:389
# args: uuid
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network\ [uuid\:%s]\ is\ connected\ any\ vpc\ router = could not add vmnic to load balancer server  group because l3 network [uuid:{0}] is connected any vpc router

# at: src/main/java/org/zstack/network/service/slb/SlbApiInterceptor.java:396
# args: uuid
could\ not\ add\ vmnic\ to\ load\ balancer\ server\ \ group\ because\ l3\ network[uuid\:%s]\ is\ connected\ to\ different\ vpc\ router = could not add vmnic to load balancer server  group because l3 network[uuid:{0}] is connected to different vpc router

# at: src/main/java/org/zstack/network/service/slb/SlbCreatePublicVipFlow.java:60
# args: slbInstance.getUuid(),frontL3Uuid
can\ not\ find\ nic\ of\ slb\ instance\ [uuid\:%s]\ which\ is\ attached\ to\ slb\ group\ front\ l3\ network\ [uuid\:%s] = can not find nic of slb instance [uuid:{0}] which is attached to slb group front l3 network [uuid:{1}]

# at: src/main/java/org/zstack/network/service/slb/SlbVyosBackend.java:38
# args: 
can\ not\ find\ slb\ vm\ instance = can not find slb vm instance

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:48
# args: 
system\ vip\ can\ not\ be\ deleted\ by\ API\ message = system vip can not be deleted by API message

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:54
# args: msg.getAllocatorStrategy()
unsupported\ ip\ allocation\ strategy[%s] = unsupported ip allocation strategy[{0}]

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:63
# args: msg.getRequiredIp()
requiredIp[%s]\ is\ not\ in\ valid\ IPv4\ mediaType = requiredIp[{0}] is not in valid IPv4 mediaType

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:70
# args: msg.getRequiredIp(),msg.getL3NetworkUuid()
there\ is\ already\ a\ vip[%s]\ on\ l3Network[uuid\:%s] = there is already a vip[{0}] on l3Network[uuid:{1}]

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:76
# args: msg.getRequiredIp()
required\ ip\ address\ [%s]\ is\ already\ used = required ip address [{0}] is already used

# at: src/main/java/org/zstack/network/service/vip/VipApiInterceptor.java:100
# args: 
could\ not\ create\ vip,\ because\ can\ not\ determine\ the\ vip\ version = could not create vip, because can not determine the vip version

# at: src/main/java/org/zstack/network/service/vip/VipBase.java:155
# args: self.getUuid(),self.getName(),self.getIp(),self.getServiceProvider()
service\ provider\ of\ the\ vip[uuid\:%s,\ name\:%s,\ ip\:\ %s]\ has\ been\ set\ to\ %s = service provider of the vip[uuid:{0}, name:{1}, ip: {2}] has been set to {3}

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:43
# args: 
VipQos\ for\ ipv6\ wil\ be\ added\ soon = VipQos for ipv6 wil be added soon

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:53
# args: msg.getVipUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ already\ existed = VipQos for Vip [uuid: {0}] already existed

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:48
# args: msg.getVipUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ already\ existed = VipQos for Vip [uuid: {0}] port {1} already existed

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:59
# args: 
SetVipQos\ MUST\ set\ InboundBandwidth\ or\ OutboundBandwidth = SetVipQos MUST set InboundBandwidth or OutboundBandwidth

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:67
# args: 
Cannot\ set\ Qos\ for\ this\ Vip.\ Not\ all\ peer\ l3networks\ provide\ VipQos\ service. = Cannot set Qos for this Vip. Not all peer l3networks provide VipQos service.

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:80
# args: msg.getUuid()
VipQos\ for\ Vip\ [uuid\:\ %s]\ does\ not\ exist = VipQos for Vip [uuid: {0}] does not exist

# at: src/main/java/org/zstack/network/service/vipQos/VipQosApiInterceptor.java:75
# args: msg.getUuid(),Integer.toString(msg.getPort())
VipQos\ for\ Vip\ [uuid\:\ %s]\ port\ %s\ does\ not\ exist = VipQos for Vip [uuid: {0}] port {1} does not exist

# at: src/main/java/org/zstack/network/service/vipQos/VipQosManagerImpl.java:129
# args: vipUuid
Can\ not\ find\ VipQos\ backend\ for\ Vip\ [uuid\:%s] = Can not find VipQos backend for Vip [uuid:{0}]

# at: src/main/java/org/zstack/network/service/vipQos/flat/FlatVipQosBackend.java:198
# args: hostUuid
operation\ error,\ vip\ %s\ has\ not\ bind\ to\ vm = operation error, vip {0} has not bind to vm

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:656
# args: self.getName(),self.getUuid(),self.getState()
the\ virtual\ router[name\:%s,\ uuid\:%s,\ current\ state\:%s]\ is\ not\ running,and\ cannot\ perform\ required\ operation.\ Please\ retry\ your\ operation\ later\ once\ it\ is\ running = the virtual router[name:{0}, uuid:{1}, current state:{2}] is not running,and cannot perform required operation. Please retry your operation later once it is running

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:661
# args: self.getUuid(),getSelf().getStatus(),msg.getPath()
virtual\ router[uuid\:%s]\ is\ in\ status\ of\ %s\ that\ cannot\ make\ http\ call\ to\ %s = virtual router[uuid:{0}] is in status of {1} that cannot make http call to {2}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:666
# args: self.getUuid(),msg.getPath()
virtual\ router[uuid\:%s]\ has\ no\ management\ nic\ that\ cannot\ make\ http\ call\ to\ %s = virtual router[uuid:{0}] has no management nic that cannot make http call to {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouter.java:995
# args: info.getIp(),info.getMac(),vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError()
unable\ to\ add\ nic[ip\:%s,\ mac\:%s]\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s = unable to add nic[ip:{0}, mac:{1}] to virtual router vm[uuid:{2} ip:{3}], because {4}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:94
# args: msg.getDefaultRouteL3NetworkUuid(),msg.getVmInstanceUuid()
l3\ uuid[\:%s]\ is\ same\ to\ default\ network\ of\ virtual\ router\ [uuid\:%s] = l3 uuid[:{0}] is same to default network of virtual router [uuid:{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:107
# args: msg.getDefaultRouteL3NetworkUuid(),msg.getVmInstanceUuid()
l3\ uuid[\:%s]\ is\ not\ attached\ to\ virtual\ router\ [uuid\:%s] = l3 uuid[:{0}] is not attached to virtual router [uuid:{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:114
# args: msg.getDefaultRouteL3NetworkUuid()
could\ not\ set\ the\ default\ network,\ because\ l3\ uuid[\:%s]\ is\ not\ public\ network = could not set the default network, because l3 uuid[:{0}] is not public network

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:112
# args: msg.getDefaultRouteL3NetworkUuid()
could\ not\ set\ the\ default\ network,\ because\ l3\ uuid[\:%s]\ is\ management\ network = could not set the default network, because l3 uuid[:{0}] is management network

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:219
# args: msg.getImageUuid(),type,ImageMediaType.RootVolumeTemplate
image[uuid\:%s]'s\ mediaType\ is\ %s,\ the\ mediaType\ of\ a\ virtual\ router\ image\ must\ be\ %s = image[uuid:{0}]'s mediaType is {1}, the mediaType of a virtual router image must be {2}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:225
# args: msg.getImageUuid(),format
image[uuid\:%s]\ is\ of\ format\ %s,\ cannot\ be\ used\ for\ virtual\ router = image[uuid:{0}] is of format {1}, cannot be used for virtual router

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:191
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
management\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = management network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:196
# args: 
can\ not\ create\ virtual\ router\ offering,\ because\ management\ network\ doesn't\ support\ ipv6\ yet = can not create virtual router offering, because management network doesn't support ipv6 yet

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:208
# args: msg.getManagementNetworkUuid(),msg.getZoneUuid()
public\ network[uuid\:%s]\ is\ not\ in\ the\ same\ zone[uuid\:%s]\ this\ offering\ is\ going\ to\ create = public network[uuid:{0}] is not in the same zone[uuid:{1}] this offering is going to create

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:236
# args: msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ public\ network = the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a public network

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:234
# args: msg.getManagementNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ has\ the\ SNAT\ service\ enabled,\ it\ cannot\ be\ used\ as\ a\ management\ network = the L3 network[uuid: {0}] has the SNAT service enabled, it cannot be used as a management network

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:243
# args: msg.getManagementNetworkUuid(),msg.getPublicNetworkUuid()
the\ L3\ network[uuid\:\ %s]\ is\ same\ network\ address\ with\ [uuid\:\ %s],\ it\ cannot\ be\ used\ for\ virtual\ router = the L3 network[uuid: {0}] is same network address with [uuid: {1}], it cannot be used for virtual router

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:253
# args: managementNetworkUuid
the\ management\ network[uuid\:%s]\ doesn't\ have\ any\ IP\ range = the management network[uuid:{0}] doesn't have any IP range

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterApiInterceptor.java:274
# args: managementNetworkUuid,gateway
the\ management\ network[uuid\:%s,\ gateway\:%s]\ is\ not\ reachable = the management network[uuid:{0}, gateway:{1}] is not reachable

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:103
# args: iso.getIsoPath(),vrSpec.getDestHost().getUuid(),vrSpec.getDestHost().getManagementIp(),iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ create\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = failed to create VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}, ip:{2}] for virtual router[uuid:{3}], because {4}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterKvmBackend.java:136
# args: iso.getIsoPath(),hostUuid,iso.getVirtualRouterUuid(),rsp.getError()
failed\ to\ delete\ VirtualRouterBootstrapIso[%s]\ on\ kvm\ host[uuid\:%s]\ for\ virtual\ router[uuid\:%s],\ because\ %s = failed to delete VirtualRouterBootstrapIso[{0}] on kvm host[uuid:{1}] for virtual router[uuid:{2}], because {3}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:289
# args: 
cannot\ create\ virtual\ Router\ vm\ while\ virtual\ router\ network\ overlaps\ with\ private\ network\ in\ ip\  = cannot create virtual Router vm while virtual router network overlaps with private network in ip 

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:716
# args: offeringUuid
No\ virtual\ router\ instance\ offering\ with\ uuid\:%s\ is\ found = No virtual router instance offering with uuid:{0} is found

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:720
# args: offeringUuid,resourceUuid
the\ network\ of\ virtual\ router\ instance\ offering\ with\ uuid\:%s\ can't\ be\ same\ with\ private\ l3\ network\ uuid\:%s = the network of virtual router instance offering with uuid:{0} can't be same with private l3 network uuid:{1}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1434
# args: l3NetworkUuid
cannot\ add\ ip\ range,\ because\ l3\ network[uuid\:%s]\ is\ management\ network\ of\ virtual\ router\ offering = cannot add ip range, because l3 network[uuid:{0}] is management network of virtual router offering

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1439
# args: l3NetworkUuid
cannot\ add\ ip\ range,\ because\ l3\ network[uuid\:%s]\ is\ management\ network\ of\ virtual\ router = cannot add ip range, because l3 network[uuid:{0}] is management network of virtual router

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1466
# args: tag,type
couldn't\ add\ image,\ because\ systemTag\ [%s]\ includes\ invalid\ appliance\ image\ type\ [%s] = couldn't add image, because systemTag [{0}] includes invalid appliance image type [{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1504
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ eip\ is\ selected,\ snat\ must\ be\ selected\ too = failed tot attach virtual router network services to l3Network[uuid:{0}]. When eip is selected, snat must be selected too

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:1508
# args: msg.getL3NetworkUuid()
failed\ tot\ attach\ virtual\ router\ network\ services\ to\ l3Network[uuid\:%s].\ When\ port\ forwarding\ is\ selected,\ snat\ must\ be\ selected\ too = failed tot attach virtual router network services to l3Network[uuid:{0}]. When port forwarding is selected, snat must be selected too

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:2445
# args: vrUuid,ret.getError()
update\ virtual\ router\ [uuid\:%s]\ default\ network\ failed,\ because\ %s = update virtual router [uuid:{0}] default network failed, because {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/VirtualRouterManagerImpl.java:2541
# args: ss[1]
invalid\ ApplianceVmType\ %s = invalid ApplianceVmType {0}

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:93
# args: vr.getUuid(),vr.getManagementNic().getIp(),rsp.getError(),JSONObjectUtil.toJsonString(info)
unable\ to\ add\ dhcp\ entries\ to\ virtual\ router\ vm[uuid\:%s\ ip\:%s],\ because\ %s,\ dhcp\ entry[%s] = unable to add dhcp entries to virtual router vm[uuid:{0} ip:{1}], because {2}, dhcp entry[{3}]

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterDhcpBackend.java:375
# args: 
no\ virtual\ router\ is\ configured\ for\ vyos\ dhcp = no virtual router is configured for vyos dhcp

# at: src/main/java/org/zstack/network/service/virtualrouter/dhcp/VirtualRouterSyncDHCPOnStartFlow.java:208
# args: vr.getUuid(),vr.getManagementNic().getIp(),ret.getError()
unable\ to\ program\ dhcp\ entries\ served\ by\ virtual\ router[uuid\:%s,\ ip\:%s],\ %s = unable to program dhcp entries served by virtual router[uuid:{0}, ip:{1}], {2}

# at: src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterDnsBackend.java:210
# args: vr.getUuid(),vr.getManagementNic().getIp(),struct,l3.getUuid(),l3.getName(),ret.getError()
virtual\ router[uuid\:%s,\ ip\:%s]\ failed\ to\ configure\ dns%s\ for\ L3Network[uuid\:%s,\ name\:%s],\ %s = virtual router[uuid:{0}, ip:{1}] failed to configure dns{2} for L3Network[uuid:{3}, name:{4}], {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/dns/VirtualRouterSyncDnsOnStartFlow.java:127
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(dns),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ configure\ dns%s,\ %s\  = virtual router[name: {0}, uuid: {1}] failed to configure dns{2}, {3} 

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:168
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ create\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = failed to create eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:226
# args: offering.getUuid(),l3inv.getUuid(),l3inv.getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getEip().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ EIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network's public network[uuid:{3}] is not the same to EIP[uuid:{4}]'s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterEipBackend.java:318
# args: struct.getEip().getUuid(),struct.getEip().getName(),struct.getVip().getIp(),struct.getNic().getUuid(),vr.getUuid(),ret.getError()
failed\ to\ remove\ eip[uuid\:%s,\ name\:%s,\ ip\:%s]\ for\ vm\ nic[uuid\:%s]\ on\ virtual\ router[uuid\:%s],\ %s = failed to remove eip[uuid:{0}, name:{1}, ip:{2}] for vm nic[uuid:{3}] on virtual router[uuid:{4}], {5}

# at: src/main/java/org/zstack/network/service/virtualrouter/eip/VirtualRouterSyncEipOnStartFlow.java:214
# args: vr.getUuid(),ret.getError()
failed\ to\ sync\ eip\ on\ virtual\ router[uuid\:%s],\ %s = failed to sync eip on virtual router[uuid:{0}], {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/ha/VirtualRouterHaBackendImpl.java:63
# args: 
ha\ group\ extension\ point\ nil = ha group extension point nil

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:170
# args: msg.getVmNicUuids(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ attached\ vmnics\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = new add vm nics[uuids:{0}] and attached vmnics are not on the same vrouter, they are on vrouters[uuids:{1}]

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:200
# args: msg.getVmNicUuids(),peerL3NetworkUuids,msg.getLoadBalancerUuid(),vrUuids
new\ add\ vm\ nics[uuids\:%s]\ and\ peer\ l3s[uuids\:%s]\ of\ loadbalancer[uuid\:\ %s]'s\ vip\ are\ not\ on\ the\ same\ vrouter,\ they\ are\ on\ vrouters[uuids\:%s] = new add vm nics[uuids:{0}] and peer l3s[uuids:{1}] of loadbalancer[uuid: {2}]'s vip are not on the same vrouter, they are on vrouters[uuids:{3}]

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:1320
# args: 
vmnic\ must\ be\ specified\ for\ share\ loadbalancer = vmnic must be specified for share loadbalancer

# at: src/main/java/org/zstack/network/service/virtualrouter/lb/VirtualRouterLoadBalancerBackend.java:1778
# args: struct.getLb().getUuid()
cannot\ find\ virtual\ router\ for\ load\ balancer\ [uuid\:%s] = cannot find virtual router for load balancer [uuid:{0}]

# at: src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSnatBackend.java:91
# args: guestL3.getUuid(),guestL3.getName(),offering.getPublicNetworkUuid(),offering.getUuid(),offering.getName()
guest\ l3Network[uuid\:%s,\ name\:%s]\ needs\ SNAT\ service\ provided\ by\ virtual\ router,\ but\ public\ l3Network[uuid\:%s]\ of\ virtual\ router\ offering[uuid\:\ %s,\ name\:%s]\ is\ the\ same\ to\ this\ guest\ l3Network = guest l3Network[uuid:{0}, name:{1}] needs SNAT service provided by virtual router, but public l3Network[uuid:{2}] of virtual router offering[uuid: {3}, name:{4}] is the same to this guest l3Network

# at: src/main/java/org/zstack/network/service/virtualrouter/nat/VirtualRouterSyncSNATOnStartFlow.java:144
# args: vr.getName(),vr.getUuid(),JSONObjectUtil.toJsonString(snatInfo),ret.getError()
virtual\ router[name\:\ %s,\ uuid\:\ %s]\ failed\ to\ sync\ snat%s,\ %s = virtual router[name: {0}, uuid: {1}] failed to sync snat{2}, {3}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ApplyPortforwardingRuleOnVirtualRouterVmFlow.java:85
# args: to.getVipIp(),to.getPrivateIp(),to.getVipPortStart(),to.getVipPortEnd(),to.getPrivatePortStart(),to.getPrivatePortEnd(),ret.getError()
failed\ to\ create\ port\ forwarding\ rule[vip\ ip\:\ %s,\ private\ ip\:\ %s,\ vip\ start\ port\:\ %s,\ vip\ end\ port\:\ %s,\ private\ start\ port\:\ %s,\ private\ end\ port\:\ %s],\ because\ %s = failed to create port forwarding rule[vip ip: {0}, private ip: {1}, vip start port: {2}, vip end port: {3}, private start port: {4}, private end port: {5}], because {6}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/ReleasePortForwardingRuleOnVirtualRouterVmFlow.java:82
# args: JSONObjectUtil.toJsonString(to),ret.getError()
failed\ to\ revoke\ port\ forwarding\ rules\ %s,\ because\ %s = failed to revoke port forwarding rules {0}, because {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:184
# args: offering.getUuid(),struct.getGuestL3Network().getUuid(),struct.getGuestL3Network().getZoneUuid(),struct.getVip().getL3NetworkUuid(),struct.getRule().getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ PortForwarding\ rule[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network's public network[uuid:{3}] is not the same to PortForwarding rule[uuid:{4}]'s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:249
# args: rule.getVipPortStart(),rule.getVipPortEnd(),rule.getPrivatePortStart(),rule.getPrivatePortEnd()
virtual\ router\ doesn't\ support\ port\ forwarding\ range\ redirection,\ the\ vipPortStart\ must\ be\ equals\ to\ privatePortStart\ and\ vipPortEnd\ must\ be\ equals\ to\ privatePortEnd;but\ this\ rule\ rule\ has\ a\ mismatching\ range\:\ vip\ port[%s,\ %s],\ private\ port[%s,\ %s] = virtual router doesn't support port forwarding range redirection, the vipPortStart must be equals to privatePortStart and vipPortEnd must be equals to privatePortEnd;but this rule rule has a mismatching range: vip port[{0}, {1}], private port[{2}, {3}]

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:408
# args: vrVO.getUuid(),ret.getError()
failed\ to\ add\ portforwardings\ on\ virtual\ router[uuid\:%s],\ %s = failed to add portforwardings on virtual router[uuid:{0}], {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterPortForwardingBackend.java:484
# args: vrVO.getUuid(),ret.getError()
failed\ to\ revoke\ port\ forwardings\ on\ virtual\ router[uuid\:%s],\ %s = failed to revoke port forwardings on virtual router[uuid:{0}], {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/portforwarding/VirtualRouterSyncPortForwardingRulesOnStartFlow.java:212
# args: vr.getName(),vr.getUuid(),ret.getError()
failed\ to\ sync\ port\ forwarding\ rules\ served\ by\ virtual\ router[name\:\ %s,\ uuid\:\ %s],\ because\ %s = failed to sync port forwarding rules served by virtual router[name: {0}, uuid: {1}], because {2}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:179
# args: tos,ret.getError()
failed\ to\ remove\ vip%s,\ because\ %s = failed to remove vip{0}, because {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:125
# args: tos,vr.getUuid(),ret.getError()
failed\ to\ create\ vip%s\ on\ virtual\ router[uuid\:%s],\ because\ %s = failed to create vip{0} on virtual router[uuid:{1}], because {2}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBackend.java:245
# args: vips.stream().map(VipTO::getIp).collect(Collectors.toList()),nic.getVmInstanceUuid(),nic.getUuid(),nic.getIp(),ret.getError()
failed\ to\ sync\ vips[ips\:\ %s]\ on\ virtual\ router[uuid\:%s]\ for\ attaching\ nic[uuid\:\ %s,\ ip\:\ %s],\ because\ %s = failed to sync vips[ips: {0}] on virtual router[uuid:{1}] for attaching nic[uuid: {2}, ip: {3}], because {4}

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:240
# args: vrUuid,vrState
virtual\ router[uuid\:%s,\ state\:%s]\ is\ not\ running = virtual router[uuid:{0}, state:{1}] is not running

# at: src/main/java/org/zstack/network/service/virtualrouter/vip/VirtualRouterVipBaseBackend.java:281
# args: offering.getUuid(),s.getL3Network().getUuid(),s.getL3Network().getZoneUuid(),self.getL3NetworkUuid(),self.getUuid()
found\ a\ virtual\ router\ offering[uuid\:%s]\ for\ L3Network[uuid\:%s]\ in\ zone[uuid\:%s];\ however,\ the\ network's\ public\ network[uuid\:%s]\ is\ not\ the\ same\ to\ VIP[uuid\:%s]'s;\ you\ may\ need\ to\ use\ system\ tag\ guestL3Network\:\:l3NetworkUuid\ to\ specify\ a\ particular\ virtual\ router\ offering\ for\ the\ L3Network = found a virtual router offering[uuid:{0}] for L3Network[uuid:{1}] in zone[uuid:{2}]; however, the network's public network[uuid:{3}] is not the same to VIP[uuid:{4}]'s; you may need to use system tag guestL3Network::l3NetworkUuid to specify a particular virtual router offering for the L3Network

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosChangePrivateL3FirewallDefaultActionExtensionPoint.java:67
# args: nic.getIp(),nic.getMac(),nic.getVmInstanceUuid(),rsp.getError()
failed\ to\ change\ nic[ip\:%s,\ mac\:%s]\ firewall\ default\ action\ of\ virtual\ router\ vm[uuid\:%s],\ because\ %s = failed to change nic[ip:{0}, mac:{1}] firewall default action of virtual router vm[uuid:{2}], because {3}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConfigSshFlow.java:156
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ virtual\ router[%s]\ after\ configure\ ssh = unable to ssh in to the virtual router[{0}] after configure ssh

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosConnectFlow.java:214
# args: ret.getError()
vyos\ init\ command\ failed,\ because\:%s = vyos init command failed, because:{0}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java:246
# args: nic.getVmInstanceUuid(),rsp.getError()
unable\ to\ start\ dhcp\ server\ on\ virtual\ router\ vm[uuid\:%s],\ because\ %s = unable to start dhcp server on virtual router vm[uuid:{0}], because {1}

# at: src/main/java/org/zstack/network/service/virtualrouter/vyos/VyosDhcpBackend.java:282
# args: nic.getVmInstanceUuid(),rsp.getError()
unable\ to\ stop\ dhcp\ server\ on\ virtual\ router\ vm[uuid\:%s],\ because\ %s = unable to stop dhcp server on virtual router vm[uuid:{0}], because {1}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:104
# args: id
File\ reference\ not\ fount\ for\ disk\ %s = File reference not fount for disk {0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:117
# args: capacity
Illegal\ disk\ capacity\:\ %s = Illegal disk capacity: {0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:127
# args: pSize
Illegal\ disk\ populated\ size\:\ %s = Illegal disk populated size: {0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:288
# args: 
Volume\ controller\ not\ found. = Volume controller not found.

# at: src/main/java/org/zstack/ovf/OvfHelper.java:320
# args: 
CD\ Driver\ controller\ not\ found. = CD Driver controller not found.

# at: src/main/java/org/zstack/ovf/OvfHelper.java:368
# args: name
Ethernet\ Adapter\:\ %s\ do\ not\ connect\ to\ a\ network. = Ethernet Adapter: {0} do not connect to a network.

# at: src/main/java/org/zstack/ovf/OvfHelper.java:380
# args: 
Memory\ 'InstanceID'\ not\ found = Memory 'InstanceID' not found

# at: src/main/java/org/zstack/ovf/OvfHelper.java:387
# args: 
Memory\ 'VirtualQuantity'\ not\ found = Memory 'VirtualQuantity' not found

# at: src/main/java/org/zstack/ovf/OvfHelper.java:392
# args: quantity
Illegal\ Memory\ 'VirtualQuantity'\ value\:\ %s = Illegal Memory 'VirtualQuantity' value: {0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:401
# args: 
CPU\ 'InstanceID'\ not\ found = CPU 'InstanceID' not found

# at: src/main/java/org/zstack/ovf/OvfHelper.java:407
# args: 
CPU\ 'VirtualQuantity'\ not\ found = CPU 'VirtualQuantity' not found

# at: src/main/java/org/zstack/ovf/OvfHelper.java:412
# args: quantity
Illegal\ CPU\ 'VirtualQuantity'\ value\:\ %s = Illegal CPU 'VirtualQuantity' value: {0}

# at: src/main/java/org/zstack/ovf/OvfHelper.java:422
# args: cps
Illegal\ CPU\ 'CoresPerSocket'\ value\:\ %s = Illegal CPU 'CoresPerSocket' value: {0}

# at: src/main/java/org/zstack/ovf/OvfImageUploadTracker.java:156
# args: failLongJobUuids
long\ job[uuid\:%s]\ execute\ fail = long job[uuid:{0}] execute fail

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:69
# args: msg.getVmUuid(),ovaUuid
Vm[uuid\:\ %s]\ is\ already\ exported\ as\ the\ ova\ package[uuid\:\ %s],\ please\ delete\ the\ package\ and\ try\ again. = Vm[uuid: {0}] is already exported as the ova package[uuid: {1}], please delete the package and try again.

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:77
# args: msg.getBackupStorageUuid()
Export\ vm\ requires\ an\ ImageStore\ backup\ storage,\ but\ given\ backupStorageUuid\:\ %s\ is\ not\ an\ ImageStore\ backup\ storage. = Export vm requires an ImageStore backup storage, but given backupStorageUuid: {0} is not an ImageStore backup storage.

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:84
# args: msg.getVmUuid()
Not\ found\ the\ vm\ to\ be\ exported\ with\ the\ uuid\:\ %s = Not found the vm to be exported with the uuid: {0}

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:89
# args: VmInstanceState.Stopped.toString()
Only\ vm\ in\ state\:\ %s\ can\ be\ exported. = Only vm in state: {0} can be exported.

# at: src/main/java/org/zstack/ovf/OvfInterceptor.java:114
# args: 
failed\ to\ parse\ jsonCreateVmParam\ in\ APICreateVmInstanceFromOvfMsg = failed to parse jsonCreateVmParam in APICreateVmInstanceFromOvfMsg

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:229
# args: msg.getBackupStorageUuid(),msg.getVmUuid(),totalSize
backup\ storage[uuid\:\ %s]\ does\ not\ have\ enough\ available\ capacity\ for\ exporting\ vm[uuid\:\ %s],\ required\ capacity\ is\:\ %d = backup storage[uuid: {0}] does not have enough available capacity for exporting vm[uuid: {1}], required capacity is: {2}

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:629
# args: msg.getUuid()
ova\ package[uuid\:\ %s]\ not\ found. = ova package[uuid: {0}] not found.

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:757
# args: 
Failed\ to\ read\ ovf\ file. = Failed to read ovf file.

# at: src/main/java/org/zstack/ovf/OvfManagerImpl.java:1028
# args: 
failed\ to\ create\ VM\ from\ OVF\ because\ the\ root\ disk\ of\ the\ VM\ cannot\ be\ found = failed to create VM from OVF because the root disk of the VM cannot be found

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:417
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ doesn't\ exist = pci device[uuid:{0}] doesn't exist

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:422
# args: pci.getHostUuid()
could\ not\ enable\ sriov\ for\ device\ because\ iommu\ is\ disabled\ on\ host[uuid\:%s] = could not enable sriov for device because iommu is disabled on host[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:468
# args: pci.getHostUuid()
pci\ devices\ in\ host[uuid\:%s]\ already\ sriov\ virtualized = pci devices in host[uuid:{0}] already sriov virtualized

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:473
# args: pci.getHostUuid()
cannot\ sr-iov\ virtualize\ pci\ devices\ in\ host[uuid\:%s]\ that\ are\ attached\ to\ vm = cannot sr-iov virtualize pci devices in host[uuid:{0}] that are attached to vm

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:487
# args: minIns,pci.getType(),pci.getHostUuid()
only\ %d\ virtual\ pci\ devices\ can\ be\ generated\ by\ %ss\ in\ host[uuid\:%s] = only {0} virtual pci devices can be generated by {1}s in host[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:609
# args: pci.getHostUuid(),pci.getUuid()
the\ host[uuid\:%s]\ that\ pci\ device[uuid\:%s]\ in\ is\ not\ Connected = the host[uuid:{0}] that pci device[uuid:{1}] in is not Connected

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:505
# args: interfaceVO.getUuid()
cannot\ sr-iov\ virtualize\ pci\ devices\ on\ interface[uuid\:%s]\ that\ are\ been\ bonded = cannot sr-iov virtualize pci devices on interface[uuid:{0}] that are been bonded

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:513
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ not\ sriov\ virtualized = pci device[uuid:{0}] doesn't exist or is not sriov virtualized

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:528
# args: pci.getHostUuid()
virtual\ pci\ devices\ generated\ from\ pci\ devices\ in\ host[uuid\:%s]\ still\ attached\ to\ vm = virtual pci devices generated from pci devices in host[uuid:{0}] still attached to vm

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:550
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ cannot\ be\ virtualized\ into\ mdevs,\ make\ sure\ it's\ enabled\ and\ un-attached = pci device[uuid:{0}] cannot be virtualized into mdevs, make sure it's enabled and un-attached

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:561
# args: msg.getPciDeviceUuid(),msg.getMdevSpecUuid()
pci\ device[uuid\:%s]\ cannot\ be\ virtualized\ by\ mdev\ spec[uuid\:%s] = pci device[uuid:{0}] cannot be virtualized by mdev spec[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:583
# args: msg.getPciDeviceUuid()
pci\ device[uuid\:%s]\ is\ not\ virtualized\ into\ mdevs = pci device[uuid:{0}] is not virtualized into mdevs

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:600
# args: msg.getPciDeviceUuid()
mdev\ devices\ generated\ from\ pci\ device[uuid\:%s]\ still\ attached\ to\ vm = mdev devices generated from pci device[uuid:{0}] still attached to vm

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:624
# args: VmInstanceUuid
please\ umount\ all\ GPU\ devices\ of\ the\ vm[%s]\ and\ try\ again = please umount all GPU devices of the vm[{0}] and try again

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:628
# args: VmInstanceUuid
please\ umount\ all\ vGPU\ devices\ of\ the\ vm[%s]\ and\ try\ again = please umount all vGPU devices of the vm[{0}] and try again

# at: src/main/java/org/zstack/pciDevice/PciDeviceApiInterceptor.java:635
# args: VmInstanceUuid
please\ umount\ other\ pci\ devices\ of\ the\ vm[%s]\ and\ try\ again = please umount other pci devices of the vm[{0}] and try again

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:59
# args: vo.getUuid(),vo.getHostUuid(),attachedPciUuid,dstHostUuid
specified\ pci\ devices\ not\ on\ same\ host\:\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s]\ while\ pci\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s] = specified pci devices not on same host: pci device[uuid: {0}] on host[uuid: {1}] while pci device[uuid: {2}] on host[uuid: {3}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:92
# args: 
no\ candidate\ host\ with\ enough\ pci\ devices = no candidate host with enough pci devices

# at: src/main/java/org/zstack/pciDevice/PciDeviceFilterFlow.java:123
# args: vmUuid,specMap.keySet()
failed\ to\ start\ vm[uuid\:%s]\ because\ not\ all\ pci\ specs[uuids\:%s]\ exist = failed to start vm[uuid:{0}] because not all pci specs[uuids:{1}] exist

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1319
# args: vo.getType(),PciDeviceType.leagalPciDeviceCandidateTypes
illegal\ type[%s]\ for\ pci\ device,\ only\ %s\ are\ legal = illegal type[{0}] for pci device, only {1} are legal

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:719
# args: specUuid,hostUuid,vmUuid
failed\ to\ find\ enough\ pci\ device\ of\ spec[uuid\:%s]\ in\ dest\ host[uuid\:%s]\ for\ vm[uuid\:%s] = failed to find enough pci device of spec[uuid:{0}] in dest host[uuid:{1}] for vm[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:782
# args: pciUuid
something\ wrong\ with\ iommu\ group\ of\ pci\ device[uuid\:%s] = something wrong with iommu group of pci device[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:795
# args: pciUuids
pci\ devices\ [%s]\ are\ not\ all\ available = pci devices [{0}] are not all available

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:928
# args: msg.getPciDeviceUuid(),msg.getVmInstanceUuid()
can\ not\ attach\ this\ pci\ device[uuid\:%s]\ to\ vm[uuid\:%s]\ due\ to\ host\ allocation = can not attach this pci device[uuid:{0}] to vm[uuid:{1}] due to host allocation

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1221
# args: msg.getVmInstanceUuid()
can\ not\ migrate\ vm[uuid\:%s]\ since\ pci\ device\ attached = can not migrate vm[uuid:{0}] since pci device attached

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1270
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = cannot migrate root volume[uuid:{0}] because there are pci devices attached

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1316
# args: pciDeviceUuid
pci\ device[uuid\:%s]\ doesn't\ exists = pci device[uuid:{0}] doesn't exists

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1330
# args: pciSpecUuid
pci\ device\ spec[uuid\:%s]\ doesn't\ exists = pci device spec[uuid:{0}] doesn't exists

# at: src/main/java/org/zstack/pciDevice/PciDeviceManager.java:1511
# args: pciUuid,vmUuid
pci\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled\ for\ vm[uuid\:%s] = pci device[uuid:{0}] doesn't exist or is disabled for vm[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/PciDeviceReserveFlow.java:161
# args: wrongStatusPciUuids,vmUuid
pci\ device[uuid\:%s]\ can\ not\ attach\ to\ vm[uuid\:%s]\ due\ to\ wrong\ status = pci device[uuid:{0}] can not attach to vm[uuid:{1}] due to wrong status

# at: src/main/java/org/zstack/pciDevice/PciHostChangeStateExtension.java:69
# args: inventory.getUuid(),hasPciVmUuids.toString()
The\ host\ [%s]\ has\ failed\ to\ enter\ the\ maintenance,\ The\ vm\ [%s]\ cannot\ migrate\ automatically\ because\ it\ contains\ the\ PCI\ device = The host [{0}] has failed to enter the maintenance, The vm [{1}] cannot migrate automatically because it contains the PCI device

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:185
# args: vo.getType(),PciDeviceType.leagalPciDeviceCandidateTypes
illegal\ type[%s]\ for\ pci\ device\ spec,\ only\ %s\ are\ legal = illegal type[{0}] for pci device spec, only {1} are legal

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:258
# args: vmUuid,state
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ set\ pci\ device\ spec = vm instance[uuid:{0}, state:{1}] needs to be stopped to set pci device spec

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:169
# args: msg.getVmInstanceUuid(),msg.getPciSpecUuid()
vm[uuid\:%s]\ already\ has\ pci\ device\ spec[uuid\:%s] = vm[uuid:{0}] already has pci device spec[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:197
# args: msg.getVmInstanceUuid(),msg.getPciSpecUuid()
vm[uuid\:%s]\ doesn't\ have\ pci\ device\ spec[uuid\:%s] = vm[uuid:{0}] doesn't have pci device spec[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:204
# args: vm.getUuid(),vm.getState(),msg.getPciSpecUuid()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ remove\ pci\ device\ spec[uuid\:%s] = vm instance[uuid:{0}, state:{1}] needs to be stopped to remove pci device spec[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:285
# args: msg.getVmInstanceUuid(),msg.getMdevSpecUuid()
vm[uuid\:%s]\ already\ has\ mdev\ device\ spec[uuid\:%s] = vm[uuid:{0}] already has mdev device spec[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:293
# args: vm.getUuid(),vm.getState()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ set\ mdev\ device\ spec = vm instance[uuid:{0}, state:{1}] needs to be stopped to set mdev device spec

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:306
# args: msg.getVmInstanceUuid(),msg.getMdevSpecUuid()
vm[uuid\:%s]\ doesn't\ have\ mdev\ device\ spec[uuid\:%s] = vm[uuid:{0}] doesn't have mdev device spec[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationApiInterceptor.java:313
# args: vm.getUuid(),vm.getState(),msg.getMdevSpecUuid()
vm\ instance[uuid\:%s,\ state\:%s]\ needs\ to\ be\ stopped\ to\ remove\ mdev\ device\ spec[uuid\:%s] = vm instance[uuid:{0}, state:{1}] needs to be stopped to remove mdev device spec[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:374
# args: msg.getPciSpecUuid(),msg.getVmInstanceUuid()
pci\ device\ spec[uuid\:%s]\ is\ not\ available\ for\ vm[uuid\:%s] = pci device spec[uuid:{0}] is not available for vm[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:372
# args: msg.getVmInstanceUuid()
no\ pci\ device\ spec\ available\ for\ vm[uuid\:%s] = no pci device spec available for vm[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:367
# args: msg.getVmInstanceUuid(),rly.getError()
failed\ to\ get\ pci\ device\ spec\ available\ for\ vm[uuid\:%s]\:\ %s = failed to get pci device spec available for vm[uuid:{0}]: {1}

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:557
# args: msg.getMdevSpecUuid(),msg.getVmInstanceUuid()
mdev\ device\ spec[uuid\:%s]\ is\ not\ available\ for\ vm[uuid\:%s] = mdev device spec[uuid:{0}] is not available for vm[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:550
# args: msg.getVmInstanceUuid()
no\ mdev\ device\ spec\ available\ for\ vm[uuid\:%s] = no mdev device spec available for vm[uuid:{0}]

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:751
# args: specUuid,systemTag
pci\ device\ spec[uuid\:%s]\ doesn't\ exist = pci device spec[uuid:{0}] doesn't exist

# at: src/main/java/org/zstack/pciDevice/specification/PciSpecificationManagerImpl.java:764
# args: specUuid,systemTag
mdev\ device\ spec[uuid\:%s]\ doesn't\ exist = mdev device spec[uuid:{0}] doesn't exist

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:191
# args: 
cluster\ uuids\ or\ host\ uuid\ or\ vm\ uuid\ can\ not\ be\ set\ at\ same\ time = cluster uuids or host uuid or vm uuid can not be set at same time

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:198
# args: 
clusters\ not\ exist\ or\ disabled = clusters not exist or disabled

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:232
# args: type,legalTypes
illegal\ mdev\ device\ type\ [%s],\ only\ %s\ are\ legal = illegal mdev device type [{0}], only {1} are legal

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:69
# args: 
cannot\ change\ the\ state\ of\ mdev\ device\ that's\ in\ attached\ status = cannot change the state of mdev device that's in attached status

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:77
# args: msg.getMdevDeviceUuid()
cannot\ attach\ mdev\ device[uuid\:%s]\ to\ vm,\ make\ sure\ it's\ enabled\ and\ un-attached = cannot attach mdev device[uuid:{0}] to vm, make sure it's enabled and un-attached

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:220
# args: 
cannot\ attach\ mdev\ device\ to\ vm\ instance\ that's\ not\ stopped = cannot attach mdev device to vm instance that's not stopped

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:103
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ has\ pci\ devices\ attached\ that\ are\ in\ different\ host\ with\ mdev\ device[uuid\:%s] = vm[uuid:{0}] has pci devices attached that are in different host with mdev device[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:113
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ has\ mdev\ devices\ attached\ that\ are\ in\ different\ host\ with\ mdev\ device[uuid\:%s] = vm[uuid:{0}] has mdev devices attached that are in different host with mdev device[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:168
# args: mdev.getHostUuid(),mdev.getUuid(),HostState.Enabled,HostStatus.Connected
the\ host[uuid\:%s]\ that\ holds\ mdev\ device[uuid\:%s]\ is\ not\ [%s]\ and\ [%s] = the host[uuid:{0}] that holds mdev device[uuid:{1}] is not [{2}] and [{3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:132
# args: msg.getVmInstanceUuid(),mdev.getUuid()
the\ vm[uuid\:%s]\ that\ holds\ se\ mdev\ device\ can\ not\ attach\ more\ se\ mdev[%s] = the vm[uuid:{0}] that holds se mdev device can not attach more se mdev[{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:143
# args: mdev.getHostUuid(),mdev.getUuid(),HostState.Enabled,HostStatus.Connected
IOMMU\ of\ the\ host[uuid\:%s]\ that\ hosts\ pci\ device[uuid\:%s]\ is\ not\ [%s]\ and\ [%s] = IOMMU of the host[uuid:{0}] that hosts pci device[uuid:{1}] is not [{2}] and [{3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:156
# args: msg.getMdevDeviceUuid(),msg.getVmInstanceUuid()
mdev\ device\ [uuid\:%s]\ is\ not\ attached\ to\ vm[uuid\:%s] = mdev device [uuid:{0}] is not attached to vm[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:181
# args: 
cannot\ detach\ mdev\ device\ from\ vm\ instance\ when\ it's\ not\ stopped = cannot detach mdev device from vm instance when it's not stopped

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceApiInterceptor.java:245
# args: 
cannot\ delete\ mdev\ device\ when\ it's\ attached = cannot delete mdev device when it's attached

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:379
# args: msg.getVmInstanceUuid(),reply.getError()
failed\ to\ get\ candidate\ hosts\ to\ start\ vm[uuid\:%s],\ %s = failed to get candidate hosts to start vm[uuid:{0}], {1}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:100
# args: mdevUuid
mdev\ device\ [%s]\ is\ not\ available = mdev device [{0}] is not available

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:217
# args: rsp.getError()
failed\ to\ hot\ plug\ mdev\ device\ to\ running\ vm,\ because\:%s = failed to hot plug mdev device to running vm, because:{0}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:278
# args: msg.getVmInstanceUuid(),msg.getMdevDeviceUuid()
vm[uuid\:%s]\ cannot\ start\ in\ host\ that\ hold\ mdev\ device[uuid\:%s] = vm[uuid:{0}] cannot start in host that hold mdev device[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceBase.java:353
# args: rsp.getError()
failed\ to\ hot\ unplug\ mdev\ device\ to\ running\ vm,\ because\:%s = failed to hot unplug mdev device to running vm, because:{0}

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFactory.java:68
# args: pciDevice.getUuid(),PciDeviceVirtStatus.VFIO_MDEV_VIRTUALIZED
pci\ device[uuid\:%s]\ is\ known\ as\ %s,\ but\ cannot\ find\ it's\ mdev\ spec,\ so\ abort. = pci device[uuid:{0}] is known as {1}, but cannot find it's mdev spec, so abort.

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:48
# args: vmUuid,specMap.keySet()
failed\ to\ start\ vm[uuid\:%s]\ because\ not\ all\ mdev\ specs[uuids\:%s]\ exist = failed to start vm[uuid:{0}] because not all mdev specs[uuids:{1}] exist

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:145
# args: mdev.getUuid(),mdev.getHostUuid(),attachedMdevUuid,dstHostUuid
specified\ mdev\ devices\ not\ on\ same\ host\:\ mdev\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s]\ while\ mdev\ device[uuid\:\ %s]\ on\ host[uuid\:\ %s] = specified mdev devices not on same host: mdev device[uuid: {0}] on host[uuid: {1}] while mdev device[uuid: {2}] on host[uuid: {3}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceFilterFlow.java:184
# args: 
no\ candidate\ host\ with\ enough\ mdev\ devices = no candidate host with enough mdev devices

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceHostChangeStateExtension.java:55
# args: inventory.getUuid(),hasMdevVmUuids.toString()
The\ host\ [%s]\ has\ failed\ to\ enter\ the\ maintenance,\ because\ vm[%s]\ has\ mdev\ devices\ attached\ and\ cannot\ migrate\ automatically = The host [{0}] has failed to enter the maintenance, because vm[{1}] has mdev devices attached and cannot migrate automatically

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:308
# args: specUuid,hostUuid,vmUuid
failed\ to\ find\ enough\ mdev\ device\ of\ spec[uuid\:%s]\ in\ dest\ host[uuid\:%s]\ for\ vm[uuid\:%s] = failed to find enough mdev device of spec[uuid:{0}] in dest host[uuid:{1}] for vm[uuid:{2}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:352
# args: msg.getMdevDeviceUuid()
cannot\ find\ mdev\ device[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find mdev device[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:555
# args: vo.getUuid(),vmUuid
mdev\ device[uuid\:%s]\ doesn't\ exist\ or\ is\ disabled\ for\ vm[uuid\:%s] = mdev device[uuid:{0}] doesn't exist or is disabled for vm[uuid:{1}]

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:644
# args: msg.getVmInstanceUuid()
can\ not\ migrate\ vm[uuid\:%s]\ since\ mdev\ device\ attached = can not migrate vm[uuid:{0}] since mdev device attached

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:673
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ mdev\ devices\ attached = cannot migrate root volume[uuid:{0}] because there are mdev devices attached

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceManagerImpl.java:688
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ mdev\ devices\ attached = cannot migrate vm[uuid:{0}] because there are mdev devices attached

# at: src/main/java/org/zstack/pciDevice/virtual/vfio_mdev/MdevDeviceReserveFlow.java:129
# args: wrongStatusMdevUuids,vmUuid
mdev\ device[uuid\:%s]\ can\ not\ attach\ to\ vm[uuid\:%s]\ due\ to\ wrong\ status = mdev device[uuid:{0}] can not attach to vm[uuid:{1}] due to wrong status

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostAllocatorFlow.java:71
# args: String.format("maxInstancePerHost = %d", maxInstancePerHost)
No\ host\ with\ fewer\ than\ %s\ vms\ found = No host with fewer than {0} vms found

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:76
# args: HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
%s\ must\ be\ a\ number = {0} must be a number

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MaxInstancePerHostHostAllocatorStrategyFactory.java:58
# args: HostAllocatorConstant.MAX_INSTANCE_PER_HOST_HOST_ALLOCATOR_STRATEGY_TYPE,HostAllocatorSystemTags.MAX_INSTANCE_PER_HOST_TOKEN
Select\ %s\ strategy,\ you\ must\ set\ %s = Select {0} strategy, you must set {1}

# at: src/main/java/org/zstack/pluginpremium/compute/allocator/MinimumMemoryUsageHostAllocatorStrategyFactory.java:58
# args: HostAllocatorSystemTags.MINIMUM_MEMORY_USAGE_HOST_ALLOCATOR_STRATEGY_MODE_TOKEN,modes
Incorrect\ %s\ settings,\ valid\ value\ is\ %s = Incorrect {0} settings, valid value is {1}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:93
# args: 
default\ route\ network\ can\ not\ be\ changed\ when\ system\ policy\ route\ is\ enabled = default route network can not be changed when system policy route is enabled

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:382
# args: 
can\ not\ find\ related\ virtual\ router = can not find related virtual router

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:132
# args: msg.getL3Uuid()
l3[%s]\ already\ attached\ a\ policy\ route\ ruleSet = l3[{0}] already attached a policy route ruleSet

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:192
# args: msg.getvRouterUuid(),msg.getName()
VRouter[%s]\ already\ has\ a\ ruleSet\ named\ %s = VRouter[{0}] already has a ruleSet named {1}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:283
# args: 
can\ not\ update\ system\ policy\ route\ set = can not update system policy route set

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:198
# args: msg.getDestinationCidr()
DestinationCidr\ must\ be\ in\ cidr\ format\ but\ found\ [%s] = DestinationCidr must be in cidr format but found [{0}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:202
# args: msg.getNextHopIp()
NextHopIp\ must\ be\ in\ ipv4\ format\ but\ found\ [%s] = NextHopIp must be in ipv4 format but found [{0}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:278
# args: 
can\ not\ find\ related\ vRouter = can not find related vRouter

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:288
# args: 
can\ not\ update\ system\ policy\ route\ table = can not update system policy route table

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:237
# args: ip
operation\ failure,\ ip\ format\ only\ supports\ ipv4/iprange/cidr,\ but\ find\ %s = operation failure, ip format only supports ipv4/iprange/cidr, but find {0}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:245
# args: protocol
illegal\ protocol\ type\ %s = illegal protocol type {0}

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:254
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
RuleSet[%s]\ already\ has\ a\ rule\ with\ rule\ number\ %s. = RuleSet[{0}] already has a rule with rule number {1}.

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:310
# args: msg.getvRouterUuid(),msg.getNumber()
VRouter[%s]\ already\ has\ a\ policy\ route\ table\ [%s] = VRouter[{0}] already has a policy route table [{1}]

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:387
# args: 
can\ not\ delete\ system\ policy\ route\ table = can not delete system policy route table

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:371
# args: 
can\ not\ delete\ system\ policy\ route\ set = can not delete system policy route set

# at: src/main/java/org/zstack/policyRoute/PolicyRouteApiInterceptor.java:360
# args: msg.getUuid()
ruleSet[%s]\ is\ still\ attached\ to\ nic = ruleSet[{0}] is still attached to nic

# at: src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java:958
# args: vrouterVmUuid
virtual\ router[uuid\:%s]\ can\ not\ find = virtual router[uuid:{0}] can not find

# at: src/main/java/org/zstack/policyRoute/PolicyRouteManagerImpl.java:963
# args: vo.getApplianceVmType()
can\ not\ find\ service\ factory\ for\ virtual\ router\ type[%s] = can not find service factory for virtual router type[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:54
# args: msg.getMirrorNetworkUuid()
Invalid\ parameter\ [%s],\ make\ sure\ it's\ PortMirror\ Network = Invalid parameter [{0}], make sure it's PortMirror Network

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:62
# args: msg.getMirrorNetworkUuid()
The\ network[%s]\ has\ been\ attached\ with\ a\ PortMirror\ service = The network[{0}] has been attached with a PortMirror service

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:70
# args: msg.getUuid()
The\ PortMirror\ service[%s]\ has\ not\ been\ created = The PortMirror service[{0}] has not been created

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:86
# args: msg.getSrcEndPoint(),msg.getDstEndPoint(),mirror.getUuid()
The\ nic[%s,\ %s]\ has\ been\ mirrored\ by\ service[%s] = The nic[{0}, {1}] has been mirrored by service[{2}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:92
# args: msg.getSrcEndPoint(),mirror.getUuid()
The\ nic[%s]\ can't\ been\ mirrored\ for\ service[%s]\ using = The nic[{0}] can't been mirrored for service[{1}] using

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:109
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ doesn't\ support\ to\ mirror\ the\ nic[%s] = The PortMirror service doesn't support to mirror the nic[{0}]

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:114
# args: msg.getDstEndPoint()
The\ PortMirror\ service\ doesn't\ support\ the\ nic[%s]\ because\ of\ its\ hypervisor\ type = The PortMirror service doesn't support the nic[{0}] because of its hypervisor type

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:121
# args: msg.getDstEndPoint()
The\ PortMirror\ service\ can't\ mirror\ to\ the\ nic[%s]\ that\ is\ not\ a\ non-default\ interface\ of\ a\ vm = The PortMirror service can't mirror to the nic[{0}] that is not a non-default interface of a vm

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:128
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ that\ is\ not\ an\ interface\ of\ any\ vm = The PortMirror service can't mirror the nic[{0}] that is not an interface of any vm

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:138
# args: msg.getSrcEndPoint(),msg.getDstEndPoint(),vo.getMirrorNetworkUuid()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ \ to\ nic[%s]\ because\ the\ mirror\ network[%s]\ can't\ setup\ the\ mirror\ tunnel = The PortMirror service can't mirror the nic[{0}]  to nic[{1}] because the mirror network[{2}] can't setup the mirror tunnel

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:144
# args: msg.getSrcEndPoint()
The\ PortMirror\ service\ can't\ mirror\ the\ nic[%s]\ to\ itself = The PortMirror service can't mirror the nic[{0}] to itself

# at: src/main/java/org/zstack/portMirror/PortMirrorApiInterceptor.java:153
# args: 
The\ PortMirror\ service\ can't\ work\ at\ the\ nic\ with\ configured\ Qos = The PortMirror service can't work at the nic with configured Qos

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:761
# args: sessionVO.getUuid(),errorCode.getDetails()
failed\ to\ delete\ portMirror\ session[%s]\ from\ hypervisor,\ detail\:\ %s = failed to delete portMirror session[{0}] from hypervisor, detail: {1}

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:794
# args: sessionVO.getUuid(),errorCode.getDetails()
failed\ to\ release\ portMirror\ session[%s]\ from\ hypervisor,\ detail\:\ %s = failed to release portMirror session[{0}] from hypervisor, detail: {1}

# at: src/main/java/org/zstack/portMirror/PortMirrorManagerImpl.java:912
# args: vo.getUuid()
cannot\ find\ internal\ id\ of\ the\ session[uuid\:%s],\ are\ there\ too\ many\ sessions\ in\ a\ host??? = cannot find internal id of the session[uuid:{0}], are there too many sessions in a host???

# at: src/main/java/org/zstack/portal/apimediator/ApiMediatorImpl.java:276
# args: cmsg.getResourceUuid()
resourceUuid[%s]\ is\ not\ a\ valid\ uuid.\ A\ valid\ uuid\ is\ a\ uuid(v4\ recommended)\ with\ '-'\ stripped.\ see\ http\://en.wikipedia.org/wiki/Universally_unique_identifier\ for\ format\ of\ uuid,\ the\ regular\ expression\ uses\ to\ validate\ a\ uuid\ is\ '[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}' = resourceUuid[{0}] is not a valid uuid. A valid uuid is a uuid(v4 recommended) with '-' stripped. see http://en.wikipedia.org/wiki/Universally_unique_identifier for format of uuid, the regular expression uses to validate a uuid is '[0-9a-f]{8}[0-9a-f]{4}[1-5][0-9a-f]{3}[89ab][0-9a-f]{3}[0-9a-f]{12}'

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java:122
# args: method
non\ support\ method\:\ %s = non support method: {0}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaAPI.java:134
# args: statusCode,response.getStatusLine().getReasonPhrase()
http\ request\ error!\ status_code\:\ %s,\ error\:\ %s = http request error! status_code: {0}, error: {1}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDB.java:24
# args: r.getStderr()
sqlite3\ execute\ failed,\ because\:\ %s = sqlite3 execute failed, because: {0}

# at: src/main/java/org/zstack/premium/externalservice/grafana/api/GrafanaDashboard.java:34
# args: GrafanaDB.folderTitle
cannot\ find\ folder\:\ %s\ in\ dashboard = cannot find folder: {0} in dashboard

# at: src/main/java/org/zstack/premium/externalservice/loki/LokiFactory.java:84
# args: src.getAbsolutePath(),dst.getAbsolutePath(),rst.getStderr()
cannot\ copy\ %s\ to\ %s,\ caused\:\ %s = cannot copy {0} to {1}, caused: {2}

# at: src/main/java/org/zstack/premium/externalservice/loki/PromtailFactory.java:103
# args: 
ssh\ failed = ssh failed

# at: src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java:124
# args: v.getClass().getSimpleName(),k
unknown\ value\ type\ %s,\ key\ \=\ %s = unknown value type {0}, key = {1}

# at: src/main/java/org/zstack/premium/externalservice/prometheus/MultiNodePrometheus.java:153
# args: 
failed\ to\ HTTP\ call\ all\ prometheus\ instances = failed to HTTP call all prometheus instances

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java:48
# args: rbacEntity.getApiMessage().getSession().getUserUuid()
the\ operation\ is\ not\ permitted\ by\ white\ list\ of\ virtual-id[uuid\:%s] = the operation is not permitted by white list of virtual-id[uuid:{0}]

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminAPIRequestChecker.java:60
# args: rbacEntity.getApiMessage().getSession().getUserUuid()
the\ operation\ is\ denied\ by\ black\ list\ of\ virtual-id[uuid\:%s] = the operation is denied by black list of virtual-id[uuid:{0}]

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:199
# args: unmatchedApis,identity.toString()
action\:\ %s,\ is\ not\ supported\ for\ role\ identity\:\ %s = action: {0}, is not supported for role identity: {1}

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:372
# args: msg.getName()
%s\ is\ a\ reserved\ name,\ please\ use\ another\ name = {0} is a reserved name, please use another name

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:370
# args: 
the\ name\ of\ initial\ user\ can\ not\ be\ updated = the name of initial user can not be updated

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:407
# args: 
cannot\ remove\ builtin\ system\ admin\ role\ from\ builtin\ system\ admin. = cannot remove builtin system admin role from builtin system admin.

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:405
# args: 
cannot\ remove\ builtin\ security\ admin\ role\ from\ builtin\ security\ admin. = cannot remove builtin security admin role from builtin security admin.

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:403
# args: 
cannot\ remove\ builtin\ audit\ admin\ role\ from\ builtin\ audit\ admin. = cannot remove builtin audit admin role from builtin audit admin.

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:417
# args: 
cannot\ delete\ builtin\ system\ admin. = cannot delete builtin system admin.

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:415
# args: 
cannot\ delete\ builtin\ security\ admin. = cannot delete builtin security admin.

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:413
# args: 
cannot\ delete\ builtin\ audit\ admin. = cannot delete builtin audit admin.

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:430
# args: 
Confirm\ the\ roles\ you\ want\ to\ add\ have\ same\ identity = Confirm the roles you want to add have same identity

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:444
# args: msg.getRoleUuids(),identitySet,msg.getVirtualIDUuid()
Cannot\ add\ role\:\ %s\ with\ identity\:\ %s\ to\ virtualID[uuid\:%s] = Cannot add role: {0} with identity: {1} to virtualID[uuid:{2}]

# at: src/main/java/org/zstack/privilege/admin/IAM2PrivilegeAdminPolicyHelper.java:456
# args: String.join(",", privilegeAdminUuids),msg.getProjectUuid()
can\ not\ add\ privilege\ admin[uuids\:%s]\ to\ project[uuid\:%s] = can not add privilege admin[uuids:{0}] to project[uuid:{1}]

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:432
# args: attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ no\ such\ field\ on\ inventory\ class[%s] = condition name[{0}] is invalid, no such field on inventory class[{1}]

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:437
# args: attr,attr,inventoryClass.getName()
condition\ name[%s]\ is\ invalid,\ field[%s]\ of\ inventory[%s]\ is\ annotated\ as\ @Unqueryable\ field = condition name[{0}] is invalid, field[{1}] of inventory[{2}] is annotated as @Unqueryable field

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:448
# args: info.jpaMetaClass.getName(),attr
entity\ meta\ class[%s]\ has\ no\ field[%s] = entity meta class[{0}] has no field[{1}]

# at: src/main/java/org/zstack/query/MysqlQueryBuilderImpl3.java:1000
# args: f,info.inventoryClass.getSimpleName(),info.premitiveFieldNames
field[%s]\ is\ not\ a\ primitive\ of\ the\ inventory\ %s;\ you\ cannot\ specify\ it\ in\ the\ parameter\ 'fields';valid\ fields\ are\ %s = field[{0}] is not a primitive of the inventory {1}; you cannot specify it in the parameter 'fields';valid fields are {2}

# at: src/main/java/org/zstack/query/QueryFacadeImpl.java:519
# args: 
filterName\ must\ be\ formatted\ as\ [filterType\:condition(s)] = filterName must be formatted as [filterType:condition(s)]

# at: src/main/java/org/zstack/query/QueryFacadeImpl.java:659
# args: JSONObjectUtil.toJsonString(cond)
'value'\ of\ query\ condition\ %s\ cannot\ be\ null = 'value' of query condition {0} cannot be null

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:273
# args: typeByResourceUuids.toString()
resources\ has\ inconsistent\ resourceTypes.\ Details\:\ %s = resources has inconsistent resourceTypes. Details: {0}

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:433
# args: resourceUuid
cannot\ find\ resource[uuid\:\ %s] = cannot find resource[uuid: {0}]

# at: src/main/java/org/zstack/resourceconfig/ResourceConfig.java:437
# args: globalConfig.getCategory(),globalConfig.getName(),resourceType
ResourceConfig\ [category\:%s,\ name\:%s]\ cannot\ bind\ to\ resourceType\:\ %s = ResourceConfig [category:{0}, name:{1}] cannot bind to resourceType: {2}

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:85
# args: msg.getCategory(),identity
no\ global\ config[category\:%s,\ name\:%s]\ found = no global config[category:{0}, name:{1}] found

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:91
# args: msg.getCategory(),identity
global\ config[category\:%s,\ name\:%s]\ cannot\ bind\ resource = global config[category:{0}, name:{1}] cannot bind resource

# at: src/main/java/org/zstack/resourceconfig/ResourceConfigApiInterceptor.java:114
# args: msg.getResourceUuid()
account\ has\ no\ access\ to\ the\ resource[uuid\:\ %s] = account has no access to the resource[uuid: {0}]

# at: src/main/java/org/zstack/rest/TypeVerifier.java:22
# args: f.getName(),source
[%s]\ field\ is\ excepted\ an\ int\ or\ long,\ but\ was\ [%s]. = [{0}] field is excepted an int or long, but was [{1}].

# at: src/main/java/org/zstack/rest/TypeVerifier.java:31
# args: f.getName(),source
Invalid\ value\ for\ boolean\ field\ [%s],\ [%s]\ is\ not\ a\ valid\ boolean\ string[true,\ false]. = Invalid value for boolean field [{0}], [{1}] is not a valid boolean string[true, false].

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:141
# args: msg.getvRouterUuid()
All\ the\ networks\ should\ be\ in\ the\ virtual\ router[%s] = All the networks should be in the virtual router[{0}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:69
# args: msg.getAreaId()
[%s]\ is\ not\ formatted\ as\ IPv4\ address = [{0}] is not formatted as IPv4 address

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:108
# args: msg.getAreaAuth()
KeyID\ &\ password\ must\ be\ not\ null\ when\ authentication\ type\ is\ %s = KeyID & password must be not null when authentication type is {0}

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:114
# args: msg.getAreaAuth()
password\ must\ be\ not\ null\ when\ authentication\ type\ is\ %s = password must be not null when authentication type is {0}

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:118
# args: msg.getAreaAuth()
the\ length\ of\ password\ is\ at\ most\ than\ 8Bytes\ when\ authentication\ type\ is\ %s = the length of password is at most than 8Bytes when authentication type is {0}

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:127
# args: vo.getAreaId(),RouterAreaType.Standard.toString()
AreaId[%s]\ type\ must\ be\ %s = AreaId[{0}] type must be {1}

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:97
# args: msg.getAreaId()
AreaId[%s]\ has\ been\ created = AreaId[{0}] has been created

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:158
# args: vo.getL3NetworkUuid(),haUuid
The\ network[%s]\ have\ been\ added\ into\ the\ haGroup[%s] = The network[{0}] have been added into the haGroup[{1}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:150
# args: vo.getL3NetworkUuid(),vo.getRouterAreaUuid()
The\ network[%s]\ have\ been\ added\ into\ the\ virtual\ routerArea[%s] = The network[{0}] have been added into the virtual routerArea[{1}]

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:181
# args: msg.getRouterId()
Router\ ID[%s]\ is\ not\ formatted\ as\ IPv4\ address = Router ID[{0}] is not formatted as IPv4 address

# at: src/main/java/org/zstack/routeProtocol/RouteProtocolApiInterceptor.java:193
# args: msg.getRouterId()
Router\ ID[%s]\ is\ not\ unique\ in\ this\ system = Router ID[{0}] is not unique in this system

# at: src/main/java/org/zstack/scheduler/AbstractSchedulerJob.java:235
# args: 
the\ last\ job\ is\ not\ completed.\ skip\ this\ job = the last job is not completed. skip this job

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:189
# args: 
cron\ must\ be\ set\ when\ use\ cron\ scheduler = cron must be set when use cron scheduler

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:195
# args: 
cron\ task\ must\ follow\ format\ like\ this\ \:\ \"0\ 0/3\ 17-23\ *\ *\ ?\"\  = cron task must follow format like this : \"0 0/3 17-23 * * ?\" 

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:198
# args: 
cron\ scheduler\ only\ need\ to\ specify\ cron\ task = cron scheduler only need to specify cron task

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:207
# args: 
startTime\ out\ of\ range = startTime out of range

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:203
# args: 
startTime\ must\ be\ positive\ integer\ or\ 0 = startTime must be positive integer or 0

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:184
# args: 
stopTime\ has\ been\ passed = stopTime has been passed

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:182
# args: 
stopTime\ out\ of\ mysql\ timestamp\ range = stopTime out of mysql timestamp range

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:180
# args: 
duration\ time\ out\ of\ range = duration time out of range

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:99
# args: 
interval\ must\ be\ set\ when\ use\ simple\ scheduler\ when\ repeat\ more\ than\ once = interval must be set when use simple scheduler when repeat more than once

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:134
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ twice\ to\ the\ same\ trigger[uuid\:%s] = Can not add job[uuid:{0}] twice to the same trigger[uuid:{1}]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:139
# args: msg.getSchedulerJobUuid(),msg.getSchedulerTriggerUuid()
Can\ not\ add\ job[uuid\:%s]\ to\ a\ out\ of\ time\ trigger[uuid\:%s] = Can not add job[uuid:{0}] to a out of time trigger[uuid:{1}]

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:147
# args: count,msg.getSchedulerJobUuid()
There\ are\ [%d]\ triggers\ added\ to\ job[uuid\:%s],\ cannot\ add\ any\ more. = There are [{0}] triggers added to job[uuid:{1}], cannot add any more.

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:162
# args: count,msg.getSchedulerJobGroupUuid()
There\ are\ [%d]\ triggers\ added\ to\ job\ group[uuid\:%s],\ cannot\ add\ any\ more. = There are [{0}] triggers added to job group[uuid:{1}], cannot add any more.

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:192
# args: 
invalid\ cron\ expression = invalid cron expression

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:172
# args: 
startTime\ must\ be\ set\ for\ simple\ scheduler = startTime must be set for simple scheduler

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:176
# args: 
schedulerInterval\ must\ be\ set\ for\ simple\ scheduler = schedulerInterval must be set for simple scheduler

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:226
# args: msg.getType()
No\ SchedulerJobFactory\ of\ type[%s]\ found = No SchedulerJobFactory of type[{0}] found

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:253
# args: n
%d\ jobs\ have\ different\ job\ type\ with\ job\ group = {0} jobs have different job type with job group

# at: src/main/java/org/zstack/scheduler/SchedulerApiInterceptor.java:262
# args: count,limit - count
job\ group\ has\ contained\ %d\ job,\ only\ %d\ seats\ left = job group has contained {0} job, only {1} seats left

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:794
# args: timeUnitInStr
invalid\ time\ unit\:\ %s = invalid time unit: {0}

# at: src/main/java/org/zstack/scheduler/SchedulerFacadeImpl.java:921
# args: jobUuid,e.getMessage()
trigger\ job[uuid\:\ %s]\ failed,\ because\ %s = trigger job[uuid: {0}] failed, because {1}

# at: src/main/java/org/zstack/scheduler/SchedulerJobParamCascadeUpdater.java:86
# args: field.getName()
field[%s]\ cannot\ be\ empty = field[{0}] cannot be empty

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:54
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ is\ not\ available.\ check\ if\ the\ volume\ exists. = the volume[{0}] is not available. check if the volume exists.

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:58
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ is\ not\ root\ volume = the volume[{0}] is not root volume

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:63
# args: msg.getTargetResourceUuid()
the\ vm\ of\ the\ root\ volume[%s]\ is\ not\ available.\ check\ if\ the\ vm\ exists. = the vm of the root volume[{0}] is not available. check if the vm exists.

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:70
# args: 
The\ primary\ storage\ of\ volumes\ don\ not\ support\ create\ volume\ snapshot\ group\ job. = The primary storage of volumes don not support create volume snapshot group job.

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotGroupJobFactory.java:77
# args: msg.getParameters().get(SchedulerJobParameters.snapshotGroupMax),e.getMessage()
snapshotGroupMaxNumber\ \:\ %s\ format\ error\ because\ %s = snapshotGroupMaxNumber : {0} format error because {1}

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java:58
# args: msg.getTargetResourceUuid()
the\ volume[%s]\ does\ not\ support\ snapshots\ retention = the volume[{0}] does not support snapshots retention

# at: src/main/java/org/zstack/scheduler/VolumeSnapshotJobFactory.java:70
# args: msg.getParameters().get(SchedulerJobParameters.snapshotMax),e.getMessage()
snapshotMaxNumber\ \:\ %s\ format\ error\ because\ %s = snapshotMaxNumber : {0} format error because {1}

# at: src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java:125
# args: getTargetResourceUuid()
the\ vm\ of\ the\ root\ volume[%s]\ state\ in\ Destroyed.\ job\ state\ change\ is\ not\ allowed = the vm of the root volume[{0}] state in Destroyed. job state change is not allowed

# at: src/main/java/org/zstack/scheduler/snapshot/CreateVolumeSnapshotGroupJob.java:189
# args: 
The\ primary\ storage\ of\ volumes\ don\ not\ support\ create\ volume\ snapshot\ group\ job = The primary storage of volumes don not support create volume snapshot group job

# at: src/main/java/org/zstack/scheduler/vm/StopVmInstanceJob.java:83
# args: getTargetResourceUuid()
vm[uuid\:%s]\ is\ destroyed,\ state\ change\ is\ not\ allowed = vm[uuid:{0}] is destroyed, state change is not allowed

# at: src/main/java/org/zstack/sdnController/SdnControllerApiInterceptor.java:75
# args: msg.getVendorType(),SdnControllerType.getAllTypeNames()
Sdn\ controller\ type\:\ %s\ in\ not\ in\ the\ supported\ list\:\ %s\  = Sdn controller type: {0} in not in the supported list: {1} 

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:102
# args: msg.getL2NetworkUuid()
unable\ create\ vni\ range,\ because\ l2\ uuid[%s]\ is\ not\ vxlan\ network\ pool = unable create vni range, because l2 uuid[{0}] is not vxlan network pool

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:117
# args: msg.getStartVni(),msg.getEndVni()
the\ vni\ range\:[%s.%s}\ is\ illegal,\ because\ h3c's\ controller\ uses\ vni\ as\ vlan\ id = the vni range:[{0}.{1}} is illegal, because h3c's controller uses vni as vlan id

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:132
# args: userVniRange.startVni,userVniRange.endVni
the\ vni\ range\:[%s.%s}\ is\ illegal,\ must\ covered\ by\ a\ sdn's\ vniRange = the vni range:[{0}.{1}} is illegal, must covered by a sdn's vniRange

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcApiInterceptor.java:178
# args: 
H3C\ VCFC\ controller\ must\ include\ systemTags\ vdsUuid\:\:{%s} = H3C VCFC controller must include systemTags vdsUuid::'{{0}'}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:116
# args: self.getIp(),e.getLocalizedMessage()
get\ sdn\ controller\ [ip\:%s]\ vni\ range\ failed\ because\ %s = get sdn controller [ip:{0}] vni range failed because {1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:86
# args: self.getIp()
get\ vni\ range\ on\ sdn\ controller\ [ip\:%s]\ failed = get vni range on sdn controller [ip:{0}] failed

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:148
# args: self.getIp()
there\ is\ no\ vni\ range\ on\ sdn\ controller\ [ip\:%s] = there is no vni range on sdn controller [ip:{0}]

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:154
# args: self.getIp()
there\ is\ no\ default\ tenant\ on\ sdn\ controller\ [ip\:%s] = there is no default tenant on sdn controller [ip:{0}]

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:299
# args: self.getIp(),e.getMessage()
create\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = create vxlan network on sdn controller [ip:{0}] failed because {1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:283
# args: self.getIp()
create\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed = create vxlan network on sdn controller [ip:{0}] failed

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:383
# args: self.getIp(),e.getMessage()
delete\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = delete vxlan network on sdn controller [ip:{0}] failed because {1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:377
# args: self.getIp()
delete\ vxlan\ network\ on\ sdn\ controller\ [ip\:%s]\ failed = delete vxlan network on sdn controller [ip:{0}] failed

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:468
# args: self.getIp(),e.getMessage()
get\ token\ of\ sdn\ controller\ [ip\:%s]\ failed\ because\ %s = get token of sdn controller [ip:{0}] failed because {1}

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:439
# args: self.getIp()
get\ leader\ of\ sdn\ controller\ [ip\:%s]\ failed = get leader of sdn controller [ip:{0}] failed

# at: src/main/java/org/zstack/sdnController/h3cVcfc/H3cVcfcSdnController.java:460
# args: self.getIp()
get\ token\ of\ sdn\ controller\ [ip\:%s]\ failed = get token of sdn controller [ip:{0}] failed

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetwork.java:51
# args: vo.getPoolUuid()
there\ is\ no\ sdn\ controller\ for\ vxlan\ pool\ [uuid\:%s] = there is no sdn controller for vxlan pool [uuid:{0}]

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkFactory.java:410
# args: inv.getUuid(),destHostUuid
cannot\ configure\ hardware\ vxlan\ network\ for\ vm[uuid\:%s]\ on\ the\ destination\ host[uuid\:%s] = cannot configure hardware vxlan network for vm[uuid:{0}] on the destination host[uuid:{1}]

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:150
# args: msg.getPhysicalInterface()
cannot\ create\ vlan-device\ on\ %s\ because\ it's\ too\ long = cannot create vlan-device on {0} because it's too long

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:112
# args: 
hardware\ vxlan\ network\ pool\ doesn't\ support\ create\ l3\ network = hardware vxlan network pool doesn't support create l3 network

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:118
# args: 
hardware\ vxlan\ network\ pool\ must\ configure\ the\ physical\ interface = hardware vxlan network pool must configure the physical interface

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:126
# args: 
ONLY\ hardware\ vxlan\ network\ can\ be\ created\ in\ hardware\ vxlan\ pool = ONLY hardware vxlan network can be created in hardware vxlan pool

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/HardwareVxlanNetworkPoolFactory.java:131
# args: 
hardware\ vxlan\ network\ can\ ONLY\ be\ created\ in\ hardware\ vxlan\ pool = hardware vxlan network can ONLY be created in hardware vxlan pool

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java:86
# args: cmd.getBridgeName(),l2Network.getUuid(),l2Network.getType(),finalVlanId,hostUuid,rsp.getError()
failed\ to\ create\ bridge[%s]\ for\ hardwareVxlan[uuid\:%s,\ type\:%s,\ vlan\:%s]\ on\ kvm\ host[uuid\:%s],\ because\ %s = failed to create bridge[{0}] for hardwareVxlan[uuid:{1}, type:{2}, vlan:{3}] on kvm host[uuid:{4}], because {5}

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanNetworkBackend.java:144
# args: cmd.getBridgeName(),vxlan.getUuid(),vxlan.getName(),hostUuid,rsp.getError()
failed\ to\ check\ bridge[%s]\ for\ hardwareVxlan[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:%s],\ %s = failed to check bridge[{0}] for hardwareVxlan[uuid:{1}, name:{2}] on kvm host[uuid:{3}], {4}

# at: src/main/java/org/zstack/sdnController/hardwareVxlan/KVMRealizeHardwareVxlanPoolNetworkBackend.java:64
# args: l2Network.getUuid(),l2Network.getName(),hostUuid,rsp.getError()
failed\ to\ check\ physical\ interface\ for\ HardwareVxlanPool[uuid\:%s,\ name\:%s]\ on\ kvm\ host[uuid\:\ %s],\ %s = failed to check physical interface for HardwareVxlanPool[uuid:{0}, name:{1}] on kvm host[uuid: {2}], {3}

# at: src/main/java/org/zstack/simulator/SimulatorHost.java:92
# args: 
set\ to\ disconnected = set to disconnected

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:97
# args: number
invalid\ phone\ number[%s],\ sms\ number\ is\ like\ +86-18654321234 = invalid phone number[{0}], sms number is like +86-18654321234

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:64
# args: msg.getApplicationEndpointUuid()
can\ not\ add\ same\ email\ address\ to\ endpoint[uuid\:%s] = can not add same email address to endpoint[uuid:{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:165
# args: errorEmails
invalid\ email\ address[%s] = invalid email address[{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:77
# args: msg.getEmailAddress(),msg.getApplicationEndpointUuid()
cannot\ update\ email\ address\ to\ %s,\ which\ is\ already\ exists\ in\ endpoint[uuid\:%s] = cannot update email address to {0}, which is already exists in endpoint[uuid:{1}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:91
# args: msg.getPhoneNumber()
phone\ number\ [%s]\ already\ exists = phone number [{0}] already exists

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:106
# args: msg.getPhoneNumber()
phone\ number[%s]\ already\ exists = phone number[{0}] already exists

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:115
# args: url
invalid\ url[%s] = invalid url[{0}]

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:121
# args: host
[%s]\ is\ not\ a\ legal\ ip = [{0}] is not a legal ip

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:127
# args: n
invalid\ phone\ number[%s],\ the\ DingDing\ phone\ number\ is\ like\ +86-12388889999 = invalid phone number[{0}], the DingDing phone number is like +86-12388889999

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:144
# args: 
username\ and\ password\ must\ either\ absent\ at\ all\ or\ present\ with\ each\ other = username and password must either absent at all or present with each other

# at: src/main/java/org/zstack/sns/SNSApiInterceptor.java:152
# args: 
can\ not\ create\ sns\ email\ endpoint\ without\ any\ email\ address = can not create sns email endpoint without any email address

# at: src/main/java/org/zstack/sns/SNSApplicationPlatformBase.java:118
# args: 
the\ operation\ is\ not\ permitted\ for\ the\ system\ application\ platform = the operation is not permitted for the system application platform

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:67
# args: msg.getTopicUuid()
cannot\ find\ the\ SNSTopic[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the SNSTopic[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:85
# args: msg.getApplicationPlatformUuid()
cannot\ find\ SNSApplicationPlatform[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find SNSApplicationPlatform[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/sns/SNSManagerImpl.java:95
# args: msg.getApplicationEndpointUuid()
cannot\ find\ SNSApplicationEndpoint[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find SNSApplicationEndpoint[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:128
# args: 
the\ topic\ is\ not\ subscribed\ by\ any\ endpoints = the topic is not subscribed by any endpoints

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:154
# args: 
application\ platform\ is\ disabled = application platform is disabled

# at: src/main/java/org/zstack/sns/SNSTopicBase.java:224
# args: 
application\ endpoint\ is\ disabled = application endpoint is disabled

# at: src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsApiInterceptor.java:44
# args: msg.getAccessKeyUuid()
Aliyun\ account[uuid\:%s]\ not\ exists = Aliyun account[uuid:{0}] not exists

# at: src/main/java/org/zstack/sns/platform/aliyunsms/SNSAliyunSmsEndpoint.java:83
# args: SysErrors.RESOURCE_NOT_FOUND
Aliyun\ sms\ event\ text\ template\ not\ found. = Aliyun sms event text template not found.

# at: src/main/java/org/zstack/sns/platform/dingtalk/SNSDingTalkEndpoint.java:130
# args: rsp.getStatusCode(),rsp.getBody()
failed\ to\ send\ messages\ to\ DingTalk.\ status\:\ %s,\ body\:\ %s = failed to send messages to DingTalk. status: {0}, body: {1}

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:72
# args: getSelf().getSmtpServer(),getSelf().getSmtpPort()
cannot\ connect\ SMTP\ server[server\:\ %s,\ port\:\ %s]\ in\ 15\ seconds = cannot connect SMTP server[server: {0}, port: {1}] in 15 seconds

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:88
# args: e.getMessage()
SMTP\ server\ validation\ error\:\ %s = SMTP server validation error: {0}

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:130
# args: 
the\ endpoint\ is\ disabled = the endpoint is disabled

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailApplicationPlatform.java:158
# args: 
no\ subject = no subject

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:66
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ email\ permission\ denied = The problem may be caused by an incorrect user name or password or email permission denied

# at: src/main/java/org/zstack/sns/platform/email/SNSEmailPlatformFactory.java:68
# args: smtpServer,smtpPort
Couldn't\ connect\ to\ host,\ port\:\ %s,\ %d.\ The\ problem\ may\ be\ caused\ by\ an\ incorrect\ smtpServer\ or\ smtpPort = Couldn't connect to host, port: {0}, {1}. The problem may be caused by an incorrect smtpServer or smtpPort

# at: src/main/java/org/zstack/sns/platform/http/SNSHttpEndpoint.java:67
# args: rsp.getStatusCode(),rsp.getBody()
HTTP\ POST\ failure.\ status\:\ %s,\ body\:\ %s = HTTP POST failure. status: {0}, body: {1}

# at: src/main/java/org/zstack/sns/platform/microsoftteams/SNSMicrosoftTeamsEndpoint.java:69
# args: rsp.getStatusCode(),rsp.getBody()
failed\ to\ send\ messages\ to\ Microsoft\ Teams.\ status\:\ %s,\ body\:\ %s = failed to send messages to Microsoft Teams. status: {0}, body: {1}

# at: src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:172
# args: endpoint.getType()
only\ HTTP\ endpoint\ can\ subscribe\ API\ topic,\ the\ endpoint[type\:%s]\ is\ not\ a\ HTTP\ endpoint = only HTTP endpoint can subscribe API topic, the endpoint[type:{0}] is not a HTTP endpoint

# at: src/main/java/org/zstack/sns/system/SNSApiTopicManagerImpl.java:191
# args: 
API\ topic\ cannot\ be\ deleted = API topic cannot be deleted

# at: src/main/java/org/zstack/sns/system/SNSSystemAlarmTopicManagerImpl.java:78
# args: 
system\ alarm\ topic\ cannot\ be\ deleted = system alarm topic cannot be deleted

# at: src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java:53
# args: 
url\ is\ error,\ clientUuid\ is\ miss = url is error, clientUuid is miss

# at: src/main/java/org/zstack/sso/cas/filter/CasLoginFilter.java:58
# args: 
\ missing\ cas\ client,\ please\ create\ cas\ client\ before\ sso =  missing cas client, please create cas client before sso

# at: src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java:62
# args: login.getClass().getName(),old.getClass().getName(),login.getLoginType()
duplicate\ casLogin[%s,\ %s]\ for\ type[%s] = duplicate casLogin[{0}, {1}] for type[{2}]

# at: src/main/java/org/zstack/sso/cas/service/CasClientManagerImpl.java:73
# args: type
Cannot\ find\ CasLogin\ for\ type(%s) = Cannot find CasLogin for type({0})

# at: src/main/java/org/zstack/sso/cas/service/CasLoginIAM2.java:67
# args: userName
iam2\ has\ a\ user\ with\ the\ same\ name[%s] = iam2 has a user with the same name[{0}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM1.java:71
# args: userName
\ local\ user\ has\ a\ user\ with\ the\ same\ name[%s] =  local user has a user with the same name[{0}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:57
# args: ssoUseAsLoginName
fail\ to\ get\ params[%s] = fail to get params[{0}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:61
# args: 
get\ user\ name\ is\ null = get user name is null

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2LoginIAM2.java:66
# args: userName
\ iam2\ has\ a\ user\ with\ the\ same\ name[%s] =  iam2 has a user with the same name[{0}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:375
# args: rsp.getStatusCode(),rsp.getBody()
HTTP\ ERROR,\ status\ code\:\ %s,\ body\:\ %s = HTTP ERROR, status code: {0}, body: {1}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:382
# args: HttpMethod.POST,url,e.getStatusCode(),e.getResponseBodyAsString()
failed\ to\ %s\ to\ %s,\ status\ code\:\ %s,\ response\ body\:\ %s = failed to {0} to {1}, status code: {2}, response body: {3}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:386
# args: HttpMethod.POST,url,e.getMessage()
failed\ to\ %s\ to\ %s,\ IO\ Error\:\ %s = failed to {0} to {1}, IO Error: {2}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:201
# args: e
response\ has\ error\ \:\ %s = response has error : {0}

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:101
# args: login.getClass().getName(),old.getClass().getName(),login.getLoginType()
duplicate\ OAuth2Login[%s,\ %s]\ for\ type[%s] = duplicate OAuth2Login[{0}, {1}] for type[{2}]

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:113
# args: type
Cannot\ find\ OAuth2Login\ for\ type(%s) = Cannot find OAuth2Login for type({0})

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:190
# args: 
there\ was\ an\ error,\ reason\:\ \ token\ response\ is\ null = there was an error, reason:  token response is null

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:194
# args: AuthGolabalProperty.OAUTH2_GET_TOKEN_USERINFO
there\ was\ an\ error,\ reason\:\ \ %s\ is\ null = there was an error, reason:  {0} is null

# at: src/main/java/org/zstack/sso/oauth2/service/OAuth2ManagerImpl.java:300
# args: e
get\ code\ response\ has\ error\ \:\ %s = get code response has error : {0}

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:65
# args: name
%s\ should\ not\ be\ null = {0} should not be null

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:88
# args: 
zoneUuids,\ backupStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, backupStorageUuids must have at least one be none-empty list, or all is set to true

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:118
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ zone[uuid\:%s] = backup storage[uuid:{0}] has not been attached to zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageApiInterceptor.java:127
# args: msg.getBackupStorageUuid(),msg.getZoneUuid()
backup\ storage[uuid\:%s]\ has\ been\ attached\ to\ zone[uuid\:%s] = backup storage[uuid:{0}] has been attached to zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:148
# args: url,e.toString()
failed\ to\ get\ header\ of\ image\ url\ %s\:\ %s = failed to get header of image url {0}: {1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:152
# args: url
failed\ to\ get\ header\ of\ image\ url\ %s = failed to get header of image url {0}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:175
# args: self.getUuid(),self.getName(),url,size,self.getAvailableCapacity()
the\ backup\ storage[uuid\:%s,\ name\:%s]\ has\ not\ enough\ capacity\ to\ download\ the\ image[%s].Required\ size\:%s,\ available\ size\:%s = the backup storage[uuid:{0}, name:{1}] has not enough capacity to download the image[{2}].Required size:{3}, available size:{4}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:172
# args: url,size
the\ image\ size\ get\ from\ url\ %s\ is\ %d\ bytes,\ it's\ too\ small\ for\ an\ image,\ please\ check\ the\ url\ again. = the image size get from url {0} is {1} bytes, it's too small for an image, please check the url again.

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:190
# args: msg.getClass().getName(),self.getStatus()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ status\ is\ %s = backup storage cannot proceed message[{0}] because its status is {1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageBase.java:196
# args: msg.getClass().getName(),self.getState()
backup\ storage\ cannot\ proceed\ message[%s]\ because\ its\ state\ is\ %s = backup storage cannot proceed message[{0}] because its state is {1}

# at: src/main/java/org/zstack/storage/backup/BackupStorageCapacityUpdater.java:139
# args: size,backupStorageUuid,capacityVO.getAvailableCapacity()
cannot\ reserve\ %s\ on\ the\ backup\ storage[uuid\:%s],\ it\ only\ has\ %s\ available = cannot reserve {0} on the backup storage[uuid:{1}], it only has {2} available

# at: src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:276
# args: 
capacity\ reservation\ on\ all\ backup\ storage\ failed = capacity reservation on all backup storage failed

# at: src/main/java/org/zstack/storage/backup/BackupStorageManagerImpl.java:320
# args: backupStorageDataNetworkTags.size()
only\ one\ backup\ storage\ data\ network\ system\ tag\ is\ allowed,\ but\ %s\ got = only one backup storage data network system tag is allowed, but {0} got

# at: src/main/java/org/zstack/storage/backup/BackupStoragePrimaryStorageAllocatorFlow.java:46
# args: spec.getRequiredPrimaryStorageUuid(),psTypeName
required\ primary\ storage[uuid\:%s,\ type\:%s]\ could\ not\ support\ any\ backup\ storage. = required primary storage[uuid:{0}, type:{1}] could not support any backup storage.

# at: src/main/java/org/zstack/storage/backup/BackupStorageReservedCapacityAllocatorFlow.java:55
# args: spec.getSize()
after\ subtracting\ reserved\ capacity,\ no\ backup\ storage\ has\ required\ capacity[%s\ bytes] = after subtracting reserved capacity, no backup storage has required capacity[{0} bytes]

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:328
# args: 
missing\ 'retentionType'\ in\ job\ parameters = missing 'retentionType' in job parameters

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:332
# args: 
missing\ 'retentionValue'\ in\ job\ parameters = missing 'retentionValue' in job parameters

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:336
# args: 
missing\ 'backupStorageUuids'\ in\ job\ parameters = missing 'backupStorageUuids' in job parameters

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:340
# args: 
job\ parameter\ 'backupStorageUuids'\ is\ empty = job parameter 'backupStorageUuids' is empty

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:345
# args: bsUuid
unexpected\ backup\ storage\ uuid\:\ %s = unexpected backup storage uuid: {0}

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:354
# args: 
missing\ 'remoteRetentionValue'\ in\ job\ parameters = missing 'remoteRetentionValue' in job parameters

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:352
# args: 
missing\ 'remoteRetentionType'\ in\ job\ parameters = missing 'remoteRetentionType' in job parameters

# at: src/main/java/org/zstack/storage/backup/CreateDatabaseBackupJob.java:84
# args: 
No\ available\ backup\ storage\ found,\ skip\ this\ job = No available backup storage found, skip this job

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:578
# args: getTargetResourceUuid()
volume[uuid\:%s]\ is\ deleted,\ state\ change\ is\ not\ allowed = volume[uuid:{0}] is deleted, state change is not allowed

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:137
# args: 
bandWidth\ must\ be\ a\ positive\ number = bandWidth must be a positive number

# at: src/main/java/org/zstack/storage/backup/CreateVmBackupJob.java:217
# args: 
missing\ job\ parameters = missing job parameters

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:93
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ not\ been\ exported\ from\ backupStorage[uuid\:%s] = database backup[uuid{0}] has not been exported from backupStorage[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:107
# args: msg.getDatabaseBackupUuid(),msg.getBackupStorageUuid()
database\ backup[uuid%s]\ has\ been\ exported\ from\ backupStorage[uuid\:%s] = database backup[uuid{0}] has been exported from backupStorage[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:120
# args: 
do\ not\ allow\ cover\ database\ from\ backup = do not allow cover database from backup

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:124
# args: 
installPath\ and\ bsUrl\ are\ both\ need = installPath and bsUrl are both need

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:133
# args: 
databaseBackup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = databaseBackup[uuid:{0}] is not Enabled and Ready

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupApiInterceptor.java:142
# args: url
illegal\ url[%s],\ correct\ example\ is\ ssh\://username\:password@hostname[\:sshPort]/path = illegal url[{0}], correct example is ssh://username:password@hostname[:sshPort]/path

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:80
# args: self.getUuid()
database\ backup[uuid\:%s]\ is\ not\ Enabled\ and\ Ready = database backup[uuid:{0}] is not Enabled and Ready

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupBase.java:328
# args: msg.getDatabaseBackupUuid(),msg.getSrcBackupStorageUuid()
database\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = database backup[uuid:{0}] not found in backup storage[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:91
# args: msg.getDatabaseBackupUuid()
database\ backup\ [uuid\:%s]\ is\ not\ existed\ yet = database backup [uuid:{0}] is not existed yet

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:107
# args: 
backup\ storage[uuid\:%s]\ is\ not\ enabled\ and\ connected = backup storage[uuid:{0}] is not enabled and connected

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:603
# args: result.getStderr()
not\ pass\ the\ restore\ security\ check\:\n%s = not pass the restore security check:\n{0}

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:615
# args: 
cannot\ get\ free\ port\ to\ listen = cannot get free port to listen

# at: src/main/java/org/zstack/storage/backup/DatabaseBackupManagerImpl.java:643
# args: version,dbf.getDbVersion()
database\ backup\ version[%s]\ is\ not\ match\ currently\ version[%s] = database backup version[{0}] is not match currently version[{1}]

# at: src/main/java/org/zstack/storage/backup/MultiDatabaseRecoverChecker.java:26
# args: 
cannot\ ssh\ peer\ node\ via\ sshkey,\ please\ check\ connection = cannot ssh peer node via sshkey, please check connection

# at: src/main/java/org/zstack/storage/backup/SingleDatabaseRecoverChecker.java:19
# args: 
please\ stop\ other\ node\ first! = please stop other node first!

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:355
# args: 
could\ not\ create\ vm,\ because\ at\ least\ one\ of\ field\ (l3NetworkUuids,zoneUuid,clusterUuid,hostUuid)\ should\ be\ set = could not create vm, because at least one of field (l3NetworkUuids,zoneUuid,clusterUuid,hostUuid) should be set

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:91
# args: currentState,msgName,checker.getStatesForOperation(msgName)
current\ backup\ storage\ state[%s]\ doesn't\ allow\ to\ proceed\ message[%s],\ allowed\ states\ are\ %s = current backup storage state[{0}] doesn't allow to proceed message[{1}], allowed states are {2}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:231
# args: bsType,bsUuid
Unexpected\ backup\ storage[type\:%s,uuid\:%s] = Unexpected backup storage[type:{0},uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:252
# args: msg.getVolumeUuid()
Can\ not\ create\ volume\ backup\ for\ shareable\ volume[uuid\:%s] = Can not create volume backup for shareable volume[uuid:{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:256
# args: msg.getVolumeUuid()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ it\ is\ not\ attached\ to\ any\ vm = Failed to create volume backup for volume[uuid:{0}], because it is not attached to any vm

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:265
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ its\ attached\ volume\ is\ not\ in\ state[%s,\ %s] = Failed to create volume backup for volume[uuid:{0}], because its attached volume is not in state[{1}, {2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:262
# args: msg.getVolumeUuid(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ volume\ backup\ for\ volume[uuid\:%s],\ because\ the\ vm\ is\ not\ in\ state[%s,\ %s] = Failed to create volume backup for volume[uuid:{0}], because the vm is not in state[{1}, {2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:292
# args: msg.getVolumeUuid()
The\ resource[uuid\:\ %s]\ has\ already\ created\ a\ cdp\ task,\ cannot\ create\ the\ backup\ job\ at\ the\ same\ time. = The resource[uuid: {0}] has already created a cdp task, cannot create the backup job at the same time.

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:280
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ root\ volume = Volume[uuid:{0}] is not root volume

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:287
# args: t.get(0),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Failed\ to\ create\ backups\ for\ VM[uuid\:%s],\ because\ it\ is\ not\ in\ state[%s,\ %s] = Failed to create backups for VM[uuid:{0}], because it is not in state[{1}, {2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:305
# args: groupUuid
No\ volume\ backup\ found\ for\ group\ uuid\:\ %s = No volume backup found for group uuid: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:311
# args: groupUuid
root\ volume\ backup\ of\ group[uuid\:%s]\ not\ found = root volume backup of group[uuid:{0}] not found

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:315
# args: expectVmUuid,rootVolumeInfo.get(0),rootVolumeInfo.get(1)
Current\ vm[uuid\:\ %s]\ of\ the\ volume[uuid\:\ %s]\ is\ no\ longer\ the\ vm[uuid\:\ %s]\ that\ was\ used\ for\ backup = Current vm[uuid: {0}] of the volume[uuid: {1}] is no longer the vm[uuid: {2}] that was used for backup

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:348
# args: 
cannot\ specify\ primary\ storage\ which\ attached\ different\ cluster. = cannot specify primary storage which attached different cluster.

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:378
# args: backupUuid,state
volume\ backup[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = volume backup[uuid:{0}] is in state {1}, cannot revert volume to it

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:388
# args: backupUuid
original\ volume\ for\ backup[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = original volume for backup[uuid:{0}] has been deleted, cannot revert volume to it

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:392
# args: volUuid,backupUuid,expectVmUuid
original\ volume[uuid\:%s]\ for\ backup[uuid\:%s]\ is\ no\ longer\ attached\ to\ vm[uuid\:%s] = original volume[uuid:{0}] for backup[uuid:{1}] is no longer attached to vm[uuid:{2}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:402
# args: backupUuid
VM\ not\ found\ with\ volume\ backup[uuid\:%s] = VM not found with volume backup[uuid:{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:406
# args: vmState
VM\ is\ not\ in\ stopped\ state\:\ %s = VM is not in stopped state: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:423
# args: 
No\ available\ backup\ storage\ found = No available backup storage found

# at: src/main/java/org/zstack/storage/backup/VolumeBackupApiInterceptor.java:518
# args: 
The\ vm\ is\ creating\ a\ backup\ job,\ cannot\ enable\ the\ cdp\ task\ at\ the\ same\ time. = The vm is creating a backup job, cannot enable the cdp task at the same time.

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:191
# args: 
Operation\ not\ supported\ on\ shared\ volume = Operation not supported on shared volume

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:196
# args: volumeVO.getUuid()
No\ VM\ found\ for\ volume[uuid\:%s] = No VM found for volume[uuid:{0}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupKvmBackend.java:380
# args: msg.getRootVolumeUuid()
No\ VM\ found\ with\ root\ volume\ uuid\:\ %s = No VM found with root volume uuid: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1974
# args: cidr,fmtCidr
[%s]\ is\ not\ a\ standard\ cidr,\ do\ you\ mean\ [%s]? = [{0}] is not a standard cidr, do you mean [{1}]?

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1320
# args: msg.getDstBackupStorageUuid(),msg.getSrcBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuids\:\ %s,\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = One of the backup storage[uuids: {0}, {1}] is in the state of {2}, can not do sync operation

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:992
# args: 
sync\ task\ failed. = sync task failed.

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:999
# args: reply.getStatus()
unexpected\ task\ status\:\ %s = unexpected task status: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:293
# args: vos.stream().filter( vo -> !succeedUuids.contains(vo.getUuid())).map(VolumeBackupVO::getUuid).collect(Collectors.toList())
failed\ to\ create\ image\ from\ backup\ %s = failed to create image from backup {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:498
# args: msg.getImageStoreUuid(),e.getMessage()
sync\ volume\ backup\ metadata\ file\ in\ image\ store[uuid\:%s]\ meet\ I/O\ error\:\ %s = sync volume backup metadata file in image store[uuid:{0}] meet I/O error: {1}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:535
# args: volumeVmUuid,backupUuid,backupVmUuid
Current\ vm[uuid\:\ %s]\ of\ the\ backup\ volume\ is\ no\ longer\ the\ vm[uuid\:\ %s]\ that\ was\ used\ for\ backup = Current vm[uuid: {0}] of the backup volume is no longer the vm[uuid: {1}] that was used for backup

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:544
# args: hypervisorType
No\ VolumeBackupFactory\ of\ type[%s]\ found = No VolumeBackupFactory of type[{0}] found

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:561
# args: msg.getBackupStorageUuid(),BackupStorageState.Disabled.toString()
One\ of\ the\ backup\ storage[uuid\:\ %s]\ is\ in\ the\ state\ of\ %s,\ can\ not\ do\ sync\ operation = One of the backup storage[uuid: {0}] is in the state of {1}, can not do sync operation

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:738
# args: struct.getBackupUuid(),struct.getBackupStorageUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ backup\ storage[uuid\:%s] = Volume backup[uuid:{0}] not found on backup storage[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1187
# args: backupUuid,srcBackupStorageUuid
volume\ backup[uuid\:%s]\ not\ found\ in\ backup\ storage[uuid\:%s] = volume backup[uuid:{0}] not found in backup storage[uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1399
# args: groupUuid
No\ volume\ backups\ found\ with\ group\ uuid\:\ %s = No volume backups found with group uuid: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1406
# args: groupUuid
Root\ volume\ missing\ within\ group\ uuid\:\ %s = Root volume missing within group uuid: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1412
# args: groupUuid
Multiple\ root\ volumes\ found\ within\ group\ uuid\:\ %s = Multiple root volumes found within group uuid: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1424
# args: groupUuid
No\ permission\ to\ volume\ backups\ within\ group\ uuid\:\ %s = No permission to volume backups within group uuid: {0}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:1564
# args: vo.getUuid()
Volume\ backup[uuid\:%s]\ not\ found\ on\ any\ backup\ storage = Volume backup[uuid:{0}] not found on any backup storage

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2001
# args: degree
degree\ [%s]\ should\ be\ a\ positive\ number = degree [{0}] should be a positive number

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2035
# args: type
invalid\ type[%s],\ should\ be\ [nfs,\ sshfs,\ nbd] = invalid type[{0}], should be [nfs, sshfs, nbd]

# at: src/main/java/org/zstack/storage/backup/VolumeBackupManagerImpl.java:2045
# args: url
invalid\ url[%s],\ should\ be\ hostname\:/path = invalid url[{0}], should be hostname:/path

# at: src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java:177
# args: inv.getUuid(),e.getMessage()
generate\ volume\ backup\ metadata\ file\ on\ image\ store[uuid\:%s]\ failure,\ because\ IO\ error\:\ %s = generate volume backup metadata file on image store[uuid:{0}] failure, because IO error: {1}

# at: src/main/java/org/zstack/storage/backup/VolumeBackupMetadataMaker.java:505
# args: rsp.getError()
volume\ backup\ metadata\ operation\ failure,\ because\ %s = volume backup metadata operation failure, because {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:586
# args: cmd.imgurl,cmd.uuid,ret.getError()
failed\ to\ download\ image[url\:\ %s]\ on\ backup\ storage[uuid\:\ %s],\ because\:\ %s = failed to download image[url: {0}] on backup storage[uuid: {1}], because: {2}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:277
# args: url,rsp.getError()
unable\ to\ connect\ to\ SimpleHttpBackupStorage[url\:%s],\ because\ %s = unable to connect to SimpleHttpBackupStorage[url:{0}], because {1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:507
# args: iinv.getName()
Missing\ cert\ file\ for\ downloading\ image\:\ %s = Missing cert file for downloading image: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:831
# args: 
No\ response = No response

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:907
# args: ret.getError()
reclaim\ imagestore\ error,\ because\:%s = reclaim imagestore error, because:{0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:994
# args: self.getUuid(),ret.getError()
failed\ to\ set\ max\ capacity\ on\ image\ store[uuid\:%s],\ because\:\ %s = failed to set max capacity on image store[uuid:{0}], because: {1}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1223
# args: msg.getImageUuid(),self.getUuid()
image[%s]\ not\ found\ on\ backup\ storage[%s] = image[{0}] not found on backup storage[{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1134
# args: ret.getError()
failed\ to\ delete\ image\ package,\ because\:\ %s = failed to delete image package, because: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1158
# args: StringUtils.join(notOnBsImageUuids, ','),msg.getBackupStorageUuid()
some\ images\ [%s]\ are\ not\ exported\ on\ the\ backup\ storage[uuid\:\ %s] = some images [{0}] are not exported on the backup storage[uuid: {1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1192
# args: ret.getError()
failed\ to\ package\ exported\ images,\ because\ %s = failed to package exported images, because {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1234
# args: self.getUuid(),actualSize
the\ backup\ storage[uuid\:%s]\ has\ not\ enough\ capacity[%s]\ to\ export = the backup storage[uuid:{0}] has not enough capacity[{1}] to export

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1393
# args: 
image\ store\ [%s]\ cannot\ add\ image,\ because\ it\ is\ used\ for\ backup\ remote = image store [{0}] cannot add image, because it is used for backup remote

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1591
# args: 
commercial\ license\ is\ required\ to\ use\ ImageStore = commercial license is required to use ImageStore

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorage.java:1712
# args: self.getUuid(),resp.getUuid()
the\ uuid\ of\ imagestoreBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = the uuid of imagestoreBackupStorage agent changed[expected:{0}, actual:{1}], it's most likely the agent was manually restarted. Issue a reconnect to sync the status

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:125
# args: msg.getHostname()
hostname[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = hostname[{0}] is neither an IPv4 address nor a valid hostname

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:60
# args: bsUuid,imageUuid
target\ backup\ storage[uuid\:%s]\ already\ contains\ the\ image\ [uuid\:%s] = target backup storage[uuid:{0}] already contains the image [uuid:{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:79
# args: msg.getSrcBackupStorageUuid(),msg.getUuid()
source\ backup\ storage[%s]\ doesn't\ contain\ image[%s] = source backup storage[{0}] doesn't contain image[{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:94
# args: msg.getSrcBackupStorageUuid(),msg.getUuid()
src\ backupstorage[%s]\ doesn't\ contain\ image[%s] = src backupstorage[{0}] doesn't contain image[{1}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:142
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ an\ image\ store\ backup\ storage[hostname\:%s] = duplicate backup storage. There has been an image store backup storage[hostname:{0}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:147
# args: 
file\ path\ needed = file path needed

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:151
# args: dir
absolute\ file\ path\ required\:\ %s = absolute file path required: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:154
# args: 
the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] = the url contains an invalid folder[/dev or /proc or /sys]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageApiInterceptor.java:162
# args: dir
file\ path\ contains\ invalid\ character\:\ %s = file path contains invalid character: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageExtension.java:193
# args: ps.getUuid()
cannot\ find\ a\ connected\ host\ in\ cluster\ to\ which\ PS\ [uuid\:\ %s]\ attached = cannot find a connected host in cluster to which PS [uuid: {0}] attached

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:108
# args: amsg.getUrl()
invalid\ url[%s],\ the\ url\ must\ be\ an\ absolute\ path\ starting\ with\ '/' = invalid url[{0}], the url must be an absolute path starting with '/'

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageFactory.java:117
# args: hostname
existing\ SimpleHttpBackupStorage\ with\ hostname[%s]\ found = existing SimpleHttpBackupStorage with hostname[{0}] found

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:228
# args: 
sync\ status\ failed. = sync status failed.

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageManagerImpl.java:343
# args: 
failed\ to\ get\ task\ reply! = failed to get task reply!

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:841
# args: rsp.getError()
delete\ image\ metadata\ file\ failed\:\ %s = delete image metadata file failed: {0}

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:397
# args: bsUuid
AddImage\ is\ forbidden\ in\ Disaster\ BS\:\ [%s] = AddImage is forbidden in Disaster BS: [{0}]

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:770
# args: rsp.getBackupStorageMetaFileName()
Check\ image\ metadata\ file\:\ %s\ failed = Check image metadata file: {0} failed

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:594
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ \:\ %s\ failed = Create image metadata file : {0} failed

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreBackupStorageMetaDataMaker.java:569
# args: rsp.getBackupStorageMetaFileName()
Create\ image\ metadata\ file\ sync\ \:\ %s\ failed = Create image metadata file sync : {0} failed

# at: src/main/java/org/zstack/storage/backup/imagestore/ImageStoreImageStruct.java:80
# args: e.getMessage()
parse\ create\ time\ error\:\ %s = parse create time error: {0}

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:111
# args: scheme,url
SftpBackupStorage\ doesn't\ support\ scheme[%s]\ in\ url[%s] = SftpBackupStorage doesn't support scheme[{0}] in url[{1}]

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:242
# args: rsp.getError()
fail\ to\ cancel\ download\ image,\ because\ %s = fail to cancel download image, because {0}

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorage.java:316
# args: self.getUuid(),ret.getUuid()
the\ uuid\ of\ sftpBackupStorage\ agent\ changed[expected\:%s,\ actual\:%s],\ it's\ most\ likely\ the\ agent\ was\ manually\ restarted.\ Issue\ a\ reconnect\ to\ sync\ the\ status = the uuid of sftpBackupStorage agent changed[expected:{0}, actual:{1}], it's most likely the agent was manually restarted. Issue a reconnect to sync the status

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:70
# args: bsUuid
Please\ stop\ the\ vm\ before\ create\ volume\ template\ to\ sftp\ backup\ storage\ %s = Please stop the vm before create volume template to sftp backup storage {0}

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageApiInterceptor.java:106
# args: msg.getHostname()
duplicate\ backup\ storage.\ There\ has\ been\ a\ sftp\ backup\ storage[hostname\:%s]\ existing = duplicate backup storage. There has been a sftp backup storage[hostname:{0}] existing

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:554
# args: rsp.getBackupStorageMetaFileName()
check\ image\ metadata\ file\:\ %s\ failed = check image metadata file: {0} failed

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:399
# args: rsp.getBackupStorageMetaFileName()
create\ image\ metadata\ file\ \:\ %s\ failed = create image metadata file : {0} failed

# at: src/main/java/org/zstack/storage/backup/sftp/SftpBackupStorageMetaDataMaker.java:559
# args: rsp.getBackupStorageMetaFileName()
image\ metadata\ file\:\ %s\ is\ not\ exist = image metadata file: {0} is not exist

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:321
# args: vmUuid
host\ not\ found\ for\ VM\:\ %s = host not found for VM: {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:241
# args: vmUuid
query-mirror\:\ host\ not\ found\ for\ VM[uuid\:%s] = query-mirror: host not found for VM[uuid:{0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:328
# args: hostUuid
libvirt\ on\ the\ host[uuid\:\ %s]\ not\ support\ to\ create\ cdp\ task,\ please\ check\ the\ version\ of\ libvirt. = libvirt on the host[uuid: {0}] not support to create cdp task, please check the version of libvirt.

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:334
# args: hostUuid
qemu\ on\ the\ host[uuid\:\ %s]\ not\ support\ to\ create\ cdp\ task,\ please\ check\ the\ version\ of\ qemu. = qemu on the host[uuid: {0}] not support to create cdp task, please check the version of qemu.

# at: src/main/java/org/zstack/storage/cdp/CdpBackupKvmBackend.java:366
# args: vmUuid
The\ QEMU\ version\ running\ on\ the\ VM[uuid\:%s]\ does\ not\ support\ mirrorBitmap. = The QEMU version running on the VM[uuid:{0}] does not support mirrorBitmap.

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:458
# args: vol.getUuid(),reply.getError()
cannot\ ask\ primary\ storage[uuid\:%s]\ for\ volume\ snapshot\ capability,\ see\ detail\ [%s] = cannot ask primary storage[uuid:{0}] for volume snapshot capability, see detail [{1}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:320
# args: msg.getTaskType()
unexpected\ task\ type\:\ %s = unexpected task type: {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:127
# args: 
CDP\ task\ is\ still\ enabled = CDP task is still enabled

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:152
# args: s,OffsetDateTime.now().truncatedTo(ChronoUnit.SECONDS)
invalid\ time\ string\:\ %s,\ should\ be\ in\ ISO\ offset\ format,\ for\ example\:\ %s = invalid time string: {0}, should be in ISO offset format, for example: {1}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:189
# args: state
VM\ is\ not\ stopped,\ current\ state\:\ %s = VM is not stopped, current state: {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:233
# args: volumeUuid,msg.getVmInstanceUuid()
Shared\ volume[%s]\ from\ VM[uuid]\ is\ still\ used\ by\ other\ VMs. = Shared volume[{0}] from VM[uuid] is still used by other VMs.

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:243
# args: msg.getUuid()
Task\ not\ found[uuid\:\ %s] = Task not found[uuid: {0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:248
# args: msg.getUuid(),taskVO.getTaskType()
Unexpected\ task\ type[uuid\:\ %s,\ type\:\ %s] = Unexpected task type[uuid: {0}, type: {1}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:261
# args: refVO.getResourceUuid()
VM[uuid\:\ %s]\ already\ deleted = VM[uuid: {0}] already deleted

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:275
# args: state
Unexpected\ VM\ state\:\ %s = Unexpected VM state: {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:283
# args: taskVO.getBackupStorageUuid()
Backup\ storage\ not\ found[uuid\:\ %s] = Backup storage not found[uuid: {0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:288
# args: taskVO.getBackupStorageUuid()
Backup\ storage[uuid\:\ %s]\ is\ disabled = Backup storage[uuid: {0}] is disabled

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:293
# args: taskVO.getBackupStorageUuid()
Backup\ storage[uuid\:\ %s]\ is\ not\ connected = Backup storage[uuid: {0}] is not connected

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:309
# args: refVO.getResourceUuid()
The\ vm[uuid\:\ %s]\ has\ already\ created\ a\ backup\ job,\ cannot\ enable\ the\ cdp\ task\ at\ the\ same\ time. = The vm[uuid: {0}] has already created a backup job, cannot enable the cdp task at the same time.

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:334
# args: s2,v2,s1,v1
'%s'(%d)\ should\ be\ larger\ than\ '%s'(%d) = '{0}'({1}) should be larger than '{2}'({3})

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:340
# args: "hourlyRpSinceDay"
mandatory\ args\ missing\:\ %s = mandatory args missing: {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:376
# args: vmUuids.size()
expected\ one\ VM\ uuid,\ but\ given\ %d = expected one VM uuid, but given {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:380
# args: vmUuids.get(0)
resource\ [uuid\:\ %s]\ is\ not\ VM = resource [uuid: {0}] is not VM

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageApiInterceptor.java:402
# args: msg.getTargetResourceUuid()
The\ vm[uuid\:\ %s]\ has\ already\ created\ a\ cdp\ task,\ cannot\ create\ the\ backup\ job\ at\ the\ same\ time. = The vm[uuid: {0}] has already created a cdp task, cannot create the backup job at the same time.

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java:243
# args: groupId
No\ recovery\ point\ found\ with\ grpId\ %d = No recovery point found with grpId {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageImpl.java:717
# args: backupStorageUuid
hostname\ not\ found\ for\ backup\ storage[uuid\:\ %s] = hostname not found for backup storage[uuid: {0}]

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1921
# args: msg.getUuid()
CDP\ task[uuid\:\ %s]\ not\ found = CDP task[uuid: {0}] not found

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:179
# args: msg.getMaxCapacity(),oldUsedCapacity
Invalid\ max\ capacity[%d],\ current\ usage\ is\ %d = Invalid max capacity[{0}], current usage is {1}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:269
# args: vmUuid,tasks.get(0)
VM\ [uuid\:\ %s]\ have\ been\ protected\ by\ task\:\ %s = VM [uuid: {0}] have been protected by task: {1}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:715
# args: 
revert\ job\ cancelled = revert job cancelled

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:781
# args: 
create-vm\ job\ cancelled = create-vm job cancelled

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1181
# args: taskVO.getUuid()
CDP\ task[uuid\:\ %s]\ has\ no\ VM\ attached = CDP task[uuid: {0}] has no VM attached

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1215
# args: taskVO.getUuid()
task[uuid\:%s]\ have\ been\ deleted = task[uuid:{0}] have been deleted

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1279
# args: taskUuid,maxCapacity,usedCapacity
CDP\ task[uuid\:%s]\ exceeded\ storage\ usage\:\ maximum\ %d,\ used\ %d. = CDP task[uuid:{0}] exceeded storage usage: maximum {1}, used {2}.

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1728
# args: vmUuid
No\ CDP\ task\ found\ for\ VM\:\ %s = No CDP task found for VM: {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1736
# args: vmUuid
No\ CDP\ backup\ storage\ found\ for\ VM\:\ %s = No CDP backup storage found for VM: {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1784
# args: hypervisorType
No\ CdpBackupFactory\ of\ type[%s]\ found = No CdpBackupFactory of type[{0}] found

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:1815
# args: hostUuid
No\ hypervisor\ type\ for\ VM\ %s = No hypervisor type for VM {0}

# at: src/main/java/org/zstack/storage/cdp/CdpBackupStorageManagerImpl.java:2221
# args: msg.getVolume().getUuid()
The\ operation\ has\ volume[uuid\:\ %s]\ that\ will\ take\ chain\ type\ snapshot.\ Therefore,\ you\ could\ not\ do\ this\ operation\ when\ a\ CDP\ task\ is\ running\ on\ the\ VM\ instance. = The operation has volume[uuid: {0}] that will take chain type snapshot. Therefore, you could not do this operation when a CDP task is running on the VM instance.

# at: src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java:163
# args: 
Could\ not\ attach\ volume.The\ VM\ instance\ is\ running\ a\ CDP\ task.\ After\ the\ volume\ is\ attached,\ the\ capacity\ required\ for\ full\ backup\ will\ exceed\ the\ CDP\ task\ planned\ size.\ Please\ plan\ the\ size\ properly\ and\ try\ again. = Could not attach volume.The VM instance is running a CDP task. After the volume is attached, the capacity required for full backup will exceed the CDP task planned size. Please plan the size properly and try again.

# at: src/main/java/org/zstack/storage/cdp/CdpTaskMonitor.java:187
# args: volume.getVmInstanceUuid(),volume.getUuid()
The\ VM[%s]\ for\ volume[%s]\ is\ running\ CDP,\ cannot\ resize\ now. = The VM[{0}] for volume[{1}] is running CDP, cannot resize now.

# at: src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java:88
# args: apiMessage.getCdpTaskUuid()
No\ VM\ found\ for\ CDP\ task[uuid\:\ %s] = No VM found for CDP task[uuid: {0}]

# at: src/main/java/org/zstack/storage/cdp/CreateVmFromCdpBackupLongJob.java:119
# args: bsUuid
BackupStorage[uuid\:\ %s]\ already\ been\ deleted = BackupStorage[uuid: {0}] already been deleted

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:179
# args: 
no\ volume\ records\ found\ from\ VM\ backup = no volume records found from VM backup

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:138
# args: taskUuid
VM\ CDP\ task[uuid\:\ %s]\ not\ found = VM CDP task[uuid: {0}] not found

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:147
# args: taskUuid
VM\ not\ found\ for\ CDP\ task[uuid\:\ %s] = VM not found for CDP task[uuid: {0}]

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:236
# args: taskUuid,msg.getGroupId()
multiple\ root\ volumes\ found\ from\ CDP\ backup\ %s\:%d = multiple root volumes found from CDP backup {0}:{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:250
# args: taskUuid,msg.getGroupId()
cannot\ find\ root\ volume\ from\ CDP\ backup\ %s\:%d = cannot find root volume from CDP backup {0}:{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveCreateFlowChain.java:257
# args: taskUuid,msg.getGroupId()
root\ volume\ not\ found\ from\ CDP\ backup\ %s\:%d = root volume not found from CDP backup {0}:{1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:118
# args: hostUuid,this.msg.getVmInstanceUuid()
recoverVm\:\ host[uuid\:\ %s]\ not\ found\ for\ VM[uuid\:\ %s] = recoverVm: host[uuid: {0}] not found for VM[uuid: {1}]

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:216
# args: uuids
multiple\ root\ volumes\ found\:\ %s = multiple root volumes found: {0}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:792
# args: volumeUuid,installPath
volume[uuid\:\ %s]\ has\ unexpected\ path\:\ %s = volume[uuid: {0}] has unexpected path: {1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:718
# args: volumeUuid,oldVolumeSize
unexpected\ volume[uuid\:\ %s]\ size\:\ %d = unexpected volume[uuid: {0}] size: {1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:746
# args: volumeUuid,reply.getError().getDetails()
resize\ volume[uuid\:\ %s]\ failed\:\ %s = resize volume[uuid: {0}] failed: {1}

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:377
# args: uuid,msg.getVmInstanceUuid()
volume\ %s\ contains\ in\ backup\ but\ detached\ from\ VM[uuid\:\ %s]\:\ you\ need\ to\ either\ attach\ it\ back\ or\ delete\ it = volume {0} contains in backup but detached from VM[uuid: {1}]: you need to either attach it back or delete it

# at: src/main/java/org/zstack/storage/cdp/KvmCdpVmLiveRestoreFlowChain.java:305
# args: 
no\ root\ volume\ found\ from\ VM\ backup = no root volume found from VM backup

# at: src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java:145
# args: 
kvmagent\ restarted = kvmagent restarted

# at: src/main/java/org/zstack/storage/cdp/RecoverVmTracker.java:164
# args: maxFailure
kvmagent\ no\ response\ %d\ times = kvmagent no response {0} times

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:117
# args: apiMessage.getHostUuid(),apiMessage.getBackupStorageUuid()
waiting\ host[uuid\:%s]\ and\ backupStorage[uuid\:%s]\ to\ be\ Connected... = waiting host[uuid:{0}] and backupStorage[uuid:{1}] to be Connected...

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:72
# args: apiMessage.getVmInstanceUuid()
recoverVm\:\ host\ uuid\ is\ not\ provided\ and\ original\ host\ is\ not\ found\ for\ VM[uuid\:\ %s] = recoverVm: host uuid is not provided and original host is not found for VM[uuid: {0}]

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:165
# args: vmUuid
No\ CDP\ task\ found\ for\ VM[uuid\:\ %s] = No CDP task found for VM[uuid: {0}]

# at: src/main/java/org/zstack/storage/cdp/RevertVmFromCdpBackupMsgLongJob.java:174
# args: vmUuid,backupStorageUuid
CDP\ task\ for\ VM[uuid\:\ %s]\ is\ not\ found\ on\ BS[uuid\:\ %s] = CDP task for VM[uuid: {0}] is not found on BS[uuid: {1}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:84
# args: msg.getPoolName()
operation\ failure,\ because\ the\ poolName[poolName\:%s]\ can\ not\ include\ unprintable\ ascii\ characters. = operation failure, because the poolName[poolName:{0}] can not include unprintable ascii characters.

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:98
# args: duplicatePoolUuid
Ceph\ pool[uuid\:%s]\ with\ this\ name\ is\ already\ added\ into\ ZStack\ and\ used\ elsewhere,\ cannot\ reuse\ the\ ceph\ pool. = Ceph pool[uuid:{0}] with this name is already added into ZStack and used elsewhere, cannot reuse the ceph pool.

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:93
# args: msg.getPoolName(),duplicatePoolUuid
creation\ failure,\ duplicate\ poolName[%s].\ There\ has\ been\ a\ pool[uuid\:%s]\ with\ the\ same\ name\ existing. = creation failure, duplicate poolName[{0}]. There has been a pool[uuid:{1}] with the same name existing.

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:126
# args: existing
cannot\ add\ ceph\ primary\ storage,\ there\ has\ been\ some\ ceph\ primary\ storage\ using\ mon[hostnames\:%s] = cannot add ceph primary storage, there has been some ceph primary storage using mon[hostnames:{0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:137
# args: uri.getHostname()
Cannot\ add\ same\ host[%s]\ in\ mons = Cannot add same host[{0}] in mons

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:163
# args: 
Adding\ the\ same\ Mon\ node\ is\ not\ allowed = Adding the same Mon node is not allowed

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:202
# args: monUrl,MON_URL_FORMAT
invalid\ monUrl[%s].\ A\ valid\ url\ is\ in\ format\ of\ %s = invalid monUrl[{0}]. A valid url is in format of {1}

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:209
# args: 
dataVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = dataVolumePoolName can be null but cannot be an empty string

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:214
# args: 
rootVolumePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = rootVolumePoolName can be null but cannot be an empty string

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:219
# args: 
imageCachePoolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = imageCachePoolName can be null but cannot be an empty string

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:242
# args: existing
cannot\ add\ ceph\ backup\ storage,\ there\ has\ been\ some\ ceph\ backup\ storage\ using\ mon[hostnames\:%s] = cannot add ceph backup storage, there has been some ceph backup storage using mon[hostnames:{0}]

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:250
# args: 
poolName\ is\ required\ when\ importImages\ is\ true = poolName is required when importImages is true

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:248
# args: 
poolName\ can\ be\ null\ but\ cannot\ be\ an\ empty\ string = poolName can be null but cannot be an empty string

# at: src/main/java/org/zstack/storage/ceph/CephApiInterceptor.java:269
# args: 
Third-party\ ceph\ cannot\ mixed\ with\ other\ primary\ storage. = Third-party ceph cannot mixed with other primary storage.

# at: src/main/java/org/zstack/storage/ceph/CephMonBase.java:66
# args: 
The\ problem\ may\ be\ caused\ by\ an\ incorrect\ user\ name\ or\ password\ or\ SSH\ port\ or\ unstable\ network\ environment = The problem may be caused by an incorrect user name or password or SSH port or unstable network environment

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:768
# args: path
all\ monitors\ cannot\ execute\ http\ call[%s] = all monitors cannot execute http call[{0}]

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:866
# args: msg.getHostname(),msg.getBackupStorageUuid()
CephMon[hostname\:%s]\ not\ found\ on\ backup\ storage[uuid\:%s] = CephMon[hostname:{0}] not found on backup storage[uuid:{1}]

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1386
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ backup\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ backup\ storage = there is another CEPH backup storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different backup storage

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageBase.java:1756
# args: msg.getImageUuid(),self.getUuid(),self.getName()
image[uuid\:\ %s]\ is\ not\ on\ backup\ storage[uuid\:%s,\ name\:%s] = image[uuid: {0}] is not on backup storage[uuid:{1}, name:{2}]

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:97
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ backup\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = cannot update status of the ceph backup storage mon[uuid:{0}], it has been deleted.This error can be ignored

# at: src/main/java/org/zstack/storage/ceph/backup/CephBackupStorageMonBase.java:463
# args: getSelf().getBackupStorageUuid()
Ceph\ bs[uuid\=%s]\ pool\ name\ not\ found = Ceph bs[uuid={0}] pool name not found

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4126
# args: base.getSelf().getHostname(),fsid,getSelf().getFsid()
the\ mon[ip\:%s]\ returns\ a\ fsid[%s]\ different\ from\ the\ current\ fsid[%s]\ of\ the\ cep\ cluster,are\ you\ adding\ a\ mon\ not\ belonging\ to\ current\ cluster\ mistakenly? = the mon[ip:{0}] returns a fsid[{1}] different from the current fsid[{2}] of the cep cluster,are you adding a mon not belonging to current cluster mistakenly?

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:1520
# args: backupStorage.getUuid(),backupStorage.getName(),bsFsid,self.getUuid(),self.getName(),getSelf().getFsid()
the\ backup\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s]\ is\ not\ in\ the\ same\ ceph\ cluster\ with\ the\ primary\ storage[uuid\:%s,\ name\:%s,\ fsid\:%s] = the backup storage[uuid:{0}, name:{1}, fsid:{2}] is not in the same ceph cluster with the primary storage[uuid:{3}, name:{4}, fsid:{5}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:2588
# args: psUuid,bsUuid
fsid\ is\ not\ same\ between\ ps[%s]\ and\ bs[%s],\ create\ template\ is\ forbidden. = fsid is not same between ps[{0}] and bs[{1}], create template is forbidden.

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3410
# args: self.getUuid()
ceph\ primary\ storage[uuid\:%s]\ may\ have\ been\ deleted. = ceph primary storage[uuid:{0}] may have been deleted.

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3394
# args: self.getUuid()
unable\ to\ connect\ to\ the\ ceph\ primary\ storage[uuid\:%s],\ failed\ to\ connect\ all\ ceph\ monitors. = unable to connect to the ceph primary storage[uuid:{0}], failed to connect all ceph monitors.

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3507
# args: 
the\ fsid\ returned\ by\ mons\ are\ mismatching,\ it\ seems\ the\ mons\ belong\ to\ different\ ceph\ clusters\:\n = the fsid returned by mons are mismatching, it seems the mons belong to different ceph clusters:\n

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3525
# args: otherCeph.getName(),otherCeph.getUuid(),fsId
there\ is\ another\ CEPH\ primary\ storage[name\:%s,\ uuid\:%s]\ with\ the\ same\ FSID[%s],\ you\ cannot\ add\ the\ same\ CEPH\ setup\ as\ two\ different\ primary\ storage = there is another CEPH primary storage[name:{0}, uuid:{1}] with the same FSID[{2}], you cannot add the same CEPH setup as two different primary storage

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:3783
# args: self.getUuid(),self.getName(),mon.getSelf().getUuid(),res.error
the\ ceph\ primary\ storage[uuid\:%s,\ name\:%s]\ is\ down,\ as\ one\ mon[uuid\:%s]\ reports\ an\ operation\ failure[%s] = the ceph primary storage[uuid:{0}, name:{1}] is down, as one mon[uuid:{2}] reports an operation failure[{3}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4697
# args: 
operation\ error,\ because\:\ failed\ to\ get\ response = operation error, because: failed to get response

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4744
# args: 
backing\ up\ snapshots\ to\ backup\ storage\ is\ a\ depreciated\ feature,\ which\ will\ be\ removed\ in\ future\ version = backing up snapshots to backup storage is a depreciated feature, which will be removed in future version

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4915
# args: volume.getUuid(),volume.getRootImageUuid()
cannot\ reinit\ rootvolume\ [%s]\ because\ image\ [%s]\ has\ been\ deleted\ and\ imagecache\ cannot\ be\ found = cannot reinit rootvolume [{0}] because image [{1}] has been deleted and imagecache cannot be found

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4950
# args: ImageStatus.Ready.toString()
Because\ image\ status\ is\ not\ %s = Because image status is not {0}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4947
# args: 
Because\ the\ image\ is\ currently\ inaccessible,\ possibly\ due\ to\ a\ previous\ volume\ storage\ migration = Because the image is currently inaccessible, possibly due to a previous volume storage migration

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:4953
# args: volume.getRootImageUuid(),getSelf().getUuid(),cause
cannot\ find\ backupstorage\ to\ download\ image\ [%s]\ to\ primarystorage\ [%s].\ %s = cannot find backupstorage to download image [{0}] to primarystorage [{1}]. {2}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:5653
# args: 
allocated\ url\ not\ found = allocated url not found

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageBase.java:5658
# args: allocatedUrl
invalid\ allocated\ url\:%s = invalid allocated url:{0}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:396
# args: vol.getPrimaryStorageUuid()
cannot\ find\ any\ Connected\ ceph\ mon\ for\ the\ primary\ storage[uuid\:%s] = cannot find any Connected ceph mon for the primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:838
# args: targetCephPoolName,cephPoolName
ceph\ pool\ conflict,\ the\ ceph\ pool\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ ceph\ pool\ specified\ in\ the\ creation\ parameter\ is\ %s = ceph pool conflict, the ceph pool specified by the instance offering is {0}, and the ceph pool specified in the creation parameter is {1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:964
# args: targetCephPoolName,cephPoolName
ceph\ pool\ conflict,\ the\ ceph\ pool\ specified\ by\ the\ disk\ offering\ is\ %s,\ and\ the\ ceph\ pool\ specified\ in\ the\ creation\ parameter\ is\ %s = ceph pool conflict, the ceph pool specified by the disk offering is {0}, and the ceph pool specified in the creation parameter is {1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1217
# args: rootVolume.getInstallPath(),reply.getError().getDetails()
get\ rootVolume[%s]\ rbd\ image\ watchers\ fail,\ %s = get rootVolume[{0}] rbd image watchers fail, {1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1233
# args: msg.getVolumeUuid(),installPath
rootVolume[%s]\ is\ already\ in\ use(ceph\ rbd\ image[%s]\ already\ has\ watchers),\ in\ order\ to\ prevent\ brain\ splitting,\ Starting\ VM\ is\ prohibited. = rootVolume[{0}] is already in use(ceph rbd image[{1}] already has watchers), in order to prevent brain splitting, Starting VM is prohibited.

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1341
# args: poolName
cannot\ find\ cephPrimaryStorage\ pool[poolName\=%s] = cannot find cephPrimaryStorage pool[poolName={0}]

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1351
# args: poolName,volumeSize
cephPrimaryStorage\ pool[poolName\=%s]\ available\ virtual\ capacity\ not\ enough\ for\ size\ %s = cephPrimaryStorage pool[poolName={0}] available virtual capacity not enough for size {1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageFactory.java:1399
# args: psUuid,purpose
cannot\ allocate\ pool\ for\ primaryStorage[%s],\ purpose\:\ %s = cannot allocate pool for primaryStorage[{0}], purpose: {1}

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:93
# args: uuid
cannot\ update\ status\ of\ the\ ceph\ primary\ storage\ mon[uuid\:%s],\ it\ has\ been\ deleted.This\ error\ can\ be\ ignored = cannot update status of the ceph primary storage mon[uuid:{0}], it has been deleted.This error can be ignored

# at: src/main/java/org/zstack/storage/ceph/primary/CephPrimaryStorageMonBase.java:471
# args: primaryStorageUuid
Ceph\ ps[uuid\=%s]\ root\ pool\ name\ not\ found = Ceph ps[uuid={0}] root pool name not found

# at: src/main/java/org/zstack/storage/ceph/primary/CephRequiredUrlParser.java:32
# args: 
invalid\ uri,\ correct\ example\ is\ ceph\://$POOLNAME/$VOLUMEuuid\ or\ volume\://$VOLUMEuuid = invalid uri, correct example is ceph://$POOLNAME/$VOLUMEuuid or volume://$VOLUMEuuid

# at: src/main/java/org/zstack/storage/ceph/primary/CephStorageAttachKvmClusterMetric.java:19
# args: 
Can\ not\ attach\ third-party\ ceph\ with\ token\ into\ kvm\ cluster. = Can not attach third-party ceph with token into kvm cluster.

# at: src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java:168
# args: poolUuid,size,originAvailableCapacity
required\ ceph\ pool[uuid\:%s]\ cannot\ satisfy\ conditions\ [availableSize\ >\ %s\ bytes],\ current\ available\ size\ %s = required ceph pool[uuid:{0}] cannot satisfy conditions [availableSize > {1} bytes], current available size {2}

# at: src/main/java/org/zstack/storage/ceph/primary/capacity/CephOsdGroupCapacityHelper.java:196
# args: poolUuid
cannot\ find\ ceph\ pool\ [%s]\ related\ osdgroup = cannot find ceph pool [{0}] related osdgroup

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:95
# args: 
no\ candidate\ host\ with\ the\ scsi\ lun\ with\ enough\ cpu\ /\ memory\ or\ Enabled/Connected\ status = no candidate host with the scsi lun with enough cpu / memory or Enabled/Connected status

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:54
# args: firstScsiLunVO.getUuid(),scsiLunVO.getUuid()
scsi\ lun[uuid\:\ %s]\ and\ [uuid\:\ %s]\ does\ not\ has\ a\ common\ host = scsi lun[uuid: {0}] and [uuid: {1}] does not has a common host

# at: src/main/java/org/zstack/storage/device/ScsiLunAllocatorFactory.java:59
# args: scsiLunVO.getUuid()
scsi\ lun[uuid\:\ %s]\ is\ in\ disabled\ state = scsi lun[uuid: {0}] is in disabled state

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:150
# args: scsiLunVO.getWwid(),refVO.getVmInstanceUuid()
scsi\ lun[wwid\:\ %s]\ has\ been\ attached\ to\ vm\ instance\ %s = scsi lun[wwid: {0}] has been attached to vm instance {1}

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:86
# args: msg.getIp(),msg.getPort()
iSCSI\ server[ip\:\ %s,\ port\:\ %s]\ already\ exists = iSCSI server[ip: {0}, port: {1}] already exists

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:91
# args: msg.getIp()
iSCSI\ server\ ip\:\ %s\ is\ not\ valid = iSCSI server ip: {0} is not valid

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:100
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ already\ attached\ to\ cluster[uuid\:\ %s] = iSCSI server[uuid: {0}] already attached to cluster[uuid: {1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:110
# args: msg.getUuid(),msg.getClusterUuid()
iSCSI\ server[uuid\:\ %s]\ not\ attached\ to\ cluster[uuid\:\ %s] = iSCSI server[uuid: {0}] not attached to cluster[uuid: {1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:121
# args: msg.getUuid(),clusterUuid
iSCSI\ server[uuid\:\ %s]\ still\ attached\ to\ cluster[uuid\:\ %s] = iSCSI server[uuid: {0}] still attached to cluster[uuid: {1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceApiInterceptor.java:171
# args: VmInstanceUuid
please\ umount\ all\ block\ devices\ of\ the\ vm[%s]\ and\ try\ again = please umount all block devices of the vm[{0}] and try again

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1501
# args: lunVO.getWwid(),msg.getVmInstanceUuid()
scsi\ lun[wwid\:%s]\ has\ been\ attached\ into\ the\ vm[%s] = scsi lun[wwid:{0}] has been attached into the vm[{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1508
# args: msg.getUuid(),vmInstanceVO.getState(),allowedVmOperationStates
vm\ instance[%s]\ state\ [%s]\ not\ in\ allowed\ state[%s]\ for\ operation = vm instance[{0}] state [{1}] not in allowed state[{2}] for operation

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1517
# args: msg.getUuid(),vmInstanceVO.getHostUuid(),msg.getUuid()
vm\ instance[uuid\:\ %s]\ host[uuid\:\ %s]\ not\ attached\ scsi\ lun[uuid\:\ %s] = vm instance[uuid: {0}] host[uuid: {1}] not attached scsi lun[uuid: {2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1576
# args: msg.getVmInstanceUuid(),vmInstanceVO.getState(),allowedVmOperationStates
vm\ instance[%s]\ state[%s]\ not\ in\ allowed\ state[%s]\ for\ operation = vm instance[{0}] state[{1}] not in allowed state[{2}] for operation

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1585
# args: msg.getVmInstanceUuid(),hostVO.getUuid(),msg.getUuid()
vm\ instance[%s]\ host[uuid\:\ %s]\ not\ attached\ scsi\ lun[uuid\:\ %s] = vm instance[{0}] host[uuid: {1}] not attached scsi lun[uuid: {2}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1738
# args: msg.getUuid(),vmUuids
SCSI\ LUN[%s]\ is\ attached\ to\ VM\ [%s] = SCSI LUN[{0}] is attached to VM [{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1748
# args: msg.getUuid(),msg.getHostUuid()
SCSI\ LUN[%s]\ record\ not\ found\ on\ host\ [%s] = SCSI LUN[{0}] record not found on host [{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1760
# args: hvType,msg.getHostUuid()
unexpected\ hypervisor\ type[%s]\ for\ host\ [%s] = unexpected hypervisor type[{0}] for host [{1}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:2024
# args: serial
different\ disk\ types\ are\ found\ in\ different\ hosts\ for\ lun[serial\:%s],\ unable\ to\ attach\ it\ to\ cluster = different disk types are found in different hosts for lun[serial:{0}], unable to attach it to cluster

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:1975
# args: scannedServer.getKey(),JSONObjectUtil.toJsonString(scannedTargets),hostVO.getUuid(),JSONObjectUtil.toJsonString(returnValue.getIscsiTargets())
different\ iscsi\ configuration\ were\ found\ on\ host[uuid\:%s,\ targets\:%s]and\ host[uuid\:%s,\ targets\:%s] = different iscsi configuration were found on host[uuid:{0}, targets:{1}]and host[uuid:{2}, targets:{3}]

# at: src/main/java/org/zstack/storage/device/StorageDeviceManagerImpl.java:2661
# args: refVO.getScsiLunUuid()
specified\ scsi\ lun[wwid\:\ %s]\ not\ exists\ or\ disabled = specified scsi lun[wwid: {0}] not exists or disabled

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:60
# args: msg.getVolumeUuid()
the\ vm\ where\ the\ data\ volume\ [%s]\ is\ located\ has\ a\ memory\ snapshot,\ can't\ delete = the vm where the data volume [{0}] is located has a memory snapshot, can't delete

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:71
# args: msg.getVolumeUuid(),msg.getVmInstanceUuid()
unable\ to\ attach\ volume\ %s\ to\ vmInstance\ %s\ with\ memory\ snapshot\ group = unable to attach volume {0} to vmInstance {1} with memory snapshot group

# at: src/main/java/org/zstack/storage/memorySnapshot/MemorySnapshotGroupValidator.java:78
# args: msg.getVolumeUuid()
the\ vm\ where\ the\ data\ volume\ [%s]\ is\ located\ has\ a\ memory\ snapshot,\ can't\ detach = the vm where the data volume [{0}] is located has a memory snapshot, can't detach

# at: src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java:60
# args: 
defaultL3NetworkUuid\ not\ exist = defaultL3NetworkUuid not exist

# at: src/main/java/org/zstack/storage/memorySnapshot/VmNicMemorySnapshotGroupExtension.java:432
# args: l3Uuid,String.join("','", memorySnapshotGroupUuidList)
nic\ with\ l3\ network[uuid\:\ %s]\ is\ referenced\ by\ VolumeSnapshotGroup[uuid\:\ %s],\ delete\ this\ VolumeSnapshotGroup\ before\ deleting\ this\ l3\ network. = nic with l3 network[uuid: {0}] is referenced by VolumeSnapshotGroup[uuid: {1}], delete this VolumeSnapshotGroup before deleting this l3 network.

# at: src/main/java/org/zstack/storage/memorySnapshot/VolumeMemorySnapshotGroupExtension.java:155
# args: archiveVolume.getResourceUuid()
the\ volume\ %s\ does\ not\ exist = the volume {0} does not exist

# at: src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java:161
# args: rsp.getError()
vm\ block\ migrate\ failed\:\ %s = vm block migrate failed: {0}

# at: src/main/java/org/zstack/storage/migration/KvmBlockLiveMigrationWorkFlow.java:188
# args: 
target\ primary\ storage\ does\ not\ support\ migration\ for\ current\ host = target primary storage does not support migration for current host

# at: src/main/java/org/zstack/storage/migration/KvmMigrateVmWithStorageWorkFlow.java:116
# args: 
No\ host\ available\ for\ block\ live\ migration = No host available for block live migration

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:121
# args: 
do\ not\ support\ storage\ migration\ with\ iso\ in\ ceph\ backup\ storage\ attached = do not support storage migration with iso in ceph backup storage attached

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:289
# args: srcVm.getUuid(),srcVm.getName()
do\ not\ support\ storage\ migration\ of\ vm[uuid\:%s,\ name\:\ %s]\ while\ shared\ volume\ attached = do not support storage migration of vm[uuid:{0}, name: {1}] while shared volume attached

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:173
# args: srcPsType,dstPsType
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ data\ volume = do not support storage migration from [{0}] to [{1}] with data volume

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:178
# args: srcPsType,dstPsType
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s]\ with\ snapshot = do not support storage migration from [{0}] to [{1}] with snapshot

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:185
# args: primaryStorageVO.getType(),dstPrimaryStorageVO.getType()
do\ not\ support\ storage\ migration\ from\ [%s]\ to\ [%s] = do not support storage migration from [{0}] to [{1}]

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:191
# args: vmInstanceVO.getUuid()
VM[uuid\:%s]\ is\ running\ but\ host\ uuid\ is\ missing = VM[uuid:{0}] is running but host uuid is missing

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:202
# args: 
Source\ BS\ and\ Destination\ BS\ cannot\ be\ the\ same. = Source BS and Destination BS cannot be the same.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:210
# args: 
Source\ BS\ and\ Destination\ BS\ must\ not\ be\ Disabled. = Source BS and Destination BS must not be Disabled.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:217
# args: msg.getImageUuid()
Image[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = Image[uuid:{0}] is not in status Ready, cannot migrate it.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:228
# args: msg.getImageUuid(),msg.getSrcBackupStorageUuid()
Image[uuid\:%s]\ is\ not\ in\ source\ backup\ storage[uuid\:%s] = Image[uuid:{0}] is not in source backup storage[uuid:{1}]

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:237
# args: srcBS.getType(),dstBS.getType()
Cannot\ migrate\ image\ from\ %s\ to\ %s. = Cannot migrate image from {0} to {1}.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:256
# args: msg.getVolumeUuid(),msg.getDstPrimaryStorageUuid()
Volume[uuid\:%s]\ is\ already\ in\ PS[uuid\:%s],\ cannot\ migrate. = Volume[uuid:{0}] is already in PS[uuid:{1}], cannot migrate.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:264
# args: 
Source\ PS\ and\ Destination\ PS\ must\ not\ be\ Disabled\ or\ Maintenance\ state. = Source PS and Destination PS must not be Disabled or Maintenance state.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:271
# args: msg.getVolumeUuid()
Volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ cannot\ migrate\ it. = Volume[uuid:{0}] is not in status Ready, cannot migrate it.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:333
# args: msg.getVolumeUuid(),srcVolume.getVmInstanceUuid()
cannot\ migrate\ data\ volume[uuid\:%s]\ bewteen\ sharedblock\ primary\ storages\ when\ vm[vmuuid\:%s]\ instance\ is\ not\ stopped. = cannot migrate data volume[uuid:{0}] bewteen sharedblock primary storages when vm[vmuuid:{1}] instance is not stopped.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:328
# args: msg.getVolumeUuid(),srcVolume.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ still\ attached\ on\ vm[uuid\:%s],\ please\ detach\ it\ before\ migration. = the volume[uuid:{0}] is still attached on vm[uuid:{1}], please detach it before migration.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:341
# args: srcVolume.getUuid(),srcVolume.getName()
do\ not\ support\ storage\ migration\ while\ shared\ volume[uuid\:\ %s,\ name\:\ %s]\ attached = do not support storage migration while shared volume[uuid: {0}, name: {1}] attached

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:284
# args: 
Cannot\ migrate\ root\ volume\ when\ vm\ instance\ is\ not\ stopped. = Cannot migrate root volume when vm instance is not stopped.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:301
# args: 
Cannot\ migrate\ root\ volume\ when\ there\ are\ data\ volumes\ attached\ to\ the\ vm\ instance. = Cannot migrate root volume when there are data volumes attached to the vm instance.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:320
# args: 
The\ destination\ primary\ storage\ is\ not\ attached\ to\ any\ cluster\ that\ has\ the\ same\ L2\ networks\ as\ source\ cluster. = The destination primary storage is not attached to any cluster that has the same L2 networks as source cluster.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:351
# args: srcPS.getType(),dstPS.getType()
Cannot\ migrate\ volume\ from\ %s\ to\ %s. = Cannot migrate volume from {0} to {1}.

# at: src/main/java/org/zstack/storage/migration/StorageMigrationApiInterceptor.java:372
# args: msg.getVolumeUuid()
can\ not\ migrate\ volume[%s],\ because\ volume\ state\ is\ Disabled = can not migrate volume[{0}], because volume state is Disabled

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:510
# args: vmInstanceVO.getState()
not\ support\ vm\ state[%s]\ to\ do\ storage\ migration = not support vm state[{0}] to do storage migration

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:448
# args: msg.getVmInstanceUuid(),size,dstPrimaryStorageVO.getCapacity().getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ vm[uuid\:\ %s]\ storage\ migration,\ required\ capacity(include\ image\ cache)\:\ %s,\ current\ available\ physical\ capacity\:\ %s = there are not enough capacity for vm[uuid: {0}] storage migration, required capacity(include image cache): {1}, current available physical capacity: {2}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1125
# args: msg.getVmInstanceUuid()
VM[uuid\:\ %s]\ not\ found = VM[uuid: {0}] not found

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:846
# args: srcPs.getType(),dstPs.getType()
unsupported\ storage\ migration\ type\:\ from\ %s\ to\ %s = unsupported storage migration type: from {0} to {1}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1094
# args: msg.getType()
not\ support\ to\ cancel\ %s = not support to cancel {0}

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1194
# args: vmInstanceVO.getState()
not\ support\ vm\ state[%s]\ to\ do\ cancellation\ of\ storage\ migration = not support vm state[{0}] to do cancellation of storage migration

# at: src/main/java/org/zstack/storage/migration/StorageMigrationBase.java:1514
# args: 
failed\ to\ get\ host\ candidates\ for\ vm\ migration = failed to get host candidates for vm migration

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:114
# args: dstBsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ backup\ storage[uuid\:%s] = all ceph mons are Disconnected in ceph backup storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:187
# args: imageUuid,srcBsUuid,dstBsUuid,errCode.getDetails()
Failed\ to\ migrate\ Image\ %s\ from\ BS\ %s\ to\ BS\ %s.\ cause\:\ %s = Failed to migrate Image {0} from BS {1} to BS {2}. cause: {3}

# at: src/main/java/org/zstack/storage/migration/backup/ceph/CephToCephMigrateImageFlow.java:143
# args: reply1.getTrashId(),dstBsUuid,dstImageInstallPath,reply1.getResourceUuid()
found\ trashId(%s)\ in\ BackupStorage\ [%s]\ for\ the\ migrate\ installPath[%s].\ Please\ clean\ it\ first\ by\ 'APICleanUpTrashOnBackupStorageMsg'\ if\ you\ insist\ to\ migrate\ the\ image[%s] = found trashId({0}) in BackupStorage [{1}] for the migrate installPath[{2}]. Please clean it first by 'APICleanUpTrashOnBackupStorageMsg' if you insist to migrate the image[{3}]

# at: src/main/java/org/zstack/storage/migration/primary/PrimaryStorageMigrateVmJob.java:141
# args: amsg.getVmInstanceUuid(),job.getUuid()
vm[uuid\:%s]\ storage\ migration\ long\ job[uuid\:%s]\ failed\ because\ management\ node\ was\ restarted = vm[uuid:{0}] storage migration long job[uuid:{1}] failed because management node was restarted

# at: src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:584
# args: volume.getType()
The\ type\ [%s]\ of\ volume\ is\ invalid. = The type [{0}] of volume is invalid.

# at: src/main/java/org/zstack/storage/migration/primary/ceph/CephToCephMigrateVolumeFlow.java:122
# args: dstPsVO.getUuid()
all\ ceph\ mons\ are\ Disconnected\ in\ ceph\ primary\ storage[uuid\:%s] = all ceph mons are Disconnected in ceph primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:89
# args: 
cannot\ find\ any\ connected\ host\ to\ perform\ the\ storage\ migration\ operation = cannot find any connected host to perform the storage migration operation

# at: src/main/java/org/zstack/storage/migration/primary/nfs/NfsToNfsMigrateVolumeFlow.java:194
# args: imageUuid
both\ image\ %s\ and\ its\ cache\ is\ missing = both image {0} and its cache is missing

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:203
# args: 
'resourceUuid'\ and\ 'resourceType'\ must\ be\ set\ both\ or\ neither! = 'resourceUuid' and 'resourceType' must be set both or neither!

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:92
# args: 
zoneUuids,\ clusterUuids,\ primaryStorageUuids\ must\ have\ at\ least\ one\ be\ none-empty\ list,\ or\ all\ is\ set\ to\ true = zoneUuids, clusterUuids, primaryStorageUuids must have at least one be none-empty list, or all is set to true

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:114
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ not\ been\ attached\ to\ cluster[uuid\:%s]\ yet = primary storage[uuid:{0}] has not been attached to cluster[uuid:{1}] yet

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:131
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ has\ been\ attached\ to\ cluster[uuid\:%s] = primary storage[uuid:{0}] has been attached to cluster[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:146
# args: msg.getPrimaryStorageUuid(),msg.getClusterUuid()
primary\ storage[uuid\:%s]\ and\ cluster[uuid\:%s]\ are\ not\ in\ the\ same\ zone = primary storage[uuid:{0}] and cluster[uuid:{1}] are not in the same zone

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:168
# args: url
url[%s]\ has\ been\ occupied,\ it\ cannot\ be\ duplicate\ in\ same\ cluster = url[{0}] has been occupied, it cannot be duplicate in same cluster

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageApiInterceptor.java:220
# args: psUuids
primary\ storage(s)\ [uuid\:\ %s]\ where\ volume(s)\ locate\ is\ not\ Enabled\ or\ Connected = primary storage(s) [uuid: {0}] where volume(s) locate is not Enabled or Connected

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageAvoidAllocatorFlow.java:50
# args: spec.getAvoidPrimaryStorageUuids()
after\ removing\ primary\ storage%s\ to\ avoid,\ there\ is\ no\ candidate\ primary\ storage\ anymore.\ please\ check\ primary\ storage\ status\ and\ state\ in\ the\ cluster. = after removing primary storage{0} to avoid, there is no candidate primary storage anymore. please check primary storage status and state in the cluster.

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:239
# args: self.getUuid()
cannot\ attach\ ISO\ to\ a\ primary\ storage[uuid\:%s]\ which\ is\ disabled = cannot attach ISO to a primary storage[uuid:{0}] which is disabled

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:769
# args: bsUuid,self.getZoneUuid(),self.getUuid()
backup\ storage[uuid\:%s]\ is\ not\ attached\ to\ zone[uuid\:%s]\ the\ primary\ storage[uuid\:%s]\ belongs\ to = backup storage[uuid:{0}] is not attached to zone[uuid:{1}] the primary storage[uuid:{2}] belongs to

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:789
# args: volUuid,vmState
volume[uuid\:%s]\ has\ been\ attached\ a\ %s\ VM.\ VM\ should\ be\ Stopped. = volume[uuid:{0}] has been attached a {1} VM. VM should be Stopped.

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1602
# args: self.getUuid(),clusterUuidsString
primary\ storage[uuid\:%s]\ cannot\ be\ deleted\ for\ still\ being\ attached\ to\ cluster[uuid\:%s]. = primary storage[uuid:{0}] cannot be deleted for still being attached to cluster[uuid:{1}].

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageBase.java:1749
# args: volumeUuid
cannot\ attach\ volume[uuid\:%s]\ whose\ primary\ storage\ is\ Maintenance = cannot attach volume[uuid:{0}] whose primary storage is Maintenance

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageCapacityUpdater.java:283
# args: size,capacityVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ primary\ storage[uuid\:%s],\ it's\ short\ of\ available\ capacity = cannot reserve {0} bytes on the primary storage[uuid:{1}], it's short of available capacity

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageDeleteBitGC.java:45
# args: ps.getUuid(),ps.getStatus().toString()
the\ primary\ storage[uuid\:%s]\ is\ not\ in\ status\ of\ Connected,\ current\ status\ is\ %s = the primary storage[uuid:{0}] is not in status of Connected, current status is {1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageMainAllocatorFlow.java:225
# args: spec.getImageUuid()
no\ way\ to\ get\ image\ size\ of\ %s,\ report\ exception. = no way to get image size of {0}, report exception.

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:106
# args: systemTag,uuid
%s\ is\ invalid.\ %s\ is\ not\ a\ valid\ zstack\ uuid = {0} is invalid. {1} is not a valid zstack uuid

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:110
# args: resourceUuid
no\ primary\ storage[uuid\:%s]\ found = no primary storage[uuid:{0}] found

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:138
# args: msg.getUuid()
primaryStorage[uuid\=%s]\ does\ not\ exist = primaryStorage[uuid={0}] does not exist

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:492
# args: 
please\ specify\ the\ purpose\ before\ allocating\ space = please specify the purpose before allocating space

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:614
# args: errs
cannot\ find\ any\ qualified\ primary\ storage,\ errors\ are\ %s = cannot find any qualified primary storage, errors are {0}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:833
# args: cidr
cidr[%s]\ Input\ Format\ Error = cidr[{0}] Input Format Error

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:829
# args: cidrCount
only\ one\ primaryStorage\ cidr\ system\ tag\ is\ allowed,\ but\ %d\ got = only one primaryStorage cidr system tag is allowed, but {0} got

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:1186
# args: clusterUuid,msg.getClusterUuid()
clusterUuid\ conflict,\ the\ cluster\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ cluster\ specified\ in\ the\ creation\ parameter\ is\ %s = clusterUuid conflict, the cluster specified by the instance offering is {0}, and the cluster specified in the creation parameter is {1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageManagerImpl.java:1201
# args: psUuid,msg.getPrimaryStorageUuidForRootVolume()
primaryStorageUuid\ conflict,\ the\ primary\ storage\ specified\ by\ the\ instance\ offering\ is\ %s,\ and\ the\ primary\ storage\ specified\ in\ the\ creation\ parameter\ is\ %s = primaryStorageUuid conflict, the primary storage specified by the instance offering is {0}, and the primary storage specified in the creation parameter is {1}

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:127
# args: uuid
cannot\ find\ primary\ storage[uuid\:%s],\ the\ uuid\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = cannot find primary storage[uuid:{0}], the uuid is specified in instance offering or disk offering

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorExtension.java:167
# args: tag
cannot\ find\ primary\ storage\ having\ user\ tag[%s].\ The\ user\ tag\ is\ specified\ in\ instance\ offering\ or\ disk\ offering = cannot find primary storage having user tag[{0}]. The user tag is specified in instance offering or disk offering

# at: src/main/java/org/zstack/storage/primary/PrimaryStorageTagAllocatorFlow.java:85
# args: extp.getClass().getName()
PrimaryStorageTagAllocatorExtensionPoint[%s]\ returns\ zero\ primary\ storage\ candidate = PrimaryStorageTagAllocatorExtensionPoint[{0}] returns zero primary storage candidate

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1825
# args: 
not\ support = not support

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:471
# args: bsType
cannot\ find\ any\ BackupStorageKvmFactory\ for\ the\ type[%s] = cannot find any BackupStorageKvmFactory for the type[{0}]

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:670
# args: self.getUuid(),self.getName()
the\ block\ primary\ storage[uuid\:%s,\ name\:%s]\ can\ not\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = the block primary storage[uuid:{0}, name:{1}] can not find any available host in attached clusters for instantiating the volume

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1242
# args: msg.getVolumeInventory().getUuid()
fail\ to\ find\ a\ host\ to\ map\ for\ volume\ %s = fail to find a host to map for volume {0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1491
# args: 
host\ uuid\ is\ mandatory = host uuid is mandatory

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:1612
# args: msg.getDestHostUuid()
Fail\ to\ get\ host\ initiator\ ref,\ please\ reconnect\ this\ host\:%s = Fail to get host initiator ref, please reconnect this host:{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:2608
# args: msg.getPrimaryStorageUuid()
fail\ to\ find\ cluster\ for\ commit\ volume\ on\ ps\:%s = fail to find cluster for commit volume on ps:{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageBase.java:2617
# args: msg.getVolumeUuid()
fail\ to\ find\ host\ for\ commit\ volume\:%s = fail to find host for commit volume:{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:1132
# args: 
not\ support\ take\ volumes\ snapshots\ on\ multiple\ ps\ when\ including\ ceph = not support take volumes snapshots on multiple ps when including ceph

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:370
# args: context.getInventory().getUuid(),priUuid,reply.getError()
KVM\ host[uuid\:\ %s]\ fails\ to\ be\ added\ into\ local\ primary\ storage[uuid\:\ %s],\ %s = KVM host[uuid: {0}] fails to be added into local primary storage[uuid: {1}], {2}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:669
# args: volume.getUuid()
fail\ to\ find\ block\ scsi\ lun\ for\ volume\:\ %s = fail to find block scsi lun for volume: {0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:967
# args: e.getCause().toString()
fail\ to\ exchange\ block\ scsi\ lun\ info\:%s = fail to exchange block scsi lun info:{0}

# at: src/main/java/org/zstack/storage/primary/block/BlockPrimaryStorageFactory.java:1560
# args: 
currently\ block\ storage\ only\ support\ full\ mode\ backup = currently block storage only support full mode backup

# at: src/main/java/org/zstack/storage/primary/block/ImageStoreBackupStorageBlockKvmDownloader.java:143
# args: bsPath,greply.getHostname(),pinv.getUuid(),psPath,rsp.getError()
failed\ to\ download[%s]\ from\ BackupStorage[hostname\:%s]\ to\ block\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = failed to download[{0}] from BackupStorage[hostname:{1}] to block primary storage[uuid:{2}, path:{3}], {4}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:875
# args: accessZoneRsp.getDetail_err_msg()
fail\ to\ sync\ access\ zones\ because\ %s = fail to sync access zones because {0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:881
# args: queryAccessZoneSubnetRsp.getDetail_err_msg()
fail\ to\ get\ access\ zone's\ subnet\ because\ %s = fail to get access zone's subnet because {0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:893
# args: queryHostRsp.getDetail_err_msg()
fail\ to\ query\ all\ hosts,\ because\ of\ %s = fail to query all hosts, because of {0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:908
# args: ids.toString(),queryHostRsp.getDetail_err_msg()
fail\ to\ query\ hosts\ %s,\ because\ of\ %s = fail to query hosts {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:927
# args: String.valueOf(hostId),String.valueOf(hostGroupId),addHostRsp.getDetail_err_msg()
fail\ to\ add\ host\ %s\ into\ hostGroup\ %s,\ because\ of\ %s = fail to add host {0} into hostGroup {1}, because of {2}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:962
# args: String.valueOf(initiatorId)
host\ id\ is\ mandatory\ but\ get\:%s = host id is mandatory but get:{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:943
# args: String.valueOf(hostId),rsp.getDetail_err_msg()
fail\ to\ delete\ host\ %s,\ because\ of\ %s = fail to delete host {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:955
# args: String.valueOf(hostGroupId),rsp.getDetail_err_msg()
fail\ to\ delete\ host\ group\ %s,\ because\ of\ %s = fail to delete host group {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:967
# args: String.valueOf(initiatorId),rsp.getDetail_err_msg()
fail\ to\ delete\ initiator\ %s,\ because\ of\ %s = fail to delete initiator {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:975
# args: queryHostGroupRsp.getDetail_err_msg()
fail\ to\ query\ host\ group,\ because\ of\ %s = fail to query host group, because of {0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:993
# args: name,addHostGroupRsp.getDetail_err_msg()
fail\ to\ add\ host\ group\:\ %s,\ error\ message\:%s\  = fail to add host group: {0}, error message:{1} 

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1011
# args: ids.toString(),queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ \:\ %s,\ error\ message\:%s\  = fail to query lun : {0}, error message:{1} 

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1050
# args: queryPath,queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ by\ path\:\ %s,\ error\ message\:%s\  = fail to query lun by path: {0}, error message:{1} 

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1067
# args: name,serverCommonRsp.getDetail_err_msg()
fail\ to\ update\ lun\ name\:\ %s,\ error\ message\:%s\  = fail to update lun name: {0}, error message:{1} 

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1178
# args: blockScsiLunVO.getName(),serverRsp.getDetail_err_msg()
fail\ to\ create\ lun\ name\:\ %s,\ error\ message\:%s\  = fail to create lun name: {0}, error message:{1} 

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1115
# args: blockScsiLunVO.getName(),serverRsp.getDetail_err_msg()
fail\ to\ get\ created\ lun[name\:\ %s],\ error\ message\:%s\  = fail to get created lun[name: {0}], error message:{1} 

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1129
# args: blockScsiLunVO.getName()
fail\ to\ create\ lun\ name\:\ %s,\ can\ not\ find\ root\ cause = fail to create lun name: {0}, can not find root cause

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1188
# args: String.valueOf(lunId),queryLunRsp.getDetail_err_msg()
fail\ to\ query\ lun\ %s,\ because\ of\ %s = fail to query lun {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1204
# args: String.valueOf(lunId),String.valueOf(hostGroupId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ query\ lun\ map\ for\ lun\ %s\ and\ host\ group\ %s,\ because\ of\ %s = fail to query lun map for lun {0} and host group {1}, because of {2}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1225
# args: String.valueOf(hostGroupId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ query\ lun\ map\ for\ host\ group\ %s,\ because\ of\ %s = fail to query lun map for host group {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1236
# args: clusterOverviewRsp.getDetail_err_msg()
fail\ to\ get\ cluster\ info,\ because\ of\ %s = fail to get cluster info, because of {0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1259
# args: String.valueOf(lunId),String.valueOf(hostGroupId),serverRsp.getDetail_err_msg()
fail\ to\ map\ lun\ %s\ to\ host\ group\ %s,\ because\ of\ %s = fail to map lun {0} to host group {1}, because of {2}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1267
# args: String.valueOf(lunMapId)
lun\ map\ id\ is\ mandatory\ but\ get\:%s = lun map id is mandatory but get:{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1273
# args: String.valueOf(lunMapId),serverRsp.getDetail_err_msg()
fail\ to\ delete\ lun\ map\ %s,\ because\ of\ %s = fail to delete lun map {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1279
# args: String.valueOf(lunId)
lun\ id\ is\ mandatory\ but\ get\:%s = lun id is mandatory but get:{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1285
# args: String.valueOf(lunId),serverRsp.getDetail_err_msg()
fail\ to\ delete\ lun\ %s,\ because\ of\ %s = fail to delete lun {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1295
# args: String.valueOf(id),storagePoolRsp.getDetail_err_msg()
fail\ to\ get\ storage\ pool\ %s,\ because\ of\ %s = fail to get storage pool {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1308
# args: JSONObjectUtil.toJsonString(blockScsiLunVO),rsp.getDetail_err_msg()
fail\ to\ create\ snapshot\ for\ lun\ %s,\ because\ of\ %s = fail to create snapshot for lun {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1330
# args: ids.toString(),rsp.getDetail_err_msg()
fail\ to\ query\ snapshots\ %s,\ because\ of\ %s = fail to query snapshots {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1337
# args: String.valueOf(snapshotId)
snapshot\ id\ is\ mandatory\ but\ get\:%s = snapshot id is mandatory but get:{0}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1344
# args: String.valueOf(snapshotId),rsp.getDetail_err_msg()
fail\ to\ delete\ snapshot\ %s,\ because\ of\ %s = fail to delete snapshot {0}, because of {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1355
# args: String.valueOf(snapshotId),serverRsp.getDetail_err_msg()
fail\ to\ revert\ snapshot\:%s,\ because\ of\:\ %s = fail to revert snapshot:{0}, because of: {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1364
# args: String.valueOf(lunId),getLunSessionRsp.getDetail_err_msg()
fail\ to\ check\ lun\ %s\ session\ state\ ,\ because\ of\:\ %s = fail to check lun {0} session state , because of: {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1380
# args: String.valueOf(lunId),queryLunMapRsp.getDetail_err_msg()
fail\ to\ get\ lun\ %s\ maps,\ because\ of\:\ %s = fail to get lun {0} maps, because of: {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDevice.java:1402
# args: String.valueOf(lunId),lunQuantityInfoRsp.getDetail_err_msg()
fail\ to\ get\ lun\ %s\ remain\ created\ lun\ number,\ because\ of\:\ %s = fail to get lun {0} remain created lun number, because of: {1}

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:161
# args: 
lun\ map\ id\ is\ mandatory\ can\ not\ be\ null,\ neither\ 0 = lun map id is mandatory can not be null, neither 0

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:194
# args: 
lun\ id\ is\ illegal = lun id is illegal

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:527
# args: clusterOverview.getCluster_data_state(),clusterOverview.getCluster_healthy_state(),clusterOverview.getCluster_running_state()
XStor\ cluster\ is\ unhealthy,\ cluster\ info[cluster_\ data_\ state\:\ %s,\ cluster_\ healthy_\ state\:\ %s,\ cluster_\ running_\ state\:\ %s] = XStor cluster is unhealthy, cluster info[cluster_ data_ state: {0}, cluster_ healthy_ state: {1}, cluster_ running_ state: {2}]

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:555
# args: 
illegal\ lun\ id = illegal lun id

# at: src/main/java/org/zstack/storage/primary/block/vendor/xstor/XStorDeviceImpl.java:647
# args: 
fail\ to\ get\ image\ cache\ lun\ info = fail to get image cache lun info

# at: src/main/java/org/zstack/storage/primary/ceph/CephHostHeartbeatChecker.java:204
# args: targetHostUuid
host\ %s's\ heartbeat\ is\ not\ updated = host {0}'s heartbeat is not updated

# at: src/main/java/org/zstack/storage/primary/filesystem/AbstractFileSystemHostHeartbeatChecker.java:116
# args: cmd.targetHostUuid
host[uuid\:%s]'s\ heartbeat\ is\ not\ updated = host[uuid:{0}]'s heartbeat is not updated

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:120
# args: vo.getUuid()
all\ ceph\ mons\ of\ primary\ storage[uuid\:%s]\ are\ not\ in\ Connected\ state = all ceph mons of primary storage[uuid:{0}] are not in Connected state

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:164
# args: param.getPrimaryStorageUuid()
CephPrimaryStorage[%s]\ not\ existed! = CephPrimaryStorage[{0}] not existed!

# at: src/main/java/org/zstack/storage/primary/imagestore/ceph/CephPrimaryToImageStoreBackupStorageMediatorImpl.java:201
# args: licMgr.getLicenseType().toString()
current\ license[%s]\ is\ not\ valid\ license\ while\ download\ from\ imagestore\ backupstorage = current license[{0}] is not valid license while download from imagestore backupstorage

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:229
# args: 
System\ can't\ find\ imagestore\ backup\ Storage.\ Please\ do\ not\ set\ imagestore\ backup\ Storage\ server\ IP\ to\ localhost(127.*.*.*), = System can't find imagestore backup Storage. Please do not set imagestore backup Storage server IP to localhost(127.*.*.*),

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:232
# args: operationSuggestion,greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
%s\ failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = {0} failed to download bits from the imagestore backup storage[hostname:{1}, path: {2}] to the local primary storage[uuid:{3}, path: {4}], {5}

# at: src/main/java/org/zstack/storage/primary/imagestore/local/LocalStorageKvmImageStoreBackupStorageMediatorImpl.java:293
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = failed to upload bits from the local storage[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:238
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ imagestore\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ nfs\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = failed to download bits from the imagestore backup storage[hostname:{0}, path: {1}] to the nfs primary storage[uuid:{2}, path: {3}], {4}

# at: src/main/java/org/zstack/storage/primary/imagestore/nfs/NfsPrimaryToImageStoreBackupKVMBackend.java:300
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),rsp.getError()
failed\ to\ upload\ bits\ from\ the\ NFS[uuid\:%s,\ path\:%s]\ to\ image\ store\ [hostname\:%s],\ %s = failed to upload bits from the NFS[uuid:{0}, path:{1}] to image store [hostname:{2}], {3}

# at: src/main/java/org/zstack/storage/primary/imagestore/smp/KvmAgentCommandDispatcher.java:70
# args: this.primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ mount\ point\ storage[uuid\:%s]\ are\ disconnected = cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared mount point storage[uuid:{0}] are disconnected

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:52
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ no\ MonIP\ available = failed to get primaryStorage[{0}] license info, because no MonIP available

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:62
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ no\ data\ returned = failed to get primaryStorage[{0}] license info, because no data returned

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:87
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ the\ returned\ data\ does\ not\ have\ an\ active\ license = failed to get primaryStorage[{0}] license info, because the returned data does not have an active license

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:70
# args: primaryStorageUuid
failed\ to\ get\ primaryStorage[%s]\ license\ info,\ because\ expired_time\ is\ null = failed to get primaryStorage[{0}] license info, because expired_time is null

# at: src/main/java/org/zstack/storage/primary/license/XskyLicenseInfoFactory.java:76
# args: license.getExpired_time(),primaryStorageUuid
failed\ to\ parse\ the\ date\ format[%s]\ of\ the\ primaryStorage[%s]\ license\ info = failed to parse the date format[{0}] of the primaryStorage[{1}] license info

# at: src/main/java/org/zstack/storage/primary/local/AllocatePrimaryStorageForVmMigrationFlow.java:85
# args: volumeSize,spec.getVmInstance().getUuid()
no\ hosts\ can\ provide\ %s\ bytes\ for\ all\ volumes\ of\ the\ vm[uuid\:%s] = no hosts can provide {0} bytes for all volumes of the vm[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:336
# args: 
localstorage\ allocator\ failed = localstorage allocator failed

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:356
# args: 
invalid\ uri,\ correct\ example\ is\ file\://$URL;hostUuid\://$HOSTuuid\ or\ volume\://$VOLUMEuuid\  = invalid uri, correct example is file://$URL;hostUuid://$HOSTuuid or volume://$VOLUMEuuid 

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageAllocatorFactory.java:369
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = To create volume on the local primary storage, you must specify the host that the volume is going to be created using the system tag [{0}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:88
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ on\ any\ local\ primary\ storage = the volume[uuid:{0}] is not on any local primary storage

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:93
# args: msg.getVolumeUuid(),msg.getDestHostUuid()
the\ volume[uuid\:%s]\ is\ already\ on\ the\ host[uuid\:%s] = the volume[uuid:{0}] is already on the host[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:99
# args: msg.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ not\ found = the primary storage[uuid:{0}] is not found

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:103
# args: ref.getPrimaryStorageUuid()
the\ primary\ storage[uuid\:%s]\ is\ disabled\ or\ maintenance\ cold\ migrate\ is\ not\ allowed = the primary storage[uuid:{0}] is disabled or maintenance cold migrate is not allowed

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:112
# args: msg.getDestHostUuid(),ref.getPrimaryStorageUuid(),msg.getVolumeUuid()
the\ dest\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s]\ where\ the\ volume[uuid\:%s]\ locates = the dest host[uuid:{0}] doesn't belong to the local primary storage[uuid:{1}] where the volume[uuid:{2}] locates

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:118
# args: msg.getDestHostUuid(),msg.getPrimaryStorageUuid(),physicalThreshold,refVO.getAvailablePhysicalCapacity()
the\ dest\ host[uuid\:%s]\ doesn't\ have\ enough\ physical\ capacity\ due\ to\ the\ threshold\ of\ primary\ storage[uuid\:%s]\ is\ %f\ but\ available\ physical\ capacity\ is\ %d = the dest host[uuid:{0}] doesn't have enough physical capacity due to the threshold of primary storage[uuid:{1}] is {2} but available physical capacity is {3}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:125
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ Ready,\ cannot\ migrate\ it = the volume[uuid:{0}] is not in status of Ready, cannot migrate it

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:138
# args: vol.getUuid(),vol.getVmInstanceUuid(),vmstate
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ is\ in\ state\ of\ %s,\ please\ stop\ it\ before\ migration = the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm is in state of {2}, please stop it before migration

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:146
# args: vol.getUuid(),vol.getVmInstanceUuid(),count
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ %s\ data\ volumes\ attached,\ please\ detach\ them\ before\ migration = the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has {2} data volumes attached, please detach them before migration

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:151
# args: vol.getUuid(),vol.getVmInstanceUuid()
the\ volume[uuid\:%s]\ is\ the\ root\ volume\ of\ the\ vm[uuid\:%s].\ Currently\ the\ vm\ still\ has\ ISO\ attached,\ please\ detach\ it\ before\ migration = the volume[uuid:{0}] is the root volume of the vm[uuid:{1}]. Currently the vm still has ISO attached, please detach it before migration

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:176
# args: originClusterUuid,clusterUuid,vol.getVmInstanceUuid()
The\ two\ clusters[uuid\:%s,uuid\:%s]\ cannot\ access\ each\ other\ in\ l2\ network\ \ when\ migrate\ the\ vm[uuid\:%s]\ to\ another\ cluster = The two clusters[uuid:{0},uuid:{1}] cannot access each other in l2 network  when migrate the vm[uuid:{2}] to another cluster

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:130
# args: vol.getUuid(),vol.getName(),vol.getVmInstanceUuid()
the\ data\ volume[uuid\:%s,\ name\:\ %s]\ is\ still\ attached\ to\ the\ VM[uuid\:%s].\ Please\ detach\ it\ before\ migration = the data volume[uuid:{0}, name: {1}] is still attached to the VM[uuid:{2}]. Please detach it before migration

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageApiInterceptor.java:190
# args: msg.getUrl()
the\ url[%s]\ is\ not\ an\ absolute\ path\ starting\ with\ '/' = the url[{0}] is not an absolute path starting with '/'

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:262
# args: msg.getPrimaryStorageUuid()
The\ primary\ storage[uuid\:%s]\ is\ disabled\ cold\ migrate\ is\ not\ allowed = The primary storage[uuid:{0}] is disabled cold migrate is not allowed

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:540
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ not\ on\ the\ local\ storage\ anymore,it\ may\ have\ been\ deleted = volume[uuid:{0}] is not on the local storage anymore,it may have been deleted

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:1168
# args: msg.getImage().getUuid(),self.getUuid(),JSONObjectUtil.toJsonString(ret.errorCodes)
failed\ to\ download\ image[uuid\:%s]\ to\ all\ hosts\ in\ the\ local\ storage[uuid\:%s].\ %s = failed to download image[uuid:{0}] to all hosts in the local storage[uuid:{1}]. {2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:2326
# args: msg.getVolumeUuid(),self.getUuid()
unable\ to\ create\ the\ data\ volume[uuid\:\ %s]\ on\ a\ local\ primary\ storage[uuid\:%s],\ because\ the\ hostUuid\ is\ not\ specified. = unable to create the data volume[uuid: {0}] on a local primary storage[uuid:{1}], because the hostUuid is not specified.

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:2887
# args: 
No\ Host\ state\ is\ Enabled,\ Please\ check\ the\ availability\ of\ the\ host = No Host state is Enabled, Please check the availability of the host

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3018
# args: hostUuid,self.getUuid()
host[uuid\:%s]\ cannot\ access\ local\ storage[uuid\:%s],\ maybe\ it\ is\ detached = host[uuid:{0}] cannot access local storage[uuid:{1}], maybe it is detached

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3042
# args: resUuid,resourceType,self.getUuid()
resource[uuid\:%s,\ type\:\ %s]\ is\ not\ on\ the\ local\ primary\ storage[uuid\:%s] = resource[uuid:{0}, type: {1}] is not on the local primary storage[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageBase.java:3047
# args: resUuid,resourceType,self.getUuid(),ret
resource[uuid\:%s,\ type\:\ %s]\ on\ the\ local\ primary\ storage[uuid\:%s]\ maps\ to\ multiple\ hypervisor%s = resource[uuid:{0}, type: {1}] on the local primary storage[uuid:{2}] maps to multiple hypervisor{3}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:100
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,clusterUuid
There\ is\ no\ LocalStorage\ primary\ storage[state\=%s,status\=%s]\ on\ the\ cluster[%s],\ when\ the\ cluster\ mounts\ multiple\ primary\ storage,\ the\ system\ uses\ the\ local\ primary\ storage\ by\ default.\ Check\ the\ state/status\ of\ primary\ storage\ and\ make\ sure\ they\ have\ been\ attached\ to\ clusters = There is no LocalStorage primary storage[state={0},status={1}] on the cluster[{2}], when the cluster mounts multiple primary storage, the system uses the local primary storage by default. Check the state/status of primary storage and make sure they have been attached to clusters

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:119
# args: psUuid
the\ type\ of\ primary\ storage[uuid\:%s]\ chosen\ is\ not\ local\ storage,\ check\ if\ the\ resource\ can\ be\ created\ on\ other\ storage\ when\ cluster\ has\ attached\ local\ primary\ storage = the type of primary storage[uuid:{0}] chosen is not local storage, check if the resource can be created on other storage when cluster has attached local primary storage

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDefaultAllocateCapacityFlow.java:187
# args: requiredPrimaryStorageUuidForDataVolume.getUuid(),requiredPrimaryStorageUuidForDataVolume.getType(),LocalStorageConstants.LOCAL_STORAGE_TYPE
The\ cluster\ mounts\ multiple\ primary\ storage[%s(%s),\ other\ non-LocalStorage\ primary\ storage],\ primaryStorageUuidForDataVolume\ cannot\ be\ specified\ %s = The cluster mounts multiple primary storage[{0}({1}), other non-LocalStorage primary storage], primaryStorageUuidForDataVolume cannot be specified {2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:126
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ root\ disk\ is\ located = The cluster[uuid={0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the root disk is located

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageDesignatedAllocateCapacityFlow.java:132
# args: spec.getDestHost().getClusterUuid()
The\ cluster[uuid\=%s]\ mounts\ multiple\ primary\ storage[LocalStorage,\ other\ non-LocalStorage\ primary\ storage],\ You\ must\ specify\ the\ primary\ storage\ where\ the\ data\ disk\ is\ located = The cluster[uuid={0}] mounts multiple primary storage[LocalStorage, other non-LocalStorage primary storage], You must specify the primary storage where the data disk is located

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:404
# args: imageUuid,cachedHostUuids
creation\ rely\ on\ image\ cache[uuid\:%s,\ locate\ host\ uuids\:\ [%s]],\ cannot\ create\ other\ places. = creation rely on image cache[uuid:{0}, locate host uuids: [{1}]], cannot create other places.

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:462
# args: spec.getVmInventory().getHypervisorType()
local\ storage\ doesn't\ support\ live\ migration\ for\ hypervisor[%s] = local storage doesn't support live migration for hypervisor[{0}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:678
# args: volume.getUuid(),vm.getUuid(),vm.getRootVolumeUuid(),rootHost,volume.getUuid(),dataHost
cannot\ attach\ the\ data\ volume[uuid\:%s]\ to\ the\ vm[uuid\:%s].\ Both\ vm's\ root\ volume\ and\ the\ data\ volume\ are\ on\ local\ primary\ storage,\ but\ they\ are\ on\ different\ hosts.\ The\ root\ volume[uuid\:%s]\ is\ on\ the\ host[uuid\:%s]\ but\ the\ data\ volume[uuid\:\ %s]\ is\ on\ the\ host[uuid\:\ %s] = cannot attach the data volume[uuid:{0}] to the vm[uuid:{1}]. Both vm's root volume and the data volume are on local primary storage, but they are on different hosts. The root volume[uuid:{2}] is on the host[uuid:{3}] but the data volume[uuid: {4}] is on the host[uuid: {5}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:896
# args: vol.getName(),vol.getUuid(),vol.getPrimaryStorageUuid()
the\ data\ volume[name\:%s,\ uuid\:%s]\ is\ on\ the\ local\ storage[uuid\:%s];\ however,the\ host\ on\ which\ the\ data\ volume\ is\ has\ been\ deleted.\ Unable\ to\ recover\ this\ volume = the data volume[name:{0}, uuid:{1}] is on the local storage[uuid:{2}]; however,the host on which the data volume is has been deleted. Unable to recover this volume

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:938
# args: vm.getUuid(),vm.getName(),psuuid
unable\ to\ recover\ the\ vm[uuid\:%s,\ name\:%s].\ The\ vm's\ root\ volume\ is\ on\ the\ local\ storage[uuid\:%s];\ however,\ the\ host\ on\ which\ the\ root\ volume\ is\ has\ been\ deleted = unable to recover the vm[uuid:{0}, name:{1}]. The vm's root volume is on the local storage[uuid:{2}]; however, the host on which the root volume is has been deleted

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:972
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ data\ volumes\ on\ local\ storage.\ Need\ detach\ all\ data\ volumes\ first. = unable to live migrate vm[uuid:{0}] with data volumes on local storage. Need detach all data volumes first.

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:977
# args: vm.getUuid(),vm.getPlatform()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ local\ storage.\ Only\ linux\ guest\ is\ supported.\ Current\ platform\ is\ [%s] = unable to live migrate vm[uuid:{0}] with local storage. Only linux guest is supported. Current platform is [{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:982
# args: vm.getUuid()
unable\ to\ live\ migrate\ vm[uuid\:%s]\ with\ ISO\ on\ local\ storage.\ Need\ detach\ all\ ISO\ first. = unable to live migrate vm[uuid:{0}] with ISO on local storage. Need detach all ISO first.

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:1058
# args: LocalStorageSystemTags.DEST_HOST_FOR_CREATING_DATA_VOLUME.getTagFormat()
To\ create\ data\ volume\ on\ the\ local\ primary\ storage,\ you\ must\ specify\ the\ host\ that\ the\ data\ volume\ is\ going\ to\ be\ created\ using\ the\ system\ tag\ [%s] = To create data volume on the local primary storage, you must specify the host that the data volume is going to be created using the system tag [{0}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageFactory.java:1068
# args: hostUuid,msg.getPrimaryStorageUuid()
the\ host[uuid\:%s]\ doesn't\ belong\ to\ the\ local\ primary\ storage[uuid\:%s] = the host[uuid:{0}] doesn't belong to the local primary storage[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:2083
# args: 
root\ image\ has\ been\ deleted,\ cannot\ reimage\ now = root image has been deleted, cannot reimage now

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3676
# args: makeInitializedFilePath(),hostUuid
cannot\ find\ flag\ file\ [%s]\ on\ host\ [%s],\ it\ might\ not\ mount\ correct\ path = cannot find flag file [{0}] on host [{1}], it might not mount correct path

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3684
# args: makeInitializedFilePath(),hostUuid,errorCode.getCause().getDetails()
cannot\ find\ flag\ file\ [%s]\ on\ host\ [%s],\ because\:\ %s = cannot find flag file [{0}] on host [{1}], because: {2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmBackend.java:3705
# args: makeInitializedFilePath(),hostUuid,errorCode.getCause().getDetails()
cannot\ create\ flag\ file\ [%s]\ on\ host\ [%s],\ because\:\ %s = cannot create flag file [{0}] on host [{1}], because: {2}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmMigrateVmFlow.java:1192
# args: p.volume.getUuid(),p.volume.getName(),dstHostUuid
unable\ to\ create\ an\ empty\ volume[uuid\:%s,\ name\:%s]\ on\ the\ kvm\ host[uuid\:%s] = unable to create an empty volume[uuid:{0}, name:{1}] on the kvm host[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:204
# args: greply.getHostname(),backupStorageInstallPath,pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download\ bits\ from\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s]\ to\ the\ local\ primary\ storage[uuid\:%s,\ path\:\ %s],\ %s = failed to download bits from the SFTP backup storage[hostname:{0}, path: {1}] to the local primary storage[uuid:{2}, path: {3}], {4}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageKvmSftpBackupStorageMediatorImpl.java:253
# args: pinv.getUuid(),primaryStorageInstallPath,r.getHostname(),backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ the\ local\ storage[uuid\:%s,\ path\:%s]\ to\ the\ SFTP\ backup\ storage[hostname\:%s,\ path\:%s],\ %s = failed to upload bits from the local storage[uuid:{0}, path:{1}] to the SFTP backup storage[hostname:{2}, path:{3}], {4}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:159
# args: PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
no\ local\ primary\ storage\ can\ satisfy\ conditions[state\:\ %s,\ status\:\ %s]\ or\ contain\ hosts\ satisfying\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = no local primary storage can satisfy conditions[state: {0}, status: {1}] or contain hosts satisfying conditions[state: {2}, status: {3}, size > {4} bytes]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:134
# args: spec.getRequiredZoneUuid(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
no\ local\ primary\ storage\ in\ zone[uuid\:%s]\ can\ satisfy\ conditions[state\:\ %s,\ status\:\ %s]\ or\ contain\ hosts\ satisfying\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = no local primary storage in zone[uuid:{0}] can satisfy conditions[state: {1}, status: {2}] or contain hosts satisfying conditions[state: {3}, status: {4}, size > {5} bytes]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:107
# args: spec.getRequiredHostUuid(),HostState.Enabled,HostStatus.Connected,spec.getSize(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected
the\ required\ host[uuid\:%s]\ cannot\ satisfy\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes],\ or\ doesn't\ belong\ to\ a\ local\ primary\ storage\ satisfying\ conditions[state\:\ %s,\ status\:\ %s],\ or\ its\ cluster\ doesn't\ attach\ to\ any\ local\ primary\ storage = the required host[uuid:{0}] cannot satisfy conditions[state: {1}, status: {2}, size > {3} bytes], or doesn't belong to a local primary storage satisfying conditions[state: {4}, status: {5}], or its cluster doesn't attach to any local primary storage

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:79
# args: spec.getRequiredPrimaryStorageUuid(),PrimaryStorageState.Enabled,PrimaryStorageStatus.Connected,HostState.Enabled,HostStatus.Connected,spec.getSize()
required\ local\ primary\ storage[uuid\:%s]\ cannot\ satisfy\ conditions[state\:\ %s,\ status\:\ %s],\ or\ hosts\ providing\ the\ primary\ storage\ don't\ satisfy\ conditions[state\:\ %s,\ status\:\ %s,\ size\ >\ %s\ bytes] = required local primary storage[uuid:{0}] cannot satisfy conditions[state: {1}, status: {2}], or hosts providing the primary storage don't satisfy conditions[state: {3}, status: {4}, size > {5} bytes]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:201
# args: ref.getHostUuid(),physicalCapacityMgr.getRatio(ref.getPrimaryStorageUuid())
{the\ physical\ capacity\ usage\ of\ the\ host[uuid\:%s]\ has\ exceeded\ the\ threshold[%s]} = '{the physical capacity usage of the host[uuid:{0}'] has exceeded the threshold[{1}]}

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageMainAllocatorFlow.java:207
# args: 
failed\ allocate\ localstorage = failed allocate localstorage

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:205
# args: resUuid,uuid
Resource[uuid\:%s]\ can\ only\ be\ operated\ on\ host[uuid\:%s],\ but\ the\ host\ has\ been\ deleted = Resource[uuid:{0}] can only be operated on host[uuid:{1}], but the host has been deleted

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:202
# args: resUuid
cannot\ find\ any\ host\ which\ has\ resource[uuid\:%s] = cannot find any host which has resource[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/local/LocalStorageUtils.java:135
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ local\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = host[uuid: {0}] of local primary storage[uuid: {1}] doesn't have enough capacity[current: {2} bytes, needed: {3}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:82
# args: msg.getResourceUuid()
Invalid\ resourceUuid\ %s = Invalid resourceUuid {0}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:88
# args: 
primary\ storage\ uuid\ cannot\ be\ null. = primary storage uuid cannot be null.

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:105
# args: volume.getUuid(),runningVmUuids.toString()
volume[uuid\:%s]\ has\ been\ attached\ some\ VM(s)[uuid\:%s]\ which\ are\ not\ Stopped\ and\ not\ running\ on\ the\ specific\ host. = volume[uuid:{0}] has been attached some VM(s)[uuid:{1}] which are not Stopped and not running on the specific host.

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:124
# args: msg.getResourceUuid()
VM[uuid\:%s]\ are\ not\ Stopped\ and\ not\ running\ on\ the\ specific\ host. = VM[uuid:{0}] are not Stopped and not running on the specific host.

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageApiInterceptor.java:191
# args: task,hostUuids
Fail\ to\ %s,\ because\ host(s)[uuid\:%s]\ are\ not\ enable\ and\ not\ in\ connected\ status. = Fail to {0}, because host(s)[uuid:{1}] are not enable and not in connected status.

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1549
# args: self.getUuid(),hostUuid
cannot\ reserve\ enough\ space\ for\ primary\ storage[uuid\:\ %s]\ on\ host[uuid\:\ %s],\ not\ enough\ physical\ capacity = cannot reserve enough space for primary storage[uuid: {0}] on host[uuid: {1}], not enough physical capacity

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1449
# args: 
not\ supported = not supported

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:216
# args: msg.getResourceType()
ResourceType\ [%s]\ of\ APIRecoverResourceSplitBrainMsg\ is\ invalid. = ResourceType [{0}] of APIRecoverResourceSplitBrainMsg is invalid.

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:360
# args: self.getUuid(),self.getName()
the\ mini\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = the mini storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:673
# args: 
can\ not\ determine\ which\ host = can not determine which host

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1364
# args: 
no\ connected\ host\ found,\ mini\ storage\ failed = no connected host found, mini storage failed

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageBase.java:1563
# args: hostUuid,self.getUuid(),ref.getAvailableCapacity(),size
host[uuid\:\ %s]\ of\ mini\ primary\ storage[uuid\:\ %s]\ doesn't\ have\ enough\ capacity[current\:\ %s\ bytes,\ needed\:\ %s] = host[uuid: {0}] of mini primary storage[uuid: {1}] doesn't have enough capacity[current: {2} bytes, needed: {3}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageDeactivateVolumeGC.java:75
# args: hostUuid
the\ host[uuid\:%s]\ is\ not\ connected = the host[uuid:{0}] is not connected

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageFactory.java:173
# args: hvType,bsType
no\ LocalStorageBackupStorageMediator\ supporting\ hypervisor[%s]\ and\ backup\ storage\ type[%s]\  = no LocalStorageBackupStorageMediator supporting hypervisor[{0}] and backup storage type[{1}] 

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java:332
# args: volume.getRootImageUuid(),volume.getUuid()
no\ backup\ storage\ can\ get\ image[uuid\:%s]\ of\ volume[uuid\:%s] = no backup storage can get image[uuid:{0}] of volume[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmBackend.java:343
# args: image.getUuid(),cache.backupStorage.getUuid()
image[uuid\:\ %s]\ has\ no\ image\ ref\ with\ backup\ storage[uuid\:\ %s] = image[uuid: {0}] has no image ref with backup storage[uuid: {1}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:832
# args: volume.getUuid(),volume.getPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ resize\ volume[uuid\:\ %s]\ on\ mini\ storage[uuid\:\ %s] = can not find any available host to resize volume[uuid: {0}] on mini storage[uuid: {1}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:925
# args: volumeUuid
volume[uuid\:%s]\ replication\ is\ syncing\ data,\ please\ wait\ until\ it\ is\ finished. = volume[uuid:{0}] replication is syncing data, please wait until it is finished.

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageKvmFactory.java:938
# args: volumeUuid
replication\ network\ status\ of\ volume[uuid\:%s]\ run\ into\ StandAlone,\ but\ host\ are\ all\ Connected,\ please\ recover\ it\ first. = replication network status of volume[uuid:{0}] run into StandAlone, but host are all Connected, please recover it first.

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java:73
# args: dir
Invalid\ path\ string\ %s = Invalid path string {0}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStorageManagerImpl.java:80
# args: resourceUuid
Still\ cache\ volume\ exists\ on\ ps[uuid\:%s]\ can\ not\ update\ cache\ volume\ url = Still cache volume exists on ps[uuid:{0}] can not update cache volume url

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePathManagerImpl.java:115
# args: resourceUuid,hostUuid
can\ not\ find\ replication\ of\ volume\ %s\ on\ host\ %s = can not find replication of volume {0} on host {1}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:141
# args: clusterUuid,msg.getPrimaryStorageUuid(),volume.getUuid()
required\ cluster\ %s\ not\ attached\ to\ primary\ storage\ %s\ for\ volume\ %s\ create = required cluster {0} not attached to primary storage {1} for volume {2} create

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:148
# args: clusterUuid,volume.getUuid()
can\ not\ find\ avaliable\ host\ on\ required\ cluster\ %s\ for\ volume\ %s\ create = can not find avaliable host on required cluster {0} for volume {1} create

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:445
# args: primaryStorageUuid
cannot\ find\ an\ available\ host\ to\ execute\ command\ for\ primary\ storage[uuid\:\ %s] = cannot find an available host to execute command for primary storage[uuid: {0}]

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:476
# args: hostUuid
can\ not\ allocate\ storage\ sync\ port\ on\ host\ %s\:\ %s = can not allocate storage sync port on host {0}: {1}

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniStoragePlacementManagerImpl.java:622
# args: hostUuids,finalHostUuids
expect\ operate\ on\ hosts[%s]\ but\ only\ host\ %s\ are\ connected\ and\ enabled = expect operate on hosts[{0}] but only host {1} are connected and enabled

# at: src/main/java/org/zstack/storage/primary/ministorage/MiniToZBoxBackupStorageMediator.java:91
# args: msg.getPrimaryStorageUuid()
mini\ storage[uuid\:%s]\ has\ to\ be\ empty\ before\ restoring\ bits\ from\ zbox.\ please\ clean\ it\ up. = mini storage[uuid:{0}] has to be empty before restoring bits from zbox. please clean it up.

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:46
# args: url,zoneUuid
there\ has\ been\ a\ nfs\ primary\ storage\ having\ url\ as\ %s\ in\ zone[uuid\:%s] = there has been a nfs primary storage having url as {0} in zone[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:65
# args: 
found\ multiple\ CIDR = found multiple CIDR

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:78
# args: cidr
invalid\ CIDR\:\ %s = invalid CIDR: {0}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:82
# args: ipAddr,cidr
IP\ address[%s]\ is\ not\ in\ CIDR[%s] = IP address[{0}] is not in CIDR[{1}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsApiParamChecker.java:96
# args: vms.size(),StringUtils.join(vms, "\n")
there\ are\ %s\ running\ VMs\ on\ the\ NFS\ primary\ storage,\ please\ stop\ them\ and\ try\ again\:\n%s\n = there are {0} running VMs on the NFS primary storage, please stop them and try again:\n{1}\n

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:694
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state\ is\ %s = vm[uuid:{0}] is not Running, Paused or Stopped, current state is {1}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:303
# args: 
cannot\ find\ usable\ backend = cannot find usable backend

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:362
# args: 
no\ usable\ backend\ found = no usable backend found

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:520
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getSnapshot().getUuid(),msg.getSnapshot().getName()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s,\ name\:%s] = no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to snapshot[uuid:{3}, name:{4}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:551
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getRootImageUuid()
no\ host\ in\ Connected\ status\ to\ which\ nfs\ primary\ storage[uuid\:%s,\ name\:%s]\ attached\ found\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s] = no host in Connected status to which nfs primary storage[uuid:{0}, name:{1}] attached found to revert volume[uuid:{2}] to image[uuid:{3}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:737
# args: self.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ attach\ to\ any\ cluster = primary storage[uuid:{0}] doesn't attach to any cluster

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:968
# args: self.getUuid(),self.getName(),msg.getVolume().getUuid(),msg.getVolume().getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ usable\ host\ to\ create\ the\ data\ volume[uuid\:%s,\ name\:%s] = the NFS primary storage[uuid:{0}, name:{1}] cannot find any usable host to create the data volume[uuid:{2}, name:{3}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1889
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ hosts\ in\ attached\ clusters\ to\ perform\ the\ operation = the NFS primary storage[uuid:{0}, name:{1}] cannot find hosts in attached clusters to perform the operation

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorage.java:1726
# args: self.getUuid(),self.getName()
the\ NFS\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = the NFS primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:115
# args: psUuid,vmUuid,volumeUuid
the\ NFS\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = the NFS primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:281
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = cannot find a Connected host to execute command for nfs primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:272
# args: pri.getUuid()
cannot\ find\ a\ connected\ host\ in\ cluster\ which\ ps\ [uuid\:\ %s]\ attached = cannot find a connected host in cluster which ps [uuid: {0}] attached

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageFactory.java:300
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-NFS\ connection\ to\ execute\ command\ for\ nfs\ primary\ storage[uuid\:%s] = cannot find a host which has Connected host-NFS connection to execute command for nfs primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:804
# args: msg.getVolume().getUuid()
cannot\ get\ root\ image\ of\ volume[uuid\:%s],\ may\ be\ it\ create\ from\ iso = cannot get root image of volume[uuid:{0}], may be it create from iso

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:248
# args: inv.getUuid(),inv.getName(),clusterUuid,versionInCluster,otherVersion,QCOW3_QEMU_IMG_VERSION,QCOW3_QEMU_IMG_VERSION
unable\ to\ attach\ a\ primary\ storage[uuid\:%s,\ name\:%s]\ to\ cluster[uuid\:%s].\ Kvm\ host\ in\ the\ cluster\ has\ qemu-img\ with\ version[%s];\ but\ the\ primary\ storage\ has\ attached\ to\ another\ cluster\ that\ has\ kvm\ host\ which\ has\ qemu-img\ with\ version[%s].\ qemu-img\ version\ greater\ than\ %s\ is\ incompatible\ with\ versions\ less\ than\ %s,\ this\ will\ causes\ volume\ snapshot\ operation\ to\ fail.\ Please\ avoid\ attaching\ a\ primary\ storage\ to\ clusters\ that\ have\ different\ Linux\ distributions,\ in\ order\ to\ prevent\ qemu-img\ version\ mismatch = unable to attach a primary storage[uuid:{0}, name:{1}] to cluster[uuid:{2}]. Kvm host in the cluster has qemu-img with version[{3}]; but the primary storage has attached to another cluster that has kvm host which has qemu-img with version[{4}]. qemu-img version greater than {5} is incompatible with versions less than {6}, this will causes volume snapshot operation to fail. Please avoid attaching a primary storage to clusters that have different Linux distributions, in order to prevent qemu-img version mismatch

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:323
# args: cmd.getInstallUrl(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ folder[installUrl\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = unable to create folder[installUrl:{0}] on kvm host[uuid:{1}, ip:{2}], because {3}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:401
# args: inv.getUuid()
no\ host\ in\ is\ Connected\ or\ primary\ storage[uuid\:%s]\ attach\ no\ cluster = no host in is Connected or primary storage[uuid:{0}] attach no cluster

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:440
# args: psInv.getUuid(),huuid,reply.isSuccess() ? rsp.getError() : reply.getError()
failed\ to\ ping\ nfs\ primary\ storage[uuid\:%s]\ from\ host[uuid\:%s],because\ %s.\ disconnect\ this\ host-ps\ connection = failed to ping nfs primary storage[uuid:{0}] from host[uuid:{1}],because {2}. disconnect this host-ps connection

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:879
# args: msg.getHostUuid()
The\ chosen\ host[uuid\:%s]\ to\ perform\ storage\ migration\ is\ lost = The chosen host[uuid:{0}] to perform storage migration is lost

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1017
# args: installPath,inv.getUuid(),rsp.getError()
failed\ to\ check\ existence\ of\ %s\ on\ nfs\ primary\ storage[uuid\:%s],\ %s = failed to check existence of {0} on nfs primary storage[uuid:{1}], {2}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1131
# args: volume.getUuid(),volume.getName(),host.getUuid(),host.getManagementIp(),rsp.getError()
unable\ to\ create\ empty\ volume[uuid\:%s,\ \ name\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ because\ %s = unable to create empty volume[uuid:{0},  name:{1}] on kvm host[uuid:{2}, ip:{3}], because {4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1240
# args: installPath,pinv.getUuid(),rsp.getError()
failed\ to\ delete\ bits[%s]\ on\ nfs\ primary\ storage[uuid\:%s],\ %s,\ will\ clean\ up\ installPath,\ pinv.getUuid(),\ rsp.getError() = failed to delete bits[{0}] on nfs primary storage[uuid:{1}], {2}, will clean up installPath, pinv.getUuid(), rsp.getError()

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1302
# args: vol.getUuid(),sinv.getUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = failed to revert volume[uuid:{0}] to snapshot[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1339
# args: vol.getUuid(),vol.getRootImageUuid(),host.getUuid(),host.getManagementIp(),rsp.getError()
failed\ to\ revert\ volume[uuid\:%s]\ to\ image[uuid\:%s]\ on\ kvm\ host[uuid\:%s,\ ip\:%s],\ %s = failed to revert volume[uuid:{0}] to image[uuid:{1}] on kvm host[uuid:{2}, ip:{3}], {4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1383
# args: volume.getUuid(),imageCache.getImageUuid(),rsp.getError()
fails\ to\ create\ root\ volume[uuid\:%s]\ from\ cached\ image[path\:%s]\ because\ %s = fails to create root volume[uuid:{0}] from cached image[path:{1}] because {2}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryStorageKVMBackend.java:1541
# args: clusterUuid
no\ hosts\ in\ the\ cluster[uuid\:%s]\ are\ connected = no hosts in the cluster[uuid:{0}] are connected

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:109
# args: backupStorageInstallPath,greply.getHostname(),pinv.getUuid(),primaryStorageInstallPath,rsp.getError()
failed\ to\ download[%s]\ from\ SftpBackupStorage[hostname\:%s]\ to\ nfs\ primary\ storage[uuid\:%s,\ path\:%s],\ %s = failed to download[{0}] from SftpBackupStorage[hostname:{1}] to nfs primary storage[uuid:{2}, path:{3}], {4}

# at: src/main/java/org/zstack/storage/primary/nfs/NfsPrimaryToSftpBackupKVMBackend.java:165
# args: pinv.getUuid(),primaryStorageInstallPath,hostname,backupStorageInstallPath,rsp.getError()
failed\ to\ upload\ bits\ from\ nfs\ primary\ storage[uuid\:%s,\ path\:%s]\ to\ SFTP\ backup\ storage[hostname\:%s,\ path\:\ %s],\ %s = failed to upload bits from nfs primary storage[uuid:{0}, path:{1}] to SFTP backup storage[hostname:{2}, path: {3}], {4}

# at: src/main/java/org/zstack/storage/primary/shareblock/ShareBlockHostHeartbeatChecker.java:135
# args: cmd.hostUuid,sentinelHostUuid
shareblock\ says\ host\ %s\ is\ offline\ on\ %s = shareblock says host {0} is offline on {1}

# at: src/main/java/org/zstack/storage/primary/sharedblock/HaSanlockHostChecker.java:141
# args: cmd.hostIds,sentinelHostUuid
sanlock\ says\ host\ %s\ is\ offline\ on\ %s = sanlock says host {0} is offline on {1}

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:110
# args: primaryStorageUuid
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ in\ the\ clusters\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = cannot find any connected host to perform the operation, it seems all KVM hosts in the clusters attached with the shared block group storage[uuid:{0}] are disconnected

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:80
# args: 
can\ not\ find\ volume\ need\ to\ operate\ shared\ block\ group\ primary\ storage = can not find volume need to operate shared block group primary storage

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:88
# args: volumeInventory.getUuid(),primaryStorageUuid
KVM\ host\ which\ volume[uuid%s]\ attached\ disconnected\ with\ the\ shared\ block\ group\ storage[uuid\:%s] = KVM host which volume[uuid{0}] attached disconnected with the shared block group storage[uuid:{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/KvmAgentCommandDispatcher.java:98
# args: psUuid
can\ not\ find\ qualified\ kvm\ host\ for\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = can not find qualified kvm host for shared block group primary storage[uuid: {0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:81
# args: sharedBlockVO.getSharedBlockGroupUuid(),scsiLunVO.getWwid()
primary\ storage[uuid\:\ %s]\ has\ attached\ the\ scsi\ lun[wwid\:\ %s] = primary storage[uuid: {0}] has attached the scsi lun[wwid: {1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:105
# args: msg.getVmInstanceUuid()
the\ vm[uuid\:\ %s]\ does\ not\ has\ additional\ qmp\ socket,\ it\ may\ because\ of\ the\ vm\ start\ without\ the\ global\ config[vm.additionalQmp]\ enabled,\ please\ make\ sure\ it\ enabled\ and\ reboot\ vm\ in\ zstack = the vm[uuid: {0}] does not has additional qmp socket, it may because of the vm start without the global config[vm.additionalQmp] enabled, please make sure it enabled and reboot vm in zstack

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:130
# args: 
must\ specify\ at\ least\ one\ disk\ when\ add\ shared\ block\ group\ primary\ storage = must specify at least one disk when add shared block group primary storage

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:142
# args: vo.getUuid(),vo.getDiskUuid(),vo.getDescription(),vo.getSharedBlockGroupUuid()
shared\ block[uuid\:%s,\ diskUuid\:%s,\ description\:%s]\ already\ added\ to\ shared\ block\ group[uuid\:%s]in\ new\ shared\ block\ group = shared block[uuid:{0}, diskUuid:{1}, description:{2}] already added to shared block group[uuid:{3}]in new shared block group

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:165
# args: msg.getUuid()
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ can\ not\ resize = shared volume[uuid: {0}] on shared block group primary storage can not resize

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockApiInterceptor.java:234
# args: volumeUuid,notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = shared volume[uuid: {0}] on shared block group primary storage has attached to not stopped vm instances[uuids: {1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1665
# args: psUuid,imageFormat
cannot\ find\ proper\ hypervisorType\ for\ primary\ storage[uuid\:%s]\ to\ handle\ image\ format\ or\ volume\ format[%s] = cannot find proper hypervisorType for primary storage[uuid:{0}] to handle image format or volume format[{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:344
# args: self.getUuid(),self.getName()
the\ shared\ mount\ point\ primary\ storage[uuid\:%s,\ name\:%s]\ cannot\ find\ any\ available\ host\ in\ attached\ clusters\ for\ instantiating\ the\ volume = the shared mount point primary storage[uuid:{0}, name:{1}] cannot find any available host in attached clusters for instantiating the volume

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:697
# args: getSelfInventory().getUuid()
can\ not\ found\ any\ cluster\ attached\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %S] = can not found any cluster attached on shared block group primary storage[uuid: %S]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1100
# args: self.getUuid(),self.getName()
the\ shared\ block\ group\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = the shared block group primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1179
# args: self.getUuid(),self.getName()
the\ SharedBlock\ primary\ storage[uuid\:%s,\ name\:%s]\ has\ not\ attached\ to\ any\ clusters,\ or\ no\ hosts\ in\ the\ attached\ clusters\ are\ connected = the SharedBlock primary storage[uuid:{0}, name:{1}] has not attached to any clusters, or no hosts in the attached clusters are connected

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1369
# args: 
empty\ migrateVolumeStructs\ in\ migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg! = empty migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageBase.java:1375
# args: 
no\ volume\ in\ migrateVolumeStructs\ in\ migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg! = no volume in migrateVolumeStructs in migrateVolumesBetweenSharedBlockGroupPrimaryStorageMsg!

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:112
# args: newValue
the\ value[%s]\ is\ not\ power\ of\ 2 = the value[{0}] is not power of 2

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:444
# args: pri.getUuid()
cannot\ find\ an\ available\ host\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = cannot find an available host to execute command for shared block group primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:468
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ connected\ shared\ block\ to\ execute\ command\ for\ shared\ block\ group\ primary\ storage[uuid\:%s] = cannot find a host which has connected shared block to execute command for shared block group primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:515
# args: vmvo.getHostUuid(),volumeInventory.getUuid(),volumeInventory.getPrimaryStorageUuid()
the\ host[uuid\:\ %s]\ running\ on\ is\ not\ available\ to\ resize\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = the host[uuid: {0}] running on is not available to resize volume[uuid: {1}] on shared block group primary storage[uuid: {2}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:524
# args: psUuid
primary\ storage[uuid\:%s]\ not\ found = primary storage[uuid:{0}] not found

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockGroupPrimaryStorageFactory.java:541
# args: volUuid
volume[uuid\:%s]\ not\ found = volume[uuid:{0}] not found

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockImageStoreBackend.java:81
# args: volumeUuid
can\ not\ get\ cluster\ uuid\ of\ volume\ %s = can not get cluster uuid of volume {0}

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1413
# args: img.getUuid(),img.getName(),self.getZoneUuid()
the\ image[uuid\:%s,\ name\:\ %s]\ is\ not\ available\ to\ download\ on\ any\ backup\ storage\:\n1.\ check\ if\ image\ is\ in\ status\ of\ Deleted\n2.\ check\ if\ the\ backup\ storage\ on\ which\ the\ image\ is\ shown\ as\ Ready\ is\ attached\ to\ the\ zone[uuid\:%s] = the image[uuid:{0}, name: {1}] is not available to download on any backup storage:\n1. check if image is in status of Deleted\n2. check if the backup storage on which the image is shown as Ready is attached to the zone[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1251
# args: volume.getUuid(),volume.getVmInstanceUuid(),state
the\ volume[uuid;%s]\ is\ attached\ to\ a\ VM[uuid\:%s]\ which\ is\ in\ state\ of\ %s,\ cannot\ do\ the\ snapshot\ merge = the volume[uuid;{0}] is attached to a VM[uuid:{1}] which is in state of {2}, cannot do the snapshot merge

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1907
# args: clusterUuid
no\ connected\ host\ found\ in\ the\ cluster[uuid\:%s] = no connected host found in the cluster[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5893
# args: vol.getVmInstanceUuid(),state
vm[uuid\:%s]\ is\ not\ Running,\ Paused\ or\ Stopped,\ current\ state[%s] = vm[uuid:{0}] is not Running, Paused or Stopped, current state[{1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2798
# args: backupStorageUuid
cannot\ find\ backup\ storage[uuid\:%s] = cannot find backup storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2260
# args: msg.getVolumeUuid()
can\ not\ find\ volume[uuid\:\ %s] = can not find volume[uuid: {0}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:773
# args: 
shared\ volume\ not\ support\ thin\ provisioning = shared volume not support thin provisioning

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1340
# args: volume.getUuid()
not\ support\ online\ merge\ snapshot\ for\ shareable\ volume[uuid\:\ %s]\ on\ sharedblock = not support online merge snapshot for shareable volume[uuid: {0}] on sharedblock

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:1429
# args: img.getUuid(),img.getName()
the\ image[uuid\:\ %s,\ name\:%s]\ is\ not\ found\ on\ any\ backup\ storage = the image[uuid: {0}, name:{1}] is not found on any backup storage

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2043
# args: ret.firstAccessHosts.stream().map( h -> h.hostUuid).collect(Collectors.toList())
hosts[uuid\:%s]\ have\ the\ disk\ uuid\ of\ shared\ block,\ but\ actually\ different\ storage. = hosts[uuid:{0}] have the disk uuid of shared block, but actually different storage.

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2400
# args: 
not\ support\ convert\ thin\ volume\ to\ thick\ volume\ yet = not support convert thin volume to thick volume yet

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:2453
# args: 
expected\ status\ is\ %s\ and\ current\ status = expected status is {0} and current status

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3409
# args: spec.getVmInventory().getUuid(),String.join(",", psUuids)
VM[uuid\:%s]\ has\ multiple\ ISOs\ from\ different\ primary\ storage\:\ %s = VM[uuid:{0}] has multiple ISOs from different primary storage: {1}

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:3584
# args: volume.getUuid()
QCow2\ shared\ volume[uuid\:%s]\ is\ not\ supported = QCow2 shared volume[uuid:{0}] is not supported

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4650
# args: msg.getVolumeUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ take\ snapshot\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s] = can not find any available host to take snapshot for volume[uuid: {0}] on shared block group primary storage[uuid: {1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4708
# args: msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ hosts\ both\ connect\ to\ primary\ storage[uuid\:\ %s]\ and\ primary\ storage[uuid\:\ %s] = can not find hosts both connect to primary storage[uuid: {0}] and primary storage[uuid: {1}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4663
# args: 
only\ support\ full = only support full

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4691
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ volume[uuid\:\ %s]\ between\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = can not find any available host to migrate volume[uuid: {0}] between shared block group primary storage[uuid: {1}] and [uuid: {2}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4700
# args: msg.getMigrateVolumeStructs().get(0).volumeUuid,msg.getTargetPrimaryStorageUuid(),msg.getTargetPrimaryStorageUuid()
can\ not\ find\ any\ available\ host\ to\ migrate\ for\ volume[uuid\:\ %s]\ on\ shared\ block\ group\ primary\ storage[uuid\:\ %s]\ and\ [uuid\:\ %s] = can not find any available host to migrate for volume[uuid: {0}] on shared block group primary storage[uuid: {1}] and [uuid: {2}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4753
# args: msg.getPrimaryStorageUuid()
cannot\ find\ any\ connected\ host\ to\ perform\ the\ operation,\ it\ seems\ all\ KVM\ hosts\ attached\ with\ the\ shared\ block\ group\ storage[uuid\:%s]\ are\ disconnected = cannot find any connected host to perform the operation, it seems all KVM hosts attached with the shared block group storage[uuid:{0}] are disconnected

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:4971
# args: snapshotVO.getUuid(),volumeVO.getUuid()
cannot\ shrink\ snapshot\ %s,\ because\ volume\ %s\ not\ ready = cannot shrink snapshot {0}, because volume {1} not ready

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5147
# args: snapshotVO.getUuid(),instanceVO.getUuid()
cannot\ shrink\ snapshot\ %s,\ beacuse\ vm\ %s\ not\ in\ Running/Stopped\ state = cannot shrink snapshot {0}, beacuse vm {1} not in Running/Stopped state

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5394
# args: vmVolumesStruct.vmInstanceVO.getUuid()
get\ null\ install\ path\ in\ snapshot\ for\ vm\ %s = get null install path in snapshot for vm {0}

# at: src/main/java/org/zstack/storage/primary/sharedblock/SharedBlockKvmBackend.java:5707
# args: msg.getDstPath(),msg.getVolume().getUuid()
dest\ path\ %s\ not\ belong\ to\ volume\ %s\ any\ snapshot = dest path {0} not belong to volume {1} any snapshot

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkCancelMigrateVolumeFlow.java:33
# args: 
migrate\ volume\ without\ snapshot\ on\ shared\ block\ is\ not\ support\ to\ cancel. = migrate volume without snapshot on shared block is not support to cancel.

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:131
# args: reply1.getTrashId(),dstPsUuid,dstVolumeFolderPath,reply1.getResourceUuid()
found\ trashId(%s)\ in\ PrimaryStorage\ [%s]\ for\ the\ migrate\ installPath[%s].\ Please\ clean\ it\ first\ by\ 'APICleanUpTrashOnPrimaryStorageMsg'\ if\ you\ insist\ to\ migrate\ the\ volume[%s] = found trashId({0}) in PrimaryStorage [{1}] for the migrate installPath[{2}]. Please clean it first by 'APICleanUpTrashOnPrimaryStorageMsg' if you insist to migrate the volume[{3}]

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:271
# args: volumeUuid,volumeVO.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = there are not enough capacity for volume[uuid: {0}] storage migration, required capacity: {1}, current available physical capacity: {2}

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:202
# args: imageUuid,zoneUuid,zoneUuid
cannot\ find\ the\ image[uuid\:%s]\ in\ any\ connected\ backup\ storage\ attached\ to\ the\ zone[uuid\:%s].\ check\ below\:\n1.\ whether\ the\ backup\ storage\ is\ attached\ to\ the\ zone[uuid\:%s]\n2.\ whether\ the\ backup\ storage\ is\ in\ connected\ status;\ try\ to\ reconnect\ it\ if\ not = cannot find the image[uuid:{0}] in any connected backup storage attached to the zone[uuid:{1}]. check below:\n1. whether the backup storage is attached to the zone[uuid:{2}]\n2. whether the backup storage is in connected status; try to reconnect it if not

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkMigrateVolumeFlow.java:225
# args: image.getUuid(),volumeUuid,image.getActualSize(),dstPsInv.getAvailablePhysicalCapacity()
there\ are\ not\ enough\ capacity\ for\ image[uuid\:\ %s]\ download\ while\ volume[uuid\:\ %s]\ storage\ migration,\ required\ capacity\:\ %s,\ current\ available\ physical\ capacity\:\ %s = there are not enough capacity for image[uuid: {0}] download while volume[uuid: {1}] storage migration, required capacity: {2}, current available physical capacity: {3}

# at: src/main/java/org/zstack/storage/primary/sharedblock/migration/SblkToSblkRollbackMigrateVolumeFlow.java:70
# args: srcPsUuid
data\ on\ source\ ps[uuid\:\ %s]\ has\ been\ discarded,\ not\ support\ rollback = data on source ps[uuid: {0}] has been discarded, not support rollback

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2415
# args: cmd.volumeUuid,msg.getVolume().getInstallPath(),cmd.srcDir
why\ volume[uuid\:%s,\ installPath\:%s]\ not\ in\ directory\ %s = why volume[uuid:{0}, installPath:{1}] not in directory {2}

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2184
# args: ret.firstAccessHostUuids
hosts[uuid\:%s]\ have\ the\ same\ mount\ path,\ but\ actually\ mount\ different\ storage. = hosts[uuid:{0}] have the same mount path, but actually mount different storage.

# at: src/main/java/org/zstack/storage/primary/smp/KvmBackend.java:2372
# args: msg.getHostUuid(),msg.getPrimaryStorageUuid()
host[uuid\:%s]\ might\ mount\ storage\ which\ is\ different\ from\ SMP[uuid\:%s],\ please\ check\ it = host[uuid:{0}] might mount storage which is different from SMP[uuid:{1}], please check it

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:1139
# args: volumeUuid,infos.toString()
volume[uuid\:%s]\ has\ reference\ volume[%s],\ can\ not\ change\ volume\ type\ before\ flatten\ them\ and\ their\ descendants = volume[uuid:{0}] has reference volume[{1}], can not change volume type before flatten them and their descendants

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageBase.java:597
# args: 
not\ supported\ operation = not supported operation

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:109
# args: psUuid,vmUuid,volumeUuid
the\ SMP\ primary\ storage[uuid\:%s]\ is\ not\ attached\ to\ any\ clusters,\ and\ cannot\ expunge\ the\ root\ volume[uuid\:%s]\ of\ the\ VM[uuid\:%s] = the SMP primary storage[uuid:{0}] is not attached to any clusters, and cannot expunge the root volume[uuid:{1}] of the VM[uuid:{2}]

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:303
# args: pri.getUuid()
cannot\ find\ a\ Connected\ host\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = cannot find a Connected host to execute command for smp primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/smp/SMPPrimaryStorageFactory.java:323
# args: pri.getUuid()
cannot\ find\ a\ host\ which\ has\ Connected\ host-SMP\ connection\ to\ execute\ command\ for\ smp\ primary\ storage[uuid\:%s] = cannot find a host which has Connected host-SMP connection to execute command for smp primary storage[uuid:{0}]

# at: src/main/java/org/zstack/storage/primary/smp/SharedMountPointApiInterceptor.java:25
# args: 
\ the\ url\ contains\ an\ invalid\ folder[/dev\ or\ /proc\ or\ /sys] =  the url contains an invalid folder[/dev or /proc or /sys]

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:96
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ not\ exists. = failed to cancel deletion job. Volume[uuid:{0}] not exists.

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:100
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ not\ attached\ to\ any\ vm,\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = failed to cancel deletion job. Volume[uuid:{0}] not attached to any vm, offline snapshot deletion do not support cancel.

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:106
# args: 
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ attached\ vm\ not\ exists,\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = failed to cancel deletion job. Volume[uuid:{0}] attached vm not exists, offline snapshot deletion do not support cancel.

# at: src/main/java/org/zstack/storage/snapshot/DeleteVolumeSnapshotLongJob.java:111
# args: VmInstanceState.Running
failed\ to\ cancel\ deletion\ job.\ Volume[uuid\:%s]\ attached\ vm\ not\ in\ state\ %s\ offline\ snapshot\ deletion\ do\ not\ support\ cancel. = failed to cancel deletion job. Volume[uuid:{0}] attached vm not in state {1} offline snapshot deletion do not support cancel.

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:100
# args: disabledSnapshotUuids
volume\ snapshot[uuids\:%s]\ is\ in\ state\ Disabled,\ cannot\ revert\ volume\ to\ it = volume snapshot[uuids:{0}] is in state Disabled, cannot revert volume to it

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:121
# args: VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Can\ not\ take\ memory\ snapshot,\ expected\ vm\ states\ are\ [%s,\ %s] = Can not take memory snapshot, expected vm states are [{0}, {1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:188
# args: msg.getUuid(),state
volume\ snapshot[uuid\:%s]\ is\ in\ state\ %s,\ cannot\ revert\ volume\ to\ it = volume snapshot[uuid:{0}] is in state {1}, cannot revert volume to it

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:193
# args: msg.getUuid()
original\ volume\ for\ snapshot[uuid\:%s]\ has\ been\ deleted,\ cannot\ revert\ volume\ to\ it = original volume for snapshot[uuid:{0}] has been deleted, cannot revert volume to it

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:211
# args: msg.getVolumeUuid(),snapshotVO.getVolumeUuid()
not\ support\ delete\ snapshots\ on\ different\ volumes[uuid\:\ %s,\ %s] = not support delete snapshots on different volumes[uuid: {0}, {1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotApiInterceptor.java:215
# args: msg.getUuids()
can\ not\ find\ volume\ uuid\ for\ snapshosts[uuid\:\ %s] = can not find volume uuid for snapshosts[uuid: {0}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:834
# args: PrimaryStorageGlobalConfig.RESERVED_CAPACITY.value(),volumeSize
after\ subtracting\ reserved\ capacity[%s],\ there\ is\ no\ primary\ storage\ having\ required\ size[%s\ bytes],\ may\ be\ the\ threshold\ of\ primary\ storage\ physical\ capacity\ setting\ is\ lower = after subtracting reserved capacity[{0}], there is no primary storage having required size[{1} bytes], may be the threshold of primary storage physical capacity setting is lower

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:617
# args: maxIncrementalSnapshotNum,vo.getVolumeUuid()
Unsupported\ maximum\ snapshot\ number\ (%d)\ for\ volume\ [uuid\:%s] = Unsupported maximum snapshot number ({0}) for volume [uuid:{1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1044
# args: primaryStorageUuid,vol.getUuid()
primary\ storage[uuid\:%s]\ doesn't\ support\ volume\ snapshot;\ cannot\ create\ snapshot\ for\ volume[uuid\:%s] = primary storage[uuid:{0}] doesn't support volume snapshot; cannot create snapshot for volume[uuid:{1}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1010
# args: vol.getPrimaryStorageUuid()
cannot\ find\ type\ for\ primaryStorage\ [%s] = cannot find type for primaryStorage [{0}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1107
# args: uuid
cannot\ find\ snapshot\:\ %s = cannot find snapshot: {0}

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotManagerImpl.java:1176
# args: msg.getResourceType()
this\ resource\ type\ %s\ does\ not\ support\ querying\ memory\ snapshot\ references = this resource type {0} does not support querying memory snapshot references

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:162
# args: currentRoot.getUuid(),currentRoot.getName()
cannot\ find\ volume\ snapshot[uuid\:%s,\ name\:%s],\ it\ may\ have\ been\ deleted\ by\ previous\ operation = cannot find volume snapshot[uuid:{0}, name:{1}], it may have been deleted by previous operation

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:418
# args: refVolUuids
snapshot\ or\ its\ desendant\ has\ reference\ volume[uuids\:%s] = snapshot or its desendant has reference volume[uuids:{0}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1004
# args: failSnapshot.getUuid(),failSnapshot.getName(),evt
failed\ to\ change\ status\ of\ volume\ snapshot[uuid\:%s,\ name\:%s]\ by\ status\ event[%s] = failed to change status of volume snapshot[uuid:{0}, name:{1}] by status event[{2}]

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:1847
# args: volumeInventory.getUuid(),currentRoot.getUuid(),vmUuid,state
unable\ to\ reset\ volume[uuid\:%s]\ to\ snapshot[uuid\:%s],\ the\ vm[uuid\:%s]\ volume\ attached\ to\ is\ not\ in\ Stopped\ state,\ current\ state\ is\ %s = unable to reset volume[uuid:{0}] to snapshot[uuid:{1}], the vm[uuid:{2}] volume attached to is not in Stopped state, current state is {3}

# at: src/main/java/org/zstack/storage/snapshot/VolumeSnapshotTreeBase.java:2228
# args: currentRoot.getUuid()
current\ snapshot\:%s\ is\ not\ latest\ snapshot,\ cannot\ mark\ as\ volume = current snapshot:{0} is not latest snapshot, cannot mark as volume

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupBase.java:282
# args: ext.getArchiveBundleCanonicalName()
no\ bundle\ found\ for\ type\:%s = no bundle found for type:{0}

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:89
# args: String.join(", ", deletedSnapshotInfos)
snapshot(s)\ %s\ in\ the\ group\ has\ been\ deleted,\ can\ only\ revert\ one\ by\ one. = snapshot(s) {0} in the group has been deleted, can only revert one by one.

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:93
# args: String.join(", ", detachedVolInfos)
volume(s)\ %s\ is\ no\ longer\ attached,\ can\ only\ revert\ one\ by\ one.\ If\ you\ need\ to\ group\ revert,\ please\ re-attach\ it. = volume(s) {0} is no longer attached, can only revert one by one. If you need to group revert, please re-attach it.

# at: src/main/java/org/zstack/storage/snapshot/group/VolumeSnapshotGroupChecker.java:101
# args: volInfos
new\ volume(s)\ %s\ attached\ after\ snapshot\ point,\ can\ only\ revert\ one\ by\ one.\ If\ you\ need\ to\ group\ revert,\ please\ detach\ it. = new volume(s) {0} attached after snapshot point, can only revert one by one. If you need to group revert, please detach it.

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:292
# args: 
Can't\ attach\ volume\ to\ VM,\ no\ qualified\ cluster = Can't attach volume to VM, no qualified cluster

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:407
# args: psUuid,msg.getPrimaryStorageUuid()
primaryStorageUuid\ conflict,\ the\ primary\ storage\ specified\ by\ the\ disk\ offering\ is\ %s,\ and\ the\ primary\ storage\ specified\ in\ the\ creation\ parameter\ is\ %s = primaryStorageUuid conflict, the primary storage specified by the disk offering is {0}, and the primary storage specified in the creation parameter is {1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:156
# args: vol.getUuid(),vol.getStatus()
volume[uuid\:%s]\ is\ not\ in\ status\ Ready,\ current\ is\ %s,\ can't\ create\ snapshot = volume[uuid:{0}] is not in status Ready, current is {1}, can't create snapshot

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:126
# args: msg.getVolumeUuid(),type
volume[uuid\:%s,\ type\:%s],\ can't\ create\ snapshot = volume[uuid:{0}, type:{1}], can't create snapshot

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:131
# args: msg.getVolumeUuid(),state
volume[uuid\:%s]\ is\ not\ in\ state\ Enabled,\ current\ is\ %s,\ can't\ create\ snapshot = volume[uuid:{0}] is not in state Enabled, current is {1}, can't create snapshot

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:150
# args: vmvo.getState().toString(),VmInstanceState.Running.toString(),VmInstanceState.Paused.toString()
Can\ not\ take\ memory\ snapshot,\ vm\ current\ state[%s],\ but\ expect\ state\ are\ [%s,\ %s] = Can not take memory snapshot, vm current state[{0}], but expect state are [{1}, {2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:183
# args: msg.getVolumeUuid()
the\ volume[uuid\:%s]\ is\ not\ in\ status\ of\ deleted.\ This\ is\ operation\ is\ to\ recover\ a\ deleted\ data\ volume = the volume[uuid:{0}] is not in status of deleted. This is operation is to recover a deleted data volume

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:319
# args: vol.getUuid()
the\ volume[uuid\:%s]\ is\ in\ status\ of\ deleted,\ cannot\ do\ the\ operation = the volume[uuid:{0}] is in status of deleted, cannot do the operation

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:201
# args: msg.getImageUuid(),ImageMediaType.DataVolumeTemplate,type
image[uuid\:%s]\ is\ not\ %s,\ it's\ %s = image[uuid:{0}] is not {1}, it's {2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:205
# args: img.getUuid(),img.getState()
image[uuid\:%s]\ is\ not\ Enabled,\ it's\ %s = image[uuid:{0}] is not Enabled, it's {1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:209
# args: img.getUuid(),img.getStatus()
image[uuid\:%s]\ is\ not\ Ready,\ it's\ %s = image[uuid:{0}] is not Ready, it's {1}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:221
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ Root\ volume,\ can\ not\ be\ attach\ to\ vm = volume[uuid:{0}] is Root volume, can not be attach to vm

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:228
# args: msg.getVolumeUuid(),state,VolumeState.Enabled
volume[uuid\:%s]\ is\ in\ state[%s],\ data\ volume\ can\ only\ be\ attached\ when\ state\ is\ %s = volume[uuid:{0}] is in state[{1}], data volume can only be attached when state is {2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:233
# args: msg.getVolumeUuid(),status,VolumeStatus.Ready,VolumeStatus.NotInstantiated
volume[uuid\:%s]\ is\ in\ status[%s],\ data\ volume\ can\ only\ be\ attached\ when\ status\ is\ %s\ or\ %S = volume[uuid:{0}] is in status[{1}], data volume can only be attached when status is {2} or %S

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:240
# args: msg.getVolumeUuid()
data\ volume[uuid\:%s]\ is\ not\ attached\ to\ any\ vm,\ can't\ detach = data volume[uuid:{0}] is not attached to any vm, can't detach

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:244
# args: msg.getVolumeUuid()
to\ detach\ shareable\ data\ volume[uuid\:%s],\ vm\ uuid\ is\ needed. = to detach shareable data volume[uuid:{0}], vm uuid is needed.

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:249
# args: vol.getUuid(),vol.getName(),vol.getType()
the\ volume[uuid\:%s,\ name\:%s,\ type\:%s]\ can't\ detach\ it = the volume[uuid:{0}, name:{1}, type:{2}] can't detach it

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:305
# args: msg.getVmInstanceUuid(),msg.getVolumeUuid()
the\ vm[uuid\:%s]\ doesn't\ support\ to\ online\ attach\ volume[%s]\ on\ the\ basis\ of\ that\ the\ image\ platform\ type\ of\ the\ vm\ is\ other\  = the vm[uuid:{0}] doesn't support to online attach volume[{1}] on the basis of that the image platform type of the vm is other 

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:310
# args: vol.getUuid(),vol.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ Root\ Volume,\ can't\ attach\ it = the volume[uuid:{0}, name:{1}] is Root Volume, can't attach it

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:315
# args: vol.getUuid()
data\ volume[uuid\:%s]\ is\ Disabled,\ can't\ attach = data volume[uuid:{0}] is Disabled, can't attach

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:323
# args: vol.getUuid()
data\ volume[uuid\:%s]\ has\ been\ attached\ to\ some\ vm,\ can't\ attach\ again = data volume[uuid:{0}] has been attached to some vm, can't attach again

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:328
# args: VolumeStatus.Ready,VolumeStatus.NotInstantiated,vol.getStatus()
data\ volume\ can\ only\ be\ attached\ when\ status\ is\ [%s,\ %s],\ current\ is\ %s = data volume can only be attached when status is [{0}, {1}], current is {2}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:336
# args: vol.getUuid(),vol.getFormat(),hvTypes,msg.getVmInstanceUuid(),hvType
data\ volume[uuid\:%s]\ has\ format[%s]\ that\ can\ only\ be\ attached\ to\ hypervisor[%s],\ but\ vm[uuid\:%s]\ has\ hypervisor\ type[%s].\ Can't\ attach = data volume[uuid:{0}] has format[{1}] that can only be attached to hypervisor[{2}], but vm[uuid:{3}] has hypervisor type[{4}]. Can't attach

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:349
# args: hvType,maxDataVolumeNum,count,msg.getVmInstanceUuid()
hypervisor[%s]\ only\ allows\ max\ %s\ data\ volumes\ to\ be\ attached\ to\ a\ single\ vm;\ there\ have\ been\ %s\ data\ volumes\ attached\ to\ vm[uuid\:%s] = hypervisor[{0}] only allows max {1} data volumes to be attached to a single vm; there have been {2} data volumes attached to vm[uuid:{3}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:367
# args: hostUuid,vol.getPrimaryStorageUuid()
Can\ not\ attach\ volume\ to\ vm\ runs\ on\ host[uuid\:\ %s]\ which\ is\ disconnected\ with\ volume's\ storage[uuid\:\ %s] = Can not attach volume to vm runs on host[uuid: {0}] which is disconnected with volume's storage[uuid: {1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:378
# args: msg.getUuid()
it's\ not\ allowed\ to\ backup\ root\ volume,\ uuid\:%s = it's not allowed to backup root volume, uuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:387
# args: 
unexpected\ disk\ size\ settings = unexpected disk size settings

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:427
# args: msg.getVolumeUuid(),type
volume[uuid\:%s,\ type\:%s]\ can't\ be\ deleted = volume[uuid:{0}, type:{1}] can't be deleted

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:432
# args: msg.getVolumeUuid()
volume[uuid\:%s]\ is\ already\ in\ status\ of\ deleted = volume[uuid:{0}] is already in status of deleted

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:438
# args: msg.getVolumeUuid(),hostUuid
can\ not\ delete\ volume[%s],\ because\ volume\ attach\ to\ host[%s] = can not delete volume[{0}], because volume attach to host[{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:453
# args: msg.getUuid()
it's\ not\ allowed\ to\ change\ state\ of\ root\ volume,\ uuid\:%s = it's not allowed to change state of root volume, uuid:{0}

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:461
# args: msg.getVolumeUuid(),hostUuid
can\ not\ change\ volume[%s]\ state,\ because\ volume\ attach\ to\ host[%s] = can not change volume[{0}] state, because volume attach to host[{1}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:469
# args: msg.getVolumeUuid(),msg.getHostUuid(),hostStatus
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ host[status\:%s]\ is\ not\ connected = can not attach volume[{0}] to host[{1}], because host[status:{2}] is not connected

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:474
# args: 
mount\ path\ must\ be\ absolute\ path = mount path must be absolute path

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:491
# args: msg.getVolumeUuid(),msg.getHostUuid(),hostUuid
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ volume\ is\ attaching\ to\ host[%s] = can not attach volume[{0}] to host[{1}], because volume is attaching to host[{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:495
# args: msg.getVolumeUuid(),msg.getHostUuid(),msg.getVolumeUuid(),mountPath,hostUuid
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ the\ volume[%s]\ occupies\ the\ mount\ path[%s]\ on\ host[%s] = can not attach volume[{0}] to host[{1}], because the volume[{2}] occupies the mount path[{3}] on host[{4}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:505
# args: msg.getVolumeUuid(),msg.getHostUuid(),msg.getMountPath()
can\ not\ attach\ volume[%s]\ to\ host[%s],\ because\ the\ another\ volume\ occupies\ the\ mount\ path[%s] = can not attach volume[{0}] to host[{1}], because the another volume occupies the mount path[{2}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:512
# args: msg.getVolumeUuid()
can\ not\ detach\ volume[%s]\ from\ host.\ it\ may\ have\ been\ detached = can not detach volume[{0}] from host. it may have been detached

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:520
# args: msg.getVolumeUuid()
cannot\ flatten\ a\ shareable\ volume[uuid\:%s] = cannot flatten a shareable volume[uuid:{0}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:531
# args: msg.getUuid()
can\ not\ found\ in\ used\ snapshot\ tree\ of\ volume[uuid\:\ %s] = can not found in used snapshot tree of volume[uuid: {0}]

# at: src/main/java/org/zstack/storage/volume/VolumeApiInterceptor.java:541
# args: 
cannot\ undo\ not\ latest\ snapshot = cannot undo not latest snapshot

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:200
# args: self.getRootImageUuid()
cannot\ find\ image\ cache[imageUuid\:\ %s]\ for\ reinit\ volume = cannot find image cache[imageUuid: {0}] for reinit volume

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:843
# args: self.getUuid(),self.getName()
the\ volume[uuid\:%s,\ name\:%s]\ is\ not\ deleted\ yet,\ can't\ expunge\ it = the volume[uuid:{0}, name:{1}] is not deleted yet, can't expunge it

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:1780
# args: 
volume[uuid%s]\ should\ be\ attached. = volume[uuid{0}] should be attached.

# at: src/main/java/org/zstack/storage/volume/VolumeBase.java:1866
# args: 
only\ support\ detached\ volume,\ use\ SetVmBootVolumeMsg\ instead. = only support detached volume, use SetVmBootVolumeMsg instead.

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:166
# args: msg.getPrimaryStorageUuid()
get\ primaryStorage\ %s\ type\ failed = get primaryStorage {0} type failed

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:170
# args: psType
primaryStorage\ type\ [%s]\ not\ support\ shared\ volume\ yet = primaryStorage type [{0}] not support shared volume yet

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:296
# args: template.getUuid(),template.getName()
the\ image[uuid\:%s,\ name\:%s]\ has\ been\ deleted\ on\ all\ backup\ storage = the image[uuid:{0}, name:{1}] has been deleted on all backup storage

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:313
# args: template.getUuid(),msg.getPrimaryStorageUuid()
cannot\ find\ a\ backup\ storage\ on\ which\ the\ image[uuid\:%s]\ is\ that\ satisfies\ all\ conditions\ of\:\ 1.\ has\ state\ Enabled\ 2.\ has\ status\ Connected.\ 3\ has\ attached\ to\ zone\ in\ which\ primary\ storage[uuid\:%s]\ is = cannot find a backup storage on which the image[uuid:{0}] is that satisfies all conditions of: 1. has state Enabled 2. has status Connected. 3 has attached to zone in which primary storage[uuid:{1}] is

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:868
# args: 
target\ volume\ is\ expunged\ during\ volume\ creation = target volume is expunged during volume creation

# at: src/main/java/org/zstack/storage/volume/VolumeManagerImpl.java:1106
# args: VolumeFactory.class.getSimpleName()
there\ should\ not\ be\ more\ than\ one\ %s\ implementation. = there should not be more than one {0} implementation.

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:231
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ root\ volume = volume[uuid:{0}] is not root volume

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:95
# args: IOTHREAD_QEMU_VERSION,qemuVersion,finalHostUuid
iothread\ need\ qemu\ version\ >\=\ %s,\ but\ %s\ on\ host[%s]. = iothread need qemu version >= {0}, but {1} on host[{2}].

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:103
# args: IOTHREAD_LIBVIRT_VERSION,libvirtVersion,finalHostUuid
iothread\ need\ libvirt\ version\ >\=\ %s,\ but\ %s\ on\ host[%s]. = iothread need libvirt version >= {0}, but {1} on host[{2}].

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:108
# args: msg.getVolumeUuid()
root\ volume[%s]\ cannot\ set\ iothreadpin. = root volume[{0}] cannot set iothreadpin.

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:115
# args: msg.getIoThreadId(),msg.getVolumeUuid(),pinInfo[0]
current\ iothread\ id[%s]\ is\ not\ the\ same\ as\ attached\ vol[%s]\ iothread[%s]. = current iothread id[{0}] is not the same as attached vol[{1}] iothread[{2}].

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:131
# args: msg.getUuid()
snapshot\ validation\ is\ unsupported\ for\ volume[uuid\:\ %s].\ Volume\ should\ be\ attached\ to\ vm = snapshot validation is unsupported for volume[uuid: {0}]. Volume should be attached to vm

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:139
# args: msg.getUuid(),VmInstanceState.Running,VmInstanceState.Paused
snapshot\ validation\ is\ unsupported\ for\ volume[uuid\:\ %s].\ Attached\ vm\ is\ not\ in\ state\ of\ [%s,\ %s] = snapshot validation is unsupported for volume[uuid: {0}]. Attached vm is not in state of [{1}, {2}]

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:149
# args: volumeUuid
volume[uuid\:%s]\ can\ not\ found = volume[uuid:{0}] can not found

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:156
# args: volumeUuid,volumeVOS.get(0).getUuid(),volumeVO.getVmInstanceUuid(),volumeVOS.get(0).getVmInstanceUuid()
not\ support\ take\ snapshots\ volume[uuid\:%s,\ uuid\:%s]\ on\ different\ vms[uuid\:%s,\ uuid\:%s] = not support take snapshots volume[uuid:{0}, uuid:{1}] on different vms[uuid:{2}, uuid:{3}]

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:163
# args: volumeUuid
volume[uuid\:%s]\ is\ not\ ready = volume[uuid:{0}] is not ready

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:178
# args: vmInstanceVO.getUuid(),vmInstanceVO.getState()
state\ of\ vm[uuid\:\ %s]\ is\ %s,\ not\ allowed\ to\ take\ snapshots = state of vm[uuid: {0}] is {1}, not allowed to take snapshots

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:188
# args: msg.getUuid()
volume[uuid\:%s]\ is\ not\ data\ volume = volume[uuid:{0}] is not data volume

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:198
# args: msg.getVolumeUuid()
can\ not\ resize\ volume[%s],\ because\ volume\ state\ is\ Disabled = can not resize volume[{0}], because volume state is Disabled

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:212
# args: 
At\ least\ one\ of\ vmInstanceUuid\ or\ uuid\ should\ be\ set = At least one of vmInstanceUuid or uuid should be set

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:227
# args: msg.getUuid(),msg.getVmInstanceUuid()
no\ volume[uuid\:%s,\ vmInstanceUuid\:%s]\ can\ be\ found = no volume[uuid:{0}, vmInstanceUuid:{1}] can be found

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:245
# args: 
SharedVolume\ cannot\ be\ set\ bandwidth. = SharedVolume cannot be set bandwidth.

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:254
# args: 
Cannot\ set\ legacy\ params\ and\ new\ params\ at\ the\ same\ time. = Cannot set legacy params and new params at the same time.

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:259
# args: 
Cannot\ set\ the\ read/write\ and\ the\ total\ IOPS\ limits\ at\ the\ same\ time. = Cannot set the read/write and the total IOPS limits at the same time.

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:264
# args: 
Cannot\ set\ the\ read/write\ and\ the\ total\ bandwidth\ limits\ at\ the\ same\ time. = Cannot set the read/write and the total bandwidth limits at the same time.

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:273
# args: 
The\ volume\ bandwidth\ cannot\ be\ null,\ must\ give\ a\ volume\ bandwidth\ value. = The volume bandwidth cannot be null, must give a volume bandwidth value.

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:284
# args: vo.getType(),vo.getUuid()
Cannot\ shrink\ [%s]\ volume[uuid\:%s]'s\ size = Cannot shrink [{0}] volume[uuid:{1}]'s size

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:291
# args: 
Minimum\ increase\ size\ should\ be\ larger\ than\ 4MB = Minimum increase size should be larger than 4MB

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:315
# args: 
Expansion\ operation\ not\ allowed\ at\ all\ host\ disable = Expansion operation not allowed at all host disable

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:302
# args: 
Expansion\ operation\ not\ allowed\ at\ host\ disable = Expansion operation not allowed at host disable

# at: src/main/java/org/zstack/storage/volume/VolumeMevocoApiInterceptor.java:341
# args: vo.getUuid(),notStoppedVmUuids
shared\ volume[uuid\:\ %s]\ has\ attached\ to\ not\ stopped\ vm\ instances[uuids\:\ %s] = shared volume[uuid: {0}] has attached to not stopped vm instances[uuids: {1}]

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:79
# args: msg.getResourceType()
no\ resource\ type[%s]\ found\ in\ tag\ system = no resource type[{0}] found in tag system

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:102
# args: msg.getUuid()
tag[uuid\:%s]\ is\ an\ inherent\ system\ tag,\ can\ not\ be\ removed = tag[uuid:{0}] is an inherent system tag, can not be removed

# at: src/main/java/org/zstack/tag/TagApiInterceptor.java:128
# args: 
The\ argument\ \:'resourceType'\ doesn't\ match\ uuid = The argument :'resourceType' doesn't match uuid

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:239
# args: tag,type,resourceType,resourceUuid
Duplicated\ Tag[tag\:%s,\ type\:%s,\ resourceType\:%s,\ resourceUuid\:%s] = Duplicated Tag[tag:{0}, type:{1}, resourceType:{2}, resourceUuid:{3}]

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:755
# args: tag,resourceType
no\ system\ tag\ matches[%s]\ for\ resourceType[%s] = no system tag matches[{0}] for resourceType[{1}]

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:761
# args: tag,resourceType
validate\ system\ tag\ [%s]\ for\ resourceType[%s]\ failed = validate system tag [{0}] for resourceType[{1}] failed

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:944
# args: tag
no\ system\ tag\ matches\ %s = no system tag matches {0}

# at: src/main/java/org/zstack/tag/TagManagerImpl.java:979
# args: tag
tag[%s]\ is\ only\ for\ admin = tag[{0}] is only for admin

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:162
# args: invalidUuids,expectAccountUuid
resource[uuids\:%s]\ is\ not\ owned\ by\ account[uuid\:%s] = resource[uuids:{0}] is not owned by account[uuid:{1}]

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:85
# args: 
cannot\ update\ simple\ tag\ pattern\ format = cannot update simple tag pattern format

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:83
# args: 
you\ can\ only\ update\ token\ name = you can only update token name

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:95
# args: 
simple\ tag\ pattern\ has\ no\ tokens = simple tag pattern has no tokens

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:122
# args: sub
illegal\ tag\ uuids\ %s,\ tag\ type\ must\ be\ simple, = illegal tag uuids {0}, tag type must be simple,

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:133
# args: color
Invalid\ color\ specification[%s],\ must\ like\ #FF00FF = Invalid color specification[{0}], must like #FF00FF

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:139
# args: format
Get\ format[%s],\ format\ must\ like\ that\ name\:\:{tokenName1}\:\:{tokenName2}\ ...\ \:\:{tokenNameN}\ or\ {tokenName1}\:\:{tokenName2}\ ...\ \:\:{tokenNameN}\ Name\ cannot\ contain\ '{}\:' = Get format[{0}], format must like that name::'{tokenName1}'::'{tokenName2}' ... ::'{tokenNameN}' or '{tokenName1}'::'{tokenName2}' ... ::'{tokenNameN}' Name cannot contain ''{}':'

# at: src/main/java/org/zstack/tag2/Tag2ApiInterceptor.java:151
# args: formatTokens
all\ tokens\ %s\ must\ be\ specify = all tokens {0} must be specify

# at: src/main/java/org/zstack/tag2/TagPatternBase.java:185
# args: resourceUuid,attachedCount
resource[uuid\:%s]\ has\ been\ attached\ %d\ tags,\ cannot\ attach\ any\ more = resource[uuid:{0}] has been attached {1} tags, cannot attach any more

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:79
# args: msg.getTemplateUuid()
unable\ to\ find\ any\ TemplateConfigs\:\ [templateUuid\:\ %s] = unable to find any TemplateConfigs: [templateUuid: {0}]

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:151
# args: msg.getTemplateUuid()
Unable\ to\ find\ any\ TemplateConfigs\:\ [templateUuid\:\ %s] = Unable to find any TemplateConfigs: [templateUuid: {0}]

# at: src/main/java/org/zstack/templateConfig/TemplateConfigFacadeImpl.java:128
# args: msg.getCategory(),msg.getName(),msg.getTemplateUuid()
Unable\ to\ find\ TemplateConfig[category\:\ %s,\ name\:\ %s,\ templateUuid\:\ %s] = Unable to find TemplateConfig[category: {0}, name: {1}, templateUuid: {2}]

# at: src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java:123
# args: algType
illegal\ argument\ %s = illegal argument {0}

# at: src/main/java/org/zstack/testlib/premium/crypto/EncryptDriverSimulator.java:136
# args: 
failed\ to\ decrypt\ data = failed to decrypt data

# at: src/main/java/org/zstack/testlib/premium/crypto/SecurityMachineSimulator.java:399
# args: e.getMessage(),cipherText
failed\ to\ parse\ MS\ envelope\:\ %s,\ %s = failed to parse MS envelope: {0}, {1}

# at: src/main/java/org/zstack/ticket/TicketBase.java:235
# args: self.getUuid(),self.getName(),self.getStatus()
ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ updated\ after\ being\ cancelled,\ current\ status\ is\ %s = ticket[uuid:{0}, name:{1}] can only be updated after being cancelled, current status is {2}

# at: src/main/java/org/zstack/ticket/TicketBase.java:299
# args: operator.operatorUuid
operation\ denied.\ the\ operator\ needs\ to\ be\ done\ by\ account/virtual\ ID[uuid\:%s] = operation denied. the operator needs to be done by account/virtual ID[uuid:{0}]

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:97
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ invalid,\ contact\ admin\ to\ correct\ it = Ticket flow collection[uuid:{0}] is invalid, contact admin to correct it

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:102
# args: msg.getFlowCollectionUuid()
Ticket\ flow\ collection[uuid\:%s]\ is\ disable,\ can\ not\ be\ used = Ticket flow collection[uuid:{0}] is disable, can not be used

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:68
# args: msg.getAccountSystemType()
no\ accountSystemType[%s]\ defined\ in\ system = no accountSystemType[{0}] defined in system

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:74
# args: 
not\ matched\ ticket\ type\ found = not matched ticket type found

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:90
# args: msg.getFlowCollectionUuid(),ticketTypeUuid
Ticket\ flow\ collection[uuid\:%s]\ not\ matches\ ticket\ type[uuid\:%s] = Ticket flow collection[uuid:{0}] not matches ticket type[uuid:{1}]

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:83
# args: 
no\ matched\ ticket\ flow\ collection\ or\ no\ default\ ticket\ flow\ collection\ found,\ you\ must\ specify\ the\ flowCollectionUuid\ or\ create\ a\ default\ ticket\ flow\ collection\ in\ system = no matched ticket flow collection or no default ticket flow collection found, you must specify the flowCollectionUuid or create a default ticket flow collection in system

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:110
# args: req.apiName
invalid\ request.\ no\ API[%s]\ found = invalid request. no API[{0}] found

# at: src/main/java/org/zstack/ticket/api/TicketApiInterceptor.java:118
# args: clz,e.getMessage()
invalid\ request,\ cannot\ create\ API[%s]\ from\ apiBody,\ %s = invalid request, cannot create API[{0}] from apiBody, {1}

# at: src/main/java/org/zstack/ticket/entity/TicketStatus.java:48
# args: this,event
operation\ denied.\ the\ ticket\ is\ in\ status\ of\ %s,\ cannot\ do\ the\ operation[%s] = operation denied. the ticket is in status of {0}, cannot do the operation[{1}]

# at: src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java:43
# args: request.apiName
No\ api\ class[name\:%s]\ is\ found = No api class[name:{0}] is found

# at: src/main/java/org/zstack/ticket/executor/DefaultSingletonRequestExecutor.java:70
# args: exception.getMessage()
failed\ to\ get\ value\ from\ event\:\ %s = failed to get value from event: {0}

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:44
# args: ctx.getVirtualIDUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ ticket\ submitter[uuid\:%s]\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = operation denied because the ticket submitter[uuid:{0}] has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:49
# args: ctx.getProjectUuid(),self.getUuid(),self.getName()
operation\ denied\ because\ the\ project[uuid\:%s]\ of\ the\ ticket\ has\ been\ deleted,\ the\ ticket[uuid\:%s,\ name\:%s]\ can\ only\ be\ deleted\ now = operation denied because the project[uuid:{0}] of the ticket has been deleted, the ticket[uuid:{1}, name:{2}] can only be deleted now

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:61
# args: 
operation\ denied\ because\ flow\ collection[uuid\:%s]\ it\ not\ belong\ the\ project[uuid\:%s] = operation denied because flow collection[uuid:{0}] it not belong the project[uuid:{1}]

# at: src/main/java/org/zstack/ticket/iam2/IAM2Ticket.java:73
# args: msg.getSession().getUserUuid(),self.getUuid(),self.getName()
the\ virtual\ ID[uuid\:%s]\ is\ not\ the\ owner\ of\ the\ ticket[uuid\:%s,\ name\:%s] = the virtual ID[uuid:{0}] is not the owner of the ticket[uuid:{1}, name:{2}]

# at: src/main/java/org/zstack/ticket/iam2/IAM2TicketManager.java:194
# args: 
approver\ is\ removed\ from\ project\ or\ deleted,\ flow\ collection\ changed\ to\ invalid,\ reject\ this\ ticket = approver is removed from project or deleted, flow collection changed to invalid, reject this ticket

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:117
# args: 
at\ least\ one\ flow\ is\ needed\ for\ create\ flow\ collection = at least one flow is needed for create flow collection

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:124
# args: flow.approverTitle,approveTitles
wrong\ approver\ title\ %s,\ valid\ value\ is\ %s = wrong approver title {0}, valid value is {1}

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:140
# args: flow.approverUuid
can\ not\ find\ IAM2VirtualIDVO[uuid\:%s] = can not find IAM2VirtualIDVO[uuid:{0}]

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:62
# args: 
name\ is\ needed\ when\ create\ a\ flow = name is needed when create a flow

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:79
# args: 
one\ ticket\ type\ can\ only\ have\ one\ matches\ flow\ collection = one ticket type can only have one matches flow collection

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:102
# args: 
admin\ or\ iam2\ operation\ is\ required\ as\ approver\ of\ the\ last\ flow = admin or iam2 operation is required as approver of the last flow

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:128
# args: 
name\ cannot\ be\ null = name cannot be null

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:132
# args: 
approverUuid\ cannot\ be\ null = approverUuid cannot be null

# at: src/main/java/org/zstack/ticket/iam2/api/IAM2TicketApiInterceptor.java:147
# args: flow.approverUuid,projectUuid
virtual\ id[uuid\:%s]\ not\ belong\ to\ project[uuid\:%s] = virtual id[uuid:{0}] not belong to project[uuid:{1}]

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationIAM2Backend.java:42
# args: loginType
Unsupported\ AccountType：%s = Unsupported AccountType：{0}

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:124
# args: 
two\ factor\ authenticator\ is\ not\ enabled = two factor authenticator is not enabled

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:484
# args: 
two\ factor\ authentication\ failed\ because\ there\ is\ no\ system\ tags\ in\ msg = two factor authentication failed because there is no system tags in msg

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:490
# args: 
two\ factor\ authentication\ failed\ because\ there\ is\ no\ token\ in\ msg\ system\ tag = two factor authentication failed because there is no token in msg system tag

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:497
# args: loginContext.getLoginBackendType(),info.getUserUuid()
two\ factor\ authentication\ failed\ because\ there\ is\ no\ secret\ for\ %s\:%s = two factor authentication failed because there is no secret for {0}:{1}

# at: src/main/java/org/zstack/twoFactorAuthentication/TwoFactorAuthenticationManagerImpl.java:507
# args: 
failed\ to\ verify\ two\ factor\ authentication\ code = failed to verify two factor authentication code

# at: src/main/java/org/zstack/upgrade/UpgradeManagerImpl.java:148
# args: msg.getClass().getName()
Operation\ [%s]\ is\ forbidden\ during\ grayscale\ upgrade = Operation [{0}] is forbidden during grayscale upgrade

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:267
# args: usbInv.getHostUuid()
host[%s]\ has\ started\ more\ than\ 64\ usb\ redirect\ port = host[{0}] has started more than 64 usb redirect port

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:272
# args: host.getUuid()
unable\ to\ start\ usb\ server\ on\ host[%s],\ because\ host\ is\ not\ connected = unable to start usb server on host[{0}], because host is not connected

# at: src/main/java/org/zstack/usbDevice/KvmUsbDeviceBackend/UsbDeviceKvmBackend.java:294
# args: usbInv.getHostUuid()
failed\ to\ start\ usbredirect\ server\ from\ host[uuid\:%s] = failed to start usbredirect server from host[uuid:{0}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceAllocatorFactory.java:83
# args: 
no\ candidate\ host\ with\ the\ usb\ device\ have\ enough\ cpu\ /\ memory\ or\ Enabled/Connected\ status = no candidate host with the usb device have enough cpu / memory or Enabled/Connected status

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:60
# args: msg.getClass().getSimpleName()
%s\ can\ only\ be\ called\ by\ admin\ account = {0} can only be called by admin account

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:98
# args: UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 1.0\ devices\ to\ one\ vm\ instance. = You can attach at most {0} USB 1.0 devices to one vm instance.

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:107
# args: UsbDeviceConstants.MAX_USB_2_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 2.0\ devices\ to\ one\ vm\ instance. = You can attach at most {0} USB 2.0 devices to one vm instance.

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:116
# args: UsbDeviceConstants.MAX_USB_1_DEVICE_PER_VM
You\ can\ attach\ at\ most\ %s\ USB\ 3.0\ devices\ to\ one\ vm\ instance. = You can attach at most {0} USB 3.0 devices to one vm instance.

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:127
# args: msg.getUsbDeviceUuid(),usb.getVmInstanceUuid()
the\ usb\ device[uuid\:%s]\ has\ already\ been\ attached\ to\ another\ vm[uuid\:%s] = the usb device[uuid:{0}] has already been attached to another vm[uuid:{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:134
# args: msg.getUsbDeviceUuid(),UsbDeviceState.Enabled
the\ usb\ device[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s = the usb device[uuid:{0}] is not in attachable state of {1}

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:142
# args: msg.getVmInstanceUuid(),allowedVmInstanceAttachableState
the\ vm\ instance[uuid\:%s]\ is\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = the vm instance[uuid:{0}] is not in attachable state of {1} for usb device

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:152
# args: usb.getHostUuid(),msg.getUsbDeviceUuid(),HostState.Enabled,HostStatus.Connected
the\ host\ that\ the\ usb\ device[uuid\:%s]\ pluged\ in\ is\ not\ in\ valid\ state[%s]\ or\ status[%s] = the host that the usb device[uuid:{0}] pluged in is not in valid state[{1}] or status[{2}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:165
# args: usb.getUuid(),vm.getUuid()
the\ usb\ device[uuid\:%s]\ has\ different\ hostUuid\ than\ devices\ that\ already\ attached\ to\ the\ vm\ instance[uuid\:%s] = the usb device[uuid:{0}] has different hostUuid than devices that already attached to the vm instance[uuid:{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:177
# args: usb.getUuid()
the\ usb\ device[uuid\:%s]\ is\ not\ attached\ to\ any\ vm\ instance. = the usb device[uuid:{0}] is not attached to any vm instance.

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:185
# args: usb.getUuid(),allowedVmInstanceDetachableState
the\ vm\ instance\ that\ the\ usb\ device[uuid\:%s]\ is\ attached\ to\ is\ not\ in\ detachable\ state\ of\ %s = the vm instance that the usb device[uuid:{0}] is attached to is not in detachable state of {1}

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:195
# args: vm.getUuid(),allowedVmInstanceAttachableState
vm\ instance[uuid\:%s]\ not\ in\ attachable\ state\ of\ %s\ for\ usb\ device = vm instance[uuid:{0}] not in attachable state of {1} for usb device

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:206
# args: msg.getUuid()
cannot\ disable\ usb\ device[uuid\:%s]\ when\ it's\ attached\ to\ a\ vm\ instance = cannot disable usb device[uuid:{0}] when it's attached to a vm instance

# at: src/main/java/org/zstack/usbDevice/UsbDeviceApiInterceptor.java:218
# args: VmInstanceUuid
please\ umount\ all\ usb\ devices\ of\ the\ vm[%s]\ and\ try\ again = please umount all usb devices of the vm[{0}] and try again

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:795
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ pci\ devices\ attached = cannot migrate vm[uuid:{0}] because there are pci devices attached

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:164
# args: msg.getUsbDeviceUuid(),usb.getVmInstanceUuid()
the\ usb\ device[uuid\:%s]\ has\ already\ been\ attached\ to\ vm[uuid\:%s] = the usb device[uuid:{0}] has already been attached to vm[uuid:{1}]

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:181
# args: 
PassThrough\ only\ support\ use\ on\ vm\ running\ host = PassThrough only support use on vm running host

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:198
# args: msg.getUsbDeviceUuid(),msg.getVmInstanceUuid()
cannot\ attach\ the\ usb\ device[uuid\:%s]\ to\ vm[uuid\:%s],\ possibly\ reasons\ include\:\ the\ device\ is\ not\ enabled\ or\ had\ been\ attached\ to\ a\ vm,\ or\ the\ device\ and\ the\ vm\ are\ not\ on\ same\ host. = cannot attach the usb device[uuid:{0}] to vm[uuid:{1}], possibly reasons include: the device is not enabled or had been attached to a vm, or the device and the vm are not on same host.

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:558
# args: deviceVO.getVmInstanceUuid()
usb\ is\ already\ bound\ to\ vm[uuid\:%s]\ and\ cannot\ be\ bound\ to\ other\ vm = usb is already bound to vm[uuid:{0}] and cannot be bound to other vm

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:731
# args: msg.getVmInstanceUuid()
vm[%s]\ cannot\ start\ because\ usb\ redirect\ host\ is\ not\ connected = vm[{0}] cannot start because usb redirect host is not connected

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:744
# args: msg.getVmInstanceUuid()
cannot\ migrate\ vm[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached\ by\ passthrough = cannot migrate vm[uuid:{0}] because there are usb devices attached by passthrough

# at: src/main/java/org/zstack/usbDevice/UsbDeviceManager.java:777
# args: msg.getVolumeUuid()
cannot\ migrate\ root\ volume[uuid\:%s]\ because\ there\ are\ usb\ devices\ attached = cannot migrate root volume[uuid:{0}] because there are usb devices attached

# at: src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:43
# args: 
not\ the\ time\ to\ clean = not the time to clean

# at: src/main/java/org/zstack/v2v/CleanConversionVolumeCacheGC.java:48
# args: conversionHost.getUuid(),conversionHost.getHostUuid()
conversionHost[uuid\:%s,\ hostUuid\:%s]\ is\ not\ Connected = conversionHost[uuid:{0}, hostUuid:{1}] is not Connected

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:91
# args: hostUuid,psUuid
waiting\ host[uuid\:%s]\ and\ primaryStorage[uuid\:%s]\ Connected... = waiting host[uuid:{0}] and primaryStorage[uuid:{1}] Connected...

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:149
# args: hostUuid
host[uuid\:%s]\ is\ not\ Connected = host[uuid:{0}] is not Connected

# at: src/main/java/org/zstack/v2v/ConvertVmFromForeignHypervisorJob.java:153
# args: primaryStorageUuid
primaryStorage[uuid%s]\ is\ not\ Connected = primaryStorage[uuid{0}] is not Connected

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:186
# args: duplicateMac.get()
Not\ allowed\ same\ mac\ [%s] = Not allowed same mac [{0}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:205
# args: duplicateElements.get(0)
Can't\ add\ same\ uuid\ in\ the\ l3Network,uuid\:\ %s = Can't add same uuid in the l3Network,uuid: {0}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:217
# args: l3Uuid
l3Network[uuid\:%s]\ is\ Disabled,\ can\ not\ create\ vm\ on\ it = l3Network[uuid:{0}] is Disabled, can not create vm on it

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:220
# args: l3Uuid
l3Network[uuid\:%s]\ is\ system\ network,\ can\ not\ create\ user\ vm\ on\ it = l3Network[uuid:{0}] is system network, can not create user vm on it

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:252
# args: msg.getZoneUuid()
zone[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = zone[uuid:{0}] is specified but it's Disabled, can not create vm from it

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:262
# args: msg.getClusterUuid()
cluster[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = cluster[uuid:{0}] is specified but it's Disabled, can not create vm from it

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:273
# args: msg.getHostUuid()
host[uuid\:%s]\ is\ specified\ but\ it's\ Disabled,\ can\ not\ create\ vm\ from\ it = host[uuid:{0}] is specified but it's Disabled, can not create vm from it

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:278
# args: msg.getHostUuid(),connectionState
host[uuid\:%s]\ is\ specified\ but\ it's\ connection\ status\ is\ %s,\ can\ not\ create\ vm\ from\ it = host[uuid:{0}] is specified but it's connection status is {1}, can not create vm from it

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:234
# args: msg.getDefaultL3NetworkUuid(),msg.getL3NetworkUuids()
defaultL3NetworkUuid[uuid\:%s]\ is\ not\ in\ l3NetworkUuids%s = defaultL3NetworkUuid[uuid:{0}] is not in l3NetworkUuids{1}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:230
# args: 
there\ are\ more\ than\ one\ L3\ network\ specified\ in\ l3NetworkUuids,\ but\ defaultL3NetworkUuid\ is\ null = there are more than one L3 network specified in l3NetworkUuids, but defaultL3NetworkUuid is null

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:84
# args: msg.getHostUuid()
the\ status\ of\ host[uuid\:%s]\ must\ be\ Connected = the status of host[uuid:{0}] must be Connected

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:97
# args: 
v2v\ conversion\ host\ storage\ path\ must\ be\ absolute\ path = v2v conversion host storage path must be absolute path

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:120
# args: msg.getUrl()
invalid\ v2v\ url\:\ %s = invalid v2v url: {0}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:131
# args: srcVmUuid
vm\ instance[uuid\:%s]\ does\ not\ exist\ or\ is\ not\ a\ vmware\ vm = vm instance[uuid:{0}] does not exist or is not a vmware vm

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:138
# args: 
conversionHostUuid\ should\ not\ be\ null = conversionHostUuid should not be null

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:148
# args: msg.getConversionHostUuid()
underlying\ host\ of\ conversion\ host[uuid\:%s]\ should\ be\ Connected = underlying host of conversion host[uuid:{0}] should be Connected

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:164
# args: msg.getConversionHostUuid(),msg.getPrimaryStorageUuid()
conversion\ host[uuid\:%s]\ cannot\ connect\ to\ primary\ storage[uuid\:%s] = conversion host[uuid:{0}] cannot connect to primary storage[uuid:{1}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:197
# args: duplicateMacs
Duplicate\ mac\ address\ %s = Duplicate mac address {0}

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:289
# args: msg.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ is\ not\ supported\ for\ v2v = primary storage[uuid:{0}] is not supported for v2v

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:292
# args: msg.getPrimaryStorageUuid()
primary\ storage[uuid\:%s]\ is\ neither\ Enabled\ nor\ Connected = primary storage[uuid:{0}] is neither Enabled nor Connected

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:302
# args: msg.getVolumeUuid(),msg.getHostUuid()
there\ are\ some\ v2v\ jobs\ in\ progress.\ can\ not\ attach\ volume[%s]\ to\ host[%s] = there are some v2v jobs in progress. can not attach volume[{0}] to host[{1}]

# at: src/main/java/org/zstack/v2v/V2VApiInterceptor.java:313
# args: msg.getVolumeUuid(),msg.getHostUuid()
there\ are\ some\ v2v\ jobs\ in\ progress.\ can\ not\ detach\ volume[%s]\ from\ host[%s] = there are some v2v jobs in progress. can not detach volume[{0}] from host[{1}]

# at: src/main/java/org/zstack/v2v/V2VConversionHostCapacityUpdater.java:98
# args: reserveSize,conversionHostVO.getUuid()
cannot\ reserve\ %s\ bytes\ on\ the\ conversion\ host[uuid\:%s],\ it's\ short\ of\ available\ capacity = cannot reserve {0} bytes on the conversion host[uuid:{1}], it's short of available capacity

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:597
# args: l3Uuid
Unable\ to\ find\ L3Network[uuid\:%s]\ to\ start\ the\ current\ vm,\ it\ may\ have\ been\ deleted,\ Operation\ suggestion\:\ delete\ this\ vm,\ recreate\ a\ new\ vm = Unable to find L3Network[uuid:{0}] to start the current vm, it may have been deleted, Operation suggestion: delete this vm, recreate a new vm

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1207
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ is\ not\ a\ number = invalid network bandwidth[{0}], it is not a number

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1204
# args: 
networkInboundBandwidth\ execeds\ the\ max\ value\ 32G\ bps = networkInboundBandwidth execeds the max value 32G bps

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:661
# args: msg.getUrl(),msg.getType()
can\ not\ find\ factory\ for\ src\ vm[url\:%s,\ v2vType\:%s] = can not find factory for src vm[url:{0}, v2vType:{1}]

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:921
# args: msg.getHostUuid()
there\ has\ been\ a\ v2v\ conversion\ host\ with\ hostUuid\ %s = there has been a v2v conversion host with hostUuid {0}

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1196
# args: 
invalid\ v2v\ qos\ systemtag = invalid v2v qos systemtag

# at: src/main/java/org/zstack/v2v/V2VManagerImpl.java:1202
# args: bandwidth
invalid\ network\ bandwidth[%s],\ it\ must\ be\ greater\ than\ or\ equal\ to\ 1048576 = invalid network bandwidth[{0}], it must be greater than or equal to 1048576

# at: src/main/java/org/zstack/v2v/V2VMsgTranslator.java:118
# args: srcVmUrl
can\ not\ find\ type\ for\ src\ vm[url\:%s] = can not find type for src vm[url:{0}]

# at: src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java:890
# args: 
missing\ VM\ uuid\ in\ 'srcVmUrl' = missing VM uuid in 'srcVmUrl'

# at: src/main/java/org/zstack/v2v/kvm/KVMV2VBase.java:956
# args: srcVmUuid
No\ root\ volume\ found\ for\ VM\:\ %s = No root volume found for VM: {0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1575
# args: cidr,hostUuid
there\ is\ no\ available\ ip\ found\ in\ cidr\ %s\ on\ host\ %s,\ try\ reconnect\ host\ to\ refresh\ ips = there is no available ip found in cidr {0} on host {1}, try reconnect host to refresh ips

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:190
# args: job.getUuid()
v2v\ job[uuid\:%s]\ is\ running = v2v job[uuid:{0}] is running

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:808
# args: srcVmUrl
failed\ to\ get\ virt-v2v\ uri\ for\ %s = failed to get virt-v2v uri for {0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1007
# args: urlBuilder.toString()
Failed\ to\ parse\ url\ %s = Failed to parse url {0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VBase.java:1288
# args: NOT_SUPPORTED_SPECIAL_CHARACTER
Target\ vm\ name\ can\ not\ contain\ those\ characters\ %s = Target vm name can not contain those characters {0}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java:120
# args: jobUuid,msg.getUrl()
There\ is\ already\ a\ long\ job[uuid\:%s]\ convert\ vm\ from\ %s = There is already a long job[uuid:{0}] convert vm from {1}

# at: src/main/java/org/zstack/v2v/vmware/VMwareV2VFactory.java:145
# args: 
Failed\ to\ update\ conversion\ host\ dependency = Failed to update conversion host dependency

# at: src/main/java/org/zstack/vmware/ESXHost.java:155
# args: 
host\ is\ not\ connected = host is not connected

# at: src/main/java/org/zstack/vmware/ESXHost.java:244
# args: self.getvCenterUuid()
Syncing\ with\ VCenter[uuid\:%s],\ please\ try\ again\ later. = Syncing with VCenter[uuid:{0}], please try again later.

# at: src/main/java/org/zstack/vmware/ESXHost.java:359
# args: vmUuid,self.getUuid()
vmUuid\ [%s]\ not\ found\ in\ ESX\ host\ [%s] = vmUuid [{0}] not found in ESX host [{1}]

# at: src/main/java/org/zstack/vmware/ESXHost.java:709
# args: vmUuid
VM\ not\ found\:\ %s = VM not found: {0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:635
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ suspend\ VM\ [%s]\:\ %s = failed to suspend VM [{0}]: {1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:631
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ suspend\ VM,\ task\ status\:\ %s = failed to suspend VM, task status: {0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:670
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ resume\ VM\ [%s]\:\ %s = failed to resume VM [{0}]: {1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:666
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ resume\ VM,\ task\ status\:\ %s = failed to resume VM, task status: {0}

# at: src/main/java/org/zstack/vmware/ESXHost.java:740
# args: vmUuid,VMwareHelper.exStr(ex)
failed\ to\ shutdown\ guest\:\ %s,\ %s = failed to shutdown guest: {0}, {1}

# at: src/main/java/org/zstack/vmware/ESXHost.java:1370
# args: vmInv.getInstanceOfferingUuid()
instance\ uuid\ [%s]\ not\ found = instance uuid [{0}] not found

# at: src/main/java/org/zstack/vmware/ESXHost.java:1380
# args: vmInv.getImageUuid()
Image\ [%s]\ not\ found = Image [{0}] not found

# at: src/main/java/org/zstack/vmware/ESXHost.java:1479
# args: vmUuid
VM\ [%s]\ not\ found\ in\ vCenter = VM [{0}] not found in vCenter

# at: src/main/java/org/zstack/vmware/ESXHost.java:1654
# args: t.getTaskInfo().getError().getLocalizedMessage()
failed\ to\ power\ on\ VM,\ task\ status\:\ %s = failed to power on VM, task status: {0}

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:122
# args: msg.getDriverType()
Nic\ driver\ %s\ not\ support\ yet = Nic driver {0} not support yet

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:67
# args: msg.getUuid(),vCenterVersion
console\ password\ is\ not\ supported\ by\ vm[uuid\:%s]\ on\ vCenter[version\:%s] = console password is not supported by vm[uuid:{0}] on vCenter[version:{1}]

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:73
# args: 
vCenter\ login\ name\ expected. = vCenter login name expected.

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:77
# args: msg.getDomainName()
domainName[%s]\ is\ neither\ an\ IPv4\ address\ nor\ a\ valid\ hostname = domainName[{0}] is neither an IPv4 address nor a valid hostname

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:83
# args: msg.getDomainName()
vCenter\ [domainName\:%s]\ has\ been\ added = vCenter [domainName:{0}] has been added

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:139
# args: clusterUuid,l2uuid
Cluster[uuid\:%s]\ and\ L2[uuid\:%s]\ belongs\ to\ different\ DCs = Cluster[uuid:{0}] and L2[uuid:{1}] belongs to different DCs

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:151
# args: clusterUuid
No\ hosts\ found\ within\ cluster\:\ %s = No hosts found within cluster: {0}

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:184
# args: phyinf,phyinf
vSwitch/dvSwitch\ not\ found\:\ %s,\ or\ vSwitch\:\ %s\ on\ different\ ESX\ host\ doesn't\ has\ same\ portgroup = vSwitch/dvSwitch not found: {0}, or vSwitch: {1} on different ESX host doesn't has same portgroup

# at: src/main/java/org/zstack/vmware/VCenterApiInterceptor.java:198
# args: l2uuid,vcvo.getUuid(),clusterUuid
L2[uuid\:%s]\ doesn't\ belong\ to\ vCenter[uuid\:%s]\ cluster[uuid\:%s] = L2[uuid:{0}] doesn't belong to vCenter[uuid:{1}] cluster[uuid:{2}]

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:68
# args: bsUuid
No\ data-store\ attached\ to\ %s = No data-store attached to {0}

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:73
# args: bsUuid
Data-store\ not\ found\ for\ %s = Data-store not found for {0}

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:103
# args: url.getProtocol()
unexpected\ protocol\:\ %s = unexpected protocol: {0}

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:109
# args: iinv.getName()
%s\ already\ exists = {0} already exists

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:153
# args: 
vcenter\ backup\ storage\ do\ not\ support\ to\ cancel\ download\ image = vcenter backup storage do not support to cancel download image

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:203
# args: 
image\ not\ found\ in\ BS = image not found in BS

# at: src/main/java/org/zstack/vmware/VCenterBackupStorage.java:215
# args: 
not\ supported\ yet = not supported yet

# at: src/main/java/org/zstack/vmware/VCenterHostAllocatorFilterExtensionPoint.java:368
# args: 
no\ candidate\ host\ for\ vcenter\ vm = no candidate host for vcenter vm

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:1040
# args: nNic.getMac(),nVm.getUuid(),nVm.getName(),eVm.getUuid(),eVm.getName(),VCENTER_MAC_CONFLICT_STRATEGY_STRICT
Duplicated\ mac\ address[%s]\ on\ VM[uuid\:\ %s,\ name\:\ %s]\ and\ VM[uuid\:\ %s,\ name\:\ %s],\ and\ current\ mac\ address\ conflicting\ strategy\ is\:\ %s. = Duplicated mac address[{0}] on VM[uuid: {1}, name: {2}] and VM[uuid: {3}, name: {4}], and current mac address conflicting strategy is: {5}.

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:2040
# args: 
can't\ sync\ before\ datastores\ are\ separated = can't sync before datastores are separated

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3044
# args: vcvo.getUuid()
There\ are\ tasks\ running\ on\ the\ VCenter[uuid\:%s],\ please\ try\ again\ later. = There are tasks running on the VCenter[uuid:{0}], please try again later.

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3134
# args: msg.getVCenterUuid()
VCenter[uuid\:%s]\ not\ found\:\  = VCenter[uuid:{0}] not found: 

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3252
# args: 
Login\ failed,\ please\ check\ your\ login\ parameters. = Login failed, please check your login parameters.

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3256
# args: msg.getDomainName(),ex.getMessage()
connect\ %s\ failed\:\ %s = connect {0} failed: {1}

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3262
# args: msg.getDomainName(),msg.getUsername()
Login\ to\ vCenter\ [%s]\ failed\ with\ user\ [%s],please\ check\ your\ network\ connection\ and\ credential. = Login to vCenter [{0}] failed with user [{1}],please check your network connection and credential.

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3269
# args: msg.getDomainName(),msg.getPort() == null ? 443 : msg.getPort()
Parse\ response\ failed\ from\ vCenter\ [%s],please\ check\ the\ port\ number[%d]. = Parse response failed from vCenter [{0}],please check the port number[{1}].

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3277
# args: msg.getDomainName()
SSL\ handshake\ failed\ with\ vCenter\ [%s],because\ insecure\ TLS\ 1.0\ is\ used.\ Manually\ enabled\ TLS\ 1.0\ in\ jdk\ configuration\ if\ needed. = SSL handshake failed with vCenter [{0}],because insecure TLS 1.0 is used. Manually enabled TLS 1.0 in jdk configuration if needed.

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3283
# args: msg.getDomainName(),msg.getPort() == null ? 443 : msg.getPort()
SSL\ handshake\ failed\ with\ vCenter\ [%s],please\ check\ the\ port\ number[%d]. = SSL handshake failed with vCenter [{0}],please check the port number[{1}].

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3359
# args: 
No\ clustered\ compute\ resource\ found = No clustered compute resource found

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3363
# args: 
No\ dvSwitch\ or\ qualified\ vSwitch\ found = No dvSwitch or qualified vSwitch found

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3546
# args: dsMorVal,vcUuid
Datastore\ %s\ not\ found\ for\ vCenter\ %s = Datastore {0} not found for vCenter {1}

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:3936
# args: 
Missing\ host\ uuid\ in\ message = Missing host uuid in message

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4035
# args: 
Missing\ destination\ host\ uuid. = Missing destination host uuid.

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4040
# args: 
Destination\ host\ is\ not\ ESX\ host. = Destination host is not ESX host.

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4079
# args: vm.getConfig().getName(),hvo.getManagementIp()
Checking\ compatibility\ with\ vm\ %s\ failed\ on\ host\ %s = Checking compatibility with vm {0} failed on host {1}

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4075
# args: 
HOST\ CPU/software\ NOT\ compatible = HOST CPU/software NOT compatible

# at: src/main/java/org/zstack/vmware/VCenterManagerImpl.java:4137
# args: 
Can't\ detach\ nic\ because\ the\ nic\ not\ supported\ to\ hot\ plugin\ in\ vcenter = Can't detach nic because the nic not supported to hot plugin in vcenter

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:228
# args: 
No\ virtual\ disk\ manager = No virtual disk manager

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:235
# args: 
No\ file\ manager = No file manager

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:244
# args: 
No\ file\ Datacenter = No file Datacenter

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:350
# args: vm.getName()
failed\ to\ get\ VM[%s]\ root\ disk\ usage = failed to get VM[{0}] root disk usage

# at: src/main/java/org/zstack/vmware/VCenterPrimaryStorageBase.java:346
# args: installPath
failed\ to\ get\ VM\ from\ installPath\:\ %s = failed to get VM from installPath: {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:258
# args: 
VCenter\ not\ found = VCenter not found

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:262
# args: vcvo.getUuid(),vcvo.getStatus()
VCenter[%s]\ is\ not\ in\ operation\ status,\ current\ status\:\ %s = VCenter[{0}] is not in operation status, current status: {1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:328
# args: vCenterUrl,ex.getMessage()
failed\ to\ connect\ to\ vCenter\:\ %s\:\ %s = failed to connect to vCenter: {0}: {1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:460
# args: installPath
vdisk\ not\ found\:\ %s = vdisk not found: {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:536
# args: getVcDomainName(si)
list\ storage\ failed\ for\ %s = list storage failed for {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:556
# args: vm.getName()
No\ datastore\ found\ for\ VM\:\ %s = No datastore found for VM: {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:610
# args: info.getName(),info.getInstanceUuid(),ex.getMessage()
failed\ to\ set\ ESX\ VM\ uuid\ [%s\:%s],\ because[%s] = failed to set ESX VM uuid [{0}:{1}], because[{2}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:709
# args: zsImageUuid
template\ [%s]\ not\ found = template [{0}] not found

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:786
# args: host.getName()
failed\ to\ search\ resource\ pool\ for\ host\ %s = failed to search resource pool for host {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:782
# args: host.getName()
No\ resource\ pool\ found\ for\ host\ %s = No resource pool found for host {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2415
# args: installPath
No\ unit\ number\ available\ for\ data\ disk\ %s = No unit number available for data disk {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1546
# args: vm.getName()
guest\ tools\ not\ installed\ or\ running\ for\ VM\:\ %s = guest tools not installed or running for VM: {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1581
# args: vm.getName()
upload\ file\ failed\ for\ VM\:\ %s = upload file failed for VM: {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1670
# args: vcvo.getName()
list\ dvSwitch\ failed\ for\ %s = list dvSwitch failed for {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:1936
# args: clusterUuid
get\ vCenter\ cluster[%s]\ name\ failed = get vCenter cluster[{0}] name failed

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2045
# args: dvSwitch
dvSwitch\ name\ [%s]\ not\ unique = dvSwitch name [{0}] not unique

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2103
# args: hvo.getName()
create\ portgroup\ failed\ for\ host\ %s = create portgroup failed for host {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2100
# args: hvo.getName(),((OperationFailureException) ex).getErrorCode().getDetails()
create\ portgroup\ failed\ for\ host\ %s\:\ because\ %s = create portgroup failed for host {0}: because {1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2067
# args: hvo.getName(),hvo.getUuid()
Host[%s\:%s]\ not\ found\ on\ vCenter = Host[{0}:{1}] not found on vCenter

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2079
# args: pgLabel,hvo.getName(),vlanId
portgroup[%s]\ already\ exists\ on\ host[%s]\ but\ with\ different\ vlanId(%d) = portgroup[{0}] already exists on host[{1}] but with different vlanId({2})

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2083
# args: pgLabel,hvo.getName()
portgroup[%s]\ already\ exists\ on\ host[%s],please\ create\ again\ with\ other\ name\ or\ delete\ portgroup\ manually\ and\ attach\ to\ cluster\ again = portgroup[{0}] already exists on host[{1}],please create again with other name or delete portgroup manually and attach to cluster again

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2142
# args: vcvo.getName()
create\ dvPortGroup\ failed\ for\ %s = create dvPortGroup failed for {0}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2137
# args: dvSwitchName,vcvo.getName()
dvSwitch\ [%s]\ not\ found\ on\ vCenter\ [%s] = dvSwitch [{0}] not found on vCenter [{1}]

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2335
# args: ds.getName()
no\ dataCenter\ found\ for\ datastore = no dataCenter found for datastore

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2340
# args: 
virtual\ disk\ manager\ unavailable = virtual disk manager unavailable

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2351
# args: installPath,mf.getLocalizedMessage()
delete\ vdisk[%s]\ failed\:\ %s = delete vdisk[{0}] failed: {1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2481
# args: dvSwitch.getName(),task.getTaskInfo().getError().getLocalizedMessage()
create\ dvPortGroup\ failed\ for\ dvSwitch\ [%s],\ %s = create dvPortGroup failed for dvSwitch [{0}], {1}

# at: src/main/java/org/zstack/vmware/VMwareHelper.java:2593
# args: me.getName(),mor.val,ex.getMessage()
failed\ to\ set\ ZStack\ uuid\ to\ VCenter\ ManagedEntity\ [name\:%s,\ mor\:%s]\ because\ %s = failed to set ZStack uuid to VCenter ManagedEntity [name:{0}, mor:{1}] because {2}

# at: src/main/java/org/zstack/vmware/VncPortAllocatorImpl.java:165
# args: 
No\ VNC\ ports\ available = No VNC ports available

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:450
# args: msg.getDns()
dns[%s]\ is\ not\ a\ IP\ address = dns[{0}] is not a IP address

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:338
# args: l3NetworkVO.getUuid()
no\ ip\ ranges\ attached\ with\ l3\ network[uuid\:%s] = no ip ranges attached with l3 network[uuid:{0}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:178
# args: 
management\ network\ can\ not\ be\ detached = management network can not be detached

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:182
# args: 
default\ route\ network\ can\ not\ be\ detached = default route network can not be detached

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:186
# args: 
original\ public\ network\ can\ not\ be\ detached = original public network can not be detached

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:190
# args: vpc.getUuid()
could\ not\ detach\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ its\ state\ is\ not\ running\ or\ stopped = could not detach l3 network to vpc router[uuid:{0}] because its state is not running or stopped

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:198
# args: vpc.getUuid()
could\ not\ detach\ l3\ network\ to\ vpc\ router[uuid\:%s]\ becaus\ the\ states\ of\ the\ master\ and\ slave\ are\ inconsistent = could not detach l3 network to vpc router[uuid:{0}] becaus the states of the master and slave are inconsistent

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:231
# args: l3NetworkVO.getUuid(),vmInstanceVO.getUuid(),vipPeerVOs.stream().map(VipPeerL3NetworkRefVO::getVipUuid).collect(Collectors.toList())
l3\ network[uuid\:%s]\ can\ not\ detach\ from\ vpc\ vrouter[uuid\:%s]\ since\ network\ services\ attached\ vips[%s]\ still\ used\ in\ l3 = l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] since network services attached vips[{2}] still used in l3

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:247
# args: l3NetworkVO.getUuid(),vmInstanceVO.getUuid(),vmNicVOS.stream().map(ResourceVO::getUuid).collect(Collectors.toList())
vpc\ l3\ network[uuid\:%s]\ can\ not\ detach\ from\ vpc\ vrouter[uuid\:%s]\ since\ vm\ nics[%s]\ still\ used\ in\ l3 = vpc l3 network[uuid:{0}] can not detach from vpc vrouter[uuid:{1}] since vm nics[{2}] still used in l3

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:257
# args: msg.getVirtualRouterOfferingUuid()
virtual\ router\ offering[uuid\:\ %s]\ is\ not\ enabled = virtual router offering[uuid: {0}] is not enabled

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:284
# args: 
only\ vpc\ l3\ network\ can\ attach\ to\ vpc\ vrouter = only vpc l3 network can attach to vpc vrouter

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:292
# args: msg.getL3NetworkUuid(),vmNics.get(0).getVmInstanceUuid()
Vpc\ network\ [uuid\:%s]\ already\ attached\ to\ vpc\ router\ [uuid\:%s] = Vpc network [uuid:{0}] already attached to vpc router [uuid:{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:329
# args: msg.getVmInstanceUuid()
could\ not\ attached\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ both\ its\ state\ and\ it\ peer\ state\ is\ not\ running\ or\ stopped = could not attached l3 network to vpc router[uuid:{0}] because both its state and it peer state is not running or stopped

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:312
# args: msg.getVmInstanceUuid()
could\ not\ attached\ l3\ network\ to\ vpc\ router[uuid\:%s]\ because\ its\ state\ is\ not\ running\ or\ stopped = could not attached l3 network to vpc router[uuid:{0}] because its state is not running or stopped

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:362
# args: vip.getL3NetworkUuid(),vip.getUuid(),vip.getIp(),msg.getL3NetworkUuid(),vmInstanceVO.getUuid()
public\ network[uuid\:\ %s]\ vip[uuid\:\ %s,\ ip\:\ %s]\ peer\ with\ l3network[uuid\:\ %s]\ not\ on\ vpc\ vr[uuid\:\ %s] = public network[uuid: {0}] vip[uuid: {1}, ip: {2}] peer with l3network[uuid: {3}] not on vpc vr[uuid: {4}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:383
# args: gateways,msg.getL3NetworkUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied = the gateway[ip:{0}] of l3[uuid:{1}] has been occupied

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:428
# args: msg.getStaticIp(),gateways,l3NetworkVO.getUuid()
the\ static\ ip[%s]\ specified\ in\ message\ not\ equals\ to\ gateway\ ips[%s]\ of\ l3\ network[uuid\:%s] = the static ip[{0}] specified in message not equals to gateway ips[{1}] of l3 network[uuid:{2}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:440
# args: vipL3Uuid
l3\ network\ [uuid\:%s]\ must\ be\ attached\ first,\ because\ there\ is\ vip\ on\ that\ l3\ network = l3 network [uuid:{0}] must be attached first, because there is vip on that l3 network

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:457
# args: msg.getDns(),msg.getUuid()
dns\ address\ [%s]\ is\ not\ added\ to\ vpc\ router\ [uuid\:%s] = dns address [{0}] is not added to vpc router [uuid:{1}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:488
# args: ipr.getL3NetworkUuid(),ipRangeVO.getNetworkCidr(),uuid
could\ not\ add\ ipv6\ range\ to\ l3\ network[uuid\:%s],\ because\ it's\ overlap\ with\ cidr\ [%s]\ of\ vRouter\ [uuid\:%s] = could not add ipv6 range to l3 network[uuid:{0}], because it's overlap with cidr [{1}] of vRouter [uuid:{2}]

# at: src/main/java/org/zstack/vpc/VpcApiInterceptor.java:483
# args: ipr.getL3NetworkUuid(),ipRangeVO.getNetworkCidr(),uuid
could\ not\ add\ ip\ range\ to\ l3\ network[uuid\:%s],\ because\ it's\ overlap\ with\ cidr\ [%s]\ of\ vRouter\ [uuid\:%s] = could not add ip range to l3 network[uuid:{0}], because it's overlap with cidr [{1}] of vRouter [uuid:{2}]

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:859
# args: rsp.getError()
operation\ error,\ because\:%s = operation error, because:{0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:558
# args: msg.getUuid()
can\ not\ get\ connections\ of\ distributed\ routing\ to\ virtual\ router\ %s = can not get connections of distributed routing to virtual router {0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:596
# args: vrinv.getUuid()
can\ not\ set\ state\ of\ distributed\ routing\ to\ virtual\ router\ %s = can not set state of distributed routing to virtual router {0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:720
# args: msg.getNetworkService(),msg.getUuid()
not\ support\ to\ get\ the\ service\ %s\ state\ to\ virtual\ router\ %s = not support to get the service {0} state to virtual router {1}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:855
# args: vrinv.getUuid()
can\ not\ get\ state\ of\ distributed\ routing\ to\ virtual\ router\ %s = can not get state of distributed routing to virtual router {0}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:934
# args: msg.getNetworkService(),msg.getUuid()
not\ support\ to\ update\ the\ service\ %s\ state\ to\ virtual\ router\ %s = not support to update the service {0} state to virtual router {1}

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:1336
# args: 
vpc\ l3\ network\ must\ attach\ a\ vpc\ vrouter\ first\ before\ do\ anything\ related\ to\ vrouter(like\ start/stop\ vm,\ create\ lb,\ etc.) = vpc l3 network must attach a vpc vrouter first before do anything related to vrouter(like start/stop vm, create lb, etc.)

# at: src/main/java/org/zstack/vpc/VpcManagerImpl.java:1594
# args: msg.getDns(),msg.getVpcRouterUuid()
dns\ address\ [%s]\ has\ bean\ added\ to\ vpc\ router\ [uuid\:%s] = dns address [{0}] has bean added to vpc router [uuid:{1}]

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:166
# args: vpcUuid
can\ not\ detach\ nic\ from\ vpc\ vr[uuid\:%s] = can not detach nic from vpc vr[uuid:{0}]

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:473
# args: l3.getUuid()
there\ is\ no\ ip\ range\ for\ l3\ network[uuid\:%s] = there is no ip range for l3 network[uuid:{0}]

# at: src/main/java/org/zstack/vpc/VpcVRouterFactory.java:501
# args: ip.getGateway(),l3.getUuid(),vm.getUuid()
the\ gateway[ip\:%s]\ of\ l3[uuid\:%s]\ has\ been\ occupied\ on\ vpc\ vr[uuid\:\ %s] = the gateway[ip:{0}] of l3[uuid:{1}] has been occupied on vpc vr[uuid: {2}]

# at: src/main/java/org/zstack/vpc/VpcVyosDeployZsnAgentFlow.java:133
# args: mgmtNicIp
unable\ to\ ssh\ in\ to\ the\ vpc\ router[%s],\ the\ ssh\ port\ seems\ not\ open = unable to ssh in to the vpc router[{0}], the ssh port seems not open

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:217
# args: msg.getVmInstanceUuid()
there\ is\ no\ master\ router\ of\ router\ [uuid\:%s] = there is no master router of router [uuid:{0}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:130
# args: msg.getVirtualRouterUuid()
Could\ not\ update\ this\ network\ service,\ due\ to\ vpc\ [uuid\:%s]\ is\ not\ support\ update\ network\ service\ version = Could not update this network service, due to vpc [uuid:{0}] is not support update network service version

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:137
# args: msg.getVirtualRouterUuid(),vo.getKernelVersion()
Could\ not\ update\ this\ network\ service,\ due\ to\ vpc\ [uuid\:%s]\ used\ old\ kernel\ version\:[%s] = Could not update this network service, due to vpc [uuid:{0}] used old kernel version:[{1}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:144
# args: 
Could\ not\ apply\ snat\ with\ non-default\ public\ network,\ due\ to\ multi\ snat\ feature\ is\ disabled = Could not apply snat with non-default public network, due to multi snat feature is disabled

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:147
# args: msg.getL3NetworkUuid()
Could\ not\ apply\ snat\ with\ this\ L3Network,\ due\ to\ l3\ network\ [uuid\:%s]\ is\ not\ public\ network = Could not apply snat with this L3Network, due to l3 network [uuid:{0}] is not public network

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:150
# args: msg.getL3NetworkUuid()
Could\ not\ apply\ snat\ with\ this\ L3Network,\ due\ to\ l3\ network\ [uuid\:%s]\ is\ not\ attached\ to\ vpc\ router = Could not apply snat with this L3Network, due to l3 network [uuid:{0}] is not attached to vpc router

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:168
# args: ip
invalid\ monitor\ ip\ address\ [%s] = invalid monitor ip address [{0}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:205
# args: vpcVo.getUuid()
vpcHaRouter\ [uuid\:%s]\ is\ deleted = vpcHaRouter [uuid:{0}] is deleted

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:235
# args: haUuid
there\ are\ more\ than\ 2\ vpc\ routers\ attached\ to\ haGroup\ [uuid\:%s] = there are more than 2 vpc routers attached to haGroup [uuid:{0}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:266
# args: l3Uuids,offeringL3Uuids
ha\ group\ management\ l3\ and\ public\ l3\ networks[uuid\:%s]\ are\ different\ from\ offering\ l3\ networks\ [uuid\:%s] = ha group management l3 and public l3 networks[uuid:{0}] are different from offering l3 networks [uuid:{1}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:322
# args: vpcL3Uuids,vpcHaGroupL3Uuids
vpc\ router\ l3\ networks\ [uuid\:%s]\ are\ different\ from\ ha\ group\ l3\ networks\ [uuid\:%s],\ !!!\ please\ delete\ this\ router\ and\ recreate\ it = vpc router l3 networks [uuid:{0}] are different from ha group l3 networks [uuid:{1}], !!! please delete this router and recreate it

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:330
# args: oldHaUuid
vpc\ router\ has\ been\ attached\ to\ ha\ group\ [uuid\:%s] = vpc router has been attached to ha group [uuid:{0}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:334
# args: haUuid
vpc\ ha\ group\ [uuid\:%s]\ is\ not\ existed = vpc ha group [uuid:{0}] is not existed

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:339
# args: haUuid
there\ are\ more\ than\ 1\ vpc\ routers\ attached\ to\ haGroup\ [uuid\:%s] = there are more than 1 vpc routers attached to haGroup [uuid:{0}]

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupApiInterceptor.java:344
# args: haUuid
vpc\ router\ [uuid\:%s]\ can\ not\ be\ upgraded\ to\ ha\ router\ because\ it\ public\ network\ is\ same\ to\ management\ network = vpc router [uuid:{0}] can not be upgraded to ha router because it public network is same to management network

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java:611
# args: ha.getName()
create\ affinityGroup\ for\ ha\ group\ [uuid\:%s]\ failed = create affinityGroup for ha group [uuid:{0}] failed

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupManagerImpl.java:785
# args: vrName,vrUuid,vpcHaGroupName,vpcHaGroupUuid,old,status
virtualrouter\ %s\ [uuid\:\ %s\ ]\ of\ VPC\ HA\ group\ %s\ [uuid\:\ %s]\ haStatus\ changed\ from\ %s\ to\ %s = virtualrouter {0} [uuid: {1} ] of VPC HA group {2} [uuid: {3}] haStatus changed from {4} to {5}

# at: src/main/java/org/zstack/vpc/ha/VpcHaGroupVpcVrImpl.java:694
# args: 
ha\ group\ uuid\ nil = ha group uuid nil

# at: src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java:85
# args: struct.getVmInstanceUuid()
VR[uuid\:\ %s]\ not\ running = VR[uuid: {0}] not running

# at: src/main/java/org/zstack/vpc/ha/vpcHaGc/VpcHaGcManagerImpl.java:90
# args: struct.getVmInstanceUuid()
VR[uuid\:\ %s]\ not\ connected = VR[uuid: {0}] not connected

# at: src/main/java/org/zstack/vpc/ha/vyos/vyosVpcHaRouterBackendManagerImpl.java:140
# args: vrUuid,ret.getError()
failed\ to\ enable\ ha\ on\ virtual\ router[uuid\:%s],\ %s = failed to enable ha on virtual router[uuid:{0}], {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:373
# args: 
only\ tcp\ or\ udp\ protocol\ can\ use\ port = only tcp or udp protocol can use port

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:150
# args: msg.getUuid()
can\ not\ delete\ ruleSet[%s]\ because\ it\ still\ attached\ to\ nic = can not delete ruleSet[{0}] because it still attached to nic

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:129
# args: 
can\ not\ detach\ system\ default\ ruleSet = can not detach system default ruleSet

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:142
# args: 
only\ system\ ruleSet\ can\ change\ action\ type = only system ruleSet can change action type

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:154
# args: 
can\ not\ delete\ system\ default\ ruleSet = can not delete system default ruleSet

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:160
# args: 
can\ not\ delete\ system\ default\ rule = can not delete system default rule

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:170
# args: vRouteUuid
the\ router\ [uuid\:%s]\ does\ not\ has\ a\ master\ router = the router [uuid:{0}] does not has a master router

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:188
# args: msg.getVpcUuid()
the\ VPC\ Router[uuid\:%s]\ already\ has\ a\ firewall. = the VPC Router[uuid:{0}] already has a firewall.

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:378
# args: 
only\ tcp\ protocol\ can\ use\ tcp\ flag = only tcp protocol can use tcp flag

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:382
# args: 
only\ icmp\ protocol\ can\ use\ icmp\ type = only icmp protocol can use icmp type

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:239
# args: msg.getName(),msg.getRuleNumber()
already\ has\ a\ rule\ template\ with\ name\ %s = already has a rule template with name {0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:338
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
the\ ruleSet[%s]\ already\ has\ a\ rule\ with\ rule\ number\ %s. = the ruleSet[{0}] already has a rule with rule number {1}.

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:343
# args: msg.getUuid()
can\ not\ update\ default\ rule[%s] = can not update default rule[{0}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:407
# args: msg.getUuid()
the\ rule\ [%s]\ number\ is\ invalid = the rule [{0}] number is invalid

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:416
# args: 
can\ not\ attach\ the\ default\ ruleSet\ to\ other\ nic = can not attach the default ruleSet to other nic

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:431
# args: msg.getRuleSetUuid(),msg.getL3Uuid()
ruleSet[%s]\ already\ has\ a\ l3[%s] = ruleSet[{0}] already has a l3[{1}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:450
# args: duplicateRuleNumbers
already\ has\ a\ rule\ with\ the\ number[%s] = already has a rule with the number[{0}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:748
# args: msg.getRuleSetUuid(),msg.getRuleNumber()
the\ ruleSet[%s]\ already\ has\ a\ rule\ with\ the\ rule\ number\ %s. = the ruleSet[{0}] already has a rule with the rule number {1}.

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:779
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ only\ tcp\ or\ udp\ protocol\ can\ use\ port = could not add firewall rule[{0}] only tcp or udp protocol can use port

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:785
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ only\ tcp\ protocol\ can\ use\ tcp\ flag = could not add firewall rule[{0}] only tcp protocol can use tcp flag

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:790
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ icmp\ protocol\ can\ use\ icmp\ type = could not add firewall rule[{0}] because only icmp protocol can use icmp type

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:801
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ tcp\ or\ udp\ protocol\ can\ use\ port = could not add firewall rule[{0}] because only tcp or udp protocol can use port

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:824
# args: msg.getRuleNumber()
could\ not\ add\ firewall\ rule[%d]\ because\ only\ tcp\ protocol\ can\ use\ tcp\ flag = could not add firewall rule[{0}] because only tcp protocol can use tcp flag

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:832
# args: msg.getRuleNumber(),error
could\ not\ add\ firewall\ rule[%d]\ because\ %s = could not add firewall rule[{0}] because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:846
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ ruleNo\ %d\ is\ invalid = could not add firewall rule, because ruleNo {0} is invalid

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:853
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ there\ is\ no\ action\ for\ ruleNo\:%d = could not add firewall rule, because there is no action for ruleNo:{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:867
# args: vo.getSourceIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ source\ IP\ length\:\ %s\ is\ not\ valid\ for\ ruleNo\:%d = could not add firewall rule, because source IP length: {0} is not valid for ruleNo:{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:874
# args: vo.getDestIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ destination\ IP\ length\:\ %s\ is\ not\ valid\ for\ ruleNo\:%d = could not add firewall rule, because destination IP length: {0} is not valid for ruleNo:{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:885
# args: vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ there\ is\ no\ state\ for\ ruleNo\:%d = could not add firewall rule, because there is no state for ruleNo:{0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:892
# args: vo.getDestIp(),vo.getRuleNumber()
could\ not\ add\ firewall\ rule,\ because\ description\ length\ %s\ is\ not\ valid\ for\ ruleNo\:%d = could not add firewall rule, because description length {0} is not valid for ruleNo:{1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:942
# args: 
the\ configuration\ file\ has\ format\ error = the configuration file has format error

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallApiInterceptor.java:948
# args: errorInfo
the\ firewall\ rules\ in\ the\ configuration\ file\ have\ syntax\ errors\:\ %s = the firewall rules in the configuration file have syntax errors: {0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:272
# args: rsp.getError()
sync\ firewall\ config\ failed,because\ %s = sync firewall config failed,because {0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:459
# args: rsp.getError()
update\ firewall\ ruleSet\ action\ failed,\ because\ %s = update firewall ruleSet action failed, because {0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:492
# args: l3Uuid,vRouterUuid
Can\ not\ find\ l3[%]\ related\ mac\ on\ vRouter[%s] = Can not find l3[%] related mac on vRouter[{0}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:557
# args: cmd.getRef().getRuleSetInfo().getRules().get(0).getRuleNumber(),rsp.getError()
create\ firewall\ rule[%s]\ failed,\ because\ %s = create firewall rule[{0}] failed, because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:645
# args: vRouterUuid,re.getError().getCause()
delete\ firewall\ on\ vRouter[%s],because\ %s = delete firewall on vRouter[{0}],because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:851
# args: vRouterUuid,rsp.getError()
delete\ firewall\ rule\ failed\ on\ vRouter[%s],\ because\ %s = delete firewall rule failed on vRouter[{0}], because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:784
# args: cmd.getRuleSet().getName(),re.getError().getCause()
create\ firewall\ ruleSet[%s]\ failed,\ because\ %s = create firewall ruleSet[{0}] failed, because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:936
# args: vRouterUuid,rsp.getError()
change\ firewall\ rule\ state\ on\ vRouter[%s]\ failed,\ because\ %s = change firewall rule state on vRouter[{0}] failed, because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1032
# args: struct.getRuleSetUuid(),re.getError()
attach\ firewall\ ruleSet[%s]\ failed,\ because\ %s = attach firewall ruleSet[{0}] failed, because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1063
# args: 
detach\ ruleSet\ failed,\ maybe\ it\ has\ been\ deleted = detach ruleSet failed, maybe it has been deleted

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallBackend.java:1129
# args: struct.getRuleSetUuid(),re.getError().getCause()
detach\ firewall\ ruleSet[%s]\ failed,because\ %s = detach firewall ruleSet[{0}] failed,because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:114
# args: msg.getVpcFirewallUuid()
cannot\ find\ vpcFirewall[uuid\:%s]\ related\ vRouter = cannot find vpcFirewall[uuid:{0}] related vRouter

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:109
# args: msg.getVpcFirewallUuid()
cannot\ find\ vpcFirewall[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find vpcFirewall[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:125
# args: msg.getRuleSetUuid()
cannot\ find\ vpcFirewallRuleSet[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find vpcFirewallRuleSet[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallManagerImpl.java:301
# args: msg.getUuid()
cannot\ find\ vpcFirewallIpSetTemplate[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find vpcFirewallIpSetTemplate[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:396
# args: msg.getRuleSetUuid(),msg.getL3Uuid(),errorCode.getCause()
attach\ firewall\ ruleSet[%s]\ to\ l3[%s]\ failed,because\ %s = attach firewall ruleSet[{0}] to l3[{1}] failed,because {2}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:424
# args: msg.getL3Uuid(),errorCode.getCause()
detach\ firewall\ ruleSet\ from\ l3[%s]\ failed,because\ %s = detach firewall ruleSet from l3[{0}] failed,because {1}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:475
# args: duplicateRuleNumber.get(),ref.getVpcFirewallUuid(),ref.getL3NetworkUuid(),ref.getPacketsForwardType()
find\ duplicate\ rule\ numbers\ %s\ on\ firewall[%s],l3[%s],forward[%s] = find duplicate rule numbers {0} on firewall[{1}],l3[{2}],forward[{3}]

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:483
# args: self.getUuid()
no\ changes\ in\ ruleset\ %s = no changes in ruleset {0}

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:515
# args: firewall.get()
firewall\ %s\ related\ vpc\ not\ in\ running\ state = firewall {0} related vpc not in running state

# at: src/main/java/org/zstack/vpcfirewall/VpcFirewallRuleSetBase.java:753
# args: self.getUuid(),refVOs.size()
default\ ruleset\ %s\ can\ only\ attached\ to\ one\ interface\ forward,\ but\ find\ %s\ related\ interface = default ruleset {0} can only attached to one interface forward, but find {1} related interface

# at: src/main/java/org/zstack/vrouterRoute/VRouterRouteApiInterceptor.java:115
# args: 
destination[%s]\ can\ not\ has\ blackHole\ route\ and\ static\ route\ at\ same\ time = destination[{0}] can not has blackHole route and static route at same time

# at: src/main/java/org/zstack/vrouterRoute/VRouterRouteManagerImpl.java:469
# args: msg.getUuid()
cannot\ find\ the\ route\ table\ [uuid\:%s] = cannot find the route table [uuid:{0}]

# at: src/main/java/org/zstack/xdragon/XDragonFilterExtensionPoint.java:30
# args: 
xdragon\ host\ not\ support\ create\ vm\ using\ an\ iso\ image. = xdragon host not support create vm using an iso image.

# at: src/main/java/org/zstack/xdragon/XDragonHostFactory.java:34
# args: msg.getClusterUuid(),XDragonConstant.HYPERVISOR_TYPE
cluster[uuid\:%s]\ hypervisorType\ is\ not\ %s = cluster[uuid:{0}] hypervisorType is not {1}

# at: src/main/java/org/zstack/yunshan/util/YunshanClient.java:46
# args: 
the\ url\ is\ null,\ please\ config\ the\ YunShan\ NSP. = the url is null, please config the YunShan NSP.

# at: src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java:55
# args: msg.getUsbDeviceUuid(),inventory.getVmInstanceUuid()
usb\ device[uuid\:%s]\ has\ been\ attached\ VM[uuid\:%s],\ cannot\ be\ add\ to\ zbox = usb device[uuid:{0}] has been attached VM[uuid:{1}], cannot be add to zbox

# at: src/main/java/org/zstack/zbox/ZBoxApiInterceptor.java:72
# args: zbox.getName(),zbox.getStatus()
zbox[name\:%s]\ status\ is\ not\ Ready,\ current\ status\ is\ %s = zbox[name:{0}] status is not Ready, current status is {1}

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:122
# args: msg.getZBoxUuid()
zbox[uuid\:%s]\ is\ still\ in\ use,\ cannot\ eject\ it = zbox[uuid:{0}] is still in use, cannot eject it

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:151
# args: msg.getZBoxUuid()
zbox[uuid\:%s]\ is\ not\ Ready,\ cannot\ sync\ capacity. = zbox[uuid:{0}] is not Ready, cannot sync capacity.

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:219
# args: self.getMountPath(),msg.getInstallPath()
only\ file\ on\ zbox[mountPath\:%s]\ can\ be\ deleted.\ but\ pass\ [%s] = only file on zbox[mountPath:{0}] can be deleted. but pass [{1}]

# at: src/main/java/org/zstack/zbox/ZBoxBase.java:285
# args: self.getName(),self.getStatus()
zbox[name\:%s]\ state\ is\ not\ Ready,\ current\ state\ is\ %s = zbox[name:{0}] state is not Ready, current state is {1}

# at: src/main/java/org/zstack/zbox/ZBoxFactory.java:57
# args: zbox.getUuid()
zbox[uuid\:\ %s]\ seems\ like\ removed = zbox[uuid: {0}] seems like removed

# at: src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java:140
# args: apiStr
output\ from\ [%s]\ is\ empty = output from [{0}] is empty

# at: src/main/java/org/zstack/zql/ast/parser/visitors/ValueVisitor.java:159
# args: apiName,JSONObjectUtil.toJsonString(ob)
call\ action[%s]\ failed,\ cause\:\ %s = call action[{0}] failed, cause: {1}

# at: src/main/java/org/zstack/zql/ast/visitors/OrderByExprVistor.java:14
# args: node.getDirection()
invalid\ order\ by\ clause,\ expect\ direction[asc,desc]\ but\ got\ %s = invalid order by clause, expect direction[asc,desc] but got {0}

# at: src/main/java/org/zstack/zql/ast/visitors/OrderByVisitor.java:22
# args: m.simpleInventoryName(),f
invalid\ order\ by\ clause,\ inventory[%s]\ doesn't\ have\ field[%s] = invalid order by clause, inventory[{0}] doesn't have field[{1}]

# at: src/main/java/org/zstack/zql/ast/visitors/plugin/SumPlugin.java:31
# args: 
the\ field\ to\ sum\ must\ be\ specified = the field to sum must be specified

# at: src/main/java/org/zstack/zsv/ZsvManagerImpl.java:95
# args: volume.getUuid(),volume.getLastVmInstanceUuid()
volume\ %s\ still\ have\ snapshot\ group\ on\ vm\ %s,\ cannot\ attach\ to\ other\ vm = volume {0} still have snapshot group on vm {1}, cannot attach to other vm

# at: src/main/java/org/zstack/zsv/ZsvManagerImpl.java:127
# args: volume.getUuid()
volume\ %s\ still\ have\ snapshot\ group,\ cannot\ delete\ it = volume {0} still have snapshot group, cannot delete it

# at: src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:241
# args: paramName,normalizedExpr
unknown\ parameter[%s]\ in\ zwatch\ return\ with\ clause,\ %s = unknown parameter[{0}] in zwatch return with clause, {1}

# at: src/main/java/org/zstack/zwatch/ZQLReturnWithExtension.java:250
# args: expr,e.getMessage()
invalid\ zwatch\ return\ with\ clause\:\ %s,\ %s = invalid zwatch return with clause: {0}, {1}

# at: src/main/java/org/zstack/zwatch/ZWatchManagerImpl.java:1188
# args: 
Some\ messages\ have\ expired.\ The\ expired\ messages\ are\ not\ allowed\ to\ be\ modified.\ The\ system\ will\ automatically\ clean\ up\ the\ expired\ messages.\ Please\ operate\ later = Some messages have expired. The expired messages are not allowed to be modified. The system will automatically clean up the expired messages. Please operate later

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:162
# args: msg.getKey()
event\ doesn't\ have\ label[%s] = event doesn't have label[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:167
# args: msg.getKey()
the\ event\ subscription\ already\ has\ the\ label[%s] = the event subscription already has the label[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:138
# args: msg.getActionUuid(),msg.getSubscriptionUuid()
the\ action[uuid\:%s]\ already\ attached\ to\ the\ event\ subscription[uuid\:%s] = the action[uuid:{0}] already attached to the event subscription[uuid:{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:213
# args: msg.getNamespace()
namespace[%s]\ not\ found = namespace[{0}] not found

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:187
# args: ns.getName(),msg.getEventName()
namespace[%s]\ doesn't\ have\ the\ event[%s] = namespace[{0}] doesn't have the event[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:195
# args: msg.getEventName(),l.getKey()
event[%s]\ doesn't\ have\ the\ label[%s] = event[{0}] doesn't have the label[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:361
# args: k,l
duplicate\ key[%s]\ with\ values%s = duplicate key[{0}] with values{1}

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:222
# args: msg.getMetricName()
Period\ field\ is\ not\ supported\ for\ metric\ [name\:%s] = Period field is not supported for metric [name:{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:219
# args: msg.getMetricName()
Period\ field\ can\ not\ be\ null\ for\ metric\ [name\:%s] = Period field can not be null for metric [name:{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:401
# args: msg.getNamespace(),metricName
namespace[%s]\ doesn't\ have\ the\ metric[%s] = namespace[{0}] doesn't have the metric[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:405
# args: metric
the\ metric[%s]\ is\ admin\ only,\ not\ available\ for\ current\ user = the metric[{0}] is admin only, not available for current user

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:350
# args: templateVO.getMetricName(),l.getKey()
the\ metric[%s]\ doesn't\ have\ the\ label[%s] = the metric[{0}] doesn't have the label[{1}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:273
# args: actionType
invalid\ action\ type[%s] = invalid action type[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:278
# args: actionUuid,actionType
action[uuid\:%s,\ type\:%s]\ not\ found = action[uuid:{0}, type:{1}] not found

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:286
# args: msg.getActionUuid(),msg.getActionType(),msg.getAlarmUuid()
duplicated\ action[uuid\:%s,\ type\:%s]\ for\ the\ alarm[uuid\:%s] = duplicated action[uuid:{0}, type:{1}] for the alarm[uuid:{2}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:296
# args: msg.getKey(),msg.getOperator(),msg.getValue(),msg.getAlarmUuid()
duplicate\ label[key\:%s,\ operator\:%s,\ value\:%s]\ for\ the\ alarm[uuid\:%s] = duplicate label[key:{0}, operator:{1}, value:{2}] for the alarm[uuid:{3}]

# at: src/main/java/org/zstack/zwatch/alarm/AlarmApiInterceptor.java:390
# args: msg.getNamespace()
namespace[%s]\ not\ support = namespace[{0}] not support

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:110
# args: msg.getSubscriptionUuid()
cannot\ find\ the\ event\ subscription[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the event subscription[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:119
# args: msg.getAlarmUuid()
cannot\ find\ the\ alarm[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find the alarm[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/zwatch/alarm/AlarmManagerImpl.java:525
# args: alarmVO.getMetricName()
the\ metric[%s]\ repeatInterval\ value\ cannot\ be\ less\ than\ 1h = the metric[{0}] repeatInterval value cannot be less than 1h

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:16
# args: 
InsufficientData = InsufficientData

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:14
# args: 
Alarm = Alarm

# at: src/main/java/org/zstack/zwatch/alarm/AlarmStatus.java:12
# args: 
OK = OK

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:55
# args: actionUuid
cannot\ find\ the\ topic[uuid\:%s] = cannot find the topic[uuid:{0}]

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSActionFactory.java:96
# args: msg.getAlarmTextTemplateUuid()
cannot\ find\ SNSTextTemplate[uuid\:%s],\ it\ may\ have\ been\ deleted = cannot find SNSTextTemplate[uuid:{0}], it may have been deleted

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:198
# args: vo.getApplicationPlatformType()
invalid\ application\ platform\ type[%s] = invalid application platform type[{0}]

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:212
# args: String.join(",\n", errorRecoverParams),String.join(",\n", AbstractTextTemplate.defaultSupportedParams.get(vo.getType()))
parameters\:\n\ %s\ are\ not\ supported\ by\ ZStack,\ available\ values\ are\:\n\ %s = parameters:\n {0} are not supported by ZStack, available values are:\n {1}

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:203
# args: vo.getApplicationPlatformType()
application\ platform/endpoint\ [%s]\ doesn't\ support\ user-defined\ template = application platform/endpoint [{0}] doesn't support user-defined template

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:107
# args: sign,sign.length()
The\ length\ of\ aliyun\ sms\ sign\ should\ between\ 2\ to\ 12\ characters.\ Got\ sign\:\ [%s]\ with\ [%d]\ characters. = The length of aliyun sms sign should between 2 to 12 characters. Got sign: [{0}] with [{1}] characters.

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:112
# args: alarmTemplateCode,alarmTemplateCode.length()
Sms\ template\ code\ is\ a\ string\ with\ 13\ characters.\ Got\ alarm\ template\ code\:\ [%s]\ with\ [%d]\ characters. = Sms template code is a string with 13 characters. Got alarm template code: [{0}] with [{1}] characters.

# at: src/main/java/org/zstack/zwatch/alarm/sns/SNSTextTemplateApiInterceptor.java:117
# args: eventTemplateCode,eventTemplateCode.length()
Sms\ template\ code\ is\ a\ string\ with\ 13\ characters.\ Got\ event\ template\ code\:\ [%s]\ with\ [%d]\ characters. = Sms template code is a string with 13 characters. Got event template code: [{0}] with [{1}] characters.

# at: src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java:31
# args: type
no\ template\ of\ this\ type：%s,\  = no template of this type：{0}, 

# at: src/main/java/org/zstack/zwatch/alarm/sns/TextTemplateFactory.java:43
# args: e.getMessage()
template\ error：%s = template error：{0}

# at: src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:1471
# args: DATA_DIR_CAPACITY_ALARM_uuid
alarm[uuid\:%s]\ is\ a\ system\ alarm\ which\ cannot\ be\ deleted = alarm[uuid:{0}] is a system alarm which cannot be deleted

# at: src/main/java/org/zstack/zwatch/alarm/system/SystemAlarmManagerImpl.java:1482
# args: SNSSystemAlarmTopicManager.SYSTEM_ALARM_TOPIC_uuid,DATA_DIR_CAPACITY_ALARM_uuid
removing\ system\ topic[uuid\:%s]\ from\ system\ alarm[uuid\:%s]\ is\ forbidden = removing system topic[uuid:{0}] from system alarm[uuid:{1}] is forbidden

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:270
# args: l.getKey(),AuditDataV2.queryableLoginLabels
invalid\ label[%s],\ valid\ queryable\ labels\ are\ %s = invalid label[{0}], valid queryable labels are {1}

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:487
# args: startTime,endTime
startTime[%s]\ is\ greater\ than\ endTime[%s] = startTime[{0}] is greater than endTime[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:162
# args: 
dataUuid\ cannot\ be\ missed = dataUuid cannot be missed

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:168
# args: 
dataStartTime\ and\ dataEndTime\ cannot\ be\ missed = dataStartTime and dataEndTime cannot be missed

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:172
# args: msg.getDataStartTime(),msg.getDataEndTime()
dataStartTime[%s]\ is\ greater\ than\ dataEndTime[%s] = dataStartTime[{0}] is greater than dataEndTime[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:190
# args: Namespace.ZSTACK_NAMESPACE_PREFIX
namespace\ name\ cannot\ start\ with\ %s\ that\ is\ reserved = namespace name cannot start with {0} that is reserved

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:396
# args: end,msg.getEndTime(),start,msg.getStartTime()
endTime[%s,\ %sms]\ must\ not\ be\ before\ startTime[%s,\ %sms] = endTime[{0}, {1}ms] must not be before startTime[{2}, {3}ms]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:211
# args: MAX_QUERY_PERIOD
query\ period\ cannot\ exceed\ %s = query period cannot exceed {0}

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:355
# args: msg.getNamespace()
cannot\ find\ namespace[%s] = cannot find namespace[{0}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:228
# args: msg.getMetricName(),msg.getNamespace()
cannot\ find\ metric[%s]\ in\ namespace[%s] = cannot find metric[{0}] in namespace[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:378
# args: msg.getMetricName(),labels,label.getKey()
metric[%s]'s\ labels[%s]\ does\ not\ include\ [%s] = metric[{0}]'s labels[{1}] does not include [{2}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:253
# args: msg.getMetricName(),l.getValue()
metric[%s]\ does\ not\ has\ filter[%s] = metric[{0}] does not has filter[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:324
# args: msg.getSession().getAccountUuid(),opt.get().getValue()
account[uuid\:\ %s]\ has\ no\ access\ to\ the\ resource[uuid\:\ %s] = account[uuid: {0}] has no access to the resource[uuid: {1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:346
# args: 
if\ namespace\ is\ all,\ not\ support\ specify\ metric\ and\ labels = if namespace is all, not support specify metric and labels

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:440
# args: msg.getNamespace()
no\ namespace[%s]\ defined\ in\ the\ system = no namespace[{0}] defined in the system

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:443
# args: msg.getNamespace(),msg.getMetricName()
the\ namespace[%s]\ has\ no\ metric[%s] = the namespace[{0}] has no metric[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:433
# args: 
The\ url\ format\ is\ invalid,\ the\ beginning\ is\ not\ http = The url format is invalid, the beginning is not http

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:449
# args: 
Illegal\ json\ string,\ labelsJsonStr\ format\ is\ invalid = Illegal json string, labelsJsonStr format is invalid

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:477
# args: url
platform[url\=%s]\ already\ exists = platform[url={0}] already exists

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:498
# args: msg.getAlertDataUuid()
alert\ acknowledgement\ record\ does\ not\ exist = alert acknowledgement record does not exist

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:516
# args: tableName
invalid\ table[%s] = invalid table[{0}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:522
# args: endTime,startTime
endTime[%s]\ must\ not\ be\ before\ startTime[%s] = endTime[{0}] must not be before startTime[{1}]

# at: src/main/java/org/zstack/zwatch/api/ZWatchApiInterceptor.java:527
# args: maxDurationDay
the\ time\ interval\ exceeds\ %\ days = the time interval exceeds % days

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:19
# args: 
Normal = Normal

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:17
# args: 
Important = Important

# at: src/main/java/org/zstack/zwatch/datatype/EmergencyLevel.java:15
# args: 
Emergent = Emergent

# at: src/main/java/org/zstack/zwatch/datatype/Function.java:106
# args: expr,e.getMessage()
invalid\ function\:\ %s,\ %s = invalid function: {0}, {1}

# at: src/main/java/org/zstack/zwatch/datatype/Function.java:110
# args: expr
invalid\ expression\:\ %s,\ no\ function\ found = invalid expression: {0}, no function found

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:58
# args: str
the\ label\ string[%s]\ contains\ no\ valid\ operator = the label string[{0}] contains no valid operator

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:79
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'key'\ field\ cannot\ be\ null.\ %s = invalid label, 'key' field cannot be null. {0}

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:82
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'op'\ field\ is\ null\ or\ something\ another\ than\ Regex\ and\ Equal.\ %s = invalid label, 'op' field is null or something another than Regex and Equal. {0}

# at: src/main/java/org/zstack/zwatch/datatype/Label.java:85
# args: JSONObjectUtil.toJsonString(this)
invalid\ label,\ 'value'\ field\ cannot\ be\ null.\ %s = invalid label, 'value' field cannot be null. {0}

# at: src/main/java/org/zstack/zwatch/datatype/ValueCondition.java:73
# args: str
the\ ValueCondition\ string[%s]\ require\ 'value'\ as\ key\  = the ValueCondition string[{0}] require 'value' as key 

# at: src/main/java/org/zstack/zwatch/function/ArgumentChecker.java:30
# args: value,name
invalid\ value[%s]\ of\ the\ argument[%s] = invalid value[{0}] of the argument[{1}]

# at: src/main/java/org/zstack/zwatch/function/ExtremumFunction.java:24
# args: 
unknown\ arguments = unknown arguments

# at: src/main/java/org/zstack/zwatch/function/ExtremumFunction.java:30
# args: 
missing\ required\ argument = missing required argument

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:88
# args: name
missing\ required\ argument[%s] = missing required argument[{0}]

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:101
# args: k
duplicate\ argument[%s] = duplicate argument[{0}]

# at: src/main/java/org/zstack/zwatch/function/MetricFunction.java:116
# args: func.getName()
unknown\ function[%s] = unknown function[{0}]

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:32
# args: v
value[%s]\ is\ not\ a\ Integer\ number = value[{0}] is not a Integer number

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:19
# args: v
invalid\ argument[limit\:%s],\ it\ can't\ be\ a\ negative\ number = invalid argument[limit:{0}], it can't be a negative number

# at: src/main/java/org/zstack/zwatch/function/PaginationFunction.java:29
# args: v
invalid\ argument[start\:%s],\ it\ can't\ be\ a\ negative\ number = invalid argument[start:{0}], it can't be a negative number

# at: src/main/java/org/zstack/zwatch/function/SortFunction.java:42
# args: arg.name
unknown\ argument[%s] = unknown argument[{0}]

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:62
# args: ret.getError()
unable\ to\ query\ influxdb,\ %s = unable to query influxdb, {0}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:106
# args: JSONObjectUtil.toJsonString(ret)
invalid\ influxdb\ response\:\ %s,\ no\ name\ found\ in\ columns = invalid influxdb response: {0}, no name found in columns

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:92
# args: retention,res.getError()
failed\ to\ create\ influxdb\ retention\ '%s',\ %s = failed to create influxdb retention '{0}', {1}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:85
# args: retention,res.getError()
failed\ to\ alter\ influxdb\ retention\ '%s',\ %s = failed to alter influxdb retention '{0}', {1}

# at: src/main/java/org/zstack/zwatch/influxdb/InfluxDatabaseCreator.java:124
# args: defaultUserName,res.getError()
failed\ to\ create\ influxdb\ default\ user\ '%s',\ %s = failed to create influxdb default user '{0}', {1}

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:806
# args: name
cannot\ find\ EventFamily[name\:%s] = cannot find EventFamily[name:{0}]

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:797
# args: name,namespace
cannot\ find\ EventFamily[name\:%s,\ namespace\:%s] = cannot find EventFamily[name:{0}, namespace:{1}]

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:726
# args: label.getKey(),nameSpaceLabelList
invalid\ query\ label[%s].\ Allowed\ label\ names\ are\ %s = invalid query label[{0}]. Allowed label names are {1}

# at: src/main/java/org/zstack/zwatch/migratedb/MigrateDBEventDatabaseDriver.java:627
# args: name.getValue(),InfluxEventDataV2.FIELD_NAMESPACE
there\ are\ multiple\ EventFamily\ with\ the\ name[%s],\ you\ must\ specify\ the\ label[%s] = there are multiple EventFamily with the name[{0}], you must specify the label[{1}]

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:55
# args: msg.getInstanceUuid()
the\ instance[%s]\ is\ already\ in\ the\ group = the instance[{0}] is already in the group

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:66
# args: msg.getInstanceUuid()
instance[%s]\ is\ not\ in\ the\ group = instance[{0}] is not in the group

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupApiInterceptor.java:76
# args: msg.getGroupUuid()
The\ monitorGroup[%s]\ does\ not\ have\ an\ monitorTemplate\ applied = The monitorGroup[{0}] does not have an monitorTemplate applied

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupBase.java:333
# args: 
The\ instance\ in\ the\ group\ has\ reached\ the\ maximum\ limit = The instance in the group has reached the maximum limit

# at: src/main/java/org/zstack/zwatch/monitorgroup/MonitorGroupManagerImpl.java:607
# args: 
The\ rule\ in\ the\ template\ has\ reached\ the\ maximum\ limit = The rule in the template has reached the maximum limit

# at: src/main/java/org/zstack/zwatch/mysql/MysqlDatabaseDriver.java:51
# args: qo.getNamespaceName()
no\ mysql\ namespace[%s]\ found = no mysql namespace[{0}] found

# at: src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:48
# args: getName(),queryObject.getMetricName()
namespace[%s]\ has\ no\ metric[%s] = namespace[{0}] has no metric[{1}]

# at: src/main/java/org/zstack/zwatch/namespace/AbstractNamespace.java:54
# args: m.getName(),getName(),l.getKey()
metric[%s]\ of\ the\ namespace[%s]\ has\ no\ label\ named\ %s = metric[{0}] of the namespace[{1}] has no label named {2}

# at: src/main/java/org/zstack/zwatch/namespace/NamespaceEventManagerImpl.java:437
# args: 
error\ happened\ but\ reason\ not\ specified = error happened but reason not specified

# at: src/main/java/org/zstack/zwatch/namespace/SystemNamespace.java:32
# args: d,Platform.getManagementServerIp()
folder[%s]\ not\ found\ on\ the\ management\ server[%s] = folder[{0}] not found on the management server[{1}]

# at: src/main/java/org/zstack/zwatch/prometheus/KvmHostScrape.java:165
# args: rsp.getError()
%s = {0}

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:35
# args: 
LessThanOrEqualTo = LessThanOrEqualTo

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:33
# args: 
LessThan = LessThan

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:31
# args: 
GreaterThan = GreaterThan

# at: src/main/java/org/zstack/zwatch/ruleengine/ComparisonOperator.java:29
# args: 
GreaterThanOrEqualTo = GreaterThanOrEqualTo

# at: src/main/java/org/zstack/zwatch/utils/ResourceVOToNamespaceMappingUtils.java:78
# args: voClassSimpleName
resource[%s]\ doesn't\ support\ zwatch\ return\ with\ clause = resource[{0}] doesn't support zwatch return with clause

# at: src/test/java/org/zstack/test/TestSafeWhile.java:80
# args: 
on\ purpose = on purpose

# at: src/test/java/org/zstack/test/TestSafeWhile.java:56
# args: item
on\ purpose\ %d = on purpose {0}

# at: src/test/java/org/zstack/test/TestSafeWhile.java:39
# args: item
I\ should\ not\ be\ in\ error\ list\ %d = I should not be in error list {0}

# at: src/test/java/org/zstack/test/TestSafeWhile.java:40
# args: item
I\ should\ not\ be\ in\ error\ list\ either\ %d = I should not be in error list either {0}

# at: src/test/java/org/zstack/test/TestSafeWhile.java:63
# args: 
done,\ on\ purpose = done, on purpose

# at: src/test/java/org/zstack/test/TestSafeWhile.java:81
# args: 
I\ should\ not\ be\ errs\ list = I should not be errs list

# at: src/test/java/org/zstack/test/TestSafeWhile.java:82
# args: 
I\ should\ not\ be\ errs\ list\ either. = I should not be errs list either.

# at: src/test/java/org/zstack/test/aop/ManInTheMiddleService.java:40
# args: 
unit\ test\ asks\ it\ to\ fail = unit test asks it to fail

# at: src/test/java/org/zstack/test/compute/hostallocator/HostAllocateExtension.java:22
# args: 
On\ purpose = On purpose

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:67
# args: 
on\ purpose\ 3 = on purpose 3

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:75
# args: 
on\ purpose\ 1 = on purpose 1

# at: src/test/java/org/zstack/test/core/asyncbackup/TestSafeCompletion.java:83
# args: 
on\ purpose\ 2 = on purpose 2