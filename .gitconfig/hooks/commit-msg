#!/usr/bin/env python 
#
# NOTE(weiw): although we could use shell script, but python script may
# be easier to port to Windows/MacOS/Linux
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

import subprocess
import traceback
import sys
import re

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    YELLOW = '\033[0;33m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

WARNS = 0

def main():
    try:
        if not check_commit_msg_enabled():
            return
        check_user_email()
        check_commit_msg(sys.argv[1])
        if WARNS > 3:
            print(bcolors.FAIL + bcolors.BOLD + "ERROR: get %s warning, stop commit for world peace\n\nCOMMIT STOPPED" % WARNS + bcolors.ENDC)
            exit(1)
    except Exception as e:
        print("get exception while check commit msg: %s" % e)
        traceback.print_exc()


def check_commit_msg(file_path):
    global WARNS
    bump_version = False
    jira_link = False
    merge_commit = False
    second_line_is_blank = False
    header_not_change = False
    change_id = False
    jira_link_not_changed = False
    msg_lines = 0
    FAIL = False

    jira_patterns = [r"\bZSTAC-\d+\b", r"\bZSTACK-\d+\b", r"\bMINI-\d+\b", 
                     r"\bZOPS-\d+\b", r"\bZHCI-\d+\b"]
    with open(file_path, 'r') as f:
        lines = f.readlines()
        if "merge branch" in lines[0].lower():
            merge_commit = True
        if "" == lines[1].strip():
            second_line_is_blank = True
        if lines[0].strip().endswith("]: <description>"):
            header_not_change = True

        for l in lines:
            if l.startswith("# Please enter the commit"):
                break
            msg_lines += 1
            if "bump " in l.lower():
                bump_version = True
            if "change-id" in l.lower():
                change_id = True
            if "ZSTAC-XXXX".lower() in l.lower():
                jira_link_not_changed = True
            for pattern in jira_patterns:
                if re.search(pattern, l, re.I):
                    jira_link = True
        
    if bump_version or merge_commit:
        return

    if msg_lines == 1:
        WARNS += 1
        print(bcolors.FAIL + "WARNING: one-line commit msg should only appropriate for bump version!" + bcolors.ENDC)
    if not second_line_is_blank:
        WARNS += 1
        print(bcolors.FAIL + "WARNING: the second line should left blank!" + bcolors.ENDC)
    if not jira_link:
        WARNS += 1
        print(bcolors.FAIL + "WARNING: no jira link found! it should be very rarely!" + bcolors.ENDC)
    if header_not_change:
        WARNS += 1
        FAIL = True
        print(bcolors.FAIL + bcolors.BOLD + "ERROR: header is same as template! <descrption> should be filled!" + bcolors.ENDC + bcolors.ENDC)
    if not change_id:
        WARNS += 1
        FAIL = True
        print(bcolors.FAIL + bcolors.BOLD + "ERROR: no change-id found!" + bcolors.ENDC + bcolors.ENDC)
    if jira_link_not_changed:
        WARNS += 1
        FAIL = True
        print(bcolors.FAIL + bcolors.BOLD + "ERROR: jira link same as template! ZSTAC-XXXX should be replaced!" + bcolors.ENDC + bcolors.ENDC)

    if FAIL is True:
        print(bcolors.FAIL + bcolors.BOLD + "\nCOMMIT STOPPED" + bcolors.ENDC + bcolors.ENDC)
        exit(1)

def check_user_email():
    global WARNS

    bashCommand = "git config user.email"
    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    output = output.decode()
    if error != None:
        print("get error while running git config user.email: %s" % error)
    if "zstack" not in output:
        WARNS += 1
        print(bcolors.YELLOW + "WARNING: 'user email' of this commit not contains 'zstack', " + 
              "if you are not an employee of ZStack, please just ignore this warning" + bcolors.ENDC)

def check_commit_msg_enabled():
    bashCommand = "git config --get zstack.checkCommitMsg"
    process = subprocess.Popen(bashCommand.split(), stdout=subprocess.PIPE)
    output, error = process.communicate()
    output = output.decode()
    if error != None:
        print("get error while running git config --get zstack.checkCommitMsg: %s" % error)
        return False
    elif "false" in output.lower():
        return False
    return True


if __name__ == "__main__":
    main()

#test "" = "$(grep '^Signed-off-by: ' "$1" |
#	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
#	echo >&2 Duplicate Signed-off-by lines.
#	exit 1
#}
#
#grep '<description>' $1 && echo "\033[33mdescription in commit msg header not filed!"
#grep -E 'ZSTAC-'